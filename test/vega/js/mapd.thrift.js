//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MapD_connect_args = function(args) {
  this.user = null;
  this.passwd = null;
  this.dbname = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.passwd !== undefined && args.passwd !== null) {
      this.passwd = args.passwd;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
MapD_connect_args.prototype = {};
MapD_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_connect_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_connect_result.prototype = {};
MapD_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_disconnect_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_disconnect_args.prototype = {};
MapD_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_disconnect_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_disconnect_result.prototype = {};
MapD_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_server_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_server_status_args.prototype = {};
MapD_get_server_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_server_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TServerStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_server_status_result.prototype = {};
MapD_get_server_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TServerStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_tables_args.prototype = {};
MapD_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_tables_result.prototype = {};
MapD_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.success = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = input.readString().value;
          this.success.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter185 in this.success)
    {
      if (this.success.hasOwnProperty(iter185))
      {
        iter185 = this.success[iter185];
        output.writeString(iter185);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_details_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_details_args.prototype = {};
MapD_get_table_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_details_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_details_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_details_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TTableDetails(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_table_details_result.prototype = {};
MapD_get_table_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TTableDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_details_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_users_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_users_args.prototype = {};
MapD_get_users_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_users_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_users_result.prototype = {};
MapD_get_users_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size186 = 0;
        var _rtmp3190;
        this.success = [];
        var _etype189 = 0;
        _rtmp3190 = input.readListBegin();
        _etype189 = _rtmp3190.etype;
        _size186 = _rtmp3190.size;
        for (var _i191 = 0; _i191 < _size186; ++_i191)
        {
          var elem192 = null;
          elem192 = input.readString().value;
          this.success.push(elem192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter193 in this.success)
    {
      if (this.success.hasOwnProperty(iter193))
      {
        iter193 = this.success[iter193];
        output.writeString(iter193);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_databases_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_databases_args.prototype = {};
MapD_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_databases_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TDBInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_databases_result.prototype = {};
MapD_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size194 = 0;
        var _rtmp3198;
        this.success = [];
        var _etype197 = 0;
        _rtmp3198 = input.readListBegin();
        _etype197 = _rtmp3198.etype;
        _size194 = _rtmp3198.size;
        for (var _i199 = 0; _i199 < _size194; ++_i199)
        {
          var elem200 = null;
          elem200 = new TDBInfo();
          elem200.read(input);
          this.success.push(elem200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter201 in this.success)
    {
      if (this.success.hasOwnProperty(iter201))
      {
        iter201 = this.success[iter201];
        iter201.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_version_args = function(args) {
};
MapD_get_version_args.prototype = {};
MapD_get_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_version_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_version_result.prototype = {};
MapD_get_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_start_heap_profile_args.prototype = {};
MapD_start_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_heap_profile_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_start_heap_profile_result.prototype = {};
MapD_start_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_stop_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_stop_heap_profile_args.prototype = {};
MapD_stop_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_stop_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_stop_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_stop_heap_profile_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_stop_heap_profile_result.prototype = {};
MapD_stop_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_stop_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_stop_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_heap_profile_args.prototype = {};
MapD_get_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_heap_profile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_heap_profile_result.prototype = {};
MapD_get_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_heap_profile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_gpu_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_memory_gpu_args.prototype = {};
MapD_get_memory_gpu_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_gpu_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_gpu_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_gpu_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_memory_gpu_result.prototype = {};
MapD_get_memory_gpu_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_gpu_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_gpu_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_summary_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_memory_summary_args.prototype = {};
MapD_get_memory_summary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_summary_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_summary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_summary_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TMemorySummary(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_memory_summary_result.prototype = {};
MapD_get_memory_summary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TMemorySummary();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_summary_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_summary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_clear_cpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_clear_cpu_memory_args.prototype = {};
MapD_clear_cpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_cpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_cpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_clear_cpu_memory_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_clear_cpu_memory_result.prototype = {};
MapD_clear_cpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_cpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_cpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_clear_gpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_clear_gpu_memory_args.prototype = {};
MapD_clear_gpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_gpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_gpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_clear_gpu_memory_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_clear_gpu_memory_result.prototype = {};
MapD_clear_gpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_gpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_gpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_args = function(args) {
  this.session = null;
  this.query = null;
  this.column_format = null;
  this.nonce = null;
  this.first_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
  }
};
MapD_sql_execute_args.prototype = {};
MapD_sql_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TQueryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_sql_execute_result.prototype = {};
MapD_sql_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_gpudf_args = function(args) {
  this.session = null;
  this.query = null;
  this.device_id = 0;
  this.first_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
  }
};
MapD_sql_execute_gpudf_args.prototype = {};
MapD_sql_execute_gpudf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_gpudf_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_gpudf_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_gpudf_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TGpuDataFrame(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_sql_execute_gpudf_result.prototype = {};
MapD_sql_execute_gpudf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TGpuDataFrame();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_gpudf_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_gpudf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_interrupt_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_interrupt_args.prototype = {};
MapD_interrupt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_interrupt_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_interrupt_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_interrupt_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_interrupt_result.prototype = {};
MapD_interrupt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_interrupt_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_interrupt_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_validate_args = function(args) {
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
MapD_sql_validate_args.prototype = {};
MapD_sql_validate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_validate_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_validate_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_validate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_sql_validate_result.prototype = {};
MapD_sql_validate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size202 = 0;
        var _rtmp3206;
        this.success = {};
        var _ktype203 = 0;
        var _vtype204 = 0;
        _rtmp3206 = input.readMapBegin();
        _ktype203 = _rtmp3206.ktype;
        _vtype204 = _rtmp3206.vtype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          if (_i207 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key208 = null;
          var val209 = null;
          key208 = input.readString().value;
          val209 = new TColumnType();
          val209.read(input);
          this.success[key208] = val209;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_validate_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_validate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter210 in this.success)
    {
      if (this.success.hasOwnProperty(kiter210))
      {
        var viter211 = this.success[kiter210];
        output.writeString(kiter210);
        viter211.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_set_execution_mode_args = function(args) {
  this.session = null;
  this.mode = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
MapD_set_execution_mode_args.prototype = {};
MapD_set_execution_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_set_execution_mode_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_set_execution_mode_result.prototype = {};
MapD_set_execution_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_vega_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.vega_json = null;
  this.compression_level = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
    if (args.compression_level !== undefined && args.compression_level !== null) {
      this.compression_level = args.compression_level;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_render_vega_args.prototype = {};
MapD_render_vega_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compression_level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  if (this.compression_level !== null && this.compression_level !== undefined) {
    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);
    output.writeI32(this.compression_level);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_vega_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_render_vega_result.prototype = {};
MapD_render_vega_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_result_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new TPixel(args.pixel);
    }
    if (args.table_col_names !== undefined && args.table_col_names !== null) {
      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_result_row_for_pixel_args.prototype = {};
MapD_get_result_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size212 = 0;
        var _rtmp3216;
        this.table_col_names = {};
        var _ktype213 = 0;
        var _vtype214 = 0;
        _rtmp3216 = input.readMapBegin();
        _ktype213 = _rtmp3216.ktype;
        _vtype214 = _rtmp3216.vtype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          if (_i217 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key218 = null;
          var val219 = null;
          key218 = input.readString().value;
          var _size220 = 0;
          var _rtmp3224;
          val219 = [];
          var _etype223 = 0;
          _rtmp3224 = input.readListBegin();
          _etype223 = _rtmp3224.etype;
          _size220 = _rtmp3224.size;
          for (var _i225 = 0; _i225 < _size220; ++_i225)
          {
            var elem226 = null;
            elem226 = input.readString().value;
            val219.push(elem226);
          }
          input.readListEnd();
          this.table_col_names[key218] = val219;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_result_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_result_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_col_names !== null && this.table_col_names !== undefined) {
    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));
    for (var kiter227 in this.table_col_names)
    {
      if (this.table_col_names.hasOwnProperty(kiter227))
      {
        var viter228 = this.table_col_names[kiter227];
        output.writeString(kiter227);
        output.writeListBegin(Thrift.Type.STRING, viter228.length);
        for (var iter229 in viter228)
        {
          if (viter228.hasOwnProperty(iter229))
          {
            iter229 = viter228[iter229];
            output.writeString(iter229);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_result_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPixelTableRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_result_row_for_pixel_result.prototype = {};
MapD_get_result_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPixelTableRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_result_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_result_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_get_frontend_view_args.prototype = {};
MapD_get_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_view_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_frontend_view_result.prototype = {};
MapD_get_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_views_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_frontend_views_args.prototype = {};
MapD_get_frontend_views_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_views_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TFrontendView]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_frontend_views_result.prototype = {};
MapD_get_frontend_views_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size230 = 0;
        var _rtmp3234;
        this.success = [];
        var _etype233 = 0;
        _rtmp3234 = input.readListBegin();
        _etype233 = _rtmp3234.etype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var elem236 = null;
          elem236 = new TFrontendView();
          elem236.read(input);
          this.success.push(elem236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter237 in this.success)
    {
      if (this.success.hasOwnProperty(iter237))
      {
        iter237 = this.success[iter237];
        iter237.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  this.view_state = null;
  this.image_hash = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
MapD_create_frontend_view_args.prototype = {};
MapD_create_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 3);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_frontend_view_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_create_frontend_view_result.prototype = {};
MapD_create_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_delete_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_delete_frontend_view_args.prototype = {};
MapD_delete_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_delete_frontend_view_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_delete_frontend_view_result.prototype = {};
MapD_delete_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_link_view_args = function(args) {
  this.session = null;
  this.link = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
  }
};
MapD_get_link_view_args.prototype = {};
MapD_get_link_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 2);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_link_view_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_link_view_result.prototype = {};
MapD_get_link_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_link_args = function(args) {
  this.session = null;
  this.view_state = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
MapD_create_link_args.prototype = {};
MapD_create_link_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_link_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_create_link_result.prototype = {};
MapD_create_link_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_binary_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TRow]);
    }
  }
};
MapD_load_table_binary_args.prototype = {};
MapD_load_table_binary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size238 = 0;
        var _rtmp3242;
        this.rows = [];
        var _etype241 = 0;
        _rtmp3242 = input.readListBegin();
        _etype241 = _rtmp3242.etype;
        _size238 = _rtmp3242.size;
        for (var _i243 = 0; _i243 < _size238; ++_i243)
        {
          var elem244 = null;
          elem244 = new TRow();
          elem244.read(input);
          this.rows.push(elem244);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter245 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter245))
      {
        iter245 = this.rows[iter245];
        iter245.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_binary_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_load_table_binary_result.prototype = {};
MapD_load_table_binary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TStringRow]);
    }
  }
};
MapD_load_table_args.prototype = {};
MapD_load_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size246 = 0;
        var _rtmp3250;
        this.rows = [];
        var _etype249 = 0;
        _rtmp3250 = input.readListBegin();
        _etype249 = _rtmp3250.etype;
        _size246 = _rtmp3250.size;
        for (var _i251 = 0; _i251 < _size246; ++_i251)
        {
          var elem252 = null;
          elem252 = new TStringRow();
          elem252.read(input);
          this.rows.push(elem252);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter253 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter253))
      {
        iter253 = this.rows[iter253];
        iter253.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_load_table_result.prototype = {};
MapD_load_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_detect_column_types_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
MapD_detect_column_types_args.prototype = {};
MapD_detect_column_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_detect_column_types_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TDetectResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_detect_column_types_result.prototype = {};
MapD_detect_column_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TDetectResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.row_desc = null;
  this.table_type = 0;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.table_type !== undefined && args.table_type !== null) {
      this.table_type = args.table_type;
    }
  }
};
MapD_create_table_args.prototype = {};
MapD_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size254 = 0;
        var _rtmp3258;
        this.row_desc = [];
        var _etype257 = 0;
        _rtmp3258 = input.readListBegin();
        _etype257 = _rtmp3258.etype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var elem260 = null;
          elem260 = new TColumnType();
          elem260.read(input);
          this.row_desc.push(elem260);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.table_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter261 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter261))
      {
        iter261 = this.row_desc[iter261];
        iter261.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.table_type !== null && this.table_type !== undefined) {
    output.writeFieldBegin('table_type', Thrift.Type.I32, 4);
    output.writeI32(this.table_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_table_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_create_table_result.prototype = {};
MapD_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
MapD_import_table_args.prototype = {};
MapD_import_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_import_table_result.prototype = {};
MapD_import_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_geo_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  this.row_desc = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
  }
};
MapD_import_geo_table_args.prototype = {};
MapD_import_geo_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size262 = 0;
        var _rtmp3266;
        this.row_desc = [];
        var _etype265 = 0;
        _rtmp3266 = input.readListBegin();
        _etype265 = _rtmp3266.etype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          var elem268 = null;
          elem268 = new TColumnType();
          elem268.read(input);
          this.row_desc.push(elem268);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_geo_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_geo_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter269 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter269))
      {
        iter269 = this.row_desc[iter269];
        iter269.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_geo_table_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_import_geo_table_result.prototype = {};
MapD_import_geo_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_geo_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_geo_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_status_args = function(args) {
  this.session = null;
  this.import_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.import_id !== undefined && args.import_id !== null) {
      this.import_id = args.import_id;
    }
  }
};
MapD_import_table_status_args.prototype = {};
MapD_import_table_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.import_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.import_id !== null && this.import_id !== undefined) {
    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);
    output.writeString(this.import_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TImportStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_import_table_status_result.prototype = {};
MapD_import_table_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TImportStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_query_args = function(args) {
  this.session = null;
  this.query_ra = null;
  this.just_explain = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query_ra !== undefined && args.query_ra !== null) {
      this.query_ra = args.query_ra;
    }
    if (args.just_explain !== undefined && args.just_explain !== null) {
      this.just_explain = args.just_explain;
    }
  }
};
MapD_start_query_args.prototype = {};
MapD_start_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query_ra = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.just_explain = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_query_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_query_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query_ra !== null && this.query_ra !== undefined) {
    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 2);
    output.writeString(this.query_ra);
    output.writeFieldEnd();
  }
  if (this.just_explain !== null && this.just_explain !== undefined) {
    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 3);
    output.writeBool(this.just_explain);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_query_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPendingQuery(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_start_query_result.prototype = {};
MapD_start_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPendingQuery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_query_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_execute_first_step_args = function(args) {
  this.pending_query = null;
  if (args) {
    if (args.pending_query !== undefined && args.pending_query !== null) {
      this.pending_query = new TPendingQuery(args.pending_query);
    }
  }
};
MapD_execute_first_step_args.prototype = {};
MapD_execute_first_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending_query = new TPendingQuery();
        this.pending_query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_first_step_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_first_step_args');
  if (this.pending_query !== null && this.pending_query !== undefined) {
    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);
    this.pending_query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_execute_first_step_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_execute_first_step_result.prototype = {};
MapD_execute_first_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_first_step_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_first_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_broadcast_serialized_rows_args = function(args) {
  this.serialized_rows = null;
  this.row_desc = null;
  this.query_id = null;
  if (args) {
    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
      this.serialized_rows = args.serialized_rows;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.query_id !== undefined && args.query_id !== null) {
      this.query_id = args.query_id;
    }
  }
};
MapD_broadcast_serialized_rows_args.prototype = {};
MapD_broadcast_serialized_rows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialized_rows = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size270 = 0;
        var _rtmp3274;
        this.row_desc = [];
        var _etype273 = 0;
        _rtmp3274 = input.readListBegin();
        _etype273 = _rtmp3274.etype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          var elem276 = null;
          elem276 = new TColumnType();
          elem276.read(input);
          this.row_desc.push(elem276);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.query_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_broadcast_serialized_rows_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_broadcast_serialized_rows_args');
  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);
    output.writeString(this.serialized_rows);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter277 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter277))
      {
        iter277 = this.row_desc[iter277];
        iter277.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.query_id !== null && this.query_id !== undefined) {
    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);
    output.writeI64(this.query_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_broadcast_serialized_rows_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_broadcast_serialized_rows_result.prototype = {};
MapD_broadcast_serialized_rows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_broadcast_serialized_rows_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_broadcast_serialized_rows_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_vega_raw_pixels_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.node_idx = null;
  this.vega_json = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.node_idx !== undefined && args.node_idx !== null) {
      this.node_idx = args.node_idx;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
  }
};
MapD_render_vega_raw_pixels_args.prototype = {};
MapD_render_vega_raw_pixels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.node_idx = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_raw_pixels_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_raw_pixels_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.node_idx !== null && this.node_idx !== undefined) {
    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);
    output.writeI16(this.node_idx);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_vega_raw_pixels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TRawPixelDataResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_render_vega_raw_pixels_result.prototype = {};
MapD_render_vega_raw_pixels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TRawPixelDataResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_raw_pixels_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_raw_pixels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_insert_data_args = function(args) {
  this.session = null;
  this.insert_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.insert_data !== undefined && args.insert_data !== null) {
      this.insert_data = new TInsertData(args.insert_data);
    }
  }
};
MapD_insert_data_args.prototype = {};
MapD_insert_data_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.insert_data = new TInsertData();
        this.insert_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_insert_data_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_insert_data_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.insert_data !== null && this.insert_data !== undefined) {
    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);
    this.insert_data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_insert_data_result = function(args) {
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_insert_data_result.prototype = {};
MapD_insert_data_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_insert_data_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_insert_data_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_descriptor_args.prototype = {};
MapD_get_table_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_table_descriptor_result.prototype = {};
MapD_get_table_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = {};
        var _ktype279 = 0;
        var _vtype280 = 0;
        _rtmp3282 = input.readMapBegin();
        _ktype279 = _rtmp3282.ktype;
        _vtype280 = _rtmp3282.vtype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          if (_i283 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key284 = null;
          var val285 = null;
          key284 = input.readString().value;
          val285 = new TColumnType();
          val285.read(input);
          this.success[key284] = val285;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter286 in this.success)
    {
      if (this.success.hasOwnProperty(kiter286))
      {
        var viter287 = this.success[kiter286];
        output.writeString(kiter286);
        viter287.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_row_descriptor_args.prototype = {};
MapD_get_row_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_row_descriptor_result.prototype = {};
MapD_get_row_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.success = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = new TColumnType();
          elem294.read(input);
          this.success.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter295 in this.success)
    {
      if (this.success.hasOwnProperty(iter295))
      {
        iter295 = this.success[iter295];
        iter295.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_args = function(args) {
  this.session = null;
  this.query = null;
  this.render_type = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.render_type !== undefined && args.render_type !== null) {
      this.render_type = args.render_type;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_render_args.prototype = {};
MapD_render_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.render_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.render_type !== null && this.render_type !== undefined) {
    output.writeFieldBegin('render_type', Thrift.Type.STRING, 3);
    output.writeString(this.render_type);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_render_result.prototype = {};
MapD_render_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_rows_for_pixels_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixels = null;
  this.table_name = null;
  this.col_names = null;
  this.column_format = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixels !== undefined && args.pixels !== null) {
      this.pixels = Thrift.copyList(args.pixels, [TPixel]);
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.col_names !== undefined && args.col_names !== null) {
      this.col_names = Thrift.copyList(args.col_names, [null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_rows_for_pixels_args.prototype = {};
MapD_get_rows_for_pixels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.pixels = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = new TPixel();
          elem302.read(input);
          this.pixels.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size303 = 0;
        var _rtmp3307;
        this.col_names = [];
        var _etype306 = 0;
        _rtmp3307 = input.readListBegin();
        _etype306 = _rtmp3307.etype;
        _size303 = _rtmp3307.size;
        for (var _i308 = 0; _i308 < _size303; ++_i308)
        {
          var elem309 = null;
          elem309 = input.readString().value;
          this.col_names.push(elem309);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_rows_for_pixels_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_rows_for_pixels_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixels !== null && this.pixels !== undefined) {
    output.writeFieldBegin('pixels', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.pixels.length);
    for (var iter310 in this.pixels)
    {
      if (this.pixels.hasOwnProperty(iter310))
      {
        iter310 = this.pixels[iter310];
        iter310.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.col_names !== null && this.col_names !== undefined) {
    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);
    for (var iter311 in this.col_names)
    {
      if (this.col_names.hasOwnProperty(iter311))
      {
        iter311 = this.col_names[iter311];
        output.writeString(iter311);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_rows_for_pixels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPixelResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_rows_for_pixels_result.prototype = {};
MapD_get_rows_for_pixels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPixelResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_rows_for_pixels_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_rows_for_pixels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_name = null;
  this.col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new TPixel(args.pixel);
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.col_names !== undefined && args.col_names !== null) {
      this.col_names = Thrift.copyList(args.col_names, [null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_row_for_pixel_args.prototype = {};
MapD_get_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.col_names = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = input.readString().value;
          this.col_names.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.col_names !== null && this.col_names !== undefined) {
    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);
    for (var iter319 in this.col_names)
    {
      if (this.col_names.hasOwnProperty(iter319))
      {
        iter319 = this.col_names[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 7);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 8);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPixelRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_row_for_pixel_result.prototype = {};
MapD_get_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPixelRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapDClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MapDClient.prototype = {};
MapDClient.prototype.connect = function(user, passwd, dbname, callback) {
  this.send_connect(user, passwd, dbname, callback); 
  if (!callback) {
    return this.recv_connect();
  }
};

MapDClient.prototype.send_connect = function(user, passwd, dbname, callback) {
  this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_connect_args();
  args.user = user;
  args.passwd = passwd;
  args.dbname = dbname;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_connect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_connect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_connect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'connect failed: unknown result';
};
MapDClient.prototype.disconnect = function(session, callback) {
  this.send_disconnect(session, callback); 
  if (!callback) {
  this.recv_disconnect();
  }
};

MapDClient.prototype.send_disconnect = function(session, callback) {
  this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_disconnect_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_disconnect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_disconnect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_disconnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.get_server_status = function(session, callback) {
  this.send_get_server_status(session, callback); 
  if (!callback) {
    return this.recv_get_server_status();
  }
};

MapDClient.prototype.send_get_server_status = function(session, callback) {
  this.output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_server_status_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_server_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_server_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_server_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_server_status failed: unknown result';
};
MapDClient.prototype.get_tables = function(session, callback) {
  this.send_get_tables(session, callback); 
  if (!callback) {
    return this.recv_get_tables();
  }
};

MapDClient.prototype.send_get_tables = function(session, callback) {
  this.output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_tables_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_tables();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_tables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_tables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_tables failed: unknown result';
};
MapDClient.prototype.get_table_details = function(session, table_name, callback) {
  this.send_get_table_details(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_table_details();
  }
};

MapDClient.prototype.send_get_table_details = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_table_details_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_table_details();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_table_details = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_table_details_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_table_details failed: unknown result';
};
MapDClient.prototype.get_users = function(session, callback) {
  this.send_get_users(session, callback); 
  if (!callback) {
    return this.recv_get_users();
  }
};

MapDClient.prototype.send_get_users = function(session, callback) {
  this.output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_users_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_users();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_users = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_users_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_users failed: unknown result';
};
MapDClient.prototype.get_databases = function(session, callback) {
  this.send_get_databases(session, callback); 
  if (!callback) {
    return this.recv_get_databases();
  }
};

MapDClient.prototype.send_get_databases = function(session, callback) {
  this.output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_databases_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_databases();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_databases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_databases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_databases failed: unknown result';
};
MapDClient.prototype.get_version = function(callback) {
  this.send_get_version(callback); 
  if (!callback) {
    return this.recv_get_version();
  }
};

MapDClient.prototype.send_get_version = function(callback) {
  this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_version_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_version();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_version = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_version_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_version failed: unknown result';
};
MapDClient.prototype.start_heap_profile = function(session, callback) {
  this.send_start_heap_profile(session, callback); 
  if (!callback) {
  this.recv_start_heap_profile();
  }
};

MapDClient.prototype.send_start_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_start_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_start_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_start_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_start_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.stop_heap_profile = function(session, callback) {
  this.send_stop_heap_profile(session, callback); 
  if (!callback) {
  this.recv_stop_heap_profile();
  }
};

MapDClient.prototype.send_stop_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_stop_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_stop_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_stop_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_stop_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.get_heap_profile = function(session, callback) {
  this.send_get_heap_profile(session, callback); 
  if (!callback) {
    return this.recv_get_heap_profile();
  }
};

MapDClient.prototype.send_get_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_heap_profile failed: unknown result';
};
MapDClient.prototype.get_memory_gpu = function(session, callback) {
  this.send_get_memory_gpu(session, callback); 
  if (!callback) {
    return this.recv_get_memory_gpu();
  }
};

MapDClient.prototype.send_get_memory_gpu = function(session, callback) {
  this.output.writeMessageBegin('get_memory_gpu', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_memory_gpu_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_memory_gpu();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_memory_gpu = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_memory_gpu_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_memory_gpu failed: unknown result';
};
MapDClient.prototype.get_memory_summary = function(session, callback) {
  this.send_get_memory_summary(session, callback); 
  if (!callback) {
    return this.recv_get_memory_summary();
  }
};

MapDClient.prototype.send_get_memory_summary = function(session, callback) {
  this.output.writeMessageBegin('get_memory_summary', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_memory_summary_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_memory_summary();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_memory_summary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_memory_summary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_memory_summary failed: unknown result';
};
MapDClient.prototype.clear_cpu_memory = function(session, callback) {
  this.send_clear_cpu_memory(session, callback); 
  if (!callback) {
  this.recv_clear_cpu_memory();
  }
};

MapDClient.prototype.send_clear_cpu_memory = function(session, callback) {
  this.output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_clear_cpu_memory_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_clear_cpu_memory();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_clear_cpu_memory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_clear_cpu_memory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.clear_gpu_memory = function(session, callback) {
  this.send_clear_gpu_memory(session, callback); 
  if (!callback) {
  this.recv_clear_gpu_memory();
  }
};

MapDClient.prototype.send_clear_gpu_memory = function(session, callback) {
  this.output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_clear_gpu_memory_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_clear_gpu_memory();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_clear_gpu_memory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_clear_gpu_memory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.sql_execute = function(session, query, column_format, nonce, first_n, callback) {
  this.send_sql_execute(session, query, column_format, nonce, first_n, callback); 
  if (!callback) {
    return this.recv_sql_execute();
  }
};

MapDClient.prototype.send_sql_execute = function(session, query, column_format, nonce, first_n, callback) {
  this.output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_sql_execute_args();
  args.session = session;
  args.query = query;
  args.column_format = column_format;
  args.nonce = nonce;
  args.first_n = first_n;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_execute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_sql_execute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_sql_execute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_execute failed: unknown result';
};
MapDClient.prototype.sql_execute_gpudf = function(session, query, device_id, first_n, callback) {
  this.send_sql_execute_gpudf(session, query, device_id, first_n, callback); 
  if (!callback) {
    return this.recv_sql_execute_gpudf();
  }
};

MapDClient.prototype.send_sql_execute_gpudf = function(session, query, device_id, first_n, callback) {
  this.output.writeMessageBegin('sql_execute_gpudf', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_sql_execute_gpudf_args();
  args.session = session;
  args.query = query;
  args.device_id = device_id;
  args.first_n = first_n;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_execute_gpudf();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_sql_execute_gpudf = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_sql_execute_gpudf_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_execute_gpudf failed: unknown result';
};
MapDClient.prototype.interrupt = function(session, callback) {
  this.send_interrupt(session, callback); 
  if (!callback) {
  this.recv_interrupt();
  }
};

MapDClient.prototype.send_interrupt = function(session, callback) {
  this.output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_interrupt_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_interrupt();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_interrupt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_interrupt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.sql_validate = function(session, query, callback) {
  this.send_sql_validate(session, query, callback); 
  if (!callback) {
    return this.recv_sql_validate();
  }
};

MapDClient.prototype.send_sql_validate = function(session, query, callback) {
  this.output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_sql_validate_args();
  args.session = session;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_validate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_sql_validate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_sql_validate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_validate failed: unknown result';
};
MapDClient.prototype.set_execution_mode = function(session, mode, callback) {
  this.send_set_execution_mode(session, mode, callback); 
  if (!callback) {
  this.recv_set_execution_mode();
  }
};

MapDClient.prototype.send_set_execution_mode = function(session, mode, callback) {
  this.output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_set_execution_mode_args();
  args.session = session;
  args.mode = mode;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_set_execution_mode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_set_execution_mode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_set_execution_mode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this.send_render_vega(session, widget_id, vega_json, compression_level, nonce, callback); 
  if (!callback) {
    return this.recv_render_vega();
  }
};

MapDClient.prototype.send_render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this.output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_render_vega_args();
  args.session = session;
  args.widget_id = widget_id;
  args.vega_json = vega_json;
  args.compression_level = compression_level;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_render_vega();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_render_vega = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_render_vega_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'render_vega failed: unknown result';
};
MapDClient.prototype.get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback); 
  if (!callback) {
    return this.recv_get_result_row_for_pixel();
  }
};

MapDClient.prototype.send_get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this.output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_result_row_for_pixel_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixel = pixel;
  args.table_col_names = table_col_names;
  args.column_format = column_format;
  args.pixelRadius = pixelRadius;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_result_row_for_pixel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_result_row_for_pixel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_result_row_for_pixel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_result_row_for_pixel failed: unknown result';
};
MapDClient.prototype.get_frontend_view = function(session, view_name, callback) {
  this.send_get_frontend_view(session, view_name, callback); 
  if (!callback) {
    return this.recv_get_frontend_view();
  }
};

MapDClient.prototype.send_get_frontend_view = function(session, view_name, callback) {
  this.output.writeMessageBegin('get_frontend_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_frontend_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_frontend_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_frontend_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_frontend_view failed: unknown result';
};
MapDClient.prototype.get_frontend_views = function(session, callback) {
  this.send_get_frontend_views(session, callback); 
  if (!callback) {
    return this.recv_get_frontend_views();
  }
};

MapDClient.prototype.send_get_frontend_views = function(session, callback) {
  this.output.writeMessageBegin('get_frontend_views', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_frontend_views_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_frontend_views();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_frontend_views = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_frontend_views_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_frontend_views failed: unknown result';
};
MapDClient.prototype.create_frontend_view = function(session, view_name, view_state, image_hash, view_metadata, callback) {
  this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata, callback); 
  if (!callback) {
  this.recv_create_frontend_view();
  }
};

MapDClient.prototype.send_create_frontend_view = function(session, view_name, view_state, image_hash, view_metadata, callback) {
  this.output.writeMessageBegin('create_frontend_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.view_state = view_state;
  args.image_hash = image_hash;
  args.view_metadata = view_metadata;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_frontend_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_frontend_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_frontend_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.delete_frontend_view = function(session, view_name, callback) {
  this.send_delete_frontend_view(session, view_name, callback); 
  if (!callback) {
  this.recv_delete_frontend_view();
  }
};

MapDClient.prototype.send_delete_frontend_view = function(session, view_name, callback) {
  this.output.writeMessageBegin('delete_frontend_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_delete_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_delete_frontend_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_delete_frontend_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_delete_frontend_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.get_link_view = function(session, link, callback) {
  this.send_get_link_view(session, link, callback); 
  if (!callback) {
    return this.recv_get_link_view();
  }
};

MapDClient.prototype.send_get_link_view = function(session, link, callback) {
  this.output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_link_view_args();
  args.session = session;
  args.link = link;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_link_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_link_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_link_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_link_view failed: unknown result';
};
MapDClient.prototype.create_link = function(session, view_state, view_metadata, callback) {
  this.send_create_link(session, view_state, view_metadata, callback); 
  if (!callback) {
    return this.recv_create_link();
  }
};

MapDClient.prototype.send_create_link = function(session, view_state, view_metadata, callback) {
  this.output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_link_args();
  args.session = session;
  args.view_state = view_state;
  args.view_metadata = view_metadata;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_link();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_link = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_link_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create_link failed: unknown result';
};
MapDClient.prototype.load_table_binary = function(session, table_name, rows, callback) {
  this.send_load_table_binary(session, table_name, rows, callback); 
  if (!callback) {
  this.recv_load_table_binary();
  }
};

MapDClient.prototype.send_load_table_binary = function(session, table_name, rows, callback) {
  this.output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_load_table_binary_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table_binary();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_load_table_binary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_load_table_binary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.load_table = function(session, table_name, rows, callback) {
  this.send_load_table(session, table_name, rows, callback); 
  if (!callback) {
  this.recv_load_table();
  }
};

MapDClient.prototype.send_load_table = function(session, table_name, rows, callback) {
  this.output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_load_table_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_load_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_load_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.detect_column_types = function(session, file_name, copy_params, callback) {
  this.send_detect_column_types(session, file_name, copy_params, callback); 
  if (!callback) {
    return this.recv_detect_column_types();
  }
};

MapDClient.prototype.send_detect_column_types = function(session, file_name, copy_params, callback) {
  this.output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_detect_column_types_args();
  args.session = session;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_detect_column_types();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_detect_column_types = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_detect_column_types_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'detect_column_types failed: unknown result';
};
MapDClient.prototype.create_table = function(session, table_name, row_desc, table_type, callback) {
  this.send_create_table(session, table_name, row_desc, table_type, callback); 
  if (!callback) {
  this.recv_create_table();
  }
};

MapDClient.prototype.send_create_table = function(session, table_name, row_desc, table_type, callback) {
  this.output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_table_args();
  args.session = session;
  args.table_name = table_name;
  args.row_desc = row_desc;
  args.table_type = table_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.import_table = function(session, table_name, file_name, copy_params, callback) {
  this.send_import_table(session, table_name, file_name, copy_params, callback); 
  if (!callback) {
  this.recv_import_table();
  }
};

MapDClient.prototype.send_import_table = function(session, table_name, file_name, copy_params, callback) {
  this.output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_import_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_import_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_import_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.import_geo_table = function(session, table_name, file_name, copy_params, row_desc, callback) {
  this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, callback); 
  if (!callback) {
  this.recv_import_geo_table();
  }
};

MapDClient.prototype.send_import_geo_table = function(session, table_name, file_name, copy_params, row_desc, callback) {
  this.output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_import_geo_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.row_desc = row_desc;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_geo_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_import_geo_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_import_geo_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.import_table_status = function(session, import_id, callback) {
  this.send_import_table_status(session, import_id, callback); 
  if (!callback) {
    return this.recv_import_table_status();
  }
};

MapDClient.prototype.send_import_table_status = function(session, import_id, callback) {
  this.output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_import_table_status_args();
  args.session = session;
  args.import_id = import_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_table_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_import_table_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_import_table_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'import_table_status failed: unknown result';
};
MapDClient.prototype.start_query = function(session, query_ra, just_explain, callback) {
  this.send_start_query(session, query_ra, just_explain, callback); 
  if (!callback) {
    return this.recv_start_query();
  }
};

MapDClient.prototype.send_start_query = function(session, query_ra, just_explain, callback) {
  this.output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_start_query_args();
  args.session = session;
  args.query_ra = query_ra;
  args.just_explain = just_explain;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_start_query();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_start_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_start_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'start_query failed: unknown result';
};
MapDClient.prototype.execute_first_step = function(pending_query, callback) {
  this.send_execute_first_step(pending_query, callback); 
  if (!callback) {
    return this.recv_execute_first_step();
  }
};

MapDClient.prototype.send_execute_first_step = function(pending_query, callback) {
  this.output.writeMessageBegin('execute_first_step', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_execute_first_step_args();
  args.pending_query = pending_query;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_execute_first_step();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_execute_first_step = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_execute_first_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute_first_step failed: unknown result';
};
MapDClient.prototype.broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
  this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, callback); 
  if (!callback) {
  this.recv_broadcast_serialized_rows();
  }
};

MapDClient.prototype.send_broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
  this.output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_broadcast_serialized_rows_args();
  args.serialized_rows = serialized_rows;
  args.row_desc = row_desc;
  args.query_id = query_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_broadcast_serialized_rows();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_broadcast_serialized_rows = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_broadcast_serialized_rows_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.render_vega_raw_pixels = function(session, widget_id, node_idx, vega_json, callback) {
  this.send_render_vega_raw_pixels(session, widget_id, node_idx, vega_json, callback); 
  if (!callback) {
    return this.recv_render_vega_raw_pixels();
  }
};

MapDClient.prototype.send_render_vega_raw_pixels = function(session, widget_id, node_idx, vega_json, callback) {
  this.output.writeMessageBegin('render_vega_raw_pixels', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_render_vega_raw_pixels_args();
  args.session = session;
  args.widget_id = widget_id;
  args.node_idx = node_idx;
  args.vega_json = vega_json;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_render_vega_raw_pixels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_render_vega_raw_pixels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_render_vega_raw_pixels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'render_vega_raw_pixels failed: unknown result';
};
MapDClient.prototype.insert_data = function(session, insert_data, callback) {
  this.send_insert_data(session, insert_data, callback); 
  if (!callback) {
  this.recv_insert_data();
  }
};

MapDClient.prototype.send_insert_data = function(session, insert_data, callback) {
  this.output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_insert_data_args();
  args.session = session;
  args.insert_data = insert_data;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_insert_data();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_insert_data = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_insert_data_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MapDClient.prototype.get_table_descriptor = function(session, table_name, callback) {
  this.send_get_table_descriptor(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_table_descriptor();
  }
};

MapDClient.prototype.send_get_table_descriptor = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_table_descriptor', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_table_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_table_descriptor();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_table_descriptor = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_table_descriptor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_table_descriptor failed: unknown result';
};
MapDClient.prototype.get_row_descriptor = function(session, table_name, callback) {
  this.send_get_row_descriptor(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_row_descriptor();
  }
};

MapDClient.prototype.send_get_row_descriptor = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_row_descriptor', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_row_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_row_descriptor();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_row_descriptor = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_row_descriptor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_row_descriptor failed: unknown result';
};
MapDClient.prototype.render = function(session, query, render_type, nonce, callback) {
  this.send_render(session, query, render_type, nonce, callback); 
  if (!callback) {
    return this.recv_render();
  }
};

MapDClient.prototype.send_render = function(session, query, render_type, nonce, callback) {
  this.output.writeMessageBegin('render', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_render_args();
  args.session = session;
  args.query = query;
  args.render_type = render_type;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_render();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_render = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_render_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'render failed: unknown result';
};
MapDClient.prototype.get_rows_for_pixels = function(session, widget_id, pixels, table_name, col_names, column_format, nonce, callback) {
  this.send_get_rows_for_pixels(session, widget_id, pixels, table_name, col_names, column_format, nonce, callback); 
  if (!callback) {
    return this.recv_get_rows_for_pixels();
  }
};

MapDClient.prototype.send_get_rows_for_pixels = function(session, widget_id, pixels, table_name, col_names, column_format, nonce, callback) {
  this.output.writeMessageBegin('get_rows_for_pixels', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_rows_for_pixels_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixels = pixels;
  args.table_name = table_name;
  args.col_names = col_names;
  args.column_format = column_format;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_rows_for_pixels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_rows_for_pixels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_rows_for_pixels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_rows_for_pixels failed: unknown result';
};
MapDClient.prototype.get_row_for_pixel = function(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback) {
  this.send_get_row_for_pixel(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback); 
  if (!callback) {
    return this.recv_get_row_for_pixel();
  }
};

MapDClient.prototype.send_get_row_for_pixel = function(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback) {
  this.output.writeMessageBegin('get_row_for_pixel', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_row_for_pixel_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixel = pixel;
  args.table_name = table_name;
  args.col_names = col_names;
  args.column_format = column_format;
  args.pixelRadius = pixelRadius;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_row_for_pixel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_row_for_pixel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_row_for_pixel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_row_for_pixel failed: unknown result';
};
