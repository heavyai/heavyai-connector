/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(4);
	__webpack_require__(6);
	__webpack_require__(8);
	module.exports = __webpack_require__(10);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(3))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(src) {
		function log(error) {
			(typeof console !== "undefined")
			&& (console.error || console.log)("[Script Loader]", error);
		}

		// Check for IE =< 8
		function isIE() {
			return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
		}

		try {
			if (typeof execScript !== "undefined" && isIE()) {
				execScript(src);
			} else if (typeof eval !== "undefined") {
				eval.call(null, src);
			} else {
				log("EvalError: No eval function available");
			}
		} catch (error) {
			log(error);
		}
	}


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jshint evil:true*/\n\n/**\n * The Thrift namespace houses the Apache Thrift JavaScript library\n * elements providing JavaScript bindings for the Apache Thrift RPC\n * system. End users will typically only directly make use of the\n * Transport (TXHRTransport/TWebSocketTransport) and Protocol\n * (TJSONPRotocol/TBinaryProtocol) constructors.\n *\n * Object methods beginning with a __ (e.g. __onOpen()) are internal\n * and should not be called outside of the object's own methods.\n *\n * This library creates one global object: Thrift\n * Code in this library must never create additional global identifiers,\n * all features must be scoped within the Thrift namespace.\n * @namespace\n * @example\n *     var transport = new Thrift.Transport(\"http://localhost:8585\");\n *     var protocol  = new Thrift.Protocol(transport);\n *     var client = new MyThriftSvcClient(protocol);\n *     var result = client.MyMethod();\n */\n\nvar Thrift = {\n    /**\n     * Thrift JavaScript library version.\n     * @readonly\n     * @const {string} Version\n     * @memberof Thrift\n     */\n    Version: '0.9.3',\n\n    /**\n     * Thrift IDL type string to Id mapping.\n     * @readonly\n     * @property {number}  STOP   - End of a set of fields.\n     * @property {number}  VOID   - No value (only legal for return types).\n     * @property {number}  BOOL   - True/False integer.\n     * @property {number}  BYTE   - Signed 8 bit integer.\n     * @property {number}  I08    - Signed 8 bit integer.\n     * @property {number}  DOUBLE - 64 bit IEEE 854 floating point.\n     * @property {number}  I16    - Signed 16 bit integer.\n     * @property {number}  I32    - Signed 32 bit integer.\n     * @property {number}  I64    - Signed 64 bit integer.\n     * @property {number}  STRING - Array of bytes representing a string of characters.\n     * @property {number}  UTF7   - Array of bytes representing a string of UTF7 encoded characters.\n     * @property {number}  STRUCT - A multifield type.\n     * @property {number}  MAP    - A collection type (map/associative-array/dictionary).\n     * @property {number}  SET    - A collection type (unordered and without repeated values).\n     * @property {number}  LIST   - A collection type (unordered).\n     * @property {number}  UTF8   - Array of bytes representing a string of UTF8 encoded characters.\n     * @property {number}  UTF16  - Array of bytes representing a string of UTF16 encoded characters.\n     */\n    Type: {\n        'STOP': 0,\n        'VOID': 1,\n        'BOOL': 2,\n        'BYTE': 3,\n        'I08': 3,\n        'DOUBLE': 4,\n        'I16': 6,\n        'I32': 8,\n        'I64': 10,\n        'STRING': 11,\n        'UTF7': 11,\n        'STRUCT': 12,\n        'MAP': 13,\n        'SET': 14,\n        'LIST': 15,\n        'UTF8': 16,\n        'UTF16': 17\n    },\n\n    /**\n     * Thrift RPC message type string to Id mapping.\n     * @readonly\n     * @property {number}  CALL      - RPC call sent from client to server.\n     * @property {number}  REPLY     - RPC call normal response from server to client.\n     * @property {number}  EXCEPTION - RPC call exception response from server to client.\n     * @property {number}  ONEWAY    - Oneway RPC call from client to server with no response.\n     */\n    MessageType: {\n        'CALL': 1,\n        'REPLY': 2,\n        'EXCEPTION': 3,\n        'ONEWAY': 4\n    },\n\n    /**\n     * Utility function returning the count of an object's own properties.\n     * @param {object} obj - Object to test.\n     * @returns {number} number of object's own properties\n     */\n    objectLength: function objectLength(obj) {\n        var length = 0;\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                length++;\n            }\n        }\n        return length;\n    },\n\n    /**\n     * Utility function to establish prototype inheritance.\n     * @see {@link http://javascript.crockford.com/prototypal.html|Prototypal Inheritance}\n     * @param {function} constructor - Contstructor function to set as derived.\n     * @param {function} superConstructor - Contstructor function to set as base.\n     * @param {string} [name] - Type name to set as name property in derived prototype.\n     */\n    inherits: function inherits(constructor, superConstructor, name) {\n        function F() {}\n        F.prototype = superConstructor.prototype;\n        constructor.prototype = new F();\n        constructor.prototype.name = name || \"\";\n    }\n};\n\n/**\n * Initializes a Thrift TException instance.\n * @constructor\n * @augments Error\n * @param {string} message - The TException message (distinct from the Error message).\n * @classdesc TException is the base class for all Thrift exceptions types.\n */\nThrift.TException = function (message) {\n    this.message = message;\n};\nThrift.inherits(Thrift.TException, Error, 'TException');\n\n/**\n * Returns the message set on the exception.\n * @readonly\n * @returns {string} exception message\n */\nThrift.TException.prototype.getMessage = function () {\n    return this.message;\n};\n\n/**\n * Thrift Application Exception type string to Id mapping.\n * @readonly\n * @property {number}  UNKNOWN                 - Unknown/undefined.\n * @property {number}  UNKNOWN_METHOD          - Client attempted to call a method unknown to the server.\n * @property {number}  INVALID_MESSAGE_TYPE    - Client passed an unknown/unsupported MessageType.\n * @property {number}  WRONG_METHOD_NAME       - Unused.\n * @property {number}  BAD_SEQUENCE_ID         - Unused in Thrift RPC, used to flag proprietary sequence number errors.\n * @property {number}  MISSING_RESULT          - Raised by a server processor if a handler fails to supply the required return result.\n * @property {number}  INTERNAL_ERROR          - Something bad happened.\n * @property {number}  PROTOCOL_ERROR          - The protocol layer failed to serialize or deserialize data.\n * @property {number}  INVALID_TRANSFORM       - Unused.\n * @property {number}  INVALID_PROTOCOL        - The protocol (or version) is not supported.\n * @property {number}  UNSUPPORTED_CLIENT_TYPE - Unused.\n */\nThrift.TApplicationExceptionType = {\n    'UNKNOWN': 0,\n    'UNKNOWN_METHOD': 1,\n    'INVALID_MESSAGE_TYPE': 2,\n    'WRONG_METHOD_NAME': 3,\n    'BAD_SEQUENCE_ID': 4,\n    'MISSING_RESULT': 5,\n    'INTERNAL_ERROR': 6,\n    'PROTOCOL_ERROR': 7,\n    'INVALID_TRANSFORM': 8,\n    'INVALID_PROTOCOL': 9,\n    'UNSUPPORTED_CLIENT_TYPE': 10\n};\n\n/**\n * Initializes a Thrift TApplicationException instance.\n * @constructor\n * @augments Thrift.TException\n * @param {string} message - The TApplicationException message (distinct from the Error message).\n * @param {Thrift.TApplicationExceptionType} [code] - The TApplicationExceptionType code.\n * @classdesc TApplicationException is the exception class used to propagate exceptions from an RPC server back to a calling client.\n*/\nThrift.TApplicationException = function (message, code) {\n    this.message = message;\n    this.code = typeof code === \"number\" ? code : 0;\n};\nThrift.inherits(Thrift.TApplicationException, Thrift.TException, 'TApplicationException');\n\n/**\n * Read a TApplicationException from the supplied protocol.\n * @param {object} input - The input protocol to read from.\n */\nThrift.TApplicationException.prototype.read = function (input) {\n    while (1) {\n        var ret = input.readFieldBegin();\n\n        if (ret.ftype == Thrift.Type.STOP) {\n            break;\n        }\n\n        var fid = ret.fid;\n\n        switch (fid) {\n            case 1:\n                if (ret.ftype == Thrift.Type.STRING) {\n                    ret = input.readString();\n                    this.message = ret.value;\n                } else {\n                    ret = input.skip(ret.ftype);\n                }\n                break;\n            case 2:\n                if (ret.ftype == Thrift.Type.I32) {\n                    ret = input.readI32();\n                    this.code = ret.value;\n                } else {\n                    ret = input.skip(ret.ftype);\n                }\n                break;\n            default:\n                ret = input.skip(ret.ftype);\n                break;\n        }\n\n        input.readFieldEnd();\n    }\n\n    input.readStructEnd();\n};\n\n/**\n * Wite a TApplicationException to the supplied protocol.\n * @param {object} output - The output protocol to write to.\n */\nThrift.TApplicationException.prototype.write = function (output) {\n    output.writeStructBegin('TApplicationException');\n\n    if (this.message) {\n        output.writeFieldBegin('message', Thrift.Type.STRING, 1);\n        output.writeString(this.getMessage());\n        output.writeFieldEnd();\n    }\n\n    if (this.code) {\n        output.writeFieldBegin('type', Thrift.Type.I32, 2);\n        output.writeI32(this.code);\n        output.writeFieldEnd();\n    }\n\n    output.writeFieldStop();\n    output.writeStructEnd();\n};\n\n/**\n * Returns the application exception code set on the exception.\n * @readonly\n * @returns {Thrift.TApplicationExceptionType} exception code\n */\nThrift.TApplicationException.prototype.getCode = function () {\n    return this.code;\n};\n\n/**\n * Constructor Function for the XHR transport.\n * If you do not specify a url then you must handle XHR operations on\n * your own. This type can also be constructed using the Transport alias\n * for backward compatibility.\n * @constructor\n * @param {string} [url] - The URL to connect to.\n * @classdesc The Apache Thrift Transport layer performs byte level I/O\n * between RPC clients and servers. The JavaScript TXHRTransport object\n * uses Http[s]/XHR. Target servers must implement the http[s] transport\n * (see: node.js example server_http.js).\n * @example\n *     var transport = new Thrift.TXHRTransport(\"http://localhost:8585\");\n */\nThrift.Transport = Thrift.TXHRTransport = function (url, options) {\n    this.url = url;\n    this.wpos = 0;\n    this.rpos = 0;\n    this.useCORS = options && options.useCORS;\n    this.send_buf = '';\n    this.recv_buf = '';\n};\n\nThrift.TXHRTransport.prototype = {\n    /**\n     * Gets the browser specific XmlHttpRequest Object.\n     * @returns {object} the browser XHR interface object\n     */\n    getXmlHttpRequestObject: function getXmlHttpRequestObject() {\n        try {\n            return new XMLHttpRequest();\n        } catch (e1) {}\n        try {\n            return new ActiveXObject('Msxml2.XMLHTTP');\n        } catch (e2) {}\n        try {\n            return new ActiveXObject('Microsoft.XMLHTTP');\n        } catch (e3) {}\n\n        throw \"Your browser doesn't support XHR.\";\n    },\n\n    /**\n     * Sends the current XRH request if the transport was created with a URL\n     * and the async parameter is false. If the transport was not created with\n     * a URL, or the async parameter is True and no callback is provided, or\n     * the URL is an empty string, the current send buffer is returned.\n     * @param {object} async - If true the current send buffer is returned.\n     * @param {object} callback - Optional async completion callback\n     * @returns {undefined|string} Nothing or the current send buffer.\n     * @throws {string} If XHR fails.\n     */\n    flush: function flush(async, callback) {\n        var self = this;\n        if (async && !callback || this.url === undefined || this.url === '') {\n            return this.send_buf;\n        }\n\n        var xreq = this.getXmlHttpRequestObject();\n\n        if (xreq.overrideMimeType) {\n            xreq.overrideMimeType('application/vnd.apache.thrift.json; charset=utf-8');\n        }\n\n        if (callback) {\n            //Ignore XHR callbacks until the data arrives, then call the\n            //  client's callback\n            xreq.onreadystatechange = function () {\n                var clientCallback = callback;\n                return function () {\n                    if (this.readyState == 4 && this.status == 200) {\n                        self.setRecvBuffer(this.responseText);\n                        clientCallback();\n                    }\n                };\n            }();\n        }\n\n        xreq.open('POST', this.url, !!async);\n\n        if (xreq.setRequestHeader) {\n            xreq.setRequestHeader('Accept', 'application/vnd.apache.thrift.json; charset=utf-8');\n            xreq.setRequestHeader('Content-Type', 'application/vnd.apache.thrift.json; charset=utf-8');\n        }\n\n        xreq.send(this.send_buf);\n        if (async && callback) {\n            return;\n        }\n\n        if (xreq.readyState != 4) {\n            throw 'encountered an unknown ajax ready state: ' + xreq.readyState;\n        }\n\n        if (xreq.status != 200) {\n            throw 'encountered a unknown request status: ' + xreq.status;\n        }\n\n        this.recv_buf = xreq.responseText;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Creates a jQuery XHR object to be used for a Thrift server call.\n     * @param {object} client - The Thrift Service client object generated by the IDL compiler.\n     * @param {object} postData - The message to send to the server.\n     * @param {function} args - The original call arguments with the success call back at the end.\n     * @param {function} recv_method - The Thrift Service Client receive method for the call.\n     * @returns {object} A new jQuery XHR object.\n     * @throws {string} If the jQuery version is prior to 1.5 or if jQuery is not found.\n     */\n    jqRequest: function jqRequest(client, postData, args, recv_method) {\n        if (typeof jQuery === 'undefined' || typeof jQuery.Deferred === 'undefined') {\n            throw 'Thrift.js requires jQuery 1.5+ to use asynchronous requests';\n        }\n\n        var thriftTransport = this;\n\n        var jqXHR = jQuery.ajax({\n            url: this.url,\n            data: postData,\n            type: 'POST',\n            cache: false,\n            contentType: 'application/vnd.apache.thrift.json; charset=utf-8',\n            dataType: 'text thrift',\n            converters: {\n                'text thrift': function textThrift(responseData) {\n                    thriftTransport.setRecvBuffer(responseData);\n                    var value = recv_method.call(client);\n                    return value;\n                }\n            },\n            context: client,\n            success: jQuery.makeArray(args).pop()\n        });\n\n        return jqXHR;\n    },\n\n    /**\n     * Sets the buffer to provide the protocol when deserializing.\n     * @param {string} buf - The buffer to supply the protocol.\n     */\n    setRecvBuffer: function setRecvBuffer(buf) {\n        this.recv_buf = buf;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Returns true if the transport is open, XHR always returns true.\n     * @readonly\n     * @returns {boolean} Always True.\n     */\n    isOpen: function isOpen() {\n        return true;\n    },\n\n    /**\n     * Opens the transport connection, with XHR this is a nop.\n     */\n    open: function open() {},\n\n    /**\n     * Closes the transport connection, with XHR this is a nop.\n     */\n    close: function close() {},\n\n    /**\n     * Returns the specified number of characters from the response\n     * buffer.\n     * @param {number} len - The number of characters to return.\n     * @returns {string} Characters sent by the server.\n     */\n    read: function read(len) {\n        var avail = this.wpos - this.rpos;\n\n        if (avail === 0) {\n            return '';\n        }\n\n        var give = len;\n\n        if (avail < len) {\n            give = avail;\n        }\n\n        var ret = this.read_buf.substr(this.rpos, give);\n        this.rpos += give;\n\n        //clear buf when complete?\n        return ret;\n    },\n\n    /**\n     * Returns the entire response buffer.\n     * @returns {string} Characters sent by the server.\n     */\n    readAll: function readAll() {\n        return this.recv_buf;\n    },\n\n    /**\n     * Sets the send buffer to buf.\n     * @param {string} buf - The buffer to send.\n     */\n    write: function write(buf) {\n        this.send_buf = buf;\n    },\n\n    /**\n     * Returns the send buffer.\n     * @readonly\n     * @returns {string} The send buffer.\n     */\n    getSendBuffer: function getSendBuffer() {\n        return this.send_buf;\n    }\n\n};\n\n/**\n * Constructor Function for the WebSocket transport.\n * @constructor\n * @param {string} [url] - The URL to connect to.\n * @classdesc The Apache Thrift Transport layer performs byte level I/O\n * between RPC clients and servers. The JavaScript TWebSocketTransport object\n * uses the WebSocket protocol. Target servers must implement WebSocket.\n * (see: node.js example server_http.js).\n * @example\n *   var transport = new Thrift.TWebSocketTransport(\"http://localhost:8585\");\n */\nThrift.TWebSocketTransport = function (url) {\n    this.__reset(url);\n};\n\nThrift.TWebSocketTransport.prototype = {\n    __reset: function __reset(url) {\n        this.url = url; //Where to connect\n        this.socket = null; //The web socket\n        this.callbacks = []; //Pending callbacks\n        this.send_pending = []; //Buffers/Callback pairs waiting to be sent\n        this.send_buf = ''; //Outbound data, immutable until sent\n        this.recv_buf = ''; //Inbound data\n        this.rb_wpos = 0; //Network write position in receive buffer\n        this.rb_rpos = 0; //Client read position in receive buffer\n    },\n\n    /**\n     * Sends the current WS request and registers callback. The async\n     * parameter is ignored (WS flush is always async) and the callback\n     * function parameter is required.\n     * @param {object} async - Ignored.\n     * @param {object} callback - The client completion callback.\n     * @returns {undefined|string} Nothing (undefined)\n     */\n    flush: function flush(async, callback) {\n        var self = this;\n        if (this.isOpen()) {\n            //Send data and register a callback to invoke the client callback\n            this.socket.send(this.send_buf);\n            this.callbacks.push(function () {\n                var clientCallback = callback;\n                return function (msg) {\n                    self.setRecvBuffer(msg);\n                    clientCallback();\n                };\n            }());\n        } else {\n            //Queue the send to go out __onOpen\n            this.send_pending.push({\n                buf: this.send_buf,\n                cb: callback\n            });\n        }\n    },\n\n    __onOpen: function __onOpen() {\n        var self = this;\n        if (this.send_pending.length > 0) {\n            //If the user made calls before the connection was fully\n            //open, send them now\n            this.send_pending.forEach(function (elem) {\n                this.socket.send(elem.buf);\n                this.callbacks.push(function () {\n                    var clientCallback = elem.cb;\n                    return function (msg) {\n                        self.setRecvBuffer(msg);\n                        clientCallback();\n                    };\n                }());\n            });\n            this.send_pending = [];\n        }\n    },\n\n    __onClose: function __onClose(evt) {\n        this.__reset(this.url);\n    },\n\n    __onMessage: function __onMessage(evt) {\n        if (this.callbacks.length) {\n            this.callbacks.shift()(evt.data);\n        }\n    },\n\n    __onError: function __onError(evt) {\n        console.log(\"Thrift WebSocket Error: \" + evt.toString());\n        this.socket.close();\n    },\n\n    /**\n     * Sets the buffer to use when receiving server responses.\n     * @param {string} buf - The buffer to receive server responses.\n     */\n    setRecvBuffer: function setRecvBuffer(buf) {\n        this.recv_buf = buf;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Returns true if the transport is open\n     * @readonly\n     * @returns {boolean}\n     */\n    isOpen: function isOpen() {\n        return this.socket && this.socket.readyState == this.socket.OPEN;\n    },\n\n    /**\n     * Opens the transport connection\n     */\n    open: function open() {\n        //If OPEN/CONNECTING/CLOSING ignore additional opens\n        if (this.socket && this.socket.readyState != this.socket.CLOSED) {\n            return;\n        }\n        //If there is no socket or the socket is closed:\n        this.socket = new WebSocket(this.url);\n        this.socket.onopen = this.__onOpen.bind(this);\n        this.socket.onmessage = this.__onMessage.bind(this);\n        this.socket.onerror = this.__onError.bind(this);\n        this.socket.onclose = this.__onClose.bind(this);\n    },\n\n    /**\n     * Closes the transport connection\n     */\n    close: function close() {\n        this.socket.close();\n    },\n\n    /**\n     * Returns the specified number of characters from the response\n     * buffer.\n     * @param {number} len - The number of characters to return.\n     * @returns {string} Characters sent by the server.\n     */\n    read: function read(len) {\n        var avail = this.wpos - this.rpos;\n\n        if (avail === 0) {\n            return '';\n        }\n\n        var give = len;\n\n        if (avail < len) {\n            give = avail;\n        }\n\n        var ret = this.read_buf.substr(this.rpos, give);\n        this.rpos += give;\n\n        //clear buf when complete?\n        return ret;\n    },\n\n    /**\n     * Returns the entire response buffer.\n     * @returns {string} Characters sent by the server.\n     */\n    readAll: function readAll() {\n        return this.recv_buf;\n    },\n\n    /**\n     * Sets the send buffer to buf.\n     * @param {string} buf - The buffer to send.\n     */\n    write: function write(buf) {\n        this.send_buf = buf;\n    },\n\n    /**\n     * Returns the send buffer.\n     * @readonly\n     * @returns {string} The send buffer.\n     */\n    getSendBuffer: function getSendBuffer() {\n        return this.send_buf;\n    }\n\n};\n\n/**\n * Initializes a Thrift JSON protocol instance.\n * @constructor\n * @param {Thrift.Transport} transport - The transport to serialize to/from.\n * @classdesc Apache Thrift Protocols perform serialization which enables cross\n * language RPC. The Protocol type is the JavaScript browser implementation\n * of the Apache Thrift TJSONProtocol.\n * @example\n *     var protocol  = new Thrift.Protocol(transport);\n */\nThrift.TJSONProtocol = Thrift.Protocol = function (transport) {\n    this.tstack = [];\n    this.tpos = [];\n    this.transport = transport;\n};\n\n/**\n * Thrift IDL type Id to string mapping.\n * @readonly\n * @see {@link Thrift.Type}\n */\nThrift.Protocol.Type = {};\nThrift.Protocol.Type[Thrift.Type.BOOL] = '\"tf\"';\nThrift.Protocol.Type[Thrift.Type.BYTE] = '\"i8\"';\nThrift.Protocol.Type[Thrift.Type.I16] = '\"i16\"';\nThrift.Protocol.Type[Thrift.Type.I32] = '\"i32\"';\nThrift.Protocol.Type[Thrift.Type.I64] = '\"i64\"';\nThrift.Protocol.Type[Thrift.Type.DOUBLE] = '\"dbl\"';\nThrift.Protocol.Type[Thrift.Type.STRUCT] = '\"rec\"';\nThrift.Protocol.Type[Thrift.Type.STRING] = '\"str\"';\nThrift.Protocol.Type[Thrift.Type.MAP] = '\"map\"';\nThrift.Protocol.Type[Thrift.Type.LIST] = '\"lst\"';\nThrift.Protocol.Type[Thrift.Type.SET] = '\"set\"';\n\n/**\n * Thrift IDL type string to Id mapping.\n * @readonly\n * @see {@link Thrift.Type}\n */\nThrift.Protocol.RType = {};\nThrift.Protocol.RType.tf = Thrift.Type.BOOL;\nThrift.Protocol.RType.i8 = Thrift.Type.BYTE;\nThrift.Protocol.RType.i16 = Thrift.Type.I16;\nThrift.Protocol.RType.i32 = Thrift.Type.I32;\nThrift.Protocol.RType.i64 = Thrift.Type.I64;\nThrift.Protocol.RType.dbl = Thrift.Type.DOUBLE;\nThrift.Protocol.RType.rec = Thrift.Type.STRUCT;\nThrift.Protocol.RType.str = Thrift.Type.STRING;\nThrift.Protocol.RType.map = Thrift.Type.MAP;\nThrift.Protocol.RType.lst = Thrift.Type.LIST;\nThrift.Protocol.RType.set = Thrift.Type.SET;\n\n/**\n * The TJSONProtocol version number.\n * @readonly\n * @const {number} Version\n * @memberof Thrift.Protocol\n */\nThrift.Protocol.Version = 1;\n\nThrift.Protocol.prototype = {\n    /**\n     * Returns the underlying transport.\n     * @readonly\n     * @returns {Thrift.Transport} The underlying transport.\n     */\n    getTransport: function getTransport() {\n        return this.transport;\n    },\n\n    /**\n     * Serializes the beginning of a Thrift RPC message.\n     * @param {string} name - The service method to call.\n     * @param {Thrift.MessageType} messageType - The type of method call.\n     * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).\n     */\n    writeMessageBegin: function writeMessageBegin(name, messageType, seqid) {\n        this.tstack = [];\n        this.tpos = [];\n\n        this.tstack.push([Thrift.Protocol.Version, '\"' + name + '\"', messageType, seqid]);\n    },\n\n    /**\n     * Serializes the end of a Thrift RPC message.\n     */\n    writeMessageEnd: function writeMessageEnd() {\n        var obj = this.tstack.pop();\n\n        this.wobj = this.tstack.pop();\n        this.wobj.push(obj);\n\n        this.wbuf = '[' + this.wobj.join(',') + ']';\n\n        this.transport.write(this.wbuf);\n    },\n\n    /**\n     * Serializes the beginning of a struct.\n     * @param {string} name - The name of the struct.\n     */\n    writeStructBegin: function writeStructBegin(name) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push({});\n    },\n\n    /**\n     * Serializes the end of a struct.\n     */\n    writeStructEnd: function writeStructEnd() {\n\n        var p = this.tpos.pop();\n        var struct = this.tstack[p];\n        var str = '{';\n        var first = true;\n        for (var key in struct) {\n            if (first) {\n                first = false;\n            } else {\n                str += ',';\n            }\n\n            str += key + ':' + struct[key];\n        }\n\n        str += '}';\n        this.tstack[p] = str;\n    },\n\n    /**\n     * Serializes the beginning of a struct field.\n     * @param {string} name - The name of the field.\n     * @param {Thrift.Protocol.Type} fieldType - The data type of the field.\n     * @param {number} fieldId - The field's unique identifier.\n     */\n    writeFieldBegin: function writeFieldBegin(name, fieldType, fieldId) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push({ 'fieldId': '\"' + fieldId + '\"', 'fieldType': Thrift.Protocol.Type[fieldType]\n        });\n    },\n\n    /**\n     * Serializes the end of a field.\n     */\n    writeFieldEnd: function writeFieldEnd() {\n        var value = this.tstack.pop();\n        var fieldInfo = this.tstack.pop();\n\n        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' + fieldInfo.fieldType + ':' + value + '}';\n        this.tpos.pop();\n    },\n\n    /**\n     * Serializes the end of the set of fields for a struct.\n     */\n    writeFieldStop: function writeFieldStop() {\n        //na\n    },\n\n    /**\n     * Serializes the beginning of a map collection.\n     * @param {Thrift.Type} keyType - The data type of the key.\n     * @param {Thrift.Type} valType - The data type of the value.\n     * @param {number} [size] - The number of elements in the map (ignored).\n     */\n    writeMapBegin: function writeMapBegin(keyType, valType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[keyType], Thrift.Protocol.Type[valType], 0]);\n    },\n\n    /**\n     * Serializes the end of a map.\n     */\n    writeMapEnd: function writeMapEnd() {\n        var p = this.tpos.pop();\n\n        if (p == this.tstack.length) {\n            return;\n        }\n\n        if ((this.tstack.length - p - 1) % 2 !== 0) {\n            this.tstack.push('');\n        }\n\n        var size = (this.tstack.length - p - 1) / 2;\n\n        this.tstack[p][this.tstack[p].length - 1] = size;\n\n        var map = '}';\n        var first = true;\n        while (this.tstack.length > p + 1) {\n            var v = this.tstack.pop();\n            var k = this.tstack.pop();\n            if (first) {\n                first = false;\n            } else {\n                map = ',' + map;\n            }\n\n            if (!isNaN(k)) {\n                k = '\"' + k + '\"';\n            } //json \"keys\" need to be strings\n            map = k + ':' + v + map;\n        }\n        map = '{' + map;\n\n        this.tstack[p].push(map);\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /**\n     * Serializes the beginning of a list collection.\n     * @param {Thrift.Type} elemType - The data type of the elements.\n     * @param {number} size - The number of elements in the list.\n     */\n    writeListBegin: function writeListBegin(elemType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[elemType], size]);\n    },\n\n    /**\n     * Serializes the end of a list.\n     */\n    writeListEnd: function writeListEnd() {\n        var p = this.tpos.pop();\n\n        while (this.tstack.length > p + 1) {\n            var tmpVal = this.tstack[p + 1];\n            this.tstack.splice(p + 1, 1);\n            this.tstack[p].push(tmpVal);\n        }\n\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /**\n     * Serializes the beginning of a set collection.\n     * @param {Thrift.Type} elemType - The data type of the elements.\n     * @param {number} size - The number of elements in the list.\n     */\n    writeSetBegin: function writeSetBegin(elemType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[elemType], size]);\n    },\n\n    /**\n     * Serializes the end of a set.\n     */\n    writeSetEnd: function writeSetEnd() {\n        var p = this.tpos.pop();\n\n        while (this.tstack.length > p + 1) {\n            var tmpVal = this.tstack[p + 1];\n            this.tstack.splice(p + 1, 1);\n            this.tstack[p].push(tmpVal);\n        }\n\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /** Serializes a boolean */\n    writeBool: function writeBool(value) {\n        this.tstack.push(value ? 1 : 0);\n    },\n\n    /** Serializes a number */\n    writeByte: function writeByte(i8) {\n        this.tstack.push(i8);\n    },\n\n    /** Serializes a number */\n    writeI16: function writeI16(i16) {\n        this.tstack.push(i16);\n    },\n\n    /** Serializes a number */\n    writeI32: function writeI32(i32) {\n        this.tstack.push(i32);\n    },\n\n    /** Serializes a number */\n    writeI64: function writeI64(i64) {\n        this.tstack.push(i64);\n    },\n\n    /** Serializes a number */\n    writeDouble: function writeDouble(dbl) {\n        this.tstack.push(dbl);\n    },\n\n    /** Serializes a string */\n    writeString: function writeString(str) {\n        // We do not encode uri components for wire transfer:\n        if (str === null) {\n            this.tstack.push(null);\n        } else {\n            // concat may be slower than building a byte buffer\n            var escapedString = '';\n            for (var i = 0; i < str.length; i++) {\n                var ch = str.charAt(i); // a single double quote: \"\n                if (ch === '\\\"') {\n                    escapedString += '\\\\\\\"'; // write out as: \\\"\n                } else if (ch === '\\\\') {\n                    // a single backslash\n                    escapedString += '\\\\\\\\'; // write out as double backslash\n                } else if (ch === '\\b') {\n                    // a single backspace: invisible\n                    escapedString += '\\\\b'; // write out as: \\b\"\n                } else if (ch === '\\f') {\n                    // a single formfeed: invisible\n                    escapedString += '\\\\f'; // write out as: \\f\"\n                } else if (ch === '\\n') {\n                    // a single newline: invisible\n                    escapedString += '\\\\n'; // write out as: \\n\"\n                } else if (ch === '\\r') {\n                    // a single return: invisible\n                    escapedString += '\\\\r'; // write out as: \\r\"\n                } else if (ch === '\\t') {\n                    // a single tab: invisible\n                    escapedString += '\\\\t'; // write out as: \\t\"\n                } else {\n                    escapedString += ch; // Else it need not be escaped\n                }\n            }\n            this.tstack.push('\"' + escapedString + '\"');\n        }\n    },\n\n    /** Serializes a string */\n    writeBinary: function writeBinary(str) {\n        this.writeString(str);\n    },\n\n    /**\n       @class\n       @name AnonReadMessageBeginReturn\n       @property {string} fname - The name of the service method.\n       @property {Thrift.MessageType} mtype - The type of message call.\n       @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).\n     */\n    /**\n     * Deserializes the beginning of a message.\n     * @returns {AnonReadMessageBeginReturn}\n     */\n    readMessageBegin: function readMessageBegin() {\n        this.rstack = [];\n        this.rpos = [];\n\n        if (typeof JSON !== 'undefined' && typeof JSON.parse === 'function') {\n            this.robj = JSON.parse(this.transport.readAll());\n        } else if (typeof jQuery !== 'undefined') {\n            this.robj = jQuery.parseJSON(this.transport.readAll());\n        } else {\n            this.robj = eval(this.transport.readAll());\n        }\n\n        var r = {};\n        var version = this.robj.shift();\n\n        if (version != Thrift.Protocol.Version) {\n            throw 'Wrong thrift protocol version: ' + version;\n        }\n\n        r.fname = this.robj.shift();\n        r.mtype = this.robj.shift();\n        r.rseqid = this.robj.shift();\n\n        //get to the main obj\n        this.rstack.push(this.robj.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a message. */\n    readMessageEnd: function readMessageEnd() {},\n\n    /**\n     * Deserializes the beginning of a struct.\n     * @param {string} [name] - The name of the struct (ignored)\n     * @returns {object} - An object with an empty string fname property\n     */\n    readStructBegin: function readStructBegin(name) {\n        var r = {};\n        r.fname = '';\n\n        //incase this is an array of structs\n        if (this.rstack[this.rstack.length - 1] instanceof Array) {\n            this.rstack.push(this.rstack[this.rstack.length - 1].shift());\n        }\n\n        return r;\n    },\n\n    /** Deserializes the end of a struct. */\n    readStructEnd: function readStructEnd() {\n        if (this.rstack[this.rstack.length - 2] instanceof Array) {\n            this.rstack.pop();\n        }\n    },\n\n    /**\n       @class\n       @name AnonReadFieldBeginReturn\n       @property {string} fname - The name of the field (always '').\n       @property {Thrift.Type} ftype - The data type of the field.\n       @property {number} fid - The unique identifier of the field.\n     */\n    /**\n     * Deserializes the beginning of a field.\n     * @returns {AnonReadFieldBeginReturn}\n     */\n    readFieldBegin: function readFieldBegin() {\n        var r = {};\n\n        var fid = -1;\n        var ftype = Thrift.Type.STOP;\n\n        //get a fieldId\n        for (var f in this.rstack[this.rstack.length - 1]) {\n            if (f === null) {\n                continue;\n            }\n\n            fid = parseInt(f, 10);\n            this.rpos.push(this.rstack.length);\n\n            var field = this.rstack[this.rstack.length - 1][fid];\n\n            //remove so we don't see it again\n            delete this.rstack[this.rstack.length - 1][fid];\n\n            this.rstack.push(field);\n\n            break;\n        }\n\n        if (fid != -1) {\n\n            //should only be 1 of these but this is the only\n            //way to match a key\n            for (var i in this.rstack[this.rstack.length - 1]) {\n                if (Thrift.Protocol.RType[i] === null) {\n                    continue;\n                }\n\n                ftype = Thrift.Protocol.RType[i];\n                this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][i];\n            }\n        }\n\n        r.fname = '';\n        r.ftype = ftype;\n        r.fid = fid;\n\n        return r;\n    },\n\n    /** Deserializes the end of a field. */\n    readFieldEnd: function readFieldEnd() {\n        var pos = this.rpos.pop();\n\n        //get back to the right place in the stack\n        while (this.rstack.length > pos) {\n            this.rstack.pop();\n        }\n    },\n\n    /**\n       @class\n       @name AnonReadMapBeginReturn\n       @property {Thrift.Type} ktype - The data type of the key.\n       @property {Thrift.Type} vtype - The data type of the value.\n       @property {number} size - The number of elements in the map.\n     */\n    /**\n     * Deserializes the beginning of a map.\n     * @returns {AnonReadMapBeginReturn}\n     */\n    readMapBegin: function readMapBegin() {\n        var map = this.rstack.pop();\n        var first = map.shift();\n        if (first instanceof Array) {\n            this.rstack.push(map);\n            map = first;\n            first = map.shift();\n        }\n\n        var r = {};\n        r.ktype = Thrift.Protocol.RType[first];\n        r.vtype = Thrift.Protocol.RType[map.shift()];\n        r.size = map.shift();\n\n        this.rpos.push(this.rstack.length);\n        this.rstack.push(map.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a map. */\n    readMapEnd: function readMapEnd() {\n        this.readFieldEnd();\n    },\n\n    /**\n       @class\n       @name AnonReadColBeginReturn\n       @property {Thrift.Type} etype - The data type of the element.\n       @property {number} size - The number of elements in the collection.\n     */\n    /**\n     * Deserializes the beginning of a list.\n     * @returns {AnonReadColBeginReturn}\n     */\n    readListBegin: function readListBegin() {\n        var list = this.rstack[this.rstack.length - 1];\n\n        var r = {};\n        r.etype = Thrift.Protocol.RType[list.shift()];\n        r.size = list.shift();\n\n        this.rpos.push(this.rstack.length);\n        this.rstack.push(list.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a list. */\n    readListEnd: function readListEnd() {\n        this.readFieldEnd();\n    },\n\n    /**\n     * Deserializes the beginning of a set.\n     * @returns {AnonReadColBeginReturn}\n     */\n    readSetBegin: function readSetBegin(elemType, size) {\n        return this.readListBegin(elemType, size);\n    },\n\n    /** Deserializes the end of a set. */\n    readSetEnd: function readSetEnd() {\n        return this.readListEnd();\n    },\n\n    /** Returns an object with a value property set to\n     *  False unless the next number in the protocol buffer\n     *  is 1, in which case the value property is True */\n    readBool: function readBool() {\n        var r = this.readI32();\n\n        if (r !== null && r.value == '1') {\n            r.value = true;\n        } else {\n            r.value = false;\n        }\n\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readByte: function readByte() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI16: function readI16() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI32: function readI32(f) {\n        if (f === undefined) {\n            f = this.rstack[this.rstack.length - 1];\n        }\n\n        var r = {};\n\n        if (f instanceof Array) {\n            if (f.length === 0) {\n                r.value = undefined;\n            } else {\n                r.value = f.shift();\n            }\n        } else if (f instanceof Object) {\n            for (var i in f) {\n                if (i === null) {\n                    continue;\n                }\n                this.rstack.push(f[i]);\n                delete f[i];\n\n                r.value = i;\n                break;\n            }\n        } else {\n            r.value = f;\n            this.rstack.pop();\n        }\n\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI64: function readI64() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readDouble: function readDouble() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readString: function readString() {\n        var r = this.readI32();\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readBinary: function readBinary() {\n        return this.readString();\n    },\n\n    /**\n     * Method to arbitrarily skip over data */\n    skip: function skip(type) {\n        var ret, i;\n        switch (type) {\n            case Thrift.Type.STOP:\n                return null;\n\n            case Thrift.Type.BOOL:\n                return this.readBool();\n\n            case Thrift.Type.BYTE:\n                return this.readByte();\n\n            case Thrift.Type.I16:\n                return this.readI16();\n\n            case Thrift.Type.I32:\n                return this.readI32();\n\n            case Thrift.Type.I64:\n                return this.readI64();\n\n            case Thrift.Type.DOUBLE:\n                return this.readDouble();\n\n            case Thrift.Type.STRING:\n                return this.readString();\n\n            case Thrift.Type.STRUCT:\n                this.readStructBegin();\n                while (true) {\n                    ret = this.readFieldBegin();\n                    if (ret.ftype == Thrift.Type.STOP) {\n                        break;\n                    }\n                    this.skip(ret.ftype);\n                    this.readFieldEnd();\n                }\n                this.readStructEnd();\n                return null;\n\n            case Thrift.Type.MAP:\n                ret = this.readMapBegin();\n                for (i = 0; i < ret.size; i++) {\n                    if (i > 0) {\n                        if (this.rstack.length > this.rpos[this.rpos.length - 1] + 1) {\n                            this.rstack.pop();\n                        }\n                    }\n                    this.skip(ret.ktype);\n                    this.skip(ret.vtype);\n                }\n                this.readMapEnd();\n                return null;\n\n            case Thrift.Type.SET:\n                ret = this.readSetBegin();\n                for (i = 0; i < ret.size; i++) {\n                    this.skip(ret.etype);\n                }\n                this.readSetEnd();\n                return null;\n\n            case Thrift.Type.LIST:\n                ret = this.readListBegin();\n                for (i = 0; i < ret.size; i++) {\n                    this.skip(ret.etype);\n                }\n                this.readListEnd();\n                return null;\n        }\n    }\n};\n\n/**\n * Initializes a MutilplexProtocol Implementation as a Wrapper for Thrift.Protocol\n * @constructor\n */\nThrift.MultiplexProtocol = function (srvName, trans, strictRead, strictWrite) {\n    Thrift.Protocol.call(this, trans, strictRead, strictWrite);\n    this.serviceName = srvName;\n};\nThrift.inherits(Thrift.MultiplexProtocol, Thrift.Protocol, 'multiplexProtocol');\n\n/** Override writeMessageBegin method of prototype*/\nThrift.MultiplexProtocol.prototype.writeMessageBegin = function (name, type, seqid) {\n\n    if (type === Thrift.MessageType.CALL || type === Thrift.MessageType.ONEWAY) {\n        Thrift.Protocol.prototype.writeMessageBegin.call(this, this.serviceName + \":\" + name, type, seqid);\n    } else {\n        Thrift.Protocol.prototype.writeMessageBegin.call(this, name, type, seqid);\n    }\n};\n\nThrift.Multiplexer = function () {\n    this.seqid = 0;\n};\n\n/** Instantiates a multiplexed client for a specific service\n * @constructor\n * @param {String} serviceName - The transport to serialize to/from.\n * @param {Thrift.ServiceClient} SCl - The Service Client Class\n * @param {Thrift.Transport} transport - Thrift.Transport instance which provides remote host:port\n * @example\n *    var mp = new Thrift.Multiplexer();\n *    var transport = new Thrift.Transport(\"http://localhost:9090/foo.thrift\");\n *    var protocol = new Thrift.Protocol(transport);\n *    var client = mp.createClient('AuthService', AuthServiceClient, transport);\n*/\nThrift.Multiplexer.prototype.createClient = function (serviceName, SCl, transport) {\n    if (SCl.Client) {\n        SCl = SCl.Client;\n    }\n    var self = this;\n    SCl.prototype.new_seqid = function () {\n        self.seqid += 1;\n        return self.seqid;\n    };\n    var client = new SCl(new Thrift.MultiplexProtocol(serviceName, transport));\n\n    return client;\n};\n\nvar copyList, copyMap;\n\nwindow.copyList = function (lst, types) {\n\n    if (!lst) {\n        return lst;\n    }\n\n    var type;\n\n    if (types.shift === undefined) {\n        type = types;\n    } else {\n        type = types[0];\n    }\n    var Type = type;\n\n    var len = lst.length,\n        result = [],\n        i,\n        val;\n    for (i = 0; i < len; i++) {\n        val = lst[i];\n        if (type === null) {\n            result.push(val);\n        } else if (type === copyMap || type === copyList) {\n            result.push(type(val, types.slice(1)));\n        } else {\n            result.push(new Type(val));\n        }\n    }\n    return result;\n};\n\nwindow.copyMap = function (obj, types) {\n\n    if (!obj) {\n        return obj;\n    }\n\n    var type;\n\n    if (types.shift === undefined) {\n        type = types;\n    } else {\n        type = types[0];\n    }\n    var Type = type;\n\n    var result = {},\n        val;\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            val = obj[prop];\n            if (type === null) {\n                result[prop] = val;\n            } else if (type === copyMap || type === copyList) {\n                result[prop] = type(val, types.slice(1));\n            } else {\n                result[prop] = new Type(val);\n            }\n        }\n    }\n    return result;\n};\n\nThrift.copyMap = copyMap;\nThrift.copyList = copyList;\n;window.Thrift = Thrift;"

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(5))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.10.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\n\nwindow.TDatumType = {\n  'SMALLINT': 0,\n  'INT': 1,\n  'BIGINT': 2,\n  'FLOAT': 3,\n  'DECIMAL': 4,\n  'DOUBLE': 5,\n  'STR': 6,\n  'TIME': 7,\n  'TIMESTAMP': 8,\n  'DATE': 9,\n  'BOOL': 10,\n  'INTERVAL_DAY_TIME': 11,\n  'INTERVAL_YEAR_MONTH': 12,\n  'POINT': 13,\n  'LINESTRING': 14,\n  'POLYGON': 15,\n  'MULTIPOLYGON': 16,\n  'TINYINT': 17,\n  'GEOMETRY': 18,\n  'GEOGRAPHY': 19\n};\nwindow.TEncodingType = {\n  'NONE': 0,\n  'FIXED': 1,\n  'RL': 2,\n  'DIFF': 3,\n  'DICT': 4,\n  'SPARSE': 5,\n  'GEOINT': 6\n};\nwindow.TExecuteMode = {\n  'HYBRID': 0,\n  'GPU': 1,\n  'CPU': 2\n};\nwindow.TDeviceType = {\n  'CPU': 0,\n  'GPU': 1\n};\nwindow.TTableType = {\n  'DELIMITED': 0,\n  'POLYGON': 1\n};\nwindow.TMergeType = {\n  'UNION': 0,\n  'REDUCE': 1\n};\nwindow.TExpressionRangeType = {\n  'INVALID': 0,\n  'INTEGER': 1,\n  'FLOAT': 2,\n  'DOUBLE': 3\n};\nwindow.TDBObjectType = {\n  'AbstractDBObjectType': 0,\n  'DatabaseDBObjectType': 1,\n  'TableDBObjectType': 2,\n  'DashboardDBObjectType': 3,\n  'ViewDBObjectType': 4\n};\nwindow.TDatumVal = function (args) {\n  this.int_val = null;\n  this.real_val = null;\n  this.str_val = null;\n  this.arr_val = null;\n  if (args) {\n    if (args.int_val !== undefined && args.int_val !== null) {\n      this.int_val = args.int_val;\n    }\n    if (args.real_val !== undefined && args.real_val !== null) {\n      this.real_val = args.real_val;\n    }\n    if (args.str_val !== undefined && args.str_val !== null) {\n      this.str_val = args.str_val;\n    }\n    if (args.arr_val !== undefined && args.arr_val !== null) {\n      this.arr_val = Thrift.copyList(args.arr_val, [null]);\n    }\n  }\n};\nTDatumVal.prototype = {};\nTDatumVal.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.int_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.real_val = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.str_val = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size0 = 0;\n          var _rtmp34;\n          this.arr_val = [];\n          var _etype3 = 0;\n          _rtmp34 = input.readListBegin();\n          _etype3 = _rtmp34.etype;\n          _size0 = _rtmp34.size;\n          for (var _i5 = 0; _i5 < _size0; ++_i5) {\n            var elem6 = null;\n            elem6 = new TDatum();\n            elem6.read(input);\n            this.arr_val.push(elem6);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatumVal.prototype.write = function (output) {\n  output.writeStructBegin('TDatumVal');\n  if (this.int_val !== null && this.int_val !== undefined) {\n    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);\n    output.writeI64(this.int_val);\n    output.writeFieldEnd();\n  }\n  if (this.real_val !== null && this.real_val !== undefined) {\n    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);\n    output.writeDouble(this.real_val);\n    output.writeFieldEnd();\n  }\n  if (this.str_val !== null && this.str_val !== undefined) {\n    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);\n    output.writeString(this.str_val);\n    output.writeFieldEnd();\n  }\n  if (this.arr_val !== null && this.arr_val !== undefined) {\n    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);\n    for (var iter7 in this.arr_val) {\n      if (this.arr_val.hasOwnProperty(iter7)) {\n        iter7 = this.arr_val[iter7];\n        iter7.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDatum = function (args) {\n  this.val = null;\n  this.is_null = null;\n  if (args) {\n    if (args.val !== undefined && args.val !== null) {\n      this.val = new TDatumVal(args.val);\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTDatum.prototype = {};\nTDatum.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.val = new TDatumVal();\n          this.val.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatum.prototype.write = function (output) {\n  output.writeStructBegin('TDatum');\n  if (this.val !== null && this.val !== undefined) {\n    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);\n    this.val.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStringValue = function (args) {\n  this.str_val = null;\n  this.is_null = null;\n  if (args) {\n    if (args.str_val !== undefined && args.str_val !== null) {\n      this.str_val = args.str_val;\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTStringValue.prototype = {};\nTStringValue.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.str_val = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStringValue.prototype.write = function (output) {\n  output.writeStructBegin('TStringValue');\n  if (this.str_val !== null && this.str_val !== undefined) {\n    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);\n    output.writeString(this.str_val);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTypeInfo = function (args) {\n  this.type = null;\n  this.encoding = null;\n  this.nullable = null;\n  this.is_array = null;\n  this.precision = null;\n  this.scale = null;\n  this.comp_param = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.encoding !== undefined && args.encoding !== null) {\n      this.encoding = args.encoding;\n    }\n    if (args.nullable !== undefined && args.nullable !== null) {\n      this.nullable = args.nullable;\n    }\n    if (args.is_array !== undefined && args.is_array !== null) {\n      this.is_array = args.is_array;\n    }\n    if (args.precision !== undefined && args.precision !== null) {\n      this.precision = args.precision;\n    }\n    if (args.scale !== undefined && args.scale !== null) {\n      this.scale = args.scale;\n    }\n    if (args.comp_param !== undefined && args.comp_param !== null) {\n      this.comp_param = args.comp_param;\n    }\n  }\n};\nTTypeInfo.prototype = {};\nTTypeInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.encoding = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.nullable = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_array = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.precision = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.scale = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I32) {\n          this.comp_param = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTypeInfo.prototype.write = function (output) {\n  output.writeStructBegin('TTypeInfo');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.encoding !== null && this.encoding !== undefined) {\n    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);\n    output.writeI32(this.encoding);\n    output.writeFieldEnd();\n  }\n  if (this.nullable !== null && this.nullable !== undefined) {\n    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);\n    output.writeBool(this.nullable);\n    output.writeFieldEnd();\n  }\n  if (this.is_array !== null && this.is_array !== undefined) {\n    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);\n    output.writeBool(this.is_array);\n    output.writeFieldEnd();\n  }\n  if (this.precision !== null && this.precision !== undefined) {\n    output.writeFieldBegin('precision', Thrift.Type.I32, 5);\n    output.writeI32(this.precision);\n    output.writeFieldEnd();\n  }\n  if (this.scale !== null && this.scale !== undefined) {\n    output.writeFieldBegin('scale', Thrift.Type.I32, 6);\n    output.writeI32(this.scale);\n    output.writeFieldEnd();\n  }\n  if (this.comp_param !== null && this.comp_param !== undefined) {\n    output.writeFieldBegin('comp_param', Thrift.Type.I32, 7);\n    output.writeI32(this.comp_param);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnType = function (args) {\n  this.col_name = null;\n  this.col_type = null;\n  this.is_reserved_keyword = null;\n  this.src_name = null;\n  this.is_system = null;\n  this.is_physical = null;\n  if (args) {\n    if (args.col_name !== undefined && args.col_name !== null) {\n      this.col_name = args.col_name;\n    }\n    if (args.col_type !== undefined && args.col_type !== null) {\n      this.col_type = new TTypeInfo(args.col_type);\n    }\n    if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {\n      this.is_reserved_keyword = args.is_reserved_keyword;\n    }\n    if (args.src_name !== undefined && args.src_name !== null) {\n      this.src_name = args.src_name;\n    }\n    if (args.is_system !== undefined && args.is_system !== null) {\n      this.is_system = args.is_system;\n    }\n    if (args.is_physical !== undefined && args.is_physical !== null) {\n      this.is_physical = args.is_physical;\n    }\n  }\n};\nTColumnType.prototype = {};\nTColumnType.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.col_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.col_type = new TTypeInfo();\n          this.col_type.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_reserved_keyword = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.src_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_system = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_physical = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnType.prototype.write = function (output) {\n  output.writeStructBegin('TColumnType');\n  if (this.col_name !== null && this.col_name !== undefined) {\n    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);\n    output.writeString(this.col_name);\n    output.writeFieldEnd();\n  }\n  if (this.col_type !== null && this.col_type !== undefined) {\n    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);\n    this.col_type.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {\n    output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);\n    output.writeBool(this.is_reserved_keyword);\n    output.writeFieldEnd();\n  }\n  if (this.src_name !== null && this.src_name !== undefined) {\n    output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);\n    output.writeString(this.src_name);\n    output.writeFieldEnd();\n  }\n  if (this.is_system !== null && this.is_system !== undefined) {\n    output.writeFieldBegin('is_system', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_system);\n    output.writeFieldEnd();\n  }\n  if (this.is_physical !== null && this.is_physical !== undefined) {\n    output.writeFieldBegin('is_physical', Thrift.Type.BOOL, 6);\n    output.writeBool(this.is_physical);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRow = function (args) {\n  this.cols = null;\n  if (args) {\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TDatum]);\n    }\n  }\n};\nTRow.prototype = {};\nTRow.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size8 = 0;\n          var _rtmp312;\n          this.cols = [];\n          var _etype11 = 0;\n          _rtmp312 = input.readListBegin();\n          _etype11 = _rtmp312.etype;\n          _size8 = _rtmp312.size;\n          for (var _i13 = 0; _i13 < _size8; ++_i13) {\n            var elem14 = null;\n            elem14 = new TDatum();\n            elem14.read(input);\n            this.cols.push(elem14);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRow.prototype.write = function (output) {\n  output.writeStructBegin('TRow');\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter15 in this.cols) {\n      if (this.cols.hasOwnProperty(iter15)) {\n        iter15 = this.cols[iter15];\n        iter15.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnData = function (args) {\n  this.int_col = null;\n  this.real_col = null;\n  this.str_col = null;\n  this.arr_col = null;\n  if (args) {\n    if (args.int_col !== undefined && args.int_col !== null) {\n      this.int_col = Thrift.copyList(args.int_col, [null]);\n    }\n    if (args.real_col !== undefined && args.real_col !== null) {\n      this.real_col = Thrift.copyList(args.real_col, [null]);\n    }\n    if (args.str_col !== undefined && args.str_col !== null) {\n      this.str_col = Thrift.copyList(args.str_col, [null]);\n    }\n    if (args.arr_col !== undefined && args.arr_col !== null) {\n      this.arr_col = Thrift.copyList(args.arr_col, [null]);\n    }\n  }\n};\nTColumnData.prototype = {};\nTColumnData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size16 = 0;\n          var _rtmp320;\n          this.int_col = [];\n          var _etype19 = 0;\n          _rtmp320 = input.readListBegin();\n          _etype19 = _rtmp320.etype;\n          _size16 = _rtmp320.size;\n          for (var _i21 = 0; _i21 < _size16; ++_i21) {\n            var elem22 = null;\n            elem22 = input.readI64().value;\n            this.int_col.push(elem22);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size23 = 0;\n          var _rtmp327;\n          this.real_col = [];\n          var _etype26 = 0;\n          _rtmp327 = input.readListBegin();\n          _etype26 = _rtmp327.etype;\n          _size23 = _rtmp327.size;\n          for (var _i28 = 0; _i28 < _size23; ++_i28) {\n            var elem29 = null;\n            elem29 = input.readDouble().value;\n            this.real_col.push(elem29);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size30 = 0;\n          var _rtmp334;\n          this.str_col = [];\n          var _etype33 = 0;\n          _rtmp334 = input.readListBegin();\n          _etype33 = _rtmp334.etype;\n          _size30 = _rtmp334.size;\n          for (var _i35 = 0; _i35 < _size30; ++_i35) {\n            var elem36 = null;\n            elem36 = input.readString().value;\n            this.str_col.push(elem36);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size37 = 0;\n          var _rtmp341;\n          this.arr_col = [];\n          var _etype40 = 0;\n          _rtmp341 = input.readListBegin();\n          _etype40 = _rtmp341.etype;\n          _size37 = _rtmp341.size;\n          for (var _i42 = 0; _i42 < _size37; ++_i42) {\n            var elem43 = null;\n            elem43 = new TColumn();\n            elem43.read(input);\n            this.arr_col.push(elem43);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnData.prototype.write = function (output) {\n  output.writeStructBegin('TColumnData');\n  if (this.int_col !== null && this.int_col !== undefined) {\n    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.I64, this.int_col.length);\n    for (var iter44 in this.int_col) {\n      if (this.int_col.hasOwnProperty(iter44)) {\n        iter44 = this.int_col[iter44];\n        output.writeI64(iter44);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.real_col !== null && this.real_col !== undefined) {\n    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);\n    for (var iter45 in this.real_col) {\n      if (this.real_col.hasOwnProperty(iter45)) {\n        iter45 = this.real_col[iter45];\n        output.writeDouble(iter45);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.str_col !== null && this.str_col !== undefined) {\n    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);\n    for (var iter46 in this.str_col) {\n      if (this.str_col.hasOwnProperty(iter46)) {\n        iter46 = this.str_col[iter46];\n        output.writeString(iter46);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.arr_col !== null && this.arr_col !== undefined) {\n    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);\n    for (var iter47 in this.arr_col) {\n      if (this.arr_col.hasOwnProperty(iter47)) {\n        iter47 = this.arr_col[iter47];\n        iter47.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumn = function (args) {\n  this.data = null;\n  this.nulls = null;\n  if (args) {\n    if (args.data !== undefined && args.data !== null) {\n      this.data = new TColumnData(args.data);\n    }\n    if (args.nulls !== undefined && args.nulls !== null) {\n      this.nulls = Thrift.copyList(args.nulls, [null]);\n    }\n  }\n};\nTColumn.prototype = {};\nTColumn.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.data = new TColumnData();\n          this.data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size48 = 0;\n          var _rtmp352;\n          this.nulls = [];\n          var _etype51 = 0;\n          _rtmp352 = input.readListBegin();\n          _etype51 = _rtmp352.etype;\n          _size48 = _rtmp352.size;\n          for (var _i53 = 0; _i53 < _size48; ++_i53) {\n            var elem54 = null;\n            elem54 = input.readBool().value;\n            this.nulls.push(elem54);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumn.prototype.write = function (output) {\n  output.writeStructBegin('TColumn');\n  if (this.data !== null && this.data !== undefined) {\n    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);\n    this.data.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.nulls !== null && this.nulls !== undefined) {\n    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);\n    for (var iter55 in this.nulls) {\n      if (this.nulls.hasOwnProperty(iter55)) {\n        iter55 = this.nulls[iter55];\n        output.writeBool(iter55);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStringRow = function (args) {\n  this.cols = null;\n  if (args) {\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TStringValue]);\n    }\n  }\n};\nTStringRow.prototype = {};\nTStringRow.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size56 = 0;\n          var _rtmp360;\n          this.cols = [];\n          var _etype59 = 0;\n          _rtmp360 = input.readListBegin();\n          _etype59 = _rtmp360.etype;\n          _size56 = _rtmp360.size;\n          for (var _i61 = 0; _i61 < _size56; ++_i61) {\n            var elem62 = null;\n            elem62 = new TStringValue();\n            elem62.read(input);\n            this.cols.push(elem62);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStringRow.prototype.write = function (output) {\n  output.writeStructBegin('TStringRow');\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter63 in this.cols) {\n      if (this.cols.hasOwnProperty(iter63)) {\n        iter63 = this.cols[iter63];\n        iter63.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStepResult = function (args) {\n  this.serialized_rows = null;\n  this.execution_finished = null;\n  this.merge_type = null;\n  this.sharded = null;\n  this.row_desc = null;\n  this.node_id = null;\n  if (args) {\n    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\n      this.serialized_rows = args.serialized_rows;\n    }\n    if (args.execution_finished !== undefined && args.execution_finished !== null) {\n      this.execution_finished = args.execution_finished;\n    }\n    if (args.merge_type !== undefined && args.merge_type !== null) {\n      this.merge_type = args.merge_type;\n    }\n    if (args.sharded !== undefined && args.sharded !== null) {\n      this.sharded = args.sharded;\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.node_id !== undefined && args.node_id !== null) {\n      this.node_id = args.node_id;\n    }\n  }\n};\nTStepResult.prototype = {};\nTStepResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.serialized_rows = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.execution_finished = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.merge_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.sharded = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          var _size64 = 0;\n          var _rtmp368;\n          this.row_desc = [];\n          var _etype67 = 0;\n          _rtmp368 = input.readListBegin();\n          _etype67 = _rtmp368.etype;\n          _size64 = _rtmp368.size;\n          for (var _i69 = 0; _i69 < _size64; ++_i69) {\n            var elem70 = null;\n            elem70 = new TColumnType();\n            elem70.read(input);\n            this.row_desc.push(elem70);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.node_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStepResult.prototype.write = function (output) {\n  output.writeStructBegin('TStepResult');\n  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\n    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);\n    output.writeString(this.serialized_rows);\n    output.writeFieldEnd();\n  }\n  if (this.execution_finished !== null && this.execution_finished !== undefined) {\n    output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);\n    output.writeBool(this.execution_finished);\n    output.writeFieldEnd();\n  }\n  if (this.merge_type !== null && this.merge_type !== undefined) {\n    output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);\n    output.writeI32(this.merge_type);\n    output.writeFieldEnd();\n  }\n  if (this.sharded !== null && this.sharded !== undefined) {\n    output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);\n    output.writeBool(this.sharded);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter71 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter71)) {\n        iter71 = this.row_desc[iter71];\n        iter71.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.node_id !== null && this.node_id !== undefined) {\n    output.writeFieldBegin('node_id', Thrift.Type.I32, 6);\n    output.writeI32(this.node_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRowSet = function (args) {\n  this.row_desc = null;\n  this.rows = null;\n  this.columns = null;\n  this.is_columnar = null;\n  if (args) {\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TRow]);\n    }\n    if (args.columns !== undefined && args.columns !== null) {\n      this.columns = Thrift.copyList(args.columns, [TColumn]);\n    }\n    if (args.is_columnar !== undefined && args.is_columnar !== null) {\n      this.is_columnar = args.is_columnar;\n    }\n  }\n};\nTRowSet.prototype = {};\nTRowSet.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size72 = 0;\n          var _rtmp376;\n          this.row_desc = [];\n          var _etype75 = 0;\n          _rtmp376 = input.readListBegin();\n          _etype75 = _rtmp376.etype;\n          _size72 = _rtmp376.size;\n          for (var _i77 = 0; _i77 < _size72; ++_i77) {\n            var elem78 = null;\n            elem78 = new TColumnType();\n            elem78.read(input);\n            this.row_desc.push(elem78);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size79 = 0;\n          var _rtmp383;\n          this.rows = [];\n          var _etype82 = 0;\n          _rtmp383 = input.readListBegin();\n          _etype82 = _rtmp383.etype;\n          _size79 = _rtmp383.size;\n          for (var _i84 = 0; _i84 < _size79; ++_i84) {\n            var elem85 = null;\n            elem85 = new TRow();\n            elem85.read(input);\n            this.rows.push(elem85);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size86 = 0;\n          var _rtmp390;\n          this.columns = [];\n          var _etype89 = 0;\n          _rtmp390 = input.readListBegin();\n          _etype89 = _rtmp390.etype;\n          _size86 = _rtmp390.size;\n          for (var _i91 = 0; _i91 < _size86; ++_i91) {\n            var elem92 = null;\n            elem92 = new TColumn();\n            elem92.read(input);\n            this.columns.push(elem92);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_columnar = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRowSet.prototype.write = function (output) {\n  output.writeStructBegin('TRowSet');\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter93 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter93)) {\n        iter93 = this.row_desc[iter93];\n        iter93.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter94 in this.rows) {\n      if (this.rows.hasOwnProperty(iter94)) {\n        iter94 = this.rows[iter94];\n        iter94.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.columns !== null && this.columns !== undefined) {\n    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);\n    for (var iter95 in this.columns) {\n      if (this.columns.hasOwnProperty(iter95)) {\n        iter95 = this.columns[iter95];\n        iter95.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.is_columnar !== null && this.is_columnar !== undefined) {\n    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);\n    output.writeBool(this.is_columnar);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TQueryResult = function (args) {\n  this.row_set = null;\n  this.execution_time_ms = null;\n  this.total_time_ms = null;\n  this.nonce = null;\n  if (args) {\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nTQueryResult.prototype = {};\nTQueryResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTQueryResult.prototype.write = function (output) {\n  output.writeStructBegin('TQueryResult');\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDataFrame = function (args) {\n  this.sm_handle = null;\n  this.sm_size = null;\n  this.df_handle = null;\n  this.df_size = null;\n  if (args) {\n    if (args.sm_handle !== undefined && args.sm_handle !== null) {\n      this.sm_handle = args.sm_handle;\n    }\n    if (args.sm_size !== undefined && args.sm_size !== null) {\n      this.sm_size = args.sm_size;\n    }\n    if (args.df_handle !== undefined && args.df_handle !== null) {\n      this.df_handle = args.df_handle;\n    }\n    if (args.df_size !== undefined && args.df_size !== null) {\n      this.df_size = args.df_size;\n    }\n  }\n};\nTDataFrame.prototype = {};\nTDataFrame.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.sm_handle = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.sm_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.df_handle = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.df_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDataFrame.prototype.write = function (output) {\n  output.writeStructBegin('TDataFrame');\n  if (this.sm_handle !== null && this.sm_handle !== undefined) {\n    output.writeFieldBegin('sm_handle', Thrift.Type.STRING, 1);\n    output.writeBinary(this.sm_handle);\n    output.writeFieldEnd();\n  }\n  if (this.sm_size !== null && this.sm_size !== undefined) {\n    output.writeFieldBegin('sm_size', Thrift.Type.I64, 2);\n    output.writeI64(this.sm_size);\n    output.writeFieldEnd();\n  }\n  if (this.df_handle !== null && this.df_handle !== undefined) {\n    output.writeFieldBegin('df_handle', Thrift.Type.STRING, 3);\n    output.writeBinary(this.df_handle);\n    output.writeFieldEnd();\n  }\n  if (this.df_size !== null && this.df_size !== undefined) {\n    output.writeFieldBegin('df_size', Thrift.Type.I64, 4);\n    output.writeI64(this.df_size);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDBInfo = function (args) {\n  this.db_name = null;\n  this.db_owner = null;\n  if (args) {\n    if (args.db_name !== undefined && args.db_name !== null) {\n      this.db_name = args.db_name;\n    }\n    if (args.db_owner !== undefined && args.db_owner !== null) {\n      this.db_owner = args.db_owner;\n    }\n  }\n};\nTDBInfo.prototype = {};\nTDBInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.db_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.db_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDBInfo.prototype.write = function (output) {\n  output.writeStructBegin('TDBInfo');\n  if (this.db_name !== null && this.db_name !== undefined) {\n    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);\n    output.writeString(this.db_name);\n    output.writeFieldEnd();\n  }\n  if (this.db_owner !== null && this.db_owner !== undefined) {\n    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);\n    output.writeString(this.db_owner);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TMapDException = function (args) {\n  this.error_msg = null;\n  if (args) {\n    if (args.error_msg !== undefined && args.error_msg !== null) {\n      this.error_msg = args.error_msg;\n    }\n  }\n};\nThrift.inherits(TMapDException, Thrift.TException);\nTMapDException.prototype.name = 'TMapDException';\nTMapDException.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.error_msg = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTMapDException.prototype.write = function (output) {\n  output.writeStructBegin('TMapDException');\n  if (this.error_msg !== null && this.error_msg !== undefined) {\n    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);\n    output.writeString(this.error_msg);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCopyParams = function (args) {\n  this.delimiter = null;\n  this.null_str = null;\n  this.has_header = null;\n  this.quoted = null;\n  this.quote = null;\n  this.escape = null;\n  this.line_delim = null;\n  this.array_delim = null;\n  this.array_begin = null;\n  this.array_end = null;\n  this.threads = null;\n  this.table_type = 0;\n  this.s3_access_key = null;\n  this.s3_secret_key = null;\n  this.s3_region = null;\n  this.geo_coords_encoding = 0;\n  this.geo_coords_comp_param = null;\n  if (args) {\n    if (args.delimiter !== undefined && args.delimiter !== null) {\n      this.delimiter = args.delimiter;\n    }\n    if (args.null_str !== undefined && args.null_str !== null) {\n      this.null_str = args.null_str;\n    }\n    if (args.has_header !== undefined && args.has_header !== null) {\n      this.has_header = args.has_header;\n    }\n    if (args.quoted !== undefined && args.quoted !== null) {\n      this.quoted = args.quoted;\n    }\n    if (args.quote !== undefined && args.quote !== null) {\n      this.quote = args.quote;\n    }\n    if (args.escape !== undefined && args.escape !== null) {\n      this.escape = args.escape;\n    }\n    if (args.line_delim !== undefined && args.line_delim !== null) {\n      this.line_delim = args.line_delim;\n    }\n    if (args.array_delim !== undefined && args.array_delim !== null) {\n      this.array_delim = args.array_delim;\n    }\n    if (args.array_begin !== undefined && args.array_begin !== null) {\n      this.array_begin = args.array_begin;\n    }\n    if (args.array_end !== undefined && args.array_end !== null) {\n      this.array_end = args.array_end;\n    }\n    if (args.threads !== undefined && args.threads !== null) {\n      this.threads = args.threads;\n    }\n    if (args.table_type !== undefined && args.table_type !== null) {\n      this.table_type = args.table_type;\n    }\n    if (args.s3_access_key !== undefined && args.s3_access_key !== null) {\n      this.s3_access_key = args.s3_access_key;\n    }\n    if (args.s3_secret_key !== undefined && args.s3_secret_key !== null) {\n      this.s3_secret_key = args.s3_secret_key;\n    }\n    if (args.s3_region !== undefined && args.s3_region !== null) {\n      this.s3_region = args.s3_region;\n    }\n    if (args.geo_coords_encoding !== undefined && args.geo_coords_encoding !== null) {\n      this.geo_coords_encoding = args.geo_coords_encoding;\n    }\n    if (args.geo_coords_comp_param !== undefined && args.geo_coords_comp_param !== null) {\n      this.geo_coords_comp_param = args.geo_coords_comp_param;\n    }\n  }\n};\nTCopyParams.prototype = {};\nTCopyParams.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.delimiter = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.null_str = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.has_header = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.quoted = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.quote = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.escape = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.line_delim = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_delim = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_begin = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_end = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 11:\n        if (ftype == Thrift.Type.I32) {\n          this.threads = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 12:\n        if (ftype == Thrift.Type.I32) {\n          this.table_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 13:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_access_key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 14:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_secret_key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 15:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_region = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 16:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_encoding = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 17:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_comp_param = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCopyParams.prototype.write = function (output) {\n  output.writeStructBegin('TCopyParams');\n  if (this.delimiter !== null && this.delimiter !== undefined) {\n    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);\n    output.writeString(this.delimiter);\n    output.writeFieldEnd();\n  }\n  if (this.null_str !== null && this.null_str !== undefined) {\n    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);\n    output.writeString(this.null_str);\n    output.writeFieldEnd();\n  }\n  if (this.has_header !== null && this.has_header !== undefined) {\n    output.writeFieldBegin('has_header', Thrift.Type.BOOL, 3);\n    output.writeBool(this.has_header);\n    output.writeFieldEnd();\n  }\n  if (this.quoted !== null && this.quoted !== undefined) {\n    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);\n    output.writeBool(this.quoted);\n    output.writeFieldEnd();\n  }\n  if (this.quote !== null && this.quote !== undefined) {\n    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);\n    output.writeString(this.quote);\n    output.writeFieldEnd();\n  }\n  if (this.escape !== null && this.escape !== undefined) {\n    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);\n    output.writeString(this.escape);\n    output.writeFieldEnd();\n  }\n  if (this.line_delim !== null && this.line_delim !== undefined) {\n    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);\n    output.writeString(this.line_delim);\n    output.writeFieldEnd();\n  }\n  if (this.array_delim !== null && this.array_delim !== undefined) {\n    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);\n    output.writeString(this.array_delim);\n    output.writeFieldEnd();\n  }\n  if (this.array_begin !== null && this.array_begin !== undefined) {\n    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);\n    output.writeString(this.array_begin);\n    output.writeFieldEnd();\n  }\n  if (this.array_end !== null && this.array_end !== undefined) {\n    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);\n    output.writeString(this.array_end);\n    output.writeFieldEnd();\n  }\n  if (this.threads !== null && this.threads !== undefined) {\n    output.writeFieldBegin('threads', Thrift.Type.I32, 11);\n    output.writeI32(this.threads);\n    output.writeFieldEnd();\n  }\n  if (this.table_type !== null && this.table_type !== undefined) {\n    output.writeFieldBegin('table_type', Thrift.Type.I32, 12);\n    output.writeI32(this.table_type);\n    output.writeFieldEnd();\n  }\n  if (this.s3_access_key !== null && this.s3_access_key !== undefined) {\n    output.writeFieldBegin('s3_access_key', Thrift.Type.STRING, 13);\n    output.writeString(this.s3_access_key);\n    output.writeFieldEnd();\n  }\n  if (this.s3_secret_key !== null && this.s3_secret_key !== undefined) {\n    output.writeFieldBegin('s3_secret_key', Thrift.Type.STRING, 14);\n    output.writeString(this.s3_secret_key);\n    output.writeFieldEnd();\n  }\n  if (this.s3_region !== null && this.s3_region !== undefined) {\n    output.writeFieldBegin('s3_region', Thrift.Type.STRING, 15);\n    output.writeString(this.s3_region);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_encoding !== null && this.geo_coords_encoding !== undefined) {\n    output.writeFieldBegin('geo_coords_encoding', Thrift.Type.I32, 16);\n    output.writeI32(this.geo_coords_encoding);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_comp_param !== null && this.geo_coords_comp_param !== undefined) {\n    output.writeFieldBegin('geo_coords_comp_param', Thrift.Type.I32, 17);\n    output.writeI32(this.geo_coords_comp_param);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDetectResult = function (args) {\n  this.row_set = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nTDetectResult.prototype = {};\nTDetectResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDetectResult.prototype.write = function (output) {\n  output.writeStructBegin('TDetectResult');\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TImportStatus = function (args) {\n  this.elapsed = null;\n  this.rows_completed = null;\n  this.rows_estimated = null;\n  this.rows_rejected = null;\n  if (args) {\n    if (args.elapsed !== undefined && args.elapsed !== null) {\n      this.elapsed = args.elapsed;\n    }\n    if (args.rows_completed !== undefined && args.rows_completed !== null) {\n      this.rows_completed = args.rows_completed;\n    }\n    if (args.rows_estimated !== undefined && args.rows_estimated !== null) {\n      this.rows_estimated = args.rows_estimated;\n    }\n    if (args.rows_rejected !== undefined && args.rows_rejected !== null) {\n      this.rows_rejected = args.rows_rejected;\n    }\n  }\n};\nTImportStatus.prototype = {};\nTImportStatus.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.elapsed = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_completed = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_estimated = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_rejected = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTImportStatus.prototype.write = function (output) {\n  output.writeStructBegin('TImportStatus');\n  if (this.elapsed !== null && this.elapsed !== undefined) {\n    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);\n    output.writeI64(this.elapsed);\n    output.writeFieldEnd();\n  }\n  if (this.rows_completed !== null && this.rows_completed !== undefined) {\n    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);\n    output.writeI64(this.rows_completed);\n    output.writeFieldEnd();\n  }\n  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {\n    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);\n    output.writeI64(this.rows_estimated);\n    output.writeFieldEnd();\n  }\n  if (this.rows_rejected !== null && this.rows_rejected !== undefined) {\n    output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);\n    output.writeI64(this.rows_rejected);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TFrontendView = function (args) {\n  this.view_name = null;\n  this.view_state = null;\n  this.image_hash = null;\n  this.update_time = null;\n  this.view_metadata = null;\n  if (args) {\n    if (args.view_name !== undefined && args.view_name !== null) {\n      this.view_name = args.view_name;\n    }\n    if (args.view_state !== undefined && args.view_state !== null) {\n      this.view_state = args.view_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.update_time !== undefined && args.update_time !== null) {\n      this.update_time = args.update_time;\n    }\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n      this.view_metadata = args.view_metadata;\n    }\n  }\n};\nTFrontendView.prototype = {};\nTFrontendView.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.update_time = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTFrontendView.prototype.write = function (output) {\n  output.writeStructBegin('TFrontendView');\n  if (this.view_name !== null && this.view_name !== undefined) {\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);\n    output.writeString(this.view_name);\n    output.writeFieldEnd();\n  }\n  if (this.view_state !== null && this.view_state !== undefined) {\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\n    output.writeString(this.view_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.update_time !== null && this.update_time !== undefined) {\n    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);\n    output.writeString(this.update_time);\n    output.writeFieldEnd();\n  }\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.view_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDashboard = function (args) {\n  this.dashboard_name = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.update_time = null;\n  this.dashboard_metadata = null;\n  this.dashboard_id = null;\n  this.dashboard_owner = null;\n  if (args) {\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.update_time !== undefined && args.update_time !== null) {\n      this.update_time = args.update_time;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {\n      this.dashboard_owner = args.dashboard_owner;\n    }\n  }\n};\nTDashboard.prototype = {};\nTDashboard.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.update_time = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDashboard.prototype.write = function (output) {\n  output.writeStructBegin('TDashboard');\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 1);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 2);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.update_time !== null && this.update_time !== undefined) {\n    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);\n    output.writeString(this.update_time);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 6);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {\n    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 7);\n    output.writeString(this.dashboard_owner);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TServerStatus = function (args) {\n  this.read_only = null;\n  this.version = null;\n  this.rendering_enabled = null;\n  this.start_time = null;\n  this.edition = null;\n  this.host_name = null;\n  this.poly_rendering_enabled = null;\n  if (args) {\n    if (args.read_only !== undefined && args.read_only !== null) {\n      this.read_only = args.read_only;\n    }\n    if (args.version !== undefined && args.version !== null) {\n      this.version = args.version;\n    }\n    if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {\n      this.rendering_enabled = args.rendering_enabled;\n    }\n    if (args.start_time !== undefined && args.start_time !== null) {\n      this.start_time = args.start_time;\n    }\n    if (args.edition !== undefined && args.edition !== null) {\n      this.edition = args.edition;\n    }\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.poly_rendering_enabled !== undefined && args.poly_rendering_enabled !== null) {\n      this.poly_rendering_enabled = args.poly_rendering_enabled;\n    }\n  }\n};\nTServerStatus.prototype = {};\nTServerStatus.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.read_only = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.version = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.rendering_enabled = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.start_time = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.edition = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.poly_rendering_enabled = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTServerStatus.prototype.write = function (output) {\n  output.writeStructBegin('TServerStatus');\n  if (this.read_only !== null && this.read_only !== undefined) {\n    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);\n    output.writeBool(this.read_only);\n    output.writeFieldEnd();\n  }\n  if (this.version !== null && this.version !== undefined) {\n    output.writeFieldBegin('version', Thrift.Type.STRING, 2);\n    output.writeString(this.version);\n    output.writeFieldEnd();\n  }\n  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {\n    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);\n    output.writeBool(this.rendering_enabled);\n    output.writeFieldEnd();\n  }\n  if (this.start_time !== null && this.start_time !== undefined) {\n    output.writeFieldBegin('start_time', Thrift.Type.I64, 4);\n    output.writeI64(this.start_time);\n    output.writeFieldEnd();\n  }\n  if (this.edition !== null && this.edition !== undefined) {\n    output.writeFieldBegin('edition', Thrift.Type.STRING, 5);\n    output.writeString(this.edition);\n    output.writeFieldEnd();\n  }\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 6);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.poly_rendering_enabled !== null && this.poly_rendering_enabled !== undefined) {\n    output.writeFieldBegin('poly_rendering_enabled', Thrift.Type.BOOL, 7);\n    output.writeBool(this.poly_rendering_enabled);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPixel = function (args) {\n  this.x = null;\n  this.y = null;\n  if (args) {\n    if (args.x !== undefined && args.x !== null) {\n      this.x = args.x;\n    }\n    if (args.y !== undefined && args.y !== null) {\n      this.y = args.y;\n    }\n  }\n};\nTPixel.prototype = {};\nTPixel.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.x = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.y = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPixel.prototype.write = function (output) {\n  output.writeStructBegin('TPixel');\n  if (this.x !== null && this.x !== undefined) {\n    output.writeFieldBegin('x', Thrift.Type.I64, 1);\n    output.writeI64(this.x);\n    output.writeFieldEnd();\n  }\n  if (this.y !== null && this.y !== undefined) {\n    output.writeFieldBegin('y', Thrift.Type.I64, 2);\n    output.writeI64(this.y);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPixelTableRowResult = function (args) {\n  this.pixel = null;\n  this.vega_table_name = null;\n  this.table_id = null;\n  this.row_id = null;\n  this.row_set = null;\n  this.nonce = null;\n  if (args) {\n    if (args.pixel !== undefined && args.pixel !== null) {\n      this.pixel = new TPixel(args.pixel);\n    }\n    if (args.vega_table_name !== undefined && args.vega_table_name !== null) {\n      this.vega_table_name = args.vega_table_name;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.row_id !== undefined && args.row_id !== null) {\n      this.row_id = args.row_id;\n    }\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nTPixelTableRowResult.prototype = {};\nTPixelTableRowResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pixel = new TPixel();\n          this.pixel.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.table_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.row_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPixelTableRowResult.prototype.write = function (output) {\n  output.writeStructBegin('TPixelTableRowResult');\n  if (this.pixel !== null && this.pixel !== undefined) {\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\n    this.pixel.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.vega_table_name !== null && this.vega_table_name !== undefined) {\n    output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.vega_table_name);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I64, 3);\n    output.writeI64(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.row_id !== null && this.row_id !== undefined) {\n    output.writeFieldBegin('row_id', Thrift.Type.I64, 4);\n    output.writeI64(this.row_id);\n    output.writeFieldEnd();\n  }\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderResult = function (args) {\n  this.image = null;\n  this.nonce = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  this.vega_metadata = null;\n  if (args) {\n    if (args.image !== undefined && args.image !== null) {\n      this.image = args.image;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n    if (args.vega_metadata !== undefined && args.vega_metadata !== null) {\n      this.vega_metadata = args.vega_metadata;\n    }\n  }\n};\nTRenderResult.prototype = {};\nTRenderResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.image = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderResult');\n  if (this.image !== null && this.image !== undefined) {\n    output.writeFieldBegin('image', Thrift.Type.STRING, 1);\n    output.writeBinary(this.image);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.vega_metadata !== null && this.vega_metadata !== undefined) {\n    output.writeFieldBegin('vega_metadata', Thrift.Type.STRING, 6);\n    output.writeString(this.vega_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TGpuSpecification = function (args) {\n  this.num_sm = null;\n  this.clock_frequency_kHz = null;\n  this.memory = null;\n  this.compute_capability_major = null;\n  this.compute_capability_minor = null;\n  if (args) {\n    if (args.num_sm !== undefined && args.num_sm !== null) {\n      this.num_sm = args.num_sm;\n    }\n    if (args.clock_frequency_kHz !== undefined && args.clock_frequency_kHz !== null) {\n      this.clock_frequency_kHz = args.clock_frequency_kHz;\n    }\n    if (args.memory !== undefined && args.memory !== null) {\n      this.memory = args.memory;\n    }\n    if (args.compute_capability_major !== undefined && args.compute_capability_major !== null) {\n      this.compute_capability_major = args.compute_capability_major;\n    }\n    if (args.compute_capability_minor !== undefined && args.compute_capability_minor !== null) {\n      this.compute_capability_minor = args.compute_capability_minor;\n    }\n  }\n};\nTGpuSpecification.prototype = {};\nTGpuSpecification.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.num_sm = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.clock_frequency_kHz = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.memory = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I16) {\n          this.compute_capability_major = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I16) {\n          this.compute_capability_minor = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTGpuSpecification.prototype.write = function (output) {\n  output.writeStructBegin('TGpuSpecification');\n  if (this.num_sm !== null && this.num_sm !== undefined) {\n    output.writeFieldBegin('num_sm', Thrift.Type.I32, 1);\n    output.writeI32(this.num_sm);\n    output.writeFieldEnd();\n  }\n  if (this.clock_frequency_kHz !== null && this.clock_frequency_kHz !== undefined) {\n    output.writeFieldBegin('clock_frequency_kHz', Thrift.Type.I64, 2);\n    output.writeI64(this.clock_frequency_kHz);\n    output.writeFieldEnd();\n  }\n  if (this.memory !== null && this.memory !== undefined) {\n    output.writeFieldBegin('memory', Thrift.Type.I64, 3);\n    output.writeI64(this.memory);\n    output.writeFieldEnd();\n  }\n  if (this.compute_capability_major !== null && this.compute_capability_major !== undefined) {\n    output.writeFieldBegin('compute_capability_major', Thrift.Type.I16, 4);\n    output.writeI16(this.compute_capability_major);\n    output.writeFieldEnd();\n  }\n  if (this.compute_capability_minor !== null && this.compute_capability_minor !== undefined) {\n    output.writeFieldBegin('compute_capability_minor', Thrift.Type.I16, 5);\n    output.writeI16(this.compute_capability_minor);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.THardwareInfo = function (args) {\n  this.num_gpu_hw = null;\n  this.num_cpu_hw = null;\n  this.num_gpu_allocated = null;\n  this.start_gpu = null;\n  this.host_name = null;\n  this.gpu_info = null;\n  if (args) {\n    if (args.num_gpu_hw !== undefined && args.num_gpu_hw !== null) {\n      this.num_gpu_hw = args.num_gpu_hw;\n    }\n    if (args.num_cpu_hw !== undefined && args.num_cpu_hw !== null) {\n      this.num_cpu_hw = args.num_cpu_hw;\n    }\n    if (args.num_gpu_allocated !== undefined && args.num_gpu_allocated !== null) {\n      this.num_gpu_allocated = args.num_gpu_allocated;\n    }\n    if (args.start_gpu !== undefined && args.start_gpu !== null) {\n      this.start_gpu = args.start_gpu;\n    }\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.gpu_info !== undefined && args.gpu_info !== null) {\n      this.gpu_info = Thrift.copyList(args.gpu_info, [TGpuSpecification]);\n    }\n  }\n};\nTHardwareInfo.prototype = {};\nTHardwareInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I16) {\n          this.num_gpu_hw = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I16) {\n          this.num_cpu_hw = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I16) {\n          this.num_gpu_allocated = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I16) {\n          this.start_gpu = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.LIST) {\n          var _size96 = 0;\n          var _rtmp3100;\n          this.gpu_info = [];\n          var _etype99 = 0;\n          _rtmp3100 = input.readListBegin();\n          _etype99 = _rtmp3100.etype;\n          _size96 = _rtmp3100.size;\n          for (var _i101 = 0; _i101 < _size96; ++_i101) {\n            var elem102 = null;\n            elem102 = new TGpuSpecification();\n            elem102.read(input);\n            this.gpu_info.push(elem102);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTHardwareInfo.prototype.write = function (output) {\n  output.writeStructBegin('THardwareInfo');\n  if (this.num_gpu_hw !== null && this.num_gpu_hw !== undefined) {\n    output.writeFieldBegin('num_gpu_hw', Thrift.Type.I16, 1);\n    output.writeI16(this.num_gpu_hw);\n    output.writeFieldEnd();\n  }\n  if (this.num_cpu_hw !== null && this.num_cpu_hw !== undefined) {\n    output.writeFieldBegin('num_cpu_hw', Thrift.Type.I16, 2);\n    output.writeI16(this.num_cpu_hw);\n    output.writeFieldEnd();\n  }\n  if (this.num_gpu_allocated !== null && this.num_gpu_allocated !== undefined) {\n    output.writeFieldBegin('num_gpu_allocated', Thrift.Type.I16, 3);\n    output.writeI16(this.num_gpu_allocated);\n    output.writeFieldEnd();\n  }\n  if (this.start_gpu !== null && this.start_gpu !== undefined) {\n    output.writeFieldBegin('start_gpu', Thrift.Type.I16, 4);\n    output.writeI16(this.start_gpu);\n    output.writeFieldEnd();\n  }\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 5);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.gpu_info !== null && this.gpu_info !== undefined) {\n    output.writeFieldBegin('gpu_info', Thrift.Type.LIST, 6);\n    output.writeListBegin(Thrift.Type.STRUCT, this.gpu_info.length);\n    for (var iter103 in this.gpu_info) {\n      if (this.gpu_info.hasOwnProperty(iter103)) {\n        iter103 = this.gpu_info[iter103];\n        iter103.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TClusterHardwareInfo = function (args) {\n  this.hardware_info = null;\n  if (args) {\n    if (args.hardware_info !== undefined && args.hardware_info !== null) {\n      this.hardware_info = Thrift.copyList(args.hardware_info, [THardwareInfo]);\n    }\n  }\n};\nTClusterHardwareInfo.prototype = {};\nTClusterHardwareInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size104 = 0;\n          var _rtmp3108;\n          this.hardware_info = [];\n          var _etype107 = 0;\n          _rtmp3108 = input.readListBegin();\n          _etype107 = _rtmp3108.etype;\n          _size104 = _rtmp3108.size;\n          for (var _i109 = 0; _i109 < _size104; ++_i109) {\n            var elem110 = null;\n            elem110 = new THardwareInfo();\n            elem110.read(input);\n            this.hardware_info.push(elem110);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTClusterHardwareInfo.prototype.write = function (output) {\n  output.writeStructBegin('TClusterHardwareInfo');\n  if (this.hardware_info !== null && this.hardware_info !== undefined) {\n    output.writeFieldBegin('hardware_info', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.hardware_info.length);\n    for (var iter111 in this.hardware_info) {\n      if (this.hardware_info.hasOwnProperty(iter111)) {\n        iter111 = this.hardware_info[iter111];\n        iter111.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TMemoryData = function (args) {\n  this.slab = null;\n  this.start_page = null;\n  this.num_pages = null;\n  this.touch = null;\n  this.chunk_key = null;\n  this.buffer_epoch = null;\n  this.is_free = null;\n  if (args) {\n    if (args.slab !== undefined && args.slab !== null) {\n      this.slab = args.slab;\n    }\n    if (args.start_page !== undefined && args.start_page !== null) {\n      this.start_page = args.start_page;\n    }\n    if (args.num_pages !== undefined && args.num_pages !== null) {\n      this.num_pages = args.num_pages;\n    }\n    if (args.touch !== undefined && args.touch !== null) {\n      this.touch = args.touch;\n    }\n    if (args.chunk_key !== undefined && args.chunk_key !== null) {\n      this.chunk_key = Thrift.copyList(args.chunk_key, [null]);\n    }\n    if (args.buffer_epoch !== undefined && args.buffer_epoch !== null) {\n      this.buffer_epoch = args.buffer_epoch;\n    }\n    if (args.is_free !== undefined && args.is_free !== null) {\n      this.is_free = args.is_free;\n    }\n  }\n};\nTMemoryData.prototype = {};\nTMemoryData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.slab = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.start_page = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.num_pages = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.touch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          var _size112 = 0;\n          var _rtmp3116;\n          this.chunk_key = [];\n          var _etype115 = 0;\n          _rtmp3116 = input.readListBegin();\n          _etype115 = _rtmp3116.etype;\n          _size112 = _rtmp3116.size;\n          for (var _i117 = 0; _i117 < _size112; ++_i117) {\n            var elem118 = null;\n            elem118 = input.readI64().value;\n            this.chunk_key.push(elem118);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.buffer_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_free = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTMemoryData.prototype.write = function (output) {\n  output.writeStructBegin('TMemoryData');\n  if (this.slab !== null && this.slab !== undefined) {\n    output.writeFieldBegin('slab', Thrift.Type.I64, 1);\n    output.writeI64(this.slab);\n    output.writeFieldEnd();\n  }\n  if (this.start_page !== null && this.start_page !== undefined) {\n    output.writeFieldBegin('start_page', Thrift.Type.I32, 2);\n    output.writeI32(this.start_page);\n    output.writeFieldEnd();\n  }\n  if (this.num_pages !== null && this.num_pages !== undefined) {\n    output.writeFieldBegin('num_pages', Thrift.Type.I64, 3);\n    output.writeI64(this.num_pages);\n    output.writeFieldEnd();\n  }\n  if (this.touch !== null && this.touch !== undefined) {\n    output.writeFieldBegin('touch', Thrift.Type.I32, 4);\n    output.writeI32(this.touch);\n    output.writeFieldEnd();\n  }\n  if (this.chunk_key !== null && this.chunk_key !== undefined) {\n    output.writeFieldBegin('chunk_key', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.I64, this.chunk_key.length);\n    for (var iter119 in this.chunk_key) {\n      if (this.chunk_key.hasOwnProperty(iter119)) {\n        iter119 = this.chunk_key[iter119];\n        output.writeI64(iter119);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.buffer_epoch !== null && this.buffer_epoch !== undefined) {\n    output.writeFieldBegin('buffer_epoch', Thrift.Type.I32, 6);\n    output.writeI32(this.buffer_epoch);\n    output.writeFieldEnd();\n  }\n  if (this.is_free !== null && this.is_free !== undefined) {\n    output.writeFieldBegin('is_free', Thrift.Type.BOOL, 7);\n    output.writeBool(this.is_free);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TNodeMemoryInfo = function (args) {\n  this.host_name = null;\n  this.page_size = null;\n  this.max_num_pages = null;\n  this.num_pages_allocated = null;\n  this.is_allocation_capped = null;\n  this.node_memory_data = null;\n  if (args) {\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.page_size !== undefined && args.page_size !== null) {\n      this.page_size = args.page_size;\n    }\n    if (args.max_num_pages !== undefined && args.max_num_pages !== null) {\n      this.max_num_pages = args.max_num_pages;\n    }\n    if (args.num_pages_allocated !== undefined && args.num_pages_allocated !== null) {\n      this.num_pages_allocated = args.num_pages_allocated;\n    }\n    if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {\n      this.is_allocation_capped = args.is_allocation_capped;\n    }\n    if (args.node_memory_data !== undefined && args.node_memory_data !== null) {\n      this.node_memory_data = Thrift.copyList(args.node_memory_data, [TMemoryData]);\n    }\n  }\n};\nTNodeMemoryInfo.prototype = {};\nTNodeMemoryInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.page_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.max_num_pages = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.num_pages_allocated = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_allocation_capped = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.LIST) {\n          var _size120 = 0;\n          var _rtmp3124;\n          this.node_memory_data = [];\n          var _etype123 = 0;\n          _rtmp3124 = input.readListBegin();\n          _etype123 = _rtmp3124.etype;\n          _size120 = _rtmp3124.size;\n          for (var _i125 = 0; _i125 < _size120; ++_i125) {\n            var elem126 = null;\n            elem126 = new TMemoryData();\n            elem126.read(input);\n            this.node_memory_data.push(elem126);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTNodeMemoryInfo.prototype.write = function (output) {\n  output.writeStructBegin('TNodeMemoryInfo');\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 1);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.page_size !== null && this.page_size !== undefined) {\n    output.writeFieldBegin('page_size', Thrift.Type.I64, 2);\n    output.writeI64(this.page_size);\n    output.writeFieldEnd();\n  }\n  if (this.max_num_pages !== null && this.max_num_pages !== undefined) {\n    output.writeFieldBegin('max_num_pages', Thrift.Type.I64, 3);\n    output.writeI64(this.max_num_pages);\n    output.writeFieldEnd();\n  }\n  if (this.num_pages_allocated !== null && this.num_pages_allocated !== undefined) {\n    output.writeFieldBegin('num_pages_allocated', Thrift.Type.I64, 4);\n    output.writeI64(this.num_pages_allocated);\n    output.writeFieldEnd();\n  }\n  if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {\n    output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_allocation_capped);\n    output.writeFieldEnd();\n  }\n  if (this.node_memory_data !== null && this.node_memory_data !== undefined) {\n    output.writeFieldBegin('node_memory_data', Thrift.Type.LIST, 6);\n    output.writeListBegin(Thrift.Type.STRUCT, this.node_memory_data.length);\n    for (var iter127 in this.node_memory_data) {\n      if (this.node_memory_data.hasOwnProperty(iter127)) {\n        iter127 = this.node_memory_data[iter127];\n        iter127.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableMeta = function (args) {\n  this.table_name = null;\n  this.num_cols = null;\n  this.col_datum_types = null;\n  this.is_view = null;\n  this.is_replicated = null;\n  this.shard_count = null;\n  this.max_rows = null;\n  if (args) {\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.num_cols !== undefined && args.num_cols !== null) {\n      this.num_cols = args.num_cols;\n    }\n    if (args.col_datum_types !== undefined && args.col_datum_types !== null) {\n      this.col_datum_types = Thrift.copyList(args.col_datum_types, [null]);\n    }\n    if (args.is_view !== undefined && args.is_view !== null) {\n      this.is_view = args.is_view;\n    }\n    if (args.is_replicated !== undefined && args.is_replicated !== null) {\n      this.is_replicated = args.is_replicated;\n    }\n    if (args.shard_count !== undefined && args.shard_count !== null) {\n      this.shard_count = args.shard_count;\n    }\n    if (args.max_rows !== undefined && args.max_rows !== null) {\n      this.max_rows = args.max_rows;\n    }\n  }\n};\nTTableMeta.prototype = {};\nTTableMeta.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.num_cols = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size128 = 0;\n          var _rtmp3132;\n          this.col_datum_types = [];\n          var _etype131 = 0;\n          _rtmp3132 = input.readListBegin();\n          _etype131 = _rtmp3132.etype;\n          _size128 = _rtmp3132.size;\n          for (var _i133 = 0; _i133 < _size128; ++_i133) {\n            var elem134 = null;\n            elem134 = input.readI32().value;\n            this.col_datum_types.push(elem134);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_view = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_replicated = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.shard_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.max_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableMeta.prototype.write = function (output) {\n  output.writeStructBegin('TTableMeta');\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 1);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.num_cols !== null && this.num_cols !== undefined) {\n    output.writeFieldBegin('num_cols', Thrift.Type.I64, 2);\n    output.writeI64(this.num_cols);\n    output.writeFieldEnd();\n  }\n  if (this.col_datum_types !== null && this.col_datum_types !== undefined) {\n    output.writeFieldBegin('col_datum_types', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.I32, this.col_datum_types.length);\n    for (var iter135 in this.col_datum_types) {\n      if (this.col_datum_types.hasOwnProperty(iter135)) {\n        iter135 = this.col_datum_types[iter135];\n        output.writeI32(iter135);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.is_view !== null && this.is_view !== undefined) {\n    output.writeFieldBegin('is_view', Thrift.Type.BOOL, 4);\n    output.writeBool(this.is_view);\n    output.writeFieldEnd();\n  }\n  if (this.is_replicated !== null && this.is_replicated !== undefined) {\n    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_replicated);\n    output.writeFieldEnd();\n  }\n  if (this.shard_count !== null && this.shard_count !== undefined) {\n    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);\n    output.writeI64(this.shard_count);\n    output.writeFieldEnd();\n  }\n  if (this.max_rows !== null && this.max_rows !== undefined) {\n    output.writeFieldBegin('max_rows', Thrift.Type.I64, 7);\n    output.writeI64(this.max_rows);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableDetails = function (args) {\n  this.row_desc = null;\n  this.fragment_size = null;\n  this.page_size = null;\n  this.max_rows = null;\n  this.view_sql = null;\n  this.shard_count = null;\n  this.key_metainfo = null;\n  this.is_temporary = null;\n  if (args) {\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.fragment_size !== undefined && args.fragment_size !== null) {\n      this.fragment_size = args.fragment_size;\n    }\n    if (args.page_size !== undefined && args.page_size !== null) {\n      this.page_size = args.page_size;\n    }\n    if (args.max_rows !== undefined && args.max_rows !== null) {\n      this.max_rows = args.max_rows;\n    }\n    if (args.view_sql !== undefined && args.view_sql !== null) {\n      this.view_sql = args.view_sql;\n    }\n    if (args.shard_count !== undefined && args.shard_count !== null) {\n      this.shard_count = args.shard_count;\n    }\n    if (args.key_metainfo !== undefined && args.key_metainfo !== null) {\n      this.key_metainfo = args.key_metainfo;\n    }\n    if (args.is_temporary !== undefined && args.is_temporary !== null) {\n      this.is_temporary = args.is_temporary;\n    }\n  }\n};\nTTableDetails.prototype = {};\nTTableDetails.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size136 = 0;\n          var _rtmp3140;\n          this.row_desc = [];\n          var _etype139 = 0;\n          _rtmp3140 = input.readListBegin();\n          _etype139 = _rtmp3140.etype;\n          _size136 = _rtmp3140.size;\n          for (var _i141 = 0; _i141 < _size136; ++_i141) {\n            var elem142 = null;\n            elem142 = new TColumnType();\n            elem142.read(input);\n            this.row_desc.push(elem142);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.fragment_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.page_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.max_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_sql = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.shard_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.key_metainfo = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_temporary = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableDetails.prototype.write = function (output) {\n  output.writeStructBegin('TTableDetails');\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter143 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter143)) {\n        iter143 = this.row_desc[iter143];\n        iter143.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.fragment_size !== null && this.fragment_size !== undefined) {\n    output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);\n    output.writeI64(this.fragment_size);\n    output.writeFieldEnd();\n  }\n  if (this.page_size !== null && this.page_size !== undefined) {\n    output.writeFieldBegin('page_size', Thrift.Type.I64, 3);\n    output.writeI64(this.page_size);\n    output.writeFieldEnd();\n  }\n  if (this.max_rows !== null && this.max_rows !== undefined) {\n    output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);\n    output.writeI64(this.max_rows);\n    output.writeFieldEnd();\n  }\n  if (this.view_sql !== null && this.view_sql !== undefined) {\n    output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);\n    output.writeString(this.view_sql);\n    output.writeFieldEnd();\n  }\n  if (this.shard_count !== null && this.shard_count !== undefined) {\n    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);\n    output.writeI64(this.shard_count);\n    output.writeFieldEnd();\n  }\n  if (this.key_metainfo !== null && this.key_metainfo !== undefined) {\n    output.writeFieldBegin('key_metainfo', Thrift.Type.STRING, 7);\n    output.writeString(this.key_metainfo);\n    output.writeFieldEnd();\n  }\n  if (this.is_temporary !== null && this.is_temporary !== undefined) {\n    output.writeFieldBegin('is_temporary', Thrift.Type.BOOL, 8);\n    output.writeBool(this.is_temporary);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnRange = function (args) {\n  this.type = null;\n  this.col_id = null;\n  this.table_id = null;\n  this.has_nulls = null;\n  this.int_min = null;\n  this.int_max = null;\n  this.bucket = null;\n  this.fp_min = null;\n  this.fp_max = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.col_id !== undefined && args.col_id !== null) {\n      this.col_id = args.col_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.has_nulls !== undefined && args.has_nulls !== null) {\n      this.has_nulls = args.has_nulls;\n    }\n    if (args.int_min !== undefined && args.int_min !== null) {\n      this.int_min = args.int_min;\n    }\n    if (args.int_max !== undefined && args.int_max !== null) {\n      this.int_max = args.int_max;\n    }\n    if (args.bucket !== undefined && args.bucket !== null) {\n      this.bucket = args.bucket;\n    }\n    if (args.fp_min !== undefined && args.fp_min !== null) {\n      this.fp_min = args.fp_min;\n    }\n    if (args.fp_max !== undefined && args.fp_max !== null) {\n      this.fp_max = args.fp_max;\n    }\n  }\n};\nTColumnRange.prototype = {};\nTColumnRange.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.col_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.has_nulls = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.int_min = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.int_max = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.bucket = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.fp_min = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.fp_max = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnRange.prototype.write = function (output) {\n  output.writeStructBegin('TColumnRange');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.col_id !== null && this.col_id !== undefined) {\n    output.writeFieldBegin('col_id', Thrift.Type.I32, 2);\n    output.writeI32(this.col_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.has_nulls !== null && this.has_nulls !== undefined) {\n    output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);\n    output.writeBool(this.has_nulls);\n    output.writeFieldEnd();\n  }\n  if (this.int_min !== null && this.int_min !== undefined) {\n    output.writeFieldBegin('int_min', Thrift.Type.I64, 5);\n    output.writeI64(this.int_min);\n    output.writeFieldEnd();\n  }\n  if (this.int_max !== null && this.int_max !== undefined) {\n    output.writeFieldBegin('int_max', Thrift.Type.I64, 6);\n    output.writeI64(this.int_max);\n    output.writeFieldEnd();\n  }\n  if (this.bucket !== null && this.bucket !== undefined) {\n    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);\n    output.writeI64(this.bucket);\n    output.writeFieldEnd();\n  }\n  if (this.fp_min !== null && this.fp_min !== undefined) {\n    output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);\n    output.writeDouble(this.fp_min);\n    output.writeFieldEnd();\n  }\n  if (this.fp_max !== null && this.fp_max !== undefined) {\n    output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);\n    output.writeDouble(this.fp_max);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDictionaryGeneration = function (args) {\n  this.dict_id = null;\n  this.entry_count = null;\n  if (args) {\n    if (args.dict_id !== undefined && args.dict_id !== null) {\n      this.dict_id = args.dict_id;\n    }\n    if (args.entry_count !== undefined && args.entry_count !== null) {\n      this.entry_count = args.entry_count;\n    }\n  }\n};\nTDictionaryGeneration.prototype = {};\nTDictionaryGeneration.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.dict_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.entry_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDictionaryGeneration.prototype.write = function (output) {\n  output.writeStructBegin('TDictionaryGeneration');\n  if (this.dict_id !== null && this.dict_id !== undefined) {\n    output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);\n    output.writeI32(this.dict_id);\n    output.writeFieldEnd();\n  }\n  if (this.entry_count !== null && this.entry_count !== undefined) {\n    output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);\n    output.writeI64(this.entry_count);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableGeneration = function (args) {\n  this.table_id = null;\n  this.tuple_count = null;\n  this.start_rowid = null;\n  if (args) {\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.tuple_count !== undefined && args.tuple_count !== null) {\n      this.tuple_count = args.tuple_count;\n    }\n    if (args.start_rowid !== undefined && args.start_rowid !== null) {\n      this.start_rowid = args.start_rowid;\n    }\n  }\n};\nTTableGeneration.prototype = {};\nTTableGeneration.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.tuple_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.start_rowid = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableGeneration.prototype.write = function (output) {\n  output.writeStructBegin('TTableGeneration');\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.tuple_count !== null && this.tuple_count !== undefined) {\n    output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);\n    output.writeI64(this.tuple_count);\n    output.writeFieldEnd();\n  }\n  if (this.start_rowid !== null && this.start_rowid !== undefined) {\n    output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);\n    output.writeI64(this.start_rowid);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPendingQuery = function (args) {\n  this.id = null;\n  this.column_ranges = null;\n  this.dictionary_generations = null;\n  this.table_generations = null;\n  if (args) {\n    if (args.id !== undefined && args.id !== null) {\n      this.id = args.id;\n    }\n    if (args.column_ranges !== undefined && args.column_ranges !== null) {\n      this.column_ranges = Thrift.copyList(args.column_ranges, [TColumnRange]);\n    }\n    if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {\n      this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [TDictionaryGeneration]);\n    }\n    if (args.table_generations !== undefined && args.table_generations !== null) {\n      this.table_generations = Thrift.copyList(args.table_generations, [TTableGeneration]);\n    }\n  }\n};\nTPendingQuery.prototype = {};\nTPendingQuery.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size144 = 0;\n          var _rtmp3148;\n          this.column_ranges = [];\n          var _etype147 = 0;\n          _rtmp3148 = input.readListBegin();\n          _etype147 = _rtmp3148.etype;\n          _size144 = _rtmp3148.size;\n          for (var _i149 = 0; _i149 < _size144; ++_i149) {\n            var elem150 = null;\n            elem150 = new TColumnRange();\n            elem150.read(input);\n            this.column_ranges.push(elem150);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size151 = 0;\n          var _rtmp3155;\n          this.dictionary_generations = [];\n          var _etype154 = 0;\n          _rtmp3155 = input.readListBegin();\n          _etype154 = _rtmp3155.etype;\n          _size151 = _rtmp3155.size;\n          for (var _i156 = 0; _i156 < _size151; ++_i156) {\n            var elem157 = null;\n            elem157 = new TDictionaryGeneration();\n            elem157.read(input);\n            this.dictionary_generations.push(elem157);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size158 = 0;\n          var _rtmp3162;\n          this.table_generations = [];\n          var _etype161 = 0;\n          _rtmp3162 = input.readListBegin();\n          _etype161 = _rtmp3162.etype;\n          _size158 = _rtmp3162.size;\n          for (var _i163 = 0; _i163 < _size158; ++_i163) {\n            var elem164 = null;\n            elem164 = new TTableGeneration();\n            elem164.read(input);\n            this.table_generations.push(elem164);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPendingQuery.prototype.write = function (output) {\n  output.writeStructBegin('TPendingQuery');\n  if (this.id !== null && this.id !== undefined) {\n    output.writeFieldBegin('id', Thrift.Type.I64, 1);\n    output.writeI64(this.id);\n    output.writeFieldEnd();\n  }\n  if (this.column_ranges !== null && this.column_ranges !== undefined) {\n    output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);\n    for (var iter165 in this.column_ranges) {\n      if (this.column_ranges.hasOwnProperty(iter165)) {\n        iter165 = this.column_ranges[iter165];\n        iter165.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {\n    output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);\n    for (var iter166 in this.dictionary_generations) {\n      if (this.dictionary_generations.hasOwnProperty(iter166)) {\n        iter166 = this.dictionary_generations[iter166];\n        iter166.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.table_generations !== null && this.table_generations !== undefined) {\n    output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);\n    for (var iter167 in this.table_generations) {\n      if (this.table_generations.hasOwnProperty(iter167)) {\n        iter167 = this.table_generations[iter167];\n        iter167.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TVarLen = function (args) {\n  this.payload = null;\n  this.is_null = null;\n  if (args) {\n    if (args.payload !== undefined && args.payload !== null) {\n      this.payload = args.payload;\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTVarLen.prototype = {};\nTVarLen.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.payload = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTVarLen.prototype.write = function (output) {\n  output.writeStructBegin('TVarLen');\n  if (this.payload !== null && this.payload !== undefined) {\n    output.writeFieldBegin('payload', Thrift.Type.STRING, 1);\n    output.writeBinary(this.payload);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDataBlockPtr = function (args) {\n  this.fixed_len_data = null;\n  this.var_len_data = null;\n  if (args) {\n    if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {\n      this.fixed_len_data = args.fixed_len_data;\n    }\n    if (args.var_len_data !== undefined && args.var_len_data !== null) {\n      this.var_len_data = Thrift.copyList(args.var_len_data, [TVarLen]);\n    }\n  }\n};\nTDataBlockPtr.prototype = {};\nTDataBlockPtr.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.fixed_len_data = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size168 = 0;\n          var _rtmp3172;\n          this.var_len_data = [];\n          var _etype171 = 0;\n          _rtmp3172 = input.readListBegin();\n          _etype171 = _rtmp3172.etype;\n          _size168 = _rtmp3172.size;\n          for (var _i173 = 0; _i173 < _size168; ++_i173) {\n            var elem174 = null;\n            elem174 = new TVarLen();\n            elem174.read(input);\n            this.var_len_data.push(elem174);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDataBlockPtr.prototype.write = function (output) {\n  output.writeStructBegin('TDataBlockPtr');\n  if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {\n    output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);\n    output.writeBinary(this.fixed_len_data);\n    output.writeFieldEnd();\n  }\n  if (this.var_len_data !== null && this.var_len_data !== undefined) {\n    output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);\n    for (var iter175 in this.var_len_data) {\n      if (this.var_len_data.hasOwnProperty(iter175)) {\n        iter175 = this.var_len_data[iter175];\n        iter175.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TInsertData = function (args) {\n  this.db_id = null;\n  this.table_id = null;\n  this.column_ids = null;\n  this.data = null;\n  this.num_rows = null;\n  if (args) {\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.column_ids !== undefined && args.column_ids !== null) {\n      this.column_ids = Thrift.copyList(args.column_ids, [null]);\n    }\n    if (args.data !== undefined && args.data !== null) {\n      this.data = Thrift.copyList(args.data, [TDataBlockPtr]);\n    }\n    if (args.num_rows !== undefined && args.num_rows !== null) {\n      this.num_rows = args.num_rows;\n    }\n  }\n};\nTInsertData.prototype = {};\nTInsertData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size176 = 0;\n          var _rtmp3180;\n          this.column_ids = [];\n          var _etype179 = 0;\n          _rtmp3180 = input.readListBegin();\n          _etype179 = _rtmp3180.etype;\n          _size176 = _rtmp3180.size;\n          for (var _i181 = 0; _i181 < _size176; ++_i181) {\n            var elem182 = null;\n            elem182 = input.readI32().value;\n            this.column_ids.push(elem182);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size183 = 0;\n          var _rtmp3187;\n          this.data = [];\n          var _etype186 = 0;\n          _rtmp3187 = input.readListBegin();\n          _etype186 = _rtmp3187.etype;\n          _size183 = _rtmp3187.size;\n          for (var _i188 = 0; _i188 < _size183; ++_i188) {\n            var elem189 = null;\n            elem189 = new TDataBlockPtr();\n            elem189.read(input);\n            this.data.push(elem189);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.num_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTInsertData.prototype.write = function (output) {\n  output.writeStructBegin('TInsertData');\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 1);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.column_ids !== null && this.column_ids !== undefined) {\n    output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.I32, this.column_ids.length);\n    for (var iter190 in this.column_ids) {\n      if (this.column_ids.hasOwnProperty(iter190)) {\n        iter190 = this.column_ids[iter190];\n        output.writeI32(iter190);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.data !== null && this.data !== undefined) {\n    output.writeFieldBegin('data', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);\n    for (var iter191 in this.data) {\n      if (this.data.hasOwnProperty(iter191)) {\n        iter191 = this.data[iter191];\n        iter191.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.num_rows !== null && this.num_rows !== undefined) {\n    output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);\n    output.writeI64(this.num_rows);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPendingRenderQuery = function (args) {\n  this.id = null;\n  if (args) {\n    if (args.id !== undefined && args.id !== null) {\n      this.id = args.id;\n    }\n  }\n};\nTPendingRenderQuery.prototype = {};\nTPendingRenderQuery.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPendingRenderQuery.prototype.write = function (output) {\n  output.writeStructBegin('TPendingRenderQuery');\n  if (this.id !== null && this.id !== undefined) {\n    output.writeFieldBegin('id', Thrift.Type.I64, 1);\n    output.writeI64(this.id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderParseResult = function (args) {\n  this.merge_type = null;\n  this.node_id = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  if (args) {\n    if (args.merge_type !== undefined && args.merge_type !== null) {\n      this.merge_type = args.merge_type;\n    }\n    if (args.node_id !== undefined && args.node_id !== null) {\n      this.node_id = args.node_id;\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n  }\n};\nTRenderParseResult.prototype = {};\nTRenderParseResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.merge_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.node_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderParseResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderParseResult');\n  if (this.merge_type !== null && this.merge_type !== undefined) {\n    output.writeFieldBegin('merge_type', Thrift.Type.I32, 1);\n    output.writeI32(this.merge_type);\n    output.writeFieldEnd();\n  }\n  if (this.node_id !== null && this.node_id !== undefined) {\n    output.writeFieldBegin('node_id', Thrift.Type.I32, 2);\n    output.writeI32(this.node_id);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRawRenderPassDataResult = function (args) {\n  this.num_channels = null;\n  this.pixels = null;\n  this.row_ids_A = null;\n  this.row_ids_B = null;\n  this.table_ids = null;\n  this.accum_data = null;\n  if (args) {\n    if (args.num_channels !== undefined && args.num_channels !== null) {\n      this.num_channels = args.num_channels;\n    }\n    if (args.pixels !== undefined && args.pixels !== null) {\n      this.pixels = args.pixels;\n    }\n    if (args.row_ids_A !== undefined && args.row_ids_A !== null) {\n      this.row_ids_A = args.row_ids_A;\n    }\n    if (args.row_ids_B !== undefined && args.row_ids_B !== null) {\n      this.row_ids_B = args.row_ids_B;\n    }\n    if (args.table_ids !== undefined && args.table_ids !== null) {\n      this.table_ids = args.table_ids;\n    }\n    if (args.accum_data !== undefined && args.accum_data !== null) {\n      this.accum_data = args.accum_data;\n    }\n  }\n};\nTRawRenderPassDataResult.prototype = {};\nTRawRenderPassDataResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.num_channels = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.pixels = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.row_ids_A = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.row_ids_B = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_ids = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.accum_data = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRawRenderPassDataResult.prototype.write = function (output) {\n  output.writeStructBegin('TRawRenderPassDataResult');\n  if (this.num_channels !== null && this.num_channels !== undefined) {\n    output.writeFieldBegin('num_channels', Thrift.Type.I32, 1);\n    output.writeI32(this.num_channels);\n    output.writeFieldEnd();\n  }\n  if (this.pixels !== null && this.pixels !== undefined) {\n    output.writeFieldBegin('pixels', Thrift.Type.STRING, 2);\n    output.writeBinary(this.pixels);\n    output.writeFieldEnd();\n  }\n  if (this.row_ids_A !== null && this.row_ids_A !== undefined) {\n    output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 3);\n    output.writeBinary(this.row_ids_A);\n    output.writeFieldEnd();\n  }\n  if (this.row_ids_B !== null && this.row_ids_B !== undefined) {\n    output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 4);\n    output.writeBinary(this.row_ids_B);\n    output.writeFieldEnd();\n  }\n  if (this.table_ids !== null && this.table_ids !== undefined) {\n    output.writeFieldBegin('table_ids', Thrift.Type.STRING, 5);\n    output.writeBinary(this.table_ids);\n    output.writeFieldEnd();\n  }\n  if (this.accum_data !== null && this.accum_data !== undefined) {\n    output.writeFieldBegin('accum_data', Thrift.Type.STRING, 6);\n    output.writeBinary(this.accum_data);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRawPixelData = function (args) {\n  this.width = null;\n  this.height = null;\n  this.render_pass_map = null;\n  if (args) {\n    if (args.width !== undefined && args.width !== null) {\n      this.width = args.width;\n    }\n    if (args.height !== undefined && args.height !== null) {\n      this.height = args.height;\n    }\n    if (args.render_pass_map !== undefined && args.render_pass_map !== null) {\n      this.render_pass_map = Thrift.copyMap(args.render_pass_map, [TRawRenderPassDataResult]);\n    }\n  }\n};\nTRawPixelData.prototype = {};\nTRawPixelData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.width = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.height = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.MAP) {\n          var _size192 = 0;\n          var _rtmp3196;\n          this.render_pass_map = {};\n          var _ktype193 = 0;\n          var _vtype194 = 0;\n          _rtmp3196 = input.readMapBegin();\n          _ktype193 = _rtmp3196.ktype;\n          _vtype194 = _rtmp3196.vtype;\n          _size192 = _rtmp3196.size;\n          for (var _i197 = 0; _i197 < _size192; ++_i197) {\n            if (_i197 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key198 = null;\n            var val199 = null;\n            key198 = input.readI32().value;\n            val199 = new TRawRenderPassDataResult();\n            val199.read(input);\n            this.render_pass_map[key198] = val199;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRawPixelData.prototype.write = function (output) {\n  output.writeStructBegin('TRawPixelData');\n  if (this.width !== null && this.width !== undefined) {\n    output.writeFieldBegin('width', Thrift.Type.I32, 1);\n    output.writeI32(this.width);\n    output.writeFieldEnd();\n  }\n  if (this.height !== null && this.height !== undefined) {\n    output.writeFieldBegin('height', Thrift.Type.I32, 2);\n    output.writeI32(this.height);\n    output.writeFieldEnd();\n  }\n  if (this.render_pass_map !== null && this.render_pass_map !== undefined) {\n    output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);\n    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));\n    for (var kiter200 in this.render_pass_map) {\n      if (this.render_pass_map.hasOwnProperty(kiter200)) {\n        var viter201 = this.render_pass_map[kiter200];\n        output.writeI32(kiter200);\n        viter201.write(output);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderDatum = function (args) {\n  this.type = null;\n  this.cnt = null;\n  this.value = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.cnt !== undefined && args.cnt !== null) {\n      this.cnt = args.cnt;\n    }\n    if (args.value !== undefined && args.value !== null) {\n      this.value = args.value;\n    }\n  }\n};\nTRenderDatum.prototype = {};\nTRenderDatum.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.cnt = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.value = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderDatum.prototype.write = function (output) {\n  output.writeStructBegin('TRenderDatum');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.cnt !== null && this.cnt !== undefined) {\n    output.writeFieldBegin('cnt', Thrift.Type.I32, 2);\n    output.writeI32(this.cnt);\n    output.writeFieldEnd();\n  }\n  if (this.value !== null && this.value !== undefined) {\n    output.writeFieldBegin('value', Thrift.Type.STRING, 3);\n    output.writeBinary(this.value);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderStepResult = function (args) {\n  this.merge_data = null;\n  this.raw_pixel_data = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  if (args) {\n    if (args.merge_data !== undefined && args.merge_data !== null) {\n      this.merge_data = Thrift.copyMap(args.merge_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, TRenderDatum]);\n    }\n    if (args.raw_pixel_data !== undefined && args.raw_pixel_data !== null) {\n      this.raw_pixel_data = new TRawPixelData(args.raw_pixel_data);\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n  }\n};\nTRenderStepResult.prototype = {};\nTRenderStepResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.MAP) {\n          var _size202 = 0;\n          var _rtmp3206;\n          this.merge_data = {};\n          var _ktype203 = 0;\n          var _vtype204 = 0;\n          _rtmp3206 = input.readMapBegin();\n          _ktype203 = _rtmp3206.ktype;\n          _vtype204 = _rtmp3206.vtype;\n          _size202 = _rtmp3206.size;\n          for (var _i207 = 0; _i207 < _size202; ++_i207) {\n            if (_i207 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key208 = null;\n            var val209 = null;\n            key208 = input.readString().value;\n            var _size210 = 0;\n            var _rtmp3214;\n            val209 = {};\n            var _ktype211 = 0;\n            var _vtype212 = 0;\n            _rtmp3214 = input.readMapBegin();\n            _ktype211 = _rtmp3214.ktype;\n            _vtype212 = _rtmp3214.vtype;\n            _size210 = _rtmp3214.size;\n            for (var _i215 = 0; _i215 < _size210; ++_i215) {\n              if (_i215 > 0) {\n                if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                  input.rstack.pop();\n                }\n              }\n              var key216 = null;\n              var val217 = null;\n              key216 = input.readString().value;\n              var _size218 = 0;\n              var _rtmp3222;\n              val217 = {};\n              var _ktype219 = 0;\n              var _vtype220 = 0;\n              _rtmp3222 = input.readMapBegin();\n              _ktype219 = _rtmp3222.ktype;\n              _vtype220 = _rtmp3222.vtype;\n              _size218 = _rtmp3222.size;\n              for (var _i223 = 0; _i223 < _size218; ++_i223) {\n                if (_i223 > 0) {\n                  if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                    input.rstack.pop();\n                  }\n                }\n                var key224 = null;\n                var val225 = null;\n                key224 = input.readString().value;\n                var _size226 = 0;\n                var _rtmp3230;\n                val225 = {};\n                var _ktype227 = 0;\n                var _vtype228 = 0;\n                _rtmp3230 = input.readMapBegin();\n                _ktype227 = _rtmp3230.ktype;\n                _vtype228 = _rtmp3230.vtype;\n                _size226 = _rtmp3230.size;\n                for (var _i231 = 0; _i231 < _size226; ++_i231) {\n                  if (_i231 > 0) {\n                    if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                      input.rstack.pop();\n                    }\n                  }\n                  var key232 = null;\n                  var val233 = null;\n                  key232 = input.readString().value;\n                  var _size234 = 0;\n                  var _rtmp3238;\n                  val233 = [];\n                  var _etype237 = 0;\n                  _rtmp3238 = input.readListBegin();\n                  _etype237 = _rtmp3238.etype;\n                  _size234 = _rtmp3238.size;\n                  for (var _i239 = 0; _i239 < _size234; ++_i239) {\n                    var elem240 = null;\n                    elem240 = new TRenderDatum();\n                    elem240.read(input);\n                    val233.push(elem240);\n                  }\n                  input.readListEnd();\n                  val225[key232] = val233;\n                }\n                input.readMapEnd();\n                val217[key224] = val225;\n              }\n              input.readMapEnd();\n              val209[key216] = val217;\n            }\n            input.readMapEnd();\n            this.merge_data[key208] = val209;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.raw_pixel_data = new TRawPixelData();\n          this.raw_pixel_data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderStepResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderStepResult');\n  if (this.merge_data !== null && this.merge_data !== undefined) {\n    output.writeFieldBegin('merge_data', Thrift.Type.MAP, 1);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merge_data));\n    for (var kiter241 in this.merge_data) {\n      if (this.merge_data.hasOwnProperty(kiter241)) {\n        var viter242 = this.merge_data[kiter241];\n        output.writeString(kiter241);\n        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter242));\n        for (var kiter243 in viter242) {\n          if (viter242.hasOwnProperty(kiter243)) {\n            var viter244 = viter242[kiter243];\n            output.writeString(kiter243);\n            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter244));\n            for (var kiter245 in viter244) {\n              if (viter244.hasOwnProperty(kiter245)) {\n                var viter246 = viter244[kiter245];\n                output.writeString(kiter245);\n                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter246));\n                for (var kiter247 in viter246) {\n                  if (viter246.hasOwnProperty(kiter247)) {\n                    var viter248 = viter246[kiter247];\n                    output.writeString(kiter247);\n                    output.writeListBegin(Thrift.Type.STRUCT, viter248.length);\n                    for (var iter249 in viter248) {\n                      if (viter248.hasOwnProperty(iter249)) {\n                        iter249 = viter248[iter249];\n                        iter249.write(output);\n                      }\n                    }\n                    output.writeListEnd();\n                  }\n                }\n                output.writeMapEnd();\n              }\n            }\n            output.writeMapEnd();\n          }\n        }\n        output.writeMapEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.raw_pixel_data !== null && this.raw_pixel_data !== undefined) {\n    output.writeFieldBegin('raw_pixel_data', Thrift.Type.STRUCT, 2);\n    this.raw_pixel_data.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDatabasePermissions = function (args) {\n  this.create_ = null;\n  this.delete_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n  }\n};\nTDatabasePermissions.prototype = {};\nTDatabasePermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatabasePermissions.prototype.write = function (output) {\n  output.writeStructBegin('TDatabasePermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTablePermissions = function (args) {\n  this.create_ = null;\n  this.drop_ = null;\n  this.select_ = null;\n  this.insert_ = null;\n  this.update_ = null;\n  this.delete_ = null;\n  this.truncate_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.drop_ !== undefined && args.drop_ !== null) {\n      this.drop_ = args.drop_;\n    }\n    if (args.select_ !== undefined && args.select_ !== null) {\n      this.select_ = args.select_;\n    }\n    if (args.insert_ !== undefined && args.insert_ !== null) {\n      this.insert_ = args.insert_;\n    }\n    if (args.update_ !== undefined && args.update_ !== null) {\n      this.update_ = args.update_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n    if (args.truncate_ !== undefined && args.truncate_ !== null) {\n      this.truncate_ = args.truncate_;\n    }\n  }\n};\nTTablePermissions.prototype = {};\nTTablePermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.drop_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.select_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.insert_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.update_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.truncate_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTablePermissions.prototype.write = function (output) {\n  output.writeStructBegin('TTablePermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.drop_ !== null && this.drop_ !== undefined) {\n    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.drop_);\n    output.writeFieldEnd();\n  }\n  if (this.select_ !== null && this.select_ !== undefined) {\n    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.select_);\n    output.writeFieldEnd();\n  }\n  if (this.insert_ !== null && this.insert_ !== undefined) {\n    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.insert_);\n    output.writeFieldEnd();\n  }\n  if (this.update_ !== null && this.update_ !== undefined) {\n    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);\n    output.writeBool(this.update_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  if (this.truncate_ !== null && this.truncate_ !== undefined) {\n    output.writeFieldBegin('truncate_', Thrift.Type.BOOL, 7);\n    output.writeBool(this.truncate_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDashboardPermissions = function (args) {\n  this.create_ = null;\n  this.delete_ = null;\n  this.view_ = null;\n  this.edit_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n    if (args.view_ !== undefined && args.view_ !== null) {\n      this.view_ = args.view_;\n    }\n    if (args.edit_ !== undefined && args.edit_ !== null) {\n      this.edit_ = args.edit_;\n    }\n  }\n};\nTDashboardPermissions.prototype = {};\nTDashboardPermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.view_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.edit_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDashboardPermissions.prototype.write = function (output) {\n  output.writeStructBegin('TDashboardPermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  if (this.view_ !== null && this.view_ !== undefined) {\n    output.writeFieldBegin('view_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.view_);\n    output.writeFieldEnd();\n  }\n  if (this.edit_ !== null && this.edit_ !== undefined) {\n    output.writeFieldBegin('edit_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.edit_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TViewPermissions = function (args) {\n  this.create_ = null;\n  this.drop_ = null;\n  this.select_ = null;\n  this.insert_ = null;\n  this.update_ = null;\n  this.delete_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.drop_ !== undefined && args.drop_ !== null) {\n      this.drop_ = args.drop_;\n    }\n    if (args.select_ !== undefined && args.select_ !== null) {\n      this.select_ = args.select_;\n    }\n    if (args.insert_ !== undefined && args.insert_ !== null) {\n      this.insert_ = args.insert_;\n    }\n    if (args.update_ !== undefined && args.update_ !== null) {\n      this.update_ = args.update_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n  }\n};\nTViewPermissions.prototype = {};\nTViewPermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.drop_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.select_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.insert_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.update_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTViewPermissions.prototype.write = function (output) {\n  output.writeStructBegin('TViewPermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.drop_ !== null && this.drop_ !== undefined) {\n    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.drop_);\n    output.writeFieldEnd();\n  }\n  if (this.select_ !== null && this.select_ !== undefined) {\n    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.select_);\n    output.writeFieldEnd();\n  }\n  if (this.insert_ !== null && this.insert_ !== undefined) {\n    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.insert_);\n    output.writeFieldEnd();\n  }\n  if (this.update_ !== null && this.update_ !== undefined) {\n    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);\n    output.writeBool(this.update_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDBObject = function (args) {\n  this.objectName = null;\n  this.objectType = null;\n  this.privs = null;\n  this.grantee = null;\n  if (args) {\n    if (args.objectName !== undefined && args.objectName !== null) {\n      this.objectName = args.objectName;\n    }\n    if (args.objectType !== undefined && args.objectType !== null) {\n      this.objectType = args.objectType;\n    }\n    if (args.privs !== undefined && args.privs !== null) {\n      this.privs = Thrift.copyList(args.privs, [null]);\n    }\n    if (args.grantee !== undefined && args.grantee !== null) {\n      this.grantee = args.grantee;\n    }\n  }\n};\nTDBObject.prototype = {};\nTDBObject.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.objectName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.objectType = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size250 = 0;\n          var _rtmp3254;\n          this.privs = [];\n          var _etype253 = 0;\n          _rtmp3254 = input.readListBegin();\n          _etype253 = _rtmp3254.etype;\n          _size250 = _rtmp3254.size;\n          for (var _i255 = 0; _i255 < _size250; ++_i255) {\n            var elem256 = null;\n            elem256 = input.readBool().value;\n            this.privs.push(elem256);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.grantee = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDBObject.prototype.write = function (output) {\n  output.writeStructBegin('TDBObject');\n  if (this.objectName !== null && this.objectName !== undefined) {\n    output.writeFieldBegin('objectName', Thrift.Type.STRING, 1);\n    output.writeString(this.objectName);\n    output.writeFieldEnd();\n  }\n  if (this.objectType !== null && this.objectType !== undefined) {\n    output.writeFieldBegin('objectType', Thrift.Type.I32, 2);\n    output.writeI32(this.objectType);\n    output.writeFieldEnd();\n  }\n  if (this.privs !== null && this.privs !== undefined) {\n    output.writeFieldBegin('privs', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.BOOL, this.privs.length);\n    for (var iter257 in this.privs) {\n      if (this.privs.hasOwnProperty(iter257)) {\n        iter257 = this.privs[iter257];\n        output.writeBool(iter257);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.grantee !== null && this.grantee !== undefined) {\n    output.writeFieldBegin('grantee', Thrift.Type.STRING, 4);\n    output.writeString(this.grantee);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TLicenseInfo = function (args) {\n  this.claims = null;\n  if (args) {\n    if (args.claims !== undefined && args.claims !== null) {\n      this.claims = Thrift.copyList(args.claims, [null]);\n    }\n  }\n};\nTLicenseInfo.prototype = {};\nTLicenseInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size258 = 0;\n          var _rtmp3262;\n          this.claims = [];\n          var _etype261 = 0;\n          _rtmp3262 = input.readListBegin();\n          _etype261 = _rtmp3262.etype;\n          _size258 = _rtmp3262.size;\n          for (var _i263 = 0; _i263 < _size258; ++_i263) {\n            var elem264 = null;\n            elem264 = input.readString().value;\n            this.claims.push(elem264);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTLicenseInfo.prototype.write = function (output) {\n  output.writeStructBegin('TLicenseInfo');\n  if (this.claims !== null && this.claims !== undefined) {\n    output.writeFieldBegin('claims', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRING, this.claims.length);\n    for (var iter265 in this.claims) {\n      if (this.claims.hasOwnProperty(iter265)) {\n        iter265 = this.claims[iter265];\n        output.writeString(iter265);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(7))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.10.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\n\n//HELPER FUNCTIONS AND STRUCTURES\n\nwindow.MapD_connect_args = function (args) {\n  this.user = null;\n  this.passwd = null;\n  this.dbname = null;\n  if (args) {\n    if (args.user !== undefined && args.user !== null) {\n      this.user = args.user;\n    }\n    if (args.passwd !== undefined && args.passwd !== null) {\n      this.passwd = args.passwd;\n    }\n    if (args.dbname !== undefined && args.dbname !== null) {\n      this.dbname = args.dbname;\n    }\n  }\n};\nMapD_connect_args.prototype = {};\nMapD_connect_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.user = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.passwd = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dbname = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_connect_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_connect_args');\n  if (this.user !== null && this.user !== undefined) {\n    output.writeFieldBegin('user', Thrift.Type.STRING, 1);\n    output.writeString(this.user);\n    output.writeFieldEnd();\n  }\n  if (this.passwd !== null && this.passwd !== undefined) {\n    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);\n    output.writeString(this.passwd);\n    output.writeFieldEnd();\n  }\n  if (this.dbname !== null && this.dbname !== undefined) {\n    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);\n    output.writeString(this.dbname);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_connect_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_connect_result.prototype = {};\nMapD_connect_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_connect_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_connect_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_disconnect_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_disconnect_args.prototype = {};\nMapD_disconnect_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_disconnect_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_disconnect_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_disconnect_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_disconnect_result.prototype = {};\nMapD_disconnect_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_disconnect_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_disconnect_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_server_status_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_server_status_args.prototype = {};\nMapD_get_server_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_server_status_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_server_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_server_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TServerStatus(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_server_status_result.prototype = {};\nMapD_get_server_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TServerStatus();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_server_status_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_server_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_status_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_status_args.prototype = {};\nMapD_get_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_status_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TServerStatus]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_status_result.prototype = {};\nMapD_get_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size266 = 0;\n          var _rtmp3270;\n          this.success = [];\n          var _etype269 = 0;\n          _rtmp3270 = input.readListBegin();\n          _etype269 = _rtmp3270.etype;\n          _size266 = _rtmp3270.size;\n          for (var _i271 = 0; _i271 < _size266; ++_i271) {\n            var elem272 = null;\n            elem272 = new TServerStatus();\n            elem272.read(input);\n            this.success.push(elem272);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_status_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter273 in this.success) {\n      if (this.success.hasOwnProperty(iter273)) {\n        iter273 = this.success[iter273];\n        iter273.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_hardware_info_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_hardware_info_args.prototype = {};\nMapD_get_hardware_info_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_hardware_info_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_hardware_info_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_hardware_info_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TClusterHardwareInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_hardware_info_result.prototype = {};\nMapD_get_hardware_info_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TClusterHardwareInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_hardware_info_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_hardware_info_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_tables_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_tables_args.prototype = {};\nMapD_get_tables_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_tables_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_tables_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_tables_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_tables_result.prototype = {};\nMapD_get_tables_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size274 = 0;\n          var _rtmp3278;\n          this.success = [];\n          var _etype277 = 0;\n          _rtmp3278 = input.readListBegin();\n          _etype277 = _rtmp3278.etype;\n          _size274 = _rtmp3278.size;\n          for (var _i279 = 0; _i279 < _size274; ++_i279) {\n            var elem280 = null;\n            elem280 = input.readString().value;\n            this.success.push(elem280);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_tables_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_tables_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter281 in this.success) {\n      if (this.success.hasOwnProperty(iter281)) {\n        iter281 = this.success[iter281];\n        output.writeString(iter281);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_physical_tables_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_physical_tables_args.prototype = {};\nMapD_get_physical_tables_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_physical_tables_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_physical_tables_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_physical_tables_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_physical_tables_result.prototype = {};\nMapD_get_physical_tables_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size282 = 0;\n          var _rtmp3286;\n          this.success = [];\n          var _etype285 = 0;\n          _rtmp3286 = input.readListBegin();\n          _etype285 = _rtmp3286.etype;\n          _size282 = _rtmp3286.size;\n          for (var _i287 = 0; _i287 < _size282; ++_i287) {\n            var elem288 = null;\n            elem288 = input.readString().value;\n            this.success.push(elem288);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_physical_tables_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_physical_tables_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter289 in this.success) {\n      if (this.success.hasOwnProperty(iter289)) {\n        iter289 = this.success[iter289];\n        output.writeString(iter289);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_views_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_views_args.prototype = {};\nMapD_get_views_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_views_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_views_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_views_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_views_result.prototype = {};\nMapD_get_views_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size290 = 0;\n          var _rtmp3294;\n          this.success = [];\n          var _etype293 = 0;\n          _rtmp3294 = input.readListBegin();\n          _etype293 = _rtmp3294.etype;\n          _size290 = _rtmp3294.size;\n          for (var _i295 = 0; _i295 < _size290; ++_i295) {\n            var elem296 = null;\n            elem296 = input.readString().value;\n            this.success.push(elem296);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_views_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_views_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter297 in this.success) {\n      if (this.success.hasOwnProperty(iter297)) {\n        iter297 = this.success[iter297];\n        output.writeString(iter297);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_tables_meta_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_tables_meta_args.prototype = {};\nMapD_get_tables_meta_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_tables_meta_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_tables_meta_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_tables_meta_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TTableMeta]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_tables_meta_result.prototype = {};\nMapD_get_tables_meta_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size298 = 0;\n          var _rtmp3302;\n          this.success = [];\n          var _etype301 = 0;\n          _rtmp3302 = input.readListBegin();\n          _etype301 = _rtmp3302.etype;\n          _size298 = _rtmp3302.size;\n          for (var _i303 = 0; _i303 < _size298; ++_i303) {\n            var elem304 = null;\n            elem304 = new TTableMeta();\n            elem304.read(input);\n            this.success.push(elem304);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_tables_meta_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_tables_meta_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter305 in this.success) {\n      if (this.success.hasOwnProperty(iter305)) {\n        iter305 = this.success[iter305];\n        iter305.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_table_details_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nMapD_get_table_details_args.prototype = {};\nMapD_get_table_details_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_table_details_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_table_details_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_table_details_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TTableDetails(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_table_details_result.prototype = {};\nMapD_get_table_details_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TTableDetails();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_table_details_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_table_details_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_internal_table_details_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nMapD_get_internal_table_details_args.prototype = {};\nMapD_get_internal_table_details_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_internal_table_details_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_internal_table_details_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_internal_table_details_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TTableDetails(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_internal_table_details_result.prototype = {};\nMapD_get_internal_table_details_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TTableDetails();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_internal_table_details_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_internal_table_details_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_users_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_users_args.prototype = {};\nMapD_get_users_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_users_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_users_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_users_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_users_result.prototype = {};\nMapD_get_users_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size306 = 0;\n          var _rtmp3310;\n          this.success = [];\n          var _etype309 = 0;\n          _rtmp3310 = input.readListBegin();\n          _etype309 = _rtmp3310.etype;\n          _size306 = _rtmp3310.size;\n          for (var _i311 = 0; _i311 < _size306; ++_i311) {\n            var elem312 = null;\n            elem312 = input.readString().value;\n            this.success.push(elem312);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_users_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_users_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter313 in this.success) {\n      if (this.success.hasOwnProperty(iter313)) {\n        iter313 = this.success[iter313];\n        output.writeString(iter313);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_databases_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_databases_args.prototype = {};\nMapD_get_databases_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_databases_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_databases_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_databases_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBInfo]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_databases_result.prototype = {};\nMapD_get_databases_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size314 = 0;\n          var _rtmp3318;\n          this.success = [];\n          var _etype317 = 0;\n          _rtmp3318 = input.readListBegin();\n          _etype317 = _rtmp3318.etype;\n          _size314 = _rtmp3318.size;\n          for (var _i319 = 0; _i319 < _size314; ++_i319) {\n            var elem320 = null;\n            elem320 = new TDBInfo();\n            elem320.read(input);\n            this.success.push(elem320);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_databases_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_databases_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter321 in this.success) {\n      if (this.success.hasOwnProperty(iter321)) {\n        iter321 = this.success[iter321];\n        iter321.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_version_args = function (args) {};\nMapD_get_version_args.prototype = {};\nMapD_get_version_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    input.skip(ftype);\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_version_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_version_args');\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_version_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_version_result.prototype = {};\nMapD_get_version_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_version_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_version_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_start_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_start_heap_profile_args.prototype = {};\nMapD_start_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_start_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_start_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_start_heap_profile_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_start_heap_profile_result.prototype = {};\nMapD_start_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_start_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_start_heap_profile_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_stop_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_stop_heap_profile_args.prototype = {};\nMapD_stop_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_stop_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_stop_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_stop_heap_profile_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_stop_heap_profile_result.prototype = {};\nMapD_stop_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_stop_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_stop_heap_profile_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_heap_profile_args.prototype = {};\nMapD_get_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_heap_profile_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_heap_profile_result.prototype = {};\nMapD_get_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_heap_profile_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_memory_args = function (args) {\n  this.session = null;\n  this.memory_level = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.memory_level !== undefined && args.memory_level !== null) {\n      this.memory_level = args.memory_level;\n    }\n  }\n};\nMapD_get_memory_args.prototype = {};\nMapD_get_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.memory_level = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.memory_level !== null && this.memory_level !== undefined) {\n    output.writeFieldBegin('memory_level', Thrift.Type.STRING, 2);\n    output.writeString(this.memory_level);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_memory_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TNodeMemoryInfo]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_memory_result.prototype = {};\nMapD_get_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size322 = 0;\n          var _rtmp3326;\n          this.success = [];\n          var _etype325 = 0;\n          _rtmp3326 = input.readListBegin();\n          _etype325 = _rtmp3326.etype;\n          _size322 = _rtmp3326.size;\n          for (var _i327 = 0; _i327 < _size322; ++_i327) {\n            var elem328 = null;\n            elem328 = new TNodeMemoryInfo();\n            elem328.read(input);\n            this.success.push(elem328);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_memory_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter329 in this.success) {\n      if (this.success.hasOwnProperty(iter329)) {\n        iter329 = this.success[iter329];\n        iter329.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_clear_cpu_memory_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_clear_cpu_memory_args.prototype = {};\nMapD_clear_cpu_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_clear_cpu_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_clear_cpu_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_clear_cpu_memory_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_clear_cpu_memory_result.prototype = {};\nMapD_clear_cpu_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_clear_cpu_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_clear_cpu_memory_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_clear_gpu_memory_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_clear_gpu_memory_args.prototype = {};\nMapD_clear_gpu_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_clear_gpu_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_clear_gpu_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_clear_gpu_memory_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_clear_gpu_memory_result.prototype = {};\nMapD_clear_gpu_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_clear_gpu_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_clear_gpu_memory_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_set_table_epoch_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  this.new_epoch = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.new_epoch !== undefined && args.new_epoch !== null) {\n      this.new_epoch = args.new_epoch;\n    }\n  }\n};\nMapD_set_table_epoch_args.prototype = {};\nMapD_set_table_epoch_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.new_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_set_table_epoch_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_set_table_epoch_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.new_epoch !== null && this.new_epoch !== undefined) {\n    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 4);\n    output.writeI32(this.new_epoch);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_set_table_epoch_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_set_table_epoch_result.prototype = {};\nMapD_set_table_epoch_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_set_table_epoch_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_set_table_epoch_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_set_table_epoch_by_name_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.new_epoch = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.new_epoch !== undefined && args.new_epoch !== null) {\n      this.new_epoch = args.new_epoch;\n    }\n  }\n};\nMapD_set_table_epoch_by_name_args.prototype = {};\nMapD_set_table_epoch_by_name_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.new_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_set_table_epoch_by_name_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_set_table_epoch_by_name_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.new_epoch !== null && this.new_epoch !== undefined) {\n    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 3);\n    output.writeI32(this.new_epoch);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_set_table_epoch_by_name_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_set_table_epoch_by_name_result.prototype = {};\nMapD_set_table_epoch_by_name_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_set_table_epoch_by_name_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_set_table_epoch_by_name_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_table_epoch_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nMapD_get_table_epoch_args.prototype = {};\nMapD_get_table_epoch_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_table_epoch_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_table_epoch_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_table_epoch_result = function (args) {\n  this.success = null;\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n  }\n};\nMapD_get_table_epoch_result.prototype = {};\nMapD_get_table_epoch_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_table_epoch_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_table_epoch_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_table_epoch_by_name_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nMapD_get_table_epoch_by_name_args.prototype = {};\nMapD_get_table_epoch_by_name_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_table_epoch_by_name_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_table_epoch_by_name_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_table_epoch_by_name_result = function (args) {\n  this.success = null;\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n  }\n};\nMapD_get_table_epoch_by_name_result.prototype = {};\nMapD_get_table_epoch_by_name_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_table_epoch_by_name_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_table_epoch_by_name_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_sql_execute_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.column_format = null;\n  this.nonce = null;\n  this.first_n = -1;\n  this.at_most_n = -1;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.column_format !== undefined && args.column_format !== null) {\n      this.column_format = args.column_format;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n    if (args.at_most_n !== undefined && args.at_most_n !== null) {\n      this.at_most_n = args.at_most_n;\n    }\n  }\n};\nMapD_sql_execute_args.prototype = {};\nMapD_sql_execute_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.column_format = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.at_most_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_sql_execute_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_sql_execute_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.column_format !== null && this.column_format !== undefined) {\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);\n    output.writeBool(this.column_format);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  if (this.at_most_n !== null && this.at_most_n !== undefined) {\n    output.writeFieldBegin('at_most_n', Thrift.Type.I32, 6);\n    output.writeI32(this.at_most_n);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_sql_execute_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TQueryResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_sql_execute_result.prototype = {};\nMapD_sql_execute_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TQueryResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_sql_execute_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_sql_execute_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_sql_execute_df_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.device_type = null;\n  this.device_id = 0;\n  this.first_n = -1;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.device_type !== undefined && args.device_type !== null) {\n      this.device_type = args.device_type;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n  }\n};\nMapD_sql_execute_df_args.prototype = {};\nMapD_sql_execute_df_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_sql_execute_df_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_sql_execute_df_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.device_type !== null && this.device_type !== undefined) {\n    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);\n    output.writeI32(this.device_type);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_sql_execute_df_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDataFrame(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_sql_execute_df_result.prototype = {};\nMapD_sql_execute_df_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDataFrame();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_sql_execute_df_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_sql_execute_df_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_sql_execute_gdf_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.device_id = 0;\n  this.first_n = -1;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n  }\n};\nMapD_sql_execute_gdf_args.prototype = {};\nMapD_sql_execute_gdf_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_sql_execute_gdf_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_sql_execute_gdf_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_sql_execute_gdf_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDataFrame(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_sql_execute_gdf_result.prototype = {};\nMapD_sql_execute_gdf_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDataFrame();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_sql_execute_gdf_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_sql_execute_gdf_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_deallocate_df_args = function (args) {\n  this.session = null;\n  this.df = null;\n  this.device_type = null;\n  this.device_id = 0;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.df !== undefined && args.df !== null) {\n      this.df = new TDataFrame(args.df);\n    }\n    if (args.device_type !== undefined && args.device_type !== null) {\n      this.device_type = args.device_type;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n  }\n};\nMapD_deallocate_df_args.prototype = {};\nMapD_deallocate_df_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.df = new TDataFrame();\n          this.df.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_deallocate_df_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_deallocate_df_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.df !== null && this.df !== undefined) {\n    output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);\n    this.df.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.device_type !== null && this.device_type !== undefined) {\n    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);\n    output.writeI32(this.device_type);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_deallocate_df_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_deallocate_df_result.prototype = {};\nMapD_deallocate_df_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_deallocate_df_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_deallocate_df_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_interrupt_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_interrupt_args.prototype = {};\nMapD_interrupt_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_interrupt_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_interrupt_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_interrupt_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_interrupt_result.prototype = {};\nMapD_interrupt_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_interrupt_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_interrupt_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_sql_validate_args = function (args) {\n  this.session = null;\n  this.query = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n  }\n};\nMapD_sql_validate_args.prototype = {};\nMapD_sql_validate_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_sql_validate_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_sql_validate_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_sql_validate_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyMap(args.success, [TColumnType]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_sql_validate_result.prototype = {};\nMapD_sql_validate_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.MAP) {\n          var _size330 = 0;\n          var _rtmp3334;\n          this.success = {};\n          var _ktype331 = 0;\n          var _vtype332 = 0;\n          _rtmp3334 = input.readMapBegin();\n          _ktype331 = _rtmp3334.ktype;\n          _vtype332 = _rtmp3334.vtype;\n          _size330 = _rtmp3334.size;\n          for (var _i335 = 0; _i335 < _size330; ++_i335) {\n            if (_i335 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key336 = null;\n            var val337 = null;\n            key336 = input.readString().value;\n            val337 = new TColumnType();\n            val337.read(input);\n            this.success[key336] = val337;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_sql_validate_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_sql_validate_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));\n    for (var kiter338 in this.success) {\n      if (this.success.hasOwnProperty(kiter338)) {\n        var viter339 = this.success[kiter338];\n        output.writeString(kiter338);\n        viter339.write(output);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_completion_hints_args = function (args) {\n  this.session = null;\n  this.sql = null;\n  this.cursor = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.sql !== undefined && args.sql !== null) {\n      this.sql = args.sql;\n    }\n    if (args.cursor !== undefined && args.cursor !== null) {\n      this.cursor = args.cursor;\n    }\n  }\n};\nMapD_get_completion_hints_args.prototype = {};\nMapD_get_completion_hints_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.sql = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.cursor = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_completion_hints_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_completion_hints_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.sql !== null && this.sql !== undefined) {\n    output.writeFieldBegin('sql', Thrift.Type.STRING, 2);\n    output.writeString(this.sql);\n    output.writeFieldEnd();\n  }\n  if (this.cursor !== null && this.cursor !== undefined) {\n    output.writeFieldBegin('cursor', Thrift.Type.I32, 3);\n    output.writeI32(this.cursor);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_completion_hints_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TCompletionHint]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_completion_hints_result.prototype = {};\nMapD_get_completion_hints_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size340 = 0;\n          var _rtmp3344;\n          this.success = [];\n          var _etype343 = 0;\n          _rtmp3344 = input.readListBegin();\n          _etype343 = _rtmp3344.etype;\n          _size340 = _rtmp3344.size;\n          for (var _i345 = 0; _i345 < _size340; ++_i345) {\n            var elem346 = null;\n            elem346 = new TCompletionHint();\n            elem346.read(input);\n            this.success.push(elem346);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_completion_hints_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_completion_hints_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter347 in this.success) {\n      if (this.success.hasOwnProperty(iter347)) {\n        iter347 = this.success[iter347];\n        iter347.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_set_execution_mode_args = function (args) {\n  this.session = null;\n  this.mode = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.mode !== undefined && args.mode !== null) {\n      this.mode = args.mode;\n    }\n  }\n};\nMapD_set_execution_mode_args.prototype = {};\nMapD_set_execution_mode_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.mode = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_set_execution_mode_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_set_execution_mode_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.mode !== null && this.mode !== undefined) {\n    output.writeFieldBegin('mode', Thrift.Type.I32, 2);\n    output.writeI32(this.mode);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_set_execution_mode_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_set_execution_mode_result.prototype = {};\nMapD_set_execution_mode_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_set_execution_mode_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_set_execution_mode_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_render_vega_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.vega_json = null;\n  this.compression_level = null;\n  this.nonce = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.vega_json !== undefined && args.vega_json !== null) {\n      this.vega_json = args.vega_json;\n    }\n    if (args.compression_level !== undefined && args.compression_level !== null) {\n      this.compression_level = args.compression_level;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nMapD_render_vega_args.prototype = {};\nMapD_render_vega_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_json = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.compression_level = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_render_vega_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_render_vega_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.vega_json !== null && this.vega_json !== undefined) {\n    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);\n    output.writeString(this.vega_json);\n    output.writeFieldEnd();\n  }\n  if (this.compression_level !== null && this.compression_level !== undefined) {\n    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);\n    output.writeI32(this.compression_level);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_render_vega_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TRenderResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_render_vega_result.prototype = {};\nMapD_render_vega_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TRenderResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_render_vega_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_render_vega_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_result_row_for_pixel_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.pixel = null;\n  this.table_col_names = null;\n  this.column_format = null;\n  this.pixelRadius = null;\n  this.nonce = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.pixel !== undefined && args.pixel !== null) {\n      this.pixel = new TPixel(args.pixel);\n    }\n    if (args.table_col_names !== undefined && args.table_col_names !== null) {\n      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);\n    }\n    if (args.column_format !== undefined && args.column_format !== null) {\n      this.column_format = args.column_format;\n    }\n    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {\n      this.pixelRadius = args.pixelRadius;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nMapD_get_result_row_for_pixel_args.prototype = {};\nMapD_get_result_row_for_pixel_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pixel = new TPixel();\n          this.pixel.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.MAP) {\n          var _size348 = 0;\n          var _rtmp3352;\n          this.table_col_names = {};\n          var _ktype349 = 0;\n          var _vtype350 = 0;\n          _rtmp3352 = input.readMapBegin();\n          _ktype349 = _rtmp3352.ktype;\n          _vtype350 = _rtmp3352.vtype;\n          _size348 = _rtmp3352.size;\n          for (var _i353 = 0; _i353 < _size348; ++_i353) {\n            if (_i353 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key354 = null;\n            var val355 = null;\n            key354 = input.readString().value;\n            var _size356 = 0;\n            var _rtmp3360;\n            val355 = [];\n            var _etype359 = 0;\n            _rtmp3360 = input.readListBegin();\n            _etype359 = _rtmp3360.etype;\n            _size356 = _rtmp3360.size;\n            for (var _i361 = 0; _i361 < _size356; ++_i361) {\n              var elem362 = null;\n              elem362 = input.readString().value;\n              val355.push(elem362);\n            }\n            input.readListEnd();\n            this.table_col_names[key354] = val355;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.column_format = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.pixelRadius = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_result_row_for_pixel_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_result_row_for_pixel_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.pixel !== null && this.pixel !== undefined) {\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);\n    this.pixel.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.table_col_names !== null && this.table_col_names !== undefined) {\n    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));\n    for (var kiter363 in this.table_col_names) {\n      if (this.table_col_names.hasOwnProperty(kiter363)) {\n        var viter364 = this.table_col_names[kiter363];\n        output.writeString(kiter363);\n        output.writeListBegin(Thrift.Type.STRING, viter364.length);\n        for (var iter365 in viter364) {\n          if (viter364.hasOwnProperty(iter365)) {\n            iter365 = viter364[iter365];\n            output.writeString(iter365);\n          }\n        }\n        output.writeListEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.column_format !== null && this.column_format !== undefined) {\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);\n    output.writeBool(this.column_format);\n    output.writeFieldEnd();\n  }\n  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {\n    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);\n    output.writeI32(this.pixelRadius);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_result_row_for_pixel_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPixelTableRowResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_result_row_for_pixel_result.prototype = {};\nMapD_get_result_row_for_pixel_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPixelTableRowResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_result_row_for_pixel_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_result_row_for_pixel_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_frontend_view_args = function (args) {\n  this.session = null;\n  this.view_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.view_name !== undefined && args.view_name !== null) {\n      this.view_name = args.view_name;\n    }\n  }\n};\nMapD_get_frontend_view_args.prototype = {};\nMapD_get_frontend_view_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_frontend_view_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_frontend_view_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.view_name !== null && this.view_name !== undefined) {\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\n    output.writeString(this.view_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_frontend_view_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TFrontendView(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_frontend_view_result.prototype = {};\nMapD_get_frontend_view_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TFrontendView();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_frontend_view_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_frontend_view_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_frontend_views_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_frontend_views_args.prototype = {};\nMapD_get_frontend_views_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_frontend_views_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_frontend_views_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_frontend_views_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TFrontendView]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_frontend_views_result.prototype = {};\nMapD_get_frontend_views_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size366 = 0;\n          var _rtmp3370;\n          this.success = [];\n          var _etype369 = 0;\n          _rtmp3370 = input.readListBegin();\n          _etype369 = _rtmp3370.etype;\n          _size366 = _rtmp3370.size;\n          for (var _i371 = 0; _i371 < _size366; ++_i371) {\n            var elem372 = null;\n            elem372 = new TFrontendView();\n            elem372.read(input);\n            this.success.push(elem372);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_frontend_views_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_frontend_views_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter373 in this.success) {\n      if (this.success.hasOwnProperty(iter373)) {\n        iter373 = this.success[iter373];\n        iter373.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_create_frontend_view_args = function (args) {\n  this.session = null;\n  this.view_name = null;\n  this.view_state = null;\n  this.image_hash = null;\n  this.view_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.view_name !== undefined && args.view_name !== null) {\n      this.view_name = args.view_name;\n    }\n    if (args.view_state !== undefined && args.view_state !== null) {\n      this.view_state = args.view_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n      this.view_metadata = args.view_metadata;\n    }\n  }\n};\nMapD_create_frontend_view_args.prototype = {};\nMapD_create_frontend_view_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_create_frontend_view_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_create_frontend_view_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.view_name !== null && this.view_name !== undefined) {\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\n    output.writeString(this.view_name);\n    output.writeFieldEnd();\n  }\n  if (this.view_state !== null && this.view_state !== undefined) {\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 3);\n    output.writeString(this.view_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.view_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_create_frontend_view_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_create_frontend_view_result.prototype = {};\nMapD_create_frontend_view_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_create_frontend_view_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_create_frontend_view_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_delete_frontend_view_args = function (args) {\n  this.session = null;\n  this.view_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.view_name !== undefined && args.view_name !== null) {\n      this.view_name = args.view_name;\n    }\n  }\n};\nMapD_delete_frontend_view_args.prototype = {};\nMapD_delete_frontend_view_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_delete_frontend_view_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_delete_frontend_view_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.view_name !== null && this.view_name !== undefined) {\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\n    output.writeString(this.view_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_delete_frontend_view_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_delete_frontend_view_result.prototype = {};\nMapD_delete_frontend_view_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_delete_frontend_view_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_delete_frontend_view_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n  }\n};\nMapD_get_dashboard_args.prototype = {};\nMapD_get_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_dashboard_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDashboard(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_dashboard_result.prototype = {};\nMapD_get_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDashboard();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_dashboard_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_dashboards_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_dashboards_args.prototype = {};\nMapD_get_dashboards_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_dashboards_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_dashboards_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_dashboards_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDashboard]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_dashboards_result.prototype = {};\nMapD_get_dashboards_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size374 = 0;\n          var _rtmp3378;\n          this.success = [];\n          var _etype377 = 0;\n          _rtmp3378 = input.readListBegin();\n          _etype377 = _rtmp3378.etype;\n          _size374 = _rtmp3378.size;\n          for (var _i379 = 0; _i379 < _size374; ++_i379) {\n            var elem380 = null;\n            elem380 = new TDashboard();\n            elem380.read(input);\n            this.success.push(elem380);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_dashboards_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_dashboards_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter381 in this.success) {\n      if (this.success.hasOwnProperty(iter381)) {\n        iter381 = this.success[iter381];\n        iter381.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_create_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_name = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.dashboard_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n  }\n};\nMapD_create_dashboard_args.prototype = {};\nMapD_create_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_create_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_create_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 2);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 3);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_create_dashboard_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_create_dashboard_result.prototype = {};\nMapD_create_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_create_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_create_dashboard_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_replace_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.dashboard_name = null;\n  this.dashboard_owner = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.dashboard_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {\n      this.dashboard_owner = args.dashboard_owner;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n  }\n};\nMapD_replace_dashboard_args.prototype = {};\nMapD_replace_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_replace_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_replace_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 3);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {\n    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 4);\n    output.writeString(this.dashboard_owner);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 6);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 7);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_replace_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_replace_dashboard_result.prototype = {};\nMapD_replace_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_replace_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_replace_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_delete_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n  }\n};\nMapD_delete_dashboard_args.prototype = {};\nMapD_delete_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_delete_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_delete_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_delete_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_delete_dashboard_result.prototype = {};\nMapD_delete_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_delete_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_delete_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_share_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.groups = null;\n  this.objects = null;\n  this.permissions = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.groups !== undefined && args.groups !== null) {\n      this.groups = Thrift.copyList(args.groups, [null]);\n    }\n    if (args.objects !== undefined && args.objects !== null) {\n      this.objects = Thrift.copyList(args.objects, [null]);\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n  }\n};\nMapD_share_dashboard_args.prototype = {};\nMapD_share_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size382 = 0;\n          var _rtmp3386;\n          this.groups = [];\n          var _etype385 = 0;\n          _rtmp3386 = input.readListBegin();\n          _etype385 = _rtmp3386.etype;\n          _size382 = _rtmp3386.size;\n          for (var _i387 = 0; _i387 < _size382; ++_i387) {\n            var elem388 = null;\n            elem388 = input.readString().value;\n            this.groups.push(elem388);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size389 = 0;\n          var _rtmp3393;\n          this.objects = [];\n          var _etype392 = 0;\n          _rtmp3393 = input.readListBegin();\n          _etype392 = _rtmp3393.etype;\n          _size389 = _rtmp3393.size;\n          for (var _i394 = 0; _i394 < _size389; ++_i394) {\n            var elem395 = null;\n            elem395 = input.readString().value;\n            this.objects.push(elem395);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_share_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_share_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.groups !== null && this.groups !== undefined) {\n    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.groups.length);\n    for (var iter396 in this.groups) {\n      if (this.groups.hasOwnProperty(iter396)) {\n        iter396 = this.groups[iter396];\n        output.writeString(iter396);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.objects !== null && this.objects !== undefined) {\n    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRING, this.objects.length);\n    for (var iter397 in this.objects) {\n      if (this.objects.hasOwnProperty(iter397)) {\n        iter397 = this.objects[iter397];\n        output.writeString(iter397);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_share_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_share_dashboard_result.prototype = {};\nMapD_share_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_share_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_share_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_unshare_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.groups = null;\n  this.objects = null;\n  this.permissions = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.groups !== undefined && args.groups !== null) {\n      this.groups = Thrift.copyList(args.groups, [null]);\n    }\n    if (args.objects !== undefined && args.objects !== null) {\n      this.objects = Thrift.copyList(args.objects, [null]);\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n  }\n};\nMapD_unshare_dashboard_args.prototype = {};\nMapD_unshare_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size398 = 0;\n          var _rtmp3402;\n          this.groups = [];\n          var _etype401 = 0;\n          _rtmp3402 = input.readListBegin();\n          _etype401 = _rtmp3402.etype;\n          _size398 = _rtmp3402.size;\n          for (var _i403 = 0; _i403 < _size398; ++_i403) {\n            var elem404 = null;\n            elem404 = input.readString().value;\n            this.groups.push(elem404);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size405 = 0;\n          var _rtmp3409;\n          this.objects = [];\n          var _etype408 = 0;\n          _rtmp3409 = input.readListBegin();\n          _etype408 = _rtmp3409.etype;\n          _size405 = _rtmp3409.size;\n          for (var _i410 = 0; _i410 < _size405; ++_i410) {\n            var elem411 = null;\n            elem411 = input.readString().value;\n            this.objects.push(elem411);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_unshare_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_unshare_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.groups !== null && this.groups !== undefined) {\n    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.groups.length);\n    for (var iter412 in this.groups) {\n      if (this.groups.hasOwnProperty(iter412)) {\n        iter412 = this.groups[iter412];\n        output.writeString(iter412);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.objects !== null && this.objects !== undefined) {\n    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRING, this.objects.length);\n    for (var iter413 in this.objects) {\n      if (this.objects.hasOwnProperty(iter413)) {\n        iter413 = this.objects[iter413];\n        output.writeString(iter413);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_unshare_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_unshare_dashboard_result.prototype = {};\nMapD_unshare_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_unshare_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_unshare_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_link_view_args = function (args) {\n  this.session = null;\n  this.link = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.link !== undefined && args.link !== null) {\n      this.link = args.link;\n    }\n  }\n};\nMapD_get_link_view_args.prototype = {};\nMapD_get_link_view_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.link = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_link_view_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_link_view_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.link !== null && this.link !== undefined) {\n    output.writeFieldBegin('link', Thrift.Type.STRING, 2);\n    output.writeString(this.link);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_link_view_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TFrontendView(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_link_view_result.prototype = {};\nMapD_get_link_view_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TFrontendView();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_link_view_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_link_view_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_create_link_args = function (args) {\n  this.session = null;\n  this.view_state = null;\n  this.view_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.view_state !== undefined && args.view_state !== null) {\n      this.view_state = args.view_state;\n    }\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n      this.view_metadata = args.view_metadata;\n    }\n  }\n};\nMapD_create_link_args.prototype = {};\nMapD_create_link_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_create_link_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_create_link_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.view_state !== null && this.view_state !== undefined) {\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\n    output.writeString(this.view_state);\n    output.writeFieldEnd();\n  }\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);\n    output.writeString(this.view_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_create_link_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_create_link_result.prototype = {};\nMapD_create_link_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_create_link_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_create_link_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_load_table_binary_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.rows = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TRow]);\n    }\n  }\n};\nMapD_load_table_binary_args.prototype = {};\nMapD_load_table_binary_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size414 = 0;\n          var _rtmp3418;\n          this.rows = [];\n          var _etype417 = 0;\n          _rtmp3418 = input.readListBegin();\n          _etype417 = _rtmp3418.etype;\n          _size414 = _rtmp3418.size;\n          for (var _i419 = 0; _i419 < _size414; ++_i419) {\n            var elem420 = null;\n            elem420 = new TRow();\n            elem420.read(input);\n            this.rows.push(elem420);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_load_table_binary_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_load_table_binary_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter421 in this.rows) {\n      if (this.rows.hasOwnProperty(iter421)) {\n        iter421 = this.rows[iter421];\n        iter421.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_load_table_binary_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_load_table_binary_result.prototype = {};\nMapD_load_table_binary_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_load_table_binary_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_load_table_binary_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_load_table_binary_columnar_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.cols = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TColumn]);\n    }\n  }\n};\nMapD_load_table_binary_columnar_args.prototype = {};\nMapD_load_table_binary_columnar_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size422 = 0;\n          var _rtmp3426;\n          this.cols = [];\n          var _etype425 = 0;\n          _rtmp3426 = input.readListBegin();\n          _etype425 = _rtmp3426.etype;\n          _size422 = _rtmp3426.size;\n          for (var _i427 = 0; _i427 < _size422; ++_i427) {\n            var elem428 = null;\n            elem428 = new TColumn();\n            elem428.read(input);\n            this.cols.push(elem428);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_load_table_binary_columnar_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_load_table_binary_columnar_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter429 in this.cols) {\n      if (this.cols.hasOwnProperty(iter429)) {\n        iter429 = this.cols[iter429];\n        iter429.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_load_table_binary_columnar_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_load_table_binary_columnar_result.prototype = {};\nMapD_load_table_binary_columnar_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_load_table_binary_columnar_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_load_table_binary_columnar_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_load_table_binary_arrow_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.arrow_stream = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.arrow_stream !== undefined && args.arrow_stream !== null) {\n      this.arrow_stream = args.arrow_stream;\n    }\n  }\n};\nMapD_load_table_binary_arrow_args.prototype = {};\nMapD_load_table_binary_arrow_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.arrow_stream = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_load_table_binary_arrow_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_load_table_binary_arrow_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.arrow_stream !== null && this.arrow_stream !== undefined) {\n    output.writeFieldBegin('arrow_stream', Thrift.Type.STRING, 3);\n    output.writeBinary(this.arrow_stream);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_load_table_binary_arrow_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_load_table_binary_arrow_result.prototype = {};\nMapD_load_table_binary_arrow_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_load_table_binary_arrow_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_load_table_binary_arrow_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_load_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.rows = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TStringRow]);\n    }\n  }\n};\nMapD_load_table_args.prototype = {};\nMapD_load_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size430 = 0;\n          var _rtmp3434;\n          this.rows = [];\n          var _etype433 = 0;\n          _rtmp3434 = input.readListBegin();\n          _etype433 = _rtmp3434.etype;\n          _size430 = _rtmp3434.size;\n          for (var _i435 = 0; _i435 < _size430; ++_i435) {\n            var elem436 = null;\n            elem436 = new TStringRow();\n            elem436.read(input);\n            this.rows.push(elem436);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_load_table_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_load_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter437 in this.rows) {\n      if (this.rows.hasOwnProperty(iter437)) {\n        iter437 = this.rows[iter437];\n        iter437.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_load_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_load_table_result.prototype = {};\nMapD_load_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_load_table_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_load_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_detect_column_types_args = function (args) {\n  this.session = null;\n  this.file_name = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nMapD_detect_column_types_args.prototype = {};\nMapD_detect_column_types_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_detect_column_types_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_detect_column_types_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_detect_column_types_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDetectResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_detect_column_types_result.prototype = {};\nMapD_detect_column_types_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDetectResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_detect_column_types_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_detect_column_types_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_create_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.row_desc = null;\n  this.table_type = 0;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.table_type !== undefined && args.table_type !== null) {\n      this.table_type = args.table_type;\n    }\n  }\n};\nMapD_create_table_args.prototype = {};\nMapD_create_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size438 = 0;\n          var _rtmp3442;\n          this.row_desc = [];\n          var _etype441 = 0;\n          _rtmp3442 = input.readListBegin();\n          _etype441 = _rtmp3442.etype;\n          _size438 = _rtmp3442.size;\n          for (var _i443 = 0; _i443 < _size438; ++_i443) {\n            var elem444 = null;\n            elem444 = new TColumnType();\n            elem444.read(input);\n            this.row_desc.push(elem444);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.table_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_create_table_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_create_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter445 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter445)) {\n        iter445 = this.row_desc[iter445];\n        iter445.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.table_type !== null && this.table_type !== undefined) {\n    output.writeFieldBegin('table_type', Thrift.Type.I32, 4);\n    output.writeI32(this.table_type);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_create_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_create_table_result.prototype = {};\nMapD_create_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_create_table_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_create_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_import_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.file_name = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nMapD_import_table_args.prototype = {};\nMapD_import_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_import_table_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_import_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_import_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_import_table_result.prototype = {};\nMapD_import_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_import_table_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_import_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_import_geo_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.file_name = null;\n  this.copy_params = null;\n  this.row_desc = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n  }\n};\nMapD_import_geo_table_args.prototype = {};\nMapD_import_geo_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          var _size446 = 0;\n          var _rtmp3450;\n          this.row_desc = [];\n          var _etype449 = 0;\n          _rtmp3450 = input.readListBegin();\n          _etype449 = _rtmp3450.etype;\n          _size446 = _rtmp3450.size;\n          for (var _i451 = 0; _i451 < _size446; ++_i451) {\n            var elem452 = null;\n            elem452 = new TColumnType();\n            elem452.read(input);\n            this.row_desc.push(elem452);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_import_geo_table_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_import_geo_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter453 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter453)) {\n        iter453 = this.row_desc[iter453];\n        iter453.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_import_geo_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_import_geo_table_result.prototype = {};\nMapD_import_geo_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_import_geo_table_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_import_geo_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_import_table_status_args = function (args) {\n  this.session = null;\n  this.import_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.import_id !== undefined && args.import_id !== null) {\n      this.import_id = args.import_id;\n    }\n  }\n};\nMapD_import_table_status_args.prototype = {};\nMapD_import_table_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.import_id = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_import_table_status_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_import_table_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.import_id !== null && this.import_id !== undefined) {\n    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);\n    output.writeString(this.import_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_import_table_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TImportStatus(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_import_table_status_result.prototype = {};\nMapD_import_table_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TImportStatus();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_import_table_status_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_import_table_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_start_query_args = function (args) {\n  this.session = null;\n  this.query_ra = null;\n  this.just_explain = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query_ra !== undefined && args.query_ra !== null) {\n      this.query_ra = args.query_ra;\n    }\n    if (args.just_explain !== undefined && args.just_explain !== null) {\n      this.just_explain = args.just_explain;\n    }\n  }\n};\nMapD_start_query_args.prototype = {};\nMapD_start_query_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query_ra = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.just_explain = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_start_query_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_start_query_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query_ra !== null && this.query_ra !== undefined) {\n    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 2);\n    output.writeString(this.query_ra);\n    output.writeFieldEnd();\n  }\n  if (this.just_explain !== null && this.just_explain !== undefined) {\n    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 3);\n    output.writeBool(this.just_explain);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_start_query_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPendingQuery(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_start_query_result.prototype = {};\nMapD_start_query_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPendingQuery();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_start_query_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_start_query_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_execute_first_step_args = function (args) {\n  this.pending_query = null;\n  if (args) {\n    if (args.pending_query !== undefined && args.pending_query !== null) {\n      this.pending_query = new TPendingQuery(args.pending_query);\n    }\n  }\n};\nMapD_execute_first_step_args.prototype = {};\nMapD_execute_first_step_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pending_query = new TPendingQuery();\n          this.pending_query.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_execute_first_step_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_execute_first_step_args');\n  if (this.pending_query !== null && this.pending_query !== undefined) {\n    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);\n    this.pending_query.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_execute_first_step_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TStepResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_execute_first_step_result.prototype = {};\nMapD_execute_first_step_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TStepResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_execute_first_step_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_execute_first_step_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_broadcast_serialized_rows_args = function (args) {\n  this.serialized_rows = null;\n  this.row_desc = null;\n  this.query_id = null;\n  if (args) {\n    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\n      this.serialized_rows = args.serialized_rows;\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.query_id !== undefined && args.query_id !== null) {\n      this.query_id = args.query_id;\n    }\n  }\n};\nMapD_broadcast_serialized_rows_args.prototype = {};\nMapD_broadcast_serialized_rows_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.serialized_rows = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size454 = 0;\n          var _rtmp3458;\n          this.row_desc = [];\n          var _etype457 = 0;\n          _rtmp3458 = input.readListBegin();\n          _etype457 = _rtmp3458.etype;\n          _size454 = _rtmp3458.size;\n          for (var _i459 = 0; _i459 < _size454; ++_i459) {\n            var elem460 = null;\n            elem460 = new TColumnType();\n            elem460.read(input);\n            this.row_desc.push(elem460);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.query_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_broadcast_serialized_rows_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_broadcast_serialized_rows_args');\n  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\n    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);\n    output.writeString(this.serialized_rows);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter461 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter461)) {\n        iter461 = this.row_desc[iter461];\n        iter461.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.query_id !== null && this.query_id !== undefined) {\n    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);\n    output.writeI64(this.query_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_broadcast_serialized_rows_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_broadcast_serialized_rows_result.prototype = {};\nMapD_broadcast_serialized_rows_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_broadcast_serialized_rows_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_broadcast_serialized_rows_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_start_render_query_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.node_idx = null;\n  this.vega_json = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.node_idx !== undefined && args.node_idx !== null) {\n      this.node_idx = args.node_idx;\n    }\n    if (args.vega_json !== undefined && args.vega_json !== null) {\n      this.vega_json = args.vega_json;\n    }\n  }\n};\nMapD_start_render_query_args.prototype = {};\nMapD_start_render_query_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I16) {\n          this.node_idx = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_json = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_start_render_query_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_start_render_query_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.node_idx !== null && this.node_idx !== undefined) {\n    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);\n    output.writeI16(this.node_idx);\n    output.writeFieldEnd();\n  }\n  if (this.vega_json !== null && this.vega_json !== undefined) {\n    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);\n    output.writeString(this.vega_json);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_start_render_query_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPendingRenderQuery(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_start_render_query_result.prototype = {};\nMapD_start_render_query_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPendingRenderQuery();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_start_render_query_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_start_render_query_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_execute_next_render_step_args = function (args) {\n  this.pending_render = null;\n  this.merged_data = null;\n  if (args) {\n    if (args.pending_render !== undefined && args.pending_render !== null) {\n      this.pending_render = new TPendingRenderQuery(args.pending_render);\n    }\n    if (args.merged_data !== undefined && args.merged_data !== null) {\n      this.merged_data = Thrift.copyMap(args.merged_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, TRenderDatum]);\n    }\n  }\n};\nMapD_execute_next_render_step_args.prototype = {};\nMapD_execute_next_render_step_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pending_render = new TPendingRenderQuery();\n          this.pending_render.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.MAP) {\n          var _size462 = 0;\n          var _rtmp3466;\n          this.merged_data = {};\n          var _ktype463 = 0;\n          var _vtype464 = 0;\n          _rtmp3466 = input.readMapBegin();\n          _ktype463 = _rtmp3466.ktype;\n          _vtype464 = _rtmp3466.vtype;\n          _size462 = _rtmp3466.size;\n          for (var _i467 = 0; _i467 < _size462; ++_i467) {\n            if (_i467 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key468 = null;\n            var val469 = null;\n            key468 = input.readString().value;\n            var _size470 = 0;\n            var _rtmp3474;\n            val469 = {};\n            var _ktype471 = 0;\n            var _vtype472 = 0;\n            _rtmp3474 = input.readMapBegin();\n            _ktype471 = _rtmp3474.ktype;\n            _vtype472 = _rtmp3474.vtype;\n            _size470 = _rtmp3474.size;\n            for (var _i475 = 0; _i475 < _size470; ++_i475) {\n              if (_i475 > 0) {\n                if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                  input.rstack.pop();\n                }\n              }\n              var key476 = null;\n              var val477 = null;\n              key476 = input.readString().value;\n              var _size478 = 0;\n              var _rtmp3482;\n              val477 = {};\n              var _ktype479 = 0;\n              var _vtype480 = 0;\n              _rtmp3482 = input.readMapBegin();\n              _ktype479 = _rtmp3482.ktype;\n              _vtype480 = _rtmp3482.vtype;\n              _size478 = _rtmp3482.size;\n              for (var _i483 = 0; _i483 < _size478; ++_i483) {\n                if (_i483 > 0) {\n                  if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                    input.rstack.pop();\n                  }\n                }\n                var key484 = null;\n                var val485 = null;\n                key484 = input.readString().value;\n                var _size486 = 0;\n                var _rtmp3490;\n                val485 = {};\n                var _ktype487 = 0;\n                var _vtype488 = 0;\n                _rtmp3490 = input.readMapBegin();\n                _ktype487 = _rtmp3490.ktype;\n                _vtype488 = _rtmp3490.vtype;\n                _size486 = _rtmp3490.size;\n                for (var _i491 = 0; _i491 < _size486; ++_i491) {\n                  if (_i491 > 0) {\n                    if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                      input.rstack.pop();\n                    }\n                  }\n                  var key492 = null;\n                  var val493 = null;\n                  key492 = input.readString().value;\n                  var _size494 = 0;\n                  var _rtmp3498;\n                  val493 = [];\n                  var _etype497 = 0;\n                  _rtmp3498 = input.readListBegin();\n                  _etype497 = _rtmp3498.etype;\n                  _size494 = _rtmp3498.size;\n                  for (var _i499 = 0; _i499 < _size494; ++_i499) {\n                    var elem500 = null;\n                    elem500 = new TRenderDatum();\n                    elem500.read(input);\n                    val493.push(elem500);\n                  }\n                  input.readListEnd();\n                  val485[key492] = val493;\n                }\n                input.readMapEnd();\n                val477[key484] = val485;\n              }\n              input.readMapEnd();\n              val469[key476] = val477;\n            }\n            input.readMapEnd();\n            this.merged_data[key468] = val469;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_execute_next_render_step_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_execute_next_render_step_args');\n  if (this.pending_render !== null && this.pending_render !== undefined) {\n    output.writeFieldBegin('pending_render', Thrift.Type.STRUCT, 1);\n    this.pending_render.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.merged_data !== null && this.merged_data !== undefined) {\n    output.writeFieldBegin('merged_data', Thrift.Type.MAP, 2);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merged_data));\n    for (var kiter501 in this.merged_data) {\n      if (this.merged_data.hasOwnProperty(kiter501)) {\n        var viter502 = this.merged_data[kiter501];\n        output.writeString(kiter501);\n        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter502));\n        for (var kiter503 in viter502) {\n          if (viter502.hasOwnProperty(kiter503)) {\n            var viter504 = viter502[kiter503];\n            output.writeString(kiter503);\n            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter504));\n            for (var kiter505 in viter504) {\n              if (viter504.hasOwnProperty(kiter505)) {\n                var viter506 = viter504[kiter505];\n                output.writeString(kiter505);\n                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter506));\n                for (var kiter507 in viter506) {\n                  if (viter506.hasOwnProperty(kiter507)) {\n                    var viter508 = viter506[kiter507];\n                    output.writeString(kiter507);\n                    output.writeListBegin(Thrift.Type.STRUCT, viter508.length);\n                    for (var iter509 in viter508) {\n                      if (viter508.hasOwnProperty(iter509)) {\n                        iter509 = viter508[iter509];\n                        iter509.write(output);\n                      }\n                    }\n                    output.writeListEnd();\n                  }\n                }\n                output.writeMapEnd();\n              }\n            }\n            output.writeMapEnd();\n          }\n        }\n        output.writeMapEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_execute_next_render_step_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TRenderStepResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_execute_next_render_step_result.prototype = {};\nMapD_execute_next_render_step_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TRenderStepResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_execute_next_render_step_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_execute_next_render_step_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_insert_data_args = function (args) {\n  this.session = null;\n  this.insert_data = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.insert_data !== undefined && args.insert_data !== null) {\n      this.insert_data = new TInsertData(args.insert_data);\n    }\n  }\n};\nMapD_insert_data_args.prototype = {};\nMapD_insert_data_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.insert_data = new TInsertData();\n          this.insert_data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_insert_data_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_insert_data_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.insert_data !== null && this.insert_data !== undefined) {\n    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);\n    this.insert_data.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_insert_data_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_insert_data_result.prototype = {};\nMapD_insert_data_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_insert_data_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_insert_data_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_checkpoint_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nMapD_checkpoint_args.prototype = {};\nMapD_checkpoint_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_checkpoint_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_checkpoint_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_checkpoint_result = function (args) {\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_checkpoint_result.prototype = {};\nMapD_checkpoint_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_checkpoint_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_checkpoint_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_table_descriptor_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nMapD_get_table_descriptor_args.prototype = {};\nMapD_get_table_descriptor_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_table_descriptor_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_table_descriptor_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_table_descriptor_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyMap(args.success, [TColumnType]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_table_descriptor_result.prototype = {};\nMapD_get_table_descriptor_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.MAP) {\n          var _size510 = 0;\n          var _rtmp3514;\n          this.success = {};\n          var _ktype511 = 0;\n          var _vtype512 = 0;\n          _rtmp3514 = input.readMapBegin();\n          _ktype511 = _rtmp3514.ktype;\n          _vtype512 = _rtmp3514.vtype;\n          _size510 = _rtmp3514.size;\n          for (var _i515 = 0; _i515 < _size510; ++_i515) {\n            if (_i515 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key516 = null;\n            var val517 = null;\n            key516 = input.readString().value;\n            val517 = new TColumnType();\n            val517.read(input);\n            this.success[key516] = val517;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_table_descriptor_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_table_descriptor_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));\n    for (var kiter518 in this.success) {\n      if (this.success.hasOwnProperty(kiter518)) {\n        var viter519 = this.success[kiter518];\n        output.writeString(kiter518);\n        viter519.write(output);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_row_descriptor_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nMapD_get_row_descriptor_args.prototype = {};\nMapD_get_row_descriptor_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_row_descriptor_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_row_descriptor_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_row_descriptor_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TColumnType]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_row_descriptor_result.prototype = {};\nMapD_get_row_descriptor_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size520 = 0;\n          var _rtmp3524;\n          this.success = [];\n          var _etype523 = 0;\n          _rtmp3524 = input.readListBegin();\n          _etype523 = _rtmp3524.etype;\n          _size520 = _rtmp3524.size;\n          for (var _i525 = 0; _i525 < _size520; ++_i525) {\n            var elem526 = null;\n            elem526 = new TColumnType();\n            elem526.read(input);\n            this.success.push(elem526);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_row_descriptor_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_row_descriptor_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter527 in this.success) {\n      if (this.success.hasOwnProperty(iter527)) {\n        iter527 = this.success[iter527];\n        iter527.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_roles_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nMapD_get_roles_args.prototype = {};\nMapD_get_roles_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_roles_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_roles_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_roles_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_roles_result.prototype = {};\nMapD_get_roles_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size528 = 0;\n          var _rtmp3532;\n          this.success = [];\n          var _etype531 = 0;\n          _rtmp3532 = input.readListBegin();\n          _etype531 = _rtmp3532.etype;\n          _size528 = _rtmp3532.size;\n          for (var _i533 = 0; _i533 < _size528; ++_i533) {\n            var elem534 = null;\n            elem534 = input.readString().value;\n            this.success.push(elem534);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_roles_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_roles_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter535 in this.success) {\n      if (this.success.hasOwnProperty(iter535)) {\n        iter535 = this.success[iter535];\n        output.writeString(iter535);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_db_objects_for_grantee_args = function (args) {\n  this.session = null;\n  this.roleName = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.roleName !== undefined && args.roleName !== null) {\n      this.roleName = args.roleName;\n    }\n  }\n};\nMapD_get_db_objects_for_grantee_args.prototype = {};\nMapD_get_db_objects_for_grantee_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.roleName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_db_objects_for_grantee_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_db_objects_for_grantee_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.roleName !== null && this.roleName !== undefined) {\n    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);\n    output.writeString(this.roleName);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_db_objects_for_grantee_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBObject]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_db_objects_for_grantee_result.prototype = {};\nMapD_get_db_objects_for_grantee_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size536 = 0;\n          var _rtmp3540;\n          this.success = [];\n          var _etype539 = 0;\n          _rtmp3540 = input.readListBegin();\n          _etype539 = _rtmp3540.etype;\n          _size536 = _rtmp3540.size;\n          for (var _i541 = 0; _i541 < _size536; ++_i541) {\n            var elem542 = null;\n            elem542 = new TDBObject();\n            elem542.read(input);\n            this.success.push(elem542);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_db_objects_for_grantee_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_db_objects_for_grantee_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter543 in this.success) {\n      if (this.success.hasOwnProperty(iter543)) {\n        iter543 = this.success[iter543];\n        iter543.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_db_object_privs_args = function (args) {\n  this.session = null;\n  this.objectName = null;\n  this.type = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.objectName !== undefined && args.objectName !== null) {\n      this.objectName = args.objectName;\n    }\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n  }\n};\nMapD_get_db_object_privs_args.prototype = {};\nMapD_get_db_object_privs_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.objectName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_db_object_privs_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_db_object_privs_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.objectName !== null && this.objectName !== undefined) {\n    output.writeFieldBegin('objectName', Thrift.Type.STRING, 2);\n    output.writeString(this.objectName);\n    output.writeFieldEnd();\n  }\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 3);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_db_object_privs_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBObject]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_db_object_privs_result.prototype = {};\nMapD_get_db_object_privs_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size544 = 0;\n          var _rtmp3548;\n          this.success = [];\n          var _etype547 = 0;\n          _rtmp3548 = input.readListBegin();\n          _etype547 = _rtmp3548.etype;\n          _size544 = _rtmp3548.size;\n          for (var _i549 = 0; _i549 < _size544; ++_i549) {\n            var elem550 = null;\n            elem550 = new TDBObject();\n            elem550.read(input);\n            this.success.push(elem550);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_db_object_privs_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_db_object_privs_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter551 in this.success) {\n      if (this.success.hasOwnProperty(iter551)) {\n        iter551 = this.success[iter551];\n        iter551.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_all_roles_for_user_args = function (args) {\n  this.session = null;\n  this.userName = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.userName !== undefined && args.userName !== null) {\n      this.userName = args.userName;\n    }\n  }\n};\nMapD_get_all_roles_for_user_args.prototype = {};\nMapD_get_all_roles_for_user_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.userName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_all_roles_for_user_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_all_roles_for_user_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.userName !== null && this.userName !== undefined) {\n    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);\n    output.writeString(this.userName);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_all_roles_for_user_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_all_roles_for_user_result.prototype = {};\nMapD_get_all_roles_for_user_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size552 = 0;\n          var _rtmp3556;\n          this.success = [];\n          var _etype555 = 0;\n          _rtmp3556 = input.readListBegin();\n          _etype555 = _rtmp3556.etype;\n          _size552 = _rtmp3556.size;\n          for (var _i557 = 0; _i557 < _size552; ++_i557) {\n            var elem558 = null;\n            elem558 = input.readString().value;\n            this.success.push(elem558);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_all_roles_for_user_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_all_roles_for_user_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter559 in this.success) {\n      if (this.success.hasOwnProperty(iter559)) {\n        iter559 = this.success[iter559];\n        output.writeString(iter559);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_set_license_key_args = function (args) {\n  this.session = null;\n  this.key = null;\n  this.nonce = '';\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.key !== undefined && args.key !== null) {\n      this.key = args.key;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nMapD_set_license_key_args.prototype = {};\nMapD_set_license_key_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_set_license_key_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_set_license_key_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.key !== null && this.key !== undefined) {\n    output.writeFieldBegin('key', Thrift.Type.STRING, 2);\n    output.writeString(this.key);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 3);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_set_license_key_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TLicenseInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_set_license_key_result.prototype = {};\nMapD_set_license_key_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TLicenseInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_set_license_key_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_set_license_key_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_license_claims_args = function (args) {\n  this.session = null;\n  this.nonce = '';\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nMapD_get_license_claims_args.prototype = {};\nMapD_get_license_claims_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_license_claims_args.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_license_claims_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapD_get_license_claims_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TMapDException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TLicenseInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nMapD_get_license_claims_result.prototype = {};\nMapD_get_license_claims_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TLicenseInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TMapDException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nMapD_get_license_claims_result.prototype.write = function (output) {\n  output.writeStructBegin('MapD_get_license_claims_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.MapDClient = function (input, output) {\n  this.input = input;\n  this.output = !output ? input : output;\n  this.seqid = 0;\n};\nMapDClient.prototype = {};\nMapDClient.prototype.connect = function (user, passwd, dbname, callback) {\n  this.send_connect(user, passwd, dbname, callback);\n  if (!callback) {\n    return this.recv_connect();\n  }\n};\n\nMapDClient.prototype.send_connect = function (user, passwd, dbname, callback) {\n  this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_connect_args();\n  args.user = user;\n  args.passwd = passwd;\n  args.dbname = dbname;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_connect();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_connect = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_connect_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'connect failed: unknown result';\n};\nMapDClient.prototype.disconnect = function (session, callback) {\n  this.send_disconnect(session, callback);\n  if (!callback) {\n    this.recv_disconnect();\n  }\n};\n\nMapDClient.prototype.send_disconnect = function (session, callback) {\n  this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_disconnect_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_disconnect();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_disconnect = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_disconnect_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.get_server_status = function (session, callback) {\n  this.send_get_server_status(session, callback);\n  if (!callback) {\n    return this.recv_get_server_status();\n  }\n};\n\nMapDClient.prototype.send_get_server_status = function (session, callback) {\n  this.output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_server_status_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_server_status();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_server_status = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_server_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_server_status failed: unknown result';\n};\nMapDClient.prototype.get_status = function (session, callback) {\n  this.send_get_status(session, callback);\n  if (!callback) {\n    return this.recv_get_status();\n  }\n};\n\nMapDClient.prototype.send_get_status = function (session, callback) {\n  this.output.writeMessageBegin('get_status', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_status_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_status();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_status = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_status failed: unknown result';\n};\nMapDClient.prototype.get_hardware_info = function (session, callback) {\n  this.send_get_hardware_info(session, callback);\n  if (!callback) {\n    return this.recv_get_hardware_info();\n  }\n};\n\nMapDClient.prototype.send_get_hardware_info = function (session, callback) {\n  this.output.writeMessageBegin('get_hardware_info', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_hardware_info_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_hardware_info();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_hardware_info = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_hardware_info_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_hardware_info failed: unknown result';\n};\nMapDClient.prototype.get_tables = function (session, callback) {\n  this.send_get_tables(session, callback);\n  if (!callback) {\n    return this.recv_get_tables();\n  }\n};\n\nMapDClient.prototype.send_get_tables = function (session, callback) {\n  this.output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_tables_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_tables();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_tables = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_tables_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_tables failed: unknown result';\n};\nMapDClient.prototype.get_physical_tables = function (session, callback) {\n  this.send_get_physical_tables(session, callback);\n  if (!callback) {\n    return this.recv_get_physical_tables();\n  }\n};\n\nMapDClient.prototype.send_get_physical_tables = function (session, callback) {\n  this.output.writeMessageBegin('get_physical_tables', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_physical_tables_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_physical_tables();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_physical_tables = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_physical_tables_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_physical_tables failed: unknown result';\n};\nMapDClient.prototype.get_views = function (session, callback) {\n  this.send_get_views(session, callback);\n  if (!callback) {\n    return this.recv_get_views();\n  }\n};\n\nMapDClient.prototype.send_get_views = function (session, callback) {\n  this.output.writeMessageBegin('get_views', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_views_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_views();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_views = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_views_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_views failed: unknown result';\n};\nMapDClient.prototype.get_tables_meta = function (session, callback) {\n  this.send_get_tables_meta(session, callback);\n  if (!callback) {\n    return this.recv_get_tables_meta();\n  }\n};\n\nMapDClient.prototype.send_get_tables_meta = function (session, callback) {\n  this.output.writeMessageBegin('get_tables_meta', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_tables_meta_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_tables_meta();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_tables_meta = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_tables_meta_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_tables_meta failed: unknown result';\n};\nMapDClient.prototype.get_table_details = function (session, table_name, callback) {\n  this.send_get_table_details(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_table_details();\n  }\n};\n\nMapDClient.prototype.send_get_table_details = function (session, table_name, callback) {\n  this.output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_table_details_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_table_details();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_table_details = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_table_details_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_details failed: unknown result';\n};\nMapDClient.prototype.get_internal_table_details = function (session, table_name, callback) {\n  this.send_get_internal_table_details(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_internal_table_details();\n  }\n};\n\nMapDClient.prototype.send_get_internal_table_details = function (session, table_name, callback) {\n  this.output.writeMessageBegin('get_internal_table_details', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_internal_table_details_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_internal_table_details();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_internal_table_details = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_internal_table_details_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_internal_table_details failed: unknown result';\n};\nMapDClient.prototype.get_users = function (session, callback) {\n  this.send_get_users(session, callback);\n  if (!callback) {\n    return this.recv_get_users();\n  }\n};\n\nMapDClient.prototype.send_get_users = function (session, callback) {\n  this.output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_users_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_users();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_users = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_users_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_users failed: unknown result';\n};\nMapDClient.prototype.get_databases = function (session, callback) {\n  this.send_get_databases(session, callback);\n  if (!callback) {\n    return this.recv_get_databases();\n  }\n};\n\nMapDClient.prototype.send_get_databases = function (session, callback) {\n  this.output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_databases_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_databases();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_databases = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_databases_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_databases failed: unknown result';\n};\nMapDClient.prototype.get_version = function (callback) {\n  this.send_get_version(callback);\n  if (!callback) {\n    return this.recv_get_version();\n  }\n};\n\nMapDClient.prototype.send_get_version = function (callback) {\n  this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_version_args();\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_version();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_version = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_version_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_version failed: unknown result';\n};\nMapDClient.prototype.start_heap_profile = function (session, callback) {\n  this.send_start_heap_profile(session, callback);\n  if (!callback) {\n    this.recv_start_heap_profile();\n  }\n};\n\nMapDClient.prototype.send_start_heap_profile = function (session, callback) {\n  this.output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_start_heap_profile_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_start_heap_profile();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_start_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_start_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.stop_heap_profile = function (session, callback) {\n  this.send_stop_heap_profile(session, callback);\n  if (!callback) {\n    this.recv_stop_heap_profile();\n  }\n};\n\nMapDClient.prototype.send_stop_heap_profile = function (session, callback) {\n  this.output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_stop_heap_profile_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_stop_heap_profile();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_stop_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_stop_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.get_heap_profile = function (session, callback) {\n  this.send_get_heap_profile(session, callback);\n  if (!callback) {\n    return this.recv_get_heap_profile();\n  }\n};\n\nMapDClient.prototype.send_get_heap_profile = function (session, callback) {\n  this.output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_heap_profile_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_heap_profile();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_heap_profile failed: unknown result';\n};\nMapDClient.prototype.get_memory = function (session, memory_level, callback) {\n  this.send_get_memory(session, memory_level, callback);\n  if (!callback) {\n    return this.recv_get_memory();\n  }\n};\n\nMapDClient.prototype.send_get_memory = function (session, memory_level, callback) {\n  this.output.writeMessageBegin('get_memory', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_memory_args();\n  args.session = session;\n  args.memory_level = memory_level;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_memory();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_memory failed: unknown result';\n};\nMapDClient.prototype.clear_cpu_memory = function (session, callback) {\n  this.send_clear_cpu_memory(session, callback);\n  if (!callback) {\n    this.recv_clear_cpu_memory();\n  }\n};\n\nMapDClient.prototype.send_clear_cpu_memory = function (session, callback) {\n  this.output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_clear_cpu_memory_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_clear_cpu_memory();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_clear_cpu_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_clear_cpu_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.clear_gpu_memory = function (session, callback) {\n  this.send_clear_gpu_memory(session, callback);\n  if (!callback) {\n    this.recv_clear_gpu_memory();\n  }\n};\n\nMapDClient.prototype.send_clear_gpu_memory = function (session, callback) {\n  this.output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_clear_gpu_memory_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_clear_gpu_memory();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_clear_gpu_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_clear_gpu_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.set_table_epoch = function (session, db_id, table_id, new_epoch, callback) {\n  this.send_set_table_epoch(session, db_id, table_id, new_epoch, callback);\n  if (!callback) {\n    this.recv_set_table_epoch();\n  }\n};\n\nMapDClient.prototype.send_set_table_epoch = function (session, db_id, table_id, new_epoch, callback) {\n  this.output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_set_table_epoch_args();\n  args.session = session;\n  args.db_id = db_id;\n  args.table_id = table_id;\n  args.new_epoch = new_epoch;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_table_epoch();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_set_table_epoch = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_set_table_epoch_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.set_table_epoch_by_name = function (session, table_name, new_epoch, callback) {\n  this.send_set_table_epoch_by_name(session, table_name, new_epoch, callback);\n  if (!callback) {\n    this.recv_set_table_epoch_by_name();\n  }\n};\n\nMapDClient.prototype.send_set_table_epoch_by_name = function (session, table_name, new_epoch, callback) {\n  this.output.writeMessageBegin('set_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_set_table_epoch_by_name_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.new_epoch = new_epoch;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_table_epoch_by_name();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_set_table_epoch_by_name = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_set_table_epoch_by_name_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.get_table_epoch = function (session, db_id, table_id, callback) {\n  this.send_get_table_epoch(session, db_id, table_id, callback);\n  if (!callback) {\n    return this.recv_get_table_epoch();\n  }\n};\n\nMapDClient.prototype.send_get_table_epoch = function (session, db_id, table_id, callback) {\n  this.output.writeMessageBegin('get_table_epoch', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_table_epoch_args();\n  args.session = session;\n  args.db_id = db_id;\n  args.table_id = table_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_table_epoch();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_table_epoch = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_table_epoch_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_epoch failed: unknown result';\n};\nMapDClient.prototype.get_table_epoch_by_name = function (session, table_name, callback) {\n  this.send_get_table_epoch_by_name(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_table_epoch_by_name();\n  }\n};\n\nMapDClient.prototype.send_get_table_epoch_by_name = function (session, table_name, callback) {\n  this.output.writeMessageBegin('get_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_table_epoch_by_name_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_table_epoch_by_name();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_table_epoch_by_name = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_table_epoch_by_name_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_epoch_by_name failed: unknown result';\n};\nMapDClient.prototype.sql_execute = function (session, query, column_format, nonce, first_n, at_most_n, callback) {\n  this.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n, callback);\n  if (!callback) {\n    return this.recv_sql_execute();\n  }\n};\n\nMapDClient.prototype.send_sql_execute = function (session, query, column_format, nonce, first_n, at_most_n, callback) {\n  this.output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_sql_execute_args();\n  args.session = session;\n  args.query = query;\n  args.column_format = column_format;\n  args.nonce = nonce;\n  args.first_n = first_n;\n  args.at_most_n = at_most_n;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_sql_execute();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_sql_execute = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_sql_execute_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute failed: unknown result';\n};\nMapDClient.prototype.sql_execute_df = function (session, query, device_type, device_id, first_n, callback) {\n  this.send_sql_execute_df(session, query, device_type, device_id, first_n, callback);\n  if (!callback) {\n    return this.recv_sql_execute_df();\n  }\n};\n\nMapDClient.prototype.send_sql_execute_df = function (session, query, device_type, device_id, first_n, callback) {\n  this.output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_sql_execute_df_args();\n  args.session = session;\n  args.query = query;\n  args.device_type = device_type;\n  args.device_id = device_id;\n  args.first_n = first_n;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_sql_execute_df();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_sql_execute_df = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_sql_execute_df_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute_df failed: unknown result';\n};\nMapDClient.prototype.sql_execute_gdf = function (session, query, device_id, first_n, callback) {\n  this.send_sql_execute_gdf(session, query, device_id, first_n, callback);\n  if (!callback) {\n    return this.recv_sql_execute_gdf();\n  }\n};\n\nMapDClient.prototype.send_sql_execute_gdf = function (session, query, device_id, first_n, callback) {\n  this.output.writeMessageBegin('sql_execute_gdf', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_sql_execute_gdf_args();\n  args.session = session;\n  args.query = query;\n  args.device_id = device_id;\n  args.first_n = first_n;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_sql_execute_gdf();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_sql_execute_gdf = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_sql_execute_gdf_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute_gdf failed: unknown result';\n};\nMapDClient.prototype.deallocate_df = function (session, df, device_type, device_id, callback) {\n  this.send_deallocate_df(session, df, device_type, device_id, callback);\n  if (!callback) {\n    this.recv_deallocate_df();\n  }\n};\n\nMapDClient.prototype.send_deallocate_df = function (session, df, device_type, device_id, callback) {\n  this.output.writeMessageBegin('deallocate_df', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_deallocate_df_args();\n  args.session = session;\n  args.df = df;\n  args.device_type = device_type;\n  args.device_id = device_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_deallocate_df();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_deallocate_df = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_deallocate_df_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.interrupt = function (session, callback) {\n  this.send_interrupt(session, callback);\n  if (!callback) {\n    this.recv_interrupt();\n  }\n};\n\nMapDClient.prototype.send_interrupt = function (session, callback) {\n  this.output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_interrupt_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_interrupt();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_interrupt = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_interrupt_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.sql_validate = function (session, query, callback) {\n  this.send_sql_validate(session, query, callback);\n  if (!callback) {\n    return this.recv_sql_validate();\n  }\n};\n\nMapDClient.prototype.send_sql_validate = function (session, query, callback) {\n  this.output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_sql_validate_args();\n  args.session = session;\n  args.query = query;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_sql_validate();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_sql_validate = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_sql_validate_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_validate failed: unknown result';\n};\nMapDClient.prototype.get_completion_hints = function (session, sql, cursor, callback) {\n  this.send_get_completion_hints(session, sql, cursor, callback);\n  if (!callback) {\n    return this.recv_get_completion_hints();\n  }\n};\n\nMapDClient.prototype.send_get_completion_hints = function (session, sql, cursor, callback) {\n  this.output.writeMessageBegin('get_completion_hints', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_completion_hints_args();\n  args.session = session;\n  args.sql = sql;\n  args.cursor = cursor;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_completion_hints();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_completion_hints = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_completion_hints_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_completion_hints failed: unknown result';\n};\nMapDClient.prototype.set_execution_mode = function (session, mode, callback) {\n  this.send_set_execution_mode(session, mode, callback);\n  if (!callback) {\n    this.recv_set_execution_mode();\n  }\n};\n\nMapDClient.prototype.send_set_execution_mode = function (session, mode, callback) {\n  this.output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_set_execution_mode_args();\n  args.session = session;\n  args.mode = mode;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_execution_mode();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_set_execution_mode = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_set_execution_mode_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\n  this.send_render_vega(session, widget_id, vega_json, compression_level, nonce, callback);\n  if (!callback) {\n    return this.recv_render_vega();\n  }\n};\n\nMapDClient.prototype.send_render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\n  this.output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_render_vega_args();\n  args.session = session;\n  args.widget_id = widget_id;\n  args.vega_json = vega_json;\n  args.compression_level = compression_level;\n  args.nonce = nonce;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_render_vega();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_render_vega = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_render_vega_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'render_vega failed: unknown result';\n};\nMapDClient.prototype.get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\n  this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback);\n  if (!callback) {\n    return this.recv_get_result_row_for_pixel();\n  }\n};\n\nMapDClient.prototype.send_get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\n  this.output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_result_row_for_pixel_args();\n  args.session = session;\n  args.widget_id = widget_id;\n  args.pixel = pixel;\n  args.table_col_names = table_col_names;\n  args.column_format = column_format;\n  args.pixelRadius = pixelRadius;\n  args.nonce = nonce;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_result_row_for_pixel();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_result_row_for_pixel = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_result_row_for_pixel_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_result_row_for_pixel failed: unknown result';\n};\nMapDClient.prototype.get_frontend_view = function (session, view_name, callback) {\n  this.send_get_frontend_view(session, view_name, callback);\n  if (!callback) {\n    return this.recv_get_frontend_view();\n  }\n};\n\nMapDClient.prototype.send_get_frontend_view = function (session, view_name, callback) {\n  this.output.writeMessageBegin('get_frontend_view', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_frontend_view_args();\n  args.session = session;\n  args.view_name = view_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_frontend_view();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_frontend_view = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_frontend_view_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_frontend_view failed: unknown result';\n};\nMapDClient.prototype.get_frontend_views = function (session, callback) {\n  this.send_get_frontend_views(session, callback);\n  if (!callback) {\n    return this.recv_get_frontend_views();\n  }\n};\n\nMapDClient.prototype.send_get_frontend_views = function (session, callback) {\n  this.output.writeMessageBegin('get_frontend_views', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_frontend_views_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_frontend_views();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_frontend_views = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_frontend_views_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_frontend_views failed: unknown result';\n};\nMapDClient.prototype.create_frontend_view = function (session, view_name, view_state, image_hash, view_metadata, callback) {\n  this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata, callback);\n  if (!callback) {\n    this.recv_create_frontend_view();\n  }\n};\n\nMapDClient.prototype.send_create_frontend_view = function (session, view_name, view_state, image_hash, view_metadata, callback) {\n  this.output.writeMessageBegin('create_frontend_view', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_create_frontend_view_args();\n  args.session = session;\n  args.view_name = view_name;\n  args.view_state = view_state;\n  args.image_hash = image_hash;\n  args.view_metadata = view_metadata;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_create_frontend_view();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_create_frontend_view = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_create_frontend_view_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.delete_frontend_view = function (session, view_name, callback) {\n  this.send_delete_frontend_view(session, view_name, callback);\n  if (!callback) {\n    this.recv_delete_frontend_view();\n  }\n};\n\nMapDClient.prototype.send_delete_frontend_view = function (session, view_name, callback) {\n  this.output.writeMessageBegin('delete_frontend_view', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_delete_frontend_view_args();\n  args.session = session;\n  args.view_name = view_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_delete_frontend_view();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_delete_frontend_view = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_delete_frontend_view_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.get_dashboard = function (session, dashboard_id, callback) {\n  this.send_get_dashboard(session, dashboard_id, callback);\n  if (!callback) {\n    return this.recv_get_dashboard();\n  }\n};\n\nMapDClient.prototype.send_get_dashboard = function (session, dashboard_id, callback) {\n  this.output.writeMessageBegin('get_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_dashboard failed: unknown result';\n};\nMapDClient.prototype.get_dashboards = function (session, callback) {\n  this.send_get_dashboards(session, callback);\n  if (!callback) {\n    return this.recv_get_dashboards();\n  }\n};\n\nMapDClient.prototype.send_get_dashboards = function (session, callback) {\n  this.output.writeMessageBegin('get_dashboards', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_dashboards_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_dashboards();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_dashboards = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_dashboards_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_dashboards failed: unknown result';\n};\nMapDClient.prototype.create_dashboard = function (session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback);\n  if (!callback) {\n    return this.recv_create_dashboard();\n  }\n};\n\nMapDClient.prototype.send_create_dashboard = function (session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.output.writeMessageBegin('create_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_create_dashboard_args();\n  args.session = session;\n  args.dashboard_name = dashboard_name;\n  args.dashboard_state = dashboard_state;\n  args.image_hash = image_hash;\n  args.dashboard_metadata = dashboard_metadata;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_create_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_create_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_create_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'create_dashboard failed: unknown result';\n};\nMapDClient.prototype.replace_dashboard = function (session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback);\n  if (!callback) {\n    this.recv_replace_dashboard();\n  }\n};\n\nMapDClient.prototype.send_replace_dashboard = function (session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.output.writeMessageBegin('replace_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_replace_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.dashboard_name = dashboard_name;\n  args.dashboard_owner = dashboard_owner;\n  args.dashboard_state = dashboard_state;\n  args.image_hash = image_hash;\n  args.dashboard_metadata = dashboard_metadata;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_replace_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_replace_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_replace_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.delete_dashboard = function (session, dashboard_id, callback) {\n  this.send_delete_dashboard(session, dashboard_id, callback);\n  if (!callback) {\n    this.recv_delete_dashboard();\n  }\n};\n\nMapDClient.prototype.send_delete_dashboard = function (session, dashboard_id, callback) {\n  this.output.writeMessageBegin('delete_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_delete_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_delete_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_delete_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_delete_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.share_dashboard = function (session, dashboard_id, groups, objects, permissions, callback) {\n  this.send_share_dashboard(session, dashboard_id, groups, objects, permissions, callback);\n  if (!callback) {\n    this.recv_share_dashboard();\n  }\n};\n\nMapDClient.prototype.send_share_dashboard = function (session, dashboard_id, groups, objects, permissions, callback) {\n  this.output.writeMessageBegin('share_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_share_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.groups = groups;\n  args.objects = objects;\n  args.permissions = permissions;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_share_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_share_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_share_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.unshare_dashboard = function (session, dashboard_id, groups, objects, permissions, callback) {\n  this.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions, callback);\n  if (!callback) {\n    this.recv_unshare_dashboard();\n  }\n};\n\nMapDClient.prototype.send_unshare_dashboard = function (session, dashboard_id, groups, objects, permissions, callback) {\n  this.output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_unshare_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.groups = groups;\n  args.objects = objects;\n  args.permissions = permissions;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_unshare_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_unshare_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_unshare_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.get_link_view = function (session, link, callback) {\n  this.send_get_link_view(session, link, callback);\n  if (!callback) {\n    return this.recv_get_link_view();\n  }\n};\n\nMapDClient.prototype.send_get_link_view = function (session, link, callback) {\n  this.output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_link_view_args();\n  args.session = session;\n  args.link = link;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_link_view();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_link_view = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_link_view_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_link_view failed: unknown result';\n};\nMapDClient.prototype.create_link = function (session, view_state, view_metadata, callback) {\n  this.send_create_link(session, view_state, view_metadata, callback);\n  if (!callback) {\n    return this.recv_create_link();\n  }\n};\n\nMapDClient.prototype.send_create_link = function (session, view_state, view_metadata, callback) {\n  this.output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_create_link_args();\n  args.session = session;\n  args.view_state = view_state;\n  args.view_metadata = view_metadata;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_create_link();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_create_link = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_create_link_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'create_link failed: unknown result';\n};\nMapDClient.prototype.load_table_binary = function (session, table_name, rows, callback) {\n  this.send_load_table_binary(session, table_name, rows, callback);\n  if (!callback) {\n    this.recv_load_table_binary();\n  }\n};\n\nMapDClient.prototype.send_load_table_binary = function (session, table_name, rows, callback) {\n  this.output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_load_table_binary_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.rows = rows;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_load_table_binary();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_load_table_binary = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_load_table_binary_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.load_table_binary_columnar = function (session, table_name, cols, callback) {\n  this.send_load_table_binary_columnar(session, table_name, cols, callback);\n  if (!callback) {\n    this.recv_load_table_binary_columnar();\n  }\n};\n\nMapDClient.prototype.send_load_table_binary_columnar = function (session, table_name, cols, callback) {\n  this.output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_load_table_binary_columnar_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.cols = cols;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_load_table_binary_columnar();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_load_table_binary_columnar = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_load_table_binary_columnar_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.load_table_binary_arrow = function (session, table_name, arrow_stream, callback) {\n  this.send_load_table_binary_arrow(session, table_name, arrow_stream, callback);\n  if (!callback) {\n    this.recv_load_table_binary_arrow();\n  }\n};\n\nMapDClient.prototype.send_load_table_binary_arrow = function (session, table_name, arrow_stream, callback) {\n  this.output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_load_table_binary_arrow_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.arrow_stream = arrow_stream;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_load_table_binary_arrow();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_load_table_binary_arrow = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_load_table_binary_arrow_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.load_table = function (session, table_name, rows, callback) {\n  this.send_load_table(session, table_name, rows, callback);\n  if (!callback) {\n    this.recv_load_table();\n  }\n};\n\nMapDClient.prototype.send_load_table = function (session, table_name, rows, callback) {\n  this.output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_load_table_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.rows = rows;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_load_table();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_load_table = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_load_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.detect_column_types = function (session, file_name, copy_params, callback) {\n  this.send_detect_column_types(session, file_name, copy_params, callback);\n  if (!callback) {\n    return this.recv_detect_column_types();\n  }\n};\n\nMapDClient.prototype.send_detect_column_types = function (session, file_name, copy_params, callback) {\n  this.output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_detect_column_types_args();\n  args.session = session;\n  args.file_name = file_name;\n  args.copy_params = copy_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_detect_column_types();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_detect_column_types = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_detect_column_types_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'detect_column_types failed: unknown result';\n};\nMapDClient.prototype.create_table = function (session, table_name, row_desc, table_type, callback) {\n  this.send_create_table(session, table_name, row_desc, table_type, callback);\n  if (!callback) {\n    this.recv_create_table();\n  }\n};\n\nMapDClient.prototype.send_create_table = function (session, table_name, row_desc, table_type, callback) {\n  this.output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_create_table_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.row_desc = row_desc;\n  args.table_type = table_type;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_create_table();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_create_table = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_create_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.import_table = function (session, table_name, file_name, copy_params, callback) {\n  this.send_import_table(session, table_name, file_name, copy_params, callback);\n  if (!callback) {\n    this.recv_import_table();\n  }\n};\n\nMapDClient.prototype.send_import_table = function (session, table_name, file_name, copy_params, callback) {\n  this.output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_import_table_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.file_name = file_name;\n  args.copy_params = copy_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_import_table();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_import_table = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_import_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.import_geo_table = function (session, table_name, file_name, copy_params, row_desc, callback) {\n  this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, callback);\n  if (!callback) {\n    this.recv_import_geo_table();\n  }\n};\n\nMapDClient.prototype.send_import_geo_table = function (session, table_name, file_name, copy_params, row_desc, callback) {\n  this.output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_import_geo_table_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.file_name = file_name;\n  args.copy_params = copy_params;\n  args.row_desc = row_desc;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_import_geo_table();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_import_geo_table = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_import_geo_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.import_table_status = function (session, import_id, callback) {\n  this.send_import_table_status(session, import_id, callback);\n  if (!callback) {\n    return this.recv_import_table_status();\n  }\n};\n\nMapDClient.prototype.send_import_table_status = function (session, import_id, callback) {\n  this.output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_import_table_status_args();\n  args.session = session;\n  args.import_id = import_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_import_table_status();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_import_table_status = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_import_table_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'import_table_status failed: unknown result';\n};\nMapDClient.prototype.start_query = function (session, query_ra, just_explain, callback) {\n  this.send_start_query(session, query_ra, just_explain, callback);\n  if (!callback) {\n    return this.recv_start_query();\n  }\n};\n\nMapDClient.prototype.send_start_query = function (session, query_ra, just_explain, callback) {\n  this.output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_start_query_args();\n  args.session = session;\n  args.query_ra = query_ra;\n  args.just_explain = just_explain;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_start_query();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_start_query = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_start_query_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'start_query failed: unknown result';\n};\nMapDClient.prototype.execute_first_step = function (pending_query, callback) {\n  this.send_execute_first_step(pending_query, callback);\n  if (!callback) {\n    return this.recv_execute_first_step();\n  }\n};\n\nMapDClient.prototype.send_execute_first_step = function (pending_query, callback) {\n  this.output.writeMessageBegin('execute_first_step', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_execute_first_step_args();\n  args.pending_query = pending_query;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_execute_first_step();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_execute_first_step = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_execute_first_step_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'execute_first_step failed: unknown result';\n};\nMapDClient.prototype.broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, callback) {\n  this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, callback);\n  if (!callback) {\n    this.recv_broadcast_serialized_rows();\n  }\n};\n\nMapDClient.prototype.send_broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, callback) {\n  this.output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_broadcast_serialized_rows_args();\n  args.serialized_rows = serialized_rows;\n  args.row_desc = row_desc;\n  args.query_id = query_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_broadcast_serialized_rows();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_broadcast_serialized_rows = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_broadcast_serialized_rows_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.start_render_query = function (session, widget_id, node_idx, vega_json, callback) {\n  this.send_start_render_query(session, widget_id, node_idx, vega_json, callback);\n  if (!callback) {\n    return this.recv_start_render_query();\n  }\n};\n\nMapDClient.prototype.send_start_render_query = function (session, widget_id, node_idx, vega_json, callback) {\n  this.output.writeMessageBegin('start_render_query', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_start_render_query_args();\n  args.session = session;\n  args.widget_id = widget_id;\n  args.node_idx = node_idx;\n  args.vega_json = vega_json;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_start_render_query();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_start_render_query = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_start_render_query_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'start_render_query failed: unknown result';\n};\nMapDClient.prototype.execute_next_render_step = function (pending_render, merged_data, callback) {\n  this.send_execute_next_render_step(pending_render, merged_data, callback);\n  if (!callback) {\n    return this.recv_execute_next_render_step();\n  }\n};\n\nMapDClient.prototype.send_execute_next_render_step = function (pending_render, merged_data, callback) {\n  this.output.writeMessageBegin('execute_next_render_step', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_execute_next_render_step_args();\n  args.pending_render = pending_render;\n  args.merged_data = merged_data;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_execute_next_render_step();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_execute_next_render_step = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_execute_next_render_step_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'execute_next_render_step failed: unknown result';\n};\nMapDClient.prototype.insert_data = function (session, insert_data, callback) {\n  this.send_insert_data(session, insert_data, callback);\n  if (!callback) {\n    this.recv_insert_data();\n  }\n};\n\nMapDClient.prototype.send_insert_data = function (session, insert_data, callback) {\n  this.output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_insert_data_args();\n  args.session = session;\n  args.insert_data = insert_data;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_insert_data();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_insert_data = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_insert_data_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.checkpoint = function (session, db_id, table_id, callback) {\n  this.send_checkpoint(session, db_id, table_id, callback);\n  if (!callback) {\n    this.recv_checkpoint();\n  }\n};\n\nMapDClient.prototype.send_checkpoint = function (session, db_id, table_id, callback) {\n  this.output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_checkpoint_args();\n  args.session = session;\n  args.db_id = db_id;\n  args.table_id = table_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_checkpoint();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_checkpoint = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_checkpoint_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nMapDClient.prototype.get_table_descriptor = function (session, table_name, callback) {\n  this.send_get_table_descriptor(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_table_descriptor();\n  }\n};\n\nMapDClient.prototype.send_get_table_descriptor = function (session, table_name, callback) {\n  this.output.writeMessageBegin('get_table_descriptor', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_table_descriptor_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_table_descriptor();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_table_descriptor = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_table_descriptor_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_descriptor failed: unknown result';\n};\nMapDClient.prototype.get_row_descriptor = function (session, table_name, callback) {\n  this.send_get_row_descriptor(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_row_descriptor();\n  }\n};\n\nMapDClient.prototype.send_get_row_descriptor = function (session, table_name, callback) {\n  this.output.writeMessageBegin('get_row_descriptor', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_row_descriptor_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_row_descriptor();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_row_descriptor = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_row_descriptor_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_row_descriptor failed: unknown result';\n};\nMapDClient.prototype.get_roles = function (session, callback) {\n  this.send_get_roles(session, callback);\n  if (!callback) {\n    return this.recv_get_roles();\n  }\n};\n\nMapDClient.prototype.send_get_roles = function (session, callback) {\n  this.output.writeMessageBegin('get_roles', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_roles_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_roles();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_roles = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_roles_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_roles failed: unknown result';\n};\nMapDClient.prototype.get_db_objects_for_grantee = function (session, roleName, callback) {\n  this.send_get_db_objects_for_grantee(session, roleName, callback);\n  if (!callback) {\n    return this.recv_get_db_objects_for_grantee();\n  }\n};\n\nMapDClient.prototype.send_get_db_objects_for_grantee = function (session, roleName, callback) {\n  this.output.writeMessageBegin('get_db_objects_for_grantee', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_db_objects_for_grantee_args();\n  args.session = session;\n  args.roleName = roleName;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_db_objects_for_grantee();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_db_objects_for_grantee = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_db_objects_for_grantee_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_db_objects_for_grantee failed: unknown result';\n};\nMapDClient.prototype.get_db_object_privs = function (session, objectName, type, callback) {\n  this.send_get_db_object_privs(session, objectName, type, callback);\n  if (!callback) {\n    return this.recv_get_db_object_privs();\n  }\n};\n\nMapDClient.prototype.send_get_db_object_privs = function (session, objectName, type, callback) {\n  this.output.writeMessageBegin('get_db_object_privs', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_db_object_privs_args();\n  args.session = session;\n  args.objectName = objectName;\n  args.type = type;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_db_object_privs();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_db_object_privs = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_db_object_privs_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_db_object_privs failed: unknown result';\n};\nMapDClient.prototype.get_all_roles_for_user = function (session, userName, callback) {\n  this.send_get_all_roles_for_user(session, userName, callback);\n  if (!callback) {\n    return this.recv_get_all_roles_for_user();\n  }\n};\n\nMapDClient.prototype.send_get_all_roles_for_user = function (session, userName, callback) {\n  this.output.writeMessageBegin('get_all_roles_for_user', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_all_roles_for_user_args();\n  args.session = session;\n  args.userName = userName;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_all_roles_for_user();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_all_roles_for_user = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_all_roles_for_user_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_all_roles_for_user failed: unknown result';\n};\nMapDClient.prototype.set_license_key = function (session, key, nonce, callback) {\n  this.send_set_license_key(session, key, nonce, callback);\n  if (!callback) {\n    return this.recv_set_license_key();\n  }\n};\n\nMapDClient.prototype.send_set_license_key = function (session, key, nonce, callback) {\n  this.output.writeMessageBegin('set_license_key', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_set_license_key_args();\n  args.session = session;\n  args.key = key;\n  args.nonce = nonce;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_license_key();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_set_license_key = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_set_license_key_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'set_license_key failed: unknown result';\n};\nMapDClient.prototype.get_license_claims = function (session, nonce, callback) {\n  this.send_get_license_claims(session, nonce, callback);\n  if (!callback) {\n    return this.recv_get_license_claims();\n  }\n};\n\nMapDClient.prototype.send_get_license_claims = function (session, nonce, callback) {\n  this.output.writeMessageBegin('get_license_claims', Thrift.MessageType.CALL, this.seqid);\n  var args = new MapD_get_license_claims_args();\n  args.session = session;\n  args.nonce = nonce;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_license_claims();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nMapDClient.prototype.recv_get_license_claims = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new MapD_get_license_claims_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_license_claims failed: unknown result';\n};"

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(9))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.10.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\n\nwindow.TCompletionHintType = {\n  'COLUMN': 0,\n  'TABLE': 1,\n  'VIEW': 2,\n  'SCHEMA': 3,\n  'CATALOG': 4,\n  'REPOSITORY': 5,\n  'FUNCTION': 6,\n  'KEYWORD': 7\n};\nwindow.TCompletionHint = function (args) {\n  this.type = null;\n  this.hints = null;\n  this.replaced = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.hints !== undefined && args.hints !== null) {\n      this.hints = Thrift.copyList(args.hints, [null]);\n    }\n    if (args.replaced !== undefined && args.replaced !== null) {\n      this.replaced = args.replaced;\n    }\n  }\n};\nTCompletionHint.prototype = {};\nTCompletionHint.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size0 = 0;\n          var _rtmp34;\n          this.hints = [];\n          var _etype3 = 0;\n          _rtmp34 = input.readListBegin();\n          _etype3 = _rtmp34.etype;\n          _size0 = _rtmp34.size;\n          for (var _i5 = 0; _i5 < _size0; ++_i5) {\n            var elem6 = null;\n            elem6 = input.readString().value;\n            this.hints.push(elem6);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.replaced = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCompletionHint.prototype.write = function (output) {\n  output.writeStructBegin('TCompletionHint');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.hints !== null && this.hints !== undefined) {\n    output.writeFieldBegin('hints', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRING, this.hints.length);\n    for (var iter7 in this.hints) {\n      if (this.hints.hasOwnProperty(iter7)) {\n        iter7 = this.hints[iter7];\n        output.writeString(iter7);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.replaced !== null && this.replaced !== undefined) {\n    output.writeFieldBegin('replaced', Thrift.Type.STRING, 3);\n    output.writeString(this.replaced);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _helpers = __webpack_require__(12);

	var helpers = _interopRequireWildcard(_helpers);

	var _mapdClientV = __webpack_require__(13);

	var _mapdClientV2 = _interopRequireDefault(_mapdClientV);

	var _processQueryResults = __webpack_require__(120);

	var _processQueryResults2 = _interopRequireDefault(_processQueryResults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _ref = isNodeRuntime() && __webpack_require__(119) || window,
	    TDatumType = _ref.TDatumType,
	    TEncodingType = _ref.TEncodingType,
	    TPixel = _ref.TPixel; // eslint-disable-line global-require


	var MapDThrift = isNodeRuntime() && __webpack_require__(15); // eslint-disable-line global-require
	var Thrift = isNodeRuntime() && __webpack_require__(16) || window.Thrift; // eslint-disable-line global-require
	var thriftWrapper = Thrift;
	var parseUrl = isNodeRuntime() && __webpack_require__(61).parse; // eslint-disable-line global-require
	if (isNodeRuntime()) {
	  // Because browser Thrift and Node Thrift are exposed slightly differently.
	  Thrift = Thrift.Thrift;
	  Thrift.Transport = thriftWrapper.TBufferedTransport;
	  Thrift.Protocol = thriftWrapper.TJSONProtocol;
	}


	var COMPRESSION_LEVEL_DEFAULT = 3;

	function arrayify(maybeArray) {
	  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];
	}

	function isNodeRuntime() {
	  return typeof window === "undefined";
	}

	var MapdCon = function () {
	  function MapdCon() {
	    var _this = this;

	    _classCallCheck(this, MapdCon);

	    this.updateQueryTimes = function (conId, queryId, estimatedQueryTime, execution_time_ms) {
	      _this.queryTimes[queryId] = execution_time_ms;
	    };

	    this.getFrontendViews = function (callback) {
	      if (_this._sessionId) {
	        _this._client[0].get_frontend_views(_this._sessionId[0], callback);
	      } else {
	        callback(new Error("No Session ID"));
	      }
	    };

	    this.getFrontendViewsAsync = function () {
	      return new Promise(function (resolve, reject) {
	        _this.getFrontendViews(function (error, views) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(views);
	          }
	        });
	      });
	    };

	    this.getFrontendView = function (viewName, callback) {
	      if (_this._sessionId && viewName) {
	        _this._client[0].get_frontend_view(_this._sessionId[0], viewName, callback);
	      } else {
	        callback(new Error("No Session ID"));
	      }
	    };

	    this.getFrontendViewAsync = function (viewName) {
	      return new Promise(function (resolve, reject) {
	        _this.getFrontendView(viewName, function (err, view) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(view);
	          }
	        });
	      });
	    };

	    this.getStatus = function (callback) {
	      _this._client[0].get_status(_this._sessionId[0], callback);
	    };

	    this.getServerStatusAsync = function () {
	      console.warn("getServerStatusAsync is deprecated, please use getStatusAsync");
	      return new Promise(function (resolve, reject) {
	        _this.getStatus(function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result[0]);
	          }
	        });
	      });
	    };

	    this.getStatusAsync = function () {
	      return new Promise(function (resolve, reject) {
	        _this.getStatus(function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    };

	    this.getHardwareInfo = function (callback) {
	      _this._client[0].get_hardware_info(_this._sessionId[0], callback);
	    };

	    this.getHardwareInfoAsync = function () {
	      return new Promise(function (resolve, reject) {
	        _this.getHardwareInfo(function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    };

	    this.deleteFrontendViewAsync = function (viewName) {
	      return new Promise(function (resolve, reject) {
	        _this.deleteFrontendView(viewName, function (err) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(viewName);
	          }
	        });
	      });
	    };

	    this.getLinkView = function (link, callback) {
	      _this._client[0].get_link_view(_this._sessionId[0], link, callback);
	    };

	    this.getLinkViewAsync = function (link) {
	      return new Promise(function (resolve, reject) {
	        _this.getLinkView(link, function (err, theLink) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(theLink);
	          }
	        });
	      });
	    };

	    this.queryAsync = this.query;

	    this.createTableAsync = function (tableName, rowDescObj, tableType) {
	      return new Promise(function (resolve, reject) {
	        _this.createTable(tableName, rowDescObj, tableType, function (err) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve();
	          }
	        });
	      });
	    };

	    this.importTableAsync = this.importTableAsyncWrapper(false);
	    this.importTableGeoAsync = this.importTableAsyncWrapper(true);

	    this._host = null;
	    this._user = null;
	    this._password = null;
	    this._port = null;
	    this._dbName = null;
	    this._client = null;
	    this._sessionId = null;
	    this._protocol = null;
	    this._datumEnum = {};
	    this._logging = false;
	    this._platform = "mapd";
	    this._nonce = 0;
	    this._balanceStrategy = "adaptive";
	    this._numConnections = 0;
	    this._lastRenderCon = 0;
	    this.queryTimes = {};
	    this.serverQueueTimes = null;
	    this.serverPingTimes = null;
	    this.pingCount = null;
	    this.DEFAULT_QUERY_TIME = 50;
	    this.NUM_PINGS_PER_SERVER = 4;
	    this.importerRowDesc = null;

	    // invoke initialization methods
	    this.invertDatumTypes();

	    this.processResults = function () {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var result = arguments[1];
	      var callback = arguments[2];

	      var processor = (0, _processQueryResults2.default)(_this._logging, _this.updateQueryTimes);
	      var processResultsObject = processor(options, _this._datumEnum, result, callback);
	      return processResultsObject;
	    };

	    // return this to allow chaining off of instantiation
	    return this;
	  }

	  /**
	   * Create a connection to the server, generating a client and session id.
	   * @param {Function} callback A callback that takes `(err, success)` as its signature.  Returns con singleton on success.
	   * @return {MapdCon} Object
	   *
	   * @example <caption>Connect to a MapD server:</caption>
	   * var con = new MapdCon()
	   *   .host('localhost')
	   *   .port('8080')
	   *   .dbName('myDatabase')
	   *   .user('foo')
	   *   .password('bar')
	   *   .connect((err, con) => console.log(con.sessionId()));
	   *
	   *   // ["om9E9Ujgbhl6wIzWgLENncjWsaXRDYLy"]
	   */


	  _createClass(MapdCon, [{
	    key: "connect",
	    value: function connect(callback) {
	      var _this2 = this;

	      if (this._sessionId) {
	        this.disconnect();
	      }

	      // TODO: should be its own function
	      var allAreArrays = Array.isArray(this._host) && Array.isArray(this._port) && Array.isArray(this._user) && Array.isArray(this._password) && Array.isArray(this._dbName);
	      if (!allAreArrays) {
	        return callback("All connection parameters must be arrays.");
	      }

	      this._client = [];
	      this._sessionId = [];

	      if (!this._user[0]) {
	        return callback("Please enter a username.");
	      } else if (!this._password[0]) {
	        return callback("Please enter a password.");
	      } else if (!this._dbName[0]) {
	        return callback("Please enter a database.");
	      } else if (!this._host[0]) {
	        return callback("Please enter a host name.");
	      } else if (!this._port[0]) {
	        return callback("Please enter a port.");
	      }

	      // now check to see if length of all arrays are the same and > 0
	      var hostLength = this._host.length;
	      if (hostLength < 1) {
	        return callback("Must have at least one server to connect to.");
	      }
	      if (hostLength !== this._port.length || hostLength !== this._user.length || hostLength !== this._password.length || hostLength !== this._dbName.length) {
	        return callback("Array connection parameters must be of equal length.");
	      }

	      if (!this._protocol) {
	        this._protocol = this._host.map(function () {
	          return window.location.protocol.replace(":", "");
	        });
	      }

	      var transportUrls = this.getEndpoints();

	      var _loop = function _loop(h) {
	        var client = null;

	        if (isNodeRuntime()) {
	          var _parseUrl = parseUrl(transportUrls[h]),
	              protocol = _parseUrl.protocol,
	              hostname = _parseUrl.hostname,
	              port = _parseUrl.port;

	          var connection = thriftWrapper.createHttpConnection(hostname, port, {
	            transport: thriftWrapper.TBufferedTransport,
	            protocol: thriftWrapper.TJSONProtocol,
	            path: "/",
	            headers: { Connection: "close" },
	            https: protocol === "https:"
	          });
	          connection.on("error", console.error); // eslint-disable-line no-console
	          client = thriftWrapper.createClient(MapDThrift, connection);
	          resetThriftClientOnArgumentErrorForMethods(_this2, client, ["connect", "createFrontendViewAsync", "createLinkAsync", "createTableAsync", "dbName", "deleteFrontendViewAsync", "detectColumnTypesAsync", "disconnect", "getCompletionHintsAsync", "getFields", "getFrontendViewAsync", "getFrontendViewsAsync", "getLinkViewAsync", "getResultRowForPixel", "getServerStatusAsync", "getStatusAsync", "getTablesAsync", "getTablesWithMetaAsync", "host", "importTableAsync", "importTableGeoAsync", "logging", "password", "port", "protocol", "query", "renderVega", "sessionId", "user", "validateQuery"]);
	        } else {
	          var thriftTransport = new Thrift.Transport(transportUrls[h]);
	          var thriftProtocol = new Thrift.Protocol(thriftTransport);
	          client = new _mapdClientV2.default(thriftProtocol);
	        }

	        client.connect(_this2._user[h], _this2._password[h], _this2._dbName[h], function (error, sessionId) {
	          if (error) {
	            callback(error);
	            return;
	          }
	          _this2._client.push(client);
	          _this2._sessionId.push(sessionId);
	          _this2._numConnections = _this2._client.length;
	          callback(null, _this2);
	        });
	      };

	      for (var h = 0; h < hostLength; h++) {
	        _loop(h);
	      }

	      return this;
	    }
	  }, {
	    key: "convertFromThriftTypes",
	    value: function convertFromThriftTypes(fields) {
	      var fieldsArray = [];
	      // silly to change this from map to array
	      // - then later it turns back to map
	      for (var key in fields) {
	        if (fields.hasOwnProperty(key)) {
	          fieldsArray.push({
	            name: key,
	            type: this._datumEnum[fields[key].col_type.type],
	            is_array: fields[key].col_type.is_array,
	            is_dict: fields[key].col_type.encoding === TEncodingType.DICT // eslint-disable-line no-undef
	          });
	        }
	      }
	      return fieldsArray;
	    }

	    /**
	     * Disconnect from the server then clears the client and session values.
	     * @return {MapdCon} Object
	     * @param {Function} callback A callback that takes `(err, success)` as its signature.  Returns con singleton on success.
	     *
	     * @example <caption>Disconnect from the server:</caption>
	     *
	     * con.sessionId() // ["om9E9Ujgbhl6wIzWgLENncjWsaXRDYLy"]
	     * con.disconnect((err, con) => console.log(err, con))
	     * con.sessionId() === null;
	     */

	  }, {
	    key: "disconnect",
	    value: function disconnect(callback) {
	      var _this3 = this;

	      if (this._sessionId !== null) {
	        for (var c = 0; c < this._client.length; c++) {
	          this._client[c].disconnect(this._sessionId[c], function (error) {
	            // Success will return NULL

	            if (error) {
	              return callback(error, _this3);
	            }
	            _this3._sessionId = null;
	            _this3._client = null;
	            _this3._numConnections = 0;
	            _this3.serverPingTimes = null;
	            return callback(null, _this3);
	          });
	        }
	      }
	      return this;
	    }

	    /**
	     * Get the recent dashboards as a list of <code>TFrontendView</code> objects.
	     * These objects contain a value for the <code>view_name</code> property,
	     * but not for the <code>view_state</code> property.
	     * @return {Promise<TFrontendView[]>} An array which has all saved dashboards.
	     *
	     * @example <caption>Get the list of dashboards from the server:</caption>
	     *
	     * con.getFrontendViewsAsync().then((results) => console.log(results))
	     * // [TFrontendView, TFrontendView]
	     */


	    /**
	     * Get a dashboard object containing a value for the <code>view_state</code> property.
	     * This object contains a value for the <code>view_state</code> property,
	     * but not for the <code>view_name</code> property.
	     * @param {String} viewName the name of the dashboard
	     * @return {Promise.<Object>} An object that contains all data and metadata related to the dashboard
	     *
	     * @example <caption>Get a specific dashboard from the server:</caption>
	     *
	     * con.getFrontendViewAsync('dashboard_name').then((result) => console.log(result))
	     * // {TFrontendView}
	     */


	    /**
	     * Get the status of the server as a <code>TServerStatus</code> object.
	     * This includes whether the server is read-only,
	     * has backend rendering enabled, and the version number.
	     * @return {Promise.<Object>}
	     *
	     * @example <caption>Get the server status:</caption>
	     *
	     * con.getServerStatusAsync().then((result) => console.log(result))
	     * // {
	     * //   "read_only": false,
	     * //   "version": "3.0.0dev-20170503-40e2de3",
	     * //   "rendering_enabled": true,
	     * //   "start_time": 1493840131
	     * // }
	     */

	    /**
	     * Get the status of the server as an array of <code>TServerStatus</code> objects.
	     * This includes whether the server is read-only,
	     * has backend rendering enabled, and the version number.
	     * @return {Promise.<Object>}
	     *
	     * @example <caption>Get the server status:</caption>
	     *
	     * con.getStatusAsync().then((result) => console.log(result))
	     * // [{
	     * //   "read_only": false,
	     * //   "version": "3.0.0dev-20170503-40e2de3",
	     * //   "rendering_enabled": true,
	     * //   "start_time": 1493840131
	     * // }]
	     */

	    /**
	     * Get some info about the hardware
	     * - Number of GPUs
	     * - Number of GPUs allocated to MapD
	     * - Start GPU
	     * - Number of SMs or SMx or CU (They simply mean streaming multi processors)
	     * - Clock frequency of each GPUs
	     * - Physical Memory of each GPU
	     * - Compute capability of each GPU
	     * @return {Promise.<Object>}
	     *
	     * @example <caption>Get harddware info:</caption>
	     *
	     * con.getHardwareInfoAsync().then((result) => console.log(result))
	     * {
	     *   "hardware_info": [{
	     *    "num_gpu_hw": 2,
	     *      "num_cpu_hw": 12,
	     *      "num_gpu_allocated": 2,
	     *      "start_gpu": 0,
	     *      "host_name": "",
	     *      "gpu_info": [{
	     *          "num_sm": 28,
	     *          "clock_frequency_kHz": 1531000,
	     *          "memory": 12781682688,
	     *          "compute_capability_major": 6,
	     *          "compute_capability_minor": 1
	     *      }, {
	     *          "num_sm": 28,
	     *          "clock_frequency_kHz": 1531000,
	     *          "memory": 12782075904,
	     *          "compute_capability_major": 6,
	     *          "compute_capability_minor": 1
	     *      }]
	     *   }]
	     * }
	     */

	  }, {
	    key: "createFrontendViewAsync",


	    /**
	     * Add a new dashboard to the server.
	     * @param {String} viewName - the name of the new dashboard
	     * @param {String} viewState - the base64-encoded state string of the new dashboard
	     * @param {String} imageHash - the numeric hash of the dashboard thumbnail
	     * @param {String} metaData - Stringified metaData related to the view
	     * @return {Promise} Returns empty if success
	     *
	     * @example <caption>Add a new dashboard to the server:</caption>
	     *
	     * con.createFrontendViewAsync('newSave', 'viewstateBase64', null, 'metaData').then(res => console.log(res))
	     */
	    value: function createFrontendViewAsync(viewName, viewState, imageHash, metaData) {
	      var _this4 = this;

	      if (!this._sessionId) {
	        return new Promise(function (resolve, reject) {
	          reject(new Error("You are not connected to a server. Try running the connect method first."));
	        });
	      }

	      return Promise.all(this._client.map(function (client, i) {
	        return new Promise(function (resolve, reject) {
	          client.create_frontend_view(_this4._sessionId[i], viewName, viewState, imageHash, metaData, function (error, data) {
	            if (error) {
	              reject(error);
	            } else {
	              resolve(data);
	            }
	          });
	        });
	      }));
	    }
	  }, {
	    key: "deleteFrontendView",
	    value: function deleteFrontendView(viewName, callback) {
	      var _this5 = this;

	      if (!this._sessionId) {
	        throw new Error("You are not connected to a server. Try running the connect method first.");
	      }
	      try {
	        this._client.forEach(function (client, i) {
	          // do we want to try each one individually so if we fail we keep going?
	          client.delete_frontend_view(_this5._sessionId[i], viewName, callback);
	        });
	      } catch (err) {
	        console.log("ERROR: Could not delete the frontend view. Check your session id.", err);
	      }
	    }

	    /**
	     * Delete a dashboard object containing a value for the <code>view_state</code> property.
	     * @param {String} viewName - the name of the dashboard
	     * @return {Promise.<String>} Name of dashboard successfully deleted
	     *
	     * @example <caption>Delete a specific dashboard from the server:</caption>
	     *
	     * con.deleteFrontendViewAsync('dashboard_name').then(res => console.log(res))
	     */

	  }, {
	    key: "createLinkAsync",


	    /**
	     * Create a short hash to make it easy to share a link to a specific dashboard.
	     * @param {String} viewState - the base64-encoded state string of the new dashboard
	     * @param {String} metaData - Stringified metaData related to the link
	     * @return {Promise.<String[]>} link - A short hash of the dashboard used for URLs
	     *
	     * @example <caption>Create a link to the current state of a dashboard:</caption>
	     *
	     * con.createLinkAsync("eyJuYW1lIjoibXlkYXNoYm9hcmQifQ==", 'metaData').then(res => console.log(res));
	     * // ["28127951"]
	     */
	    value: function createLinkAsync(viewState, metaData) {
	      var _this6 = this;

	      return Promise.all(this._client.map(function (client, i) {
	        return new Promise(function (resolve, reject) {
	          client.create_link(_this6._sessionId[i], viewState, metaData, function (error, data) {
	            if (error) {
	              reject(error);
	            } else {
	              var result = data.split(",").reduce(function (links, link) {
	                if (links.indexOf(link) === -1) {
	                  links.push(link);
	                }
	                return links;
	              }, []);
	              if (!result || result.length !== 1) {
	                reject(new Error("Different links were created on connection"));
	              } else {
	                resolve(result.join());
	              }
	            }
	          });
	        });
	      }));
	    }

	    /**
	     * Get a fully-formed dashboard object from a generated share link.
	     * This object contains the given link for the <code>view_name</code> property,
	     * @param {String} link - the short hash of the dashboard, see {@link createLink}
	     * @return {Promise.<Object>} Object of the dashboard and metadata
	     *
	     * @example <caption>Get a dashboard from a link:</caption>
	     *
	     * con.getLinkViewAsync('28127951').then(res => console.log(res))
	     * //  {
	     * //    "view_name": "28127951",
	     * //    "view_state": "eyJuYW1lIjoibXlkYXNoYm9hcmQifQ==",
	     * //    "image_hash": "",
	     * //    "update_time": "2017-04-28T21:34:01Z",
	     * //    "view_metadata": "metaData"
	     * //  }
	     */

	  }, {
	    key: "detectColumnTypes",
	    value: function detectColumnTypes(fileName, copyParams, callback) {
	      var thriftCopyParams = helpers.convertObjectToThriftCopyParams(copyParams);
	      this._client[0].detect_column_types(this._sessionId[0], fileName, thriftCopyParams, callback);
	    }

	    /**
	     * Asynchronously get the data from an importable file,
	     * such as a .csv or plaintext file with a header.
	     * @param {String} fileName - the name of the importable file
	     * @param {TCopyParams} copyParams - see {@link TCopyParams}
	     * @returns {Promise.<TDetectResult>} An object which has copy_params and row_set
	     *
	     * @example <caption>Get data from table_data.csv:</caption>
	     *
	     * var copyParams = new TCopyParams();
	     * con.detectColumnTypesAsync('table_data.csv', copyParams).then(res => console.log(res))
	     * // TDetectResult {row_set: TRowSet, copy_params: TCopyParams}
	     *
	     */

	  }, {
	    key: "detectColumnTypesAsync",
	    value: function detectColumnTypesAsync(fileName, copyParams) {
	      var _this7 = this;

	      return new Promise(function (resolve, reject) {
	        _this7.detectColumnTypes.bind(_this7, fileName, copyParams)(function (err, res) {
	          if (err) {
	            reject(err);
	          } else {
	            _this7.importerRowDesc = res.row_set.row_desc;
	            resolve(res);
	          }
	        });
	      });
	    }

	    /**
	     * Submit a query to the database and process the results.
	     * @param {String} query The query to perform
	     * @param {Object} options the options for the query
	     * @param {Function} callback that takes `(err, result) => result`
	     * @returns {Object} The result of the query
	     *
	     * @example <caption>create a query</caption>
	     *
	     * var query = "SELECT count(*) AS n FROM tweets_nov_feb WHERE country='CO'";
	     * var options = {};
	     *
	     * con.query(query, options, function(err, result) {
	     *        console.log(result)
	     *      });
	     *
	     */

	  }, {
	    key: "query",
	    value: function query(_query, options, callback) {
	      var _this8 = this;

	      var columnarResults = true;
	      var eliminateNullRows = false;
	      var queryId = null;
	      var returnTiming = false;
	      var limit = -1;
	      if (options) {
	        columnarResults = options.hasOwnProperty("columnarResults") ? options.columnarResults : columnarResults;
	        eliminateNullRows = options.hasOwnProperty("eliminateNullRows") ? options.eliminateNullRows : eliminateNullRows;
	        queryId = options.hasOwnProperty("queryId") ? options.queryId : queryId;
	        returnTiming = options.hasOwnProperty("returnTiming") ? options.returnTiming : returnTiming;
	        limit = options.hasOwnProperty("limit") ? options.limit : limit;
	      }

	      var lastQueryTime = queryId in this.queryTimes ? this.queryTimes[queryId] : this.DEFAULT_QUERY_TIME;

	      var curNonce = (this._nonce++).toString();

	      var conId = 0;

	      var processResultsOptions = {
	        returnTiming: returnTiming,
	        eliminateNullRows: eliminateNullRows,
	        query: _query,
	        queryId: queryId,
	        conId: conId,
	        estimatedQueryTime: lastQueryTime
	      };

	      try {
	        var AT_MOST_N = -1;
	        if (callback) {
	          this._client[conId].sql_execute(this._sessionId[conId], _query, columnarResults, curNonce, limit, AT_MOST_N, function (error, result) {
	            if (error) {
	              callback(error);
	            } else {
	              _this8.processResults(processResultsOptions, result, callback);
	            }
	          });
	          return curNonce;
	        } else if (!callback) {
	          var SQLExecuteResult = this._client[conId].sql_execute(this._sessionId[conId], _query, columnarResults, curNonce, limit, AT_MOST_N);
	          return this.processResults(processResultsOptions, SQLExecuteResult);
	        }
	      } catch (err) {
	        if (err.name === "NetworkError") {
	          this.removeConnection(conId);
	          if (this._numConnections === 0) {
	            err.msg = "No remaining database connections";
	            throw err;
	          }
	          this.query(_query, options, callback);
	        } else if (callback) {
	          callback(err);
	        } else {
	          throw err;
	        }
	      }
	    }

	    /** @deprecated will default to query */

	  }, {
	    key: "validateQuery",


	    /**
	     * Submit a query to validate whether the backend can create a result set based on the SQL statement.
	     * @param {String} query The query to perform
	     * @returns {Promise.<Object>} The result of whether the query is valid
	     *
	     * @example <caption>create a query</caption>
	     *
	     * var query = "SELECT count(*) AS n FROM tweets_nov_feb WHERE country='CO'";
	     *
	     * con.validateQuery(query).then(res => console.log(res))
	     *
	     * // [{
	     * //    "name": "n",
	     * //    "type": "INT",
	     * //    "is_array": false,
	     * //    "is_dict": false
	     * //  }]
	     *
	     */
	    value: function validateQuery(query) {
	      var _this9 = this;

	      return new Promise(function (resolve, reject) {
	        _this9._client[0].sql_validate(_this9._sessionId[0], query, function (error, res) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(_this9.convertFromThriftTypes(res));
	          }
	        });
	      });
	    }
	  }, {
	    key: "removeConnection",
	    value: function removeConnection(conId) {
	      if (conId < 0 || conId >= this.numConnections) {
	        var err = {
	          msg: "Remove connection id invalid"
	        };
	        throw err;
	      }
	      this._client.splice(conId, 1);
	      this._sessionId.splice(conId, 1);
	      this._numConnections--;
	    }
	  }, {
	    key: "getTables",
	    value: function getTables(callback) {
	      this._client[0].get_tables(this._sessionId[0], function (error, tables) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, tables.map(function (table) {
	            return {
	              name: table,
	              label: "obs"
	            };
	          }));
	        }
	      });
	    }

	    /**
	     * Get the names of the tables that exist on the current session's connection.
	     * @return {Promise.<Object[]>} list of table objects containing the label and table names.
	     *
	     * @example <caption>Get the list of tables from a connection:</caption>
	     *
	     *  con.getTablesAsync().then(res => console.log(res))
	     *
	     *  //  [{
	     *  //    label: 'obs', // deprecated property
	     *  //    name: 'myTableName'
	     *  //   },
	     *  //  ...]
	     */

	  }, {
	    key: "getTablesAsync",
	    value: function getTablesAsync() {
	      var _this10 = this;

	      return new Promise(function (resolve, reject) {
	        _this10.getTables.bind(_this10)(function (error, tables) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(tables);
	          }
	        });
	      });
	    }
	  }, {
	    key: "getTablesWithMeta",
	    value: function getTablesWithMeta(callback) {
	      var _this11 = this;

	      this._client[0].get_tables_meta(this._sessionId[0], function (error, tables) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, tables.map(function (table) {
	            return {
	              name: table.table_name,
	              num_cols: Number(table.num_cols.toString()),
	              col_datum_types: table.col_datum_types.map(function (type) {
	                return _this11._datumEnum[type];
	              }),
	              is_view: table.is_view,
	              is_replicated: table.is_replicated,
	              shard_count: Number(table.shard_count.toString()),
	              max_rows: isFinite(table.max_rows) ? Number(table.max_rows.toString()) : -1
	            };
	          }));
	        }
	      });
	    }

	    /**
	     * Get names and catalog metadata for tables that exist on the current session's connection.
	     * @return {Promise.<Object[]>} list of objects containing table metadata.
	     *
	     * @example <caption>Get the list of tables with metadata from a connection:</caption>
	     *
	     *  con.getTablesWithMetaAsync().then(res => console.log(res))
	     *
	     *  [
	     *   {
	     *    name: 'my_table_name',
	     *    col_datum_types: [TDatumType::BOOL, TDatumType::DOUBLE],
	     *    is_view: false,
	     *    is_replicated: false,
	     *    shard_count: 0,
	     *    max_rows: -1
	     *   },
	     *  ...]
	     */

	  }, {
	    key: "getTablesWithMetaAsync",
	    value: function getTablesWithMetaAsync() {
	      var _this12 = this;

	      return new Promise(function (resolve, reject) {
	        _this12.getTablesWithMeta.bind(_this12)(function (error, tables) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(tables);
	          }
	        });
	      });
	    }

	    /**
	     * Submits a sql string to the backend and returns a completion hints object
	     * @param {String} queryString a fragment of SQL input
	     * @param {Object} options an options object continaing the current cursor position, 1-indexed from the start of queryString
	     * @param {Function} callback a callback function with the signature `(err, result) => result`
	     * @returns {Array} An array of completion hints objects that contains the completion hints
	     *
	     * @example
	     * const queryString = "f";
	     * const cursor = 1;
	     *
	     * con.getCompletionHints(queryString, cursor, function(error, result) {
	     *        console.log(result)
	     *      });
	     *
	     *  [{
	     *    hints: ["FROM"],
	     *    replaced: "f",
	     *    type: 7
	     *   }]
	     *
	     */

	  }, {
	    key: "getCompletionHints",
	    value: function getCompletionHints(queryString, options, callback) {
	      var cursor = options.cursor;
	      this._client[0].get_completion_hints(this._sessionId[0], queryString, cursor, function (error, result) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, result);
	        }
	      });
	    }

	    /**
	     * Create an array-like object from {@link TDatumType} by
	     * flipping the string key and numerical value around.
	     *
	     * @returns {Undefined} This function does not return anything
	     */

	  }, {
	    key: "invertDatumTypes",
	    value: function invertDatumTypes() {
	      var datumType = TDatumType; // eslint-disable-line no-undef
	      for (var key in datumType) {
	        if (datumType.hasOwnProperty(key)) {
	          this._datumEnum[datumType[key]] = key;
	        }
	      }
	    }

	    /**
	     * Get a list of field objects for a given table.
	     * @param {String} tableName - name of table containing field names
	     * @param {Function} callback - (err, results)
	     * @return {Array<Object>} fields - the formmatted list of field objects
	     *
	     * @example <caption>Get the list of fields from a specific table:</caption>
	     *
	     * con.getFields('flights', (err, res) => console.log(res))
	     * // [{
	     *   name: 'fieldName',
	     *   type: 'BIGINT',
	     *   is_array: false,
	     *   is_dict: false
	     * }, ...]
	     */

	  }, {
	    key: "getFields",
	    value: function getFields(tableName, callback) {
	      var _this13 = this;

	      this._client[0].get_table_details(this._sessionId[0], tableName, function (error, fields) {
	        if (fields) {
	          var rowDict = fields.row_desc.reduce(function (accum, value) {
	            accum[value.col_name] = value;
	            return accum;
	          }, {});
	          callback(null, _this13.convertFromThriftTypes(rowDict));
	        } else {
	          callback(new Error("Table (" + tableName + ") not found" + error));
	        }
	      });
	    }
	  }, {
	    key: "createTable",
	    value: function createTable(tableName, rowDescObj, tableType, callback) {
	      if (!this._sessionId) {
	        throw new Error("You are not connected to a server. Try running the connect method first.");
	      }

	      var thriftRowDesc = helpers.mutateThriftRowDesc(rowDescObj, this.importerRowDesc);

	      for (var c = 0; c < this._numConnections; c++) {
	        this._client[c].create_table(this._sessionId[c], tableName, thriftRowDesc, tableType, function (err) {
	          if (err) {
	            callback(err);
	          } else {
	            callback();
	          }
	        });
	      }
	    }

	    /**
	     * Create a table and persist it to the backend.
	     * @param {String} tableName - desired name of the new table
	     * @param {Array<TColumnType>} rowDescObj - fields of the new table
	     * @param {Number<TTableType>} tableType - the types of tables a user can import into the db
	     * @return {Promise.<undefined>} it will either catch an error or return undefined on success
	     *
	     * @example <caption>Create a new table:</caption>
	     *
	     *  con.createTable('mynewtable', [TColumnType, TColumnType, ...], 0).then(res => console.log(res));
	     *  // undefined
	     */

	  }, {
	    key: "importTable",
	    value: function importTable(tableName, fileName, copyParams, rowDescObj, isShapeFile, callback) {
	      if (!this._sessionId) {
	        throw new Error("You are not connected to a server. Try running the connect method first.");
	      }

	      var thriftCopyParams = helpers.convertObjectToThriftCopyParams(copyParams);
	      var thriftRowDesc = helpers.mutateThriftRowDesc(rowDescObj, this.importerRowDesc);

	      var thriftCallBack = function thriftCallBack(err, res) {
	        if (err) {
	          callback(err);
	        } else {
	          callback(null, res);
	        }
	      };

	      for (var c = 0; c < this._numConnections; c++) {
	        if (isShapeFile) {
	          this._client[c].import_geo_table(this._sessionId[c], tableName, fileName, thriftCopyParams, thriftRowDesc, thriftCallBack);
	        } else {
	          this._client[c].import_table(this._sessionId[c], tableName, fileName, thriftCopyParams, thriftCallBack);
	        }
	      }
	    }
	  }, {
	    key: "importTableAsyncWrapper",
	    value: function importTableAsyncWrapper(isShapeFile) {
	      var _this14 = this;

	      return function (tableName, fileName, copyParams, headers) {
	        return new Promise(function (resolve, reject) {
	          _this14.importTable(tableName, fileName, copyParams, headers, isShapeFile, function (err, link) {
	            if (err) {
	              reject(err);
	            } else {
	              resolve(link);
	            }
	          });
	        });
	      };
	    }

	    /**
	     * Import a delimited table from a file.
	     * @param {String} tableName - desired name of the new table
	     * @param {String} fileName
	     * @param {TCopyParams} copyParams - see {@link TCopyParams}
	     * @param {TColumnType[]} headers -- a colleciton of metadata related to the table headers
	     */


	    /**
	     * Import a geo table from a file.
	     * @param {String} tableName - desired name of the new table
	     * @param {String} fileName
	     * @param {TCopyParams} copyParams - see {@link TCopyParams}
	     * @param {TColumnType[]} headers -- a colleciton of metadata related to the table headers
	     */

	  }, {
	    key: "renderVega",


	    /**
	     * Use for backend rendering. This method will fetch a PNG image
	     * that is a render of the vega json object.
	     *
	     * @param {Number} widgetid the widget id of the calling widget
	     * @param {String} vega the vega json
	     * @param {Object} options the options for the render query
	     * @param {Number} options.compressionLevel the png compression level.
	     *                  range 1 (low compression, faster) to 10 (high compression, slower).
	     *                  Default 3.
	     * @param {Function} callback takes `(err, success)` as its signature.  Returns con singleton on success.
	     *
	     * @returns {Image} Base 64 Image
	     */
	    value: function renderVega(widgetid, vega, options, callback) /* istanbul ignore next */{
	      var _this15 = this;

	      var queryId = null;
	      var compressionLevel = COMPRESSION_LEVEL_DEFAULT;
	      if (options) {
	        queryId = options.hasOwnProperty("queryId") ? options.queryId : queryId;
	        compressionLevel = options.hasOwnProperty("compressionLevel") ? options.compressionLevel : compressionLevel;
	      }

	      var lastQueryTime = queryId in this.queryTimes ? this.queryTimes[queryId] : this.DEFAULT_QUERY_TIME;

	      var curNonce = (this._nonce++).toString();

	      var conId = 0;
	      this._lastRenderCon = conId;

	      var processResultsOptions = {
	        isImage: true,
	        query: "render: " + vega,
	        queryId: queryId,
	        conId: conId,
	        estimatedQueryTime: lastQueryTime
	      };

	      try {
	        if (!callback) {
	          var renderResult = this._client[conId].render_vega(this._sessionId[conId], widgetid, vega, compressionLevel, curNonce);
	          return this.processResults(processResultsOptions, renderResult);
	        }

	        this._client[conId].render_vega(this._sessionId[conId], widgetid, vega, compressionLevel, curNonce, function (error, result) {
	          if (error) {
	            callback(error);
	          } else {
	            _this15.processResults(processResultsOptions, result, callback);
	          }
	        });
	      } catch (err) {
	        throw err;
	      }

	      return curNonce;
	    }

	    /**
	     * Used primarily for backend rendered maps, this method will fetch the row
	     * for a specific table that was last rendered at a pixel.
	     *
	     * @param {widgetId} Number - the widget id of the caller
	     * @param {TPixel} pixel - the pixel (lower left-hand corner is pixel (0,0))
	     * @param {String} tableName - the table containing the geo data
	     * @param {Object} tableColNamesMap - object of tableName -> array of col names
	     * @param {Array<Function>} callbacks
	     * @param {Number} [pixelRadius=2] - the radius around the primary pixel to search
	     */

	  }, {
	    key: "getResultRowForPixel",
	    value: function getResultRowForPixel(widgetId, pixel, tableColNamesMap, callbacks) /* istanbul ignore next */{
	      var pixelRadius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;

	      if (!(pixel instanceof TPixel)) {
	        pixel = new TPixel(pixel);
	      }
	      var columnFormat = true; // BOOL
	      var curNonce = (this._nonce++).toString();
	      try {
	        if (!callbacks) {
	          return this.processPixelResults(undefined, // eslint-disable-line no-undefined
	          this._client[this._lastRenderCon].get_result_row_for_pixel(this._sessionId[this._lastRenderCon], widgetId, pixel, tableColNamesMap, columnFormat, pixelRadius, curNonce));
	        }
	        this._client[this._lastRenderCon].get_result_row_for_pixel(this._sessionId[this._lastRenderCon], widgetId, pixel, tableColNamesMap, columnFormat, pixelRadius, curNonce, this.processPixelResults.bind(this, callbacks));
	      } catch (err) {
	        throw err;
	      }
	      return curNonce;
	    }

	    /**
	     * Formats the pixel results into the same pattern as textual results.
	     *
	     * @param {Array<Function>} callbacks a collection of callbacks
	     * @param {Object} error an error if one was thrown, otherwise null
	     * @param {Array|Object} results unformatted results of pixel rowId information
	     *
	     * @returns {Object} An object with the pixel results formatted for display
	     */

	  }, {
	    key: "processPixelResults",
	    value: function processPixelResults(callbacks, error, results) {
	      callbacks = Array.isArray(callbacks) ? callbacks : [callbacks];
	      results = Array.isArray(results) ? results.pixel_rows : [results];
	      if (error) {
	        if (callbacks) {
	          callbacks.pop()(error, results);
	        } else {
	          throw new Error("Unable to process result row for pixel results: " + error);
	        }
	      }
	      var numPixels = results.length;
	      var processResultsOptions = {
	        isImage: false,
	        eliminateNullRows: false,
	        query: "pixel request",
	        queryId: -2
	      };
	      for (var p = 0; p < numPixels; p++) {
	        results[p].row_set = this.processResults(processResultsOptions, results[p]);
	      }
	      if (!callbacks) {
	        return results;
	      }
	      callbacks.pop()(error, results);
	    }

	    /**
	     * Get or set the session ID used by the server to serve the correct data.
	     * This is typically set by {@link connect} and should not be set manually.
	     * @param {Number} sessionId - The session ID of the current connection
	     * @return {Number|MapdCon} - The session ID or the MapdCon itself
	     *
	     * @example <caption>Get the session id:</caption>
	     *
	     *  con.sessionId();
	     * // sessionID === 3145846410
	     *
	     * @example <caption>Set the session id:</caption>
	     * var con = new MapdCon().connect().sessionId(3415846410);
	     * // NOTE: It is generally unsafe to set the session id manually.
	     */

	  }, {
	    key: "sessionId",
	    value: function sessionId(_sessionId) {
	      if (!arguments.length) {
	        return this._sessionId;
	      }
	      this._sessionId = _sessionId;
	      return this;
	    }

	    /**
	     * Get or set the connection server hostname.
	     * This is is typically the first method called after instantiating a new MapdCon.
	     * @param {String} host - The hostname address
	     * @return {String|MapdCon} - The hostname or the MapdCon itself
	     *
	     * @example <caption>Set the hostname:</caption>
	     * var con = new MapdCon().host('localhost');
	     *
	     * @example <caption>Get the hostname:</caption>
	     * var host = con.host();
	     * // host === 'localhost'
	     */

	  }, {
	    key: "host",
	    value: function host(_host) {
	      if (!arguments.length) {
	        return this._host;
	      }
	      this._host = arrayify(_host);
	      return this;
	    }

	    /**
	     * Get or set the connection port.
	     * @param {String} port - The port to connect on
	     * @return {String|MapdCon} - The port or the MapdCon itself
	     *
	     * @example <caption>Set the port:</caption>
	     * var con = new MapdCon().port('8080');
	     *
	     * @example <caption>Get the port:</caption>
	     * var port = con.port();
	     * // port === '8080'
	     */

	  }, {
	    key: "port",
	    value: function port(_port) {
	      if (!arguments.length) {
	        return this._port;
	      }
	      this._port = arrayify(_port);
	      return this;
	    }

	    /**
	     * Get or set the username to authenticate with.
	     * @param {String} user - The username to authenticate with
	     * @return {String|MapdCon} - The username or the MapdCon itself
	     *
	     * @example <caption>Set the username:</caption>
	     * var con = new MapdCon().user('foo');
	     *
	     * @example <caption>Get the username:</caption>
	     * var username = con.user();
	     * // user === 'foo'
	     */

	  }, {
	    key: "user",
	    value: function user(_user) {
	      if (!arguments.length) {
	        return this._user;
	      }
	      this._user = arrayify(_user);
	      return this;
	    }

	    /**
	     * Get or set the user's password to authenticate with.
	     * @param {String} password - The password to authenticate with
	     * @return {String|MapdCon} - The password or the MapdCon itself
	     *
	     * @example <caption>Set the password:</caption>
	     * var con = new MapdCon().password('bar');
	     *
	     * @example <caption>Get the username:</caption>
	     * var password = con.password();
	     * // password === 'bar'
	     */

	  }, {
	    key: "password",
	    value: function password(_password) {
	      if (!arguments.length) {
	        return this._password;
	      }
	      this._password = arrayify(_password);
	      return this;
	    }

	    /**
	     * Get or set the name of the database to connect to.
	     * @param {String} dbName - The database to connect to
	     * @return {String|MapdCon} - The name of the database or the MapdCon itself
	     *
	     * @example <caption>Set the database name:</caption>
	     * var con = new MapdCon().dbName('myDatabase');
	     *
	     * @example <caption>Get the database name:</caption>
	     * var dbName = con.dbName();
	     * // dbName === 'myDatabase'
	     */

	  }, {
	    key: "dbName",
	    value: function dbName(_dbName) {
	      if (!arguments.length) {
	        return this._dbName;
	      }
	      this._dbName = arrayify(_dbName);
	      return this;
	    }

	    /**
	     * Whether the raw queries strings will be logged to the console.
	     * Used primarily for debugging and defaults to <code>false</code>.
	     * @param {Boolean} logging - Set to true to enable logging
	     * @return {Boolean|MapdCon} - The current logging flag or MapdCon itself
	     *
	     * @example <caption>Set logging to true:</caption>
	     * var con = new MapdCon().logging(true);
	     *
	     * @example <caption>Get the logging flag:</caption>
	     * var isLogging = con.logging();
	     * // isLogging === true
	     */

	  }, {
	    key: "logging",
	    value: function logging(_logging) {
	      if (typeof _logging === "undefined") {
	        return this._logging;
	      } else if (typeof _logging !== "boolean") {
	        return "logging can only be set with boolean values";
	      }
	      this._logging = _logging;
	      var isEnabledTxt = _logging ? "enabled" : "disabled";
	      return "SQL logging is now " + isEnabledTxt;
	    }

	    /**
	     * The name of the platform.
	     * @param {String} platform - The platform, default is "mapd"
	     * @return {String|MapdCon} - The platform or the MapdCon itself
	     *
	     * @example <caption>Set the platform name:</caption>
	     * var con = new MapdCon().platform('myPlatform');
	     *
	     * @example <caption>Get the platform name:</caption>
	     * var platform = con.platform();
	     * // platform === 'myPlatform'
	     */

	  }, {
	    key: "platform",
	    value: function platform(_platform) {
	      if (!arguments.length) {
	        return this._platform;
	      }
	      this._platform = _platform;
	      return this;
	    }

	    /**
	     * Get the number of connections that are currently open.
	     * @return {Number} - number of open connections
	     *
	     * @example <caption>Get the number of connections:</caption>
	     *
	     * var numConnections = con.numConnections();
	     * // numConnections === 1
	     */

	  }, {
	    key: "numConnections",
	    value: function numConnections() {
	      return this._numConnections;
	    }

	    /**
	     * The protocol to use for requests.
	     * @param {String} protocol - http or https
	     * @return {String|MapdCon} - protocol or MapdCon itself
	     *
	     * @example <caption>Set the protocol:</caption>
	     * var con = new MapdCon().protocol('http');
	     *
	     * @example <caption>Get the protocol:</caption>
	     * var protocol = con.protocol();
	     * // protocol === 'http'
	     */

	  }, {
	    key: "protocol",
	    value: function protocol(_protocol) {
	      if (!arguments.length) {
	        return this._protocol;
	      }
	      this._protocol = arrayify(_protocol);
	      return this;
	    }

	    /**
	     * Generates a list of endpoints from the connection params.
	     * @return {Array<String>} - list of endpoints
	     *
	     * @example <caption>Get the endpoints:</caption>
	     * var con = new MapdCon().protocol('http').host('localhost').port('8000');
	     * var endpoints = con.getEndpoints();
	     * // endpoints === [ 'http://localhost:8000' ]
	     */

	  }, {
	    key: "getEndpoints",
	    value: function getEndpoints() {
	      var _this16 = this;

	      return this._host.map(function (host, i) {
	        return _this16._protocol[i] + "://" + host + ":" + _this16._port[i];
	      });
	    }
	  }]);

	  return MapdCon;
	}();

	function resetThriftClientOnArgumentErrorForMethods(connector, client, methodNames) {
	  methodNames.forEach(function (methodName) {
	    var oldFunc = connector[methodName];
	    connector[methodName] = function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      try {
	        // eslint-disable-line no-restricted-syntax
	        return oldFunc.apply(connector, args); // TODO should reject rather than throw for Promises.
	      } catch (e) {
	        // `this.output` is the Thrift transport instance
	        client.output.outCount = 0;
	        client.output.outBuffers = [];
	        client.output._seqid = null;
	        // dereference the callback
	        client._reqs[client._seqid] = null;
	        throw e; // re-throw the error to Rx
	      }
	    };
	  });
	}

	// Set a global mapdcon function when mapdcon is brought in via script tag.
	if (( false ? "undefined" : _typeof(module)) === "object" && module.exports) {
	  if (!isNodeRuntime()) {
	    window.MapdCon = MapdCon;
	  }
	}
	module.exports = MapdCon;
	exports.default = MapdCon;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)(module)))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 12 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var convertObjectToThriftCopyParams = exports.convertObjectToThriftCopyParams = function convertObjectToThriftCopyParams(obj) {
	  return new TCopyParams(obj);
	}; // eslint-disable-line no-undef

	var mutateThriftRowDesc = exports.mutateThriftRowDesc = function mutateThriftRowDesc(rowDescArray, thriftRowDescArray) {
	  rowDescArray.forEach(function (obj, i) {
	    thriftRowDescArray[i].col_name = obj.clean_col_name;
	    thriftRowDescArray[i].col_type.encoding = obj.col_type.encoding;
	    thriftRowDescArray[i].col_type.type = obj.col_type.type;
	  });
	  return thriftRowDescArray;
	};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = MapDClientV2;

	var _wrapWithErrorHandling = __webpack_require__(14);

	var MapDClient = typeof window !== "undefined" && window.MapDClient || __webpack_require__(15).Client; // eslint-disable-line global-require

	function MapDClientV2(protocol) {
	  MapDClient.call(this, protocol);
	}

	MapDClientV2.prototype = Object.create(MapDClient.prototype);

	MapDClientV2.prototype.connect = function () {
	  var connectWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "connect");
	  return connectWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.sql_execute = function () {
	  var SQLExecuteWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "sql_execute");
	  return SQLExecuteWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.sql_validate = function () {
	  var SQLValidateWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "sql_validate");
	  return SQLValidateWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.render = function () {
	  var renderWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "render");
	  return renderWithErrorHandling.apply(undefined, arguments);
	};

	/* istanbul ignore next */
	MapDClientV2.prototype.render_vega = function () {
	  var renderVegaWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "render_vega");
	  return renderVegaWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_result_row_for_pixel = function () {
	  var getResultRowForPixelWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_result_row_for_pixel");
	  return getResultRowForPixelWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.delete_frontend_view = function () {
	  var deleteFrontendViewWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "delete_frontend_view");
	  return deleteFrontendViewWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_completion_hints = function () {
	  var getCompletionHintsWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_completion_hints");
	  return getCompletionHintsWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_tables = function () {
	  var getTablesWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_tables");
	  return getTablesWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_table_details = function () {
	  var getTableDetailsWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_table_details");
	  return getTableDetailsWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_tables_meta = function () {
	  var getTablesWithMetaWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_tables_meta");
	  return getTablesWithMetaWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_fields = function () {
	  var getFieldsWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_fields");
	  return getFieldsWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_status = function () {
	  var getStatusWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_status");
	  return getStatusWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_server_status = function () {
	  var getServerStatusWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_server_status");
	  return getServerStatusWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_hardware_info = function () {
	  var getHardwareInfoWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_hardware_info");
	  return getHardwareInfoWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_frontend_views = function () {
	  var getFrontEndViewsWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_frontend_views");
	  return getFrontEndViewsWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_frontend_view = function () {
	  var getFrontEndViewWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_frontend_view");
	  return getFrontEndViewWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.create_link = function () {
	  var createLinkWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "create_link");
	  return createLinkWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.get_link_view = function () {
	  var getLinkViewWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "get_link_view");
	  return getLinkViewWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.detect_column_types = function () {
	  var detectColumnTypesWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "detect_column_types");
	  return detectColumnTypesWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.create_frontend_view = function () {
	  var createFrontEndViewWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "create_frontend_view");
	  return createFrontEndViewWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.send_create_table = function () {
	  var sendCreateTableWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "send_create_table");
	  return sendCreateTableWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.send_import_table = function () {
	  var sendImportTableWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "send_import_table");
	  return sendImportTableWithErrorHandling.apply(undefined, arguments);
	};

	MapDClientV2.prototype.detect_column_types = function () {
	  var detectColumnTypesWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, "detect_column_types");
	  return detectColumnTypesWithErrorHandling.apply(undefined, arguments);
	};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isResultError = isResultError;
	exports.createResultError = createResultError;
	exports.wrapMethod = wrapMethod;
	exports.wrapWithErrorHandling = wrapWithErrorHandling;
	var MapDClient = typeof window !== "undefined" && window.MapDClient || __webpack_require__(15).Client; // eslint-disable-line global-require
	var TMapDException = typeof window !== "undefined" && window.TMapDException || __webpack_require__(119).TMapDException; // eslint-disable-line global-require
	var Thrift = typeof window !== "undefined" && window.Thrift || __webpack_require__(16).Thrift; // eslint-disable-line global-require

	function isResultError(result) {
	  return result instanceof Thrift.TException || result instanceof Error;
	}

	function createResultError(result) {
	  if (result instanceof TMapDException) {
	    return new Error(result.error_msg);
	  } else if (typeof result.message === "undefined") {
	    return new Error("Unspecified Error");
	  } else {
	    return new Error(result.message);
	  }
	}

	/* eslint-disable consistent-this */
	function wrapMethod(context, method, isError) {
	  return function wrapped() {
	    var arity = MapDClient.prototype[method].length;

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    if (args.length === arity) {
	      var _MapDClient$prototype;

	      var callback = args.pop();
	      (_MapDClient$prototype = MapDClient.prototype[method]).call.apply(_MapDClient$prototype, [context].concat(args, [function (result) {
	        if (isError(result)) {
	          callback(createResultError(result));
	        } else {
	          callback(null, result);
	        }
	      }]));
	    } else if (args.length === arity - 1) {
	      var _MapDClient$prototype2;

	      var result = (_MapDClient$prototype2 = MapDClient.prototype[method]).call.apply(_MapDClient$prototype2, [context].concat(args));
	      if (isError(result)) {
	        throw createResultError(result);
	      }
	      return result;
	    } else {
	      throw new Error("Insufficient arguments to run this method " + method);
	    }
	  };
	}

	function wrapWithErrorHandling(context, method) {
	  return wrapMethod(context, method, isResultError);
	}
	/* eslint-enable consistent-this */

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";//
	// Autogenerated by Thrift Compiler (0.10.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";var thrift=__webpack_require__(16);var Thrift=thrift.Thrift;var Q=thrift.Q;var completion_hints_ttypes=__webpack_require__(118);var ttypes=__webpack_require__(119);//HELPER FUNCTIONS AND STRUCTURES
	var MapD_connect_args=function MapD_connect_args(args){this.user=null;this.passwd=null;this.dbname=null;if(args){if(args.user!==undefined&&args.user!==null){this.user=args.user;}if(args.passwd!==undefined&&args.passwd!==null){this.passwd=args.passwd;}if(args.dbname!==undefined&&args.dbname!==null){this.dbname=args.dbname;}}};MapD_connect_args.prototype={};MapD_connect_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.user=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.passwd=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.dbname=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_connect_args.prototype.write=function(output){output.writeStructBegin('MapD_connect_args');if(this.user!==null&&this.user!==undefined){output.writeFieldBegin('user',Thrift.Type.STRING,1);output.writeString(this.user);output.writeFieldEnd();}if(this.passwd!==null&&this.passwd!==undefined){output.writeFieldBegin('passwd',Thrift.Type.STRING,2);output.writeString(this.passwd);output.writeFieldEnd();}if(this.dbname!==null&&this.dbname!==undefined){output.writeFieldBegin('dbname',Thrift.Type.STRING,3);output.writeString(this.dbname);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_connect_result=function MapD_connect_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_connect_result.prototype={};MapD_connect_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_connect_result.prototype.write=function(output){output.writeStructBegin('MapD_connect_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_disconnect_args=function MapD_disconnect_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_disconnect_args.prototype={};MapD_disconnect_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_disconnect_args.prototype.write=function(output){output.writeStructBegin('MapD_disconnect_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_disconnect_result=function MapD_disconnect_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_disconnect_result.prototype={};MapD_disconnect_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_disconnect_result.prototype.write=function(output){output.writeStructBegin('MapD_disconnect_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_server_status_args=function MapD_get_server_status_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_server_status_args.prototype={};MapD_get_server_status_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_server_status_args.prototype.write=function(output){output.writeStructBegin('MapD_get_server_status_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_server_status_result=function MapD_get_server_status_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TServerStatus(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_server_status_result.prototype={};MapD_get_server_status_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TServerStatus();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_server_status_result.prototype.write=function(output){output.writeStructBegin('MapD_get_server_status_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_status_args=function MapD_get_status_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_status_args.prototype={};MapD_get_status_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_status_args.prototype.write=function(output){output.writeStructBegin('MapD_get_status_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_status_result=function MapD_get_status_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TServerStatus]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_status_result.prototype={};MapD_get_status_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size266=0;var _rtmp3270;this.success=[];var _etype269=0;_rtmp3270=input.readListBegin();_etype269=_rtmp3270.etype;_size266=_rtmp3270.size;for(var _i271=0;_i271<_size266;++_i271){var elem272=null;elem272=new ttypes.TServerStatus();elem272.read(input);this.success.push(elem272);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_status_result.prototype.write=function(output){output.writeStructBegin('MapD_get_status_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter273 in this.success){if(this.success.hasOwnProperty(iter273)){iter273=this.success[iter273];iter273.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_hardware_info_args=function MapD_get_hardware_info_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_hardware_info_args.prototype={};MapD_get_hardware_info_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_hardware_info_args.prototype.write=function(output){output.writeStructBegin('MapD_get_hardware_info_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_hardware_info_result=function MapD_get_hardware_info_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TClusterHardwareInfo(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_hardware_info_result.prototype={};MapD_get_hardware_info_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TClusterHardwareInfo();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_hardware_info_result.prototype.write=function(output){output.writeStructBegin('MapD_get_hardware_info_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_tables_args=function MapD_get_tables_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_tables_args.prototype={};MapD_get_tables_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_tables_args.prototype.write=function(output){output.writeStructBegin('MapD_get_tables_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_tables_result=function MapD_get_tables_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_tables_result.prototype={};MapD_get_tables_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size274=0;var _rtmp3278;this.success=[];var _etype277=0;_rtmp3278=input.readListBegin();_etype277=_rtmp3278.etype;_size274=_rtmp3278.size;for(var _i279=0;_i279<_size274;++_i279){var elem280=null;elem280=input.readString();this.success.push(elem280);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_tables_result.prototype.write=function(output){output.writeStructBegin('MapD_get_tables_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter281 in this.success){if(this.success.hasOwnProperty(iter281)){iter281=this.success[iter281];output.writeString(iter281);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_physical_tables_args=function MapD_get_physical_tables_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_physical_tables_args.prototype={};MapD_get_physical_tables_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_physical_tables_args.prototype.write=function(output){output.writeStructBegin('MapD_get_physical_tables_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_physical_tables_result=function MapD_get_physical_tables_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_physical_tables_result.prototype={};MapD_get_physical_tables_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size282=0;var _rtmp3286;this.success=[];var _etype285=0;_rtmp3286=input.readListBegin();_etype285=_rtmp3286.etype;_size282=_rtmp3286.size;for(var _i287=0;_i287<_size282;++_i287){var elem288=null;elem288=input.readString();this.success.push(elem288);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_physical_tables_result.prototype.write=function(output){output.writeStructBegin('MapD_get_physical_tables_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter289 in this.success){if(this.success.hasOwnProperty(iter289)){iter289=this.success[iter289];output.writeString(iter289);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_views_args=function MapD_get_views_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_views_args.prototype={};MapD_get_views_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_views_args.prototype.write=function(output){output.writeStructBegin('MapD_get_views_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_views_result=function MapD_get_views_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_views_result.prototype={};MapD_get_views_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size290=0;var _rtmp3294;this.success=[];var _etype293=0;_rtmp3294=input.readListBegin();_etype293=_rtmp3294.etype;_size290=_rtmp3294.size;for(var _i295=0;_i295<_size290;++_i295){var elem296=null;elem296=input.readString();this.success.push(elem296);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_views_result.prototype.write=function(output){output.writeStructBegin('MapD_get_views_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter297 in this.success){if(this.success.hasOwnProperty(iter297)){iter297=this.success[iter297];output.writeString(iter297);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_tables_meta_args=function MapD_get_tables_meta_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_tables_meta_args.prototype={};MapD_get_tables_meta_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_tables_meta_args.prototype.write=function(output){output.writeStructBegin('MapD_get_tables_meta_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_tables_meta_result=function MapD_get_tables_meta_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TTableMeta]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_tables_meta_result.prototype={};MapD_get_tables_meta_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size298=0;var _rtmp3302;this.success=[];var _etype301=0;_rtmp3302=input.readListBegin();_etype301=_rtmp3302.etype;_size298=_rtmp3302.size;for(var _i303=0;_i303<_size298;++_i303){var elem304=null;elem304=new ttypes.TTableMeta();elem304.read(input);this.success.push(elem304);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_tables_meta_result.prototype.write=function(output){output.writeStructBegin('MapD_get_tables_meta_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter305 in this.success){if(this.success.hasOwnProperty(iter305)){iter305=this.success[iter305];iter305.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_table_details_args=function MapD_get_table_details_args(args){this.session=null;this.table_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}}};MapD_get_table_details_args.prototype={};MapD_get_table_details_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_table_details_args.prototype.write=function(output){output.writeStructBegin('MapD_get_table_details_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_table_details_result=function MapD_get_table_details_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TTableDetails(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_table_details_result.prototype={};MapD_get_table_details_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TTableDetails();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_table_details_result.prototype.write=function(output){output.writeStructBegin('MapD_get_table_details_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_internal_table_details_args=function MapD_get_internal_table_details_args(args){this.session=null;this.table_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}}};MapD_get_internal_table_details_args.prototype={};MapD_get_internal_table_details_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_internal_table_details_args.prototype.write=function(output){output.writeStructBegin('MapD_get_internal_table_details_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_internal_table_details_result=function MapD_get_internal_table_details_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TTableDetails(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_internal_table_details_result.prototype={};MapD_get_internal_table_details_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TTableDetails();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_internal_table_details_result.prototype.write=function(output){output.writeStructBegin('MapD_get_internal_table_details_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_users_args=function MapD_get_users_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_users_args.prototype={};MapD_get_users_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_users_args.prototype.write=function(output){output.writeStructBegin('MapD_get_users_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_users_result=function MapD_get_users_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_users_result.prototype={};MapD_get_users_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size306=0;var _rtmp3310;this.success=[];var _etype309=0;_rtmp3310=input.readListBegin();_etype309=_rtmp3310.etype;_size306=_rtmp3310.size;for(var _i311=0;_i311<_size306;++_i311){var elem312=null;elem312=input.readString();this.success.push(elem312);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_users_result.prototype.write=function(output){output.writeStructBegin('MapD_get_users_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter313 in this.success){if(this.success.hasOwnProperty(iter313)){iter313=this.success[iter313];output.writeString(iter313);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_databases_args=function MapD_get_databases_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_databases_args.prototype={};MapD_get_databases_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_databases_args.prototype.write=function(output){output.writeStructBegin('MapD_get_databases_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_databases_result=function MapD_get_databases_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDBInfo]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_databases_result.prototype={};MapD_get_databases_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size314=0;var _rtmp3318;this.success=[];var _etype317=0;_rtmp3318=input.readListBegin();_etype317=_rtmp3318.etype;_size314=_rtmp3318.size;for(var _i319=0;_i319<_size314;++_i319){var elem320=null;elem320=new ttypes.TDBInfo();elem320.read(input);this.success.push(elem320);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_databases_result.prototype.write=function(output){output.writeStructBegin('MapD_get_databases_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter321 in this.success){if(this.success.hasOwnProperty(iter321)){iter321=this.success[iter321];iter321.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_version_args=function MapD_get_version_args(args){};MapD_get_version_args.prototype={};MapD_get_version_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}input.skip(ftype);input.readFieldEnd();}input.readStructEnd();return;};MapD_get_version_args.prototype.write=function(output){output.writeStructBegin('MapD_get_version_args');output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_version_result=function MapD_get_version_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_version_result.prototype={};MapD_get_version_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_version_result.prototype.write=function(output){output.writeStructBegin('MapD_get_version_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_start_heap_profile_args=function MapD_start_heap_profile_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_start_heap_profile_args.prototype={};MapD_start_heap_profile_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_start_heap_profile_args.prototype.write=function(output){output.writeStructBegin('MapD_start_heap_profile_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_start_heap_profile_result=function MapD_start_heap_profile_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_start_heap_profile_result.prototype={};MapD_start_heap_profile_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_start_heap_profile_result.prototype.write=function(output){output.writeStructBegin('MapD_start_heap_profile_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_stop_heap_profile_args=function MapD_stop_heap_profile_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_stop_heap_profile_args.prototype={};MapD_stop_heap_profile_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_stop_heap_profile_args.prototype.write=function(output){output.writeStructBegin('MapD_stop_heap_profile_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_stop_heap_profile_result=function MapD_stop_heap_profile_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_stop_heap_profile_result.prototype={};MapD_stop_heap_profile_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_stop_heap_profile_result.prototype.write=function(output){output.writeStructBegin('MapD_stop_heap_profile_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_heap_profile_args=function MapD_get_heap_profile_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_heap_profile_args.prototype={};MapD_get_heap_profile_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_heap_profile_args.prototype.write=function(output){output.writeStructBegin('MapD_get_heap_profile_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_heap_profile_result=function MapD_get_heap_profile_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_heap_profile_result.prototype={};MapD_get_heap_profile_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_heap_profile_result.prototype.write=function(output){output.writeStructBegin('MapD_get_heap_profile_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_memory_args=function MapD_get_memory_args(args){this.session=null;this.memory_level=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.memory_level!==undefined&&args.memory_level!==null){this.memory_level=args.memory_level;}}};MapD_get_memory_args.prototype={};MapD_get_memory_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.memory_level=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_memory_args.prototype.write=function(output){output.writeStructBegin('MapD_get_memory_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.memory_level!==null&&this.memory_level!==undefined){output.writeFieldBegin('memory_level',Thrift.Type.STRING,2);output.writeString(this.memory_level);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_memory_result=function MapD_get_memory_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TNodeMemoryInfo]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_memory_result.prototype={};MapD_get_memory_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size322=0;var _rtmp3326;this.success=[];var _etype325=0;_rtmp3326=input.readListBegin();_etype325=_rtmp3326.etype;_size322=_rtmp3326.size;for(var _i327=0;_i327<_size322;++_i327){var elem328=null;elem328=new ttypes.TNodeMemoryInfo();elem328.read(input);this.success.push(elem328);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_memory_result.prototype.write=function(output){output.writeStructBegin('MapD_get_memory_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter329 in this.success){if(this.success.hasOwnProperty(iter329)){iter329=this.success[iter329];iter329.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_clear_cpu_memory_args=function MapD_clear_cpu_memory_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_clear_cpu_memory_args.prototype={};MapD_clear_cpu_memory_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_clear_cpu_memory_args.prototype.write=function(output){output.writeStructBegin('MapD_clear_cpu_memory_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_clear_cpu_memory_result=function MapD_clear_cpu_memory_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_clear_cpu_memory_result.prototype={};MapD_clear_cpu_memory_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_clear_cpu_memory_result.prototype.write=function(output){output.writeStructBegin('MapD_clear_cpu_memory_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_clear_gpu_memory_args=function MapD_clear_gpu_memory_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_clear_gpu_memory_args.prototype={};MapD_clear_gpu_memory_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_clear_gpu_memory_args.prototype.write=function(output){output.writeStructBegin('MapD_clear_gpu_memory_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_clear_gpu_memory_result=function MapD_clear_gpu_memory_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_clear_gpu_memory_result.prototype={};MapD_clear_gpu_memory_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_clear_gpu_memory_result.prototype.write=function(output){output.writeStructBegin('MapD_clear_gpu_memory_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_set_table_epoch_args=function MapD_set_table_epoch_args(args){this.session=null;this.db_id=null;this.table_id=null;this.new_epoch=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.db_id!==undefined&&args.db_id!==null){this.db_id=args.db_id;}if(args.table_id!==undefined&&args.table_id!==null){this.table_id=args.table_id;}if(args.new_epoch!==undefined&&args.new_epoch!==null){this.new_epoch=args.new_epoch;}}};MapD_set_table_epoch_args.prototype={};MapD_set_table_epoch_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.db_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.table_id=input.readI32();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.new_epoch=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_set_table_epoch_args.prototype.write=function(output){output.writeStructBegin('MapD_set_table_epoch_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.db_id!==null&&this.db_id!==undefined){output.writeFieldBegin('db_id',Thrift.Type.I32,2);output.writeI32(this.db_id);output.writeFieldEnd();}if(this.table_id!==null&&this.table_id!==undefined){output.writeFieldBegin('table_id',Thrift.Type.I32,3);output.writeI32(this.table_id);output.writeFieldEnd();}if(this.new_epoch!==null&&this.new_epoch!==undefined){output.writeFieldBegin('new_epoch',Thrift.Type.I32,4);output.writeI32(this.new_epoch);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_set_table_epoch_result=function MapD_set_table_epoch_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_set_table_epoch_result.prototype={};MapD_set_table_epoch_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_set_table_epoch_result.prototype.write=function(output){output.writeStructBegin('MapD_set_table_epoch_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_set_table_epoch_by_name_args=function MapD_set_table_epoch_by_name_args(args){this.session=null;this.table_name=null;this.new_epoch=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.new_epoch!==undefined&&args.new_epoch!==null){this.new_epoch=args.new_epoch;}}};MapD_set_table_epoch_by_name_args.prototype={};MapD_set_table_epoch_by_name_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.new_epoch=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_set_table_epoch_by_name_args.prototype.write=function(output){output.writeStructBegin('MapD_set_table_epoch_by_name_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.new_epoch!==null&&this.new_epoch!==undefined){output.writeFieldBegin('new_epoch',Thrift.Type.I32,3);output.writeI32(this.new_epoch);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_set_table_epoch_by_name_result=function MapD_set_table_epoch_by_name_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_set_table_epoch_by_name_result.prototype={};MapD_set_table_epoch_by_name_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_set_table_epoch_by_name_result.prototype.write=function(output){output.writeStructBegin('MapD_set_table_epoch_by_name_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_table_epoch_args=function MapD_get_table_epoch_args(args){this.session=null;this.db_id=null;this.table_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.db_id!==undefined&&args.db_id!==null){this.db_id=args.db_id;}if(args.table_id!==undefined&&args.table_id!==null){this.table_id=args.table_id;}}};MapD_get_table_epoch_args.prototype={};MapD_get_table_epoch_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.db_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.table_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_table_epoch_args.prototype.write=function(output){output.writeStructBegin('MapD_get_table_epoch_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.db_id!==null&&this.db_id!==undefined){output.writeFieldBegin('db_id',Thrift.Type.I32,2);output.writeI32(this.db_id);output.writeFieldEnd();}if(this.table_id!==null&&this.table_id!==undefined){output.writeFieldBegin('table_id',Thrift.Type.I32,3);output.writeI32(this.table_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_table_epoch_result=function MapD_get_table_epoch_result(args){this.success=null;if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}}};MapD_get_table_epoch_result.prototype={};MapD_get_table_epoch_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.I32){this.success=input.readI32();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_table_epoch_result.prototype.write=function(output){output.writeStructBegin('MapD_get_table_epoch_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.I32,0);output.writeI32(this.success);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_table_epoch_by_name_args=function MapD_get_table_epoch_by_name_args(args){this.session=null;this.table_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}}};MapD_get_table_epoch_by_name_args.prototype={};MapD_get_table_epoch_by_name_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_table_epoch_by_name_args.prototype.write=function(output){output.writeStructBegin('MapD_get_table_epoch_by_name_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_table_epoch_by_name_result=function MapD_get_table_epoch_by_name_result(args){this.success=null;if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}}};MapD_get_table_epoch_by_name_result.prototype={};MapD_get_table_epoch_by_name_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.I32){this.success=input.readI32();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_table_epoch_by_name_result.prototype.write=function(output){output.writeStructBegin('MapD_get_table_epoch_by_name_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.I32,0);output.writeI32(this.success);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_sql_execute_args=function MapD_sql_execute_args(args){this.session=null;this.query=null;this.column_format=null;this.nonce=null;this.first_n=-1;this.at_most_n=-1;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}if(args.column_format!==undefined&&args.column_format!==null){this.column_format=args.column_format;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}if(args.first_n!==undefined&&args.first_n!==null){this.first_n=args.first_n;}if(args.at_most_n!==undefined&&args.at_most_n!==null){this.at_most_n=args.at_most_n;}}};MapD_sql_execute_args.prototype={};MapD_sql_execute_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.BOOL){this.column_format=input.readBool();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.I32){this.first_n=input.readI32();}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.I32){this.at_most_n=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_sql_execute_args.prototype.write=function(output){output.writeStructBegin('MapD_sql_execute_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}if(this.column_format!==null&&this.column_format!==undefined){output.writeFieldBegin('column_format',Thrift.Type.BOOL,3);output.writeBool(this.column_format);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,4);output.writeString(this.nonce);output.writeFieldEnd();}if(this.first_n!==null&&this.first_n!==undefined){output.writeFieldBegin('first_n',Thrift.Type.I32,5);output.writeI32(this.first_n);output.writeFieldEnd();}if(this.at_most_n!==null&&this.at_most_n!==undefined){output.writeFieldBegin('at_most_n',Thrift.Type.I32,6);output.writeI32(this.at_most_n);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_sql_execute_result=function MapD_sql_execute_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TQueryResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_sql_execute_result.prototype={};MapD_sql_execute_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TQueryResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_sql_execute_result.prototype.write=function(output){output.writeStructBegin('MapD_sql_execute_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_sql_execute_df_args=function MapD_sql_execute_df_args(args){this.session=null;this.query=null;this.device_type=null;this.device_id=0;this.first_n=-1;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}if(args.device_type!==undefined&&args.device_type!==null){this.device_type=args.device_type;}if(args.device_id!==undefined&&args.device_id!==null){this.device_id=args.device_id;}if(args.first_n!==undefined&&args.first_n!==null){this.first_n=args.first_n;}}};MapD_sql_execute_df_args.prototype={};MapD_sql_execute_df_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.device_type=input.readI32();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.device_id=input.readI32();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.I32){this.first_n=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_sql_execute_df_args.prototype.write=function(output){output.writeStructBegin('MapD_sql_execute_df_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}if(this.device_type!==null&&this.device_type!==undefined){output.writeFieldBegin('device_type',Thrift.Type.I32,3);output.writeI32(this.device_type);output.writeFieldEnd();}if(this.device_id!==null&&this.device_id!==undefined){output.writeFieldBegin('device_id',Thrift.Type.I32,4);output.writeI32(this.device_id);output.writeFieldEnd();}if(this.first_n!==null&&this.first_n!==undefined){output.writeFieldBegin('first_n',Thrift.Type.I32,5);output.writeI32(this.first_n);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_sql_execute_df_result=function MapD_sql_execute_df_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TDataFrame(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_sql_execute_df_result.prototype={};MapD_sql_execute_df_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TDataFrame();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_sql_execute_df_result.prototype.write=function(output){output.writeStructBegin('MapD_sql_execute_df_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_sql_execute_gdf_args=function MapD_sql_execute_gdf_args(args){this.session=null;this.query=null;this.device_id=0;this.first_n=-1;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}if(args.device_id!==undefined&&args.device_id!==null){this.device_id=args.device_id;}if(args.first_n!==undefined&&args.first_n!==null){this.first_n=args.first_n;}}};MapD_sql_execute_gdf_args.prototype={};MapD_sql_execute_gdf_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.device_id=input.readI32();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.first_n=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_sql_execute_gdf_args.prototype.write=function(output){output.writeStructBegin('MapD_sql_execute_gdf_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}if(this.device_id!==null&&this.device_id!==undefined){output.writeFieldBegin('device_id',Thrift.Type.I32,3);output.writeI32(this.device_id);output.writeFieldEnd();}if(this.first_n!==null&&this.first_n!==undefined){output.writeFieldBegin('first_n',Thrift.Type.I32,4);output.writeI32(this.first_n);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_sql_execute_gdf_result=function MapD_sql_execute_gdf_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TDataFrame(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_sql_execute_gdf_result.prototype={};MapD_sql_execute_gdf_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TDataFrame();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_sql_execute_gdf_result.prototype.write=function(output){output.writeStructBegin('MapD_sql_execute_gdf_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_deallocate_df_args=function MapD_deallocate_df_args(args){this.session=null;this.df=null;this.device_type=null;this.device_id=0;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.df!==undefined&&args.df!==null){this.df=new ttypes.TDataFrame(args.df);}if(args.device_type!==undefined&&args.device_type!==null){this.device_type=args.device_type;}if(args.device_id!==undefined&&args.device_id!==null){this.device_id=args.device_id;}}};MapD_deallocate_df_args.prototype={};MapD_deallocate_df_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRUCT){this.df=new ttypes.TDataFrame();this.df.read(input);}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.device_type=input.readI32();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.device_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_deallocate_df_args.prototype.write=function(output){output.writeStructBegin('MapD_deallocate_df_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.df!==null&&this.df!==undefined){output.writeFieldBegin('df',Thrift.Type.STRUCT,2);this.df.write(output);output.writeFieldEnd();}if(this.device_type!==null&&this.device_type!==undefined){output.writeFieldBegin('device_type',Thrift.Type.I32,3);output.writeI32(this.device_type);output.writeFieldEnd();}if(this.device_id!==null&&this.device_id!==undefined){output.writeFieldBegin('device_id',Thrift.Type.I32,4);output.writeI32(this.device_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_deallocate_df_result=function MapD_deallocate_df_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_deallocate_df_result.prototype={};MapD_deallocate_df_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_deallocate_df_result.prototype.write=function(output){output.writeStructBegin('MapD_deallocate_df_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_interrupt_args=function MapD_interrupt_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_interrupt_args.prototype={};MapD_interrupt_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_interrupt_args.prototype.write=function(output){output.writeStructBegin('MapD_interrupt_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_interrupt_result=function MapD_interrupt_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_interrupt_result.prototype={};MapD_interrupt_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_interrupt_result.prototype.write=function(output){output.writeStructBegin('MapD_interrupt_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_sql_validate_args=function MapD_sql_validate_args(args){this.session=null;this.query=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}}};MapD_sql_validate_args.prototype={};MapD_sql_validate_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_sql_validate_args.prototype.write=function(output){output.writeStructBegin('MapD_sql_validate_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_sql_validate_result=function MapD_sql_validate_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyMap(args.success,[ttypes.TColumnType]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_sql_validate_result.prototype={};MapD_sql_validate_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.MAP){var _size330=0;var _rtmp3334;this.success={};var _ktype331=0;var _vtype332=0;_rtmp3334=input.readMapBegin();_ktype331=_rtmp3334.ktype;_vtype332=_rtmp3334.vtype;_size330=_rtmp3334.size;for(var _i335=0;_i335<_size330;++_i335){var key336=null;var val337=null;key336=input.readString();val337=new ttypes.TColumnType();val337.read(input);this.success[key336]=val337;}input.readMapEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_sql_validate_result.prototype.write=function(output){output.writeStructBegin('MapD_sql_validate_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.MAP,0);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.STRUCT,Thrift.objectLength(this.success));for(var kiter338 in this.success){if(this.success.hasOwnProperty(kiter338)){var viter339=this.success[kiter338];output.writeString(kiter338);viter339.write(output);}}output.writeMapEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_completion_hints_args=function MapD_get_completion_hints_args(args){this.session=null;this.sql=null;this.cursor=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.sql!==undefined&&args.sql!==null){this.sql=args.sql;}if(args.cursor!==undefined&&args.cursor!==null){this.cursor=args.cursor;}}};MapD_get_completion_hints_args.prototype={};MapD_get_completion_hints_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.sql=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.cursor=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_completion_hints_args.prototype.write=function(output){output.writeStructBegin('MapD_get_completion_hints_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.sql!==null&&this.sql!==undefined){output.writeFieldBegin('sql',Thrift.Type.STRING,2);output.writeString(this.sql);output.writeFieldEnd();}if(this.cursor!==null&&this.cursor!==undefined){output.writeFieldBegin('cursor',Thrift.Type.I32,3);output.writeI32(this.cursor);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_completion_hints_result=function MapD_get_completion_hints_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[completion_hints_ttypes.TCompletionHint]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_completion_hints_result.prototype={};MapD_get_completion_hints_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size340=0;var _rtmp3344;this.success=[];var _etype343=0;_rtmp3344=input.readListBegin();_etype343=_rtmp3344.etype;_size340=_rtmp3344.size;for(var _i345=0;_i345<_size340;++_i345){var elem346=null;elem346=new completion_hints_ttypes.TCompletionHint();elem346.read(input);this.success.push(elem346);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_completion_hints_result.prototype.write=function(output){output.writeStructBegin('MapD_get_completion_hints_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter347 in this.success){if(this.success.hasOwnProperty(iter347)){iter347=this.success[iter347];iter347.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_set_execution_mode_args=function MapD_set_execution_mode_args(args){this.session=null;this.mode=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.mode!==undefined&&args.mode!==null){this.mode=args.mode;}}};MapD_set_execution_mode_args.prototype={};MapD_set_execution_mode_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.mode=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_set_execution_mode_args.prototype.write=function(output){output.writeStructBegin('MapD_set_execution_mode_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.mode!==null&&this.mode!==undefined){output.writeFieldBegin('mode',Thrift.Type.I32,2);output.writeI32(this.mode);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_set_execution_mode_result=function MapD_set_execution_mode_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_set_execution_mode_result.prototype={};MapD_set_execution_mode_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_set_execution_mode_result.prototype.write=function(output){output.writeStructBegin('MapD_set_execution_mode_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_render_vega_args=function MapD_render_vega_args(args){this.session=null;this.widget_id=null;this.vega_json=null;this.compression_level=null;this.nonce=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.widget_id!==undefined&&args.widget_id!==null){this.widget_id=args.widget_id;}if(args.vega_json!==undefined&&args.vega_json!==null){this.vega_json=args.vega_json;}if(args.compression_level!==undefined&&args.compression_level!==null){this.compression_level=args.compression_level;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}}};MapD_render_vega_args.prototype={};MapD_render_vega_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I64){this.widget_id=input.readI64();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.vega_json=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.compression_level=input.readI32();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_render_vega_args.prototype.write=function(output){output.writeStructBegin('MapD_render_vega_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.widget_id!==null&&this.widget_id!==undefined){output.writeFieldBegin('widget_id',Thrift.Type.I64,2);output.writeI64(this.widget_id);output.writeFieldEnd();}if(this.vega_json!==null&&this.vega_json!==undefined){output.writeFieldBegin('vega_json',Thrift.Type.STRING,3);output.writeString(this.vega_json);output.writeFieldEnd();}if(this.compression_level!==null&&this.compression_level!==undefined){output.writeFieldBegin('compression_level',Thrift.Type.I32,4);output.writeI32(this.compression_level);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,5);output.writeString(this.nonce);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_render_vega_result=function MapD_render_vega_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TRenderResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_render_vega_result.prototype={};MapD_render_vega_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TRenderResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_render_vega_result.prototype.write=function(output){output.writeStructBegin('MapD_render_vega_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_result_row_for_pixel_args=function MapD_get_result_row_for_pixel_args(args){this.session=null;this.widget_id=null;this.pixel=null;this.table_col_names=null;this.column_format=null;this.pixelRadius=null;this.nonce=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.widget_id!==undefined&&args.widget_id!==null){this.widget_id=args.widget_id;}if(args.pixel!==undefined&&args.pixel!==null){this.pixel=new ttypes.TPixel(args.pixel);}if(args.table_col_names!==undefined&&args.table_col_names!==null){this.table_col_names=Thrift.copyMap(args.table_col_names,[Thrift.copyList,null]);}if(args.column_format!==undefined&&args.column_format!==null){this.column_format=args.column_format;}if(args.pixelRadius!==undefined&&args.pixelRadius!==null){this.pixelRadius=args.pixelRadius;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}}};MapD_get_result_row_for_pixel_args.prototype={};MapD_get_result_row_for_pixel_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I64){this.widget_id=input.readI64();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRUCT){this.pixel=new ttypes.TPixel();this.pixel.read(input);}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.MAP){var _size348=0;var _rtmp3352;this.table_col_names={};var _ktype349=0;var _vtype350=0;_rtmp3352=input.readMapBegin();_ktype349=_rtmp3352.ktype;_vtype350=_rtmp3352.vtype;_size348=_rtmp3352.size;for(var _i353=0;_i353<_size348;++_i353){var key354=null;var val355=null;key354=input.readString();var _size356=0;var _rtmp3360;val355=[];var _etype359=0;_rtmp3360=input.readListBegin();_etype359=_rtmp3360.etype;_size356=_rtmp3360.size;for(var _i361=0;_i361<_size356;++_i361){var elem362=null;elem362=input.readString();val355.push(elem362);}input.readListEnd();this.table_col_names[key354]=val355;}input.readMapEnd();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.BOOL){this.column_format=input.readBool();}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.I32){this.pixelRadius=input.readI32();}else{input.skip(ftype);}break;case 7:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_result_row_for_pixel_args.prototype.write=function(output){output.writeStructBegin('MapD_get_result_row_for_pixel_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.widget_id!==null&&this.widget_id!==undefined){output.writeFieldBegin('widget_id',Thrift.Type.I64,2);output.writeI64(this.widget_id);output.writeFieldEnd();}if(this.pixel!==null&&this.pixel!==undefined){output.writeFieldBegin('pixel',Thrift.Type.STRUCT,3);this.pixel.write(output);output.writeFieldEnd();}if(this.table_col_names!==null&&this.table_col_names!==undefined){output.writeFieldBegin('table_col_names',Thrift.Type.MAP,4);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.LIST,Thrift.objectLength(this.table_col_names));for(var kiter363 in this.table_col_names){if(this.table_col_names.hasOwnProperty(kiter363)){var viter364=this.table_col_names[kiter363];output.writeString(kiter363);output.writeListBegin(Thrift.Type.STRING,viter364.length);for(var iter365 in viter364){if(viter364.hasOwnProperty(iter365)){iter365=viter364[iter365];output.writeString(iter365);}}output.writeListEnd();}}output.writeMapEnd();output.writeFieldEnd();}if(this.column_format!==null&&this.column_format!==undefined){output.writeFieldBegin('column_format',Thrift.Type.BOOL,5);output.writeBool(this.column_format);output.writeFieldEnd();}if(this.pixelRadius!==null&&this.pixelRadius!==undefined){output.writeFieldBegin('pixelRadius',Thrift.Type.I32,6);output.writeI32(this.pixelRadius);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,7);output.writeString(this.nonce);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_result_row_for_pixel_result=function MapD_get_result_row_for_pixel_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TPixelTableRowResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_result_row_for_pixel_result.prototype={};MapD_get_result_row_for_pixel_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TPixelTableRowResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_result_row_for_pixel_result.prototype.write=function(output){output.writeStructBegin('MapD_get_result_row_for_pixel_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_frontend_view_args=function MapD_get_frontend_view_args(args){this.session=null;this.view_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.view_name!==undefined&&args.view_name!==null){this.view_name=args.view_name;}}};MapD_get_frontend_view_args.prototype={};MapD_get_frontend_view_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.view_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_frontend_view_args.prototype.write=function(output){output.writeStructBegin('MapD_get_frontend_view_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.view_name!==null&&this.view_name!==undefined){output.writeFieldBegin('view_name',Thrift.Type.STRING,2);output.writeString(this.view_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_frontend_view_result=function MapD_get_frontend_view_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TFrontendView(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_frontend_view_result.prototype={};MapD_get_frontend_view_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TFrontendView();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_frontend_view_result.prototype.write=function(output){output.writeStructBegin('MapD_get_frontend_view_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_frontend_views_args=function MapD_get_frontend_views_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_frontend_views_args.prototype={};MapD_get_frontend_views_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_frontend_views_args.prototype.write=function(output){output.writeStructBegin('MapD_get_frontend_views_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_frontend_views_result=function MapD_get_frontend_views_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TFrontendView]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_frontend_views_result.prototype={};MapD_get_frontend_views_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size366=0;var _rtmp3370;this.success=[];var _etype369=0;_rtmp3370=input.readListBegin();_etype369=_rtmp3370.etype;_size366=_rtmp3370.size;for(var _i371=0;_i371<_size366;++_i371){var elem372=null;elem372=new ttypes.TFrontendView();elem372.read(input);this.success.push(elem372);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_frontend_views_result.prototype.write=function(output){output.writeStructBegin('MapD_get_frontend_views_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter373 in this.success){if(this.success.hasOwnProperty(iter373)){iter373=this.success[iter373];iter373.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_create_frontend_view_args=function MapD_create_frontend_view_args(args){this.session=null;this.view_name=null;this.view_state=null;this.image_hash=null;this.view_metadata=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.view_name!==undefined&&args.view_name!==null){this.view_name=args.view_name;}if(args.view_state!==undefined&&args.view_state!==null){this.view_state=args.view_state;}if(args.image_hash!==undefined&&args.image_hash!==null){this.image_hash=args.image_hash;}if(args.view_metadata!==undefined&&args.view_metadata!==null){this.view_metadata=args.view_metadata;}}};MapD_create_frontend_view_args.prototype={};MapD_create_frontend_view_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.view_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.view_state=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.image_hash=input.readString();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRING){this.view_metadata=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_create_frontend_view_args.prototype.write=function(output){output.writeStructBegin('MapD_create_frontend_view_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.view_name!==null&&this.view_name!==undefined){output.writeFieldBegin('view_name',Thrift.Type.STRING,2);output.writeString(this.view_name);output.writeFieldEnd();}if(this.view_state!==null&&this.view_state!==undefined){output.writeFieldBegin('view_state',Thrift.Type.STRING,3);output.writeString(this.view_state);output.writeFieldEnd();}if(this.image_hash!==null&&this.image_hash!==undefined){output.writeFieldBegin('image_hash',Thrift.Type.STRING,4);output.writeString(this.image_hash);output.writeFieldEnd();}if(this.view_metadata!==null&&this.view_metadata!==undefined){output.writeFieldBegin('view_metadata',Thrift.Type.STRING,5);output.writeString(this.view_metadata);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_create_frontend_view_result=function MapD_create_frontend_view_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_create_frontend_view_result.prototype={};MapD_create_frontend_view_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_create_frontend_view_result.prototype.write=function(output){output.writeStructBegin('MapD_create_frontend_view_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_delete_frontend_view_args=function MapD_delete_frontend_view_args(args){this.session=null;this.view_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.view_name!==undefined&&args.view_name!==null){this.view_name=args.view_name;}}};MapD_delete_frontend_view_args.prototype={};MapD_delete_frontend_view_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.view_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_delete_frontend_view_args.prototype.write=function(output){output.writeStructBegin('MapD_delete_frontend_view_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.view_name!==null&&this.view_name!==undefined){output.writeFieldBegin('view_name',Thrift.Type.STRING,2);output.writeString(this.view_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_delete_frontend_view_result=function MapD_delete_frontend_view_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_delete_frontend_view_result.prototype={};MapD_delete_frontend_view_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_delete_frontend_view_result.prototype.write=function(output){output.writeStructBegin('MapD_delete_frontend_view_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_dashboard_args=function MapD_get_dashboard_args(args){this.session=null;this.dashboard_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}}};MapD_get_dashboard_args.prototype={};MapD_get_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_dashboard_args.prototype.write=function(output){output.writeStructBegin('MapD_get_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_dashboard_result=function MapD_get_dashboard_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TDashboard(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_dashboard_result.prototype={};MapD_get_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TDashboard();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_dashboard_result.prototype.write=function(output){output.writeStructBegin('MapD_get_dashboard_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_dashboards_args=function MapD_get_dashboards_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_dashboards_args.prototype={};MapD_get_dashboards_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_dashboards_args.prototype.write=function(output){output.writeStructBegin('MapD_get_dashboards_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_dashboards_result=function MapD_get_dashboards_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDashboard]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_dashboards_result.prototype={};MapD_get_dashboards_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size374=0;var _rtmp3378;this.success=[];var _etype377=0;_rtmp3378=input.readListBegin();_etype377=_rtmp3378.etype;_size374=_rtmp3378.size;for(var _i379=0;_i379<_size374;++_i379){var elem380=null;elem380=new ttypes.TDashboard();elem380.read(input);this.success.push(elem380);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_dashboards_result.prototype.write=function(output){output.writeStructBegin('MapD_get_dashboards_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter381 in this.success){if(this.success.hasOwnProperty(iter381)){iter381=this.success[iter381];iter381.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_create_dashboard_args=function MapD_create_dashboard_args(args){this.session=null;this.dashboard_name=null;this.dashboard_state=null;this.image_hash=null;this.dashboard_metadata=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_name!==undefined&&args.dashboard_name!==null){this.dashboard_name=args.dashboard_name;}if(args.dashboard_state!==undefined&&args.dashboard_state!==null){this.dashboard_state=args.dashboard_state;}if(args.image_hash!==undefined&&args.image_hash!==null){this.image_hash=args.image_hash;}if(args.dashboard_metadata!==undefined&&args.dashboard_metadata!==null){this.dashboard_metadata=args.dashboard_metadata;}}};MapD_create_dashboard_args.prototype={};MapD_create_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.dashboard_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.dashboard_state=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.image_hash=input.readString();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRING){this.dashboard_metadata=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_create_dashboard_args.prototype.write=function(output){output.writeStructBegin('MapD_create_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_name!==null&&this.dashboard_name!==undefined){output.writeFieldBegin('dashboard_name',Thrift.Type.STRING,2);output.writeString(this.dashboard_name);output.writeFieldEnd();}if(this.dashboard_state!==null&&this.dashboard_state!==undefined){output.writeFieldBegin('dashboard_state',Thrift.Type.STRING,3);output.writeString(this.dashboard_state);output.writeFieldEnd();}if(this.image_hash!==null&&this.image_hash!==undefined){output.writeFieldBegin('image_hash',Thrift.Type.STRING,4);output.writeString(this.image_hash);output.writeFieldEnd();}if(this.dashboard_metadata!==null&&this.dashboard_metadata!==undefined){output.writeFieldBegin('dashboard_metadata',Thrift.Type.STRING,5);output.writeString(this.dashboard_metadata);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_create_dashboard_result=function MapD_create_dashboard_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_create_dashboard_result.prototype={};MapD_create_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.I32){this.success=input.readI32();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_create_dashboard_result.prototype.write=function(output){output.writeStructBegin('MapD_create_dashboard_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.I32,0);output.writeI32(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_replace_dashboard_args=function MapD_replace_dashboard_args(args){this.session=null;this.dashboard_id=null;this.dashboard_name=null;this.dashboard_owner=null;this.dashboard_state=null;this.image_hash=null;this.dashboard_metadata=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}if(args.dashboard_name!==undefined&&args.dashboard_name!==null){this.dashboard_name=args.dashboard_name;}if(args.dashboard_owner!==undefined&&args.dashboard_owner!==null){this.dashboard_owner=args.dashboard_owner;}if(args.dashboard_state!==undefined&&args.dashboard_state!==null){this.dashboard_state=args.dashboard_state;}if(args.image_hash!==undefined&&args.image_hash!==null){this.image_hash=args.image_hash;}if(args.dashboard_metadata!==undefined&&args.dashboard_metadata!==null){this.dashboard_metadata=args.dashboard_metadata;}}};MapD_replace_dashboard_args.prototype={};MapD_replace_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.dashboard_name=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.dashboard_owner=input.readString();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRING){this.dashboard_state=input.readString();}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.STRING){this.image_hash=input.readString();}else{input.skip(ftype);}break;case 7:if(ftype==Thrift.Type.STRING){this.dashboard_metadata=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_replace_dashboard_args.prototype.write=function(output){output.writeStructBegin('MapD_replace_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}if(this.dashboard_name!==null&&this.dashboard_name!==undefined){output.writeFieldBegin('dashboard_name',Thrift.Type.STRING,3);output.writeString(this.dashboard_name);output.writeFieldEnd();}if(this.dashboard_owner!==null&&this.dashboard_owner!==undefined){output.writeFieldBegin('dashboard_owner',Thrift.Type.STRING,4);output.writeString(this.dashboard_owner);output.writeFieldEnd();}if(this.dashboard_state!==null&&this.dashboard_state!==undefined){output.writeFieldBegin('dashboard_state',Thrift.Type.STRING,5);output.writeString(this.dashboard_state);output.writeFieldEnd();}if(this.image_hash!==null&&this.image_hash!==undefined){output.writeFieldBegin('image_hash',Thrift.Type.STRING,6);output.writeString(this.image_hash);output.writeFieldEnd();}if(this.dashboard_metadata!==null&&this.dashboard_metadata!==undefined){output.writeFieldBegin('dashboard_metadata',Thrift.Type.STRING,7);output.writeString(this.dashboard_metadata);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_replace_dashboard_result=function MapD_replace_dashboard_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_replace_dashboard_result.prototype={};MapD_replace_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_replace_dashboard_result.prototype.write=function(output){output.writeStructBegin('MapD_replace_dashboard_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_delete_dashboard_args=function MapD_delete_dashboard_args(args){this.session=null;this.dashboard_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}}};MapD_delete_dashboard_args.prototype={};MapD_delete_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_delete_dashboard_args.prototype.write=function(output){output.writeStructBegin('MapD_delete_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_delete_dashboard_result=function MapD_delete_dashboard_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_delete_dashboard_result.prototype={};MapD_delete_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_delete_dashboard_result.prototype.write=function(output){output.writeStructBegin('MapD_delete_dashboard_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_share_dashboard_args=function MapD_share_dashboard_args(args){this.session=null;this.dashboard_id=null;this.groups=null;this.objects=null;this.permissions=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}if(args.groups!==undefined&&args.groups!==null){this.groups=Thrift.copyList(args.groups,[null]);}if(args.objects!==undefined&&args.objects!==null){this.objects=Thrift.copyList(args.objects,[null]);}if(args.permissions!==undefined&&args.permissions!==null){this.permissions=new ttypes.TDashboardPermissions(args.permissions);}}};MapD_share_dashboard_args.prototype={};MapD_share_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){var _size382=0;var _rtmp3386;this.groups=[];var _etype385=0;_rtmp3386=input.readListBegin();_etype385=_rtmp3386.etype;_size382=_rtmp3386.size;for(var _i387=0;_i387<_size382;++_i387){var elem388=null;elem388=input.readString();this.groups.push(elem388);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.LIST){var _size389=0;var _rtmp3393;this.objects=[];var _etype392=0;_rtmp3393=input.readListBegin();_etype392=_rtmp3393.etype;_size389=_rtmp3393.size;for(var _i394=0;_i394<_size389;++_i394){var elem395=null;elem395=input.readString();this.objects.push(elem395);}input.readListEnd();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRUCT){this.permissions=new ttypes.TDashboardPermissions();this.permissions.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_share_dashboard_args.prototype.write=function(output){output.writeStructBegin('MapD_share_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}if(this.groups!==null&&this.groups!==undefined){output.writeFieldBegin('groups',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRING,this.groups.length);for(var iter396 in this.groups){if(this.groups.hasOwnProperty(iter396)){iter396=this.groups[iter396];output.writeString(iter396);}}output.writeListEnd();output.writeFieldEnd();}if(this.objects!==null&&this.objects!==undefined){output.writeFieldBegin('objects',Thrift.Type.LIST,4);output.writeListBegin(Thrift.Type.STRING,this.objects.length);for(var iter397 in this.objects){if(this.objects.hasOwnProperty(iter397)){iter397=this.objects[iter397];output.writeString(iter397);}}output.writeListEnd();output.writeFieldEnd();}if(this.permissions!==null&&this.permissions!==undefined){output.writeFieldBegin('permissions',Thrift.Type.STRUCT,5);this.permissions.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_share_dashboard_result=function MapD_share_dashboard_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_share_dashboard_result.prototype={};MapD_share_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_share_dashboard_result.prototype.write=function(output){output.writeStructBegin('MapD_share_dashboard_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_unshare_dashboard_args=function MapD_unshare_dashboard_args(args){this.session=null;this.dashboard_id=null;this.groups=null;this.objects=null;this.permissions=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}if(args.groups!==undefined&&args.groups!==null){this.groups=Thrift.copyList(args.groups,[null]);}if(args.objects!==undefined&&args.objects!==null){this.objects=Thrift.copyList(args.objects,[null]);}if(args.permissions!==undefined&&args.permissions!==null){this.permissions=new ttypes.TDashboardPermissions(args.permissions);}}};MapD_unshare_dashboard_args.prototype={};MapD_unshare_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){var _size398=0;var _rtmp3402;this.groups=[];var _etype401=0;_rtmp3402=input.readListBegin();_etype401=_rtmp3402.etype;_size398=_rtmp3402.size;for(var _i403=0;_i403<_size398;++_i403){var elem404=null;elem404=input.readString();this.groups.push(elem404);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.LIST){var _size405=0;var _rtmp3409;this.objects=[];var _etype408=0;_rtmp3409=input.readListBegin();_etype408=_rtmp3409.etype;_size405=_rtmp3409.size;for(var _i410=0;_i410<_size405;++_i410){var elem411=null;elem411=input.readString();this.objects.push(elem411);}input.readListEnd();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRUCT){this.permissions=new ttypes.TDashboardPermissions();this.permissions.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_unshare_dashboard_args.prototype.write=function(output){output.writeStructBegin('MapD_unshare_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}if(this.groups!==null&&this.groups!==undefined){output.writeFieldBegin('groups',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRING,this.groups.length);for(var iter412 in this.groups){if(this.groups.hasOwnProperty(iter412)){iter412=this.groups[iter412];output.writeString(iter412);}}output.writeListEnd();output.writeFieldEnd();}if(this.objects!==null&&this.objects!==undefined){output.writeFieldBegin('objects',Thrift.Type.LIST,4);output.writeListBegin(Thrift.Type.STRING,this.objects.length);for(var iter413 in this.objects){if(this.objects.hasOwnProperty(iter413)){iter413=this.objects[iter413];output.writeString(iter413);}}output.writeListEnd();output.writeFieldEnd();}if(this.permissions!==null&&this.permissions!==undefined){output.writeFieldBegin('permissions',Thrift.Type.STRUCT,5);this.permissions.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_unshare_dashboard_result=function MapD_unshare_dashboard_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_unshare_dashboard_result.prototype={};MapD_unshare_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_unshare_dashboard_result.prototype.write=function(output){output.writeStructBegin('MapD_unshare_dashboard_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_link_view_args=function MapD_get_link_view_args(args){this.session=null;this.link=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.link!==undefined&&args.link!==null){this.link=args.link;}}};MapD_get_link_view_args.prototype={};MapD_get_link_view_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.link=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_link_view_args.prototype.write=function(output){output.writeStructBegin('MapD_get_link_view_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.link!==null&&this.link!==undefined){output.writeFieldBegin('link',Thrift.Type.STRING,2);output.writeString(this.link);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_link_view_result=function MapD_get_link_view_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TFrontendView(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_link_view_result.prototype={};MapD_get_link_view_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TFrontendView();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_link_view_result.prototype.write=function(output){output.writeStructBegin('MapD_get_link_view_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_create_link_args=function MapD_create_link_args(args){this.session=null;this.view_state=null;this.view_metadata=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.view_state!==undefined&&args.view_state!==null){this.view_state=args.view_state;}if(args.view_metadata!==undefined&&args.view_metadata!==null){this.view_metadata=args.view_metadata;}}};MapD_create_link_args.prototype={};MapD_create_link_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.view_state=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.view_metadata=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_create_link_args.prototype.write=function(output){output.writeStructBegin('MapD_create_link_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.view_state!==null&&this.view_state!==undefined){output.writeFieldBegin('view_state',Thrift.Type.STRING,2);output.writeString(this.view_state);output.writeFieldEnd();}if(this.view_metadata!==null&&this.view_metadata!==undefined){output.writeFieldBegin('view_metadata',Thrift.Type.STRING,3);output.writeString(this.view_metadata);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_create_link_result=function MapD_create_link_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_create_link_result.prototype={};MapD_create_link_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_create_link_result.prototype.write=function(output){output.writeStructBegin('MapD_create_link_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_load_table_binary_args=function MapD_load_table_binary_args(args){this.session=null;this.table_name=null;this.rows=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.rows!==undefined&&args.rows!==null){this.rows=Thrift.copyList(args.rows,[ttypes.TRow]);}}};MapD_load_table_binary_args.prototype={};MapD_load_table_binary_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){var _size414=0;var _rtmp3418;this.rows=[];var _etype417=0;_rtmp3418=input.readListBegin();_etype417=_rtmp3418.etype;_size414=_rtmp3418.size;for(var _i419=0;_i419<_size414;++_i419){var elem420=null;elem420=new ttypes.TRow();elem420.read(input);this.rows.push(elem420);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_load_table_binary_args.prototype.write=function(output){output.writeStructBegin('MapD_load_table_binary_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.rows!==null&&this.rows!==undefined){output.writeFieldBegin('rows',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.rows.length);for(var iter421 in this.rows){if(this.rows.hasOwnProperty(iter421)){iter421=this.rows[iter421];iter421.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_load_table_binary_result=function MapD_load_table_binary_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_load_table_binary_result.prototype={};MapD_load_table_binary_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_load_table_binary_result.prototype.write=function(output){output.writeStructBegin('MapD_load_table_binary_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_load_table_binary_columnar_args=function MapD_load_table_binary_columnar_args(args){this.session=null;this.table_name=null;this.cols=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.cols!==undefined&&args.cols!==null){this.cols=Thrift.copyList(args.cols,[ttypes.TColumn]);}}};MapD_load_table_binary_columnar_args.prototype={};MapD_load_table_binary_columnar_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){var _size422=0;var _rtmp3426;this.cols=[];var _etype425=0;_rtmp3426=input.readListBegin();_etype425=_rtmp3426.etype;_size422=_rtmp3426.size;for(var _i427=0;_i427<_size422;++_i427){var elem428=null;elem428=new ttypes.TColumn();elem428.read(input);this.cols.push(elem428);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_load_table_binary_columnar_args.prototype.write=function(output){output.writeStructBegin('MapD_load_table_binary_columnar_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.cols!==null&&this.cols!==undefined){output.writeFieldBegin('cols',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.cols.length);for(var iter429 in this.cols){if(this.cols.hasOwnProperty(iter429)){iter429=this.cols[iter429];iter429.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_load_table_binary_columnar_result=function MapD_load_table_binary_columnar_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_load_table_binary_columnar_result.prototype={};MapD_load_table_binary_columnar_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_load_table_binary_columnar_result.prototype.write=function(output){output.writeStructBegin('MapD_load_table_binary_columnar_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_load_table_binary_arrow_args=function MapD_load_table_binary_arrow_args(args){this.session=null;this.table_name=null;this.arrow_stream=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.arrow_stream!==undefined&&args.arrow_stream!==null){this.arrow_stream=args.arrow_stream;}}};MapD_load_table_binary_arrow_args.prototype={};MapD_load_table_binary_arrow_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.arrow_stream=input.readBinary();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_load_table_binary_arrow_args.prototype.write=function(output){output.writeStructBegin('MapD_load_table_binary_arrow_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.arrow_stream!==null&&this.arrow_stream!==undefined){output.writeFieldBegin('arrow_stream',Thrift.Type.STRING,3);output.writeBinary(this.arrow_stream);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_load_table_binary_arrow_result=function MapD_load_table_binary_arrow_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_load_table_binary_arrow_result.prototype={};MapD_load_table_binary_arrow_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_load_table_binary_arrow_result.prototype.write=function(output){output.writeStructBegin('MapD_load_table_binary_arrow_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_load_table_args=function MapD_load_table_args(args){this.session=null;this.table_name=null;this.rows=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.rows!==undefined&&args.rows!==null){this.rows=Thrift.copyList(args.rows,[ttypes.TStringRow]);}}};MapD_load_table_args.prototype={};MapD_load_table_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){var _size430=0;var _rtmp3434;this.rows=[];var _etype433=0;_rtmp3434=input.readListBegin();_etype433=_rtmp3434.etype;_size430=_rtmp3434.size;for(var _i435=0;_i435<_size430;++_i435){var elem436=null;elem436=new ttypes.TStringRow();elem436.read(input);this.rows.push(elem436);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_load_table_args.prototype.write=function(output){output.writeStructBegin('MapD_load_table_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.rows!==null&&this.rows!==undefined){output.writeFieldBegin('rows',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.rows.length);for(var iter437 in this.rows){if(this.rows.hasOwnProperty(iter437)){iter437=this.rows[iter437];iter437.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_load_table_result=function MapD_load_table_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_load_table_result.prototype={};MapD_load_table_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_load_table_result.prototype.write=function(output){output.writeStructBegin('MapD_load_table_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_detect_column_types_args=function MapD_detect_column_types_args(args){this.session=null;this.file_name=null;this.copy_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.file_name!==undefined&&args.file_name!==null){this.file_name=args.file_name;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}}};MapD_detect_column_types_args.prototype={};MapD_detect_column_types_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.file_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_detect_column_types_args.prototype.write=function(output){output.writeStructBegin('MapD_detect_column_types_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.file_name!==null&&this.file_name!==undefined){output.writeFieldBegin('file_name',Thrift.Type.STRING,2);output.writeString(this.file_name);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,3);this.copy_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_detect_column_types_result=function MapD_detect_column_types_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TDetectResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_detect_column_types_result.prototype={};MapD_detect_column_types_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TDetectResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_detect_column_types_result.prototype.write=function(output){output.writeStructBegin('MapD_detect_column_types_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_create_table_args=function MapD_create_table_args(args){this.session=null;this.table_name=null;this.row_desc=null;this.table_type=0;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.row_desc!==undefined&&args.row_desc!==null){this.row_desc=Thrift.copyList(args.row_desc,[ttypes.TColumnType]);}if(args.table_type!==undefined&&args.table_type!==null){this.table_type=args.table_type;}}};MapD_create_table_args.prototype={};MapD_create_table_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){var _size438=0;var _rtmp3442;this.row_desc=[];var _etype441=0;_rtmp3442=input.readListBegin();_etype441=_rtmp3442.etype;_size438=_rtmp3442.size;for(var _i443=0;_i443<_size438;++_i443){var elem444=null;elem444=new ttypes.TColumnType();elem444.read(input);this.row_desc.push(elem444);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.table_type=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_create_table_args.prototype.write=function(output){output.writeStructBegin('MapD_create_table_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.row_desc!==null&&this.row_desc!==undefined){output.writeFieldBegin('row_desc',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.row_desc.length);for(var iter445 in this.row_desc){if(this.row_desc.hasOwnProperty(iter445)){iter445=this.row_desc[iter445];iter445.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.table_type!==null&&this.table_type!==undefined){output.writeFieldBegin('table_type',Thrift.Type.I32,4);output.writeI32(this.table_type);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_create_table_result=function MapD_create_table_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_create_table_result.prototype={};MapD_create_table_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_create_table_result.prototype.write=function(output){output.writeStructBegin('MapD_create_table_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_import_table_args=function MapD_import_table_args(args){this.session=null;this.table_name=null;this.file_name=null;this.copy_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.file_name!==undefined&&args.file_name!==null){this.file_name=args.file_name;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}}};MapD_import_table_args.prototype={};MapD_import_table_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.file_name=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_import_table_args.prototype.write=function(output){output.writeStructBegin('MapD_import_table_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.file_name!==null&&this.file_name!==undefined){output.writeFieldBegin('file_name',Thrift.Type.STRING,3);output.writeString(this.file_name);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,4);this.copy_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_import_table_result=function MapD_import_table_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_import_table_result.prototype={};MapD_import_table_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_import_table_result.prototype.write=function(output){output.writeStructBegin('MapD_import_table_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_import_geo_table_args=function MapD_import_geo_table_args(args){this.session=null;this.table_name=null;this.file_name=null;this.copy_params=null;this.row_desc=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.file_name!==undefined&&args.file_name!==null){this.file_name=args.file_name;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}if(args.row_desc!==undefined&&args.row_desc!==null){this.row_desc=Thrift.copyList(args.row_desc,[ttypes.TColumnType]);}}};MapD_import_geo_table_args.prototype={};MapD_import_geo_table_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.file_name=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.LIST){var _size446=0;var _rtmp3450;this.row_desc=[];var _etype449=0;_rtmp3450=input.readListBegin();_etype449=_rtmp3450.etype;_size446=_rtmp3450.size;for(var _i451=0;_i451<_size446;++_i451){var elem452=null;elem452=new ttypes.TColumnType();elem452.read(input);this.row_desc.push(elem452);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_import_geo_table_args.prototype.write=function(output){output.writeStructBegin('MapD_import_geo_table_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.file_name!==null&&this.file_name!==undefined){output.writeFieldBegin('file_name',Thrift.Type.STRING,3);output.writeString(this.file_name);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,4);this.copy_params.write(output);output.writeFieldEnd();}if(this.row_desc!==null&&this.row_desc!==undefined){output.writeFieldBegin('row_desc',Thrift.Type.LIST,5);output.writeListBegin(Thrift.Type.STRUCT,this.row_desc.length);for(var iter453 in this.row_desc){if(this.row_desc.hasOwnProperty(iter453)){iter453=this.row_desc[iter453];iter453.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_import_geo_table_result=function MapD_import_geo_table_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_import_geo_table_result.prototype={};MapD_import_geo_table_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_import_geo_table_result.prototype.write=function(output){output.writeStructBegin('MapD_import_geo_table_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_import_table_status_args=function MapD_import_table_status_args(args){this.session=null;this.import_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.import_id!==undefined&&args.import_id!==null){this.import_id=args.import_id;}}};MapD_import_table_status_args.prototype={};MapD_import_table_status_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.import_id=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_import_table_status_args.prototype.write=function(output){output.writeStructBegin('MapD_import_table_status_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.import_id!==null&&this.import_id!==undefined){output.writeFieldBegin('import_id',Thrift.Type.STRING,2);output.writeString(this.import_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_import_table_status_result=function MapD_import_table_status_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TImportStatus(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_import_table_status_result.prototype={};MapD_import_table_status_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TImportStatus();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_import_table_status_result.prototype.write=function(output){output.writeStructBegin('MapD_import_table_status_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_start_query_args=function MapD_start_query_args(args){this.session=null;this.query_ra=null;this.just_explain=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query_ra!==undefined&&args.query_ra!==null){this.query_ra=args.query_ra;}if(args.just_explain!==undefined&&args.just_explain!==null){this.just_explain=args.just_explain;}}};MapD_start_query_args.prototype={};MapD_start_query_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query_ra=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.BOOL){this.just_explain=input.readBool();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_start_query_args.prototype.write=function(output){output.writeStructBegin('MapD_start_query_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query_ra!==null&&this.query_ra!==undefined){output.writeFieldBegin('query_ra',Thrift.Type.STRING,2);output.writeString(this.query_ra);output.writeFieldEnd();}if(this.just_explain!==null&&this.just_explain!==undefined){output.writeFieldBegin('just_explain',Thrift.Type.BOOL,3);output.writeBool(this.just_explain);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_start_query_result=function MapD_start_query_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TPendingQuery(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_start_query_result.prototype={};MapD_start_query_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TPendingQuery();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_start_query_result.prototype.write=function(output){output.writeStructBegin('MapD_start_query_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_execute_first_step_args=function MapD_execute_first_step_args(args){this.pending_query=null;if(args){if(args.pending_query!==undefined&&args.pending_query!==null){this.pending_query=new ttypes.TPendingQuery(args.pending_query);}}};MapD_execute_first_step_args.prototype={};MapD_execute_first_step_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.pending_query=new ttypes.TPendingQuery();this.pending_query.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_execute_first_step_args.prototype.write=function(output){output.writeStructBegin('MapD_execute_first_step_args');if(this.pending_query!==null&&this.pending_query!==undefined){output.writeFieldBegin('pending_query',Thrift.Type.STRUCT,1);this.pending_query.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_execute_first_step_result=function MapD_execute_first_step_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TStepResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_execute_first_step_result.prototype={};MapD_execute_first_step_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TStepResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_execute_first_step_result.prototype.write=function(output){output.writeStructBegin('MapD_execute_first_step_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_broadcast_serialized_rows_args=function MapD_broadcast_serialized_rows_args(args){this.serialized_rows=null;this.row_desc=null;this.query_id=null;if(args){if(args.serialized_rows!==undefined&&args.serialized_rows!==null){this.serialized_rows=args.serialized_rows;}if(args.row_desc!==undefined&&args.row_desc!==null){this.row_desc=Thrift.copyList(args.row_desc,[ttypes.TColumnType]);}if(args.query_id!==undefined&&args.query_id!==null){this.query_id=args.query_id;}}};MapD_broadcast_serialized_rows_args.prototype={};MapD_broadcast_serialized_rows_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.serialized_rows=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.LIST){var _size454=0;var _rtmp3458;this.row_desc=[];var _etype457=0;_rtmp3458=input.readListBegin();_etype457=_rtmp3458.etype;_size454=_rtmp3458.size;for(var _i459=0;_i459<_size454;++_i459){var elem460=null;elem460=new ttypes.TColumnType();elem460.read(input);this.row_desc.push(elem460);}input.readListEnd();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I64){this.query_id=input.readI64();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_broadcast_serialized_rows_args.prototype.write=function(output){output.writeStructBegin('MapD_broadcast_serialized_rows_args');if(this.serialized_rows!==null&&this.serialized_rows!==undefined){output.writeFieldBegin('serialized_rows',Thrift.Type.STRING,1);output.writeString(this.serialized_rows);output.writeFieldEnd();}if(this.row_desc!==null&&this.row_desc!==undefined){output.writeFieldBegin('row_desc',Thrift.Type.LIST,2);output.writeListBegin(Thrift.Type.STRUCT,this.row_desc.length);for(var iter461 in this.row_desc){if(this.row_desc.hasOwnProperty(iter461)){iter461=this.row_desc[iter461];iter461.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.query_id!==null&&this.query_id!==undefined){output.writeFieldBegin('query_id',Thrift.Type.I64,3);output.writeI64(this.query_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_broadcast_serialized_rows_result=function MapD_broadcast_serialized_rows_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_broadcast_serialized_rows_result.prototype={};MapD_broadcast_serialized_rows_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_broadcast_serialized_rows_result.prototype.write=function(output){output.writeStructBegin('MapD_broadcast_serialized_rows_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_start_render_query_args=function MapD_start_render_query_args(args){this.session=null;this.widget_id=null;this.node_idx=null;this.vega_json=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.widget_id!==undefined&&args.widget_id!==null){this.widget_id=args.widget_id;}if(args.node_idx!==undefined&&args.node_idx!==null){this.node_idx=args.node_idx;}if(args.vega_json!==undefined&&args.vega_json!==null){this.vega_json=args.vega_json;}}};MapD_start_render_query_args.prototype={};MapD_start_render_query_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I64){this.widget_id=input.readI64();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I16){this.node_idx=input.readI16();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.vega_json=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_start_render_query_args.prototype.write=function(output){output.writeStructBegin('MapD_start_render_query_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.widget_id!==null&&this.widget_id!==undefined){output.writeFieldBegin('widget_id',Thrift.Type.I64,2);output.writeI64(this.widget_id);output.writeFieldEnd();}if(this.node_idx!==null&&this.node_idx!==undefined){output.writeFieldBegin('node_idx',Thrift.Type.I16,3);output.writeI16(this.node_idx);output.writeFieldEnd();}if(this.vega_json!==null&&this.vega_json!==undefined){output.writeFieldBegin('vega_json',Thrift.Type.STRING,4);output.writeString(this.vega_json);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_start_render_query_result=function MapD_start_render_query_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TPendingRenderQuery(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_start_render_query_result.prototype={};MapD_start_render_query_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TPendingRenderQuery();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_start_render_query_result.prototype.write=function(output){output.writeStructBegin('MapD_start_render_query_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_execute_next_render_step_args=function MapD_execute_next_render_step_args(args){this.pending_render=null;this.merged_data=null;if(args){if(args.pending_render!==undefined&&args.pending_render!==null){this.pending_render=new ttypes.TPendingRenderQuery(args.pending_render);}if(args.merged_data!==undefined&&args.merged_data!==null){this.merged_data=Thrift.copyMap(args.merged_data,[Thrift.copyMap,Thrift.copyMap,Thrift.copyMap,Thrift.copyList,ttypes.TRenderDatum]);}}};MapD_execute_next_render_step_args.prototype={};MapD_execute_next_render_step_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.pending_render=new ttypes.TPendingRenderQuery();this.pending_render.read(input);}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.MAP){var _size462=0;var _rtmp3466;this.merged_data={};var _ktype463=0;var _vtype464=0;_rtmp3466=input.readMapBegin();_ktype463=_rtmp3466.ktype;_vtype464=_rtmp3466.vtype;_size462=_rtmp3466.size;for(var _i467=0;_i467<_size462;++_i467){var key468=null;var val469=null;key468=input.readString();var _size470=0;var _rtmp3474;val469={};var _ktype471=0;var _vtype472=0;_rtmp3474=input.readMapBegin();_ktype471=_rtmp3474.ktype;_vtype472=_rtmp3474.vtype;_size470=_rtmp3474.size;for(var _i475=0;_i475<_size470;++_i475){var key476=null;var val477=null;key476=input.readString();var _size478=0;var _rtmp3482;val477={};var _ktype479=0;var _vtype480=0;_rtmp3482=input.readMapBegin();_ktype479=_rtmp3482.ktype;_vtype480=_rtmp3482.vtype;_size478=_rtmp3482.size;for(var _i483=0;_i483<_size478;++_i483){var key484=null;var val485=null;key484=input.readString();var _size486=0;var _rtmp3490;val485={};var _ktype487=0;var _vtype488=0;_rtmp3490=input.readMapBegin();_ktype487=_rtmp3490.ktype;_vtype488=_rtmp3490.vtype;_size486=_rtmp3490.size;for(var _i491=0;_i491<_size486;++_i491){var key492=null;var val493=null;key492=input.readString();var _size494=0;var _rtmp3498;val493=[];var _etype497=0;_rtmp3498=input.readListBegin();_etype497=_rtmp3498.etype;_size494=_rtmp3498.size;for(var _i499=0;_i499<_size494;++_i499){var elem500=null;elem500=new ttypes.TRenderDatum();elem500.read(input);val493.push(elem500);}input.readListEnd();val485[key492]=val493;}input.readMapEnd();val477[key484]=val485;}input.readMapEnd();val469[key476]=val477;}input.readMapEnd();this.merged_data[key468]=val469;}input.readMapEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_execute_next_render_step_args.prototype.write=function(output){output.writeStructBegin('MapD_execute_next_render_step_args');if(this.pending_render!==null&&this.pending_render!==undefined){output.writeFieldBegin('pending_render',Thrift.Type.STRUCT,1);this.pending_render.write(output);output.writeFieldEnd();}if(this.merged_data!==null&&this.merged_data!==undefined){output.writeFieldBegin('merged_data',Thrift.Type.MAP,2);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.MAP,Thrift.objectLength(this.merged_data));for(var kiter501 in this.merged_data){if(this.merged_data.hasOwnProperty(kiter501)){var viter502=this.merged_data[kiter501];output.writeString(kiter501);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.MAP,Thrift.objectLength(viter502));for(var kiter503 in viter502){if(viter502.hasOwnProperty(kiter503)){var viter504=viter502[kiter503];output.writeString(kiter503);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.MAP,Thrift.objectLength(viter504));for(var kiter505 in viter504){if(viter504.hasOwnProperty(kiter505)){var viter506=viter504[kiter505];output.writeString(kiter505);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.LIST,Thrift.objectLength(viter506));for(var kiter507 in viter506){if(viter506.hasOwnProperty(kiter507)){var viter508=viter506[kiter507];output.writeString(kiter507);output.writeListBegin(Thrift.Type.STRUCT,viter508.length);for(var iter509 in viter508){if(viter508.hasOwnProperty(iter509)){iter509=viter508[iter509];iter509.write(output);}}output.writeListEnd();}}output.writeMapEnd();}}output.writeMapEnd();}}output.writeMapEnd();}}output.writeMapEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_execute_next_render_step_result=function MapD_execute_next_render_step_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TRenderStepResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_execute_next_render_step_result.prototype={};MapD_execute_next_render_step_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TRenderStepResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_execute_next_render_step_result.prototype.write=function(output){output.writeStructBegin('MapD_execute_next_render_step_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_insert_data_args=function MapD_insert_data_args(args){this.session=null;this.insert_data=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.insert_data!==undefined&&args.insert_data!==null){this.insert_data=new ttypes.TInsertData(args.insert_data);}}};MapD_insert_data_args.prototype={};MapD_insert_data_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRUCT){this.insert_data=new ttypes.TInsertData();this.insert_data.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_insert_data_args.prototype.write=function(output){output.writeStructBegin('MapD_insert_data_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.insert_data!==null&&this.insert_data!==undefined){output.writeFieldBegin('insert_data',Thrift.Type.STRUCT,2);this.insert_data.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_insert_data_result=function MapD_insert_data_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_insert_data_result.prototype={};MapD_insert_data_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_insert_data_result.prototype.write=function(output){output.writeStructBegin('MapD_insert_data_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_checkpoint_args=function MapD_checkpoint_args(args){this.session=null;this.db_id=null;this.table_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.db_id!==undefined&&args.db_id!==null){this.db_id=args.db_id;}if(args.table_id!==undefined&&args.table_id!==null){this.table_id=args.table_id;}}};MapD_checkpoint_args.prototype={};MapD_checkpoint_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.db_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.table_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_checkpoint_args.prototype.write=function(output){output.writeStructBegin('MapD_checkpoint_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.db_id!==null&&this.db_id!==undefined){output.writeFieldBegin('db_id',Thrift.Type.I32,2);output.writeI32(this.db_id);output.writeFieldEnd();}if(this.table_id!==null&&this.table_id!==undefined){output.writeFieldBegin('table_id',Thrift.Type.I32,3);output.writeI32(this.table_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_checkpoint_result=function MapD_checkpoint_result(args){this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_checkpoint_result.prototype={};MapD_checkpoint_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_checkpoint_result.prototype.write=function(output){output.writeStructBegin('MapD_checkpoint_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_table_descriptor_args=function MapD_get_table_descriptor_args(args){this.session=null;this.table_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}}};MapD_get_table_descriptor_args.prototype={};MapD_get_table_descriptor_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_table_descriptor_args.prototype.write=function(output){output.writeStructBegin('MapD_get_table_descriptor_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_table_descriptor_result=function MapD_get_table_descriptor_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyMap(args.success,[ttypes.TColumnType]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_table_descriptor_result.prototype={};MapD_get_table_descriptor_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.MAP){var _size510=0;var _rtmp3514;this.success={};var _ktype511=0;var _vtype512=0;_rtmp3514=input.readMapBegin();_ktype511=_rtmp3514.ktype;_vtype512=_rtmp3514.vtype;_size510=_rtmp3514.size;for(var _i515=0;_i515<_size510;++_i515){var key516=null;var val517=null;key516=input.readString();val517=new ttypes.TColumnType();val517.read(input);this.success[key516]=val517;}input.readMapEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_table_descriptor_result.prototype.write=function(output){output.writeStructBegin('MapD_get_table_descriptor_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.MAP,0);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.STRUCT,Thrift.objectLength(this.success));for(var kiter518 in this.success){if(this.success.hasOwnProperty(kiter518)){var viter519=this.success[kiter518];output.writeString(kiter518);viter519.write(output);}}output.writeMapEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_row_descriptor_args=function MapD_get_row_descriptor_args(args){this.session=null;this.table_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}}};MapD_get_row_descriptor_args.prototype={};MapD_get_row_descriptor_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_row_descriptor_args.prototype.write=function(output){output.writeStructBegin('MapD_get_row_descriptor_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_row_descriptor_result=function MapD_get_row_descriptor_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TColumnType]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_row_descriptor_result.prototype={};MapD_get_row_descriptor_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size520=0;var _rtmp3524;this.success=[];var _etype523=0;_rtmp3524=input.readListBegin();_etype523=_rtmp3524.etype;_size520=_rtmp3524.size;for(var _i525=0;_i525<_size520;++_i525){var elem526=null;elem526=new ttypes.TColumnType();elem526.read(input);this.success.push(elem526);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_row_descriptor_result.prototype.write=function(output){output.writeStructBegin('MapD_get_row_descriptor_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter527 in this.success){if(this.success.hasOwnProperty(iter527)){iter527=this.success[iter527];iter527.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_roles_args=function MapD_get_roles_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};MapD_get_roles_args.prototype={};MapD_get_roles_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_roles_args.prototype.write=function(output){output.writeStructBegin('MapD_get_roles_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_roles_result=function MapD_get_roles_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_roles_result.prototype={};MapD_get_roles_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size528=0;var _rtmp3532;this.success=[];var _etype531=0;_rtmp3532=input.readListBegin();_etype531=_rtmp3532.etype;_size528=_rtmp3532.size;for(var _i533=0;_i533<_size528;++_i533){var elem534=null;elem534=input.readString();this.success.push(elem534);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_roles_result.prototype.write=function(output){output.writeStructBegin('MapD_get_roles_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter535 in this.success){if(this.success.hasOwnProperty(iter535)){iter535=this.success[iter535];output.writeString(iter535);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_db_objects_for_grantee_args=function MapD_get_db_objects_for_grantee_args(args){this.session=null;this.roleName=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.roleName!==undefined&&args.roleName!==null){this.roleName=args.roleName;}}};MapD_get_db_objects_for_grantee_args.prototype={};MapD_get_db_objects_for_grantee_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.roleName=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_db_objects_for_grantee_args.prototype.write=function(output){output.writeStructBegin('MapD_get_db_objects_for_grantee_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.roleName!==null&&this.roleName!==undefined){output.writeFieldBegin('roleName',Thrift.Type.STRING,2);output.writeString(this.roleName);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_db_objects_for_grantee_result=function MapD_get_db_objects_for_grantee_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDBObject]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_db_objects_for_grantee_result.prototype={};MapD_get_db_objects_for_grantee_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size536=0;var _rtmp3540;this.success=[];var _etype539=0;_rtmp3540=input.readListBegin();_etype539=_rtmp3540.etype;_size536=_rtmp3540.size;for(var _i541=0;_i541<_size536;++_i541){var elem542=null;elem542=new ttypes.TDBObject();elem542.read(input);this.success.push(elem542);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_db_objects_for_grantee_result.prototype.write=function(output){output.writeStructBegin('MapD_get_db_objects_for_grantee_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter543 in this.success){if(this.success.hasOwnProperty(iter543)){iter543=this.success[iter543];iter543.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_db_object_privs_args=function MapD_get_db_object_privs_args(args){this.session=null;this.objectName=null;this.type=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.objectName!==undefined&&args.objectName!==null){this.objectName=args.objectName;}if(args.type!==undefined&&args.type!==null){this.type=args.type;}}};MapD_get_db_object_privs_args.prototype={};MapD_get_db_object_privs_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.objectName=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.type=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_db_object_privs_args.prototype.write=function(output){output.writeStructBegin('MapD_get_db_object_privs_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.objectName!==null&&this.objectName!==undefined){output.writeFieldBegin('objectName',Thrift.Type.STRING,2);output.writeString(this.objectName);output.writeFieldEnd();}if(this.type!==null&&this.type!==undefined){output.writeFieldBegin('type',Thrift.Type.I32,3);output.writeI32(this.type);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_db_object_privs_result=function MapD_get_db_object_privs_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDBObject]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_db_object_privs_result.prototype={};MapD_get_db_object_privs_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size544=0;var _rtmp3548;this.success=[];var _etype547=0;_rtmp3548=input.readListBegin();_etype547=_rtmp3548.etype;_size544=_rtmp3548.size;for(var _i549=0;_i549<_size544;++_i549){var elem550=null;elem550=new ttypes.TDBObject();elem550.read(input);this.success.push(elem550);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_db_object_privs_result.prototype.write=function(output){output.writeStructBegin('MapD_get_db_object_privs_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter551 in this.success){if(this.success.hasOwnProperty(iter551)){iter551=this.success[iter551];iter551.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_all_roles_for_user_args=function MapD_get_all_roles_for_user_args(args){this.session=null;this.userName=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.userName!==undefined&&args.userName!==null){this.userName=args.userName;}}};MapD_get_all_roles_for_user_args.prototype={};MapD_get_all_roles_for_user_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.userName=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_all_roles_for_user_args.prototype.write=function(output){output.writeStructBegin('MapD_get_all_roles_for_user_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.userName!==null&&this.userName!==undefined){output.writeFieldBegin('userName',Thrift.Type.STRING,2);output.writeString(this.userName);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_all_roles_for_user_result=function MapD_get_all_roles_for_user_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_all_roles_for_user_result.prototype={};MapD_get_all_roles_for_user_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){var _size552=0;var _rtmp3556;this.success=[];var _etype555=0;_rtmp3556=input.readListBegin();_etype555=_rtmp3556.etype;_size552=_rtmp3556.size;for(var _i557=0;_i557<_size552;++_i557){var elem558=null;elem558=input.readString();this.success.push(elem558);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_all_roles_for_user_result.prototype.write=function(output){output.writeStructBegin('MapD_get_all_roles_for_user_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter559 in this.success){if(this.success.hasOwnProperty(iter559)){iter559=this.success[iter559];output.writeString(iter559);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_set_license_key_args=function MapD_set_license_key_args(args){this.session=null;this.key=null;this.nonce='';if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.key!==undefined&&args.key!==null){this.key=args.key;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}}};MapD_set_license_key_args.prototype={};MapD_set_license_key_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.key=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_set_license_key_args.prototype.write=function(output){output.writeStructBegin('MapD_set_license_key_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.key!==null&&this.key!==undefined){output.writeFieldBegin('key',Thrift.Type.STRING,2);output.writeString(this.key);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,3);output.writeString(this.nonce);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_set_license_key_result=function MapD_set_license_key_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TLicenseInfo(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_set_license_key_result.prototype={};MapD_set_license_key_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TLicenseInfo();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_set_license_key_result.prototype.write=function(output){output.writeStructBegin('MapD_set_license_key_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_license_claims_args=function MapD_get_license_claims_args(args){this.session=null;this.nonce='';if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}}};MapD_get_license_claims_args.prototype={};MapD_get_license_claims_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_license_claims_args.prototype.write=function(output){output.writeStructBegin('MapD_get_license_claims_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,2);output.writeString(this.nonce);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapD_get_license_claims_result=function MapD_get_license_claims_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TMapDException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TLicenseInfo(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};MapD_get_license_claims_result.prototype={};MapD_get_license_claims_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var fname=ret.fname;var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TLicenseInfo();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TMapDException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};MapD_get_license_claims_result.prototype.write=function(output){output.writeStructBegin('MapD_get_license_claims_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var MapDClient=exports.Client=function(output,pClass){this.output=output;this.pClass=pClass;this._seqid=0;this._reqs={};};MapDClient.prototype={};MapDClient.prototype.seqid=function(){return this._seqid;};MapDClient.prototype.new_seqid=function(){return this._seqid+=1;};MapDClient.prototype.connect=function(user,passwd,dbname,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_connect(user,passwd,dbname);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_connect(user,passwd,dbname);}};MapDClient.prototype.send_connect=function(user,passwd,dbname){var output=new this.pClass(this.output);output.writeMessageBegin('connect',Thrift.MessageType.CALL,this.seqid());var args=new MapD_connect_args();args.user=user;args.passwd=passwd;args.dbname=dbname;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_connect=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_connect_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('connect failed: unknown result');};MapDClient.prototype.disconnect=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_disconnect(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_disconnect(session);}};MapDClient.prototype.send_disconnect=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('disconnect',Thrift.MessageType.CALL,this.seqid());var args=new MapD_disconnect_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_disconnect=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_disconnect_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.get_server_status=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_server_status(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_server_status(session);}};MapDClient.prototype.send_get_server_status=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_server_status',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_server_status_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_server_status=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_server_status_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_server_status failed: unknown result');};MapDClient.prototype.get_status=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_status(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_status(session);}};MapDClient.prototype.send_get_status=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_status',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_status_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_status=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_status_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_status failed: unknown result');};MapDClient.prototype.get_hardware_info=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_hardware_info(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_hardware_info(session);}};MapDClient.prototype.send_get_hardware_info=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_hardware_info',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_hardware_info_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_hardware_info=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_hardware_info_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_hardware_info failed: unknown result');};MapDClient.prototype.get_tables=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_tables(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_tables(session);}};MapDClient.prototype.send_get_tables=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_tables',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_tables_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_tables=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_tables_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_tables failed: unknown result');};MapDClient.prototype.get_physical_tables=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_physical_tables(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_physical_tables(session);}};MapDClient.prototype.send_get_physical_tables=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_physical_tables',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_physical_tables_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_physical_tables=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_physical_tables_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_physical_tables failed: unknown result');};MapDClient.prototype.get_views=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_views(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_views(session);}};MapDClient.prototype.send_get_views=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_views',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_views_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_views=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_views_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_views failed: unknown result');};MapDClient.prototype.get_tables_meta=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_tables_meta(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_tables_meta(session);}};MapDClient.prototype.send_get_tables_meta=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_tables_meta',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_tables_meta_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_tables_meta=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_tables_meta_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_tables_meta failed: unknown result');};MapDClient.prototype.get_table_details=function(session,table_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_table_details(session,table_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_table_details(session,table_name);}};MapDClient.prototype.send_get_table_details=function(session,table_name){var output=new this.pClass(this.output);output.writeMessageBegin('get_table_details',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_table_details_args();args.session=session;args.table_name=table_name;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_table_details=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_table_details_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_table_details failed: unknown result');};MapDClient.prototype.get_internal_table_details=function(session,table_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_internal_table_details(session,table_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_internal_table_details(session,table_name);}};MapDClient.prototype.send_get_internal_table_details=function(session,table_name){var output=new this.pClass(this.output);output.writeMessageBegin('get_internal_table_details',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_internal_table_details_args();args.session=session;args.table_name=table_name;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_internal_table_details=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_internal_table_details_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_internal_table_details failed: unknown result');};MapDClient.prototype.get_users=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_users(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_users(session);}};MapDClient.prototype.send_get_users=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_users',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_users_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_users=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_users_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_users failed: unknown result');};MapDClient.prototype.get_databases=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_databases(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_databases(session);}};MapDClient.prototype.send_get_databases=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_databases',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_databases_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_databases=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_databases_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_databases failed: unknown result');};MapDClient.prototype.get_version=function(callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_version();return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_version();}};MapDClient.prototype.send_get_version=function(){var output=new this.pClass(this.output);output.writeMessageBegin('get_version',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_version_args();args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_version=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_version_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_version failed: unknown result');};MapDClient.prototype.start_heap_profile=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_start_heap_profile(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_start_heap_profile(session);}};MapDClient.prototype.send_start_heap_profile=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('start_heap_profile',Thrift.MessageType.CALL,this.seqid());var args=new MapD_start_heap_profile_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_start_heap_profile=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_start_heap_profile_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.stop_heap_profile=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_stop_heap_profile(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_stop_heap_profile(session);}};MapDClient.prototype.send_stop_heap_profile=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('stop_heap_profile',Thrift.MessageType.CALL,this.seqid());var args=new MapD_stop_heap_profile_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_stop_heap_profile=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_stop_heap_profile_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.get_heap_profile=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_heap_profile(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_heap_profile(session);}};MapDClient.prototype.send_get_heap_profile=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_heap_profile',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_heap_profile_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_heap_profile=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_heap_profile_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_heap_profile failed: unknown result');};MapDClient.prototype.get_memory=function(session,memory_level,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_memory(session,memory_level);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_memory(session,memory_level);}};MapDClient.prototype.send_get_memory=function(session,memory_level){var output=new this.pClass(this.output);output.writeMessageBegin('get_memory',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_memory_args();args.session=session;args.memory_level=memory_level;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_memory=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_memory_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_memory failed: unknown result');};MapDClient.prototype.clear_cpu_memory=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_clear_cpu_memory(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_clear_cpu_memory(session);}};MapDClient.prototype.send_clear_cpu_memory=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('clear_cpu_memory',Thrift.MessageType.CALL,this.seqid());var args=new MapD_clear_cpu_memory_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_clear_cpu_memory=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_clear_cpu_memory_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.clear_gpu_memory=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_clear_gpu_memory(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_clear_gpu_memory(session);}};MapDClient.prototype.send_clear_gpu_memory=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('clear_gpu_memory',Thrift.MessageType.CALL,this.seqid());var args=new MapD_clear_gpu_memory_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_clear_gpu_memory=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_clear_gpu_memory_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.set_table_epoch=function(session,db_id,table_id,new_epoch,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_table_epoch(session,db_id,table_id,new_epoch);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_table_epoch(session,db_id,table_id,new_epoch);}};MapDClient.prototype.send_set_table_epoch=function(session,db_id,table_id,new_epoch){var output=new this.pClass(this.output);output.writeMessageBegin('set_table_epoch',Thrift.MessageType.CALL,this.seqid());var args=new MapD_set_table_epoch_args();args.session=session;args.db_id=db_id;args.table_id=table_id;args.new_epoch=new_epoch;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_set_table_epoch=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_set_table_epoch_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.set_table_epoch_by_name=function(session,table_name,new_epoch,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_table_epoch_by_name(session,table_name,new_epoch);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_table_epoch_by_name(session,table_name,new_epoch);}};MapDClient.prototype.send_set_table_epoch_by_name=function(session,table_name,new_epoch){var output=new this.pClass(this.output);output.writeMessageBegin('set_table_epoch_by_name',Thrift.MessageType.CALL,this.seqid());var args=new MapD_set_table_epoch_by_name_args();args.session=session;args.table_name=table_name;args.new_epoch=new_epoch;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_set_table_epoch_by_name=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_set_table_epoch_by_name_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.get_table_epoch=function(session,db_id,table_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_table_epoch(session,db_id,table_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_table_epoch(session,db_id,table_id);}};MapDClient.prototype.send_get_table_epoch=function(session,db_id,table_id){var output=new this.pClass(this.output);output.writeMessageBegin('get_table_epoch',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_table_epoch_args();args.session=session;args.db_id=db_id;args.table_id=table_id;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_table_epoch=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_table_epoch_result();result.read(input);input.readMessageEnd();if(null!==result.success){return callback(null,result.success);}return callback('get_table_epoch failed: unknown result');};MapDClient.prototype.get_table_epoch_by_name=function(session,table_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_table_epoch_by_name(session,table_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_table_epoch_by_name(session,table_name);}};MapDClient.prototype.send_get_table_epoch_by_name=function(session,table_name){var output=new this.pClass(this.output);output.writeMessageBegin('get_table_epoch_by_name',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_table_epoch_by_name_args();args.session=session;args.table_name=table_name;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_table_epoch_by_name=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_table_epoch_by_name_result();result.read(input);input.readMessageEnd();if(null!==result.success){return callback(null,result.success);}return callback('get_table_epoch_by_name failed: unknown result');};MapDClient.prototype.sql_execute=function(session,query,column_format,nonce,first_n,at_most_n,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_sql_execute(session,query,column_format,nonce,first_n,at_most_n);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_sql_execute(session,query,column_format,nonce,first_n,at_most_n);}};MapDClient.prototype.send_sql_execute=function(session,query,column_format,nonce,first_n,at_most_n){var output=new this.pClass(this.output);output.writeMessageBegin('sql_execute',Thrift.MessageType.CALL,this.seqid());var args=new MapD_sql_execute_args();args.session=session;args.query=query;args.column_format=column_format;args.nonce=nonce;args.first_n=first_n;args.at_most_n=at_most_n;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_sql_execute=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_sql_execute_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('sql_execute failed: unknown result');};MapDClient.prototype.sql_execute_df=function(session,query,device_type,device_id,first_n,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_sql_execute_df(session,query,device_type,device_id,first_n);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_sql_execute_df(session,query,device_type,device_id,first_n);}};MapDClient.prototype.send_sql_execute_df=function(session,query,device_type,device_id,first_n){var output=new this.pClass(this.output);output.writeMessageBegin('sql_execute_df',Thrift.MessageType.CALL,this.seqid());var args=new MapD_sql_execute_df_args();args.session=session;args.query=query;args.device_type=device_type;args.device_id=device_id;args.first_n=first_n;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_sql_execute_df=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_sql_execute_df_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('sql_execute_df failed: unknown result');};MapDClient.prototype.sql_execute_gdf=function(session,query,device_id,first_n,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_sql_execute_gdf(session,query,device_id,first_n);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_sql_execute_gdf(session,query,device_id,first_n);}};MapDClient.prototype.send_sql_execute_gdf=function(session,query,device_id,first_n){var output=new this.pClass(this.output);output.writeMessageBegin('sql_execute_gdf',Thrift.MessageType.CALL,this.seqid());var args=new MapD_sql_execute_gdf_args();args.session=session;args.query=query;args.device_id=device_id;args.first_n=first_n;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_sql_execute_gdf=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_sql_execute_gdf_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('sql_execute_gdf failed: unknown result');};MapDClient.prototype.deallocate_df=function(session,df,device_type,device_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_deallocate_df(session,df,device_type,device_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_deallocate_df(session,df,device_type,device_id);}};MapDClient.prototype.send_deallocate_df=function(session,df,device_type,device_id){var output=new this.pClass(this.output);output.writeMessageBegin('deallocate_df',Thrift.MessageType.CALL,this.seqid());var args=new MapD_deallocate_df_args();args.session=session;args.df=df;args.device_type=device_type;args.device_id=device_id;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_deallocate_df=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_deallocate_df_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.interrupt=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_interrupt(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_interrupt(session);}};MapDClient.prototype.send_interrupt=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('interrupt',Thrift.MessageType.CALL,this.seqid());var args=new MapD_interrupt_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_interrupt=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_interrupt_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.sql_validate=function(session,query,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_sql_validate(session,query);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_sql_validate(session,query);}};MapDClient.prototype.send_sql_validate=function(session,query){var output=new this.pClass(this.output);output.writeMessageBegin('sql_validate',Thrift.MessageType.CALL,this.seqid());var args=new MapD_sql_validate_args();args.session=session;args.query=query;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_sql_validate=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_sql_validate_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('sql_validate failed: unknown result');};MapDClient.prototype.get_completion_hints=function(session,sql,cursor,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_completion_hints(session,sql,cursor);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_completion_hints(session,sql,cursor);}};MapDClient.prototype.send_get_completion_hints=function(session,sql,cursor){var output=new this.pClass(this.output);output.writeMessageBegin('get_completion_hints',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_completion_hints_args();args.session=session;args.sql=sql;args.cursor=cursor;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_completion_hints=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_completion_hints_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_completion_hints failed: unknown result');};MapDClient.prototype.set_execution_mode=function(session,mode,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_execution_mode(session,mode);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_execution_mode(session,mode);}};MapDClient.prototype.send_set_execution_mode=function(session,mode){var output=new this.pClass(this.output);output.writeMessageBegin('set_execution_mode',Thrift.MessageType.CALL,this.seqid());var args=new MapD_set_execution_mode_args();args.session=session;args.mode=mode;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_set_execution_mode=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_set_execution_mode_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.render_vega=function(session,widget_id,vega_json,compression_level,nonce,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_render_vega(session,widget_id,vega_json,compression_level,nonce);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_render_vega(session,widget_id,vega_json,compression_level,nonce);}};MapDClient.prototype.send_render_vega=function(session,widget_id,vega_json,compression_level,nonce){var output=new this.pClass(this.output);output.writeMessageBegin('render_vega',Thrift.MessageType.CALL,this.seqid());var args=new MapD_render_vega_args();args.session=session;args.widget_id=widget_id;args.vega_json=vega_json;args.compression_level=compression_level;args.nonce=nonce;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_render_vega=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_render_vega_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('render_vega failed: unknown result');};MapDClient.prototype.get_result_row_for_pixel=function(session,widget_id,pixel,table_col_names,column_format,pixelRadius,nonce,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_result_row_for_pixel(session,widget_id,pixel,table_col_names,column_format,pixelRadius,nonce);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_result_row_for_pixel(session,widget_id,pixel,table_col_names,column_format,pixelRadius,nonce);}};MapDClient.prototype.send_get_result_row_for_pixel=function(session,widget_id,pixel,table_col_names,column_format,pixelRadius,nonce){var output=new this.pClass(this.output);output.writeMessageBegin('get_result_row_for_pixel',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_result_row_for_pixel_args();args.session=session;args.widget_id=widget_id;args.pixel=pixel;args.table_col_names=table_col_names;args.column_format=column_format;args.pixelRadius=pixelRadius;args.nonce=nonce;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_result_row_for_pixel=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_result_row_for_pixel_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_result_row_for_pixel failed: unknown result');};MapDClient.prototype.get_frontend_view=function(session,view_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_frontend_view(session,view_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_frontend_view(session,view_name);}};MapDClient.prototype.send_get_frontend_view=function(session,view_name){var output=new this.pClass(this.output);output.writeMessageBegin('get_frontend_view',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_frontend_view_args();args.session=session;args.view_name=view_name;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_frontend_view=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_frontend_view_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_frontend_view failed: unknown result');};MapDClient.prototype.get_frontend_views=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_frontend_views(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_frontend_views(session);}};MapDClient.prototype.send_get_frontend_views=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_frontend_views',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_frontend_views_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_frontend_views=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_frontend_views_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_frontend_views failed: unknown result');};MapDClient.prototype.create_frontend_view=function(session,view_name,view_state,image_hash,view_metadata,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_create_frontend_view(session,view_name,view_state,image_hash,view_metadata);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_create_frontend_view(session,view_name,view_state,image_hash,view_metadata);}};MapDClient.prototype.send_create_frontend_view=function(session,view_name,view_state,image_hash,view_metadata){var output=new this.pClass(this.output);output.writeMessageBegin('create_frontend_view',Thrift.MessageType.CALL,this.seqid());var args=new MapD_create_frontend_view_args();args.session=session;args.view_name=view_name;args.view_state=view_state;args.image_hash=image_hash;args.view_metadata=view_metadata;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_create_frontend_view=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_create_frontend_view_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.delete_frontend_view=function(session,view_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_delete_frontend_view(session,view_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_delete_frontend_view(session,view_name);}};MapDClient.prototype.send_delete_frontend_view=function(session,view_name){var output=new this.pClass(this.output);output.writeMessageBegin('delete_frontend_view',Thrift.MessageType.CALL,this.seqid());var args=new MapD_delete_frontend_view_args();args.session=session;args.view_name=view_name;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_delete_frontend_view=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_delete_frontend_view_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.get_dashboard=function(session,dashboard_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_dashboard(session,dashboard_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_dashboard(session,dashboard_id);}};MapDClient.prototype.send_get_dashboard=function(session,dashboard_id){var output=new this.pClass(this.output);output.writeMessageBegin('get_dashboard',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_dashboard_args();args.session=session;args.dashboard_id=dashboard_id;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_dashboard failed: unknown result');};MapDClient.prototype.get_dashboards=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_dashboards(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_dashboards(session);}};MapDClient.prototype.send_get_dashboards=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_dashboards',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_dashboards_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_dashboards=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_dashboards_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_dashboards failed: unknown result');};MapDClient.prototype.create_dashboard=function(session,dashboard_name,dashboard_state,image_hash,dashboard_metadata,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_create_dashboard(session,dashboard_name,dashboard_state,image_hash,dashboard_metadata);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_create_dashboard(session,dashboard_name,dashboard_state,image_hash,dashboard_metadata);}};MapDClient.prototype.send_create_dashboard=function(session,dashboard_name,dashboard_state,image_hash,dashboard_metadata){var output=new this.pClass(this.output);output.writeMessageBegin('create_dashboard',Thrift.MessageType.CALL,this.seqid());var args=new MapD_create_dashboard_args();args.session=session;args.dashboard_name=dashboard_name;args.dashboard_state=dashboard_state;args.image_hash=image_hash;args.dashboard_metadata=dashboard_metadata;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_create_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_create_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('create_dashboard failed: unknown result');};MapDClient.prototype.replace_dashboard=function(session,dashboard_id,dashboard_name,dashboard_owner,dashboard_state,image_hash,dashboard_metadata,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_replace_dashboard(session,dashboard_id,dashboard_name,dashboard_owner,dashboard_state,image_hash,dashboard_metadata);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_replace_dashboard(session,dashboard_id,dashboard_name,dashboard_owner,dashboard_state,image_hash,dashboard_metadata);}};MapDClient.prototype.send_replace_dashboard=function(session,dashboard_id,dashboard_name,dashboard_owner,dashboard_state,image_hash,dashboard_metadata){var output=new this.pClass(this.output);output.writeMessageBegin('replace_dashboard',Thrift.MessageType.CALL,this.seqid());var args=new MapD_replace_dashboard_args();args.session=session;args.dashboard_id=dashboard_id;args.dashboard_name=dashboard_name;args.dashboard_owner=dashboard_owner;args.dashboard_state=dashboard_state;args.image_hash=image_hash;args.dashboard_metadata=dashboard_metadata;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_replace_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_replace_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.delete_dashboard=function(session,dashboard_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_delete_dashboard(session,dashboard_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_delete_dashboard(session,dashboard_id);}};MapDClient.prototype.send_delete_dashboard=function(session,dashboard_id){var output=new this.pClass(this.output);output.writeMessageBegin('delete_dashboard',Thrift.MessageType.CALL,this.seqid());var args=new MapD_delete_dashboard_args();args.session=session;args.dashboard_id=dashboard_id;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_delete_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_delete_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.share_dashboard=function(session,dashboard_id,groups,objects,permissions,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_share_dashboard(session,dashboard_id,groups,objects,permissions);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_share_dashboard(session,dashboard_id,groups,objects,permissions);}};MapDClient.prototype.send_share_dashboard=function(session,dashboard_id,groups,objects,permissions){var output=new this.pClass(this.output);output.writeMessageBegin('share_dashboard',Thrift.MessageType.CALL,this.seqid());var args=new MapD_share_dashboard_args();args.session=session;args.dashboard_id=dashboard_id;args.groups=groups;args.objects=objects;args.permissions=permissions;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_share_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_share_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.unshare_dashboard=function(session,dashboard_id,groups,objects,permissions,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_unshare_dashboard(session,dashboard_id,groups,objects,permissions);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_unshare_dashboard(session,dashboard_id,groups,objects,permissions);}};MapDClient.prototype.send_unshare_dashboard=function(session,dashboard_id,groups,objects,permissions){var output=new this.pClass(this.output);output.writeMessageBegin('unshare_dashboard',Thrift.MessageType.CALL,this.seqid());var args=new MapD_unshare_dashboard_args();args.session=session;args.dashboard_id=dashboard_id;args.groups=groups;args.objects=objects;args.permissions=permissions;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_unshare_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_unshare_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.get_link_view=function(session,link,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_link_view(session,link);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_link_view(session,link);}};MapDClient.prototype.send_get_link_view=function(session,link){var output=new this.pClass(this.output);output.writeMessageBegin('get_link_view',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_link_view_args();args.session=session;args.link=link;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_link_view=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_link_view_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_link_view failed: unknown result');};MapDClient.prototype.create_link=function(session,view_state,view_metadata,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_create_link(session,view_state,view_metadata);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_create_link(session,view_state,view_metadata);}};MapDClient.prototype.send_create_link=function(session,view_state,view_metadata){var output=new this.pClass(this.output);output.writeMessageBegin('create_link',Thrift.MessageType.CALL,this.seqid());var args=new MapD_create_link_args();args.session=session;args.view_state=view_state;args.view_metadata=view_metadata;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_create_link=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_create_link_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('create_link failed: unknown result');};MapDClient.prototype.load_table_binary=function(session,table_name,rows,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_load_table_binary(session,table_name,rows);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_load_table_binary(session,table_name,rows);}};MapDClient.prototype.send_load_table_binary=function(session,table_name,rows){var output=new this.pClass(this.output);output.writeMessageBegin('load_table_binary',Thrift.MessageType.CALL,this.seqid());var args=new MapD_load_table_binary_args();args.session=session;args.table_name=table_name;args.rows=rows;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_load_table_binary=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_load_table_binary_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.load_table_binary_columnar=function(session,table_name,cols,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_load_table_binary_columnar(session,table_name,cols);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_load_table_binary_columnar(session,table_name,cols);}};MapDClient.prototype.send_load_table_binary_columnar=function(session,table_name,cols){var output=new this.pClass(this.output);output.writeMessageBegin('load_table_binary_columnar',Thrift.MessageType.CALL,this.seqid());var args=new MapD_load_table_binary_columnar_args();args.session=session;args.table_name=table_name;args.cols=cols;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_load_table_binary_columnar=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_load_table_binary_columnar_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.load_table_binary_arrow=function(session,table_name,arrow_stream,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_load_table_binary_arrow(session,table_name,arrow_stream);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_load_table_binary_arrow(session,table_name,arrow_stream);}};MapDClient.prototype.send_load_table_binary_arrow=function(session,table_name,arrow_stream){var output=new this.pClass(this.output);output.writeMessageBegin('load_table_binary_arrow',Thrift.MessageType.CALL,this.seqid());var args=new MapD_load_table_binary_arrow_args();args.session=session;args.table_name=table_name;args.arrow_stream=arrow_stream;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_load_table_binary_arrow=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_load_table_binary_arrow_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.load_table=function(session,table_name,rows,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_load_table(session,table_name,rows);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_load_table(session,table_name,rows);}};MapDClient.prototype.send_load_table=function(session,table_name,rows){var output=new this.pClass(this.output);output.writeMessageBegin('load_table',Thrift.MessageType.CALL,this.seqid());var args=new MapD_load_table_args();args.session=session;args.table_name=table_name;args.rows=rows;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_load_table=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_load_table_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.detect_column_types=function(session,file_name,copy_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_detect_column_types(session,file_name,copy_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_detect_column_types(session,file_name,copy_params);}};MapDClient.prototype.send_detect_column_types=function(session,file_name,copy_params){var output=new this.pClass(this.output);output.writeMessageBegin('detect_column_types',Thrift.MessageType.CALL,this.seqid());var args=new MapD_detect_column_types_args();args.session=session;args.file_name=file_name;args.copy_params=copy_params;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_detect_column_types=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_detect_column_types_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('detect_column_types failed: unknown result');};MapDClient.prototype.create_table=function(session,table_name,row_desc,table_type,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_create_table(session,table_name,row_desc,table_type);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_create_table(session,table_name,row_desc,table_type);}};MapDClient.prototype.send_create_table=function(session,table_name,row_desc,table_type){var output=new this.pClass(this.output);output.writeMessageBegin('create_table',Thrift.MessageType.CALL,this.seqid());var args=new MapD_create_table_args();args.session=session;args.table_name=table_name;args.row_desc=row_desc;args.table_type=table_type;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_create_table=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_create_table_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.import_table=function(session,table_name,file_name,copy_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_import_table(session,table_name,file_name,copy_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_import_table(session,table_name,file_name,copy_params);}};MapDClient.prototype.send_import_table=function(session,table_name,file_name,copy_params){var output=new this.pClass(this.output);output.writeMessageBegin('import_table',Thrift.MessageType.CALL,this.seqid());var args=new MapD_import_table_args();args.session=session;args.table_name=table_name;args.file_name=file_name;args.copy_params=copy_params;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_import_table=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_import_table_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.import_geo_table=function(session,table_name,file_name,copy_params,row_desc,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_import_geo_table(session,table_name,file_name,copy_params,row_desc);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_import_geo_table(session,table_name,file_name,copy_params,row_desc);}};MapDClient.prototype.send_import_geo_table=function(session,table_name,file_name,copy_params,row_desc){var output=new this.pClass(this.output);output.writeMessageBegin('import_geo_table',Thrift.MessageType.CALL,this.seqid());var args=new MapD_import_geo_table_args();args.session=session;args.table_name=table_name;args.file_name=file_name;args.copy_params=copy_params;args.row_desc=row_desc;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_import_geo_table=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_import_geo_table_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.import_table_status=function(session,import_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_import_table_status(session,import_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_import_table_status(session,import_id);}};MapDClient.prototype.send_import_table_status=function(session,import_id){var output=new this.pClass(this.output);output.writeMessageBegin('import_table_status',Thrift.MessageType.CALL,this.seqid());var args=new MapD_import_table_status_args();args.session=session;args.import_id=import_id;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_import_table_status=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_import_table_status_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('import_table_status failed: unknown result');};MapDClient.prototype.start_query=function(session,query_ra,just_explain,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_start_query(session,query_ra,just_explain);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_start_query(session,query_ra,just_explain);}};MapDClient.prototype.send_start_query=function(session,query_ra,just_explain){var output=new this.pClass(this.output);output.writeMessageBegin('start_query',Thrift.MessageType.CALL,this.seqid());var args=new MapD_start_query_args();args.session=session;args.query_ra=query_ra;args.just_explain=just_explain;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_start_query=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_start_query_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('start_query failed: unknown result');};MapDClient.prototype.execute_first_step=function(pending_query,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_execute_first_step(pending_query);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_execute_first_step(pending_query);}};MapDClient.prototype.send_execute_first_step=function(pending_query){var output=new this.pClass(this.output);output.writeMessageBegin('execute_first_step',Thrift.MessageType.CALL,this.seqid());var args=new MapD_execute_first_step_args();args.pending_query=pending_query;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_execute_first_step=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_execute_first_step_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('execute_first_step failed: unknown result');};MapDClient.prototype.broadcast_serialized_rows=function(serialized_rows,row_desc,query_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_broadcast_serialized_rows(serialized_rows,row_desc,query_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_broadcast_serialized_rows(serialized_rows,row_desc,query_id);}};MapDClient.prototype.send_broadcast_serialized_rows=function(serialized_rows,row_desc,query_id){var output=new this.pClass(this.output);output.writeMessageBegin('broadcast_serialized_rows',Thrift.MessageType.CALL,this.seqid());var args=new MapD_broadcast_serialized_rows_args();args.serialized_rows=serialized_rows;args.row_desc=row_desc;args.query_id=query_id;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_broadcast_serialized_rows=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_broadcast_serialized_rows_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.start_render_query=function(session,widget_id,node_idx,vega_json,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_start_render_query(session,widget_id,node_idx,vega_json);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_start_render_query(session,widget_id,node_idx,vega_json);}};MapDClient.prototype.send_start_render_query=function(session,widget_id,node_idx,vega_json){var output=new this.pClass(this.output);output.writeMessageBegin('start_render_query',Thrift.MessageType.CALL,this.seqid());var args=new MapD_start_render_query_args();args.session=session;args.widget_id=widget_id;args.node_idx=node_idx;args.vega_json=vega_json;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_start_render_query=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_start_render_query_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('start_render_query failed: unknown result');};MapDClient.prototype.execute_next_render_step=function(pending_render,merged_data,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_execute_next_render_step(pending_render,merged_data);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_execute_next_render_step(pending_render,merged_data);}};MapDClient.prototype.send_execute_next_render_step=function(pending_render,merged_data){var output=new this.pClass(this.output);output.writeMessageBegin('execute_next_render_step',Thrift.MessageType.CALL,this.seqid());var args=new MapD_execute_next_render_step_args();args.pending_render=pending_render;args.merged_data=merged_data;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_execute_next_render_step=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_execute_next_render_step_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('execute_next_render_step failed: unknown result');};MapDClient.prototype.insert_data=function(session,insert_data,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_insert_data(session,insert_data);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_insert_data(session,insert_data);}};MapDClient.prototype.send_insert_data=function(session,insert_data){var output=new this.pClass(this.output);output.writeMessageBegin('insert_data',Thrift.MessageType.CALL,this.seqid());var args=new MapD_insert_data_args();args.session=session;args.insert_data=insert_data;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_insert_data=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_insert_data_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.checkpoint=function(session,db_id,table_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_checkpoint(session,db_id,table_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_checkpoint(session,db_id,table_id);}};MapDClient.prototype.send_checkpoint=function(session,db_id,table_id){var output=new this.pClass(this.output);output.writeMessageBegin('checkpoint',Thrift.MessageType.CALL,this.seqid());var args=new MapD_checkpoint_args();args.session=session;args.db_id=db_id;args.table_id=table_id;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_checkpoint=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_checkpoint_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};MapDClient.prototype.get_table_descriptor=function(session,table_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_table_descriptor(session,table_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_table_descriptor(session,table_name);}};MapDClient.prototype.send_get_table_descriptor=function(session,table_name){var output=new this.pClass(this.output);output.writeMessageBegin('get_table_descriptor',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_table_descriptor_args();args.session=session;args.table_name=table_name;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_table_descriptor=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_table_descriptor_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_table_descriptor failed: unknown result');};MapDClient.prototype.get_row_descriptor=function(session,table_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_row_descriptor(session,table_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_row_descriptor(session,table_name);}};MapDClient.prototype.send_get_row_descriptor=function(session,table_name){var output=new this.pClass(this.output);output.writeMessageBegin('get_row_descriptor',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_row_descriptor_args();args.session=session;args.table_name=table_name;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_row_descriptor=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_row_descriptor_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_row_descriptor failed: unknown result');};MapDClient.prototype.get_roles=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_roles(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_roles(session);}};MapDClient.prototype.send_get_roles=function(session){var output=new this.pClass(this.output);output.writeMessageBegin('get_roles',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_roles_args();args.session=session;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_roles=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_roles_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_roles failed: unknown result');};MapDClient.prototype.get_db_objects_for_grantee=function(session,roleName,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_db_objects_for_grantee(session,roleName);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_db_objects_for_grantee(session,roleName);}};MapDClient.prototype.send_get_db_objects_for_grantee=function(session,roleName){var output=new this.pClass(this.output);output.writeMessageBegin('get_db_objects_for_grantee',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_db_objects_for_grantee_args();args.session=session;args.roleName=roleName;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_db_objects_for_grantee=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_db_objects_for_grantee_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_db_objects_for_grantee failed: unknown result');};MapDClient.prototype.get_db_object_privs=function(session,objectName,type,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_db_object_privs(session,objectName,type);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_db_object_privs(session,objectName,type);}};MapDClient.prototype.send_get_db_object_privs=function(session,objectName,type){var output=new this.pClass(this.output);output.writeMessageBegin('get_db_object_privs',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_db_object_privs_args();args.session=session;args.objectName=objectName;args.type=type;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_db_object_privs=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_db_object_privs_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_db_object_privs failed: unknown result');};MapDClient.prototype.get_all_roles_for_user=function(session,userName,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_all_roles_for_user(session,userName);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_all_roles_for_user(session,userName);}};MapDClient.prototype.send_get_all_roles_for_user=function(session,userName){var output=new this.pClass(this.output);output.writeMessageBegin('get_all_roles_for_user',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_all_roles_for_user_args();args.session=session;args.userName=userName;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_all_roles_for_user=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_all_roles_for_user_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_all_roles_for_user failed: unknown result');};MapDClient.prototype.set_license_key=function(session,key,nonce,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_license_key(session,key,nonce);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_license_key(session,key,nonce);}};MapDClient.prototype.send_set_license_key=function(session,key,nonce){var output=new this.pClass(this.output);output.writeMessageBegin('set_license_key',Thrift.MessageType.CALL,this.seqid());var args=new MapD_set_license_key_args();args.session=session;args.key=key;args.nonce=nonce;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_set_license_key=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_set_license_key_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('set_license_key failed: unknown result');};MapDClient.prototype.get_license_claims=function(session,nonce,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_license_claims(session,nonce);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_license_claims(session,nonce);}};MapDClient.prototype.send_get_license_claims=function(session,nonce){var output=new this.pClass(this.output);output.writeMessageBegin('get_license_claims',Thrift.MessageType.CALL,this.seqid());var args=new MapD_get_license_claims_args();args.session=session;args.nonce=nonce;args.write(output);output.writeMessageEnd();return this.output.flush();};MapDClient.prototype.recv_get_license_claims=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new MapD_get_license_claims_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_license_claims failed: unknown result');};var MapDProcessor=exports.Processor=function(handler){this._handler=handler;};MapDProcessor.prototype.process=function(input,output){var r=input.readMessageBegin();if(this['process_'+r.fname]){return this['process_'+r.fname].call(this,r.rseqid,input,output);}else{input.skip(Thrift.Type.STRUCT);input.readMessageEnd();var x=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD,'Unknown function '+r.fname);output.writeMessageBegin(r.fname,Thrift.MessageType.EXCEPTION,r.rseqid);x.write(output);output.writeMessageEnd();output.flush();}};MapDProcessor.prototype.process_connect=function(seqid,input,output){var args=new MapD_connect_args();args.read(input);input.readMessageEnd();if(this._handler.connect.length===3){Q.fcall(this._handler.connect,args.user,args.passwd,args.dbname).then(function(result){var result_obj=new MapD_connect_result({success:result});output.writeMessageBegin("connect",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_connect_result(err);output.writeMessageBegin("connect",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("connect",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.connect(args.user,args.passwd,args.dbname,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_connect_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("connect",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("connect",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_disconnect=function(seqid,input,output){var args=new MapD_disconnect_args();args.read(input);input.readMessageEnd();if(this._handler.disconnect.length===1){Q.fcall(this._handler.disconnect,args.session).then(function(result){var result_obj=new MapD_disconnect_result({success:result});output.writeMessageBegin("disconnect",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_disconnect_result(err);output.writeMessageBegin("disconnect",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("disconnect",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.disconnect(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_disconnect_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("disconnect",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("disconnect",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_server_status=function(seqid,input,output){var args=new MapD_get_server_status_args();args.read(input);input.readMessageEnd();if(this._handler.get_server_status.length===1){Q.fcall(this._handler.get_server_status,args.session).then(function(result){var result_obj=new MapD_get_server_status_result({success:result});output.writeMessageBegin("get_server_status",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_server_status_result(err);output.writeMessageBegin("get_server_status",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_server_status",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_server_status(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_server_status_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_server_status",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_server_status",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_status=function(seqid,input,output){var args=new MapD_get_status_args();args.read(input);input.readMessageEnd();if(this._handler.get_status.length===1){Q.fcall(this._handler.get_status,args.session).then(function(result){var result_obj=new MapD_get_status_result({success:result});output.writeMessageBegin("get_status",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_status_result(err);output.writeMessageBegin("get_status",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_status",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_status(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_status_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_status",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_status",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_hardware_info=function(seqid,input,output){var args=new MapD_get_hardware_info_args();args.read(input);input.readMessageEnd();if(this._handler.get_hardware_info.length===1){Q.fcall(this._handler.get_hardware_info,args.session).then(function(result){var result_obj=new MapD_get_hardware_info_result({success:result});output.writeMessageBegin("get_hardware_info",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_hardware_info_result(err);output.writeMessageBegin("get_hardware_info",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_hardware_info",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_hardware_info(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_hardware_info_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_hardware_info",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_hardware_info",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_tables=function(seqid,input,output){var args=new MapD_get_tables_args();args.read(input);input.readMessageEnd();if(this._handler.get_tables.length===1){Q.fcall(this._handler.get_tables,args.session).then(function(result){var result_obj=new MapD_get_tables_result({success:result});output.writeMessageBegin("get_tables",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_tables_result(err);output.writeMessageBegin("get_tables",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_tables",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_tables(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_tables_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_tables",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_tables",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_physical_tables=function(seqid,input,output){var args=new MapD_get_physical_tables_args();args.read(input);input.readMessageEnd();if(this._handler.get_physical_tables.length===1){Q.fcall(this._handler.get_physical_tables,args.session).then(function(result){var result_obj=new MapD_get_physical_tables_result({success:result});output.writeMessageBegin("get_physical_tables",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_physical_tables_result(err);output.writeMessageBegin("get_physical_tables",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_physical_tables",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_physical_tables(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_physical_tables_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_physical_tables",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_physical_tables",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_views=function(seqid,input,output){var args=new MapD_get_views_args();args.read(input);input.readMessageEnd();if(this._handler.get_views.length===1){Q.fcall(this._handler.get_views,args.session).then(function(result){var result_obj=new MapD_get_views_result({success:result});output.writeMessageBegin("get_views",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_views_result(err);output.writeMessageBegin("get_views",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_views",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_views(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_views_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_views",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_views",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_tables_meta=function(seqid,input,output){var args=new MapD_get_tables_meta_args();args.read(input);input.readMessageEnd();if(this._handler.get_tables_meta.length===1){Q.fcall(this._handler.get_tables_meta,args.session).then(function(result){var result_obj=new MapD_get_tables_meta_result({success:result});output.writeMessageBegin("get_tables_meta",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_tables_meta_result(err);output.writeMessageBegin("get_tables_meta",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_tables_meta",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_tables_meta(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_tables_meta_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_tables_meta",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_tables_meta",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_table_details=function(seqid,input,output){var args=new MapD_get_table_details_args();args.read(input);input.readMessageEnd();if(this._handler.get_table_details.length===2){Q.fcall(this._handler.get_table_details,args.session,args.table_name).then(function(result){var result_obj=new MapD_get_table_details_result({success:result});output.writeMessageBegin("get_table_details",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_table_details_result(err);output.writeMessageBegin("get_table_details",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_details",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_table_details(args.session,args.table_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_table_details_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_table_details",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_details",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_internal_table_details=function(seqid,input,output){var args=new MapD_get_internal_table_details_args();args.read(input);input.readMessageEnd();if(this._handler.get_internal_table_details.length===2){Q.fcall(this._handler.get_internal_table_details,args.session,args.table_name).then(function(result){var result_obj=new MapD_get_internal_table_details_result({success:result});output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_internal_table_details_result(err);output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_internal_table_details(args.session,args.table_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_internal_table_details_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_users=function(seqid,input,output){var args=new MapD_get_users_args();args.read(input);input.readMessageEnd();if(this._handler.get_users.length===1){Q.fcall(this._handler.get_users,args.session).then(function(result){var result_obj=new MapD_get_users_result({success:result});output.writeMessageBegin("get_users",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_users_result(err);output.writeMessageBegin("get_users",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_users",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_users(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_users_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_users",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_users",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_databases=function(seqid,input,output){var args=new MapD_get_databases_args();args.read(input);input.readMessageEnd();if(this._handler.get_databases.length===1){Q.fcall(this._handler.get_databases,args.session).then(function(result){var result_obj=new MapD_get_databases_result({success:result});output.writeMessageBegin("get_databases",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_databases_result(err);output.writeMessageBegin("get_databases",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_databases",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_databases(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_databases_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_databases",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_databases",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_version=function(seqid,input,output){var args=new MapD_get_version_args();args.read(input);input.readMessageEnd();if(this._handler.get_version.length===0){Q.fcall(this._handler.get_version).then(function(result){var result_obj=new MapD_get_version_result({success:result});output.writeMessageBegin("get_version",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_version_result(err);output.writeMessageBegin("get_version",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_version",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_version(function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_version_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_version",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_version",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_start_heap_profile=function(seqid,input,output){var args=new MapD_start_heap_profile_args();args.read(input);input.readMessageEnd();if(this._handler.start_heap_profile.length===1){Q.fcall(this._handler.start_heap_profile,args.session).then(function(result){var result_obj=new MapD_start_heap_profile_result({success:result});output.writeMessageBegin("start_heap_profile",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_start_heap_profile_result(err);output.writeMessageBegin("start_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.start_heap_profile(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_start_heap_profile_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("start_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_stop_heap_profile=function(seqid,input,output){var args=new MapD_stop_heap_profile_args();args.read(input);input.readMessageEnd();if(this._handler.stop_heap_profile.length===1){Q.fcall(this._handler.stop_heap_profile,args.session).then(function(result){var result_obj=new MapD_stop_heap_profile_result({success:result});output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_stop_heap_profile_result(err);output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.stop_heap_profile(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_stop_heap_profile_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_heap_profile=function(seqid,input,output){var args=new MapD_get_heap_profile_args();args.read(input);input.readMessageEnd();if(this._handler.get_heap_profile.length===1){Q.fcall(this._handler.get_heap_profile,args.session).then(function(result){var result_obj=new MapD_get_heap_profile_result({success:result});output.writeMessageBegin("get_heap_profile",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_heap_profile_result(err);output.writeMessageBegin("get_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_heap_profile(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_heap_profile_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_memory=function(seqid,input,output){var args=new MapD_get_memory_args();args.read(input);input.readMessageEnd();if(this._handler.get_memory.length===2){Q.fcall(this._handler.get_memory,args.session,args.memory_level).then(function(result){var result_obj=new MapD_get_memory_result({success:result});output.writeMessageBegin("get_memory",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_memory_result(err);output.writeMessageBegin("get_memory",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_memory",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_memory(args.session,args.memory_level,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_memory_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_memory",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_memory",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_clear_cpu_memory=function(seqid,input,output){var args=new MapD_clear_cpu_memory_args();args.read(input);input.readMessageEnd();if(this._handler.clear_cpu_memory.length===1){Q.fcall(this._handler.clear_cpu_memory,args.session).then(function(result){var result_obj=new MapD_clear_cpu_memory_result({success:result});output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_clear_cpu_memory_result(err);output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.clear_cpu_memory(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_clear_cpu_memory_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_clear_gpu_memory=function(seqid,input,output){var args=new MapD_clear_gpu_memory_args();args.read(input);input.readMessageEnd();if(this._handler.clear_gpu_memory.length===1){Q.fcall(this._handler.clear_gpu_memory,args.session).then(function(result){var result_obj=new MapD_clear_gpu_memory_result({success:result});output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_clear_gpu_memory_result(err);output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.clear_gpu_memory(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_clear_gpu_memory_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_set_table_epoch=function(seqid,input,output){var args=new MapD_set_table_epoch_args();args.read(input);input.readMessageEnd();if(this._handler.set_table_epoch.length===4){Q.fcall(this._handler.set_table_epoch,args.session,args.db_id,args.table_id,args.new_epoch).then(function(result){var result_obj=new MapD_set_table_epoch_result({success:result});output.writeMessageBegin("set_table_epoch",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_set_table_epoch_result(err);output.writeMessageBegin("set_table_epoch",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epoch",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_table_epoch(args.session,args.db_id,args.table_id,args.new_epoch,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_set_table_epoch_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_table_epoch",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epoch",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_set_table_epoch_by_name=function(seqid,input,output){var args=new MapD_set_table_epoch_by_name_args();args.read(input);input.readMessageEnd();if(this._handler.set_table_epoch_by_name.length===3){Q.fcall(this._handler.set_table_epoch_by_name,args.session,args.table_name,args.new_epoch).then(function(result){var result_obj=new MapD_set_table_epoch_by_name_result({success:result});output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_set_table_epoch_by_name_result(err);output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_table_epoch_by_name(args.session,args.table_name,args.new_epoch,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_set_table_epoch_by_name_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_table_epoch=function(seqid,input,output){var args=new MapD_get_table_epoch_args();args.read(input);input.readMessageEnd();if(this._handler.get_table_epoch.length===3){Q.fcall(this._handler.get_table_epoch,args.session,args.db_id,args.table_id).then(function(result){var result_obj=new MapD_get_table_epoch_result({success:result});output.writeMessageBegin("get_table_epoch",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epoch",Thrift.MessageType.EXCEPTION,seqid);result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_table_epoch(args.session,args.db_id,args.table_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'){result_obj=new MapD_get_table_epoch_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_table_epoch",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epoch",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_table_epoch_by_name=function(seqid,input,output){var args=new MapD_get_table_epoch_by_name_args();args.read(input);input.readMessageEnd();if(this._handler.get_table_epoch_by_name.length===2){Q.fcall(this._handler.get_table_epoch_by_name,args.session,args.table_name).then(function(result){var result_obj=new MapD_get_table_epoch_by_name_result({success:result});output.writeMessageBegin("get_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epoch_by_name",Thrift.MessageType.EXCEPTION,seqid);result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_table_epoch_by_name(args.session,args.table_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'){result_obj=new MapD_get_table_epoch_by_name_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epoch_by_name",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_sql_execute=function(seqid,input,output){var args=new MapD_sql_execute_args();args.read(input);input.readMessageEnd();if(this._handler.sql_execute.length===6){Q.fcall(this._handler.sql_execute,args.session,args.query,args.column_format,args.nonce,args.first_n,args.at_most_n).then(function(result){var result_obj=new MapD_sql_execute_result({success:result});output.writeMessageBegin("sql_execute",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_sql_execute_result(err);output.writeMessageBegin("sql_execute",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.sql_execute(args.session,args.query,args.column_format,args.nonce,args.first_n,args.at_most_n,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_sql_execute_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("sql_execute",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_sql_execute_df=function(seqid,input,output){var args=new MapD_sql_execute_df_args();args.read(input);input.readMessageEnd();if(this._handler.sql_execute_df.length===5){Q.fcall(this._handler.sql_execute_df,args.session,args.query,args.device_type,args.device_id,args.first_n).then(function(result){var result_obj=new MapD_sql_execute_df_result({success:result});output.writeMessageBegin("sql_execute_df",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_sql_execute_df_result(err);output.writeMessageBegin("sql_execute_df",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute_df",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.sql_execute_df(args.session,args.query,args.device_type,args.device_id,args.first_n,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_sql_execute_df_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("sql_execute_df",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute_df",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_sql_execute_gdf=function(seqid,input,output){var args=new MapD_sql_execute_gdf_args();args.read(input);input.readMessageEnd();if(this._handler.sql_execute_gdf.length===4){Q.fcall(this._handler.sql_execute_gdf,args.session,args.query,args.device_id,args.first_n).then(function(result){var result_obj=new MapD_sql_execute_gdf_result({success:result});output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_sql_execute_gdf_result(err);output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.sql_execute_gdf(args.session,args.query,args.device_id,args.first_n,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_sql_execute_gdf_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_deallocate_df=function(seqid,input,output){var args=new MapD_deallocate_df_args();args.read(input);input.readMessageEnd();if(this._handler.deallocate_df.length===4){Q.fcall(this._handler.deallocate_df,args.session,args.df,args.device_type,args.device_id).then(function(result){var result_obj=new MapD_deallocate_df_result({success:result});output.writeMessageBegin("deallocate_df",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_deallocate_df_result(err);output.writeMessageBegin("deallocate_df",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("deallocate_df",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.deallocate_df(args.session,args.df,args.device_type,args.device_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_deallocate_df_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("deallocate_df",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("deallocate_df",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_interrupt=function(seqid,input,output){var args=new MapD_interrupt_args();args.read(input);input.readMessageEnd();if(this._handler.interrupt.length===1){Q.fcall(this._handler.interrupt,args.session).then(function(result){var result_obj=new MapD_interrupt_result({success:result});output.writeMessageBegin("interrupt",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_interrupt_result(err);output.writeMessageBegin("interrupt",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("interrupt",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.interrupt(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_interrupt_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("interrupt",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("interrupt",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_sql_validate=function(seqid,input,output){var args=new MapD_sql_validate_args();args.read(input);input.readMessageEnd();if(this._handler.sql_validate.length===2){Q.fcall(this._handler.sql_validate,args.session,args.query).then(function(result){var result_obj=new MapD_sql_validate_result({success:result});output.writeMessageBegin("sql_validate",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_sql_validate_result(err);output.writeMessageBegin("sql_validate",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_validate",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.sql_validate(args.session,args.query,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_sql_validate_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("sql_validate",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_validate",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_completion_hints=function(seqid,input,output){var args=new MapD_get_completion_hints_args();args.read(input);input.readMessageEnd();if(this._handler.get_completion_hints.length===3){Q.fcall(this._handler.get_completion_hints,args.session,args.sql,args.cursor).then(function(result){var result_obj=new MapD_get_completion_hints_result({success:result});output.writeMessageBegin("get_completion_hints",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_completion_hints_result(err);output.writeMessageBegin("get_completion_hints",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_completion_hints",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_completion_hints(args.session,args.sql,args.cursor,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_completion_hints_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_completion_hints",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_completion_hints",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_set_execution_mode=function(seqid,input,output){var args=new MapD_set_execution_mode_args();args.read(input);input.readMessageEnd();if(this._handler.set_execution_mode.length===2){Q.fcall(this._handler.set_execution_mode,args.session,args.mode).then(function(result){var result_obj=new MapD_set_execution_mode_result({success:result});output.writeMessageBegin("set_execution_mode",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_set_execution_mode_result(err);output.writeMessageBegin("set_execution_mode",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_execution_mode",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_execution_mode(args.session,args.mode,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_set_execution_mode_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_execution_mode",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_execution_mode",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_render_vega=function(seqid,input,output){var args=new MapD_render_vega_args();args.read(input);input.readMessageEnd();if(this._handler.render_vega.length===5){Q.fcall(this._handler.render_vega,args.session,args.widget_id,args.vega_json,args.compression_level,args.nonce).then(function(result){var result_obj=new MapD_render_vega_result({success:result});output.writeMessageBegin("render_vega",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_render_vega_result(err);output.writeMessageBegin("render_vega",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("render_vega",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.render_vega(args.session,args.widget_id,args.vega_json,args.compression_level,args.nonce,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_render_vega_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("render_vega",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("render_vega",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_result_row_for_pixel=function(seqid,input,output){var args=new MapD_get_result_row_for_pixel_args();args.read(input);input.readMessageEnd();if(this._handler.get_result_row_for_pixel.length===7){Q.fcall(this._handler.get_result_row_for_pixel,args.session,args.widget_id,args.pixel,args.table_col_names,args.column_format,args.pixelRadius,args.nonce).then(function(result){var result_obj=new MapD_get_result_row_for_pixel_result({success:result});output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_result_row_for_pixel_result(err);output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_result_row_for_pixel(args.session,args.widget_id,args.pixel,args.table_col_names,args.column_format,args.pixelRadius,args.nonce,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_result_row_for_pixel_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_frontend_view=function(seqid,input,output){var args=new MapD_get_frontend_view_args();args.read(input);input.readMessageEnd();if(this._handler.get_frontend_view.length===2){Q.fcall(this._handler.get_frontend_view,args.session,args.view_name).then(function(result){var result_obj=new MapD_get_frontend_view_result({success:result});output.writeMessageBegin("get_frontend_view",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_frontend_view_result(err);output.writeMessageBegin("get_frontend_view",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_frontend_view",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_frontend_view(args.session,args.view_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_frontend_view_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_frontend_view",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_frontend_view",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_frontend_views=function(seqid,input,output){var args=new MapD_get_frontend_views_args();args.read(input);input.readMessageEnd();if(this._handler.get_frontend_views.length===1){Q.fcall(this._handler.get_frontend_views,args.session).then(function(result){var result_obj=new MapD_get_frontend_views_result({success:result});output.writeMessageBegin("get_frontend_views",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_frontend_views_result(err);output.writeMessageBegin("get_frontend_views",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_frontend_views",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_frontend_views(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_frontend_views_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_frontend_views",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_frontend_views",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_create_frontend_view=function(seqid,input,output){var args=new MapD_create_frontend_view_args();args.read(input);input.readMessageEnd();if(this._handler.create_frontend_view.length===5){Q.fcall(this._handler.create_frontend_view,args.session,args.view_name,args.view_state,args.image_hash,args.view_metadata).then(function(result){var result_obj=new MapD_create_frontend_view_result({success:result});output.writeMessageBegin("create_frontend_view",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_create_frontend_view_result(err);output.writeMessageBegin("create_frontend_view",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_frontend_view",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.create_frontend_view(args.session,args.view_name,args.view_state,args.image_hash,args.view_metadata,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_create_frontend_view_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("create_frontend_view",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_frontend_view",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_delete_frontend_view=function(seqid,input,output){var args=new MapD_delete_frontend_view_args();args.read(input);input.readMessageEnd();if(this._handler.delete_frontend_view.length===2){Q.fcall(this._handler.delete_frontend_view,args.session,args.view_name).then(function(result){var result_obj=new MapD_delete_frontend_view_result({success:result});output.writeMessageBegin("delete_frontend_view",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_delete_frontend_view_result(err);output.writeMessageBegin("delete_frontend_view",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("delete_frontend_view",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.delete_frontend_view(args.session,args.view_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_delete_frontend_view_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("delete_frontend_view",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("delete_frontend_view",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_dashboard=function(seqid,input,output){var args=new MapD_get_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.get_dashboard.length===2){Q.fcall(this._handler.get_dashboard,args.session,args.dashboard_id).then(function(result){var result_obj=new MapD_get_dashboard_result({success:result});output.writeMessageBegin("get_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_dashboard_result(err);output.writeMessageBegin("get_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_dashboard(args.session,args.dashboard_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_dashboards=function(seqid,input,output){var args=new MapD_get_dashboards_args();args.read(input);input.readMessageEnd();if(this._handler.get_dashboards.length===1){Q.fcall(this._handler.get_dashboards,args.session).then(function(result){var result_obj=new MapD_get_dashboards_result({success:result});output.writeMessageBegin("get_dashboards",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_dashboards_result(err);output.writeMessageBegin("get_dashboards",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_dashboards(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_dashboards_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_dashboards",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_create_dashboard=function(seqid,input,output){var args=new MapD_create_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.create_dashboard.length===5){Q.fcall(this._handler.create_dashboard,args.session,args.dashboard_name,args.dashboard_state,args.image_hash,args.dashboard_metadata).then(function(result){var result_obj=new MapD_create_dashboard_result({success:result});output.writeMessageBegin("create_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_create_dashboard_result(err);output.writeMessageBegin("create_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.create_dashboard(args.session,args.dashboard_name,args.dashboard_state,args.image_hash,args.dashboard_metadata,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_create_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("create_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_replace_dashboard=function(seqid,input,output){var args=new MapD_replace_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.replace_dashboard.length===7){Q.fcall(this._handler.replace_dashboard,args.session,args.dashboard_id,args.dashboard_name,args.dashboard_owner,args.dashboard_state,args.image_hash,args.dashboard_metadata).then(function(result){var result_obj=new MapD_replace_dashboard_result({success:result});output.writeMessageBegin("replace_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_replace_dashboard_result(err);output.writeMessageBegin("replace_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("replace_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.replace_dashboard(args.session,args.dashboard_id,args.dashboard_name,args.dashboard_owner,args.dashboard_state,args.image_hash,args.dashboard_metadata,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_replace_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("replace_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("replace_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_delete_dashboard=function(seqid,input,output){var args=new MapD_delete_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.delete_dashboard.length===2){Q.fcall(this._handler.delete_dashboard,args.session,args.dashboard_id).then(function(result){var result_obj=new MapD_delete_dashboard_result({success:result});output.writeMessageBegin("delete_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_delete_dashboard_result(err);output.writeMessageBegin("delete_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("delete_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.delete_dashboard(args.session,args.dashboard_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_delete_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("delete_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("delete_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_share_dashboard=function(seqid,input,output){var args=new MapD_share_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.share_dashboard.length===5){Q.fcall(this._handler.share_dashboard,args.session,args.dashboard_id,args.groups,args.objects,args.permissions).then(function(result){var result_obj=new MapD_share_dashboard_result({success:result});output.writeMessageBegin("share_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_share_dashboard_result(err);output.writeMessageBegin("share_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("share_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.share_dashboard(args.session,args.dashboard_id,args.groups,args.objects,args.permissions,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_share_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("share_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("share_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_unshare_dashboard=function(seqid,input,output){var args=new MapD_unshare_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.unshare_dashboard.length===5){Q.fcall(this._handler.unshare_dashboard,args.session,args.dashboard_id,args.groups,args.objects,args.permissions).then(function(result){var result_obj=new MapD_unshare_dashboard_result({success:result});output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_unshare_dashboard_result(err);output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.unshare_dashboard(args.session,args.dashboard_id,args.groups,args.objects,args.permissions,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_unshare_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_link_view=function(seqid,input,output){var args=new MapD_get_link_view_args();args.read(input);input.readMessageEnd();if(this._handler.get_link_view.length===2){Q.fcall(this._handler.get_link_view,args.session,args.link).then(function(result){var result_obj=new MapD_get_link_view_result({success:result});output.writeMessageBegin("get_link_view",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_link_view_result(err);output.writeMessageBegin("get_link_view",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_link_view",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_link_view(args.session,args.link,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_link_view_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_link_view",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_link_view",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_create_link=function(seqid,input,output){var args=new MapD_create_link_args();args.read(input);input.readMessageEnd();if(this._handler.create_link.length===3){Q.fcall(this._handler.create_link,args.session,args.view_state,args.view_metadata).then(function(result){var result_obj=new MapD_create_link_result({success:result});output.writeMessageBegin("create_link",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_create_link_result(err);output.writeMessageBegin("create_link",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_link",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.create_link(args.session,args.view_state,args.view_metadata,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_create_link_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("create_link",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_link",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_load_table_binary=function(seqid,input,output){var args=new MapD_load_table_binary_args();args.read(input);input.readMessageEnd();if(this._handler.load_table_binary.length===3){Q.fcall(this._handler.load_table_binary,args.session,args.table_name,args.rows).then(function(result){var result_obj=new MapD_load_table_binary_result({success:result});output.writeMessageBegin("load_table_binary",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_load_table_binary_result(err);output.writeMessageBegin("load_table_binary",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.load_table_binary(args.session,args.table_name,args.rows,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_load_table_binary_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("load_table_binary",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_load_table_binary_columnar=function(seqid,input,output){var args=new MapD_load_table_binary_columnar_args();args.read(input);input.readMessageEnd();if(this._handler.load_table_binary_columnar.length===3){Q.fcall(this._handler.load_table_binary_columnar,args.session,args.table_name,args.cols).then(function(result){var result_obj=new MapD_load_table_binary_columnar_result({success:result});output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_load_table_binary_columnar_result(err);output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.load_table_binary_columnar(args.session,args.table_name,args.cols,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_load_table_binary_columnar_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_load_table_binary_arrow=function(seqid,input,output){var args=new MapD_load_table_binary_arrow_args();args.read(input);input.readMessageEnd();if(this._handler.load_table_binary_arrow.length===3){Q.fcall(this._handler.load_table_binary_arrow,args.session,args.table_name,args.arrow_stream).then(function(result){var result_obj=new MapD_load_table_binary_arrow_result({success:result});output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_load_table_binary_arrow_result(err);output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.load_table_binary_arrow(args.session,args.table_name,args.arrow_stream,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_load_table_binary_arrow_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_load_table=function(seqid,input,output){var args=new MapD_load_table_args();args.read(input);input.readMessageEnd();if(this._handler.load_table.length===3){Q.fcall(this._handler.load_table,args.session,args.table_name,args.rows).then(function(result){var result_obj=new MapD_load_table_result({success:result});output.writeMessageBegin("load_table",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_load_table_result(err);output.writeMessageBegin("load_table",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.load_table(args.session,args.table_name,args.rows,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_load_table_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("load_table",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_detect_column_types=function(seqid,input,output){var args=new MapD_detect_column_types_args();args.read(input);input.readMessageEnd();if(this._handler.detect_column_types.length===3){Q.fcall(this._handler.detect_column_types,args.session,args.file_name,args.copy_params).then(function(result){var result_obj=new MapD_detect_column_types_result({success:result});output.writeMessageBegin("detect_column_types",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_detect_column_types_result(err);output.writeMessageBegin("detect_column_types",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("detect_column_types",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.detect_column_types(args.session,args.file_name,args.copy_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_detect_column_types_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("detect_column_types",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("detect_column_types",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_create_table=function(seqid,input,output){var args=new MapD_create_table_args();args.read(input);input.readMessageEnd();if(this._handler.create_table.length===4){Q.fcall(this._handler.create_table,args.session,args.table_name,args.row_desc,args.table_type).then(function(result){var result_obj=new MapD_create_table_result({success:result});output.writeMessageBegin("create_table",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_create_table_result(err);output.writeMessageBegin("create_table",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_table",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.create_table(args.session,args.table_name,args.row_desc,args.table_type,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_create_table_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("create_table",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_table",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_import_table=function(seqid,input,output){var args=new MapD_import_table_args();args.read(input);input.readMessageEnd();if(this._handler.import_table.length===4){Q.fcall(this._handler.import_table,args.session,args.table_name,args.file_name,args.copy_params).then(function(result){var result_obj=new MapD_import_table_result({success:result});output.writeMessageBegin("import_table",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_import_table_result(err);output.writeMessageBegin("import_table",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_table",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.import_table(args.session,args.table_name,args.file_name,args.copy_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_import_table_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("import_table",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_table",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_import_geo_table=function(seqid,input,output){var args=new MapD_import_geo_table_args();args.read(input);input.readMessageEnd();if(this._handler.import_geo_table.length===5){Q.fcall(this._handler.import_geo_table,args.session,args.table_name,args.file_name,args.copy_params,args.row_desc).then(function(result){var result_obj=new MapD_import_geo_table_result({success:result});output.writeMessageBegin("import_geo_table",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_import_geo_table_result(err);output.writeMessageBegin("import_geo_table",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_geo_table",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.import_geo_table(args.session,args.table_name,args.file_name,args.copy_params,args.row_desc,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_import_geo_table_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("import_geo_table",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_geo_table",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_import_table_status=function(seqid,input,output){var args=new MapD_import_table_status_args();args.read(input);input.readMessageEnd();if(this._handler.import_table_status.length===2){Q.fcall(this._handler.import_table_status,args.session,args.import_id).then(function(result){var result_obj=new MapD_import_table_status_result({success:result});output.writeMessageBegin("import_table_status",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_import_table_status_result(err);output.writeMessageBegin("import_table_status",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_table_status",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.import_table_status(args.session,args.import_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_import_table_status_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("import_table_status",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_table_status",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_start_query=function(seqid,input,output){var args=new MapD_start_query_args();args.read(input);input.readMessageEnd();if(this._handler.start_query.length===3){Q.fcall(this._handler.start_query,args.session,args.query_ra,args.just_explain).then(function(result){var result_obj=new MapD_start_query_result({success:result});output.writeMessageBegin("start_query",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_start_query_result(err);output.writeMessageBegin("start_query",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_query",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.start_query(args.session,args.query_ra,args.just_explain,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_start_query_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("start_query",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_query",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_execute_first_step=function(seqid,input,output){var args=new MapD_execute_first_step_args();args.read(input);input.readMessageEnd();if(this._handler.execute_first_step.length===1){Q.fcall(this._handler.execute_first_step,args.pending_query).then(function(result){var result_obj=new MapD_execute_first_step_result({success:result});output.writeMessageBegin("execute_first_step",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_execute_first_step_result(err);output.writeMessageBegin("execute_first_step",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("execute_first_step",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.execute_first_step(args.pending_query,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_execute_first_step_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("execute_first_step",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("execute_first_step",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_broadcast_serialized_rows=function(seqid,input,output){var args=new MapD_broadcast_serialized_rows_args();args.read(input);input.readMessageEnd();if(this._handler.broadcast_serialized_rows.length===3){Q.fcall(this._handler.broadcast_serialized_rows,args.serialized_rows,args.row_desc,args.query_id).then(function(result){var result_obj=new MapD_broadcast_serialized_rows_result({success:result});output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_broadcast_serialized_rows_result(err);output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.broadcast_serialized_rows(args.serialized_rows,args.row_desc,args.query_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_broadcast_serialized_rows_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_start_render_query=function(seqid,input,output){var args=new MapD_start_render_query_args();args.read(input);input.readMessageEnd();if(this._handler.start_render_query.length===4){Q.fcall(this._handler.start_render_query,args.session,args.widget_id,args.node_idx,args.vega_json).then(function(result){var result_obj=new MapD_start_render_query_result({success:result});output.writeMessageBegin("start_render_query",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_start_render_query_result(err);output.writeMessageBegin("start_render_query",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_render_query",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.start_render_query(args.session,args.widget_id,args.node_idx,args.vega_json,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_start_render_query_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("start_render_query",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_render_query",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_execute_next_render_step=function(seqid,input,output){var args=new MapD_execute_next_render_step_args();args.read(input);input.readMessageEnd();if(this._handler.execute_next_render_step.length===2){Q.fcall(this._handler.execute_next_render_step,args.pending_render,args.merged_data).then(function(result){var result_obj=new MapD_execute_next_render_step_result({success:result});output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_execute_next_render_step_result(err);output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.execute_next_render_step(args.pending_render,args.merged_data,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_execute_next_render_step_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_insert_data=function(seqid,input,output){var args=new MapD_insert_data_args();args.read(input);input.readMessageEnd();if(this._handler.insert_data.length===2){Q.fcall(this._handler.insert_data,args.session,args.insert_data).then(function(result){var result_obj=new MapD_insert_data_result({success:result});output.writeMessageBegin("insert_data",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_insert_data_result(err);output.writeMessageBegin("insert_data",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("insert_data",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.insert_data(args.session,args.insert_data,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_insert_data_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("insert_data",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("insert_data",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_checkpoint=function(seqid,input,output){var args=new MapD_checkpoint_args();args.read(input);input.readMessageEnd();if(this._handler.checkpoint.length===3){Q.fcall(this._handler.checkpoint,args.session,args.db_id,args.table_id).then(function(result){var result_obj=new MapD_checkpoint_result({success:result});output.writeMessageBegin("checkpoint",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_checkpoint_result(err);output.writeMessageBegin("checkpoint",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("checkpoint",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.checkpoint(args.session,args.db_id,args.table_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_checkpoint_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("checkpoint",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("checkpoint",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_table_descriptor=function(seqid,input,output){var args=new MapD_get_table_descriptor_args();args.read(input);input.readMessageEnd();if(this._handler.get_table_descriptor.length===2){Q.fcall(this._handler.get_table_descriptor,args.session,args.table_name).then(function(result){var result_obj=new MapD_get_table_descriptor_result({success:result});output.writeMessageBegin("get_table_descriptor",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_table_descriptor_result(err);output.writeMessageBegin("get_table_descriptor",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_descriptor",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_table_descriptor(args.session,args.table_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_table_descriptor_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_table_descriptor",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_descriptor",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_row_descriptor=function(seqid,input,output){var args=new MapD_get_row_descriptor_args();args.read(input);input.readMessageEnd();if(this._handler.get_row_descriptor.length===2){Q.fcall(this._handler.get_row_descriptor,args.session,args.table_name).then(function(result){var result_obj=new MapD_get_row_descriptor_result({success:result});output.writeMessageBegin("get_row_descriptor",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_row_descriptor_result(err);output.writeMessageBegin("get_row_descriptor",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_row_descriptor",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_row_descriptor(args.session,args.table_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_row_descriptor_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_row_descriptor",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_row_descriptor",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_roles=function(seqid,input,output){var args=new MapD_get_roles_args();args.read(input);input.readMessageEnd();if(this._handler.get_roles.length===1){Q.fcall(this._handler.get_roles,args.session).then(function(result){var result_obj=new MapD_get_roles_result({success:result});output.writeMessageBegin("get_roles",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_roles_result(err);output.writeMessageBegin("get_roles",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_roles",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_roles(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_roles_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_roles",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_roles",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_db_objects_for_grantee=function(seqid,input,output){var args=new MapD_get_db_objects_for_grantee_args();args.read(input);input.readMessageEnd();if(this._handler.get_db_objects_for_grantee.length===2){Q.fcall(this._handler.get_db_objects_for_grantee,args.session,args.roleName).then(function(result){var result_obj=new MapD_get_db_objects_for_grantee_result({success:result});output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_db_objects_for_grantee_result(err);output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_db_objects_for_grantee(args.session,args.roleName,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_db_objects_for_grantee_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_db_object_privs=function(seqid,input,output){var args=new MapD_get_db_object_privs_args();args.read(input);input.readMessageEnd();if(this._handler.get_db_object_privs.length===3){Q.fcall(this._handler.get_db_object_privs,args.session,args.objectName,args.type).then(function(result){var result_obj=new MapD_get_db_object_privs_result({success:result});output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_db_object_privs_result(err);output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_db_object_privs(args.session,args.objectName,args.type,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_db_object_privs_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_all_roles_for_user=function(seqid,input,output){var args=new MapD_get_all_roles_for_user_args();args.read(input);input.readMessageEnd();if(this._handler.get_all_roles_for_user.length===2){Q.fcall(this._handler.get_all_roles_for_user,args.session,args.userName).then(function(result){var result_obj=new MapD_get_all_roles_for_user_result({success:result});output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_all_roles_for_user_result(err);output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_all_roles_for_user(args.session,args.userName,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_all_roles_for_user_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_set_license_key=function(seqid,input,output){var args=new MapD_set_license_key_args();args.read(input);input.readMessageEnd();if(this._handler.set_license_key.length===3){Q.fcall(this._handler.set_license_key,args.session,args.key,args.nonce).then(function(result){var result_obj=new MapD_set_license_key_result({success:result});output.writeMessageBegin("set_license_key",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_set_license_key_result(err);output.writeMessageBegin("set_license_key",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_license_key",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_license_key(args.session,args.key,args.nonce,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_set_license_key_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_license_key",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_license_key",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};MapDProcessor.prototype.process_get_license_claims=function(seqid,input,output){var args=new MapD_get_license_claims_args();args.read(input);input.readMessageEnd();if(this._handler.get_license_claims.length===2){Q.fcall(this._handler.get_license_claims,args.session,args.nonce).then(function(result){var result_obj=new MapD_get_license_claims_result({success:result});output.writeMessageBegin("get_license_claims",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();},function(err){var result;if(err instanceof ttypes.TMapDException){result=new MapD_get_license_claims_result(err);output.writeMessageBegin("get_license_claims",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_license_claims",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_license_claims(args.session,args.nonce,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TMapDException){result_obj=new MapD_get_license_claims_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_license_claims",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_license_claims",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	exports.Thrift = __webpack_require__(17);

	var connection = __webpack_require__(22);
	exports.Connection = connection.Connection;
	exports.createClient = connection.createClient;
	exports.createConnection = connection.createConnection;
	exports.createSSLConnection = connection.createSSLConnection;
	exports.createStdIOClient = connection.createStdIOClient;
	exports.createStdIOConnection = connection.createStdIOConnection;

	var httpConnection = __webpack_require__(36);
	exports.HttpConnection = httpConnection.HttpConnection;
	exports.createHttpConnection = httpConnection.createHttpConnection;
	exports.createHttpClient = httpConnection.createHttpClient;

	var wsConnection = __webpack_require__(68);
	exports.WSConnection = wsConnection.WSConnection;
	exports.createWSConnection = wsConnection.createWSConnection;
	exports.createWSClient = wsConnection.createWSClient;

	var xhrConnection = __webpack_require__(77);
	exports.XHRConnection = xhrConnection.XHRConnection;
	exports.createXHRConnection = xhrConnection.createXHRConnection;
	exports.createXHRClient = xhrConnection.createXHRClient;

	var server = __webpack_require__(78);
	exports.createServer = server.createServer;
	exports.createMultiplexServer = server.createMultiplexServer;

	var web_server = __webpack_require__(79);
	exports.createWebServer = web_server.createWebServer;

	exports.Int64 = __webpack_require__(34);
	exports.Q = __webpack_require__(116);

	var mprocessor = __webpack_require__(115);
	var mprotocol = __webpack_require__(117);
	exports.Multiplexer = mprotocol.Multiplexer;
	exports.MultiplexedProcessor = mprocessor.MultiplexedProcessor;

	/*
	 * Export transport and protocol so they can be used outside of a
	 * cassandra/server context
	 */
	exports.TFramedTransport = __webpack_require__(71);
	exports.TBufferedTransport = __webpack_require__(25);
	exports.TBinaryProtocol = __webpack_require__(32);
	exports.TJSONProtocol = __webpack_require__(74);
	exports.TCompactProtocol = __webpack_require__(73);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(18);

	var Type = exports.Type = {
	  STOP: 0,
	  VOID: 1,
	  BOOL: 2,
	  BYTE: 3,
	  I08: 3,
	  DOUBLE: 4,
	  I16: 6,
	  I32: 8,
	  I64: 10,
	  STRING: 11,
	  UTF7: 11,
	  STRUCT: 12,
	  MAP: 13,
	  SET: 14,
	  LIST: 15,
	  UTF8: 16,
	  UTF16: 17
	};

	exports.MessageType = {
	  CALL: 1,
	  REPLY: 2,
	  EXCEPTION: 3,
	  ONEWAY: 4
	};

	exports.TException = TException;

	function TException(message) {
	  Error.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.name = this.constructor.name;
	  this.message = message;
	};
	util.inherits(TException, Error);

	var TApplicationExceptionType = exports.TApplicationExceptionType = {
	  UNKNOWN: 0,
	  UNKNOWN_METHOD: 1,
	  INVALID_MESSAGE_TYPE: 2,
	  WRONG_METHOD_NAME: 3,
	  BAD_SEQUENCE_ID: 4,
	  MISSING_RESULT: 5,
	  INTERNAL_ERROR: 6,
	  PROTOCOL_ERROR: 7,
	  INVALID_TRANSFORM: 8,
	  INVALID_PROTOCOL: 9,
	  UNSUPPORTED_CLIENT_TYPE: 10
	};

	exports.TApplicationException = TApplicationException;

	function TApplicationException(type, message) {
	  TException.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.type = type || TApplicationExceptionType.UNKNOWN;
	  this.name = this.constructor.name;
	  this.message = message;
	};
	util.inherits(TApplicationException, TException);

	TApplicationException.prototype.read = function(input) {
	  var ftype;
	  var ret = input.readStructBegin('TApplicationException');

	  while(1){
	      ret = input.readFieldBegin();
	      if(ret.ftype == Type.STOP)
	          break;

	      switch(ret.fid){
	          case 1:
	              if( ret.ftype == Type.STRING ){
	                  ret = input.readString();
	                  this.message = ret;
	              } else {
	                  ret = input.skip(ret.ftype);
	              }
	              break;
	          case 2:
	              if( ret.ftype == Type.I32 ){
	                  ret = input.readI32();
	                  this.type = ret;
	              } else {
	                  ret   = input.skip(ret.ftype);
	              }
	              break;
	          default:
	              ret = input.skip(ret.ftype);
	              break;
	      }
	      input.readFieldEnd();
	  }
	  input.readStructEnd();
	};

	TApplicationException.prototype.write = function(output){
	  output.writeStructBegin('TApplicationException');

	  if (this.message) {
	      output.writeFieldBegin('message', Type.STRING, 1);
	      output.writeString(this.message);
	      output.writeFieldEnd();
	  }

	  if (this.code) {
	      output.writeFieldBegin('type', Type.I32, 2);
	      output.writeI32(this.code);
	      output.writeFieldEnd();
	  }

	  output.writeFieldStop();
	  output.writeStructEnd();
	};

	var TProtocolExceptionType = exports.TProtocolExceptionType = {
	  UNKNOWN: 0,
	  INVALID_DATA: 1,
	  NEGATIVE_SIZE: 2,
	  SIZE_LIMIT: 3,
	  BAD_VERSION: 4,
	  NOT_IMPLEMENTED: 5,
	  DEPTH_LIMIT: 6
	};


	exports.TProtocolException = TProtocolException;

	function TProtocolException(type, message) {
	  Error.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.name = this.constructor.name;
	  this.type = type;
	  this.message = message;
	};
	util.inherits(TProtocolException, Error);

	exports.objectLength = function(obj) {
	  return Object.keys(obj).length;
	};

	exports.inherits = function(constructor, superConstructor) {
	  util.inherits(constructor, superConstructor);
	};

	var copyList, copyMap;

	copyList = function(lst, types) {

	  if (!lst) {return lst; }

	  var type;

	  if (types.shift === undefined) {
	    type = types;
	  }
	  else {
	    type = types[0];
	  }
	  var Type = type;

	  var len = lst.length, result = [], i, val;
	  for (i = 0; i < len; i++) {
	    val = lst[i];
	    if (type === null) {
	      result.push(val);
	    }
	    else if (type === copyMap || type === copyList) {
	      result.push(type(val, types.slice(1)));
	    }
	    else {
	      result.push(new Type(val));
	    }
	  }
	  return result;
	};

	copyMap = function(obj, types){

	  if (!obj) {return obj; }

	  var type;

	  if (types.shift === undefined) {
	    type = types;
	  }
	  else {
	    type = types[0];
	  }
	  var Type = type;

	  var result = {}, val;
	  for(var prop in obj) {
	    if(obj.hasOwnProperty(prop)) {
	      val = obj[prop];
	      if (type === null) {
	        result[prop] = val;
	      }
	      else if (type === copyMap || type === copyList) {
	        result[prop] = type(val, types.slice(1));
	      }
	      else {
	        result[prop] = new Type(val);
	      }
	    }
	  }
	  return result;
	};

	module.exports.copyMap = copyMap;
	module.exports.copyList = copyList;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(20);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(21);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(19)))

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(18);
	var EventEmitter = __webpack_require__(23).EventEmitter;
	var net = __webpack_require__(24);
	var tls = __webpack_require__(24);
	var thrift = __webpack_require__(17);

	var TBufferedTransport = __webpack_require__(25);
	var TBinaryProtocol = __webpack_require__(32);
	var InputBufferUnderrunError = __webpack_require__(31);

	var createClient = __webpack_require__(35);

	var binary = __webpack_require__(30);

	var Connection = exports.Connection = function(stream, options) {
	  var self = this;
	  EventEmitter.call(this);

	  this.seqId2Service = {};
	  this.connection = stream;
	  this.ssl = (stream.encrypted);
	  this.options = options || {};
	  this.transport = this.options.transport || TBufferedTransport;
	  this.protocol = this.options.protocol || TBinaryProtocol;
	  this.offline_queue = [];
	  this.connected = false;
	  this.initialize_retry_vars();

	  this._debug = this.options.debug || false;
	  if (this.options.max_attempts &&
	      !isNaN(this.options.max_attempts) &&
	      this.options.max_attempts > 0) {
	     this.max_attempts = +this.options.max_attempts;
	  }
	  this.retry_max_delay = null;
	  if (this.options.retry_max_delay !== undefined &&
	      !isNaN(this.options.retry_max_delay) &&
	      this.options.retry_max_delay > 0) {
	     this.retry_max_delay = this.options.retry_max_delay;
	  }
	  this.connect_timeout = false;
	  if (this.options.connect_timeout &&
	      !isNaN(this.options.connect_timeout) &&
	      this.options.connect_timeout > 0) {
	     this.connect_timeout = +this.options.connect_timeout;
	  }

	  this.connection.addListener(this.ssl ? "secureConnect" : "connect", function() {
	    self.connected = true;

	    this.setTimeout(self.options.timeout || 0);
	    this.setNoDelay();
	    this.frameLeft = 0;
	    this.framePos = 0;
	    this.frame = null;
	    self.initialize_retry_vars();

	    self.offline_queue.forEach(function(data) {
	      self.connection.write(data);
	    });

	    self.emit("connect");
	  });

	  this.connection.addListener("error", function(err) {
	    // Only emit the error if no-one else is listening on the connection
	    // or if someone is listening on us, because Node turns unhandled
	    // 'error' events into exceptions.
	    if (self.connection.listeners('error').length === 1 ||
	        self.listeners('error').length > 0) {
	      self.emit("error", err);
	    }
	  });

	  // Add a close listener
	  this.connection.addListener("close", function() {
	    self.connection_gone(); // handle close event. try to reconnect
	  });

	  this.connection.addListener("timeout", function() {
	    self.emit("timeout");
	  });

	  this.connection.addListener("data", self.transport.receiver(function(transport_with_data) {
	    var message = new self.protocol(transport_with_data);
	    try {
	      while (true) {
	        var header = message.readMessageBegin();
	        var dummy_seqid = header.rseqid * -1;
	        var client = self.client;
	        //The Multiplexed Protocol stores a hash of seqid to service names
	        //  in seqId2Service. If the SeqId is found in the hash we need to
	        //  lookup the appropriate client for this call.
	        //  The connection.client object is a single client object when not
	        //  multiplexing, when using multiplexing it is a service name keyed
	        //  hash of client objects.
	        //NOTE: The 2 way interdependencies between protocols, transports,
	        //  connections and clients in the Node.js implementation are irregular
	        //  and make the implementation difficult to extend and maintain. We
	        //  should bring this stuff inline with typical thrift I/O stack
	        //  operation soon.
	        //  --ra
	        var service_name = self.seqId2Service[header.rseqid];
	        if (service_name) {
	          client = self.client[service_name];
	          delete self.seqId2Service[header.rseqid];
	        }
	        /*jshint -W083 */
	        client._reqs[dummy_seqid] = function(err, success){
	          transport_with_data.commitPosition();

	          var callback = client._reqs[header.rseqid];
	          delete client._reqs[header.rseqid];
	          if (callback) {
	            callback(err, success);
	          }
	        };
	        /*jshint +W083 */

	        if(client['recv_' + header.fname]) {
	          client['recv_' + header.fname](message, header.mtype, dummy_seqid);
	        } else {
	          delete client._reqs[dummy_seqid];
	          self.emit("error",
	                    new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME,
	                             "Received a response to an unknown RPC function"));
	        }
	      }
	    }
	    catch (e) {
	      if (e instanceof InputBufferUnderrunError) {
	        transport_with_data.rollbackPosition();
	      }
	      else {
	        self.emit('error', e);
	      }
	    }
	  }));
	};
	util.inherits(Connection, EventEmitter);

	Connection.prototype.end = function() {
	  this.connection.end();
	};

	Connection.prototype.destroy = function() {
	  this.connection.destroy();
	};

	Connection.prototype.initialize_retry_vars = function () {
	  this.retry_timer = null;
	  this.retry_totaltime = 0;
	  this.retry_delay = 150;
	  this.retry_backoff = 1.7;
	  this.attempts = 0;
	};

	Connection.prototype.write = function(data) {
	  if (!this.connected) {
	    this.offline_queue.push(data);
	    return;
	  }
	  this.connection.write(data);
	};

	Connection.prototype.connection_gone = function () {
	  var self = this;
	  this.connected = false;

	  // If a retry is already in progress, just let that happen
	  if (this.retry_timer) {
	    return;
	  }
	  // We cannot reconnect a secure socket.
	  if (!this.max_attempts || this.ssl) {
	    self.emit("close");
	    return;
	  }

	  if (this.retry_max_delay !== null && this.retry_delay >= this.retry_max_delay) {
	    this.retry_delay = this.retry_max_delay;
	  } else {
	    this.retry_delay = Math.floor(this.retry_delay * this.retry_backoff);
	  }

	  if (self._debug) {
	    console.log("Retry connection in " + this.retry_delay + " ms");
	  }

	  if (this.max_attempts && this.attempts >= this.max_attempts) {
	    this.retry_timer = null;
	    console.error("thrift: Couldn't get thrift connection after " + this.max_attempts + " attempts.");
	    self.emit("close");
	    return;
	  }

	  this.attempts += 1;
	  this.emit("reconnecting", {
	    delay: self.retry_delay,
	    attempt: self.attempts
	  });

	  this.retry_timer = setTimeout(function () {
	    if (self._debug) {
	       console.log("Retrying connection...");
		}

	    self.retry_totaltime += self.retry_delay;

	    if (self.connect_timeout && self.retry_totaltime >= self.connect_timeout) {
	       self.retry_timer = null;
	       console.error("thrift: Couldn't get thrift connection after " + self.retry_totaltime + "ms.");
	       self.emit("close");
	       return;
	    }

	    self.connection.connect(self.port, self.host);
	    self.retry_timer = null;
	  }, this.retry_delay);
	};

	exports.createConnection = function(host, port, options) {
	  var stream = net.createConnection(port, host);
	  var connection = new Connection(stream, options);
	  connection.host = host;
	  connection.port = port;

	  return connection;
	};

	exports.createSSLConnection = function(host, port, options) {
	  var stream = tls.connect(port, host, options);
	  var connection = new Connection(stream, options);
	  connection.host = host;
	  connection.port = port;

	  return connection;
	};


	exports.createClient = createClient;

	var child_process = __webpack_require__(24);
	var StdIOConnection = exports.StdIOConnection = function(command, options) {
	  var command_parts = command.split(' ');
	  command = command_parts[0];
	  var args = command_parts.splice(1,command_parts.length -1);
	  var child = this.child = child_process.spawn(command,args);

	  var self = this;
	  EventEmitter.call(this);

	  this._debug = options.debug || false;
	  this.connection = child.stdin;
	  this.options = options || {};
	  this.transport = this.options.transport || TBufferedTransport;
	  this.protocol = this.options.protocol || TBinaryProtocol;
	  this.offline_queue = [];

	  if(this._debug === true){
	    this.child.stderr.on('data',function(err){
	      console.log(err.toString(),'CHILD ERROR');
	    });

	    this.child.on('exit',function(code,signal){
	      console.log(code+':'+signal,'CHILD EXITED');
	    });
	  }

	  this.frameLeft = 0;
	  this.framePos = 0;
	  this.frame = null;
	  this.connected = true;

	  self.offline_queue.forEach(function(data) {
	      self.connection.write(data);
	  });


	  this.connection.addListener("error", function(err) {
	    self.emit("error", err);
	  });

	  // Add a close listener
	  this.connection.addListener("close", function() {
	    self.emit("close");
	  });

	  child.stdout.addListener("data", self.transport.receiver(function(transport_with_data) {
	    var message = new self.protocol(transport_with_data);
	    try {
	      var header = message.readMessageBegin();
	      var dummy_seqid = header.rseqid * -1;
	      var client = self.client;
	      client._reqs[dummy_seqid] = function(err, success){
	        transport_with_data.commitPosition();

	        var callback = client._reqs[header.rseqid];
	        delete client._reqs[header.rseqid];
	        if (callback) {
	          callback(err, success);
	        }
	      };
	      client['recv_' + header.fname](message, header.mtype, dummy_seqid);
	    }
	    catch (e) {
	      if (e instanceof InputBufferUnderrunError) {
	        transport_with_data.rollbackPosition();
	      }
	      else {
	        throw e;
	      }
	    }
	  }));
	};

	util.inherits(StdIOConnection, EventEmitter);

	StdIOConnection.prototype.end = function() {
	  this.connection.end();
	};

	StdIOConnection.prototype.write = function(data) {
	  if (!this.connected) {
	    this.offline_queue.push(data);
	    return;
	  }
	  this.connection.write(data);
	};

	exports.createStdIOConnection = function(command,options){
	  return new StdIOConnection(command,options);
	};

	exports.createStdIOClient = createClient;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var binary = __webpack_require__(30);
	var InputBufferUnderrunError = __webpack_require__(31);

	module.exports = TBufferedTransport;

	function TBufferedTransport(buffer, callback) {
	  this.defaultReadBufferSize = 1024;
	  this.writeBufferSize = 512; // Soft Limit
	  this.inBuf = new Buffer(this.defaultReadBufferSize);
	  this.readCursor = 0;
	  this.writeCursor = 0; // for input buffer
	  this.outBuffers = [];
	  this.outCount = 0;
	  this.onFlush = callback;
	};

	TBufferedTransport.receiver = function(callback, seqid) {
	  var reader = new TBufferedTransport();

	  return function(data) {
	    if (reader.writeCursor + data.length > reader.inBuf.length) {
	      var buf = new Buffer(reader.writeCursor + data.length);
	      reader.inBuf.copy(buf, 0, 0, reader.writeCursor);
	      reader.inBuf = buf;
	    }
	    data.copy(reader.inBuf, reader.writeCursor, 0);
	    reader.writeCursor += data.length;

	    callback(reader, seqid);
	  };
	};


	TBufferedTransport.prototype.commitPosition = function(){
	  var unreadSize = this.writeCursor - this.readCursor;
	  var bufSize = (unreadSize * 2 > this.defaultReadBufferSize) ?
	    unreadSize * 2 : this.defaultReadBufferSize;
	  var buf = new Buffer(bufSize);
	  if (unreadSize > 0) {
	    this.inBuf.copy(buf, 0, this.readCursor, this.writeCursor);
	  }
	  this.readCursor = 0;
	  this.writeCursor = unreadSize;
	  this.inBuf = buf;
	};

	TBufferedTransport.prototype.rollbackPosition = function(){
	  this.readCursor = 0;
	}

	  // TODO: Implement open/close support
	TBufferedTransport.prototype.isOpen = function() {
	  return true;
	};

	TBufferedTransport.prototype.open = function() {
	};

	TBufferedTransport.prototype.close = function() {
	};

	  // Set the seqid of the message in the client
	  // So that callbacks can be found
	TBufferedTransport.prototype.setCurrSeqId = function(seqid) {
	  this._seqid = seqid;
	};

	TBufferedTransport.prototype.ensureAvailable = function(len) {
	  if (this.readCursor + len > this.writeCursor) {
	    throw new InputBufferUnderrunError();
	  }
	};

	TBufferedTransport.prototype.read = function(len) {
	  this.ensureAvailable(len);
	  var buf = new Buffer(len);
	  this.inBuf.copy(buf, 0, this.readCursor, this.readCursor + len);
	  this.readCursor += len;
	  return buf;
	};

	TBufferedTransport.prototype.readByte = function() {
	  this.ensureAvailable(1);
	  return binary.readByte(this.inBuf[this.readCursor++]);
	};

	TBufferedTransport.prototype.readI16 = function() {
	  this.ensureAvailable(2);
	  var i16 = binary.readI16(this.inBuf, this.readCursor);
	  this.readCursor += 2;
	  return i16;
	};

	TBufferedTransport.prototype.readI32 = function() {
	  this.ensureAvailable(4);
	  var i32 = binary.readI32(this.inBuf, this.readCursor);
	  this.readCursor += 4;
	  return i32;
	};

	TBufferedTransport.prototype.readDouble = function() {
	  this.ensureAvailable(8);
	  var d = binary.readDouble(this.inBuf, this.readCursor);
	  this.readCursor += 8;
	  return d;
	};

	TBufferedTransport.prototype.readString = function(len) {
	  this.ensureAvailable(len);
	  var str = this.inBuf.toString('utf8', this.readCursor, this.readCursor + len);
	  this.readCursor += len;
	  return str;
	};

	TBufferedTransport.prototype.borrow = function() {
	  var obj = {buf: this.inBuf, readIndex: this.readCursor, writeIndex: this.writeCursor};
	  return obj;
	};

	TBufferedTransport.prototype.consume = function(bytesConsumed) {
	  this.readCursor += bytesConsumed;
	};

	TBufferedTransport.prototype.write = function(buf) {
	  if (typeof(buf) === "string") {
	    buf = new Buffer(buf, 'utf8');
	  }
	  this.outBuffers.push(buf);
	  this.outCount += buf.length;
	};

	TBufferedTransport.prototype.flush = function() {
	  // If the seqid of the callback is available pass it to the onFlush
	  // Then remove the current seqid
	  var seqid = this._seqid;
	  this._seqid = null;

	  if (this.outCount < 1) {
	    return;
	  }

	  var msg = new Buffer(this.outCount),
	      pos = 0;
	  this.outBuffers.forEach(function(buf) {
	    buf.copy(msg, pos, 0);
	    pos += buf.length;
	  });

	  if (this.onFlush) {
	    // Passing seqid through this call to get it to the connection
	    this.onFlush(msg, seqid);
	  }

	  this.outBuffers = [];
	  this.outCount = 0;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(27)
	var ieee754 = __webpack_require__(28)
	var isArray = __webpack_require__(29)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ }),
/* 28 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 29 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var POW_8 = Math.pow(2, 8);
	var POW_16 = Math.pow(2, 16);
	var POW_24 = Math.pow(2, 24);
	var POW_32 = Math.pow(2, 32);
	var POW_40 = Math.pow(2, 40);
	var POW_48 = Math.pow(2, 48);
	var POW_52 = Math.pow(2, 52);
	var POW_1022 = Math.pow(2, 1022);

	exports.readByte = function(b){
		return b > 127 ? b-256 : b;
	};

	exports.readI16 = function(buff, off) {
	  off = off || 0;
	  var v = buff[off + 1];
	  v += buff[off] << 8;
	  if (buff[off] & 128) {
	    v -= POW_16;
	  }
	  return v;
	};

	exports.readI32 = function(buff, off) {
	  off = off || 0;
	  var v = buff[off + 3];
	  v += buff[off + 2] << 8;
	  v += buff[off + 1] << 16;
	  v += buff[off] * POW_24;
	  if (buff[off] & 0x80) {
	    v -= POW_32;
	  }
	  return v;
	};

	exports.writeI16 = function(buff, v) {
	  buff[1] = v & 0xff;
	  v >>= 8;
	  buff[0] = v & 0xff;
	  return buff;
	};

	exports.writeI32 = function(buff, v) {
	  buff[3] = v & 0xff;
	  v >>= 8;
	  buff[2] = v & 0xff;
	  v >>= 8;
	  buff[1] = v & 0xff;
	  v >>= 8;
	  buff[0] = v & 0xff;
	  return buff;
	};

	exports.readDouble = function(buff, off) {
	  off = off || 0;
	  var signed = buff[off] & 0x80;
	  var e = (buff[off+1] & 0xF0) >> 4;
	  e += (buff[off] & 0x7F) << 4;

	  var m = buff[off+7];
	  m += buff[off+6] << 8;
	  m += buff[off+5] << 16;
	  m += buff[off+4] * POW_24;
	  m += buff[off+3] * POW_32;
	  m += buff[off+2] * POW_40;
	  m += (buff[off+1] & 0x0F) * POW_48;

	  switch (e) {
	    case 0:
	      e = -1022;
	      break;
	    case 2047:
	      return m ? NaN : (signed ? -Infinity : Infinity);
	    default:
	      m += POW_52;
	      e -= 1023;
	  }

	  if (signed) {
	    m *= -1;
	  }

	  return m * Math.pow(2, e - 52);
	};

	/*
	 * Based on code from the jspack module:
	 * http://code.google.com/p/jspack/
	 */
	exports.writeDouble = function(buff, v) {
	  var m, e, c;

	  buff[0] = (v < 0 ? 0x80 : 0x00);

	  v = Math.abs(v);
	  if (v !== v) {
	    // NaN, use QNaN IEEE format
	    m = 2251799813685248;
	    e = 2047;
	  } else if (v === Infinity) {
	    m = 0;
	    e = 2047;
	  } else {
	    e = Math.floor(Math.log(v) / Math.LN2);
	    c = Math.pow(2, -e);
	    if (v * c < 1) {
	      e--;
	      c *= 2;
	    }

	    if (e + 1023 >= 2047)
	    {
	      // Overflow
	      m = 0;
	      e = 2047;
	    }
	    else if (e + 1023 >= 1)
	    {
	      // Normalized - term order matters, as Math.pow(2, 52-e) and v*Math.pow(2, 52) can overflow
	      m = (v*c-1) * POW_52;
	      e += 1023;
	    }
	    else
	    {
	      // Denormalized - also catches the '0' case, somewhat by chance
	      m = (v * POW_1022) * POW_52;
	      e = 0;
	    }
	  }

	  buff[1] = (e << 4) & 0xf0;
	  buff[0] |= (e >> 4) & 0x7f;

	  buff[7] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[6] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[5] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[4] = m & 0xff;
	  m >>= 8;
	  buff[3] = m & 0xff;
	  m >>= 8;
	  buff[2] = m & 0xff;
	  m >>= 8;
	  buff[1] |= m & 0x0f;

	  return buff;
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(18);

	module.exports = InputBufferUnderrunError;

	function InputBufferUnderrunError(message) {
	  Error.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.name = this.constructor.name;
	  this.message = message;
	};

	util.inherits(InputBufferUnderrunError, Error);


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var log = __webpack_require__(33);
	var binary = __webpack_require__(30);
	var Int64 = __webpack_require__(34);
	var Thrift = __webpack_require__(17);
	var Type = Thrift.Type;

	module.exports = TBinaryProtocol;

	// JavaScript supports only numeric doubles, therefore even hex values are always signed.
	// The largest integer value which can be represented in JavaScript is +/-2^53.
	// Bitwise operations convert numbers to 32 bit integers but perform sign extension
	// upon assigning values back to variables.
	var VERSION_MASK = -65536,   // 0xffff0000
	    VERSION_1 = -2147418112, // 0x80010000
	    TYPE_MASK = 0x000000ff;

	function TBinaryProtocol(trans, strictRead, strictWrite) {
	  this.trans = trans;
	  this.strictRead = (strictRead !== undefined ? strictRead : false);
	  this.strictWrite = (strictWrite !== undefined ? strictWrite : true);
	};

	TBinaryProtocol.prototype.flush = function() {
	  return this.trans.flush();
	};

	TBinaryProtocol.prototype.writeMessageBegin = function(name, type, seqid) {
	    if (this.strictWrite) {
	      this.writeI32(VERSION_1 | type);
	      this.writeString(name);
	      this.writeI32(seqid);
	    } else {
	      this.writeString(name);
	      this.writeByte(type);
	      this.writeI32(seqid);
	    }
	    // Record client seqid to find callback again
	    if (this._seqid) {
	      // TODO better logging log warning
	      log.warning('SeqId already set', { 'name': name });
	    } else {
	      this._seqid = seqid;
	      this.trans.setCurrSeqId(seqid);
	    }
	};

	TBinaryProtocol.prototype.writeMessageEnd = function() {
	    if (this._seqid) {
	        this._seqid = null;
	    } else {
	        log.warning('No seqid to unset');
	    }
	};

	TBinaryProtocol.prototype.writeStructBegin = function(name) {
	};

	TBinaryProtocol.prototype.writeStructEnd = function() {
	};

	TBinaryProtocol.prototype.writeFieldBegin = function(name, type, id) {
	  this.writeByte(type);
	  this.writeI16(id);
	};

	TBinaryProtocol.prototype.writeFieldEnd = function() {
	};

	TBinaryProtocol.prototype.writeFieldStop = function() {
	  this.writeByte(Type.STOP);
	};

	TBinaryProtocol.prototype.writeMapBegin = function(ktype, vtype, size) {
	  this.writeByte(ktype);
	  this.writeByte(vtype);
	  this.writeI32(size);
	};

	TBinaryProtocol.prototype.writeMapEnd = function() {
	};

	TBinaryProtocol.prototype.writeListBegin = function(etype, size) {
	  this.writeByte(etype);
	  this.writeI32(size);
	};

	TBinaryProtocol.prototype.writeListEnd = function() {
	};

	TBinaryProtocol.prototype.writeSetBegin = function(etype, size) {
	  this.writeByte(etype);
	  this.writeI32(size);
	};

	TBinaryProtocol.prototype.writeSetEnd = function() {
	};

	TBinaryProtocol.prototype.writeBool = function(bool) {
	  if (bool) {
	    this.writeByte(1);
	  } else {
	    this.writeByte(0);
	  }
	};

	TBinaryProtocol.prototype.writeByte = function(b) {
	  this.trans.write(new Buffer([b]));
	};

	TBinaryProtocol.prototype.writeI16 = function(i16) {
	  this.trans.write(binary.writeI16(new Buffer(2), i16));
	};

	TBinaryProtocol.prototype.writeI32 = function(i32) {
	  this.trans.write(binary.writeI32(new Buffer(4), i32));
	};

	TBinaryProtocol.prototype.writeI64 = function(i64) {
	  if (i64.buffer) {
	    this.trans.write(i64.buffer);
	  } else {
	    this.trans.write(new Int64(i64).buffer);
	  }
	};

	TBinaryProtocol.prototype.writeDouble = function(dub) {
	  this.trans.write(binary.writeDouble(new Buffer(8), dub));
	};

	TBinaryProtocol.prototype.writeStringOrBinary = function(name, encoding, arg) {
	  if (typeof(arg) === 'string') {
	    this.writeI32(Buffer.byteLength(arg, encoding));
	    this.trans.write(new Buffer(arg, encoding));
	  } else if ((arg instanceof Buffer) ||
	             (Object.prototype.toString.call(arg) == '[object Uint8Array]')) {
	    // Buffers in Node.js under Browserify may extend UInt8Array instead of
	    // defining a new object. We detect them here so we can write them
	    // correctly
	    this.writeI32(arg.length);
	    this.trans.write(arg);
	  } else {
	    throw new Error(name + ' called without a string/Buffer argument: ' + arg);
	  }
	};

	TBinaryProtocol.prototype.writeString = function(arg) {
	  this.writeStringOrBinary('writeString', 'utf8', arg);
	};

	TBinaryProtocol.prototype.writeBinary = function(arg) {
	  this.writeStringOrBinary('writeBinary', 'binary', arg);
	};

	TBinaryProtocol.prototype.readMessageBegin = function() {
	  var sz = this.readI32();
	  var type, name, seqid;

	  if (sz < 0) {
	    var version = sz & VERSION_MASK;
	    if (version != VERSION_1) {
	      console.log("BAD: " + version);
	      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, "Bad version in readMessageBegin: " + sz);
	    }
	    type = sz & TYPE_MASK;
	    name = this.readString();
	    seqid = this.readI32();
	  } else {
	    if (this.strictRead) {
	      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, "No protocol version header");
	    }
	    name = this.trans.read(sz);
	    type = this.readByte();
	    seqid = this.readI32();
	  }
	  return {fname: name, mtype: type, rseqid: seqid};
	};

	TBinaryProtocol.prototype.readMessageEnd = function() {
	};

	TBinaryProtocol.prototype.readStructBegin = function() {
	  return {fname: ''};
	};

	TBinaryProtocol.prototype.readStructEnd = function() {
	};

	TBinaryProtocol.prototype.readFieldBegin = function() {
	  var type = this.readByte();
	  if (type == Type.STOP) {
	    return {fname: null, ftype: type, fid: 0};
	  }
	  var id = this.readI16();
	  return {fname: null, ftype: type, fid: id};
	};

	TBinaryProtocol.prototype.readFieldEnd = function() {
	};

	TBinaryProtocol.prototype.readMapBegin = function() {
	  var ktype = this.readByte();
	  var vtype = this.readByte();
	  var size = this.readI32();
	  return {ktype: ktype, vtype: vtype, size: size};
	};

	TBinaryProtocol.prototype.readMapEnd = function() {
	};

	TBinaryProtocol.prototype.readListBegin = function() {
	  var etype = this.readByte();
	  var size = this.readI32();
	  return {etype: etype, size: size};
	};

	TBinaryProtocol.prototype.readListEnd = function() {
	};

	TBinaryProtocol.prototype.readSetBegin = function() {
	  var etype = this.readByte();
	  var size = this.readI32();
	  return {etype: etype, size: size};
	};

	TBinaryProtocol.prototype.readSetEnd = function() {
	};

	TBinaryProtocol.prototype.readBool = function() {
	  var b = this.readByte();
	  if (b === 0) {
	    return false;
	  }
	  return true;
	};

	TBinaryProtocol.prototype.readByte = function() {
	  return this.trans.readByte();
	};

	TBinaryProtocol.prototype.readI16 = function() {
	  return this.trans.readI16();
	};

	TBinaryProtocol.prototype.readI32 = function() {
	  return this.trans.readI32();
	};

	TBinaryProtocol.prototype.readI64 = function() {
	  var buff = this.trans.read(8);
	  return new Int64(buff);
	};

	TBinaryProtocol.prototype.readDouble = function() {
	  return this.trans.readDouble();
	};

	TBinaryProtocol.prototype.readBinary = function() {
	  var len = this.readI32();
	  if (len === 0) {
	    return new Buffer(0);
	  }

	  if (len < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative binary size");
	  }
	  return this.trans.read(len);
	};

	TBinaryProtocol.prototype.readString = function() {
	  var len = this.readI32();
	  if (len === 0) {
	    return "";
	  }

	  if (len < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative string size");
	  }
	  return this.trans.readString(len);
	};

	TBinaryProtocol.prototype.getTransport = function() {
	  return this.trans;
	};

	TBinaryProtocol.prototype.skip = function(type) {
	  switch (type) {
	    case Type.STOP:
	      return;
	    case Type.BOOL:
	      this.readBool();
	      break;
	    case Type.BYTE:
	      this.readByte();
	      break;
	    case Type.I16:
	      this.readI16();
	      break;
	    case Type.I32:
	      this.readI32();
	      break;
	    case Type.I64:
	      this.readI64();
	      break;
	    case Type.DOUBLE:
	      this.readDouble();
	      break;
	    case Type.STRING:
	      this.readString();
	      break;
	    case Type.STRUCT:
	      this.readStructBegin();
	      while (true) {
	        var r = this.readFieldBegin();
	        if (r.ftype === Type.STOP) {
	          break;
	        }
	        this.skip(r.ftype);
	        this.readFieldEnd();
	      }
	      this.readStructEnd();
	      break;
	    case Type.MAP:
	      var mapBegin = this.readMapBegin();
	      for (var i = 0; i < mapBegin.size; ++i) {
	        this.skip(mapBegin.ktype);
	        this.skip(mapBegin.vtype);
	      }
	      this.readMapEnd();
	      break;
	    case Type.SET:
	      var setBegin = this.readSetBegin();
	      for (var i2 = 0; i2 < setBegin.size; ++i2) {
	        this.skip(setBegin.etype);
	      }
	      this.readSetEnd();
	      break;
	    case Type.LIST:
	      var listBegin = this.readListBegin();
	      for (var i3 = 0; i3 < listBegin.size; ++i3) {
	        this.skip(listBegin.etype);
	      }
	      this.readListEnd();
	      break;
	    default:
	      throw new  Error("Invalid type: " + type);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	module.exports = {
	  'info' : function logInfo() {},
	  'warning' : function logWarning() {},
	  'error' : function logError() {},
	  'debug' : function logDebug() {},
	  'trace' : function logTrace() {}
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {//     Int64.js
	//
	//     Copyright (c) 2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	/**
	 * Support for handling 64-bit int numbers in Javascript (node.js)
	 *
	 * JS Numbers are IEEE-754 binary double-precision floats, which limits the
	 * range of values that can be represented with integer precision to:
	 *
	 * 2^^53 <= N <= 2^53
	 *
	 * Int64 objects wrap a node Buffer that holds the 8-bytes of int64 data.  These
	 * objects operate directly on the buffer which means that if they are created
	 * using an existing buffer then setting the value will modify the Buffer, and
	 * vice-versa.
	 *
	 * Internal Representation
	 *
	 * The internal buffer format is Big Endian.  I.e. the most-significant byte is
	 * at buffer[0], the least-significant at buffer[7].  For the purposes of
	 * converting to/from JS native numbers, the value is assumed to be a signed
	 * integer stored in 2's complement form.
	 *
	 * For details about IEEE-754 see:
	 * http://en.wikipedia.org/wiki/Double_precision_floating-point_format
	 */

	// Useful masks and values for bit twiddling
	var MASK31 =  0x7fffffff, VAL31 = 0x80000000;
	var MASK32 =  0xffffffff, VAL32 = 0x100000000;

	// Map for converting hex octets to strings
	var _HEX = [];
	for (var i = 0; i < 256; i++) {
	  _HEX[i] = (i > 0xF ? '' : '0') + i.toString(16);
	}

	//
	// Int64
	//

	/**
	 * Constructor accepts any of the following argument types:
	 *
	 * new Int64(buffer[, offset=0]) - Existing Buffer with byte offset
	 * new Int64(Uint8Array[, offset=0]) - Existing Uint8Array with a byte offset
	 * new Int64(string)             - Hex string (throws if n is outside int64 range)
	 * new Int64(number)             - Number (throws if n is outside int64 range)
	 * new Int64(hi, lo)             - Raw bits as two 32-bit values
	 */
	var Int64 = module.exports = function(a1, a2) {
	  if (a1 instanceof Buffer) {
	    this.buffer = a1;
	    this.offset = a2 || 0;
	  } else if (Object.prototype.toString.call(a1) == '[object Uint8Array]') {
	    // Under Browserify, Buffers can extend Uint8Arrays rather than an
	    // instance of Buffer. We could assume the passed in Uint8Array is actually
	    // a buffer but that won't handle the case where a raw Uint8Array is passed
	    // in. We construct a new Buffer just in case.
	    this.buffer = new Buffer(a1);
	    this.offset = a2 || 0;
	  } else {
	    this.buffer = this.buffer || new Buffer(8);
	    this.offset = 0;
	    this.setValue.apply(this, arguments);
	  }
	};


	// Max integer value that JS can accurately represent
	Int64.MAX_INT = Math.pow(2, 53);

	// Min integer value that JS can accurately represent
	Int64.MIN_INT = -Math.pow(2, 53);

	Int64.prototype = {
	  /**
	   * Do in-place 2's compliment.  See
	   * http://en.wikipedia.org/wiki/Two's_complement
	   */
	  _2scomp: function() {
	    var b = this.buffer, o = this.offset, carry = 1;
	    for (var i = o + 7; i >= o; i--) {
	      var v = (b[i] ^ 0xff) + carry;
	      b[i] = v & 0xff;
	      carry = v >> 8;
	    }
	  },

	  /**
	   * Set the value. Takes any of the following arguments:
	   *
	   * setValue(string) - A hexidecimal string
	   * setValue(number) - Number (throws if n is outside int64 range)
	   * setValue(hi, lo) - Raw bits as two 32-bit values
	   */
	  setValue: function(hi, lo) {
	    var negate = false;
	    if (arguments.length == 1) {
	      if (typeof(hi) == 'number') {
	        // Simplify bitfield retrieval by using abs() value.  We restore sign
	        // later
	        negate = hi < 0;
	        hi = Math.abs(hi);
	        lo = hi % VAL32;
	        hi = hi / VAL32;
	        if (hi > VAL32) throw new RangeError(hi  + ' is outside Int64 range');
	        hi = hi | 0;
	      } else if (typeof(hi) == 'string') {
	        hi = (hi + '').replace(/^0x/, '');
	        lo = hi.substr(-8);
	        hi = hi.length > 8 ? hi.substr(0, hi.length - 8) : '';
	        hi = parseInt(hi, 16);
	        lo = parseInt(lo, 16);
	      } else {
	        throw new Error(hi + ' must be a Number or String');
	      }
	    }

	    // Technically we should throw if hi or lo is outside int32 range here, but
	    // it's not worth the effort. Anything past the 32'nd bit is ignored.

	    // Copy bytes to buffer
	    var b = this.buffer, o = this.offset;
	    for (var i = 7; i >= 0; i--) {
	      b[o+i] = lo & 0xff;
	      lo = i == 4 ? hi : lo >>> 8;
	    }

	    // Restore sign of passed argument
	    if (negate) this._2scomp();
	  },

	  /**
	   * Convert to a native JS number.
	   *
	   * WARNING: Do not expect this value to be accurate to integer precision for
	   * large (positive or negative) numbers!
	   *
	   * @param allowImprecise If true, no check is performed to verify the
	   * returned value is accurate to integer precision.  If false, imprecise
	   * numbers (very large positive or negative numbers) will be forced to +/-
	   * Infinity.
	   */
	  toNumber: function(allowImprecise) {
	    var b = this.buffer, o = this.offset;

	    // Running sum of octets, doing a 2's complement
	    var negate = b[o] & 0x80, x = 0, carry = 1;
	    for (var i = 7, m = 1; i >= 0; i--, m *= 256) {
	      var v = b[o+i];

	      // 2's complement for negative numbers
	      if (negate) {
	        v = (v ^ 0xff) + carry;
	        carry = v >> 8;
	        v = v & 0xff;
	      }

	      x += v * m;
	    }

	    // Return Infinity if we've lost integer precision
	    if (!allowImprecise && x >= Int64.MAX_INT) {
	      return negate ? -Infinity : Infinity;
	    }

	    return negate ? -x : x;
	  },

	  /**
	   * Convert to a JS Number. Returns +/-Infinity for values that can't be
	   * represented to integer precision.
	   */
	  valueOf: function() {
	    return this.toNumber(false);
	  },

	  /**
	   * Return string value
	   *
	   * @param radix Just like Number#toString()'s radix
	   */
	  toString: function(radix) {
	    return this.valueOf().toString(radix || 10);
	  },

	  /**
	   * Return a string showing the buffer octets, with MSB on the left.
	   *
	   * @param sep separator string. default is '' (empty string)
	   */
	  toOctetString: function(sep) {
	    var out = new Array(8);
	    var b = this.buffer, o = this.offset;
	    for (var i = 0; i < 8; i++) {
	      out[i] = _HEX[b[o+i]];
	    }
	    return out.join(sep || '');
	  },

	  /**
	   * Returns the int64's 8 bytes in a buffer.
	   *
	   * @param {bool} [rawBuffer=false]  If no offset and this is true, return the internal buffer.  Should only be used if
	   *                                  you're discarding the Int64 afterwards, as it breaks encapsulation.
	   */
	  toBuffer: function(rawBuffer) {
	    if (rawBuffer && this.offset === 0) return this.buffer;

	    var out = new Buffer(8);
	    this.buffer.copy(out, 0, this.offset, this.offset + 8);
	    return out;
	  },

	  /**
	   * Copy 8 bytes of int64 into target buffer at target offset.
	   *
	   * @param {Buffer} targetBuffer       Buffer to copy into.
	   * @param {number} [targetOffset=0]   Offset into target buffer.
	   */
	  copy: function(targetBuffer, targetOffset) {
	    this.buffer.copy(targetBuffer, targetOffset || 0, this.offset, this.offset + 8);
	  },

	  /**
	   * Pretty output in console.log
	   */
	  inspect: function() {
	    return '[Int64 value:' + this + ' octets:' + this.toOctetString(' ') + ']';
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	module.exports = createClient;

	/**
	 * Creates a new client object for the specified Thrift service.
	 * @param {object} ServiceClient - The module containing the generated service client
	 * @param {Connection} Connection - The connection to use.
	 * @returns {object} The client object.
	 */
	function createClient(ServiceClient, connection) {
	  // TODO validate required options and throw otherwise
	  if (ServiceClient.Client) {
	    ServiceClient = ServiceClient.Client;
	  }
	  // TODO detangle these initialization calls
	  // creating "client" requires
	  //   - new service client instance
	  //
	  // New service client instance requires
	  //   - new transport instance
	  //   - protocol class reference
	  //
	  // New transport instance requires
	  //   - Buffer to use (or none)
	  //   - Callback to call on flush

	  // Wrap the write method
	  var writeCb = function(buf, seqid) {
	    connection.write(buf, seqid);
	  };
	  var transport = new connection.transport(undefined, writeCb);
	  var client = new ServiceClient(transport, connection.protocol);
	  transport.client = client;
	  connection.client = client;
	  return client;
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(18);
	var http = __webpack_require__(37);
	var https = __webpack_require__(67);
	var EventEmitter = __webpack_require__(23).EventEmitter;
	var thrift = __webpack_require__(17);

	var TBufferedTransport = __webpack_require__(25);
	var TBinaryProtocol = __webpack_require__(32);
	var InputBufferUnderrunError = __webpack_require__(31);

	var createClient = __webpack_require__(35);

	/**
	 * @class
	 * @name ConnectOptions
	 * @property {string} transport - The Thrift layered transport to use (TBufferedTransport, etc).
	 * @property {string} protocol - The Thrift serialization protocol to use (TBinaryProtocol, etc.).
	 * @property {string} path - The URL path to POST to (e.g. "/", "/mySvc", "/thrift/quoteSvc", etc.).
	 * @property {object} headers - A standard Node.js header hash, an object hash containing key/value
	 *        pairs where the key is the header name string and the value is the header value string.
	 * @property {boolean} https - True causes the connection to use https, otherwise http is used.
	 * @property {object} nodeOptions - Options passed on to node.
	 * @example
	 *     //Use a connection that requires ssl/tls, closes the connection after each request,
	 *     //  uses the buffered transport layer, uses the JSON protocol and directs RPC traffic
	 *     //  to https://thrift.example.com:9090/hello
	 *     var thrift = require('thrift');
	 *     var options = {
	 *        transport: thrift.TBufferedTransport,
	 *        protocol: thrift.TJSONProtocol,
	 *        path: "/hello",
	 *        headers: {"Connection": "close"},
	 *        https: true
	 *     };
	 *     var con = thrift.createHttpConnection("thrift.example.com", 9090, options);
	 *     var client = thrift.createHttpClient(myService, connection);
	 *     client.myServiceFunction();
	 */

	/**
	 * Initializes a Thrift HttpConnection instance (use createHttpConnection() rather than
	 *    instantiating directly).
	 * @constructor
	 * @param {string} host - The host name or IP to connect to.
	 * @param {number} port - The TCP port to connect to.
	 * @param {ConnectOptions} options - The configuration options to use.
	 * @throws {error} Exceptions other than InputBufferUnderrunError are rethrown
	 * @event {error} The "error" event is fired when a Node.js error event occurs during
	 *     request or response processing, in which case the node error is passed on. An "error"
	 *     event may also be fired when the connection can not map a response back to the
	 *     appropriate client (an internal error), generating a TApplicationException.
	 * @classdesc HttpConnection objects provide Thrift end point transport
	 *     semantics implemented over the Node.js http.request() method.
	 * @see {@link createHttpConnection}
	 */
	var HttpConnection = exports.HttpConnection = function(host, port, options) {
	  //Initialize the emitter base object
	  EventEmitter.call(this);

	  //Set configuration
	  var self = this;
	  this.options = options || {};
	  this.host = host;
	  this.port = port;
	  this.https = this.options.https || false;
	  this.transport = this.options.transport || TBufferedTransport;
	  this.protocol = this.options.protocol || TBinaryProtocol;

	  //Prepare Node.js options
	  this.nodeOptions = {
	    host: this.host,
	    port: this.port || 80,
	    path: this.options.path || '/',
	    method: 'POST',
	    headers: this.options.headers || {},
	    responseType: this.options.responseType || null
	  };
	  for (var attrname in this.options.nodeOptions) {
	    this.nodeOptions[attrname] = this.options.nodeOptions[attrname];
	  }
	  /*jshint -W069 */
	  if (! this.nodeOptions.headers['Connection']) {
	    this.nodeOptions.headers['Connection'] = 'keep-alive';
	  }
	  /*jshint +W069 */

	  //The sequence map is used to map seqIDs back to the
	  //  calling client in multiplexed scenarios
	  this.seqId2Service = {};

	  function decodeCallback(transport_with_data) {
	    var proto = new self.protocol(transport_with_data);
	    try {
	      while (true) {
	        var header = proto.readMessageBegin();
	        var dummy_seqid = header.rseqid * -1;
	        var client = self.client;
	        //The Multiplexed Protocol stores a hash of seqid to service names
	        //  in seqId2Service. If the SeqId is found in the hash we need to
	        //  lookup the appropriate client for this call.
	        //  The client var is a single client object when not multiplexing,
	        //  when using multiplexing it is a service name keyed hash of client
	        //  objects.
	        //NOTE: The 2 way interdependencies between protocols, transports,
	        //  connections and clients in the Node.js implementation are irregular
	        //  and make the implementation difficult to extend and maintain. We
	        //  should bring this stuff inline with typical thrift I/O stack
	        //  operation soon.
	        //  --ra
	        var service_name = self.seqId2Service[header.rseqid];
	        if (service_name) {
	          client = self.client[service_name];
	          delete self.seqId2Service[header.rseqid];
	        }
	        /*jshint -W083 */
	        client._reqs[dummy_seqid] = function(err, success){
	          transport_with_data.commitPosition();
	          var clientCallback = client._reqs[header.rseqid];
	          delete client._reqs[header.rseqid];
	          if (clientCallback) {
	            process.nextTick(function() {
	              clientCallback(err, success);
	            });
	          }
	        };
	        /*jshint +W083 */
	        if(client['recv_' + header.fname]) {
	          client['recv_' + header.fname](proto, header.mtype, dummy_seqid);
	        } else {
	          delete client._reqs[dummy_seqid];
	          self.emit("error",
	                    new thrift.TApplicationException(
	                       thrift.TApplicationExceptionType.WRONG_METHOD_NAME,
	                       "Received a response to an unknown RPC function"));
	        }
	      }
	    }
	    catch (e) {
	      if (e instanceof InputBufferUnderrunError) {
	        transport_with_data.rollbackPosition();
	      } else {
	        self.emit('error', e);
	      }
	    }
	  }


	  //Response handler
	  //////////////////////////////////////////////////
	  this.responseCallback = function(response) {
	    var data = [];
	    var dataLen = 0;

	    response.on('error', function (e) {
	      self.emit("error", e);
	    });

	    // When running directly under node, chunk will be a buffer,
	    // however, when running in a Browser (e.g. Browserify), chunk
	    // will be a string or an ArrayBuffer.
	    response.on('data', function (chunk) {
	      if ((typeof chunk == 'string') ||
	          (Object.prototype.toString.call(chunk) == '[object Uint8Array]')) {
	        // Wrap ArrayBuffer/string in a Buffer so data[i].copy will work
	        data.push(new Buffer(chunk));
	      } else {
	        data.push(chunk);
	      }
	      dataLen += chunk.length;
	    });

	    response.on('end', function(){
	      var buf = new Buffer(dataLen);
	      for (var i=0, len=data.length, pos=0; i<len; i++) {
	        data[i].copy(buf, pos);
	        pos += data[i].length;
	      }
	      //Get the receiver function for the transport and
	      //  call it with the buffer
	      self.transport.receiver(decodeCallback)(buf);
	    });
	  };
	};
	util.inherits(HttpConnection, EventEmitter);

	/**
	 * Writes Thrift message data to the connection
	 * @param {Buffer} data - A Node.js Buffer containing the data to write
	 * @returns {void} No return value.
	 * @event {error} the "error" event is raised upon request failure passing the
	 *     Node.js error object to the listener.
	 */
	HttpConnection.prototype.write = function(data) {
	  var self = this;
	  self.nodeOptions.headers["Content-length"] = data.length;
	  var req = (self.https) ?
	      https.request(self.nodeOptions, self.responseCallback) :
	      http.request(self.nodeOptions, self.responseCallback);
	  req.on('error', function(err) {
	    self.emit("error", err);
	  });
	  req.write(data);
	  req.end();
	};

	/**
	 * Creates a new HttpConnection object, used by Thrift clients to connect
	 *    to Thrift HTTP based servers.
	 * @param {string} host - The host name or IP to connect to.
	 * @param {number} port - The TCP port to connect to.
	 * @param {ConnectOptions} options - The configuration options to use.
	 * @returns {HttpConnection} The connection object.
	 * @see {@link ConnectOptions}
	 */
	exports.createHttpConnection = function(host, port, options) {
	  return new HttpConnection(host, port, options);
	};

	exports.createHttpClient = createClient


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19), __webpack_require__(26).Buffer))

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(38)
	var extend = __webpack_require__(59)
	var statusCodes = __webpack_require__(60)
	var url = __webpack_require__(61)

	var http = exports

	http.request = function (opts, cb) {
		if (typeof opts === 'string')
			opts = url.parse(opts)
		else
			opts = extend(opts)

		// Normally, the page is loaded from http or https, so not specifying a protocol
		// will result in a (valid) protocol-relative url. However, this won't work if
		// the protocol is something else, like 'file:'
		var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

		var protocol = opts.protocol || defaultProtocol
		var host = opts.hostname || opts.host
		var port = opts.port
		var path = opts.path || '/'

		// Necessary for IPv6 addresses
		if (host && host.indexOf(':') !== -1)
			host = '[' + host + ']'

		// This may be a relative url. The browser should always be able to interpret it correctly.
		opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
		opts.method = (opts.method || 'GET').toUpperCase()
		opts.headers = opts.headers || {}

		// Also valid opts.auth, opts.mode

		var req = new ClientRequest(opts)
		if (cb)
			req.on('response', cb)
		return req
	}

	http.get = function get (opts, cb) {
		var req = http.request(opts, cb)
		req.end()
		return req
	}

	http.Agent = function () {}
	http.Agent.defaultMaxSockets = 4

	http.STATUS_CODES = statusCodes

	http.METHODS = [
		'CHECKOUT',
		'CONNECT',
		'COPY',
		'DELETE',
		'GET',
		'HEAD',
		'LOCK',
		'M-SEARCH',
		'MERGE',
		'MKACTIVITY',
		'MKCOL',
		'MOVE',
		'NOTIFY',
		'OPTIONS',
		'PATCH',
		'POST',
		'PROPFIND',
		'PROPPATCH',
		'PURGE',
		'PUT',
		'REPORT',
		'SEARCH',
		'SUBSCRIBE',
		'TRACE',
		'UNLOCK',
		'UNSUBSCRIBE'
	]
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(39)
	var inherits = __webpack_require__(40)
	var response = __webpack_require__(41)
	var stream = __webpack_require__(42)
	var toArrayBuffer = __webpack_require__(58)

	var IncomingMessage = response.IncomingMessage
	var rStates = response.readyStates

	function decideMode (preferBinary, useFetch) {
		if (capability.fetch && useFetch) {
			return 'fetch'
		} else if (capability.mozchunkedarraybuffer) {
			return 'moz-chunked-arraybuffer'
		} else if (capability.msstream) {
			return 'ms-stream'
		} else if (capability.arraybuffer && preferBinary) {
			return 'arraybuffer'
		} else if (capability.vbArray && preferBinary) {
			return 'text:vbarray'
		} else {
			return 'text'
		}
	}

	var ClientRequest = module.exports = function (opts) {
		var self = this
		stream.Writable.call(self)

		self._opts = opts
		self._body = []
		self._headers = {}
		if (opts.auth)
			self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
		Object.keys(opts.headers).forEach(function (name) {
			self.setHeader(name, opts.headers[name])
		})

		var preferBinary
		var useFetch = true
		if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
			// If the use of XHR should be preferred and includes preserving the 'content-type' header.
			// Force XHR to be used since the Fetch API does not yet support timeouts.
			useFetch = false
			preferBinary = true
		} else if (opts.mode === 'prefer-streaming') {
			// If streaming is a high priority but binary compatibility and
			// the accuracy of the 'content-type' header aren't
			preferBinary = false
		} else if (opts.mode === 'allow-wrong-content-type') {
			// If streaming is more important than preserving the 'content-type' header
			preferBinary = !capability.overrideMimeType
		} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
			// Use binary if text streaming may corrupt data or the content-type header, or for speed
			preferBinary = true
		} else {
			throw new Error('Invalid value for opts.mode')
		}
		self._mode = decideMode(preferBinary, useFetch)

		self.on('finish', function () {
			self._onFinish()
		})
	}

	inherits(ClientRequest, stream.Writable)

	ClientRequest.prototype.setHeader = function (name, value) {
		var self = this
		var lowerName = name.toLowerCase()
		// This check is not necessary, but it prevents warnings from browsers about setting unsafe
		// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
		// http-browserify did it, so I will too.
		if (unsafeHeaders.indexOf(lowerName) !== -1)
			return

		self._headers[lowerName] = {
			name: name,
			value: value
		}
	}

	ClientRequest.prototype.getHeader = function (name) {
		var self = this
		return self._headers[name.toLowerCase()].value
	}

	ClientRequest.prototype.removeHeader = function (name) {
		var self = this
		delete self._headers[name.toLowerCase()]
	}

	ClientRequest.prototype._onFinish = function () {
		var self = this

		if (self._destroyed)
			return
		var opts = self._opts

		var headersObj = self._headers
		var body = null
		if (opts.method !== 'GET' && opts.method !== 'HEAD') {
			if (capability.blobConstructor) {
				body = new global.Blob(self._body.map(function (buffer) {
					return toArrayBuffer(buffer)
				}), {
					type: (headersObj['content-type'] || {}).value || ''
				})
			} else {
				// get utf8 string
				body = Buffer.concat(self._body).toString()
			}
		}

		// create flattened list of headers
		var headersList = []
		Object.keys(headersObj).forEach(function (keyName) {
			var name = headersObj[keyName].name
			var value = headersObj[keyName].value
			if (Array.isArray(value)) {
				value.forEach(function (v) {
					headersList.push([name, v])
				})
			} else {
				headersList.push([name, value])
			}
		})

		if (self._mode === 'fetch') {
			global.fetch(self._opts.url, {
				method: self._opts.method,
				headers: headersList,
				body: body || undefined,
				mode: 'cors',
				credentials: opts.withCredentials ? 'include' : 'same-origin'
			}).then(function (response) {
				self._fetchResponse = response
				self._connect()
			}, function (reason) {
				self.emit('error', reason)
			})
		} else {
			var xhr = self._xhr = new global.XMLHttpRequest()
			try {
				xhr.open(self._opts.method, self._opts.url, true)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}

			// Can't set responseType on really old browsers
			if ('responseType' in xhr)
				xhr.responseType = self._mode.split(':')[0]

			if ('withCredentials' in xhr)
				xhr.withCredentials = !!opts.withCredentials

			if (self._mode === 'text' && 'overrideMimeType' in xhr)
				xhr.overrideMimeType('text/plain; charset=x-user-defined')

			if ('timeout' in opts) {
				xhr.timeout = opts.timeout
				xhr.ontimeout = function () {
					self.emit('timeout')
				}
			}

			headersList.forEach(function (header) {
				xhr.setRequestHeader(header[0], header[1])
			})

			self._response = null
			xhr.onreadystatechange = function () {
				switch (xhr.readyState) {
					case rStates.LOADING:
					case rStates.DONE:
						self._onXHRProgress()
						break
				}
			}
			// Necessary for streaming in Firefox, since xhr.response is ONLY defined
			// in onprogress, not in onreadystatechange with xhr.readyState = 3
			if (self._mode === 'moz-chunked-arraybuffer') {
				xhr.onprogress = function () {
					self._onXHRProgress()
				}
			}

			xhr.onerror = function () {
				if (self._destroyed)
					return
				self.emit('error', new Error('XHR error'))
			}

			try {
				xhr.send(body)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}
		}
	}

	/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */
	function statusValid (xhr) {
		try {
			var status = xhr.status
			return (status !== null && status !== 0)
		} catch (e) {
			return false
		}
	}

	ClientRequest.prototype._onXHRProgress = function () {
		var self = this

		if (!statusValid(self._xhr) || self._destroyed)
			return

		if (!self._response)
			self._connect()

		self._response._onXHRProgress()
	}

	ClientRequest.prototype._connect = function () {
		var self = this

		if (self._destroyed)
			return

		self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
		self._response.on('error', function(err) {
			self.emit('error', err)
		})

		self.emit('response', self._response)
	}

	ClientRequest.prototype._write = function (chunk, encoding, cb) {
		var self = this

		self._body.push(chunk)
		cb()
	}

	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
		var self = this
		self._destroyed = true
		if (self._response)
			self._response._destroyed = true
		if (self._xhr)
			self._xhr.abort()
		// Currently, there isn't a way to truly abort a fetch.
		// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
	}

	ClientRequest.prototype.end = function (data, encoding, cb) {
		var self = this
		if (typeof data === 'function') {
			cb = data
			data = undefined
		}

		stream.Writable.prototype.end.call(self, data, encoding, cb)
	}

	ClientRequest.prototype.flushHeaders = function () {}
	ClientRequest.prototype.setTimeout = function () {}
	ClientRequest.prototype.setNoDelay = function () {}
	ClientRequest.prototype.setSocketKeepAlive = function () {}

	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
	var unsafeHeaders = [
		'accept-charset',
		'accept-encoding',
		'access-control-request-headers',
		'access-control-request-method',
		'connection',
		'content-length',
		'cookie',
		'cookie2',
		'date',
		'dnt',
		'expect',
		'host',
		'keep-alive',
		'origin',
		'referer',
		'te',
		'trailer',
		'transfer-encoding',
		'upgrade',
		'user-agent',
		'via'
	]

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer, (function() { return this; }()), __webpack_require__(19)))

/***/ }),
/* 39 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

	exports.blobConstructor = false
	try {
		new Blob([new ArrayBuffer(1)])
		exports.blobConstructor = true
	} catch (e) {}

	// The xhr request to example.com may violate some restrictive CSP configurations,
	// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
	// and assume support for certain features below.
	var xhr
	function getXHR () {
		// Cache the xhr value
		if (xhr !== undefined) return xhr

		if (global.XMLHttpRequest) {
			xhr = new global.XMLHttpRequest()
			// If XDomainRequest is available (ie only, where xhr might not work
			// cross domain), use the page location. Otherwise use example.com
			// Note: this doesn't actually make an http request.
			try {
				xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
			} catch(e) {
				xhr = null
			}
		} else {
			// Service workers don't have XHR
			xhr = null
		}
		return xhr
	}

	function checkTypeSupport (type) {
		var xhr = getXHR()
		if (!xhr) return false
		try {
			xhr.responseType = type
			return xhr.responseType === type
		} catch (e) {}
		return false
	}

	// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
	// Safari 7.1 appears to have fixed this bug.
	var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
	var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

	// If fetch is supported, then arraybuffer will be supported too. Skip calling
	// checkTypeSupport(), since that calls getXHR().
	exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

	// These next two tests unavoidably show warnings in Chrome. Since fetch will always
	// be used if it's available, just return false for these to avoid the warnings.
	exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
	exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
		checkTypeSupport('moz-chunked-arraybuffer')

	// If fetch is supported, then overrideMimeType will be supported too. Skip calling
	// getXHR().
	exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

	exports.vbArray = isFunction(global.VBArray)

	function isFunction (value) {
		return typeof value === 'function'
	}

	xhr = null // Help gc

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(39)
	var inherits = __webpack_require__(40)
	var stream = __webpack_require__(42)

	var rStates = exports.readyStates = {
		UNSENT: 0,
		OPENED: 1,
		HEADERS_RECEIVED: 2,
		LOADING: 3,
		DONE: 4
	}

	var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
		var self = this
		stream.Readable.call(self)

		self._mode = mode
		self.headers = {}
		self.rawHeaders = []
		self.trailers = {}
		self.rawTrailers = []

		// Fake the 'close' event, but only once 'end' fires
		self.on('end', function () {
			// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
			process.nextTick(function () {
				self.emit('close')
			})
		})

		if (mode === 'fetch') {
			self._fetchResponse = response

			self.url = response.url
			self.statusCode = response.status
			self.statusMessage = response.statusText
			
			response.headers.forEach(function(header, key){
				self.headers[key.toLowerCase()] = header
				self.rawHeaders.push(key, header)
			})


			// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
			var reader = response.body.getReader()
			function read () {
				reader.read().then(function (result) {
					if (self._destroyed)
						return
					if (result.done) {
						self.push(null)
						return
					}
					self.push(new Buffer(result.value))
					read()
				}).catch(function(err) {
					self.emit('error', err)
				})
			}
			read()

		} else {
			self._xhr = xhr
			self._pos = 0

			self.url = xhr.responseURL
			self.statusCode = xhr.status
			self.statusMessage = xhr.statusText
			var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
			headers.forEach(function (header) {
				var matches = header.match(/^([^:]+):\s*(.*)/)
				if (matches) {
					var key = matches[1].toLowerCase()
					if (key === 'set-cookie') {
						if (self.headers[key] === undefined) {
							self.headers[key] = []
						}
						self.headers[key].push(matches[2])
					} else if (self.headers[key] !== undefined) {
						self.headers[key] += ', ' + matches[2]
					} else {
						self.headers[key] = matches[2]
					}
					self.rawHeaders.push(matches[1], matches[2])
				}
			})

			self._charset = 'x-user-defined'
			if (!capability.overrideMimeType) {
				var mimeType = self.rawHeaders['mime-type']
				if (mimeType) {
					var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
					if (charsetMatch) {
						self._charset = charsetMatch[1].toLowerCase()
					}
				}
				if (!self._charset)
					self._charset = 'utf-8' // best guess
			}
		}
	}

	inherits(IncomingMessage, stream.Readable)

	IncomingMessage.prototype._read = function () {}

	IncomingMessage.prototype._onXHRProgress = function () {
		var self = this

		var xhr = self._xhr

		var response = null
		switch (self._mode) {
			case 'text:vbarray': // For IE9
				if (xhr.readyState !== rStates.DONE)
					break
				try {
					// This fails in IE8
					response = new global.VBArray(xhr.responseBody).toArray()
				} catch (e) {}
				if (response !== null) {
					self.push(new Buffer(response))
					break
				}
				// Falls through in IE8	
			case 'text':
				try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
					response = xhr.responseText
				} catch (e) {
					self._mode = 'text:vbarray'
					break
				}
				if (response.length > self._pos) {
					var newData = response.substr(self._pos)
					if (self._charset === 'x-user-defined') {
						var buffer = new Buffer(newData.length)
						for (var i = 0; i < newData.length; i++)
							buffer[i] = newData.charCodeAt(i) & 0xff

						self.push(buffer)
					} else {
						self.push(newData, self._charset)
					}
					self._pos = response.length
				}
				break
			case 'arraybuffer':
				if (xhr.readyState !== rStates.DONE || !xhr.response)
					break
				response = xhr.response
				self.push(new Buffer(new Uint8Array(response)))
				break
			case 'moz-chunked-arraybuffer': // take whole
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING || !response)
					break
				self.push(new Buffer(new Uint8Array(response)))
				break
			case 'ms-stream':
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING)
					break
				var reader = new global.MSStreamReader()
				reader.onprogress = function () {
					if (reader.result.byteLength > self._pos) {
						self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
						self._pos = reader.result.byteLength
					}
				}
				reader.onload = function () {
					self.push(null)
				}
				// reader.onerror = ??? // TODO: this
				reader.readAsArrayBuffer(response)
				break
		}

		// The ms-stream case handles end separately in reader.onload()
		if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
			self.push(null)
		}
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19), __webpack_require__(26).Buffer, (function() { return this; }())))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(43);
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(51);
	exports.Duplex = __webpack_require__(50);
	exports.Transform = __webpack_require__(56);
	exports.PassThrough = __webpack_require__(57);


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(44);
	/*</replacement>*/

	/*<replacement>*/
	var isArray = __webpack_require__(29);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(23).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = __webpack_require__(45);
	/*</replacement>*/

	var Buffer = __webpack_require__(26).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(46);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(47);
	util.inherits = __webpack_require__(40);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(48);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(49);
	var StringDecoder;

	util.inherits(Readable, Stream);

	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(50);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(55).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(50);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(55).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
	  }

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(23).EventEmitter;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var buffer = __webpack_require__(26);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 48 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(26).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(46);
	/*</replacement>*/

	module.exports = BufferList;

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = __webpack_require__(44);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(47);
	util.inherits = __webpack_require__(40);
	/*</replacement>*/

	var Readable = __webpack_require__(43);
	var Writable = __webpack_require__(51);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(44);
	/*</replacement>*/

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(47);
	util.inherits = __webpack_require__(40);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(54)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = __webpack_require__(45);
	/*</replacement>*/

	var Buffer = __webpack_require__(26).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(46);
	/*</replacement>*/

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(50);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(50);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;

	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = Buffer.isBuffer(chunk);

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    chunk = decodeChunk(state, chunk, encoding);
	    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  }
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19), __webpack_require__(52).setImmediate))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(53);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(19)))

/***/ }),
/* 54 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(26).Buffer;
	var bufferShim = __webpack_require__(46);

	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	};

	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = bufferShim.allocUnsafe(nb);
	}

	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return -1;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd'.repeat(p);
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd'.repeat(p + 1);
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd'.repeat(p + 2);
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character for each buffered byte of a (partial)
	// character needs to be added to the output.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(50);

	/*<replacement>*/
	var util = __webpack_require__(47);
	util.inherits = __webpack_require__(40);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data !== null && data !== undefined) stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(56);

	/*<replacement>*/
	var util = __webpack_require__(47);
	util.inherits = __webpack_require__(40);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(26).Buffer

	module.exports = function (buf) {
		// If the buffer is backed by a Uint8Array, a faster version will work
		if (buf instanceof Uint8Array) {
			// If the buffer isn't a subarray, return the underlying ArrayBuffer
			if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
				return buf.buffer
			} else if (typeof buf.buffer.slice === 'function') {
				// Otherwise we need to get a proper copy
				return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
			}
		}

		if (Buffer.isBuffer(buf)) {
			// This is the slow version that will work with any Buffer
			// implementation (even in old browsers)
			var arrayCopy = new Uint8Array(buf.length)
			var len = buf.length
			for (var i = 0; i < len; i++) {
				arrayCopy[i] = buf[i]
			}
			return arrayCopy.buffer
		} else {
			throw new Error('Argument must be a Buffer')
		}
	}


/***/ }),
/* 59 */
/***/ (function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ }),
/* 60 */
/***/ (function(module, exports) {

	module.exports = {
	  "100": "Continue",
	  "101": "Switching Protocols",
	  "102": "Processing",
	  "200": "OK",
	  "201": "Created",
	  "202": "Accepted",
	  "203": "Non-Authoritative Information",
	  "204": "No Content",
	  "205": "Reset Content",
	  "206": "Partial Content",
	  "207": "Multi-Status",
	  "208": "Already Reported",
	  "226": "IM Used",
	  "300": "Multiple Choices",
	  "301": "Moved Permanently",
	  "302": "Found",
	  "303": "See Other",
	  "304": "Not Modified",
	  "305": "Use Proxy",
	  "307": "Temporary Redirect",
	  "308": "Permanent Redirect",
	  "400": "Bad Request",
	  "401": "Unauthorized",
	  "402": "Payment Required",
	  "403": "Forbidden",
	  "404": "Not Found",
	  "405": "Method Not Allowed",
	  "406": "Not Acceptable",
	  "407": "Proxy Authentication Required",
	  "408": "Request Timeout",
	  "409": "Conflict",
	  "410": "Gone",
	  "411": "Length Required",
	  "412": "Precondition Failed",
	  "413": "Payload Too Large",
	  "414": "URI Too Long",
	  "415": "Unsupported Media Type",
	  "416": "Range Not Satisfiable",
	  "417": "Expectation Failed",
	  "418": "I'm a teapot",
	  "421": "Misdirected Request",
	  "422": "Unprocessable Entity",
	  "423": "Locked",
	  "424": "Failed Dependency",
	  "425": "Unordered Collection",
	  "426": "Upgrade Required",
	  "428": "Precondition Required",
	  "429": "Too Many Requests",
	  "431": "Request Header Fields Too Large",
	  "451": "Unavailable For Legal Reasons",
	  "500": "Internal Server Error",
	  "501": "Not Implemented",
	  "502": "Bad Gateway",
	  "503": "Service Unavailable",
	  "504": "Gateway Timeout",
	  "505": "HTTP Version Not Supported",
	  "506": "Variant Also Negotiates",
	  "507": "Insufficient Storage",
	  "508": "Loop Detected",
	  "509": "Bandwidth Limit Exceeded",
	  "510": "Not Extended",
	  "511": "Network Authentication Required"
	}


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var punycode = __webpack_require__(62);
	var util = __webpack_require__(63);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(64);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)(module), (function() { return this; }())))

/***/ }),
/* 63 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(65);
	exports.encode = exports.stringify = __webpack_require__(66);


/***/ }),
/* 65 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ }),
/* 66 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	var http = __webpack_require__(37);

	var https = module.exports;

	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};

	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    params.protocol = 'https:';
	    return http.request.call(this, params, cb);
	}


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(18);
	var WebSocket = __webpack_require__(69);
	var EventEmitter = __webpack_require__(23).EventEmitter;
	var thrift = __webpack_require__(17);
	var ttransport = __webpack_require__(70);
	var tprotocol = __webpack_require__(72);

	var TBufferedTransport = __webpack_require__(25);
	var TJSONProtocol = __webpack_require__(74);
	var InputBufferUnderrunError = __webpack_require__(31);

	var createClient = __webpack_require__(35);

	exports.WSConnection = WSConnection;

	/**
	 * @class
	 * @name WSConnectOptions
	 * @property {string} transport - The Thrift layered transport to use (TBufferedTransport, etc).
	 * @property {string} protocol - The Thrift serialization protocol to use (TJSONProtocol, etc.).
	 * @property {string} path - The URL path to connect to (e.g. "/", "/mySvc", "/thrift/quoteSvc", etc.).
	 * @property {object} headers - A standard Node.js header hash, an object hash containing key/value
	 *        pairs where the key is the header name string and the value is the header value string.
	 * @property {boolean} secure - True causes the connection to use wss, otherwise ws is used.
	 * @property {object} wsOptions - Options passed on to WebSocket.
	 * @example
	 *     //Use a secured websocket connection
	 *     //  uses the buffered transport layer, uses the JSON protocol and directs RPC traffic
	 *     //  to wss://thrift.example.com:9090/hello
	 *     var thrift = require('thrift');
	 *     var options = {
	 *        transport: thrift.TBufferedTransport,
	 *        protocol: thrift.TJSONProtocol,
	 *        path: "/hello",
	 *        secure: true
	 *     };
	 *     var con = thrift.createWSConnection("thrift.example.com", 9090, options);
	 *     con.open()
	 *     var client = thrift.createWSClient(myService, connection);
	 *     client.myServiceFunction();
	 *     con.close()
	 */

	/**
	 * Initializes a Thrift WSConnection instance (use createWSConnection() rather than
	 *    instantiating directly).
	 * @constructor
	 * @param {string} host - The host name or IP to connect to.
	 * @param {number} port - The TCP port to connect to.
	 * @param {WSConnectOptions} options - The configuration options to use.
	 * @throws {error} Exceptions other than ttransport.InputBufferUnderrunError are rethrown
	 * @event {error} The "error" event is fired when a Node.js error event occurs during
	 *     request or response processing, in which case the node error is passed on. An "error"
	 *     event may also be fired when the connectison can not map a response back to the
	 *     appropriate client (an internal error), generating a TApplicationException.
	 * @classdesc WSConnection objects provide Thrift end point transport
	 *     semantics implemented using Websockets.
	 * @see {@link createWSConnection}
	 */
	function WSConnection(host, port, options) {
	  //Initialize the emitter base object
	  EventEmitter.call(this);

	  //Set configuration
	  var self = this;
	  this.options = options || {};
	  this.host = host;
	  this.port = port;
	  this.secure = this.options.secure || false;
	  this.transport = this.options.transport || TBufferedTransport;
	  this.protocol = this.options.protocol || TJSONProtocol;
	  this.path = this.options.path;
	  this.send_pending = [];

	  //The sequence map is used to map seqIDs back to the
	  //  calling client in multiplexed scenarios
	  this.seqId2Service = {};

	  //Prepare WebSocket options
	  this.wsOptions = {
	    host: this.host,
	    port: this.port || 80,
	    path: this.options.path || '/',
	    headers: this.options.headers || {}
	  };
	  for (var attrname in this.options.wsOptions) {
	    this.wsOptions[attrname] = this.options.wsOptions[attrname];
	  }
	};
	util.inherits(WSConnection, EventEmitter);

	WSConnection.prototype.__reset = function() {
	  this.socket = null; //The web socket
	  this.send_pending = []; //Buffers/Callback pairs waiting to be sent
	};

	WSConnection.prototype.__onOpen = function() {
	  var self = this;
	  this.emit("open");
	  if (this.send_pending.length > 0) {
	    //If the user made calls before the connection was fully
	    //open, send them now
	    this.send_pending.forEach(function(data) {
	      self.socket.send(data);
	    });
	    this.send_pending = [];
	  }
	};

	WSConnection.prototype.__onClose = function(evt) {
	  this.emit("close");
	  this.__reset();
	};

	WSConnection.prototype.__decodeCallback = function(transport_with_data) {
	  var proto = new this.protocol(transport_with_data);
	  try {
	    while (true) {
	      var header = proto.readMessageBegin();
	      var dummy_seqid = header.rseqid * -1;
	      var client = this.client;
	      //The Multiplexed Protocol stores a hash of seqid to service names
	      //  in seqId2Service. If the SeqId is found in the hash we need to
	      //  lookup the appropriate client for this call.
	      //  The client var is a single client object when not multiplexing,
	      //  when using multiplexing it is a service name keyed hash of client
	      //  objects.
	      //NOTE: The 2 way interdependencies between protocols, transports,
	      //  connections and clients in the Node.js implementation are irregular
	      //  and make the implementation difficult to extend and maintain. We
	      //  should bring this stuff inline with typical thrift I/O stack
	      //  operation soon.
	      //  --ra
	      var service_name = this.seqId2Service[header.rseqid];
	      if (service_name) {
	        client = this.client[service_name];
	        delete this.seqId2Service[header.rseqid];
	      }
	      /*jshint -W083 */
	      client._reqs[dummy_seqid] = function(err, success) {
	        transport_with_data.commitPosition();
	        var clientCallback = client._reqs[header.rseqid];
	        delete client._reqs[header.rseqid];
	        if (clientCallback) {
	          clientCallback(err, success);
	        }
	      };
	      /*jshint +W083 */
	      if (client['recv_' + header.fname]) {
	        client['recv_' + header.fname](proto, header.mtype, dummy_seqid);
	      } else {
	        delete client._reqs[dummy_seqid];
	        this.emit("error",
	          new thrift.TApplicationException(
	            thrift.TApplicationExceptionType.WRONG_METHOD_NAME,
	            "Received a response to an unknown RPC function"));
	      }
	    }
	  } catch (e) {
	    if (e instanceof InputBufferUnderrunError) {
	      transport_with_data.rollbackPosition();
	    } else {
	      throw e;
	    }
	  }
	};

	WSConnection.prototype.__onData = function(data) {
	  if (Object.prototype.toString.call(data) == "[object ArrayBuffer]") {
	    data = new Uint8Array(data);
	  }
	  var buf = new Buffer(data);
	  this.transport.receiver(this.__decodeCallback.bind(this))(buf);

	};

	WSConnection.prototype.__onMessage = function(evt) {
	  this.__onData(evt.data);
	};

	WSConnection.prototype.__onError = function(evt) {
	  this.emit("error", evt);
	  this.socket.close();
	};

	/**
	 * Returns true if the transport is open
	 * @readonly
	 * @returns {boolean}
	 */
	WSConnection.prototype.isOpen = function() {
	  return this.socket && this.socket.readyState == this.socket.OPEN;
	};

	/**
	 * Opens the transport connection
	 */
	WSConnection.prototype.open = function() {
	  //If OPEN/CONNECTING/CLOSING ignore additional opens
	  if (this.socket && this.socket.readyState != this.socket.CLOSED) {
	    return;
	  }
	  //If there is no socket or the socket is closed:
	  this.socket = new WebSocket(this.uri(), "", this.wsOptions);
	  this.socket.binaryType = 'arraybuffer';
	  this.socket.onopen = this.__onOpen.bind(this);
	  this.socket.onmessage = this.__onMessage.bind(this);
	  this.socket.onerror = this.__onError.bind(this);
	  this.socket.onclose = this.__onClose.bind(this);
	};

	/**
	 * Closes the transport connection
	 */
	WSConnection.prototype.close = function() {
	  this.socket.close();
	};

	/**
	 * Return URI for the connection
	 * @returns {string} URI
	 */
	WSConnection.prototype.uri = function() {
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';
	  var path = this.path || '/';
	  var host = this.host;

	  // avoid port if default for schema
	  if (this.port && (('wss' == schema && this.port != 443) ||
	    ('ws' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }

	  return schema + '://' + host + port + path;
	};

	/**
	 * Writes Thrift message data to the connection
	 * @param {Buffer} data - A Node.js Buffer containing the data to write
	 * @returns {void} No return value.
	 * @event {error} the "error" event is raised upon request failure passing the
	 *     Node.js error object to the listener.
	 */
	WSConnection.prototype.write = function(data) {
	  if (this.isOpen()) {
	    //Send data and register a callback to invoke the client callback
	    this.socket.send(data);
	  } else {
	    //Queue the send to go out __onOpen
	    this.send_pending.push(data);
	  }
	};

	/**
	 * Creates a new WSConnection object, used by Thrift clients to connect
	 *    to Thrift HTTP based servers.
	 * @param {string} host - The host name or IP to connect to.
	 * @param {number} port - The TCP port to connect to.
	 * @param {WSConnectOptions} options - The configuration options to use.
	 * @returns {WSConnection} The connection object.
	 * @see {@link WSConnectOptions}
	 */
	exports.createWSConnection = function(host, port, options) {
	  return new WSConnection(host, port, options);
	};

	exports.createWSClient = createClient;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 69 */
/***/ (function(module, exports) {

	
	/**
	 * Module dependencies.
	 */

	var global = (function() { return this; })();

	/**
	 * WebSocket constructor.
	 */

	var WebSocket = global.WebSocket || global.MozWebSocket;

	/**
	 * Module exports.
	 */

	module.exports = WebSocket ? ws : null;

	/**
	 * WebSocket constructor.
	 *
	 * The third `opts` options object gets ignored in web browsers, since it's
	 * non-standard, and throws a TypeError if passed to the constructor.
	 * See: https://github.com/einaros/ws/issues/227
	 *
	 * @param {String} uri
	 * @param {Array} protocols (optional)
	 * @param {Object) opts (optional)
	 * @api public
	 */

	function ws(uri, protocols, opts) {
	  var instance;
	  if (protocols) {
	    instance = new WebSocket(uri, protocols);
	  } else {
	    instance = new WebSocket(uri);
	  }
	  return instance;
	}

	if (WebSocket) ws.prototype = WebSocket.prototype;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	module.exports.TBufferedTransport = __webpack_require__(25);
	module.exports.TFramedTransport = __webpack_require__(71);
	module.exports.InputBufferUnderrunError = __webpack_require__(31);


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var binary = __webpack_require__(30);
	var InputBufferUnderrunError = __webpack_require__(31);

	module.exports = TFramedTransport;

	function TFramedTransport(buffer, callback) {
	  this.inBuf = buffer || new Buffer(0);
	  this.outBuffers = [];
	  this.outCount = 0;
	  this.readPos = 0;
	  this.onFlush = callback;
	};

	TFramedTransport.receiver = function(callback, seqid) {
	  var residual = null;

	  return function(data) {
	    // Prepend any residual data from our previous read
	    if (residual) {
	      data = Buffer.concat([residual, data]);
	      residual = null;
	    }

	    // framed transport
	    while (data.length) {
	      if (data.length < 4) {
	        // Not enough bytes to continue, save and resume on next packet
	        residual = data;
	        return;
	      }
	      var frameSize = binary.readI32(data, 0);
	      if (data.length < 4 + frameSize) {
	        // Not enough bytes to continue, save and resume on next packet
	        residual = data;
	        return;
	      }

	      var frame = data.slice(4, 4 + frameSize);
	      residual = data.slice(4 + frameSize);

	      callback(new TFramedTransport(frame), seqid);

	      data = residual;
	      residual = null;
	    }
	  };
	};

	TFramedTransport.prototype.commitPosition = function(){},
	TFramedTransport.prototype.rollbackPosition = function(){},

	  // TODO: Implement open/close support
	TFramedTransport.prototype.isOpen = function() {
	  return true;
	};
	TFramedTransport.prototype.open = function() {};
	TFramedTransport.prototype.close =  function() {};

	  // Set the seqid of the message in the client
	  // So that callbacks can be found
	TFramedTransport.prototype.setCurrSeqId = function(seqid) {
	  this._seqid = seqid;
	};

	TFramedTransport.prototype.ensureAvailable = function(len) {
	  if (this.readPos + len > this.inBuf.length) {
	    throw new InputBufferUnderrunError();
	  }
	};

	TFramedTransport.prototype.read = function(len) { // this function will be used for each frames.
	  this.ensureAvailable(len);
	  var end = this.readPos + len;

	  if (this.inBuf.length < end) {
	    throw new Error('read(' + len + ') failed - not enough data');
	  }

	  var buf = this.inBuf.slice(this.readPos, end);
	  this.readPos = end;
	  return buf;
	};

	TFramedTransport.prototype.readByte = function() {
	  this.ensureAvailable(1);
	  return binary.readByte(this.inBuf[this.readPos++]);
	};

	TFramedTransport.prototype.readI16 = function() {
	  this.ensureAvailable(2);
	  var i16 = binary.readI16(this.inBuf, this.readPos);
	  this.readPos += 2;
	  return i16;
	};

	TFramedTransport.prototype.readI32 = function() {
	  this.ensureAvailable(4);
	  var i32 = binary.readI32(this.inBuf, this.readPos);
	  this.readPos += 4;
	  return i32;
	};

	TFramedTransport.prototype.readDouble = function() {
	  this.ensureAvailable(8);
	  var d = binary.readDouble(this.inBuf, this.readPos);
	  this.readPos += 8;
	  return d;
	};

	TFramedTransport.prototype.readString = function(len) {
	  this.ensureAvailable(len);
	  var str = this.inBuf.toString('utf8', this.readPos, this.readPos + len);
	  this.readPos += len;
	  return str;
	};

	TFramedTransport.prototype.borrow = function() {
	  return {
	    buf: this.inBuf,
	    readIndex: this.readPos,
	    writeIndex: this.inBuf.length
	  };
	};

	TFramedTransport.prototype.consume = function(bytesConsumed) {
	  this.readPos += bytesConsumed;
	};

	TFramedTransport.prototype.write = function(buf, encoding) {
	  if (typeof(buf) === "string") {
	    buf = new Buffer(buf, encoding || 'utf8');
	  }
	  this.outBuffers.push(buf);
	  this.outCount += buf.length;
	};

	TFramedTransport.prototype.flush = function() {
	  // If the seqid of the callback is available pass it to the onFlush
	  // Then remove the current seqid
	  var seqid = this._seqid;
	  this._seqid = null;

	  var out = new Buffer(this.outCount),
	      pos = 0;
	  this.outBuffers.forEach(function(buf) {
	    buf.copy(out, pos, 0);
	    pos += buf.length;
	  });

	  if (this.onFlush) {
	    // TODO: optimize this better, allocate one buffer instead of both:
	    var msg = new Buffer(out.length + 4);
	    binary.writeI32(msg, out.length);
	    out.copy(msg, 4, 0, out.length);
	    if (this.onFlush) {
	      // Passing seqid through this call to get it to the connection
	      this.onFlush(msg, seqid);
	    }
	  }

	  this.outBuffers = [];
	  this.outCount = 0;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	module.exports.TBinaryProtocol = __webpack_require__(32);
	module.exports.TCompactProtocol = __webpack_require__(73);
	module.exports.TJSONProtocol = __webpack_require__(74);


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var log = __webpack_require__(33);
	var Int64 = __webpack_require__(34);
	var Thrift = __webpack_require__(17);
	var Type = Thrift.Type;

	module.exports = TCompactProtocol;

	var POW_8 = Math.pow(2, 8);
	var POW_24 = Math.pow(2, 24);
	var POW_32 = Math.pow(2, 32);
	var POW_40 = Math.pow(2, 40);
	var POW_48 = Math.pow(2, 48);
	var POW_52 = Math.pow(2, 52);
	var POW_1022 = Math.pow(2, 1022);

	/**
	 * Constructor Function for the Compact Protocol.
	 * @constructor
	 * @param {object} [trans] - The underlying transport to read/write.
	 * @classdesc The Apache Thrift Protocol layer performs serialization
	 *     of base types, the compact protocol serializes data in binary
	 *     form with minimal space used for scalar values.
	 */
	function TCompactProtocol(trans) {
	  this.trans = trans;
	  this.lastField_ = [];
	  this.lastFieldId_ = 0;
	  this.string_limit_ = 0;
	  this.string_buf_ = null;
	  this.string_buf_size_ = 0;
	  this.container_limit_ = 0;
	  this.booleanField_ = {
	    name: null,
	    hasBoolValue: false
	  };
	  this.boolValue_ = {
	    hasBoolValue: false,
	    boolValue: false
	  };
	};


	//
	// Compact Protocol Constants
	//

	/**
	  * Compact Protocol ID number.
	  * @readonly
	  * @const {number} PROTOCOL_ID
	  */
	TCompactProtocol.PROTOCOL_ID = -126;  //1000 0010

	/**
	  * Compact Protocol version number.
	  * @readonly
	  * @const {number} VERSION_N
	  */
	TCompactProtocol.VERSION_N = 1;

	/**
	  * Compact Protocol version mask for combining protocol version and message type in one byte.
	  * @readonly
	  * @const {number} VERSION_MASK
	  */
	TCompactProtocol.VERSION_MASK = 0x1f; //0001 1111

	/**
	  * Compact Protocol message type mask for combining protocol version and message type in one byte.
	  * @readonly
	  * @const {number} TYPE_MASK
	  */
	TCompactProtocol.TYPE_MASK = -32;     //1110 0000

	/**
	  * Compact Protocol message type bits for ensuring message type bit size.
	  * @readonly
	  * @const {number} TYPE_BITS
	  */
	TCompactProtocol.TYPE_BITS = 7; //0000 0111

	/**
	  * Compact Protocol message type shift amount for combining protocol version and message type in one byte.
	  * @readonly
	  * @const {number} TYPE_SHIFT_AMOUNT
	  */
	TCompactProtocol.TYPE_SHIFT_AMOUNT = 5;

	/**
	 * Compact Protocol type IDs used to keep type data within one nibble.
	 * @readonly
	 * @property {number}  CT_STOP          - End of a set of fields.
	 * @property {number}  CT_BOOLEAN_TRUE  - Flag for Boolean field with true value (packed field and value).
	 * @property {number}  CT_BOOLEAN_FALSE - Flag for Boolean field with false value (packed field and value).
	 * @property {number}  CT_BYTE          - Signed 8 bit integer.
	 * @property {number}  CT_I16           - Signed 16 bit integer.
	 * @property {number}  CT_I32           - Signed 32 bit integer.
	 * @property {number}  CT_I64           - Signed 64 bit integer (2^53 max in JavaScript).
	 * @property {number}  CT_DOUBLE        - 64 bit IEEE 854 floating point.
	 * @property {number}  CT_BINARY        - Array of bytes (used for strings also).
	 * @property {number}  CT_LIST          - A collection type (unordered).
	 * @property {number}  CT_SET           - A collection type (unordered and without repeated values).
	 * @property {number}  CT_MAP           - A collection type (map/associative-array/dictionary).
	 * @property {number}  CT_STRUCT        - A multifield type.
	 */
	TCompactProtocol.Types = {
	  CT_STOP:           0x00,
	  CT_BOOLEAN_TRUE:   0x01,
	  CT_BOOLEAN_FALSE:  0x02,
	  CT_BYTE:           0x03,
	  CT_I16:            0x04,
	  CT_I32:            0x05,
	  CT_I64:            0x06,
	  CT_DOUBLE:         0x07,
	  CT_BINARY:         0x08,
	  CT_LIST:           0x09,
	  CT_SET:            0x0A,
	  CT_MAP:            0x0B,
	  CT_STRUCT:         0x0C
	};

	/**
	 * Array mapping Compact type IDs to standard Thrift type IDs.
	 * @readonly
	 */
	TCompactProtocol.TTypeToCType = [
	  TCompactProtocol.Types.CT_STOP,         // T_STOP
	  0,                                      // unused
	  TCompactProtocol.Types.CT_BOOLEAN_TRUE, // T_BOOL
	  TCompactProtocol.Types.CT_BYTE,         // T_BYTE
	  TCompactProtocol.Types.CT_DOUBLE,       // T_DOUBLE
	  0,                                      // unused
	  TCompactProtocol.Types.CT_I16,          // T_I16
	  0,                                      // unused
	  TCompactProtocol.Types.CT_I32,          // T_I32
	  0,                                      // unused
	  TCompactProtocol.Types.CT_I64,          // T_I64
	  TCompactProtocol.Types.CT_BINARY,       // T_STRING
	  TCompactProtocol.Types.CT_STRUCT,       // T_STRUCT
	  TCompactProtocol.Types.CT_MAP,          // T_MAP
	  TCompactProtocol.Types.CT_SET,          // T_SET
	  TCompactProtocol.Types.CT_LIST,         // T_LIST
	];


	//
	// Compact Protocol Utilities
	//

	/**
	 * Returns the underlying transport layer.
	 * @return {object} The underlying transport layer.
	 */TCompactProtocol.prototype.getTransport = function() {
	  return this.trans;
	};

	/**
	 * Lookup a Compact Protocol Type value for a given Thrift Type value.
	 * N.B. Used only internally.
	 * @param {number} ttype - Thrift type value
	 * @returns {number} Compact protocol type value
	 */
	TCompactProtocol.prototype.getCompactType = function(ttype) {
	  return TCompactProtocol.TTypeToCType[ttype];
	};

	/**
	 * Lookup a Thrift Type value for a given Compact Protocol Type value.
	 * N.B. Used only internally.
	 * @param {number} type - Compact Protocol type value
	 * @returns {number} Thrift Type value
	 */
	TCompactProtocol.prototype.getTType = function(type) {
	  switch (type) {
	    case Type.STOP:
	      return Type.STOP;
	    case TCompactProtocol.Types.CT_BOOLEAN_FALSE:
	    case TCompactProtocol.Types.CT_BOOLEAN_TRUE:
	      return Type.BOOL;
	    case TCompactProtocol.Types.CT_BYTE:
	      return Type.BYTE;
	    case TCompactProtocol.Types.CT_I16:
	      return Type.I16;
	    case TCompactProtocol.Types.CT_I32:
	      return Type.I32;
	    case TCompactProtocol.Types.CT_I64:
	      return Type.I64;
	    case TCompactProtocol.Types.CT_DOUBLE:
	      return Type.DOUBLE;
	    case TCompactProtocol.Types.CT_BINARY:
	      return Type.STRING;
	    case TCompactProtocol.Types.CT_LIST:
	      return Type.LIST;
	    case TCompactProtocol.Types.CT_SET:
	      return Type.SET;
	    case TCompactProtocol.Types.CT_MAP:
	      return Type.MAP;
	    case TCompactProtocol.Types.CT_STRUCT:
	      return Type.STRUCT;
	    default:
	      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, "Unknown type: " + type);
	  }
	  return Type.STOP;
	};


	//
	// Compact Protocol write operations
	//

	/**
	 * Send any buffered bytes to the end point.
	 */
	TCompactProtocol.prototype.flush = function() {
	  return this.trans.flush();
	};

	/**
	 * Writes an RPC message header
	 * @param {string} name - The method name for the message.
	 * @param {number} type - The type of message (CALL, REPLY, EXCEPTION, ONEWAY).
	 * @param {number} seqid - The call sequence number (if any).
	 */
	TCompactProtocol.prototype.writeMessageBegin = function(name, type, seqid) {
	  this.writeByte(TCompactProtocol.PROTOCOL_ID);
	  this.writeByte((TCompactProtocol.VERSION_N & TCompactProtocol.VERSION_MASK) |
	                     ((type << TCompactProtocol.TYPE_SHIFT_AMOUNT) & TCompactProtocol.TYPE_MASK));
	  this.writeVarint32(seqid);
	  this.writeString(name);

	  // Record client seqid to find callback again
	  if (this._seqid) {
	    // TODO better logging log warning
	    log.warning('SeqId already set', { 'name': name });
	  } else {
	    this._seqid = seqid;
	    this.trans.setCurrSeqId(seqid);
	  }
	};

	TCompactProtocol.prototype.writeMessageEnd = function() {
	};

	TCompactProtocol.prototype.writeStructBegin = function(name) {
	  this.lastField_.push(this.lastFieldId_);
	  this.lastFieldId_ = 0;
	};

	TCompactProtocol.prototype.writeStructEnd = function() {
	  this.lastFieldId_ = this.lastField_.pop();
	};

	/**
	 * Writes a struct field header
	 * @param {string} name - The field name (not written with the compact protocol).
	 * @param {number} type - The field data type (a normal Thrift field Type).
	 * @param {number} id - The IDL field Id.
	 */
	TCompactProtocol.prototype.writeFieldBegin = function(name, type, id) {
	  if (type != Type.BOOL) {
	    return this.writeFieldBeginInternal(name, type, id, -1);
	  }

	  this.booleanField_.name = name;
	  this.booleanField_.fieldType = type;
	  this.booleanField_.fieldId = id;
	};

	TCompactProtocol.prototype.writeFieldEnd = function() {
	};

	TCompactProtocol.prototype.writeFieldStop = function() {
	  this.writeByte(TCompactProtocol.Types.CT_STOP);
	};

	/**
	 * Writes a map collection header
	 * @param {number} keyType - The Thrift type of the map keys.
	 * @param {number} valType - The Thrift type of the map values.
	 * @param {number} size - The number of k/v pairs in the map.
	 */
	TCompactProtocol.prototype.writeMapBegin = function(keyType, valType, size) {
	  if (size === 0) {
	    this.writeByte(0);
	  } else {
	    this.writeVarint32(size);
	    this.writeByte(this.getCompactType(keyType) << 4 | this.getCompactType(valType));
	  }
	};

	TCompactProtocol.prototype.writeMapEnd = function() {
	};

	/**
	 * Writes a list collection header
	 * @param {number} elemType - The Thrift type of the list elements.
	 * @param {number} size - The number of elements in the list.
	 */
	TCompactProtocol.prototype.writeListBegin = function(elemType, size) {
	  this.writeCollectionBegin(elemType, size);
	};

	TCompactProtocol.prototype.writeListEnd = function() {
	};

	/**
	 * Writes a set collection header
	 * @param {number} elemType - The Thrift type of the set elements.
	 * @param {number} size - The number of elements in the set.
	 */
	TCompactProtocol.prototype.writeSetBegin = function(elemType, size) {
	  this.writeCollectionBegin(elemType, size);
	};

	TCompactProtocol.prototype.writeSetEnd = function() {
	};

	TCompactProtocol.prototype.writeBool = function(value) {
	  if (this.booleanField_.name !== null) {
	    // we haven't written the field header yet
	    this.writeFieldBeginInternal(this.booleanField_.name,
	                                 this.booleanField_.fieldType,
	                                 this.booleanField_.fieldId,
	                                 (value ? TCompactProtocol.Types.CT_BOOLEAN_TRUE
	                                          : TCompactProtocol.Types.CT_BOOLEAN_FALSE));
	    this.booleanField_.name = null;
	  } else {
	    // we're not part of a field, so just write the value
	    this.writeByte((value ? TCompactProtocol.Types.CT_BOOLEAN_TRUE
	                            : TCompactProtocol.Types.CT_BOOLEAN_FALSE));
	  }
	};

	TCompactProtocol.prototype.writeByte = function(b) {
	  this.trans.write(new Buffer([b]));
	};

	TCompactProtocol.prototype.writeI16 = function(i16) {
	  this.writeVarint32(this.i32ToZigzag(i16));
	};

	TCompactProtocol.prototype.writeI32 = function(i32) {
	  this.writeVarint32(this.i32ToZigzag(i32));
	};

	TCompactProtocol.prototype.writeI64 = function(i64) {
	  this.writeVarint64(this.i64ToZigzag(i64));
	};

	// Little-endian, unlike TBinaryProtocol
	TCompactProtocol.prototype.writeDouble = function(v) {
	  var buff = new Buffer(8);
	  var m, e, c;

	  buff[7] = (v < 0 ? 0x80 : 0x00);

	  v = Math.abs(v);
	  if (v !== v) {
	    // NaN, use QNaN IEEE format
	    m = 2251799813685248;
	    e = 2047;
	  } else if (v === Infinity) {
	    m = 0;
	    e = 2047;
	  } else {
	    e = Math.floor(Math.log(v) / Math.LN2);
	    c = Math.pow(2, -e);
	    if (v * c < 1) {
	      e--;
	      c *= 2;
	    }

	    if (e + 1023 >= 2047)
	    {
	      // Overflow
	      m = 0;
	      e = 2047;
	    }
	    else if (e + 1023 >= 1)
	    {
	      // Normalized - term order matters, as Math.pow(2, 52-e) and v*Math.pow(2, 52) can overflow
	      m = (v*c-1) * POW_52;
	      e += 1023;
	    }
	    else
	    {
	      // Denormalized - also catches the '0' case, somewhat by chance
	      m = (v * POW_1022) * POW_52;
	      e = 0;
	    }
	  }

	  buff[6] = (e << 4) & 0xf0;
	  buff[7] |= (e >> 4) & 0x7f;

	  buff[0] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[1] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[2] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[3] = m & 0xff;
	  m >>= 8;
	  buff[4] = m & 0xff;
	  m >>= 8;
	  buff[5] = m & 0xff;
	  m >>= 8;
	  buff[6] |= m & 0x0f;

	  this.trans.write(buff);
	};

	TCompactProtocol.prototype.writeStringOrBinary = function(name, encoding, arg) {
	  if (typeof arg === 'string') {
	    this.writeVarint32(Buffer.byteLength(arg, encoding)) ;
	    this.trans.write(new Buffer(arg, encoding));
	  } else if (arg instanceof Buffer ||
	             Object.prototype.toString.call(arg) == '[object Uint8Array]') {
	    // Buffers in Node.js under Browserify may extend UInt8Array instead of
	    // defining a new object. We detect them here so we can write them
	    // correctly
	    this.writeVarint32(arg.length);
	    this.trans.write(arg);
	  } else {
	    throw new Error(name + ' called without a string/Buffer argument: ' + arg);
	  }
	};

	TCompactProtocol.prototype.writeString = function(arg) {
	  this.writeStringOrBinary('writeString', 'utf8', arg);
	};

	TCompactProtocol.prototype.writeBinary = function(arg) {
	  this.writeStringOrBinary('writeBinary', 'binary', arg);
	};


	//
	// Compact Protocol internal write methods
	//

	TCompactProtocol.prototype.writeFieldBeginInternal = function(name,
	                                                              fieldType,
	                                                              fieldId,
	                                                              typeOverride) {
	  //If there's a type override, use that.
	  var typeToWrite = (typeOverride == -1 ? this.getCompactType(fieldType) : typeOverride);
	  //Check if we can delta encode the field id
	  if (fieldId > this.lastFieldId_ && fieldId - this.lastFieldId_ <= 15) {
	    //Include the type delta with the field ID
	    this.writeByte((fieldId - this.lastFieldId_) << 4 | typeToWrite);
	  } else {
	    //Write separate type and ID values
	    this.writeByte(typeToWrite);
	    this.writeI16(fieldId);
	  }
	  this.lastFieldId_ = fieldId;
	};

	TCompactProtocol.prototype.writeCollectionBegin = function(elemType, size) {
	  if (size <= 14) {
	    //Combine size and type in one byte if possible
	    this.writeByte(size << 4 | this.getCompactType(elemType));
	  } else {
	    this.writeByte(0xf0 | this.getCompactType(elemType));
	    this.writeVarint32(size);
	  }
	};

	/**
	 * Write an i32 as a varint. Results in 1-5 bytes on the wire.
	 */
	TCompactProtocol.prototype.writeVarint32 = function(n) {
	  var buf = new Buffer(5);
	  var wsize = 0;
	  while (true) {
	    if ((n & ~0x7F) === 0) {
	      buf[wsize++] = n;
	      break;
	    } else {
	      buf[wsize++] = ((n & 0x7F) | 0x80);
	      n = n >>> 7;
	    }
	  }
	  var wbuf = new Buffer(wsize);
	  buf.copy(wbuf,0,0,wsize);
	  this.trans.write(wbuf);
	};

	/**
	 * Write an i64 as a varint. Results in 1-10 bytes on the wire.
	 * N.B. node-int64 is always big endian
	 */
	TCompactProtocol.prototype.writeVarint64 = function(n) {
	  if (typeof n === "number"){
	    n = new Int64(n);
	  }
	  if (! (n instanceof Int64)) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, "Expected Int64 or Number, found: " + n);
	  }

	  var buf = new Buffer(10);
	  var wsize = 0;
	  var hi = n.buffer.readUInt32BE(0, true);
	  var lo = n.buffer.readUInt32BE(4, true);
	  var mask = 0;
	  while (true) {
	    if (((lo & ~0x7F) === 0) && (hi === 0)) {
	      buf[wsize++] = lo;
	      break;
	    } else {
	      buf[wsize++] = ((lo & 0x7F) | 0x80);
	      mask = hi << 25;
	      lo = lo >>> 7;
	      hi = hi >>> 7;
	      lo = lo | mask;
	    }
	  }
	  var wbuf = new Buffer(wsize);
	  buf.copy(wbuf,0,0,wsize);
	  this.trans.write(wbuf);
	};

	/**
	 * Convert l into a zigzag long. This allows negative numbers to be
	 * represented compactly as a varint.
	 */
	TCompactProtocol.prototype.i64ToZigzag = function(l) {
	  if (typeof l === 'string') {
	    l = new Int64(parseInt(l, 10));
	  } else if (typeof l === 'number') {
	    l = new Int64(l);
	  }
	  if (! (l instanceof Int64)) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, "Expected Int64 or Number, found: " + l);
	  }
	  var hi = l.buffer.readUInt32BE(0, true);
	  var lo = l.buffer.readUInt32BE(4, true);
	  var sign = hi >>> 31;
	  hi = ((hi << 1) | (lo >>> 31)) ^ ((!!sign) ? 0xFFFFFFFF : 0);
	  lo = (lo << 1) ^ ((!!sign) ? 0xFFFFFFFF : 0);
	  return new Int64(hi, lo);
	};

	/**
	 * Convert n into a zigzag int. This allows negative numbers to be
	 * represented compactly as a varint.
	 */
	TCompactProtocol.prototype.i32ToZigzag = function(n) {
	  return (n << 1) ^ ((n & 0x80000000) ? 0xFFFFFFFF : 0);
	};


	//
	// Compact Protocol read operations
	//

	TCompactProtocol.prototype.readMessageBegin = function() {
	  //Read protocol ID
	  var protocolId = this.trans.readByte();
	  if (protocolId != TCompactProtocol.PROTOCOL_ID) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, "Bad protocol identifier " + protocolId);
	  }

	  //Read Version and Type
	  var versionAndType = this.trans.readByte();
	  var version = (versionAndType & TCompactProtocol.VERSION_MASK);
	  if (version != TCompactProtocol.VERSION_N) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, "Bad protocol version " + version);
	  }
	  var type = ((versionAndType >> TCompactProtocol.TYPE_SHIFT_AMOUNT) & TCompactProtocol.TYPE_BITS);

	  //Read SeqId
	  var seqid = this.readVarint32();

	  //Read name
	  var name = this.readString();

	  return {fname: name, mtype: type, rseqid: seqid};
	};

	TCompactProtocol.prototype.readMessageEnd = function() {
	};

	TCompactProtocol.prototype.readStructBegin = function() {
	  this.lastField_.push(this.lastFieldId_);
	  this.lastFieldId_ = 0;
	  return {fname: ''};
	};

	TCompactProtocol.prototype.readStructEnd = function() {
	  this.lastFieldId_ = this.lastField_.pop();
	};

	TCompactProtocol.prototype.readFieldBegin = function() {
	  var fieldId = 0;
	  var b = this.trans.readByte(b);
	  var type = (b & 0x0f);

	  if (type == TCompactProtocol.Types.CT_STOP) {
	    return {fname: null, ftype: Thrift.Type.STOP, fid: 0};
	  }

	  //Mask off the 4 MSB of the type header to check for field id delta.
	  var modifier = ((b & 0x000000f0) >>> 4);
	  if (modifier === 0) {
	    //If not a delta read the field id.
	    fieldId = this.readI16();
	  } else {
	    //Recover the field id from the delta
	    fieldId = (this.lastFieldId_ + modifier);
	  }
	  var fieldType = this.getTType(type);

	  //Boolean are encoded with the type
	  if (type == TCompactProtocol.Types.CT_BOOLEAN_TRUE ||
	      type == TCompactProtocol.Types.CT_BOOLEAN_FALSE) {
	    this.boolValue_.hasBoolValue = true;
	    this.boolValue_.boolValue =
	      (type == TCompactProtocol.Types.CT_BOOLEAN_TRUE ? true : false);
	  }

	  //Save the new field for the next delta computation.
	  this.lastFieldId_ = fieldId;
	  return {fname: null, ftype: fieldType, fid: fieldId};
	};

	TCompactProtocol.prototype.readFieldEnd = function() {
	};

	TCompactProtocol.prototype.readMapBegin = function() {
	  var msize = this.readVarint32();
	  if (msize < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative map size");
	  }

	  var kvType = 0;
	  if (msize !== 0) {
	    kvType = this.trans.readByte();
	  }

	  var keyType = this.getTType((kvType & 0xf0) >>> 4);
	  var valType = this.getTType(kvType & 0xf);
	  return {ktype: keyType, vtype: valType, size: msize};
	};

	TCompactProtocol.prototype.readMapEnd = function() {
	};

	TCompactProtocol.prototype.readListBegin = function() {
	  var size_and_type = this.trans.readByte();

	  var lsize = (size_and_type >>> 4) & 0x0000000f;
	  if (lsize == 15) {
	    lsize = this.readVarint32();
	  }

	  if (lsize < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative list size");
	  }

	  var elemType = this.getTType(size_and_type & 0x0000000f);

	  return {etype: elemType, size: lsize};
	};

	TCompactProtocol.prototype.readListEnd = function() {
	};

	TCompactProtocol.prototype.readSetBegin = function() {
	  return this.readListBegin();
	};

	TCompactProtocol.prototype.readSetEnd = function() {
	};

	TCompactProtocol.prototype.readBool = function() {
	  var value = false;
	  var rsize = 0;
	  if (this.boolValue_.hasBoolValue === true) {
	    value = this.boolValue_.boolValue;
	    this.boolValue_.hasBoolValue = false;
	  } else {
	    var res = this.trans.readByte();
	    rsize = res.rsize;
	    value = (res.value == TCompactProtocol.Types.CT_BOOLEAN_TRUE);
	  }
	  return value;
	};

	TCompactProtocol.prototype.readByte = function() {
	  return this.trans.readByte();
	};

	TCompactProtocol.prototype.readI16 = function() {
	  return this.readI32();
	};

	TCompactProtocol.prototype.readI32 = function() {
	  return this.zigzagToI32(this.readVarint32());
	};

	TCompactProtocol.prototype.readI64 = function() {
	  return this.zigzagToI64(this.readVarint64());
	};

	// Little-endian, unlike TBinaryProtocol
	TCompactProtocol.prototype.readDouble = function() {
	  var buff = this.trans.read(8);
	  var off = 0;

	  var signed = buff[off + 7] & 0x80;
	  var e = (buff[off+6] & 0xF0) >> 4;
	  e += (buff[off+7] & 0x7F) << 4;

	  var m = buff[off];
	  m += buff[off+1] << 8;
	  m += buff[off+2] << 16;
	  m += buff[off+3] * POW_24;
	  m += buff[off+4] * POW_32;
	  m += buff[off+5] * POW_40;
	  m += (buff[off+6] & 0x0F) * POW_48;

	  switch (e) {
	    case 0:
	      e = -1022;
	      break;
	    case 2047:
	      return m ? NaN : (signed ? -Infinity : Infinity);
	    default:
	      m += POW_52;
	      e -= 1023;
	  }

	  if (signed) {
	    m *= -1;
	  }

	  return m * Math.pow(2, e - 52);
	};

	TCompactProtocol.prototype.readBinary = function() {
	  var size = this.readVarint32();
	  if (size === 0) {
	    return new Buffer(0);
	  }

	  if (size < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative binary size");
	  }
	  return this.trans.read(size);
	};

	TCompactProtocol.prototype.readString = function() {
	  var size = this.readVarint32();
	  // Catch empty string case
	  if (size === 0) {
	    return "";
	  }

	  // Catch error cases
	  if (size < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative string size");
	  }
	  return this.trans.readString(size);
	};


	//
	// Compact Protocol internal read operations
	//

	/**
	 * Read an i32 from the wire as a varint. The MSB of each byte is set
	 * if there is another byte to follow. This can read up to 5 bytes.
	 */
	TCompactProtocol.prototype.readVarint32 = function() {
	  return this.readVarint64().toNumber();
	};

	/**
	 * Read an i64 from the wire as a proper varint. The MSB of each byte is set
	 * if there is another byte to follow. This can read up to 10 bytes.
	 */
	TCompactProtocol.prototype.readVarint64 = function() {
	  var rsize = 0;
	  var lo = 0;
	  var hi = 0;
	  var shift = 0;
	  while (true) {
	    var b = this.trans.readByte();
	    rsize ++;
	    if (shift <= 25) {
	      lo = lo | ((b & 0x7f) << shift);
	    } else if (25 < shift && shift < 32) {
	      lo = lo | ((b & 0x7f) << shift);
	      hi = hi | ((b & 0x7f) >>> (32-shift));
	    } else {
	      hi = hi | ((b & 0x7f) << (shift-32));
	    }
	    shift += 7;
	    if (!(b & 0x80)) {
	      break;
	    }
	    if (rsize >= 10) {
	      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, "Variable-length int over 10 bytes.");
	    }
	  }
	  return new Int64(hi, lo);
	};

	/**
	 * Convert from zigzag int to int.
	 */
	TCompactProtocol.prototype.zigzagToI32 = function(n) {
	  return (n >>> 1) ^ (-1 * (n & 1));
	};

	/**
	 * Convert from zigzag long to long.
	 */
	TCompactProtocol.prototype.zigzagToI64 = function(n) {
	  var hi = n.buffer.readUInt32BE(0, true);
	  var lo = n.buffer.readUInt32BE(4, true);

	  var neg = new Int64(hi & 0, lo & 1);
	  neg._2scomp();
	  var hi_neg = neg.buffer.readUInt32BE(0, true);
	  var lo_neg = neg.buffer.readUInt32BE(4, true);

	  var hi_lo = (hi << 31);
	  hi = (hi >>> 1) ^ (hi_neg);
	  lo = ((lo >>> 1) | hi_lo) ^ (lo_neg);
	  return new Int64(hi, lo);
	};

	TCompactProtocol.prototype.skip = function(type) {
	  switch (type) {
	    case Type.STOP:
	      return;
	    case Type.BOOL:
	      this.readBool();
	      break;
	    case Type.BYTE:
	      this.readByte();
	      break;
	    case Type.I16:
	      this.readI16();
	      break;
	    case Type.I32:
	      this.readI32();
	      break;
	    case Type.I64:
	      this.readI64();
	      break;
	    case Type.DOUBLE:
	      this.readDouble();
	      break;
	    case Type.STRING:
	      this.readString();
	      break;
	    case Type.STRUCT:
	      this.readStructBegin();
	      while (true) {
	        var r = this.readFieldBegin();
	        if (r.ftype === Type.STOP) {
	          break;
	        }
	        this.skip(r.ftype);
	        this.readFieldEnd();
	      }
	      this.readStructEnd();
	      break;
	    case Type.MAP:
	      var mapBegin = this.readMapBegin();
	      for (var i = 0; i < mapBegin.size; ++i) {
	        this.skip(mapBegin.ktype);
	        this.skip(mapBegin.vtype);
	      }
	      this.readMapEnd();
	      break;
	    case Type.SET:
	      var setBegin = this.readSetBegin();
	      for (var i2 = 0; i2 < setBegin.size; ++i2) {
	        this.skip(setBegin.etype);
	      }
	      this.readSetEnd();
	      break;
	    case Type.LIST:
	      var listBegin = this.readListBegin();
	      for (var i3 = 0; i3 < listBegin.size; ++i3) {
	        this.skip(listBegin.etype);
	      }
	      this.readListEnd();
	      break;
	    default:
	      throw new  Error("Invalid type: " + type);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var log = __webpack_require__(33);
	var Int64 = __webpack_require__(34);
	var InputBufferUnderrunError = __webpack_require__(70).InputBufferUnderrunError;
	var Thrift = __webpack_require__(17);
	var Type = Thrift.Type;
	var util = __webpack_require__(18);

	var Int64Util = __webpack_require__(75);
	var json_parse = __webpack_require__(76);

	var InputBufferUnderrunError = __webpack_require__(31);

	module.exports = TJSONProtocol;

	/**
	 * Initializes a Thrift JSON protocol instance.
	 * @constructor
	 * @param {Thrift.Transport} trans - The transport to serialize to/from.
	 * @classdesc Apache Thrift Protocols perform serialization which enables cross
	 * language RPC. The Protocol type is the JavaScript browser implementation
	 * of the Apache Thrift TJSONProtocol.
	 * @example
	 *     var protocol  = new Thrift.Protocol(transport);
	 */
	function TJSONProtocol(trans) {
	  this.tstack = [];
	  this.tpos = [];
	  this.trans = trans;
	};

	/**
	 * Thrift IDL type Id to string mapping.
	 * @readonly
	 * @see {@link Thrift.Type}
	 */
	TJSONProtocol.Type = {};
	TJSONProtocol.Type[Type.BOOL] = '"tf"';
	TJSONProtocol.Type[Type.BYTE] = '"i8"';
	TJSONProtocol.Type[Type.I16] = '"i16"';
	TJSONProtocol.Type[Type.I32] = '"i32"';
	TJSONProtocol.Type[Type.I64] = '"i64"';
	TJSONProtocol.Type[Type.DOUBLE] = '"dbl"';
	TJSONProtocol.Type[Type.STRUCT] = '"rec"';
	TJSONProtocol.Type[Type.STRING] = '"str"';
	TJSONProtocol.Type[Type.MAP] = '"map"';
	TJSONProtocol.Type[Type.LIST] = '"lst"';
	TJSONProtocol.Type[Type.SET] = '"set"';

	/**
	 * Thrift IDL type string to Id mapping.
	 * @readonly
	 * @see {@link Thrift.Type}
	 */
	TJSONProtocol.RType = {};
	TJSONProtocol.RType.tf = Type.BOOL;
	TJSONProtocol.RType.i8 = Type.BYTE;
	TJSONProtocol.RType.i16 = Type.I16;
	TJSONProtocol.RType.i32 = Type.I32;
	TJSONProtocol.RType.i64 = Type.I64;
	TJSONProtocol.RType.dbl = Type.DOUBLE;
	TJSONProtocol.RType.rec = Type.STRUCT;
	TJSONProtocol.RType.str = Type.STRING;
	TJSONProtocol.RType.map = Type.MAP;
	TJSONProtocol.RType.lst = Type.LIST;
	TJSONProtocol.RType.set = Type.SET;

	/**
	 * The TJSONProtocol version number.
	 * @readonly
	 * @const {number} Version
	 * @memberof Thrift.Protocol
	 */
	TJSONProtocol.Version = 1;

	TJSONProtocol.prototype.flush = function() {
	  this.writeToTransportIfStackIsFlushable();
	  return this.trans.flush();
	};

	TJSONProtocol.prototype.writeToTransportIfStackIsFlushable = function() {
	  if (this.tstack.length === 1) {
	    this.trans.write(this.tstack.pop());
	  }
	};

	/**
	 * Serializes the beginning of a Thrift RPC message.
	 * @param {string} name - The service method to call.
	 * @param {Thrift.MessageType} messageType - The type of method call.
	 * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).
	 */
	TJSONProtocol.prototype.writeMessageBegin = function(name, messageType, seqid) {
	  this.tstack.push([TJSONProtocol.Version, '"' + name + '"', messageType, seqid]);
	};

	/**
	 * Serializes the end of a Thrift RPC message.
	 */
	TJSONProtocol.prototype.writeMessageEnd = function() {
	  var obj = this.tstack.pop();

	  this.wobj = this.tstack.pop();
	  this.wobj.push(obj);

	  this.wbuf = '[' + this.wobj.join(',') + ']';

	  // we assume there is nothing more to come so we write
	  this.trans.write(this.wbuf);
	};

	/**
	 * Serializes the beginning of a struct.
	 * @param {string} name - The name of the struct.
	 */
	TJSONProtocol.prototype.writeStructBegin = function(name) {
	  this.tpos.push(this.tstack.length);
	  this.tstack.push({});
	};

	/**
	 * Serializes the end of a struct.
	 */
	TJSONProtocol.prototype.writeStructEnd = function() {
	  var p = this.tpos.pop();
	  var struct = this.tstack[p];
	  var str = '{';
	  var first = true;
	  for (var key in struct) {
	    if (first) {
	      first = false;
	    } else {
	      str += ',';
	    }

	    str += key + ':' + struct[key];
	  }

	  str += '}';
	  this.tstack[p] = str;

	  this.writeToTransportIfStackIsFlushable();
	};

	/**
	 * Serializes the beginning of a struct field.
	 * @param {string} name - The name of the field.
	 * @param {Thrift.Protocol.Type} fieldType - The data type of the field.
	 * @param {number} fieldId - The field's unique identifier.
	 */
	TJSONProtocol.prototype.writeFieldBegin = function(name, fieldType, fieldId) {
	  this.tpos.push(this.tstack.length);
	  this.tstack.push({ 'fieldId': '"' +
	    fieldId + '"', 'fieldType': TJSONProtocol.Type[fieldType]
	  });
	};

	/**
	 * Serializes the end of a field.
	 */
	TJSONProtocol.prototype.writeFieldEnd = function() {
	  var value = this.tstack.pop();
	  var fieldInfo = this.tstack.pop();

	  if (':' + value === ":[object Object]") {
	    this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +
	      fieldInfo.fieldType + ':' + JSON.stringify(value) + '}';
	  } else {
	    this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +
	      fieldInfo.fieldType + ':' + value + '}';
	  }
	  this.tpos.pop();

	  this.writeToTransportIfStackIsFlushable();
	};

	/**
	 * Serializes the end of the set of fields for a struct.
	 */
	TJSONProtocol.prototype.writeFieldStop = function() {
	};

	/**
	 * Serializes the beginning of a map collection.
	 * @param {Thrift.Type} keyType - The data type of the key.
	 * @param {Thrift.Type} valType - The data type of the value.
	 * @param {number} [size] - The number of elements in the map (ignored).
	 */
	TJSONProtocol.prototype.writeMapBegin = function(keyType, valType, size) {
	  //size is invalid, we'll set it on end.
	  this.tpos.push(this.tstack.length);
	  this.tstack.push([TJSONProtocol.Type[keyType], TJSONProtocol.Type[valType], 0]);
	};

	/**
	 * Serializes the end of a map.
	 */
	TJSONProtocol.prototype.writeMapEnd = function() {
	  var p = this.tpos.pop();

	  if (p == this.tstack.length) {
	    return;
	  }

	  if ((this.tstack.length - p - 1) % 2 !== 0) {
	    this.tstack.push('');
	  }

	  var size = (this.tstack.length - p - 1) / 2;

	  this.tstack[p][this.tstack[p].length - 1] = size;

	  var map = '}';
	  var first = true;
	  while (this.tstack.length > p + 1) {
	    var v = this.tstack.pop();
	    var k = this.tstack.pop();
	    if (first) {
	      first = false;
	    } else {
	      map = ',' + map;
	    }

	    if (! isNaN(k)) { k = '"' + k + '"'; } //json "keys" need to be strings
	    map = k + ':' + v + map;
	  }
	  map = '{' + map;

	  this.tstack[p].push(map);
	  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';

	  this.writeToTransportIfStackIsFlushable();
	};

	/**
	 * Serializes the beginning of a list collection.
	 * @param {Thrift.Type} elemType - The data type of the elements.
	 * @param {number} size - The number of elements in the list.
	 */
	TJSONProtocol.prototype.writeListBegin = function(elemType, size) {
	  this.tpos.push(this.tstack.length);
	  this.tstack.push([TJSONProtocol.Type[elemType], size]);
	};

	/**
	 * Serializes the end of a list.
	 */
	TJSONProtocol.prototype.writeListEnd = function() {
	  var p = this.tpos.pop();

	  while (this.tstack.length > p + 1) {
	    var tmpVal = this.tstack[p + 1];
	    this.tstack.splice(p + 1, 1);
	    this.tstack[p].push(tmpVal);
	  }

	  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';

	  this.writeToTransportIfStackIsFlushable();
	};

	/**
	 * Serializes the beginning of a set collection.
	 * @param {Thrift.Type} elemType - The data type of the elements.
	 * @param {number} size - The number of elements in the list.
	 */
	TJSONProtocol.prototype.writeSetBegin = function(elemType, size) {
	    this.tpos.push(this.tstack.length);
	    this.tstack.push([TJSONProtocol.Type[elemType], size]);
	};

	/**
	 * Serializes the end of a set.
	 */
	TJSONProtocol.prototype.writeSetEnd = function() {
	  var p = this.tpos.pop();

	  while (this.tstack.length > p + 1) {
	    var tmpVal = this.tstack[p + 1];
	    this.tstack.splice(p + 1, 1);
	    this.tstack[p].push(tmpVal);
	  }

	  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';

	  this.writeToTransportIfStackIsFlushable();
	};

	/** Serializes a boolean */
	TJSONProtocol.prototype.writeBool = function(bool) {
	  this.tstack.push(bool ? 1 : 0);
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeByte = function(byte) {
	  this.tstack.push(byte);
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeI16 = function(i16) {
	  this.tstack.push(i16);
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeI32 = function(i32) {
	  this.tstack.push(i32);
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeI64 = function(i64) {
	  if (i64 instanceof Int64) {
	    this.tstack.push(Int64Util.toDecimalString(i64));
	  } else {
	    this.tstack.push(i64);
	  }
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeDouble = function(dub) {
	  this.tstack.push(dub);
	};

	/** Serializes a string */
	TJSONProtocol.prototype.writeString = function(arg) {
	  // We do not encode uri components for wire transfer:
	  if (arg === null) {
	      this.tstack.push(null);
	  } else {
	      if (typeof arg === 'string') {
	        var str = arg;
	      } else if (arg instanceof Buffer) {
	        var str = arg.toString('utf8');
	      } else {
	        throw new Error('writeString called without a string/Buffer argument: ' + arg);
	      }

	      // concat may be slower than building a byte buffer
	      var escapedString = '';
	      for (var i = 0; i < str.length; i++) {
	          var ch = str.charAt(i);      // a single double quote: "
	          if (ch === '\"') {
	              escapedString += '\\\"'; // write out as: \"
	          } else if (ch === '\\') {    // a single backslash: \
	              escapedString += '\\\\'; // write out as: \\
	          /* Currently escaped forward slashes break TJSONProtocol.
	           * As it stands, we can simply pass forward slashes into
	           * our strings across the wire without being escaped.
	           * I think this is the protocol's bug, not thrift.js
	           * } else if(ch === '/') {   // a single forward slash: /
	           *  escapedString += '\\/';  // write out as \/
	           * }
	           */
	          } else if (ch === '\b') {    // a single backspace: invisible
	              escapedString += '\\b';  // write out as: \b"
	          } else if (ch === '\f') {    // a single formfeed: invisible
	              escapedString += '\\f';  // write out as: \f"
	          } else if (ch === '\n') {    // a single newline: invisible
	              escapedString += '\\n';  // write out as: \n"
	          } else if (ch === '\r') {    // a single return: invisible
	              escapedString += '\\r';  // write out as: \r"
	          } else if (ch === '\t') {    // a single tab: invisible
	              escapedString += '\\t';  // write out as: \t"
	          } else {
	              escapedString += ch;     // Else it need not be escaped
	          }
	      }
	      this.tstack.push('"' + escapedString + '"');
	  }
	};

	/** Serializes a string */
	TJSONProtocol.prototype.writeBinary = function(arg) {
	  if (typeof arg === 'string') {
	    var buf = new Buffer(arg, 'binary');
	  } else if (arg instanceof Buffer ||
	             Object.prototype.toString.call(arg) == '[object Uint8Array]')  {
	    var buf = arg;
	  } else {
	    throw new Error('writeBinary called without a string/Buffer argument: ' + arg);
	  }
	  this.tstack.push('"' + buf.toString('base64') + '"');
	};

	/**
	 * @class
	 * @name AnonReadMessageBeginReturn
	 * @property {string} fname - The name of the service method.
	 * @property {Thrift.MessageType} mtype - The type of message call.
	 * @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).
	 */
	/**
	 * Deserializes the beginning of a message.
	 * @returns {AnonReadMessageBeginReturn}
	 */
	TJSONProtocol.prototype.readMessageBegin = function() {
	  this.rstack = [];
	  this.rpos = [];

	  //Borrow the inbound transport buffer and ensure data is present/consistent
	  var transBuf = this.trans.borrow();
	  if (transBuf.readIndex >= transBuf.writeIndex) {
	    throw new InputBufferUnderrunError();
	  }
	  var cursor = transBuf.readIndex;

	  if (transBuf.buf[cursor] !== 0x5B) { //[
	    throw new Error("Malformed JSON input, no opening bracket");
	  }

	  //Parse a single message (there may be several in the buffer)
	  //  TODO: Handle characters using multiple code units
	  cursor++;
	  var openBracketCount = 1;
	  var inString = false;
	  for (; cursor < transBuf.writeIndex; cursor++) {
	    var chr = transBuf.buf[cursor];
	    //we use hexa charcode here because data[i] returns an int and not a char
	    if (inString) {
	      if (chr === 0x22) { //"
	        inString = false;
	      } else if (chr === 0x5C) { //\
	        //escaped character, skip
	        cursor += 1;
	      }
	    } else {
	      if (chr === 0x5B) { //[
	        openBracketCount += 1;
	      } else if (chr === 0x5D) { //]
	        openBracketCount -= 1;
	        if (openBracketCount === 0) {
	          //end of json message detected
	          break;
	        }
	      } else if (chr === 0x22) { //"
	        inString = true;
	      }
	    }
	  }

	  if (openBracketCount !== 0) {
	    // Missing closing bracket. Can be buffer underrun.
	    throw new InputBufferUnderrunError();
	  }

	  //Reconstitute the JSON object and conume the necessary bytes
	  this.robj = json_parse(transBuf.buf.slice(transBuf.readIndex, cursor+1).toString());
	  this.trans.consume(cursor + 1 - transBuf.readIndex);

	  //Verify the protocol version
	  var version = this.robj.shift();
	  if (version != TJSONProtocol.Version) {
	    throw new Error('Wrong thrift protocol version: ' + version);
	  }

	  //Objectify the thrift message {name/type/sequence-number} for return
	  // and then save the JSON object in rstack
	  var r = {};
	  r.fname = this.robj.shift();
	  r.mtype = this.robj.shift();
	  r.rseqid = this.robj.shift();
	  this.rstack.push(this.robj.shift());
	  return r;
	};

	/** Deserializes the end of a message. */
	TJSONProtocol.prototype.readMessageEnd = function() {
	};

	/**
	 * Deserializes the beginning of a struct.
	 * @param {string} [name] - The name of the struct (ignored)
	 * @returns {object} - An object with an empty string fname property
	 */
	TJSONProtocol.prototype.readStructBegin = function() {
	  var r = {};
	  r.fname = '';

	  //incase this is an array of structs
	  if (this.rstack[this.rstack.length - 1] instanceof Array) {
	    this.rstack.push(this.rstack[this.rstack.length - 1].shift());
	  }

	  return r;
	};

	/** Deserializes the end of a struct. */
	TJSONProtocol.prototype.readStructEnd = function() {
	  this.rstack.pop();
	};

	/**
	 * @class
	 * @name AnonReadFieldBeginReturn
	 * @property {string} fname - The name of the field (always '').
	 * @property {Thrift.Type} ftype - The data type of the field.
	 * @property {number} fid - The unique identifier of the field.
	 */
	/**
	 * Deserializes the beginning of a field.
	 * @returns {AnonReadFieldBeginReturn}
	 */
	TJSONProtocol.prototype.readFieldBegin = function() {
	  var r = {};

	  var fid = -1;
	  var ftype = Type.STOP;

	  //get a fieldId
	  for (var f in (this.rstack[this.rstack.length - 1])) {
	    if (f === null) {
	      continue;
	    }

	    fid = parseInt(f, 10);
	    this.rpos.push(this.rstack.length);

	    var field = this.rstack[this.rstack.length - 1][fid];

	    //remove so we don't see it again
	    delete this.rstack[this.rstack.length - 1][fid];

	    this.rstack.push(field);

	    break;
	  }

	  if (fid != -1) {
	    //should only be 1 of these but this is the only
	    //way to match a key
	    for (var i in (this.rstack[this.rstack.length - 1])) {
	      if (TJSONProtocol.RType[i] === null) {
	        continue;
	      }

	      ftype = TJSONProtocol.RType[i];
	      this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][i];
	    }
	  }

	  r.fname = '';
	  r.ftype = ftype;
	  r.fid = fid;

	  return r;
	};

	/** Deserializes the end of a field. */
	TJSONProtocol.prototype.readFieldEnd = function() {
	  var pos = this.rpos.pop();

	  //get back to the right place in the stack
	  while (this.rstack.length > pos) {
	    this.rstack.pop();
	  }
	};

	/**
	 * @class
	 * @name AnonReadMapBeginReturn
	 * @property {Thrift.Type} ktype - The data type of the key.
	 * @property {Thrift.Type} vtype - The data type of the value.
	 * @property {number} size - The number of elements in the map.
	 */
	/**
	 * Deserializes the beginning of a map.
	 * @returns {AnonReadMapBeginReturn}
	 */
	TJSONProtocol.prototype.readMapBegin = function() {
	  var map = this.rstack.pop();
	  var first = map.shift();
	  if (first instanceof Array) {
	    this.rstack.push(map);
	    map = first;
	    first = map.shift();
	  }

	  var r = {};
	  r.ktype = TJSONProtocol.RType[first];
	  r.vtype = TJSONProtocol.RType[map.shift()];
	  r.size = map.shift();


	  this.rpos.push(this.rstack.length);
	  this.rstack.push(map.shift());

	  return r;
	};

	/** Deserializes the end of a map. */
	TJSONProtocol.prototype.readMapEnd = function() {
	  this.readFieldEnd();
	};

	/**
	 * @class
	 * @name AnonReadColBeginReturn
	 * @property {Thrift.Type} etype - The data type of the element.
	 * @property {number} size - The number of elements in the collection.
	 */
	/**
	 * Deserializes the beginning of a list.
	 * @returns {AnonReadColBeginReturn}
	 */
	TJSONProtocol.prototype.readListBegin = function() {
	  var list = this.rstack[this.rstack.length - 1];

	  var r = {};
	  r.etype = TJSONProtocol.RType[list.shift()];
	  r.size = list.shift();

	  this.rpos.push(this.rstack.length);
	  this.rstack.push(list.shift());

	  return r;
	};

	/** Deserializes the end of a list. */
	TJSONProtocol.prototype.readListEnd = function() {
	  var pos = this.rpos.pop() - 2;
	  var st = this.rstack;
	  st.pop();
	  if (st instanceof Array && st.length > pos && st[pos].length > 0) {
	    st.push(st[pos].shift());
	  }
	};

	/**
	 * Deserializes the beginning of a set.
	 * @returns {AnonReadColBeginReturn}
	 */
	TJSONProtocol.prototype.readSetBegin = function() {
	  return this.readListBegin();
	};

	/** Deserializes the end of a set. */
	TJSONProtocol.prototype.readSetEnd = function() {
	  return this.readListEnd();
	};

	TJSONProtocol.prototype.readBool = function() {
	  return this.readValue() == '1';
	};

	TJSONProtocol.prototype.readByte = function() {
	  return this.readI32();
	};

	TJSONProtocol.prototype.readI16 = function() {
	  return this.readI32();
	};

	TJSONProtocol.prototype.readI32 = function(f) {
	  return +this.readValue();
	}

	/** Returns the next value found in the protocol buffer */
	TJSONProtocol.prototype.readValue = function(f) {
	  if (f === undefined) {
	    f = this.rstack[this.rstack.length - 1];
	  }

	  var r = {};

	  if (f instanceof Array) {
	    if (f.length === 0) {
	      r.value = undefined;
	    } else {
	      r.value = f.shift();
	    }
	  } else if (!(f instanceof Int64) && f instanceof Object) {
	    for (var i in f) {
	      if (i === null) {
	        continue;
	      }
	      this.rstack.push(f[i]);
	      delete f[i];

	      r.value = i;
	      break;
	    }
	  } else {
	    r.value = f;
	    this.rstack.pop();
	  }

	  return r.value;
	};

	TJSONProtocol.prototype.readI64 = function() {
	  var n = this.readValue()
	  if (typeof n === 'string') {
	    // Assuming no one is sending in 1.11111e+33 format
	    return Int64Util.fromDecimalString(n);
	  } else {
	    return new Int64(n);
	  }
	};

	TJSONProtocol.prototype.readDouble = function() {
	  return this.readI32();
	};

	TJSONProtocol.prototype.readBinary = function() {
	  return new Buffer(this.readValue(), 'base64');
	};

	TJSONProtocol.prototype.readString = function() {
	  return this.readValue();
	};

	/**
	 * Returns the underlying transport.
	 * @readonly
	 * @returns {Thrift.Transport} The underlying transport.
	 */
	TJSONProtocol.prototype.getTransport = function() {
	  return this.trans;
	};

	/**
	 * Method to arbitrarily skip over data
	 */
	TJSONProtocol.prototype.skip = function(type) {
	  throw new Error('skip not supported yet');
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var Int64 = __webpack_require__(34);

	var Int64Util = module.exports = {};

	var POW2_24 = Math.pow(2, 24);
	var POW2_31 = Math.pow(2, 31);
	var POW2_32 = Math.pow(2, 32);
	var POW10_11 = Math.pow(10, 11);

	Int64Util.toDecimalString = function(i64) {
	  var b = i64.buffer;
	  var o = i64.offset;
	  if ((!b[o] && !(b[o + 1] & 0xe0)) ||
	      (!~b[o] && !~(b[o + 1] & 0xe0))) {
	    // The magnitude is small enough.
	    return i64.toString();
	  } else {
	    var negative = b[o] & 0x80;
	    if (negative) {
	      // 2's complement
	      var incremented = false;
	      var buffer = new Buffer(8);
	      for (var i = 7; i >= 0; --i) {
	        buffer[i] = (~b[o + i] + (incremented ? 0 : 1)) & 0xff;
	        incremented |= b[o + i];
	      }
	      b = buffer;
	    }
	    var high2 = b[o + 1] + (b[o] << 8);
	    // Lesser 11 digits with exceeding values but is under 53 bits capacity.
	    var low = b[o + 7] + (b[o + 6] << 8) + (b[o + 5] << 16)
	        + b[o + 4] * POW2_24  // Bit shift renders 32th bit as sign, so use multiplication
	        + (b[o + 3] + (b[o + 2] << 8)) * POW2_32 + high2 * 74976710656;  // The literal is 2^48 % 10^11
	    // 12th digit and greater.
	    var high = Math.floor(low / POW10_11) + high2 * 2814;  // The literal is 2^48 / 10^11
	    // Make it exactly 11 with leading zeros.
	    low = ('00000000000' + String(low % POW10_11)).slice(-11);
	    return (negative ? '-' : '') + String(high) + low;
	  }
	};

	Int64Util.fromDecimalString = function(text) {
	  var negative = text.charAt(0) === '-';
	  if (text.length < (negative ? 17 : 16)) {
	    // The magnitude is smaller than 2^53.
	    return new Int64(+text);
	  } else if (text.length > (negative ? 20 : 19)) {
	    throw new RangeError('Too many digits for Int64: ' + text);
	  } else {
	    // Most significant (up to 5) digits
	    var high5 = +text.slice(negative ? 1 : 0, -15);
	    var low = +text.slice(-15) + high5 * 2764472320;  // The literal is 10^15 % 2^32
	    var high = Math.floor(low / POW2_32) + high5 * 232830;  // The literal is 10^15 / 2^&32
	    low = low % POW2_32;
	    if (high >= POW2_31 &&
	        !(negative && high == POW2_31 && low == 0)  // Allow minimum Int64
	       ) {
	      throw new RangeError('The magnitude is too large for Int64.');
	    }
	    if (negative) {
	      // 2's complement
	      high = ~high;
	      if (low === 0) {
	        high = (high + 1) & 0xffffffff;
	      } else {
	        low = ~low + 1;
	      }
	      high = 0x80000000 | high;
	    }
	    return new Int64(high, low);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Imported from Douglas Crockford's reference implementation with minimum modification
	 * to handle Int64.
	 *
	 * https://github.com/douglascrockford/JSON-js/blob/c98948ae1944a28e2e8ebc3717894e580aeaaa05/json_parse.js
	 *
	 * Original license header:
	 *
	 * json_parse.js
	 * 2015-05-02
	 * Public Domain.
	 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
	 */


	/*jslint for */

	/*property
	    at, b, call, charAt, f, fromCharCode, hasOwnProperty, message, n, name,
	    prototype, push, r, t, text
	*/

	var Int64 = __webpack_require__(34);
	var Int64Util = __webpack_require__(75);

	var json_parse = module.exports = (function () {
	    "use strict";

	// This is a function that can parse a JSON text, producing a JavaScript
	// data structure. It is a simple, recursive descent parser. It does not use
	// eval or regular expressions, so it can be used as a model for implementing
	// a JSON parser in other languages.

	// We are defining the function inside of another function to avoid creating
	// global variables.

	    var at,     // The index of the current character
	        ch,     // The current character
	        escapee = {
	            '"': '"',
	            '\\': '\\',
	            '/': '/',
	            b: '\b',
	            f: '\f',
	            n: '\n',
	            r: '\r',
	            t: '\t'
	        },
	        text,

	        error = function (m) {

	// Call error when something is wrong.

	            throw new SyntaxError(m);
	        },

	        next = function (c) {

	// If a c parameter is provided, verify that it matches the current character.

	            if (c && c !== ch) {
	                error("Expected '" + c + "' instead of '" + ch + "'");
	            }

	// Get the next character. When there are no more characters,
	// return the empty string.

	            ch = text.charAt(at);
	            at += 1;
	            return ch;
	        },

	        number = function () {

	// Parse a number value.

	            var number,
	                string = '';

	            if (ch === '-') {
	                string = '-';
	                next('-');
	            }
	            while (ch >= '0' && ch <= '9') {
	                string += ch;
	                next();
	            }
	            if (ch === '.') {
	                string += '.';
	                while (next() && ch >= '0' && ch <= '9') {
	                    string += ch;
	                }
	            }
	            if (ch === 'e' || ch === 'E') {
	                string += ch;
	                next();
	                if (ch === '-' || ch === '+') {
	                    string += ch;
	                    next();
	                }
	                while (ch >= '0' && ch <= '9') {
	                    string += ch;
	                    next();
	                }
	            }
	            number = +string;
	            if (!isFinite(number)) {
	                error("Bad number");
	            } else if (number >= Int64.MAX_INT || number <= Int64.MIN_INT) {
	                // Return raw string for further process in TJSONProtocol
	                return string;
	            } else {
	                return number;
	            }
	        },

	        string = function () {

	// Parse a string value.

	            var hex,
	                i,
	                string = '',
	                uffff;

	// When parsing for string values, we must look for " and \ characters.

	            if (ch === '"') {
	                while (next()) {
	                    if (ch === '"') {
	                        next();
	                        return string;
	                    }
	                    if (ch === '\\') {
	                        next();
	                        if (ch === 'u') {
	                            uffff = 0;
	                            for (i = 0; i < 4; i += 1) {
	                                hex = parseInt(next(), 16);
	                                if (!isFinite(hex)) {
	                                    break;
	                                }
	                                uffff = uffff * 16 + hex;
	                            }
	                            string += String.fromCharCode(uffff);
	                        } else if (typeof escapee[ch] === 'string') {
	                            string += escapee[ch];
	                        } else {
	                            break;
	                        }
	                    } else {
	                        string += ch;
	                    }
	                }
	            }
	            error("Bad string");
	        },

	        white = function () {

	// Skip whitespace.

	            while (ch && ch <= ' ') {
	                next();
	            }
	        },

	        word = function () {

	// true, false, or null.

	            switch (ch) {
	            case 't':
	                next('t');
	                next('r');
	                next('u');
	                next('e');
	                return true;
	            case 'f':
	                next('f');
	                next('a');
	                next('l');
	                next('s');
	                next('e');
	                return false;
	            case 'n':
	                next('n');
	                next('u');
	                next('l');
	                next('l');
	                return null;
	            }
	            error("Unexpected '" + ch + "'");
	        },

	        value,  // Place holder for the value function.

	        array = function () {

	// Parse an array value.

	            var array = [];

	            if (ch === '[') {
	                next('[');
	                white();
	                if (ch === ']') {
	                    next(']');
	                    return array;   // empty array
	                }
	                while (ch) {
	                    array.push(value());
	                    white();
	                    if (ch === ']') {
	                        next(']');
	                        return array;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad array");
	        },

	        object = function () {

	// Parse an object value.

	            var key,
	                object = {};

	            if (ch === '{') {
	                next('{');
	                white();
	                if (ch === '}') {
	                    next('}');
	                    return object;   // empty object
	                }
	                while (ch) {
	                    key = string();
	                    white();
	                    next(':');
	                    if (Object.hasOwnProperty.call(object, key)) {
	                        error('Duplicate key "' + key + '"');
	                    }
	                    object[key] = value();
	                    white();
	                    if (ch === '}') {
	                        next('}');
	                        return object;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad object");
	        };

	    value = function () {

	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.

	        white();
	        switch (ch) {
	        case '{':
	            return object();
	        case '[':
	            return array();
	        case '"':
	            return string();
	        case '-':
	            return number();
	        default:
	            return ch >= '0' && ch <= '9'
	                ? number()
	                : word();
	        }
	    };

	// Return the json_parse function. It will have access to all of the above
	// functions and variables.

	    return function (source) {
	        var result;

	        text = source;
	        at = 0;
	        ch = ' ';
	        result = value();
	        white();
	        if (ch) {
	            error("Syntax error");
	        }

	        return result;
	    };
	}());


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(18);
	var EventEmitter = __webpack_require__(23).EventEmitter;
	var thrift = __webpack_require__(17);

	var TBufferedTransport = __webpack_require__(25);
	var TJSONProtocol = __webpack_require__(74);
	var InputBufferUnderrunError = __webpack_require__(31);

	var createClient = __webpack_require__(35);

	exports.XHRConnection = XHRConnection;

	/**
	 * Constructor Function for the XHR Connection.
	 * If you do not specify a host and port then XHRConnection will default to the
	 * host and port of the page from which this javascript is served.
	 * @constructor
	 * @param {string} [url] - The URL to connect to.
	 * @classdesc TXHRConnection objects provide Thrift end point transport
	 *     semantics implemented using XHR.
	 * @example
	 *     var transport = new Thrift.TXHRConnection('localhost', 9099, {});
	 */
	function XHRConnection(host, port, options) {
	  this.options = options || {};
	  this.wpos = 0;
	  this.rpos = 0;
	  this.useCORS = (options && options.useCORS);
	  this.send_buf = '';
	  this.recv_buf = '';
	  this.transport = options.transport || TBufferedTransport;
	  this.protocol = options.protocol || TJSONProtocol;
	  this.headers = options.headers || {};

	  host = host || window.location.host;
	  port = port || window.location.port;
	  var prefix = options.https ? 'https://' : 'http://';
	  var path = options.path || '/';

	  if (port === '') {
	    port = undefined;
	  }

	  if (!port || port === 80 || port === '80') {
	    this.url = prefix + host + path;
	  } else {
	    this.url = prefix + host + ':' + port + path;
	  }

	  //The sequence map is used to map seqIDs back to the
	  //  calling client in multiplexed scenarios
	  this.seqId2Service = {};
	};

	util.inherits(XHRConnection, EventEmitter);

	/**
	* Gets the browser specific XmlHttpRequest Object.
	* @returns {object} the browser XHR interface object
	*/
	XHRConnection.prototype.getXmlHttpRequestObject = function() {
	  try { return new XMLHttpRequest(); } catch (e1) { }
	  try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch (e2) { }
	  try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch (e3) { }

	  throw "Your browser doesn't support XHR.";
	};

	/**
	 * Sends the current XRH request if the transport was created with a URL
	 * and the async parameter is false. If the transport was not created with
	 * a URL, or the async parameter is True and no callback is provided, or
	 * the URL is an empty string, the current send buffer is returned.
	 * @param {object} async - If true the current send buffer is returned.
	 * @param {object} callback - Optional async completion callback
	 * @returns {undefined|string} Nothing or the current send buffer.
	 * @throws {string} If XHR fails.
	 */
	XHRConnection.prototype.flush = function() {
	  var self = this;
	  if (this.url === undefined || this.url === '') {
	    return this.send_buf;
	  }

	  var xreq = this.getXmlHttpRequestObject();

	  if (xreq.overrideMimeType) {
	    xreq.overrideMimeType('application/json');
	  }

	  xreq.onreadystatechange = function() {
	    if (this.readyState == 4 && this.status == 200) {
	      self.setRecvBuffer(this.responseText);
	    }
	  };

	  xreq.open('POST', this.url, true);

	  Object.keys(this.headers).forEach(function(headerKey) {
	    xreq.setRequestHeader(headerKey, self.headers[headerKey]);
	  });

	  xreq.send(this.send_buf);
	};

	/**
	 * Sets the buffer to provide the protocol when deserializing.
	 * @param {string} buf - The buffer to supply the protocol.
	 */
	XHRConnection.prototype.setRecvBuffer = function(buf) {
	  this.recv_buf = buf;
	  this.recv_buf_sz = this.recv_buf.length;
	  this.wpos = this.recv_buf.length;
	  this.rpos = 0;

	  if (Object.prototype.toString.call(buf) == "[object ArrayBuffer]") {
	    var data = new Uint8Array(buf);
	  }
	  var thing = new Buffer(data || buf);

	  this.transport.receiver(this.__decodeCallback.bind(this))(thing);

	};

	XHRConnection.prototype.__decodeCallback = function(transport_with_data) {
	  var proto = new this.protocol(transport_with_data);
	  try {
	    while (true) {
	      var header = proto.readMessageBegin();
	      var dummy_seqid = header.rseqid * -1;
	      var client = this.client;
	      //The Multiplexed Protocol stores a hash of seqid to service names
	      //  in seqId2Service. If the SeqId is found in the hash we need to
	      //  lookup the appropriate client for this call.
	      //  The client var is a single client object when not multiplexing,
	      //  when using multiplexing it is a service name keyed hash of client
	      //  objects.
	      //NOTE: The 2 way interdependencies between protocols, transports,
	      //  connections and clients in the Node.js implementation are irregular
	      //  and make the implementation difficult to extend and maintain. We
	      //  should bring this stuff inline with typical thrift I/O stack
	      //  operation soon.
	      //  --ra
	      var service_name = this.seqId2Service[header.rseqid];
	      if (service_name) {
	        client = this.client[service_name];
	        delete this.seqId2Service[header.rseqid];
	      }
	      /*jshint -W083 */
	      client._reqs[dummy_seqid] = function(err, success) {
	        transport_with_data.commitPosition();
	        var clientCallback = client._reqs[header.rseqid];
	        delete client._reqs[header.rseqid];
	        if (clientCallback) {
	          clientCallback(err, success);
	        }
	      };
	      /*jshint +W083 */
	      if (client['recv_' + header.fname]) {
	        client['recv_' + header.fname](proto, header.mtype, dummy_seqid);
	      } else {
	        delete client._reqs[dummy_seqid];
	        this.emit("error",
	          new thrift.TApplicationException(
	            thrift.TApplicationExceptionType.WRONG_METHOD_NAME,
	            "Received a response to an unknown RPC function"));
	      }
	    }
	  } catch (e) {
	    if (e instanceof InputBufferUnderrunError) {
	      transport_with_data.rollbackPosition();
	    } else {
	      throw e;
	    }
	  }
	};

	/**
	 * Returns true if the transport is open, XHR always returns true.
	 * @readonly
	 * @returns {boolean} Always True.
	 */
	XHRConnection.prototype.isOpen = function() {
	  return true;
	};

	/**
	 * Opens the transport connection, with XHR this is a nop.
	 */
	XHRConnection.prototype.open = function() {};

	/**
	 * Closes the transport connection, with XHR this is a nop.
	 */
	XHRConnection.prototype.close = function() {};

	/**
	 * Returns the specified number of characters from the response
	 * buffer.
	 * @param {number} len - The number of characters to return.
	 * @returns {string} Characters sent by the server.
	 */
	XHRConnection.prototype.read = function(len) {
	  var avail = this.wpos - this.rpos;

	  if (avail === 0) {
	    return '';
	  }

	  var give = len;

	  if (avail < len) {
	    give = avail;
	  }

	  var ret = this.read_buf.substr(this.rpos, give);
	  this.rpos += give;

	  //clear buf when complete?
	  return ret;
	};

	/**
	 * Returns the entire response buffer.
	 * @returns {string} Characters sent by the server.
	 */
	XHRConnection.prototype.readAll = function() {
	  return this.recv_buf;
	};

	/**
	 * Sets the send buffer to buf.
	 * @param {string} buf - The buffer to send.
	 */
	XHRConnection.prototype.write = function(buf) {
	  this.send_buf = buf;
	  this.flush();
	};

	/**
	 * Returns the send buffer.
	 * @readonly
	 * @returns {string} The send buffer.
	 */
	XHRConnection.prototype.getSendBuffer = function() {
	  return this.send_buf;
	};

	/**
	 * Creates a new TXHRTransport object, used by Thrift clients to connect
	 *    to Thrift HTTP based servers.
	 * @param {string} host - The host name or IP to connect to.
	 * @param {number} port - The TCP port to connect to.
	 * @param {XHRConnectOptions} options - The configuration options to use.
	 * @returns {XHRConnection} The connection object.
	 * @see {@link XHRConnectOptions}
	 */
	exports.createXHRConnection = function(host, port, options) {
	  return new XHRConnection(host, port, options);
	};

	exports.createXHRClient = createClient;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var net = __webpack_require__(24);
	var tls = __webpack_require__(24);

	var TBufferedTransport = __webpack_require__(25);
	var TBinaryProtocol = __webpack_require__(32);
	var InputBufferUnderrunError = __webpack_require__(31);

	/**
	 * Create a Thrift server which can serve one or multiple services.
	 * @param {object} processor - A normal or multiplexedProcessor (must
	 *                             be preconstructed with the desired handler).
	 * @param {ServerOptions} options - Optional additional server configuration.
	 * @returns {object} - The Apache Thrift Multiplex Server.
	 */
	exports.createMultiplexServer = function(processor, options) {
	  var transport = (options && options.transport) ? options.transport : TBufferedTransport;
	  var protocol = (options && options.protocol) ? options.protocol : TBinaryProtocol;

	  function serverImpl(stream) {
	    var self = this;
	    stream.on('error', function(err) {
	        self.emit('error', err);
	    });
	    stream.on('data', transport.receiver(function(transportWithData) {
	      var input = new protocol(transportWithData);
	      var output = new protocol(new transport(undefined, function(buf) {
	        try {
	            stream.write(buf);
	        } catch (err) {
	            self.emit('error', err);
	            stream.end();
	        }
	      }));

	      try {
	        do {
	          processor.process(input, output);
	          transportWithData.commitPosition();
	        } while (true);
	      } catch (err) {
	        if (err instanceof InputBufferUnderrunError) {
	          //The last data in the buffer was not a complete message, wait for the rest
	          transportWithData.rollbackPosition();
	        }
	        else if (err.message === "Invalid type: undefined") {
	          //No more data in the buffer
	          //This trap is a bit hackish
	          //The next step to improve the node behavior here is to have
	          //  the compiler generated process method throw a more explicit
	          //  error when the network buffer is empty (regardles of the
	          //  protocol/transport stack in use) and replace this heuristic.
	          //  Also transports should probably not force upper layers to
	          //  manage their buffer positions (i.e. rollbackPosition() and
	          //  commitPosition() should be eliminated in lieu of a transport
	          //  encapsulated buffer management strategy.)
	          transportWithData.rollbackPosition();
	        }
	        else {
	          //Unexpected error
	          self.emit('error', err);
	          stream.end();
	        }
	      }
	    }));

	    stream.on('end', function() {
	      stream.end();
	    });
	  }

	  if (options && options.tls) {
	    return tls.createServer(options.tls, serverImpl);
	  } else {
	    return net.createServer(serverImpl);
	  }
	};

	/**
	 * Create a single service Apache Thrift server.
	 * @param {object} processor - A service class or processor function.
	 * @param {ServerOptions} options - Optional additional server configuration.
	 * @returns {object} - The Apache Thrift Multiplex Server.
	 */
	exports.createServer = function(processor, handler, options) {
	  if (processor.Processor) {
	    processor = processor.Processor;
	  }
	  return exports.createMultiplexServer(new processor(handler), options);
	};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var http = __webpack_require__(37);
	var https = __webpack_require__(67);
	var url = __webpack_require__(61);
	var path = __webpack_require__(80);
	var fs = __webpack_require__(24);
	var crypto = __webpack_require__(81);

	var MultiplexedProcessor = __webpack_require__(115).MultiplexedProcessor;

	var TBufferedTransport = __webpack_require__(25);
	var TBinaryProtocol = __webpack_require__(32);
	var InputBufferUnderrunError = __webpack_require__(31);

	// WSFrame constructor and prototype
	/////////////////////////////////////////////////////////////////////

	/** Apache Thrift RPC Web Socket Transport
	 *  Frame layout conforming to RFC 6455 circa 12/2011
	 *
	 * Theoretical frame size limit is 4GB*4GB, however the Node Buffer
	 * limit is 1GB as of v0.10. The frame length encoding is also
	 * configured for a max of 4GB presently and needs to be adjusted
	 * if Node/Browsers become capabile of > 4GB frames.
	 *
	 *  - FIN is 1 if the message is complete
	 *  - RSV1/2/3 are always 0
	 *  - Opcode is 1(TEXT) for TJSONProtocol and 2(BIN) for TBinaryProtocol
	 *  - Mask Present bit is 1 sending to-server and 0 sending to-client
	 *  - Payload Len:
	 *        + If < 126: then represented directly
	 *        + If >=126: but within range of an unsigned 16 bit integer
	 *             then Payload Len is 126 and the two following bytes store
	 *             the length
	 *        + Else: Payload Len is 127 and the following 8 bytes store the
	 *             length as an unsigned 64 bit integer
	 *  - Masking key is a 32 bit key only present when sending to the server
	 *  - Payload follows the masking key or length
	 *
	 *     0                   1                   2                   3
	 *     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	 *    +-+-+-+-+-------+-+-------------+-------------------------------+
	 *    |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
	 *    |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
	 *    |N|V|V|V|       |S|             |   (if payload len==126/127)   |
	 *    | |1|2|3|       |K|             |                               |
	 *    +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
	 *    |     Extended payload length continued, if payload len == 127  |
	 *    + - - - - - - - - - - - - - - - +-------------------------------+
	 *    |                               |Masking-key, if MASK set to 1  |
	 *    +-------------------------------+-------------------------------+
	 *    | Masking-key (continued)       |          Payload Data         |
	 *    +-------------------------------- - - - - - - - - - - - - - - - +
	 *    :                     Payload Data continued ...                :
	 *    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
	 *    |                     Payload Data continued ...                |
	 *    +---------------------------------------------------------------+
	 */
	var wsFrame = {
	  /** Encodes a WebSocket frame
	   *
	   * @param {Buffer} data - The raw data to encode
	   * @param {Buffer} mask - The mask to apply when sending to server, null for no mask
	   * @param {Boolean} binEncoding - True for binary encoding, false for text encoding
	   * @returns {Buffer} - The WebSocket frame, ready to send
	   */
	  encode: function(data, mask, binEncoding) {
	      var frame = new Buffer(wsFrame.frameSizeFromData(data, mask));
	      //Byte 0 - FIN & OPCODE
	      frame[0] = wsFrame.fin.FIN +
	          (binEncoding ? wsFrame.frameOpCodes.BIN : wsFrame.frameOpCodes.TEXT);
	      //Byte 1 or 1-3 or 1-9 - MASK FLAG & SIZE
	      var payloadOffset = 2;
	      if (data.length < 0x7E) {
	        frame[1] = data.length + (mask ? wsFrame.mask.TO_SERVER : wsFrame.mask.TO_CLIENT);
	      } else if (data.length < 0xFFFF) {
	        frame[1] = 0x7E + (mask ? wsFrame.mask.TO_SERVER : wsFrame.mask.TO_CLIENT);
	        frame.writeUInt16BE(data.length, 2, true);
	        payloadOffset = 4;
	      } else {
	        frame[1] = 0x7F + (mask ? wsFrame.mask.TO_SERVER : wsFrame.mask.TO_CLIENT);
	        frame.writeUInt32BE(0, 2, true);
	        frame.writeUInt32BE(data.length, 6, true);
	        payloadOffset = 10;
	      }
	      //MASK
	      if (mask) {
	        mask.copy(frame, payloadOffset, 0, 4);
	        payloadOffset += 4;
	      }
	      //Payload
	      data.copy(frame, payloadOffset);
	      if (mask) {
	        wsFrame.applyMask(frame.slice(payloadOffset), frame.slice(payloadOffset-4,payloadOffset));
	      }
	      return frame;
	  },

	  /**
	   * @class
	   * @name WSDecodeResult
	   * @property {Buffer} data - The decoded data for the first ATRPC message
	   * @property {Buffer} mask - The frame mask
	   * @property {Boolean} binEncoding - True if binary (TBinaryProtocol),
	   *                                   False if text (TJSONProtocol)
	   * @property {Buffer} nextFrame - Multiple ATRPC messages may be sent in a
	   *                                single WebSocket frame, this Buffer contains
	   *                                any bytes remaining to be decoded
	   * @property {Boolean} FIN - True is the message is complete
	   */

	   /** Decodes a WebSocket frame
	   *
	   * @param {Buffer} frame - The raw inbound frame, if this is a continuation
	   *                         frame it must have a mask property with the mask.
	   * @returns {WSDecodeResult} - The decoded payload
	   *
	   * @see {@link WSDecodeResult}
	   */
	  decode: function(frame) {
	      var result = {
	        data: null,
	        mask: null,
	        binEncoding: false,
	        nextFrame: null,
	        FIN: true
	      };

	      //Byte 0 - FIN & OPCODE
	      if (wsFrame.fin.FIN != (frame[0] & wsFrame.fin.FIN)) {
	        result.FIN = false;
	      }
	      result.binEncoding = (wsFrame.frameOpCodes.BIN == (frame[0] & wsFrame.frameOpCodes.BIN));
	      //Byte 1 or 1-3 or 1-9 - SIZE
	      var lenByte = (frame[1] & 0x0000007F);
	      var len = lenByte;
	      var dataOffset = 2;
	      if (lenByte == 0x7E) {
	        len = frame.readUInt16BE(2);
	        dataOffset = 4;
	      } else if (lenByte == 0x7F) {
	        len = frame.readUInt32BE(6);
	        dataOffset = 10;
	      }
	      //MASK
	      if (wsFrame.mask.TO_SERVER == (frame[1] & wsFrame.mask.TO_SERVER)) {
	        result.mask = new Buffer(4);
	        frame.copy(result.mask, 0, dataOffset, dataOffset + 4);
	        dataOffset += 4;
	      }
	      //Payload
	      result.data = new Buffer(len);
	      frame.copy(result.data, 0, dataOffset, dataOffset+len);
	      if (result.mask) {
	        wsFrame.applyMask(result.data, result.mask);
	      }
	      //Next Frame
	      if (frame.length > dataOffset+len) {
	        result.nextFrame = new Buffer(frame.length - (dataOffset+len));
	        frame.copy(result.nextFrame, 0, dataOffset+len, frame.length);
	      }
	      //Don't forward control frames
	      if (frame[0] & wsFrame.frameOpCodes.FINCTRL) {
	        result.data = null;
	      }

	      return result;
	  },

	  /** Masks/Unmasks data
	   *
	   * @param {Buffer} data - data to mask/unmask in place
	   * @param {Buffer} mask - the mask
	   */
	  applyMask: function(data, mask){
	    //TODO: look into xoring words at a time
	    var dataLen = data.length;
	    var maskLen = mask.length;
	    for (var i = 0; i < dataLen; i++) {
	      data[i] = data[i] ^ mask[i%maskLen];
	    }
	  },

	  /** Computes frame size on the wire from data to be sent
	   *
	   * @param {Buffer} data - data.length is the assumed payload size
	   * @param {Boolean} mask - true if a mask will be sent (TO_SERVER)
	   */
	  frameSizeFromData: function(data, mask) {
	    var headerSize = 10;
	    if (data.length < 0x7E) {
	      headerSize = 2;
	    } else if (data.length < 0xFFFF) {
	      headerSize = 4;
	    }
	    return headerSize + data.length + (mask ? 4 : 0);
	  },

	  frameOpCodes: {
	    CONT:     0x00,
	    TEXT:     0x01,
	    BIN:      0x02,
	    CTRL:     0x80
	  },

	  mask: {
	    TO_SERVER: 0x80,
	    TO_CLIENT: 0x00
	  },

	  fin: {
	    CONT: 0x00,
	    FIN: 0x80
	  }
	};


	// createWebServer constructor and options
	/////////////////////////////////////////////////////////////////////

	/**
	 * @class
	 * @name ServerOptions
	 * @property {array} cors - Array of CORS origin strings to permit requests from.
	 * @property {string} files - Path to serve static files from, if absent or ""
	 *                               static file service is disabled.
	 * @property {object} headers - An object hash mapping header strings to header value
	 *                              strings, these headers are transmitted in response to
	 *                              static file GET operations.
	 * @property {object} services - An object hash mapping service URI strings
	 *                               to ServiceOptions objects
	 * @property {object} tls - Node.js TLS options (see: nodejs.org/api/tls.html),
	 *                          if not present or null regular http is used,
	 *                          at least a key and a cert must be defined to use SSL/TLS
	 * @see {@link ServiceOptions}
	 */

	/**
	 * @class
	 * @name ServiceOptions
	 * @property {object} transport - The layered transport to use (defaults
	 *                                to TBufferedTransport).
	 * @property {object} protocol - The serialization Protocol to use (defaults to
	 *                               TBinaryProtocol).
	 * @property {object} processor - The Thrift Service class/processor generated
	 *                                by the IDL Compiler for the service (the "cls"
	 *                                key can also be used for this attribute).
	 * @property {object} handler - The handler methods for the Thrift Service.
	 */

	/**
	 * Create a Thrift server which can serve static files and/or one or
	 * more Thrift Services.
	 * @param {ServerOptions} options - The server configuration.
	 * @returns {object} - The Apache Thrift Web Server.
	 */
	exports.createWebServer = function(options) {
	  var baseDir = options.files;
	  var contentTypesByExtension = {
	    '.txt': 'text/plain',
	    '.html': 'text/html',
	    '.css': 'text/css',
	    '.xml': 'application/xml',
	    '.json': 'application/json',
	    '.js': 'application/javascript',
	    '.jpg': 'image/jpeg',
	    '.jpeg': 'image/jpeg',
	    '.gif': 'image/gif',
	    '.png': 'image/png',
	    '.svg': 'image/svg+xml'
	  };

	  //Setup all of the services
	  var services = options.services;
	  for (var uri in services) {
	    var svcObj = services[uri];

	    //Setup the processor
	    if (svcObj.processor instanceof MultiplexedProcessor) {
	      //Multiplex processors have pre embedded processor/handler pairs, save as is
	      svcObj.processor = svcObj.processor;
	    } else {
	      //For historical reasons Node.js supports processors passed in directly or via the
	      //  IDL Compiler generated class housing the processor. Also, the options property
	      //  for a Processor has been called both cls and processor at different times. We
	      //  support any of the four possibilities here.
	      var processor = (svcObj.processor) ? (svcObj.processor.Processor || svcObj.processor) :
	                                           (svcObj.cls.Processor || svcObj.cls);
	      //Processors can be supplied as constructed objects with handlers already embedded,
	      //  if a handler is provided we construct a new processor, if not we use the processor
	      //  object directly
	      if (svcObj.handler) {
	        svcObj.processor = new processor(svcObj.handler);
	      } else {
	        svcObj.processor = processor;
	      }
	    }
	    svcObj.transport = svcObj.transport ? svcObj.transport : TBufferedTransport;
	    svcObj.protocol = svcObj.protocol ? svcObj.protocol : TBinaryProtocol;
	  }

	  //Verify CORS requirements
	  function VerifyCORSAndSetHeaders(request, response) {
	    if (request.headers.origin && options.cors) {
	      if (options.cors["*"] || options.cors[request.headers.origin]) {
	        //Allow, origin allowed
	        response.setHeader("access-control-allow-origin", request.headers.origin);
	        response.setHeader("access-control-allow-methods", "GET, POST, OPTIONS");
	        response.setHeader("access-control-allow-headers", "content-type, accept");
	        response.setHeader("access-control-max-age", "60");
	        return true;
	      } else {
	        //Disallow, origin denied
	        return false;
	      }
	    }
	    //Allow, CORS is not in use
	    return true;
	  }


	  //Handle OPTIONS method (CORS)
	  ///////////////////////////////////////////////////
	  function processOptions(request, response) {
	    if (VerifyCORSAndSetHeaders(request, response)) {
	      response.writeHead("204", "No Content", {"content-length": 0});
	    } else {
	      response.writeHead("403", "Origin " + request.headers.origin + " not allowed", {});
	    }
	    response.end();
	  }


	  //Handle POST methods (TXHRTransport)
	  ///////////////////////////////////////////////////
	  function processPost(request, response) {
	    //Lookup service
	    var uri = url.parse(request.url).pathname;
	    var svc = services[uri];
	    if (!svc) {
	      response.writeHead("403", "No Apache Thrift Service at " + uri, {});
	      response.end();
	      return;
	    }

	    //Verify CORS requirements
	    if (!VerifyCORSAndSetHeaders(request, response)) {
	      response.writeHead("403", "Origin " + request.headers.origin + " not allowed", {});
	      response.end();
	      return;
	    }

	    //Process XHR payload
	    request.on('data', svc.transport.receiver(function(transportWithData) {
	      var input = new svc.protocol(transportWithData);
	      var output = new svc.protocol(new svc.transport(undefined, function(buf) {
	        try {
	          response.writeHead(200);
	          response.end(buf);
	        } catch (err) {
	          response.writeHead(500);
	          response.end();
	        }
	      }));

	      try {
	        svc.processor.process(input, output);
	        transportWithData.commitPosition();
	      } catch (err) {
	        if (err instanceof InputBufferUnderrunError) {
	          transportWithData.rollbackPosition();
	        } else {
	          response.writeHead(500);
	          response.end();
	        }
	      }
	    }));
	  }


	  //Handle GET methods (Static Page Server)
	  ///////////////////////////////////////////////////
	  function processGet(request, response) {
	    //Undefined or empty base directory means do not serve static files
	    if (!baseDir || "" === baseDir) {
	      response.writeHead(404);
	      response.end();
	      return;
	    }

	    //Verify CORS requirements
	    if (!VerifyCORSAndSetHeaders(request, response)) {
	      response.writeHead("403", "Origin " + request.headers.origin + " not allowed", {});
	      response.end();
	      return;
	    }

	    //Locate the file requested and send it
	    var uri = url.parse(request.url).pathname;
	    var filename = path.join(baseDir, uri);
	    fs.exists(filename, function(exists) {
	      if(!exists) {
	        response.writeHead(404);
	        response.end();
	        return;
	      }

	      if (fs.statSync(filename).isDirectory()) {
	        filename += '/index.html';
	      }

	      fs.readFile(filename, "binary", function(err, file) {
	        if (err) {
	          response.writeHead(500);
	          response.end(err + "\n");
	          return;
	        }
	        var headers = {};
	        var contentType = contentTypesByExtension[path.extname(filename)];
	        if (contentType) {
	          headers["Content-Type"] = contentType;
	        }
	        for (var k in options.headers) {
	          headers[k] = options.headers[k];
	        }
	        response.writeHead(200, headers);
	        response.write(file, "binary");
	        response.end();
	      });
	    });
	  }


	  //Handle WebSocket calls (TWebSocketTransport)
	  ///////////////////////////////////////////////////
	  function processWS(data, socket, svc, binEncoding) {
	    svc.transport.receiver(function(transportWithData) {
	      var input = new svc.protocol(transportWithData);
	      var output = new svc.protocol(new svc.transport(undefined, function(buf) {
	        try {
	          var frame = wsFrame.encode(buf, null, binEncoding);
	          socket.write(frame);
	        } catch (err) {
	          //TODO: Add better error processing
	        }
	      }));

	      try {
	        svc.processor.process(input, output);
	        transportWithData.commitPosition();
	      }
	      catch (err) {
	        if (err instanceof InputBufferUnderrunError) {
	          transportWithData.rollbackPosition();
	        }
	        else {
	          //TODO: Add better error processing
	        }
	      }
	    })(data);
	  }

	  //Create the server (HTTP or HTTPS)
	  var server = null;
	  if (options.tls) {
	    server = https.createServer(options.tls);
	  } else {
	    server = http.createServer();
	  }

	  //Wire up listeners for upgrade(to WebSocket) & request methods for:
	  //   - GET static files,
	  //   - POST XHR Thrift services
	  //   - OPTIONS CORS requests
	  server.on('request', function(request, response) {
	    if (request.method === 'POST') {
	      processPost(request, response);
	    } else if (request.method === 'GET') {
	      processGet(request, response);
	    } else if (request.method === 'OPTIONS') {
	      processOptions(request, response);
	    } else {
	      response.writeHead(500);
	      response.end();
	    }
	  }).on('upgrade', function(request, socket, head) {
	    //Lookup service
	    var svc;
	    try {
	      svc = services[Object.keys(services)[0]];
	    } catch(e) {
	      socket.write("HTTP/1.1 403 No Apache Thrift Service available\r\n\r\n");
	      return;
	    }
	    //Perform upgrade
	    var hash = crypto.createHash("sha1");
	    hash.update(request.headers['sec-websocket-key'] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11");
	    socket.write("HTTP/1.1 101 Switching Protocols\r\n" +
	                   "Upgrade: websocket\r\n" +
	                   "Connection: Upgrade\r\n" +
	                   "Sec-WebSocket-Accept: " + hash.digest("base64") + "\r\n" +
	                   "Sec-WebSocket-Origin: " + request.headers.origin + "\r\n" +
	                   "Sec-WebSocket-Location: ws://" + request.headers.host + request.url + "\r\n" +
	                   "\r\n");
	    //Handle WebSocket traffic
	    var data = null;
	    socket.on('data', function(frame) {
	      try {
	        while (frame) {
	          var result = wsFrame.decode(frame);
	          //Prepend any existing decoded data
	          if (data) {
	            if (result.data) {
	              var newData = new Buffer(data.length + result.data.length);
	              data.copy(newData);
	              result.data.copy(newData, data.length);
	              result.data = newData;
	            } else {
	              result.data = data;
	            }
	            data = null;
	          }
	          //If this completes a message process it
	          if (result.FIN) {
	            processWS(result.data, socket, svc, result.binEncoding);
	          } else {
	            data = result.data;
	          }
	          //Prepare next frame for decoding (if any)
	          frame = result.nextFrame;
	        }
	      } catch(e) {
	        console.log("TWebSocketTransport Exception: " + e);
	        socket.destroy();
	      }
	    });
	  });

	  //Return the server
	  return server;
	};







	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(82)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(84)

	exports.createHmac = __webpack_require__(93)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(94)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	__webpack_require__(96)(exports, module.exports);

	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(83)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(26).Buffer))

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(85)

	var md5 = toConstructor(__webpack_require__(90))
	var rmd160 = toConstructor(__webpack_require__(92))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(26).Buffer
	var Hash   = __webpack_require__(86)(Buffer)

	exports.sha1 = __webpack_require__(87)(Buffer, Hash)
	exports.sha256 = __webpack_require__(88)(Buffer, Hash)
	exports.sha512 = __webpack_require__(89)(Buffer, Hash)


/***/ }),
/* 86 */
/***/ (function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(18).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(18).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(18).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(91);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(84)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(95)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function (crypto, exports) {
	  exports = exports || {};
	  var ciphers = __webpack_require__(97)(crypto);
	  exports.createCipher = ciphers.createCipher;
	  exports.createCipheriv = ciphers.createCipheriv;
	  var deciphers = __webpack_require__(114)(crypto);
	  exports.createDecipher = deciphers.createDecipher;
	  exports.createDecipheriv = deciphers.createDecipheriv;
	  var modes = __webpack_require__(105);
	  function listCiphers () {
	    return Object.keys(modes);
	  }
	  exports.listCiphers = listCiphers;
	};



/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(98);
	var Transform = __webpack_require__(99);
	var inherits = __webpack_require__(40);
	var modes = __webpack_require__(105);
	var ebtk = __webpack_require__(106);
	var StreamCipher = __webpack_require__(107);
	inherits(Cipher, Transform);
	function Cipher(mode, key, iv) {
	  if (!(this instanceof Cipher)) {
	    return new Cipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Cipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.encrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Cipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  this.push(this._mode.encrypt(this, chunk));
	  this._cipher.scrub();
	  next();
	};


	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  var len = 16 - this.cache.length;
	  var padBuff = new Buffer(len);

	  var i = -1;
	  while (++i < len) {
	    padBuff.writeUInt8(len, i);
	  }
	  var out = Buffer.concat([this.cache, padBuff]);
	  return out;
	};
	var modelist = {
	  ECB: __webpack_require__(108),
	  CBC: __webpack_require__(109),
	  CFB: __webpack_require__(111),
	  OFB: __webpack_require__(112),
	  CTR: __webpack_require__(113)
	};
	module.exports = function (crypto) {
	  function createCipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv);
	    }
	    return new Cipher(modelist[config.mode], password, iv);
	  }
	  function createCipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createCipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createCipher: createCipher,
	    createCipheriv: createCipheriv
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var uint_max = Math.pow(2, 32);
	function fixup_uint32(x) {
	    var ret, x_pos;
	    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
	    return ret;
	}
	function scrub_vec(v) {
	  var i, _i, _ref;
	  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	    v[i] = 0;
	  }
	  return false;
	}

	function Global() {
	  var i;
	  this.SBOX = [];
	  this.INV_SBOX = [];
	  this.SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.INV_SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.init();
	  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	}

	Global.prototype.init = function() {
	  var d, i, sx, t, x, x2, x4, x8, xi, _i;
	  d = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 256; i = ++_i) {
	      if (i < 128) {
	        _results.push(i << 1);
	      } else {
	        _results.push((i << 1) ^ 0x11b);
	      }
	    }
	    return _results;
	  })();
	  x = 0;
	  xi = 0;
	  for (i = _i = 0; _i < 256; i = ++_i) {
	    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	    this.SBOX[x] = sx;
	    this.INV_SBOX[sx] = x;
	    x2 = d[x];
	    x4 = d[x2];
	    x8 = d[x4];
	    t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
	    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
	    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
	    this.SUB_MIX[3][x] = t;
	    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
	    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
	    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
	    this.INV_SUB_MIX[3][sx] = t;
	    if (x === 0) {
	      x = xi = 1;
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]];
	      xi ^= d[d[xi]];
	    }
	  }
	  return true;
	};

	var G = new Global();


	AES.blockSize = 4 * 4;

	AES.prototype.blockSize = AES.blockSize;

	AES.keySize = 256 / 8;

	AES.prototype.keySize = AES.keySize;

	AES.ivSize = AES.blockSize;

	AES.prototype.ivSize = AES.ivSize;

	 function bufferToArray(buf) {
	  var len = buf.length/4;
	  var out = new Array(len);
	  var i = -1;
	  while (++i < len) {
	    out[i] = buf.readUInt32BE(i * 4);
	  }
	  return out;
	 }
	function AES(key) {
	  this._key = bufferToArray(key);
	  this._doReset();
	}

	AES.prototype._doReset = function() {
	  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;
	  keyWords = this._key;
	  keySize = keyWords.length;
	  this._nRounds = keySize + 6;
	  ksRows = (this._nRounds + 1) * 4;
	  this._keySchedule = [];
	  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {
	    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
	  }
	  this._invKeySchedule = [];
	  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {
	    ksRow = ksRows - invKsRow;
	    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
	    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
	  }
	  return true;
	};

	AES.prototype.encryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[1], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[3], 12);
	  return buf;
	};

	AES.prototype.decryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var temp = [M[3], M[1]];
	  M[1] = temp[0];
	  M[3] = temp[1];
	  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[3], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[1], 12);
	  return buf;
	};

	AES.prototype.scrub = function() {
	  scrub_vec(this._keySchedule);
	  scrub_vec(this._invKeySchedule);
	  scrub_vec(this._key);
	};

	AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {
	  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;

	  s0 = M[0] ^ keySchedule[0];
	  s1 = M[1] ^ keySchedule[1];
	  s2 = M[2] ^ keySchedule[2];
	  s3 = M[3] ^ keySchedule[3];
	  ksRow = 4;
	  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {
	    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
	    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
	    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
	    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
	    s0 = t0;
	    s1 = t1;
	    s2 = t2;
	    s3 = t3;
	  }
	  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	  return [
	    fixup_uint32(t0),
	    fixup_uint32(t1),
	    fixup_uint32(t2),
	    fixup_uint32(t3)
	  ];

	};




	  exports.AES = AES;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(100).Transform;
	var inherits = __webpack_require__(40);

	module.exports = CipherBase;
	inherits(CipherBase, Transform);
	function CipherBase() {
	  Transform.call(this);
	}
	CipherBase.prototype.update = function (data, inputEnd, outputEnc) {
	  this.write(data, inputEnd);
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	CipherBase.prototype.final = function (outputEnc) {
	  this.end();
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(23).EventEmitter;
	var inherits = __webpack_require__(40);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(42);
	Stream.Writable = __webpack_require__(101);
	Stream.Duplex = __webpack_require__(102);
	Stream.Transform = __webpack_require__(103);
	Stream.PassThrough = __webpack_require__(104);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(51);


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(50);


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(42).Transform


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(42).PassThrough


/***/ }),
/* 105 */
/***/ (function(module, exports) {

	exports['aes-128-ecb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-192-ecb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-256-ecb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-128-cbc'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-192-cbc'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-256-cbc'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes128'] = exports['aes-128-cbc'];
	exports['aes192'] = exports['aes-192-cbc'];
	exports['aes256'] = exports['aes-256-cbc'];
	exports['aes-128-cfb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-192-cfb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-256-cfb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-128-ofb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-192-ofb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-256-ofb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-128-ctr'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-192-ctr'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-256-ctr'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = function (crypto, password, keyLen, ivLen) {
	  keyLen = keyLen/8;
	  ivLen = ivLen || 0;
	  var ki = 0;
	  var ii = 0;
	  var key = new Buffer(keyLen);
	  var iv = new Buffer(ivLen);
	  var addmd = 0;
	  var md, md_buf;
	  var i;
	  while (true) {
	    md = crypto.createHash('md5');
	    if(addmd++ > 0) {
	       md.update(md_buf);
	    }
	    md.update(password);
	    md_buf = md.digest();
	    i = 0;
	    if(keyLen > 0) {
	      while(true) {
	        if(keyLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	        key[ki++] = md_buf[i];
	        keyLen--;
	        i++;
	       }
	    }
	    if(ivLen > 0 && i !== md_buf.length) {
	      while(true) {
	        if(ivLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	       iv[ii++] = md_buf[i];
	       ivLen--;
	       i++;
	     }
	   }
	   if(keyLen === 0 && ivLen === 0) {
	      break;
	    }
	  }
	  for(i=0;i<md_buf.length;i++) {
	    md_buf[i] = 0;
	  }
	  return {
	    key: key,
	    iv: iv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(98);
	var Transform = __webpack_require__(99);
	var inherits = __webpack_require__(40);

	inherits(StreamCipher, Transform);
	module.exports = StreamCipher;
	function StreamCipher(mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  this._cache = new Buffer('');
	  this._secCache = new Buffer('');
	  this._decrypt = decrypt;
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	StreamCipher.prototype._transform = function (chunk, _, next) {
	  next(null, this._mode.encrypt(this, chunk, this._decrypt));
	};
	StreamCipher.prototype._flush = function (next) {
	  this._cipher.scrub();
	  next();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 108 */
/***/ (function(module, exports) {

	exports.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block);
	};
	exports.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block);
	};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	var xor = __webpack_require__(110);
	exports.encrypt = function (self, block) {
	  var data = xor(block, self._prev);
	  self._prev = self._cipher.encryptBlock(data);
	  return self._prev;
	};
	exports.decrypt = function (self, block) {
	  var pad = self._prev;
	  self._prev = block;
	  var out = self._cipher.decryptBlock(block);
	  return xor(out, pad);
	};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = xor;
	function xor(a, b) {
	  var len = Math.min(a.length, b.length);
	  var out = new Buffer(len);
	  var i = -1;
	  while (++i < len) {
	    out.writeUInt8(a[i] ^ b[i], i);
	  }
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(110);
	exports.encrypt = function (self, data, decrypt) {
	  var out = new Buffer('');
	  var len;
	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev);
	      self._prev = new Buffer('');
	    }
	    if (self._cache.length <= data.length) {
	      len = self._cache.length;
	      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
	      data = data.slice(len);
	    } else {
	      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
	      break;
	    }
	  }
	  return out;
	};
	function encryptStart(self, data, decrypt) {
	  var len = data.length;
	  var out = xor(data, self._cache);
	  self._cache = self._cache.slice(len);
	  self._prev = Buffer.concat([self._prev, decrypt?data:out]);
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(110);
	function getBlock(self) {
	  self._prev = self._cipher.encryptBlock(self._prev);
	  return self._prev;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(110);
	function getBlock(self) {
	  var out = self._cipher.encryptBlock(self._prev);
	  incr32(self._prev);
	  return out;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	function incr32(iv) {
	  var len = iv.length;
	  var item;
	  while (len--) {
	    item = iv.readUInt8(len);
	    if (item === 255) {
	      iv.writeUInt8(0, len);
	    } else {
	      item++;
	      iv.writeUInt8(item, len);
	      break;
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(98);
	var Transform = __webpack_require__(99);
	var inherits = __webpack_require__(40);
	var modes = __webpack_require__(105);
	var StreamCipher = __webpack_require__(107);
	var ebtk = __webpack_require__(106);

	inherits(Decipher, Transform);
	function Decipher(mode, key, iv) {
	  if (!(this instanceof Decipher)) {
	    return new Decipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._last = void 0;
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Decipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.decrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Decipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  if (!chunk) {
	    return next;
	  }

	  this.push(unpad(this._mode.decrypt(this, chunk)));

	  next();
	};

	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 16) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  if (this.cache.length) {
	    return this.cache;
	  }
	};
	function unpad(last) {
	  var padded = last[15];
	  if (padded === 16) {
	    return;
	  }
	  return last.slice(0, 16 - padded);
	}

	var modelist = {
	  ECB: __webpack_require__(108),
	  CBC: __webpack_require__(109),
	  CFB: __webpack_require__(111),
	  OFB: __webpack_require__(112),
	  CTR: __webpack_require__(113)
	};

	module.exports = function (crypto) {
	  function createDecipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv, true);
	    }
	    return new Decipher(modelist[config.mode], password, iv);
	  }

	  function createDecipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createDecipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createDecipher: createDecipher,
	    createDecipheriv: createDecipheriv
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).Buffer))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var Thrift = __webpack_require__(17);

	exports.MultiplexedProcessor = MultiplexedProcessor;

	function MultiplexedProcessor(stream, options) {
	  this.services = {};
	};

	MultiplexedProcessor.prototype.registerProcessor = function(name, handler) {
	  this.services[name] = handler;
	};

	MultiplexedProcessor.prototype.process = function(inp, out) {
	  var begin = inp.readMessageBegin();

	  if (begin.mtype != Thrift.MessageType.CALL && begin.mtype != Thrift.MessageType.ONEWAY) {
	    throw new Thrift.TException('TMultiplexedProcessor: Unexpected message type');
	  }

	  var p = begin.fname.split(':');
	  var sname = p[0];
	  var fname = p[1];

	  if (! (sname in this.services)) {
	    throw new Thrift.TException('TMultiplexedProcessor: Unknown service: ' + sname);
	  }

	  //construct a proxy object which stubs the readMessageBegin
	  //for the service
	  var inpProxy = {};

	  for (var attr in inp) {
	    inpProxy[attr] = inp[attr];
	  }

	  inpProxy.readMessageBegin = function() {
	    return {
	      fname: fname,
	      mtype: begin.mtype,
	      rseqid: begin.rseqid
	    };
	  };

	  this.services[sname].process(inpProxy, out);
	};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// vim:ts=4:sts=4:sw=4:
	/*!
	 *
	 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
	 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
	 *
	 * With parts by Tyler Close
	 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
	 * at http://www.opensource.org/licenses/mit-license.html
	 * Forked at ref_send.js version: 2009-05-11
	 *
	 * With parts by Mark Miller
	 * Copyright (C) 2011 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */

	(function (definition) {
	    // Turn off strict mode for this function so we can assign to global.Q
	    /* jshint strict: false */

	    // This file will function properly as a <script> tag, or a module
	    // using CommonJS and NodeJS or RequireJS module formats.  In
	    // Common/Node/RequireJS, the module exports the Q API and when
	    // executed as a simple <script>, it creates a Q global instead.

	    // Montage Require
	    if (typeof bootstrap === "function") {
	        bootstrap("promise", definition);

	    // CommonJS
	    } else if (true) {
	        module.exports = definition();

	    // RequireJS
	    } else if (typeof define === "function" && define.amd) {
	        define(definition);

	    // SES (Secure EcmaScript)
	    } else if (typeof ses !== "undefined") {
	        if (!ses.ok()) {
	            return;
	        } else {
	            ses.makeQ = definition;
	        }

	    // <script>
	    } else {
	        Q = definition();
	    }

	})(function () {
	"use strict";

	var hasStacks = false;
	try {
	    throw new Error();
	} catch (e) {
	    hasStacks = !!e.stack;
	}

	// All code after this point will be filtered from stack traces reported
	// by Q.
	var qStartingLine = captureLine();
	var qFileName;

	// shims

	// used for fallback in "allResolved"
	var noop = function () {};

	// Use the fastest possible means to execute a task in a future turn
	// of the event loop.
	var nextTick =(function () {
	    // linked list of tasks (single, with head node)
	    var head = {task: void 0, next: null};
	    var tail = head;
	    var flushing = false;
	    var requestTick = void 0;
	    var isNodeJS = false;

	    function flush() {
	        /* jshint loopfunc: true */

	        while (head.next) {
	            head = head.next;
	            var task = head.task;
	            head.task = void 0;
	            var domain = head.domain;

	            if (domain) {
	                head.domain = void 0;
	                domain.enter();
	            }

	            try {
	                task();

	            } catch (e) {
	                if (isNodeJS) {
	                    // In node, uncaught exceptions are considered fatal errors.
	                    // Re-throw them synchronously to interrupt flushing!

	                    // Ensure continuation if the uncaught exception is suppressed
	                    // listening "uncaughtException" events (as domains does).
	                    // Continue in next event to avoid tick recursion.
	                    if (domain) {
	                        domain.exit();
	                    }
	                    setTimeout(flush, 0);
	                    if (domain) {
	                        domain.enter();
	                    }

	                    throw e;

	                } else {
	                    // In browsers, uncaught exceptions are not fatal.
	                    // Re-throw them asynchronously to avoid slow-downs.
	                    setTimeout(function() {
	                       throw e;
	                    }, 0);
	                }
	            }

	            if (domain) {
	                domain.exit();
	            }
	        }

	        flushing = false;
	    }

	    nextTick = function (task) {
	        tail = tail.next = {
	            task: task,
	            domain: isNodeJS && process.domain,
	            next: null
	        };

	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };

	    if (typeof process !== "undefined" && process.nextTick) {
	        // Node.js before 0.9. Note that some fake-Node environments, like the
	        // Mocha test runner, introduce a `process` global without a `nextTick`.
	        isNodeJS = true;

	        requestTick = function () {
	            process.nextTick(flush);
	        };

	    } else if (typeof setImmediate === "function") {
	        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
	        if (typeof window !== "undefined") {
	            requestTick = setImmediate.bind(window, flush);
	        } else {
	            requestTick = function () {
	                setImmediate(flush);
	            };
	        }

	    } else if (typeof MessageChannel !== "undefined") {
	        // modern browsers
	        // http://www.nonblocking.io/2011/06/windownexttick.html
	        var channel = new MessageChannel();
	        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
	        // working message ports the first time a page loads.
	        channel.port1.onmessage = function () {
	            requestTick = requestPortTick;
	            channel.port1.onmessage = flush;
	            flush();
	        };
	        var requestPortTick = function () {
	            // Opera requires us to provide a message payload, regardless of
	            // whether we use it.
	            channel.port2.postMessage(0);
	        };
	        requestTick = function () {
	            setTimeout(flush, 0);
	            requestPortTick();
	        };

	    } else {
	        // old browsers
	        requestTick = function () {
	            setTimeout(flush, 0);
	        };
	    }

	    return nextTick;
	})();

	// Attempt to make generics safe in the face of downstream
	// modifications.
	// There is no situation where this is necessary.
	// If you need a security guarantee, these primordials need to be
	// deeply frozen anyway, and if you don’t need a security guarantee,
	// this is just plain paranoid.
	// However, this **might** have the nice side-effect of reducing the size of
	// the minified code by reducing x.call() to merely x()
	// See Mark Miller’s explanation of what this does.
	// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
	var call = Function.call;
	function uncurryThis(f) {
	    return function () {
	        return call.apply(f, arguments);
	    };
	}
	// This is equivalent, but slower:
	// uncurryThis = Function_bind.bind(Function_bind.call);
	// http://jsperf.com/uncurrythis

	var array_slice = uncurryThis(Array.prototype.slice);

	var array_reduce = uncurryThis(
	    Array.prototype.reduce || function (callback, basis) {
	        var index = 0,
	            length = this.length;
	        // concerning the initial value, if one is not provided
	        if (arguments.length === 1) {
	            // seek to the first value in the array, accounting
	            // for the possibility that is is a sparse array
	            do {
	                if (index in this) {
	                    basis = this[index++];
	                    break;
	                }
	                if (++index >= length) {
	                    throw new TypeError();
	                }
	            } while (1);
	        }
	        // reduce
	        for (; index < length; index++) {
	            // account for the possibility that the array is sparse
	            if (index in this) {
	                basis = callback(basis, this[index], index);
	            }
	        }
	        return basis;
	    }
	);

	var array_indexOf = uncurryThis(
	    Array.prototype.indexOf || function (value) {
	        // not a very good shim, but good enough for our one use of it
	        for (var i = 0; i < this.length; i++) {
	            if (this[i] === value) {
	                return i;
	            }
	        }
	        return -1;
	    }
	);

	var array_map = uncurryThis(
	    Array.prototype.map || function (callback, thisp) {
	        var self = this;
	        var collect = [];
	        array_reduce(self, function (undefined, value, index) {
	            collect.push(callback.call(thisp, value, index, self));
	        }, void 0);
	        return collect;
	    }
	);

	var object_create = Object.create || function (prototype) {
	    function Type() { }
	    Type.prototype = prototype;
	    return new Type();
	};

	var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

	var object_keys = Object.keys || function (object) {
	    var keys = [];
	    for (var key in object) {
	        if (object_hasOwnProperty(object, key)) {
	            keys.push(key);
	        }
	    }
	    return keys;
	};

	var object_toString = uncurryThis(Object.prototype.toString);

	function isObject(value) {
	    return value === Object(value);
	}

	// generator related shims

	// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
	function isStopIteration(exception) {
	    return (
	        object_toString(exception) === "[object StopIteration]" ||
	        exception instanceof QReturnValue
	    );
	}

	// FIXME: Remove this helper and Q.return once ES6 generators are in
	// SpiderMonkey.
	var QReturnValue;
	if (typeof ReturnValue !== "undefined") {
	    QReturnValue = ReturnValue;
	} else {
	    QReturnValue = function (value) {
	        this.value = value;
	    };
	}

	// long stack traces

	var STACK_JUMP_SEPARATOR = "From previous event:";

	function makeStackTraceLong(error, promise) {
	    // If possible, transform the error stack trace by removing Node and Q
	    // cruft, then concatenating with the stack trace of `promise`. See #57.
	    if (hasStacks &&
	        promise.stack &&
	        typeof error === "object" &&
	        error !== null &&
	        error.stack &&
	        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	    ) {
	        var stacks = [];
	        for (var p = promise; !!p; p = p.source) {
	            if (p.stack) {
	                stacks.unshift(p.stack);
	            }
	        }
	        stacks.unshift(error.stack);

	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	}

	function filterStackString(stackString) {
	    var lines = stackString.split("\n");
	    var desiredLines = [];
	    for (var i = 0; i < lines.length; ++i) {
	        var line = lines[i];

	        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	            desiredLines.push(line);
	        }
	    }
	    return desiredLines.join("\n");
	}

	function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	           stackLine.indexOf("(node.js:") !== -1;
	}

	function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    // In IE10 function name can have spaces ("Anonymous function") O_o
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) {
	        return [attempt1[1], Number(attempt1[2])];
	    }

	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) {
	        return [attempt2[1], Number(attempt2[2])];
	    }

	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) {
	        return [attempt3[1], Number(attempt3[2])];
	    }
	}

	function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

	    if (!fileNameAndLineNumber) {
	        return false;
	    }

	    var fileName = fileNameAndLineNumber[0];
	    var lineNumber = fileNameAndLineNumber[1];

	    return fileName === qFileName &&
	        lineNumber >= qStartingLine &&
	        lineNumber <= qEndingLine;
	}

	// discover own file name and line number range for filtering stack
	// traces
	function captureLine() {
	    if (!hasStacks) {
	        return;
	    }

	    try {
	        throw new Error();
	    } catch (e) {
	        var lines = e.stack.split("\n");
	        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	        if (!fileNameAndLineNumber) {
	            return;
	        }

	        qFileName = fileNameAndLineNumber[0];
	        return fileNameAndLineNumber[1];
	    }
	}

	function deprecate(callback, name, alternative) {
	    return function () {
	        if (typeof console !== "undefined" &&
	            typeof console.warn === "function") {
	            console.warn(name + " is deprecated, use " + alternative +
	                         " instead.", new Error("").stack);
	        }
	        return callback.apply(callback, arguments);
	    };
	}

	// end of shims
	// beginning of real work

	/**
	 * Constructs a promise for an immediate reference, passes promises through, or
	 * coerces promises from different systems.
	 * @param value immediate reference or promise
	 */
	function Q(value) {
	    // If the object is already a Promise, return it directly.  This enables
	    // the resolve function to both be used to created references from objects,
	    // but to tolerably coerce non-promises to promises.
	    if (isPromise(value)) {
	        return value;
	    }

	    // assimilate thenables
	    if (isPromiseAlike(value)) {
	        return coerce(value);
	    } else {
	        return fulfill(value);
	    }
	}
	Q.resolve = Q;

	/**
	 * Performs a task in a future turn of the event loop.
	 * @param {Function} task
	 */
	Q.nextTick = nextTick;

	/**
	 * Controls whether or not long stack traces will be on
	 */
	Q.longStackSupport = false;

	/**
	 * Constructs a {promise, resolve, reject} object.
	 *
	 * `resolve` is a callback to invoke with a more resolved value for the
	 * promise. To fulfill the promise, invoke `resolve` with any value that is
	 * not a thenable. To reject the promise, invoke `resolve` with a rejected
	 * thenable, or invoke `reject` with the reason directly. To resolve the
	 * promise to another thenable, thus putting it in the same state, invoke
	 * `resolve` with that other thenable.
	 */
	Q.defer = defer;
	function defer() {
	    // if "messages" is an "Array", that indicates that the promise has not yet
	    // been resolved.  If it is "undefined", it has been resolved.  Each
	    // element of the messages array is itself an array of complete arguments to
	    // forward to the resolved promise.  We coerce the resolution value to a
	    // promise using the `resolve` function because it handles both fully
	    // non-thenable values and other thenables gracefully.
	    var messages = [], progressListeners = [], resolvedPromise;

	    var deferred = object_create(defer.prototype);
	    var promise = object_create(Promise.prototype);

	    promise.promiseDispatch = function (resolve, op, operands) {
	        var args = array_slice(arguments);
	        if (messages) {
	            messages.push(args);
	            if (op === "when" && operands[1]) { // progress operand
	                progressListeners.push(operands[1]);
	            }
	        } else {
	            nextTick(function () {
	                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
	            });
	        }
	    };

	    // XXX deprecated
	    promise.valueOf = function () {
	        if (messages) {
	            return promise;
	        }
	        var nearerValue = nearer(resolvedPromise);
	        if (isPromise(nearerValue)) {
	            resolvedPromise = nearerValue; // shorten chain
	        }
	        return nearerValue;
	    };

	    promise.inspect = function () {
	        if (!resolvedPromise) {
	            return { state: "pending" };
	        }
	        return resolvedPromise.inspect();
	    };

	    if (Q.longStackSupport && hasStacks) {
	        try {
	            throw new Error();
	        } catch (e) {
	            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
	            // accessor around; that causes memory leaks as per GH-111. Just
	            // reify the stack trace as a string ASAP.
	            //
	            // At the same time, cut off the first line; it's always just
	            // "[object Promise]\n", as per the `toString`.
	            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	    }

	    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
	    // consolidating them into `become`, since otherwise we'd create new
	    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

	    function become(newPromise) {
	        resolvedPromise = newPromise;
	        promise.source = newPromise;

	        array_reduce(messages, function (undefined, message) {
	            nextTick(function () {
	                newPromise.promiseDispatch.apply(newPromise, message);
	            });
	        }, void 0);

	        messages = void 0;
	        progressListeners = void 0;
	    }

	    deferred.promise = promise;
	    deferred.resolve = function (value) {
	        if (resolvedPromise) {
	            return;
	        }

	        become(Q(value));
	    };

	    deferred.fulfill = function (value) {
	        if (resolvedPromise) {
	            return;
	        }

	        become(fulfill(value));
	    };
	    deferred.reject = function (reason) {
	        if (resolvedPromise) {
	            return;
	        }

	        become(reject(reason));
	    };
	    deferred.notify = function (progress) {
	        if (resolvedPromise) {
	            return;
	        }

	        array_reduce(progressListeners, function (undefined, progressListener) {
	            nextTick(function () {
	                progressListener(progress);
	            });
	        }, void 0);
	    };

	    return deferred;
	}

	/**
	 * Creates a Node-style callback that will resolve or reject the deferred
	 * promise.
	 * @returns a nodeback
	 */
	defer.prototype.makeNodeResolver = function () {
	    var self = this;
	    return function (error, value) {
	        if (error) {
	            self.reject(error);
	        } else if (arguments.length > 2) {
	            self.resolve(array_slice(arguments, 1));
	        } else {
	            self.resolve(value);
	        }
	    };
	};

	/**
	 * @param resolver {Function} a function that returns nothing and accepts
	 * the resolve, reject, and notify functions for a deferred.
	 * @returns a promise that may be resolved with the given resolve and reject
	 * functions, or rejected by a thrown exception in resolver
	 */
	Q.Promise = promise; // ES6
	Q.promise = promise;
	function promise(resolver) {
	    if (typeof resolver !== "function") {
	        throw new TypeError("resolver must be a function.");
	    }
	    var deferred = defer();
	    try {
	        resolver(deferred.resolve, deferred.reject, deferred.notify);
	    } catch (reason) {
	        deferred.reject(reason);
	    }
	    return deferred.promise;
	}

	promise.race = race; // ES6
	promise.all = all; // ES6
	promise.reject = reject; // ES6
	promise.resolve = Q; // ES6

	// XXX experimental.  This method is a way to denote that a local value is
	// serializable and should be immediately dispatched to a remote upon request,
	// instead of passing a reference.
	Q.passByCopy = function (object) {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return object;
	};

	Promise.prototype.passByCopy = function () {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return this;
	};

	/**
	 * If two promises eventually fulfill to the same value, promises that value,
	 * but otherwise rejects.
	 * @param x {Any*}
	 * @param y {Any*}
	 * @returns {Any*} a promise for x and y if they are the same, but a rejection
	 * otherwise.
	 *
	 */
	Q.join = function (x, y) {
	    return Q(x).join(y);
	};

	Promise.prototype.join = function (that) {
	    return Q([this, that]).spread(function (x, y) {
	        if (x === y) {
	            // TODO: "===" should be Object.is or equiv
	            return x;
	        } else {
	            throw new Error("Can't join: not the same: " + x + " " + y);
	        }
	    });
	};

	/**
	 * Returns a promise for the first of an array of promises to become fulfilled.
	 * @param answers {Array[Any*]} promises to race
	 * @returns {Any*} the first promise to be fulfilled
	 */
	Q.race = race;
	function race(answerPs) {
	    return promise(function(resolve, reject) {
	        // Switch to this once we can assume at least ES5
	        // answerPs.forEach(function(answerP) {
	        //     Q(answerP).then(resolve, reject);
	        // });
	        // Use this in the meantime
	        for (var i = 0, len = answerPs.length; i < len; i++) {
	            Q(answerPs[i]).then(resolve, reject);
	        }
	    });
	}

	Promise.prototype.race = function () {
	    return this.then(Q.race);
	};

	/**
	 * Constructs a Promise with a promise descriptor object and optional fallback
	 * function.  The descriptor contains methods like when(rejected), get(name),
	 * set(name, value), post(name, args), and delete(name), which all
	 * return either a value, a promise for a value, or a rejection.  The fallback
	 * accepts the operation name, a resolver, and any further arguments that would
	 * have been forwarded to the appropriate method above had a method been
	 * provided with the proper name.  The API makes no guarantees about the nature
	 * of the returned object, apart from that it is usable whereever promises are
	 * bought and sold.
	 */
	Q.makePromise = Promise;
	function Promise(descriptor, fallback, inspect) {
	    if (fallback === void 0) {
	        fallback = function (op) {
	            return reject(new Error(
	                "Promise does not support operation: " + op
	            ));
	        };
	    }
	    if (inspect === void 0) {
	        inspect = function () {
	            return {state: "unknown"};
	        };
	    }

	    var promise = object_create(Promise.prototype);

	    promise.promiseDispatch = function (resolve, op, args) {
	        var result;
	        try {
	            if (descriptor[op]) {
	                result = descriptor[op].apply(promise, args);
	            } else {
	                result = fallback.call(promise, op, args);
	            }
	        } catch (exception) {
	            result = reject(exception);
	        }
	        if (resolve) {
	            resolve(result);
	        }
	    };

	    promise.inspect = inspect;

	    // XXX deprecated `valueOf` and `exception` support
	    if (inspect) {
	        var inspected = inspect();
	        if (inspected.state === "rejected") {
	            promise.exception = inspected.reason;
	        }

	        promise.valueOf = function () {
	            var inspected = inspect();
	            if (inspected.state === "pending" ||
	                inspected.state === "rejected") {
	                return promise;
	            }
	            return inspected.value;
	        };
	    }

	    return promise;
	}

	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};

	Promise.prototype.then = function (fulfilled, rejected, progressed) {
	    var self = this;
	    var deferred = defer();
	    var done = false;   // ensure the untrusted promise makes at most a
	                        // single call to one of the callbacks

	    function _fulfilled(value) {
	        try {
	            return typeof fulfilled === "function" ? fulfilled(value) : value;
	        } catch (exception) {
	            return reject(exception);
	        }
	    }

	    function _rejected(exception) {
	        if (typeof rejected === "function") {
	            makeStackTraceLong(exception, self);
	            try {
	                return rejected(exception);
	            } catch (newException) {
	                return reject(newException);
	            }
	        }
	        return reject(exception);
	    }

	    function _progressed(value) {
	        return typeof progressed === "function" ? progressed(value) : value;
	    }

	    nextTick(function () {
	        self.promiseDispatch(function (value) {
	            if (done) {
	                return;
	            }
	            done = true;

	            deferred.resolve(_fulfilled(value));
	        }, "when", [function (exception) {
	            if (done) {
	                return;
	            }
	            done = true;

	            deferred.resolve(_rejected(exception));
	        }]);
	    });

	    // Progress propagator need to be attached in the current tick.
	    self.promiseDispatch(void 0, "when", [void 0, function (value) {
	        var newValue;
	        var threw = false;
	        try {
	            newValue = _progressed(value);
	        } catch (e) {
	            threw = true;
	            if (Q.onerror) {
	                Q.onerror(e);
	            } else {
	                throw e;
	            }
	        }

	        if (!threw) {
	            deferred.notify(newValue);
	        }
	    }]);

	    return deferred.promise;
	};

	/**
	 * Registers an observer on a promise.
	 *
	 * Guarantees:
	 *
	 * 1. that fulfilled and rejected will be called only once.
	 * 2. that either the fulfilled callback or the rejected callback will be
	 *    called, but not both.
	 * 3. that fulfilled and rejected will not be called in this turn.
	 *
	 * @param value      promise or immediate reference to observe
	 * @param fulfilled  function to be called with the fulfilled value
	 * @param rejected   function to be called with the rejection exception
	 * @param progressed function to be called on any progress notifications
	 * @return promise for the return value from the invoked callback
	 */
	Q.when = when;
	function when(value, fulfilled, rejected, progressed) {
	    return Q(value).then(fulfilled, rejected, progressed);
	}

	Promise.prototype.thenResolve = function (value) {
	    return this.then(function () { return value; });
	};

	Q.thenResolve = function (promise, value) {
	    return Q(promise).thenResolve(value);
	};

	Promise.prototype.thenReject = function (reason) {
	    return this.then(function () { throw reason; });
	};

	Q.thenReject = function (promise, reason) {
	    return Q(promise).thenReject(reason);
	};

	/**
	 * If an object is not a promise, it is as "near" as possible.
	 * If a promise is rejected, it is as "near" as possible too.
	 * If it’s a fulfilled promise, the fulfillment value is nearer.
	 * If it’s a deferred promise and the deferred has been resolved, the
	 * resolution is "nearer".
	 * @param object
	 * @returns most resolved (nearest) form of the object
	 */

	// XXX should we re-do this?
	Q.nearer = nearer;
	function nearer(value) {
	    if (isPromise(value)) {
	        var inspected = value.inspect();
	        if (inspected.state === "fulfilled") {
	            return inspected.value;
	        }
	    }
	    return value;
	}

	/**
	 * @returns whether the given object is a promise.
	 * Otherwise it is a fulfilled value.
	 */
	Q.isPromise = isPromise;
	function isPromise(object) {
	    return isObject(object) &&
	        typeof object.promiseDispatch === "function" &&
	        typeof object.inspect === "function";
	}

	Q.isPromiseAlike = isPromiseAlike;
	function isPromiseAlike(object) {
	    return isObject(object) && typeof object.then === "function";
	}

	/**
	 * @returns whether the given object is a pending promise, meaning not
	 * fulfilled or rejected.
	 */
	Q.isPending = isPending;
	function isPending(object) {
	    return isPromise(object) && object.inspect().state === "pending";
	}

	Promise.prototype.isPending = function () {
	    return this.inspect().state === "pending";
	};

	/**
	 * @returns whether the given object is a value or fulfilled
	 * promise.
	 */
	Q.isFulfilled = isFulfilled;
	function isFulfilled(object) {
	    return !isPromise(object) || object.inspect().state === "fulfilled";
	}

	Promise.prototype.isFulfilled = function () {
	    return this.inspect().state === "fulfilled";
	};

	/**
	 * @returns whether the given object is a rejected promise.
	 */
	Q.isRejected = isRejected;
	function isRejected(object) {
	    return isPromise(object) && object.inspect().state === "rejected";
	}

	Promise.prototype.isRejected = function () {
	    return this.inspect().state === "rejected";
	};

	//// BEGIN UNHANDLED REJECTION TRACKING

	// This promise library consumes exceptions thrown in handlers so they can be
	// handled by a subsequent promise.  The exceptions get added to this array when
	// they are created, and removed when they are handled.  Note that in ES6 or
	// shimmed environments, this would naturally be a `Set`.
	var unhandledReasons = [];
	var unhandledRejections = [];
	var trackUnhandledRejections = true;

	function resetUnhandledRejections() {
	    unhandledReasons.length = 0;
	    unhandledRejections.length = 0;

	    if (!trackUnhandledRejections) {
	        trackUnhandledRejections = true;
	    }
	}

	function trackRejection(promise, reason) {
	    if (!trackUnhandledRejections) {
	        return;
	    }

	    unhandledRejections.push(promise);
	    if (reason && typeof reason.stack !== "undefined") {
	        unhandledReasons.push(reason.stack);
	    } else {
	        unhandledReasons.push("(no stack) " + reason);
	    }
	}

	function untrackRejection(promise) {
	    if (!trackUnhandledRejections) {
	        return;
	    }

	    var at = array_indexOf(unhandledRejections, promise);
	    if (at !== -1) {
	        unhandledRejections.splice(at, 1);
	        unhandledReasons.splice(at, 1);
	    }
	}

	Q.resetUnhandledRejections = resetUnhandledRejections;

	Q.getUnhandledReasons = function () {
	    // Make a copy so that consumers can't interfere with our internal state.
	    return unhandledReasons.slice();
	};

	Q.stopUnhandledRejectionTracking = function () {
	    resetUnhandledRejections();
	    trackUnhandledRejections = false;
	};

	resetUnhandledRejections();

	//// END UNHANDLED REJECTION TRACKING

	/**
	 * Constructs a rejected promise.
	 * @param reason value describing the failure
	 */
	Q.reject = reject;
	function reject(reason) {
	    var rejection = Promise({
	        "when": function (rejected) {
	            // note that the error has been handled
	            if (rejected) {
	                untrackRejection(this);
	            }
	            return rejected ? rejected(reason) : this;
	        }
	    }, function fallback() {
	        return this;
	    }, function inspect() {
	        return { state: "rejected", reason: reason };
	    });

	    // Note that the reason has not been handled.
	    trackRejection(rejection, reason);

	    return rejection;
	}

	/**
	 * Constructs a fulfilled promise for an immediate reference.
	 * @param value immediate reference
	 */
	Q.fulfill = fulfill;
	function fulfill(value) {
	    return Promise({
	        "when": function () {
	            return value;
	        },
	        "get": function (name) {
	            return value[name];
	        },
	        "set": function (name, rhs) {
	            value[name] = rhs;
	        },
	        "delete": function (name) {
	            delete value[name];
	        },
	        "post": function (name, args) {
	            // Mark Miller proposes that post with no name should apply a
	            // promised function.
	            if (name === null || name === void 0) {
	                return value.apply(void 0, args);
	            } else {
	                return value[name].apply(value, args);
	            }
	        },
	        "apply": function (thisp, args) {
	            return value.apply(thisp, args);
	        },
	        "keys": function () {
	            return object_keys(value);
	        }
	    }, void 0, function inspect() {
	        return { state: "fulfilled", value: value };
	    });
	}

	/**
	 * Converts thenables to Q promises.
	 * @param promise thenable promise
	 * @returns a Q promise
	 */
	function coerce(promise) {
	    var deferred = defer();
	    nextTick(function () {
	        try {
	            promise.then(deferred.resolve, deferred.reject, deferred.notify);
	        } catch (exception) {
	            deferred.reject(exception);
	        }
	    });
	    return deferred.promise;
	}

	/**
	 * Annotates an object such that it will never be
	 * transferred away from this process over any promise
	 * communication channel.
	 * @param object
	 * @returns promise a wrapping of that object that
	 * additionally responds to the "isDef" message
	 * without a rejection.
	 */
	Q.master = master;
	function master(object) {
	    return Promise({
	        "isDef": function () {}
	    }, function fallback(op, args) {
	        return dispatch(object, op, args);
	    }, function () {
	        return Q(object).inspect();
	    });
	}

	/**
	 * Spreads the values of a promised array of arguments into the
	 * fulfillment callback.
	 * @param fulfilled callback that receives variadic arguments from the
	 * promised array
	 * @param rejected callback that receives the exception if the promise
	 * is rejected.
	 * @returns a promise for the return value or thrown exception of
	 * either callback.
	 */
	Q.spread = spread;
	function spread(value, fulfilled, rejected) {
	    return Q(value).spread(fulfilled, rejected);
	}

	Promise.prototype.spread = function (fulfilled, rejected) {
	    return this.all().then(function (array) {
	        return fulfilled.apply(void 0, array);
	    }, rejected);
	};

	/**
	 * The async function is a decorator for generator functions, turning
	 * them into asynchronous generators.  Although generators are only part
	 * of the newest ECMAScript 6 drafts, this code does not cause syntax
	 * errors in older engines.  This code should continue to work and will
	 * in fact improve over time as the language improves.
	 *
	 * ES6 generators are currently part of V8 version 3.19 with the
	 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
	 * for longer, but under an older Python-inspired form.  This function
	 * works on both kinds of generators.
	 *
	 * Decorates a generator function such that:
	 *  - it may yield promises
	 *  - execution will continue when that promise is fulfilled
	 *  - the value of the yield expression will be the fulfilled value
	 *  - it returns a promise for the return value (when the generator
	 *    stops iterating)
	 *  - the decorated function returns a promise for the return value
	 *    of the generator or the first rejected promise among those
	 *    yielded.
	 *  - if an error is thrown in the generator, it propagates through
	 *    every following yield until it is caught, or until it escapes
	 *    the generator function altogether, and is translated into a
	 *    rejection for the promise returned by the decorated generator.
	 */
	Q.async = async;
	function async(makeGenerator) {
	    return function () {
	        // when verb is "send", arg is a value
	        // when verb is "throw", arg is an exception
	        function continuer(verb, arg) {
	            var result;

	            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
	            // engine that has a deployed base of browsers that support generators.
	            // However, SM's generators use the Python-inspired semantics of
	            // outdated ES6 drafts.  We would like to support ES6, but we'd also
	            // like to make it possible to use generators in deployed browsers, so
	            // we also support Python-style generators.  At some point we can remove
	            // this block.

	            if (typeof StopIteration === "undefined") {
	                // ES6 Generators
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    return reject(exception);
	                }
	                if (result.done) {
	                    return result.value;
	                } else {
	                    return when(result.value, callback, errback);
	                }
	            } else {
	                // SpiderMonkey Generators
	                // FIXME: Remove this case when SM does ES6 generators.
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    if (isStopIteration(exception)) {
	                        return exception.value;
	                    } else {
	                        return reject(exception);
	                    }
	                }
	                return when(result, callback, errback);
	            }
	        }
	        var generator = makeGenerator.apply(this, arguments);
	        var callback = continuer.bind(continuer, "next");
	        var errback = continuer.bind(continuer, "throw");
	        return callback();
	    };
	}

	/**
	 * The spawn function is a small wrapper around async that immediately
	 * calls the generator and also ends the promise chain, so that any
	 * unhandled errors are thrown instead of forwarded to the error
	 * handler. This is useful because it's extremely common to run
	 * generators at the top-level to work with libraries.
	 */
	Q.spawn = spawn;
	function spawn(makeGenerator) {
	    Q.done(Q.async(makeGenerator)());
	}

	// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
	/**
	 * Throws a ReturnValue exception to stop an asynchronous generator.
	 *
	 * This interface is a stop-gap measure to support generator return
	 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
	 * generators like Chromium 29, just use "return" in your generator
	 * functions.
	 *
	 * @param value the return value for the surrounding generator
	 * @throws ReturnValue exception with the value.
	 * @example
	 * // ES6 style
	 * Q.async(function* () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      return foo + bar;
	 * })
	 * // Older SpiderMonkey style
	 * Q.async(function () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      Q.return(foo + bar);
	 * })
	 */
	Q["return"] = _return;
	function _return(value) {
	    throw new QReturnValue(value);
	}

	/**
	 * The promised function decorator ensures that any promise arguments
	 * are settled and passed as values (`this` is also settled and passed
	 * as a value).  It will also ensure that the result of a function is
	 * always a promise.
	 *
	 * @example
	 * var add = Q.promised(function (a, b) {
	 *     return a + b;
	 * });
	 * add(Q(a), Q(B));
	 *
	 * @param {function} callback The function to decorate
	 * @returns {function} a function that has been decorated.
	 */
	Q.promised = promised;
	function promised(callback) {
	    return function () {
	        return spread([this, all(arguments)], function (self, args) {
	            return callback.apply(self, args);
	        });
	    };
	}

	/**
	 * sends a message to a value in a future turn
	 * @param object* the recipient
	 * @param op the name of the message operation, e.g., "when",
	 * @param args further arguments to be forwarded to the operation
	 * @returns result {Promise} a promise for the result of the operation
	 */
	Q.dispatch = dispatch;
	function dispatch(object, op, args) {
	    return Q(object).dispatch(op, args);
	}

	Promise.prototype.dispatch = function (op, args) {
	    var self = this;
	    var deferred = defer();
	    nextTick(function () {
	        self.promiseDispatch(deferred.resolve, op, args);
	    });
	    return deferred.promise;
	};

	/**
	 * Gets the value of a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to get
	 * @return promise for the property value
	 */
	Q.get = function (object, key) {
	    return Q(object).dispatch("get", [key]);
	};

	Promise.prototype.get = function (key) {
	    return this.dispatch("get", [key]);
	};

	/**
	 * Sets the value of a property in a future turn.
	 * @param object    promise or immediate reference for object object
	 * @param name      name of property to set
	 * @param value     new value of property
	 * @return promise for the return value
	 */
	Q.set = function (object, key, value) {
	    return Q(object).dispatch("set", [key, value]);
	};

	Promise.prototype.set = function (key, value) {
	    return this.dispatch("set", [key, value]);
	};

	/**
	 * Deletes a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to delete
	 * @return promise for the return value
	 */
	Q.del = // XXX legacy
	Q["delete"] = function (object, key) {
	    return Q(object).dispatch("delete", [key]);
	};

	Promise.prototype.del = // XXX legacy
	Promise.prototype["delete"] = function (key) {
	    return this.dispatch("delete", [key]);
	};

	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param value     a value to post, typically an array of
	 *                  invocation arguments for promises that
	 *                  are ultimately backed with `resolve` values,
	 *                  as opposed to those backed with URLs
	 *                  wherein the posted value can be any
	 *                  JSON serializable object.
	 * @return promise for the return value
	 */
	// bound locally because it is used by other methods
	Q.mapply = // XXX As proposed by "Redsandro"
	Q.post = function (object, name, args) {
	    return Q(object).dispatch("post", [name, args]);
	};

	Promise.prototype.mapply = // XXX As proposed by "Redsandro"
	Promise.prototype.post = function (name, args) {
	    return this.dispatch("post", [name, args]);
	};

	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param ...args   array of invocation arguments
	 * @return promise for the return value
	 */
	Q.send = // XXX Mark Miller's proposed parlance
	Q.mcall = // XXX As proposed by "Redsandro"
	Q.invoke = function (object, name /*...args*/) {
	    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
	};

	Promise.prototype.send = // XXX Mark Miller's proposed parlance
	Promise.prototype.mcall = // XXX As proposed by "Redsandro"
	Promise.prototype.invoke = function (name /*...args*/) {
	    return this.dispatch("post", [name, array_slice(arguments, 1)]);
	};

	/**
	 * Applies the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param args      array of application arguments
	 */
	Q.fapply = function (object, args) {
	    return Q(object).dispatch("apply", [void 0, args]);
	};

	Promise.prototype.fapply = function (args) {
	    return this.dispatch("apply", [void 0, args]);
	};

	/**
	 * Calls the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q["try"] =
	Q.fcall = function (object /* ...args*/) {
	    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
	};

	Promise.prototype.fcall = function (/*...args*/) {
	    return this.dispatch("apply", [void 0, array_slice(arguments)]);
	};

	/**
	 * Binds the promised function, transforming return values into a fulfilled
	 * promise and thrown errors into a rejected one.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q.fbind = function (object /*...args*/) {
	    var promise = Q(object);
	    var args = array_slice(arguments, 1);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	Promise.prototype.fbind = function (/*...args*/) {
	    var promise = this;
	    var args = array_slice(arguments);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};

	/**
	 * Requests the names of the owned properties of a promised
	 * object in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @return promise for the keys of the eventually settled object
	 */
	Q.keys = function (object) {
	    return Q(object).dispatch("keys", []);
	};

	Promise.prototype.keys = function () {
	    return this.dispatch("keys", []);
	};

	/**
	 * Turns an array of promises into a promise for an array.  If any of
	 * the promises gets rejected, the whole array is rejected immediately.
	 * @param {Array*} an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns a promise for an array of the corresponding values
	 */
	// By Mark Miller
	// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
	Q.all = all;
	function all(promises) {
	    return when(promises, function (promises) {
	        var countDown = 0;
	        var deferred = defer();
	        array_reduce(promises, function (undefined, promise, index) {
	            var snapshot;
	            if (
	                isPromise(promise) &&
	                (snapshot = promise.inspect()).state === "fulfilled"
	            ) {
	                promises[index] = snapshot.value;
	            } else {
	                ++countDown;
	                when(
	                    promise,
	                    function (value) {
	                        promises[index] = value;
	                        if (--countDown === 0) {
	                            deferred.resolve(promises);
	                        }
	                    },
	                    deferred.reject,
	                    function (progress) {
	                        deferred.notify({ index: index, value: progress });
	                    }
	                );
	            }
	        }, void 0);
	        if (countDown === 0) {
	            deferred.resolve(promises);
	        }
	        return deferred.promise;
	    });
	}

	Promise.prototype.all = function () {
	    return all(this);
	};

	/**
	 * Waits for all promises to be settled, either fulfilled or
	 * rejected.  This is distinct from `all` since that would stop
	 * waiting at the first rejection.  The promise returned by
	 * `allResolved` will never be rejected.
	 * @param promises a promise for an array (or an array) of promises
	 * (or values)
	 * @return a promise for an array of promises
	 */
	Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
	function allResolved(promises) {
	    return when(promises, function (promises) {
	        promises = array_map(promises, Q);
	        return when(all(array_map(promises, function (promise) {
	            return when(promise, noop, noop);
	        })), function () {
	            return promises;
	        });
	    });
	}

	Promise.prototype.allResolved = function () {
	    return allResolved(this);
	};

	/**
	 * @see Promise#allSettled
	 */
	Q.allSettled = allSettled;
	function allSettled(promises) {
	    return Q(promises).allSettled();
	}

	/**
	 * Turns an array of promises into a promise for an array of their states (as
	 * returned by `inspect`) when they have all settled.
	 * @param {Array[Any*]} values an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns {Array[State]} an array of states for the respective values.
	 */
	Promise.prototype.allSettled = function () {
	    return this.then(function (promises) {
	        return all(array_map(promises, function (promise) {
	            promise = Q(promise);
	            function regardless() {
	                return promise.inspect();
	            }
	            return promise.then(regardless, regardless);
	        }));
	    });
	};

	/**
	 * Captures the failure of a promise, giving an oportunity to recover
	 * with a callback.  If the given promise is fulfilled, the returned
	 * promise is fulfilled.
	 * @param {Any*} promise for something
	 * @param {Function} callback to fulfill the returned promise if the
	 * given promise is rejected
	 * @returns a promise for the return value of the callback
	 */
	Q.fail = // XXX legacy
	Q["catch"] = function (object, rejected) {
	    return Q(object).then(void 0, rejected);
	};

	Promise.prototype.fail = // XXX legacy
	Promise.prototype["catch"] = function (rejected) {
	    return this.then(void 0, rejected);
	};

	/**
	 * Attaches a listener that can respond to progress notifications from a
	 * promise's originating deferred. This listener receives the exact arguments
	 * passed to ``deferred.notify``.
	 * @param {Any*} promise for something
	 * @param {Function} callback to receive any progress notifications
	 * @returns the given promise, unchanged
	 */
	Q.progress = progress;
	function progress(object, progressed) {
	    return Q(object).then(void 0, void 0, progressed);
	}

	Promise.prototype.progress = function (progressed) {
	    return this.then(void 0, void 0, progressed);
	};

	/**
	 * Provides an opportunity to observe the settling of a promise,
	 * regardless of whether the promise is fulfilled or rejected.  Forwards
	 * the resolution to the returned promise when the callback is done.
	 * The callback can return a promise to defer completion.
	 * @param {Any*} promise
	 * @param {Function} callback to observe the resolution of the given
	 * promise, takes no arguments.
	 * @returns a promise for the resolution of the given promise when
	 * ``fin`` is done.
	 */
	Q.fin = // XXX legacy
	Q["finally"] = function (object, callback) {
	    return Q(object)["finally"](callback);
	};

	Promise.prototype.fin = // XXX legacy
	Promise.prototype["finally"] = function (callback) {
	    callback = Q(callback);
	    return this.then(function (value) {
	        return callback.fcall().then(function () {
	            return value;
	        });
	    }, function (reason) {
	        // TODO attempt to recycle the rejection with "this".
	        return callback.fcall().then(function () {
	            throw reason;
	        });
	    });
	};

	/**
	 * Terminates a chain of promises, forcing rejections to be
	 * thrown as exceptions.
	 * @param {Any*} promise at the end of a chain of promises
	 * @returns nothing
	 */
	Q.done = function (object, fulfilled, rejected, progress) {
	    return Q(object).done(fulfilled, rejected, progress);
	};

	Promise.prototype.done = function (fulfilled, rejected, progress) {
	    var onUnhandledError = function (error) {
	        // forward to a future turn so that ``when``
	        // does not catch it and turn it into a rejection.
	        nextTick(function () {
	            makeStackTraceLong(error, promise);
	            if (Q.onerror) {
	                Q.onerror(error);
	            } else {
	                throw error;
	            }
	        });
	    };

	    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
	    var promise = fulfilled || rejected || progress ?
	        this.then(fulfilled, rejected, progress) :
	        this;

	    if (typeof process === "object" && process && process.domain) {
	        onUnhandledError = process.domain.bind(onUnhandledError);
	    }

	    promise.then(void 0, onUnhandledError);
	};

	/**
	 * Causes a promise to be rejected if it does not get fulfilled before
	 * some milliseconds time out.
	 * @param {Any*} promise
	 * @param {Number} milliseconds timeout
	 * @param {String} custom error message (optional)
	 * @returns a promise for the resolution of the given promise if it is
	 * fulfilled before the timeout, otherwise rejected.
	 */
	Q.timeout = function (object, ms, message) {
	    return Q(object).timeout(ms, message);
	};

	Promise.prototype.timeout = function (ms, message) {
	    var deferred = defer();
	    var timeoutId = setTimeout(function () {
	        deferred.reject(new Error(message || "Timed out after " + ms + " ms"));
	    }, ms);

	    this.then(function (value) {
	        clearTimeout(timeoutId);
	        deferred.resolve(value);
	    }, function (exception) {
	        clearTimeout(timeoutId);
	        deferred.reject(exception);
	    }, deferred.notify);

	    return deferred.promise;
	};

	/**
	 * Returns a promise for the given value (or promised value), some
	 * milliseconds after it resolved. Passes rejections immediately.
	 * @param {Any*} promise
	 * @param {Number} milliseconds
	 * @returns a promise for the resolution of the given promise after milliseconds
	 * time has elapsed since the resolution of the given promise.
	 * If the given promise rejects, that is passed immediately.
	 */
	Q.delay = function (object, timeout) {
	    if (timeout === void 0) {
	        timeout = object;
	        object = void 0;
	    }
	    return Q(object).delay(timeout);
	};

	Promise.prototype.delay = function (timeout) {
	    return this.then(function (value) {
	        var deferred = defer();
	        setTimeout(function () {
	            deferred.resolve(value);
	        }, timeout);
	        return deferred.promise;
	    });
	};

	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided as an array, and returns a promise.
	 *
	 *      Q.nfapply(FS.readFile, [__filename])
	 *      .then(function (content) {
	 *      })
	 *
	 */
	Q.nfapply = function (callback, args) {
	    return Q(callback).nfapply(args);
	};

	Promise.prototype.nfapply = function (args) {
	    var deferred = defer();
	    var nodeArgs = array_slice(args);
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};

	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided individually, and returns a promise.
	 * @example
	 * Q.nfcall(FS.readFile, __filename)
	 * .then(function (content) {
	 * })
	 *
	 */
	Q.nfcall = function (callback /*...args*/) {
	    var args = array_slice(arguments, 1);
	    return Q(callback).nfapply(args);
	};

	Promise.prototype.nfcall = function (/*...args*/) {
	    var nodeArgs = array_slice(arguments);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};

	/**
	 * Wraps a NodeJS continuation passing function and returns an equivalent
	 * version that returns a promise.
	 * @example
	 * Q.nfbind(FS.readFile, __filename)("utf-8")
	 * .then(console.log)
	 * .done()
	 */
	Q.nfbind =
	Q.denodeify = function (callback /*...args*/) {
	    var baseArgs = array_slice(arguments, 1);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        Q(callback).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};

	Promise.prototype.nfbind =
	Promise.prototype.denodeify = function (/*...args*/) {
	    var args = array_slice(arguments);
	    args.unshift(this);
	    return Q.denodeify.apply(void 0, args);
	};

	Q.nbind = function (callback, thisp /*...args*/) {
	    var baseArgs = array_slice(arguments, 2);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        function bound() {
	            return callback.apply(thisp, arguments);
	        }
	        Q(bound).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};

	Promise.prototype.nbind = function (/*thisp, ...args*/) {
	    var args = array_slice(arguments, 0);
	    args.unshift(this);
	    return Q.nbind.apply(void 0, args);
	};

	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback with a given array of arguments, plus a provided callback.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param {Array} args arguments to pass to the method; the callback
	 * will be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nmapply = // XXX As proposed by "Redsandro"
	Q.npost = function (object, name, args) {
	    return Q(object).npost(name, args);
	};

	Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
	Promise.prototype.npost = function (name, args) {
	    var nodeArgs = array_slice(args || []);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};

	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback, forwarding the given variadic arguments, plus a provided
	 * callback argument.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param ...args arguments to pass to the method; the callback will
	 * be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nsend = // XXX Based on Mark Miller's proposed "send"
	Q.nmcall = // XXX Based on "Redsandro's" proposal
	Q.ninvoke = function (object, name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 2);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};

	Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
	Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
	Promise.prototype.ninvoke = function (name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 1);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};

	/**
	 * If a function would like to support both Node continuation-passing-style and
	 * promise-returning-style, it can end its internal promise chain with
	 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
	 * elects to use a nodeback, the result will be sent there.  If they do not
	 * pass a nodeback, they will receive the result promise.
	 * @param object a result (or a promise for a result)
	 * @param {Function} nodeback a Node.js-style callback
	 * @returns either the promise or nothing
	 */
	Q.nodeify = nodeify;
	function nodeify(object, nodeback) {
	    return Q(object).nodeify(nodeback);
	}

	Promise.prototype.nodeify = function (nodeback) {
	    if (nodeback) {
	        this.then(function (value) {
	            nextTick(function () {
	                nodeback(null, value);
	            });
	        }, function (error) {
	            nextTick(function () {
	                nodeback(error);
	            });
	        });
	    } else {
	        return this;
	    }
	};

	// All code before this point will be filtered from stack traces.
	var qEndingLine = captureLine();

	return Q;

	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19), __webpack_require__(52).setImmediate))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(18);
	var Thrift = __webpack_require__(17);

	exports.Multiplexer = Multiplexer;

	function Wrapper(serviceName, protocol, connection) {

	  function MultiplexProtocol(trans, strictRead, strictWrite) {
	    protocol.call(this, trans, strictRead, strictWrite);
	  };

	  util.inherits(MultiplexProtocol, protocol);

	  MultiplexProtocol.prototype.writeMessageBegin = function(name, type, seqid) {
	    if (type == Thrift.MessageType.CALL || type == Thrift.MessageType.ONEWAY) {
	      connection.seqId2Service[seqid] = serviceName;
	      MultiplexProtocol.super_.prototype.writeMessageBegin.call(this,
	                                                                serviceName + ":" + name,
	                                                                type,
	                                                                seqid);
	    } else {
	      MultiplexProtocol.super_.prototype.writeMessageBegin.call(this, name, type, seqid);
	    }
	  };

	  return MultiplexProtocol;
	};

	function Multiplexer() {
	  this.seqid = 0;
	};

	Multiplexer.prototype.createClient = function(serviceName, ServiceClient, connection) {
	  if (ServiceClient.Client) {
	    ServiceClient = ServiceClient.Client;
	  }
	  var self = this;
	  ServiceClient.prototype.new_seqid = function() {
	    self.seqid += 1;
	    return self.seqid;
	  };
	  var writeCb = function(buf, seqid) {
	    connection.write(buf,seqid);
	  };
	  var transport = new connection.transport(undefined, writeCb);
	  var protocolWrapper = new Wrapper(serviceName, connection.protocol, connection);
	  var client = new ServiceClient(transport, protocolWrapper);

	  if (typeof connection.client !== 'object') {
	    connection.client = {};
	  }
	  connection.client[serviceName] = client;

	  return client;
	};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	//
	// Autogenerated by Thrift Compiler (0.10.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";

	var thrift = __webpack_require__(16);
	var Thrift = thrift.Thrift;
	var Q = thrift.Q;

	var ttypes = module.exports = {};
	ttypes.TCompletionHintType = {
	  'COLUMN': 0,
	  'TABLE': 1,
	  'VIEW': 2,
	  'SCHEMA': 3,
	  'CATALOG': 4,
	  'REPOSITORY': 5,
	  'FUNCTION': 6,
	  'KEYWORD': 7
	};
	var TCompletionHint = module.exports.TCompletionHint = function (args) {
	  this.type = null;
	  this.hints = null;
	  this.replaced = null;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.hints !== undefined && args.hints !== null) {
	      this.hints = Thrift.copyList(args.hints, [null]);
	    }
	    if (args.replaced !== undefined && args.replaced !== null) {
	      this.replaced = args.replaced;
	    }
	  }
	};
	TCompletionHint.prototype = {};
	TCompletionHint.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          var _size0 = 0;
	          var _rtmp34;
	          this.hints = [];
	          var _etype3 = 0;
	          _rtmp34 = input.readListBegin();
	          _etype3 = _rtmp34.etype;
	          _size0 = _rtmp34.size;
	          for (var _i5 = 0; _i5 < _size0; ++_i5) {
	            var elem6 = null;
	            elem6 = input.readString();
	            this.hints.push(elem6);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.replaced = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TCompletionHint.prototype.write = function (output) {
	  output.writeStructBegin('TCompletionHint');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.hints !== null && this.hints !== undefined) {
	    output.writeFieldBegin('hints', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.STRING, this.hints.length);
	    for (var iter7 in this.hints) {
	      if (this.hints.hasOwnProperty(iter7)) {
	        iter7 = this.hints[iter7];
	        output.writeString(iter7);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.replaced !== null && this.replaced !== undefined) {
	    output.writeFieldBegin('replaced', Thrift.Type.STRING, 3);
	    output.writeString(this.replaced);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	//
	// Autogenerated by Thrift Compiler (0.10.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";

	var thrift = __webpack_require__(16);
	var Thrift = thrift.Thrift;
	var Q = thrift.Q;

	var completion_hints_ttypes = __webpack_require__(118);

	var ttypes = module.exports = {};
	ttypes.TDatumType = {
	  'SMALLINT': 0,
	  'INT': 1,
	  'BIGINT': 2,
	  'FLOAT': 3,
	  'DECIMAL': 4,
	  'DOUBLE': 5,
	  'STR': 6,
	  'TIME': 7,
	  'TIMESTAMP': 8,
	  'DATE': 9,
	  'BOOL': 10,
	  'INTERVAL_DAY_TIME': 11,
	  'INTERVAL_YEAR_MONTH': 12,
	  'POINT': 13,
	  'LINESTRING': 14,
	  'POLYGON': 15,
	  'MULTIPOLYGON': 16,
	  'TINYINT': 17,
	  'GEOMETRY': 18,
	  'GEOGRAPHY': 19
	};
	ttypes.TEncodingType = {
	  'NONE': 0,
	  'FIXED': 1,
	  'RL': 2,
	  'DIFF': 3,
	  'DICT': 4,
	  'SPARSE': 5,
	  'GEOINT': 6
	};
	ttypes.TExecuteMode = {
	  'HYBRID': 0,
	  'GPU': 1,
	  'CPU': 2
	};
	ttypes.TDeviceType = {
	  'CPU': 0,
	  'GPU': 1
	};
	ttypes.TTableType = {
	  'DELIMITED': 0,
	  'POLYGON': 1
	};
	ttypes.TMergeType = {
	  'UNION': 0,
	  'REDUCE': 1
	};
	ttypes.TExpressionRangeType = {
	  'INVALID': 0,
	  'INTEGER': 1,
	  'FLOAT': 2,
	  'DOUBLE': 3
	};
	ttypes.TDBObjectType = {
	  'AbstractDBObjectType': 0,
	  'DatabaseDBObjectType': 1,
	  'TableDBObjectType': 2,
	  'DashboardDBObjectType': 3,
	  'ViewDBObjectType': 4
	};
	var TDatumVal = module.exports.TDatumVal = function (args) {
	  this.int_val = null;
	  this.real_val = null;
	  this.str_val = null;
	  this.arr_val = null;
	  if (args) {
	    if (args.int_val !== undefined && args.int_val !== null) {
	      this.int_val = args.int_val;
	    }
	    if (args.real_val !== undefined && args.real_val !== null) {
	      this.real_val = args.real_val;
	    }
	    if (args.str_val !== undefined && args.str_val !== null) {
	      this.str_val = args.str_val;
	    }
	    if (args.arr_val !== undefined && args.arr_val !== null) {
	      this.arr_val = Thrift.copyList(args.arr_val, [null]);
	    }
	  }
	};
	TDatumVal.prototype = {};
	TDatumVal.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.int_val = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.DOUBLE) {
	          this.real_val = input.readDouble();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.str_val = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          var _size0 = 0;
	          var _rtmp34;
	          this.arr_val = [];
	          var _etype3 = 0;
	          _rtmp34 = input.readListBegin();
	          _etype3 = _rtmp34.etype;
	          _size0 = _rtmp34.size;
	          for (var _i5 = 0; _i5 < _size0; ++_i5) {
	            var elem6 = null;
	            elem6 = new ttypes.TDatum();
	            elem6.read(input);
	            this.arr_val.push(elem6);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDatumVal.prototype.write = function (output) {
	  output.writeStructBegin('TDatumVal');
	  if (this.int_val !== null && this.int_val !== undefined) {
	    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);
	    output.writeI64(this.int_val);
	    output.writeFieldEnd();
	  }
	  if (this.real_val !== null && this.real_val !== undefined) {
	    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);
	    output.writeDouble(this.real_val);
	    output.writeFieldEnd();
	  }
	  if (this.str_val !== null && this.str_val !== undefined) {
	    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);
	    output.writeString(this.str_val);
	    output.writeFieldEnd();
	  }
	  if (this.arr_val !== null && this.arr_val !== undefined) {
	    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);
	    for (var iter7 in this.arr_val) {
	      if (this.arr_val.hasOwnProperty(iter7)) {
	        iter7 = this.arr_val[iter7];
	        iter7.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDatum = module.exports.TDatum = function (args) {
	  this.val = null;
	  this.is_null = null;
	  if (args) {
	    if (args.val !== undefined && args.val !== null) {
	      this.val = new ttypes.TDatumVal(args.val);
	    }
	    if (args.is_null !== undefined && args.is_null !== null) {
	      this.is_null = args.is_null;
	    }
	  }
	};
	TDatum.prototype = {};
	TDatum.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.val = new ttypes.TDatumVal();
	          this.val.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_null = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDatum.prototype.write = function (output) {
	  output.writeStructBegin('TDatum');
	  if (this.val !== null && this.val !== undefined) {
	    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);
	    this.val.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.is_null !== null && this.is_null !== undefined) {
	    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
	    output.writeBool(this.is_null);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TStringValue = module.exports.TStringValue = function (args) {
	  this.str_val = null;
	  this.is_null = null;
	  if (args) {
	    if (args.str_val !== undefined && args.str_val !== null) {
	      this.str_val = args.str_val;
	    }
	    if (args.is_null !== undefined && args.is_null !== null) {
	      this.is_null = args.is_null;
	    }
	  }
	};
	TStringValue.prototype = {};
	TStringValue.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.str_val = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_null = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TStringValue.prototype.write = function (output) {
	  output.writeStructBegin('TStringValue');
	  if (this.str_val !== null && this.str_val !== undefined) {
	    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);
	    output.writeString(this.str_val);
	    output.writeFieldEnd();
	  }
	  if (this.is_null !== null && this.is_null !== undefined) {
	    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
	    output.writeBool(this.is_null);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTypeInfo = module.exports.TTypeInfo = function (args) {
	  this.type = null;
	  this.encoding = null;
	  this.nullable = null;
	  this.is_array = null;
	  this.precision = null;
	  this.scale = null;
	  this.comp_param = null;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.encoding !== undefined && args.encoding !== null) {
	      this.encoding = args.encoding;
	    }
	    if (args.nullable !== undefined && args.nullable !== null) {
	      this.nullable = args.nullable;
	    }
	    if (args.is_array !== undefined && args.is_array !== null) {
	      this.is_array = args.is_array;
	    }
	    if (args.precision !== undefined && args.precision !== null) {
	      this.precision = args.precision;
	    }
	    if (args.scale !== undefined && args.scale !== null) {
	      this.scale = args.scale;
	    }
	    if (args.comp_param !== undefined && args.comp_param !== null) {
	      this.comp_param = args.comp_param;
	    }
	  }
	};
	TTypeInfo.prototype = {};
	TTypeInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I32) {
	          this.encoding = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.nullable = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_array = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I32) {
	          this.precision = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I32) {
	          this.scale = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I32) {
	          this.comp_param = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTypeInfo.prototype.write = function (output) {
	  output.writeStructBegin('TTypeInfo');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.encoding !== null && this.encoding !== undefined) {
	    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);
	    output.writeI32(this.encoding);
	    output.writeFieldEnd();
	  }
	  if (this.nullable !== null && this.nullable !== undefined) {
	    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);
	    output.writeBool(this.nullable);
	    output.writeFieldEnd();
	  }
	  if (this.is_array !== null && this.is_array !== undefined) {
	    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);
	    output.writeBool(this.is_array);
	    output.writeFieldEnd();
	  }
	  if (this.precision !== null && this.precision !== undefined) {
	    output.writeFieldBegin('precision', Thrift.Type.I32, 5);
	    output.writeI32(this.precision);
	    output.writeFieldEnd();
	  }
	  if (this.scale !== null && this.scale !== undefined) {
	    output.writeFieldBegin('scale', Thrift.Type.I32, 6);
	    output.writeI32(this.scale);
	    output.writeFieldEnd();
	  }
	  if (this.comp_param !== null && this.comp_param !== undefined) {
	    output.writeFieldBegin('comp_param', Thrift.Type.I32, 7);
	    output.writeI32(this.comp_param);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColumnType = module.exports.TColumnType = function (args) {
	  this.col_name = null;
	  this.col_type = null;
	  this.is_reserved_keyword = null;
	  this.src_name = null;
	  this.is_system = null;
	  this.is_physical = null;
	  if (args) {
	    if (args.col_name !== undefined && args.col_name !== null) {
	      this.col_name = args.col_name;
	    }
	    if (args.col_type !== undefined && args.col_type !== null) {
	      this.col_type = new ttypes.TTypeInfo(args.col_type);
	    }
	    if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {
	      this.is_reserved_keyword = args.is_reserved_keyword;
	    }
	    if (args.src_name !== undefined && args.src_name !== null) {
	      this.src_name = args.src_name;
	    }
	    if (args.is_system !== undefined && args.is_system !== null) {
	      this.is_system = args.is_system;
	    }
	    if (args.is_physical !== undefined && args.is_physical !== null) {
	      this.is_physical = args.is_physical;
	    }
	  }
	};
	TColumnType.prototype = {};
	TColumnType.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.col_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.col_type = new ttypes.TTypeInfo();
	          this.col_type.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_reserved_keyword = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.src_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_system = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_physical = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColumnType.prototype.write = function (output) {
	  output.writeStructBegin('TColumnType');
	  if (this.col_name !== null && this.col_name !== undefined) {
	    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);
	    output.writeString(this.col_name);
	    output.writeFieldEnd();
	  }
	  if (this.col_type !== null && this.col_type !== undefined) {
	    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);
	    this.col_type.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {
	    output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);
	    output.writeBool(this.is_reserved_keyword);
	    output.writeFieldEnd();
	  }
	  if (this.src_name !== null && this.src_name !== undefined) {
	    output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);
	    output.writeString(this.src_name);
	    output.writeFieldEnd();
	  }
	  if (this.is_system !== null && this.is_system !== undefined) {
	    output.writeFieldBegin('is_system', Thrift.Type.BOOL, 5);
	    output.writeBool(this.is_system);
	    output.writeFieldEnd();
	  }
	  if (this.is_physical !== null && this.is_physical !== undefined) {
	    output.writeFieldBegin('is_physical', Thrift.Type.BOOL, 6);
	    output.writeBool(this.is_physical);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRow = module.exports.TRow = function (args) {
	  this.cols = null;
	  if (args) {
	    if (args.cols !== undefined && args.cols !== null) {
	      this.cols = Thrift.copyList(args.cols, [ttypes.TDatum]);
	    }
	  }
	};
	TRow.prototype = {};
	TRow.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          var _size8 = 0;
	          var _rtmp312;
	          this.cols = [];
	          var _etype11 = 0;
	          _rtmp312 = input.readListBegin();
	          _etype11 = _rtmp312.etype;
	          _size8 = _rtmp312.size;
	          for (var _i13 = 0; _i13 < _size8; ++_i13) {
	            var elem14 = null;
	            elem14 = new ttypes.TDatum();
	            elem14.read(input);
	            this.cols.push(elem14);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRow.prototype.write = function (output) {
	  output.writeStructBegin('TRow');
	  if (this.cols !== null && this.cols !== undefined) {
	    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
	    for (var iter15 in this.cols) {
	      if (this.cols.hasOwnProperty(iter15)) {
	        iter15 = this.cols[iter15];
	        iter15.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColumnData = module.exports.TColumnData = function (args) {
	  this.int_col = null;
	  this.real_col = null;
	  this.str_col = null;
	  this.arr_col = null;
	  if (args) {
	    if (args.int_col !== undefined && args.int_col !== null) {
	      this.int_col = Thrift.copyList(args.int_col, [null]);
	    }
	    if (args.real_col !== undefined && args.real_col !== null) {
	      this.real_col = Thrift.copyList(args.real_col, [null]);
	    }
	    if (args.str_col !== undefined && args.str_col !== null) {
	      this.str_col = Thrift.copyList(args.str_col, [null]);
	    }
	    if (args.arr_col !== undefined && args.arr_col !== null) {
	      this.arr_col = Thrift.copyList(args.arr_col, [null]);
	    }
	  }
	};
	TColumnData.prototype = {};
	TColumnData.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          var _size16 = 0;
	          var _rtmp320;
	          this.int_col = [];
	          var _etype19 = 0;
	          _rtmp320 = input.readListBegin();
	          _etype19 = _rtmp320.etype;
	          _size16 = _rtmp320.size;
	          for (var _i21 = 0; _i21 < _size16; ++_i21) {
	            var elem22 = null;
	            elem22 = input.readI64();
	            this.int_col.push(elem22);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          var _size23 = 0;
	          var _rtmp327;
	          this.real_col = [];
	          var _etype26 = 0;
	          _rtmp327 = input.readListBegin();
	          _etype26 = _rtmp327.etype;
	          _size23 = _rtmp327.size;
	          for (var _i28 = 0; _i28 < _size23; ++_i28) {
	            var elem29 = null;
	            elem29 = input.readDouble();
	            this.real_col.push(elem29);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          var _size30 = 0;
	          var _rtmp334;
	          this.str_col = [];
	          var _etype33 = 0;
	          _rtmp334 = input.readListBegin();
	          _etype33 = _rtmp334.etype;
	          _size30 = _rtmp334.size;
	          for (var _i35 = 0; _i35 < _size30; ++_i35) {
	            var elem36 = null;
	            elem36 = input.readString();
	            this.str_col.push(elem36);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          var _size37 = 0;
	          var _rtmp341;
	          this.arr_col = [];
	          var _etype40 = 0;
	          _rtmp341 = input.readListBegin();
	          _etype40 = _rtmp341.etype;
	          _size37 = _rtmp341.size;
	          for (var _i42 = 0; _i42 < _size37; ++_i42) {
	            var elem43 = null;
	            elem43 = new ttypes.TColumn();
	            elem43.read(input);
	            this.arr_col.push(elem43);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColumnData.prototype.write = function (output) {
	  output.writeStructBegin('TColumnData');
	  if (this.int_col !== null && this.int_col !== undefined) {
	    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.I64, this.int_col.length);
	    for (var iter44 in this.int_col) {
	      if (this.int_col.hasOwnProperty(iter44)) {
	        iter44 = this.int_col[iter44];
	        output.writeI64(iter44);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.real_col !== null && this.real_col !== undefined) {
	    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);
	    for (var iter45 in this.real_col) {
	      if (this.real_col.hasOwnProperty(iter45)) {
	        iter45 = this.real_col[iter45];
	        output.writeDouble(iter45);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.str_col !== null && this.str_col !== undefined) {
	    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);
	    for (var iter46 in this.str_col) {
	      if (this.str_col.hasOwnProperty(iter46)) {
	        iter46 = this.str_col[iter46];
	        output.writeString(iter46);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.arr_col !== null && this.arr_col !== undefined) {
	    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);
	    for (var iter47 in this.arr_col) {
	      if (this.arr_col.hasOwnProperty(iter47)) {
	        iter47 = this.arr_col[iter47];
	        iter47.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColumn = module.exports.TColumn = function (args) {
	  this.data = null;
	  this.nulls = null;
	  if (args) {
	    if (args.data !== undefined && args.data !== null) {
	      this.data = new ttypes.TColumnData(args.data);
	    }
	    if (args.nulls !== undefined && args.nulls !== null) {
	      this.nulls = Thrift.copyList(args.nulls, [null]);
	    }
	  }
	};
	TColumn.prototype = {};
	TColumn.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.data = new ttypes.TColumnData();
	          this.data.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          var _size48 = 0;
	          var _rtmp352;
	          this.nulls = [];
	          var _etype51 = 0;
	          _rtmp352 = input.readListBegin();
	          _etype51 = _rtmp352.etype;
	          _size48 = _rtmp352.size;
	          for (var _i53 = 0; _i53 < _size48; ++_i53) {
	            var elem54 = null;
	            elem54 = input.readBool();
	            this.nulls.push(elem54);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColumn.prototype.write = function (output) {
	  output.writeStructBegin('TColumn');
	  if (this.data !== null && this.data !== undefined) {
	    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
	    this.data.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.nulls !== null && this.nulls !== undefined) {
	    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);
	    for (var iter55 in this.nulls) {
	      if (this.nulls.hasOwnProperty(iter55)) {
	        iter55 = this.nulls[iter55];
	        output.writeBool(iter55);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TStringRow = module.exports.TStringRow = function (args) {
	  this.cols = null;
	  if (args) {
	    if (args.cols !== undefined && args.cols !== null) {
	      this.cols = Thrift.copyList(args.cols, [ttypes.TStringValue]);
	    }
	  }
	};
	TStringRow.prototype = {};
	TStringRow.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          var _size56 = 0;
	          var _rtmp360;
	          this.cols = [];
	          var _etype59 = 0;
	          _rtmp360 = input.readListBegin();
	          _etype59 = _rtmp360.etype;
	          _size56 = _rtmp360.size;
	          for (var _i61 = 0; _i61 < _size56; ++_i61) {
	            var elem62 = null;
	            elem62 = new ttypes.TStringValue();
	            elem62.read(input);
	            this.cols.push(elem62);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TStringRow.prototype.write = function (output) {
	  output.writeStructBegin('TStringRow');
	  if (this.cols !== null && this.cols !== undefined) {
	    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
	    for (var iter63 in this.cols) {
	      if (this.cols.hasOwnProperty(iter63)) {
	        iter63 = this.cols[iter63];
	        iter63.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TStepResult = module.exports.TStepResult = function (args) {
	  this.serialized_rows = null;
	  this.execution_finished = null;
	  this.merge_type = null;
	  this.sharded = null;
	  this.row_desc = null;
	  this.node_id = null;
	  if (args) {
	    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
	      this.serialized_rows = args.serialized_rows;
	    }
	    if (args.execution_finished !== undefined && args.execution_finished !== null) {
	      this.execution_finished = args.execution_finished;
	    }
	    if (args.merge_type !== undefined && args.merge_type !== null) {
	      this.merge_type = args.merge_type;
	    }
	    if (args.sharded !== undefined && args.sharded !== null) {
	      this.sharded = args.sharded;
	    }
	    if (args.row_desc !== undefined && args.row_desc !== null) {
	      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
	    }
	    if (args.node_id !== undefined && args.node_id !== null) {
	      this.node_id = args.node_id;
	    }
	  }
	};
	TStepResult.prototype = {};
	TStepResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.serialized_rows = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.execution_finished = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.merge_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.sharded = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.LIST) {
	          var _size64 = 0;
	          var _rtmp368;
	          this.row_desc = [];
	          var _etype67 = 0;
	          _rtmp368 = input.readListBegin();
	          _etype67 = _rtmp368.etype;
	          _size64 = _rtmp368.size;
	          for (var _i69 = 0; _i69 < _size64; ++_i69) {
	            var elem70 = null;
	            elem70 = new ttypes.TColumnType();
	            elem70.read(input);
	            this.row_desc.push(elem70);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I32) {
	          this.node_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TStepResult.prototype.write = function (output) {
	  output.writeStructBegin('TStepResult');
	  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
	    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);
	    output.writeString(this.serialized_rows);
	    output.writeFieldEnd();
	  }
	  if (this.execution_finished !== null && this.execution_finished !== undefined) {
	    output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);
	    output.writeBool(this.execution_finished);
	    output.writeFieldEnd();
	  }
	  if (this.merge_type !== null && this.merge_type !== undefined) {
	    output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);
	    output.writeI32(this.merge_type);
	    output.writeFieldEnd();
	  }
	  if (this.sharded !== null && this.sharded !== undefined) {
	    output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);
	    output.writeBool(this.sharded);
	    output.writeFieldEnd();
	  }
	  if (this.row_desc !== null && this.row_desc !== undefined) {
	    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
	    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
	    for (var iter71 in this.row_desc) {
	      if (this.row_desc.hasOwnProperty(iter71)) {
	        iter71 = this.row_desc[iter71];
	        iter71.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.node_id !== null && this.node_id !== undefined) {
	    output.writeFieldBegin('node_id', Thrift.Type.I32, 6);
	    output.writeI32(this.node_id);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRowSet = module.exports.TRowSet = function (args) {
	  this.row_desc = null;
	  this.rows = null;
	  this.columns = null;
	  this.is_columnar = null;
	  if (args) {
	    if (args.row_desc !== undefined && args.row_desc !== null) {
	      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
	    }
	    if (args.rows !== undefined && args.rows !== null) {
	      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
	    }
	    if (args.columns !== undefined && args.columns !== null) {
	      this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);
	    }
	    if (args.is_columnar !== undefined && args.is_columnar !== null) {
	      this.is_columnar = args.is_columnar;
	    }
	  }
	};
	TRowSet.prototype = {};
	TRowSet.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          var _size72 = 0;
	          var _rtmp376;
	          this.row_desc = [];
	          var _etype75 = 0;
	          _rtmp376 = input.readListBegin();
	          _etype75 = _rtmp376.etype;
	          _size72 = _rtmp376.size;
	          for (var _i77 = 0; _i77 < _size72; ++_i77) {
	            var elem78 = null;
	            elem78 = new ttypes.TColumnType();
	            elem78.read(input);
	            this.row_desc.push(elem78);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          var _size79 = 0;
	          var _rtmp383;
	          this.rows = [];
	          var _etype82 = 0;
	          _rtmp383 = input.readListBegin();
	          _etype82 = _rtmp383.etype;
	          _size79 = _rtmp383.size;
	          for (var _i84 = 0; _i84 < _size79; ++_i84) {
	            var elem85 = null;
	            elem85 = new ttypes.TRow();
	            elem85.read(input);
	            this.rows.push(elem85);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          var _size86 = 0;
	          var _rtmp390;
	          this.columns = [];
	          var _etype89 = 0;
	          _rtmp390 = input.readListBegin();
	          _etype89 = _rtmp390.etype;
	          _size86 = _rtmp390.size;
	          for (var _i91 = 0; _i91 < _size86; ++_i91) {
	            var elem92 = null;
	            elem92 = new ttypes.TColumn();
	            elem92.read(input);
	            this.columns.push(elem92);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_columnar = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRowSet.prototype.write = function (output) {
	  output.writeStructBegin('TRowSet');
	  if (this.row_desc !== null && this.row_desc !== undefined) {
	    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
	    for (var iter93 in this.row_desc) {
	      if (this.row_desc.hasOwnProperty(iter93)) {
	        iter93 = this.row_desc[iter93];
	        iter93.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.rows !== null && this.rows !== undefined) {
	    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
	    for (var iter94 in this.rows) {
	      if (this.rows.hasOwnProperty(iter94)) {
	        iter94 = this.rows[iter94];
	        iter94.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.columns !== null && this.columns !== undefined) {
	    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
	    for (var iter95 in this.columns) {
	      if (this.columns.hasOwnProperty(iter95)) {
	        iter95 = this.columns[iter95];
	        iter95.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.is_columnar !== null && this.is_columnar !== undefined) {
	    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);
	    output.writeBool(this.is_columnar);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TQueryResult = module.exports.TQueryResult = function (args) {
	  this.row_set = null;
	  this.execution_time_ms = null;
	  this.total_time_ms = null;
	  this.nonce = null;
	  if (args) {
	    if (args.row_set !== undefined && args.row_set !== null) {
	      this.row_set = new ttypes.TRowSet(args.row_set);
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
	      this.total_time_ms = args.total_time_ms;
	    }
	    if (args.nonce !== undefined && args.nonce !== null) {
	      this.nonce = args.nonce;
	    }
	  }
	};
	TQueryResult.prototype = {};
	TQueryResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.row_set = new ttypes.TRowSet();
	          this.row_set.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.total_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.nonce = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TQueryResult.prototype.write = function (output) {
	  output.writeStructBegin('TQueryResult');
	  if (this.row_set !== null && this.row_set !== undefined) {
	    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
	    this.row_set.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
	    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);
	    output.writeI64(this.total_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.nonce !== null && this.nonce !== undefined) {
	    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
	    output.writeString(this.nonce);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDataFrame = module.exports.TDataFrame = function (args) {
	  this.sm_handle = null;
	  this.sm_size = null;
	  this.df_handle = null;
	  this.df_size = null;
	  if (args) {
	    if (args.sm_handle !== undefined && args.sm_handle !== null) {
	      this.sm_handle = args.sm_handle;
	    }
	    if (args.sm_size !== undefined && args.sm_size !== null) {
	      this.sm_size = args.sm_size;
	    }
	    if (args.df_handle !== undefined && args.df_handle !== null) {
	      this.df_handle = args.df_handle;
	    }
	    if (args.df_size !== undefined && args.df_size !== null) {
	      this.df_size = args.df_size;
	    }
	  }
	};
	TDataFrame.prototype = {};
	TDataFrame.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.sm_handle = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.sm_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.df_handle = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.df_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDataFrame.prototype.write = function (output) {
	  output.writeStructBegin('TDataFrame');
	  if (this.sm_handle !== null && this.sm_handle !== undefined) {
	    output.writeFieldBegin('sm_handle', Thrift.Type.STRING, 1);
	    output.writeBinary(this.sm_handle);
	    output.writeFieldEnd();
	  }
	  if (this.sm_size !== null && this.sm_size !== undefined) {
	    output.writeFieldBegin('sm_size', Thrift.Type.I64, 2);
	    output.writeI64(this.sm_size);
	    output.writeFieldEnd();
	  }
	  if (this.df_handle !== null && this.df_handle !== undefined) {
	    output.writeFieldBegin('df_handle', Thrift.Type.STRING, 3);
	    output.writeBinary(this.df_handle);
	    output.writeFieldEnd();
	  }
	  if (this.df_size !== null && this.df_size !== undefined) {
	    output.writeFieldBegin('df_size', Thrift.Type.I64, 4);
	    output.writeI64(this.df_size);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDBInfo = module.exports.TDBInfo = function (args) {
	  this.db_name = null;
	  this.db_owner = null;
	  if (args) {
	    if (args.db_name !== undefined && args.db_name !== null) {
	      this.db_name = args.db_name;
	    }
	    if (args.db_owner !== undefined && args.db_owner !== null) {
	      this.db_owner = args.db_owner;
	    }
	  }
	};
	TDBInfo.prototype = {};
	TDBInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.db_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.db_owner = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDBInfo.prototype.write = function (output) {
	  output.writeStructBegin('TDBInfo');
	  if (this.db_name !== null && this.db_name !== undefined) {
	    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
	    output.writeString(this.db_name);
	    output.writeFieldEnd();
	  }
	  if (this.db_owner !== null && this.db_owner !== undefined) {
	    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);
	    output.writeString(this.db_owner);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TMapDException = module.exports.TMapDException = function (args) {
	  Thrift.TException.call(this, "TMapDException");
	  this.name = "TMapDException";
	  this.error_msg = null;
	  if (args) {
	    if (args.error_msg !== undefined && args.error_msg !== null) {
	      this.error_msg = args.error_msg;
	    }
	  }
	};
	Thrift.inherits(TMapDException, Thrift.TException);
	TMapDException.prototype.name = 'TMapDException';
	TMapDException.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.error_msg = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TMapDException.prototype.write = function (output) {
	  output.writeStructBegin('TMapDException');
	  if (this.error_msg !== null && this.error_msg !== undefined) {
	    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);
	    output.writeString(this.error_msg);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TCopyParams = module.exports.TCopyParams = function (args) {
	  this.delimiter = null;
	  this.null_str = null;
	  this.has_header = null;
	  this.quoted = null;
	  this.quote = null;
	  this.escape = null;
	  this.line_delim = null;
	  this.array_delim = null;
	  this.array_begin = null;
	  this.array_end = null;
	  this.threads = null;
	  this.table_type = 0;
	  this.s3_access_key = null;
	  this.s3_secret_key = null;
	  this.s3_region = null;
	  this.geo_coords_encoding = 0;
	  this.geo_coords_comp_param = null;
	  if (args) {
	    if (args.delimiter !== undefined && args.delimiter !== null) {
	      this.delimiter = args.delimiter;
	    }
	    if (args.null_str !== undefined && args.null_str !== null) {
	      this.null_str = args.null_str;
	    }
	    if (args.has_header !== undefined && args.has_header !== null) {
	      this.has_header = args.has_header;
	    }
	    if (args.quoted !== undefined && args.quoted !== null) {
	      this.quoted = args.quoted;
	    }
	    if (args.quote !== undefined && args.quote !== null) {
	      this.quote = args.quote;
	    }
	    if (args.escape !== undefined && args.escape !== null) {
	      this.escape = args.escape;
	    }
	    if (args.line_delim !== undefined && args.line_delim !== null) {
	      this.line_delim = args.line_delim;
	    }
	    if (args.array_delim !== undefined && args.array_delim !== null) {
	      this.array_delim = args.array_delim;
	    }
	    if (args.array_begin !== undefined && args.array_begin !== null) {
	      this.array_begin = args.array_begin;
	    }
	    if (args.array_end !== undefined && args.array_end !== null) {
	      this.array_end = args.array_end;
	    }
	    if (args.threads !== undefined && args.threads !== null) {
	      this.threads = args.threads;
	    }
	    if (args.table_type !== undefined && args.table_type !== null) {
	      this.table_type = args.table_type;
	    }
	    if (args.s3_access_key !== undefined && args.s3_access_key !== null) {
	      this.s3_access_key = args.s3_access_key;
	    }
	    if (args.s3_secret_key !== undefined && args.s3_secret_key !== null) {
	      this.s3_secret_key = args.s3_secret_key;
	    }
	    if (args.s3_region !== undefined && args.s3_region !== null) {
	      this.s3_region = args.s3_region;
	    }
	    if (args.geo_coords_encoding !== undefined && args.geo_coords_encoding !== null) {
	      this.geo_coords_encoding = args.geo_coords_encoding;
	    }
	    if (args.geo_coords_comp_param !== undefined && args.geo_coords_comp_param !== null) {
	      this.geo_coords_comp_param = args.geo_coords_comp_param;
	    }
	  }
	};
	TCopyParams.prototype = {};
	TCopyParams.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.delimiter = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.null_str = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.has_header = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.quoted = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.quote = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.escape = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.STRING) {
	          this.line_delim = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.STRING) {
	          this.array_delim = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 9:
	        if (ftype == Thrift.Type.STRING) {
	          this.array_begin = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 10:
	        if (ftype == Thrift.Type.STRING) {
	          this.array_end = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 11:
	        if (ftype == Thrift.Type.I32) {
	          this.threads = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 12:
	        if (ftype == Thrift.Type.I32) {
	          this.table_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 13:
	        if (ftype == Thrift.Type.STRING) {
	          this.s3_access_key = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 14:
	        if (ftype == Thrift.Type.STRING) {
	          this.s3_secret_key = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 15:
	        if (ftype == Thrift.Type.STRING) {
	          this.s3_region = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 16:
	        if (ftype == Thrift.Type.I32) {
	          this.geo_coords_encoding = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 17:
	        if (ftype == Thrift.Type.I32) {
	          this.geo_coords_comp_param = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TCopyParams.prototype.write = function (output) {
	  output.writeStructBegin('TCopyParams');
	  if (this.delimiter !== null && this.delimiter !== undefined) {
	    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);
	    output.writeString(this.delimiter);
	    output.writeFieldEnd();
	  }
	  if (this.null_str !== null && this.null_str !== undefined) {
	    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);
	    output.writeString(this.null_str);
	    output.writeFieldEnd();
	  }
	  if (this.has_header !== null && this.has_header !== undefined) {
	    output.writeFieldBegin('has_header', Thrift.Type.BOOL, 3);
	    output.writeBool(this.has_header);
	    output.writeFieldEnd();
	  }
	  if (this.quoted !== null && this.quoted !== undefined) {
	    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);
	    output.writeBool(this.quoted);
	    output.writeFieldEnd();
	  }
	  if (this.quote !== null && this.quote !== undefined) {
	    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);
	    output.writeString(this.quote);
	    output.writeFieldEnd();
	  }
	  if (this.escape !== null && this.escape !== undefined) {
	    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);
	    output.writeString(this.escape);
	    output.writeFieldEnd();
	  }
	  if (this.line_delim !== null && this.line_delim !== undefined) {
	    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);
	    output.writeString(this.line_delim);
	    output.writeFieldEnd();
	  }
	  if (this.array_delim !== null && this.array_delim !== undefined) {
	    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);
	    output.writeString(this.array_delim);
	    output.writeFieldEnd();
	  }
	  if (this.array_begin !== null && this.array_begin !== undefined) {
	    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);
	    output.writeString(this.array_begin);
	    output.writeFieldEnd();
	  }
	  if (this.array_end !== null && this.array_end !== undefined) {
	    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);
	    output.writeString(this.array_end);
	    output.writeFieldEnd();
	  }
	  if (this.threads !== null && this.threads !== undefined) {
	    output.writeFieldBegin('threads', Thrift.Type.I32, 11);
	    output.writeI32(this.threads);
	    output.writeFieldEnd();
	  }
	  if (this.table_type !== null && this.table_type !== undefined) {
	    output.writeFieldBegin('table_type', Thrift.Type.I32, 12);
	    output.writeI32(this.table_type);
	    output.writeFieldEnd();
	  }
	  if (this.s3_access_key !== null && this.s3_access_key !== undefined) {
	    output.writeFieldBegin('s3_access_key', Thrift.Type.STRING, 13);
	    output.writeString(this.s3_access_key);
	    output.writeFieldEnd();
	  }
	  if (this.s3_secret_key !== null && this.s3_secret_key !== undefined) {
	    output.writeFieldBegin('s3_secret_key', Thrift.Type.STRING, 14);
	    output.writeString(this.s3_secret_key);
	    output.writeFieldEnd();
	  }
	  if (this.s3_region !== null && this.s3_region !== undefined) {
	    output.writeFieldBegin('s3_region', Thrift.Type.STRING, 15);
	    output.writeString(this.s3_region);
	    output.writeFieldEnd();
	  }
	  if (this.geo_coords_encoding !== null && this.geo_coords_encoding !== undefined) {
	    output.writeFieldBegin('geo_coords_encoding', Thrift.Type.I32, 16);
	    output.writeI32(this.geo_coords_encoding);
	    output.writeFieldEnd();
	  }
	  if (this.geo_coords_comp_param !== null && this.geo_coords_comp_param !== undefined) {
	    output.writeFieldBegin('geo_coords_comp_param', Thrift.Type.I32, 17);
	    output.writeI32(this.geo_coords_comp_param);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDetectResult = module.exports.TDetectResult = function (args) {
	  this.row_set = null;
	  this.copy_params = null;
	  if (args) {
	    if (args.row_set !== undefined && args.row_set !== null) {
	      this.row_set = new ttypes.TRowSet(args.row_set);
	    }
	    if (args.copy_params !== undefined && args.copy_params !== null) {
	      this.copy_params = new ttypes.TCopyParams(args.copy_params);
	    }
	  }
	};
	TDetectResult.prototype = {};
	TDetectResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.row_set = new ttypes.TRowSet();
	          this.row_set.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.copy_params = new ttypes.TCopyParams();
	          this.copy_params.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDetectResult.prototype.write = function (output) {
	  output.writeStructBegin('TDetectResult');
	  if (this.row_set !== null && this.row_set !== undefined) {
	    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
	    this.row_set.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.copy_params !== null && this.copy_params !== undefined) {
	    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);
	    this.copy_params.write(output);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TImportStatus = module.exports.TImportStatus = function (args) {
	  this.elapsed = null;
	  this.rows_completed = null;
	  this.rows_estimated = null;
	  this.rows_rejected = null;
	  if (args) {
	    if (args.elapsed !== undefined && args.elapsed !== null) {
	      this.elapsed = args.elapsed;
	    }
	    if (args.rows_completed !== undefined && args.rows_completed !== null) {
	      this.rows_completed = args.rows_completed;
	    }
	    if (args.rows_estimated !== undefined && args.rows_estimated !== null) {
	      this.rows_estimated = args.rows_estimated;
	    }
	    if (args.rows_rejected !== undefined && args.rows_rejected !== null) {
	      this.rows_rejected = args.rows_rejected;
	    }
	  }
	};
	TImportStatus.prototype = {};
	TImportStatus.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.elapsed = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.rows_completed = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.rows_estimated = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.rows_rejected = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TImportStatus.prototype.write = function (output) {
	  output.writeStructBegin('TImportStatus');
	  if (this.elapsed !== null && this.elapsed !== undefined) {
	    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);
	    output.writeI64(this.elapsed);
	    output.writeFieldEnd();
	  }
	  if (this.rows_completed !== null && this.rows_completed !== undefined) {
	    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);
	    output.writeI64(this.rows_completed);
	    output.writeFieldEnd();
	  }
	  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {
	    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);
	    output.writeI64(this.rows_estimated);
	    output.writeFieldEnd();
	  }
	  if (this.rows_rejected !== null && this.rows_rejected !== undefined) {
	    output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);
	    output.writeI64(this.rows_rejected);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TFrontendView = module.exports.TFrontendView = function (args) {
	  this.view_name = null;
	  this.view_state = null;
	  this.image_hash = null;
	  this.update_time = null;
	  this.view_metadata = null;
	  if (args) {
	    if (args.view_name !== undefined && args.view_name !== null) {
	      this.view_name = args.view_name;
	    }
	    if (args.view_state !== undefined && args.view_state !== null) {
	      this.view_state = args.view_state;
	    }
	    if (args.image_hash !== undefined && args.image_hash !== null) {
	      this.image_hash = args.image_hash;
	    }
	    if (args.update_time !== undefined && args.update_time !== null) {
	      this.update_time = args.update_time;
	    }
	    if (args.view_metadata !== undefined && args.view_metadata !== null) {
	      this.view_metadata = args.view_metadata;
	    }
	  }
	};
	TFrontendView.prototype = {};
	TFrontendView.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.view_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.view_state = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.image_hash = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.update_time = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.view_metadata = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TFrontendView.prototype.write = function (output) {
	  output.writeStructBegin('TFrontendView');
	  if (this.view_name !== null && this.view_name !== undefined) {
	    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);
	    output.writeString(this.view_name);
	    output.writeFieldEnd();
	  }
	  if (this.view_state !== null && this.view_state !== undefined) {
	    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
	    output.writeString(this.view_state);
	    output.writeFieldEnd();
	  }
	  if (this.image_hash !== null && this.image_hash !== undefined) {
	    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
	    output.writeString(this.image_hash);
	    output.writeFieldEnd();
	  }
	  if (this.update_time !== null && this.update_time !== undefined) {
	    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
	    output.writeString(this.update_time);
	    output.writeFieldEnd();
	  }
	  if (this.view_metadata !== null && this.view_metadata !== undefined) {
	    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);
	    output.writeString(this.view_metadata);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDashboard = module.exports.TDashboard = function (args) {
	  this.dashboard_name = null;
	  this.dashboard_state = null;
	  this.image_hash = null;
	  this.update_time = null;
	  this.dashboard_metadata = null;
	  this.dashboard_id = null;
	  this.dashboard_owner = null;
	  if (args) {
	    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
	      this.dashboard_name = args.dashboard_name;
	    }
	    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
	      this.dashboard_state = args.dashboard_state;
	    }
	    if (args.image_hash !== undefined && args.image_hash !== null) {
	      this.image_hash = args.image_hash;
	    }
	    if (args.update_time !== undefined && args.update_time !== null) {
	      this.update_time = args.update_time;
	    }
	    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
	      this.dashboard_metadata = args.dashboard_metadata;
	    }
	    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
	      this.dashboard_id = args.dashboard_id;
	    }
	    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {
	      this.dashboard_owner = args.dashboard_owner;
	    }
	  }
	};
	TDashboard.prototype = {};
	TDashboard.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.dashboard_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.dashboard_state = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.image_hash = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.update_time = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.dashboard_metadata = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I32) {
	          this.dashboard_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.STRING) {
	          this.dashboard_owner = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDashboard.prototype.write = function (output) {
	  output.writeStructBegin('TDashboard');
	  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
	    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 1);
	    output.writeString(this.dashboard_name);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
	    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 2);
	    output.writeString(this.dashboard_state);
	    output.writeFieldEnd();
	  }
	  if (this.image_hash !== null && this.image_hash !== undefined) {
	    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
	    output.writeString(this.image_hash);
	    output.writeFieldEnd();
	  }
	  if (this.update_time !== null && this.update_time !== undefined) {
	    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
	    output.writeString(this.update_time);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
	    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);
	    output.writeString(this.dashboard_metadata);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
	    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 6);
	    output.writeI32(this.dashboard_id);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {
	    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 7);
	    output.writeString(this.dashboard_owner);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TServerStatus = module.exports.TServerStatus = function (args) {
	  this.read_only = null;
	  this.version = null;
	  this.rendering_enabled = null;
	  this.start_time = null;
	  this.edition = null;
	  this.host_name = null;
	  this.poly_rendering_enabled = null;
	  if (args) {
	    if (args.read_only !== undefined && args.read_only !== null) {
	      this.read_only = args.read_only;
	    }
	    if (args.version !== undefined && args.version !== null) {
	      this.version = args.version;
	    }
	    if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {
	      this.rendering_enabled = args.rendering_enabled;
	    }
	    if (args.start_time !== undefined && args.start_time !== null) {
	      this.start_time = args.start_time;
	    }
	    if (args.edition !== undefined && args.edition !== null) {
	      this.edition = args.edition;
	    }
	    if (args.host_name !== undefined && args.host_name !== null) {
	      this.host_name = args.host_name;
	    }
	    if (args.poly_rendering_enabled !== undefined && args.poly_rendering_enabled !== null) {
	      this.poly_rendering_enabled = args.poly_rendering_enabled;
	    }
	  }
	};
	TServerStatus.prototype = {};
	TServerStatus.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.read_only = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.version = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.rendering_enabled = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.start_time = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.edition = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.host_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.BOOL) {
	          this.poly_rendering_enabled = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TServerStatus.prototype.write = function (output) {
	  output.writeStructBegin('TServerStatus');
	  if (this.read_only !== null && this.read_only !== undefined) {
	    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);
	    output.writeBool(this.read_only);
	    output.writeFieldEnd();
	  }
	  if (this.version !== null && this.version !== undefined) {
	    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
	    output.writeString(this.version);
	    output.writeFieldEnd();
	  }
	  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {
	    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);
	    output.writeBool(this.rendering_enabled);
	    output.writeFieldEnd();
	  }
	  if (this.start_time !== null && this.start_time !== undefined) {
	    output.writeFieldBegin('start_time', Thrift.Type.I64, 4);
	    output.writeI64(this.start_time);
	    output.writeFieldEnd();
	  }
	  if (this.edition !== null && this.edition !== undefined) {
	    output.writeFieldBegin('edition', Thrift.Type.STRING, 5);
	    output.writeString(this.edition);
	    output.writeFieldEnd();
	  }
	  if (this.host_name !== null && this.host_name !== undefined) {
	    output.writeFieldBegin('host_name', Thrift.Type.STRING, 6);
	    output.writeString(this.host_name);
	    output.writeFieldEnd();
	  }
	  if (this.poly_rendering_enabled !== null && this.poly_rendering_enabled !== undefined) {
	    output.writeFieldBegin('poly_rendering_enabled', Thrift.Type.BOOL, 7);
	    output.writeBool(this.poly_rendering_enabled);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TPixel = module.exports.TPixel = function (args) {
	  this.x = null;
	  this.y = null;
	  if (args) {
	    if (args.x !== undefined && args.x !== null) {
	      this.x = args.x;
	    }
	    if (args.y !== undefined && args.y !== null) {
	      this.y = args.y;
	    }
	  }
	};
	TPixel.prototype = {};
	TPixel.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.x = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.y = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TPixel.prototype.write = function (output) {
	  output.writeStructBegin('TPixel');
	  if (this.x !== null && this.x !== undefined) {
	    output.writeFieldBegin('x', Thrift.Type.I64, 1);
	    output.writeI64(this.x);
	    output.writeFieldEnd();
	  }
	  if (this.y !== null && this.y !== undefined) {
	    output.writeFieldBegin('y', Thrift.Type.I64, 2);
	    output.writeI64(this.y);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TPixelTableRowResult = module.exports.TPixelTableRowResult = function (args) {
	  this.pixel = null;
	  this.vega_table_name = null;
	  this.table_id = null;
	  this.row_id = null;
	  this.row_set = null;
	  this.nonce = null;
	  if (args) {
	    if (args.pixel !== undefined && args.pixel !== null) {
	      this.pixel = new ttypes.TPixel(args.pixel);
	    }
	    if (args.vega_table_name !== undefined && args.vega_table_name !== null) {
	      this.vega_table_name = args.vega_table_name;
	    }
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.row_id !== undefined && args.row_id !== null) {
	      this.row_id = args.row_id;
	    }
	    if (args.row_set !== undefined && args.row_set !== null) {
	      this.row_set = new ttypes.TRowSet(args.row_set);
	    }
	    if (args.nonce !== undefined && args.nonce !== null) {
	      this.nonce = args.nonce;
	    }
	  }
	};
	TPixelTableRowResult.prototype = {};
	TPixelTableRowResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.pixel = new ttypes.TPixel();
	          this.pixel.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.vega_table_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.table_id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.row_id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.row_set = new ttypes.TRowSet();
	          this.row_set.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.nonce = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TPixelTableRowResult.prototype.write = function (output) {
	  output.writeStructBegin('TPixelTableRowResult');
	  if (this.pixel !== null && this.pixel !== undefined) {
	    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);
	    this.pixel.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.vega_table_name !== null && this.vega_table_name !== undefined) {
	    output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);
	    output.writeString(this.vega_table_name);
	    output.writeFieldEnd();
	  }
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I64, 3);
	    output.writeI64(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.row_id !== null && this.row_id !== undefined) {
	    output.writeFieldBegin('row_id', Thrift.Type.I64, 4);
	    output.writeI64(this.row_id);
	    output.writeFieldEnd();
	  }
	  if (this.row_set !== null && this.row_set !== undefined) {
	    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);
	    this.row_set.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.nonce !== null && this.nonce !== undefined) {
	    output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);
	    output.writeString(this.nonce);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRenderResult = module.exports.TRenderResult = function (args) {
	  this.image = null;
	  this.nonce = null;
	  this.execution_time_ms = null;
	  this.render_time_ms = null;
	  this.total_time_ms = null;
	  this.vega_metadata = null;
	  if (args) {
	    if (args.image !== undefined && args.image !== null) {
	      this.image = args.image;
	    }
	    if (args.nonce !== undefined && args.nonce !== null) {
	      this.nonce = args.nonce;
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
	      this.render_time_ms = args.render_time_ms;
	    }
	    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
	      this.total_time_ms = args.total_time_ms;
	    }
	    if (args.vega_metadata !== undefined && args.vega_metadata !== null) {
	      this.vega_metadata = args.vega_metadata;
	    }
	  }
	};
	TRenderResult.prototype = {};
	TRenderResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.image = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.nonce = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.render_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.total_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.vega_metadata = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRenderResult.prototype.write = function (output) {
	  output.writeStructBegin('TRenderResult');
	  if (this.image !== null && this.image !== undefined) {
	    output.writeFieldBegin('image', Thrift.Type.STRING, 1);
	    output.writeBinary(this.image);
	    output.writeFieldEnd();
	  }
	  if (this.nonce !== null && this.nonce !== undefined) {
	    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
	    output.writeString(this.nonce);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
	    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
	    output.writeI64(this.render_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
	    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
	    output.writeI64(this.total_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.vega_metadata !== null && this.vega_metadata !== undefined) {
	    output.writeFieldBegin('vega_metadata', Thrift.Type.STRING, 6);
	    output.writeString(this.vega_metadata);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TGpuSpecification = module.exports.TGpuSpecification = function (args) {
	  this.num_sm = null;
	  this.clock_frequency_kHz = null;
	  this.memory = null;
	  this.compute_capability_major = null;
	  this.compute_capability_minor = null;
	  if (args) {
	    if (args.num_sm !== undefined && args.num_sm !== null) {
	      this.num_sm = args.num_sm;
	    }
	    if (args.clock_frequency_kHz !== undefined && args.clock_frequency_kHz !== null) {
	      this.clock_frequency_kHz = args.clock_frequency_kHz;
	    }
	    if (args.memory !== undefined && args.memory !== null) {
	      this.memory = args.memory;
	    }
	    if (args.compute_capability_major !== undefined && args.compute_capability_major !== null) {
	      this.compute_capability_major = args.compute_capability_major;
	    }
	    if (args.compute_capability_minor !== undefined && args.compute_capability_minor !== null) {
	      this.compute_capability_minor = args.compute_capability_minor;
	    }
	  }
	};
	TGpuSpecification.prototype = {};
	TGpuSpecification.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.num_sm = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.clock_frequency_kHz = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.memory = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I16) {
	          this.compute_capability_major = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I16) {
	          this.compute_capability_minor = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TGpuSpecification.prototype.write = function (output) {
	  output.writeStructBegin('TGpuSpecification');
	  if (this.num_sm !== null && this.num_sm !== undefined) {
	    output.writeFieldBegin('num_sm', Thrift.Type.I32, 1);
	    output.writeI32(this.num_sm);
	    output.writeFieldEnd();
	  }
	  if (this.clock_frequency_kHz !== null && this.clock_frequency_kHz !== undefined) {
	    output.writeFieldBegin('clock_frequency_kHz', Thrift.Type.I64, 2);
	    output.writeI64(this.clock_frequency_kHz);
	    output.writeFieldEnd();
	  }
	  if (this.memory !== null && this.memory !== undefined) {
	    output.writeFieldBegin('memory', Thrift.Type.I64, 3);
	    output.writeI64(this.memory);
	    output.writeFieldEnd();
	  }
	  if (this.compute_capability_major !== null && this.compute_capability_major !== undefined) {
	    output.writeFieldBegin('compute_capability_major', Thrift.Type.I16, 4);
	    output.writeI16(this.compute_capability_major);
	    output.writeFieldEnd();
	  }
	  if (this.compute_capability_minor !== null && this.compute_capability_minor !== undefined) {
	    output.writeFieldBegin('compute_capability_minor', Thrift.Type.I16, 5);
	    output.writeI16(this.compute_capability_minor);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var THardwareInfo = module.exports.THardwareInfo = function (args) {
	  this.num_gpu_hw = null;
	  this.num_cpu_hw = null;
	  this.num_gpu_allocated = null;
	  this.start_gpu = null;
	  this.host_name = null;
	  this.gpu_info = null;
	  if (args) {
	    if (args.num_gpu_hw !== undefined && args.num_gpu_hw !== null) {
	      this.num_gpu_hw = args.num_gpu_hw;
	    }
	    if (args.num_cpu_hw !== undefined && args.num_cpu_hw !== null) {
	      this.num_cpu_hw = args.num_cpu_hw;
	    }
	    if (args.num_gpu_allocated !== undefined && args.num_gpu_allocated !== null) {
	      this.num_gpu_allocated = args.num_gpu_allocated;
	    }
	    if (args.start_gpu !== undefined && args.start_gpu !== null) {
	      this.start_gpu = args.start_gpu;
	    }
	    if (args.host_name !== undefined && args.host_name !== null) {
	      this.host_name = args.host_name;
	    }
	    if (args.gpu_info !== undefined && args.gpu_info !== null) {
	      this.gpu_info = Thrift.copyList(args.gpu_info, [ttypes.TGpuSpecification]);
	    }
	  }
	};
	THardwareInfo.prototype = {};
	THardwareInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I16) {
	          this.num_gpu_hw = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I16) {
	          this.num_cpu_hw = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I16) {
	          this.num_gpu_allocated = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I16) {
	          this.start_gpu = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.host_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.LIST) {
	          var _size96 = 0;
	          var _rtmp3100;
	          this.gpu_info = [];
	          var _etype99 = 0;
	          _rtmp3100 = input.readListBegin();
	          _etype99 = _rtmp3100.etype;
	          _size96 = _rtmp3100.size;
	          for (var _i101 = 0; _i101 < _size96; ++_i101) {
	            var elem102 = null;
	            elem102 = new ttypes.TGpuSpecification();
	            elem102.read(input);
	            this.gpu_info.push(elem102);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	THardwareInfo.prototype.write = function (output) {
	  output.writeStructBegin('THardwareInfo');
	  if (this.num_gpu_hw !== null && this.num_gpu_hw !== undefined) {
	    output.writeFieldBegin('num_gpu_hw', Thrift.Type.I16, 1);
	    output.writeI16(this.num_gpu_hw);
	    output.writeFieldEnd();
	  }
	  if (this.num_cpu_hw !== null && this.num_cpu_hw !== undefined) {
	    output.writeFieldBegin('num_cpu_hw', Thrift.Type.I16, 2);
	    output.writeI16(this.num_cpu_hw);
	    output.writeFieldEnd();
	  }
	  if (this.num_gpu_allocated !== null && this.num_gpu_allocated !== undefined) {
	    output.writeFieldBegin('num_gpu_allocated', Thrift.Type.I16, 3);
	    output.writeI16(this.num_gpu_allocated);
	    output.writeFieldEnd();
	  }
	  if (this.start_gpu !== null && this.start_gpu !== undefined) {
	    output.writeFieldBegin('start_gpu', Thrift.Type.I16, 4);
	    output.writeI16(this.start_gpu);
	    output.writeFieldEnd();
	  }
	  if (this.host_name !== null && this.host_name !== undefined) {
	    output.writeFieldBegin('host_name', Thrift.Type.STRING, 5);
	    output.writeString(this.host_name);
	    output.writeFieldEnd();
	  }
	  if (this.gpu_info !== null && this.gpu_info !== undefined) {
	    output.writeFieldBegin('gpu_info', Thrift.Type.LIST, 6);
	    output.writeListBegin(Thrift.Type.STRUCT, this.gpu_info.length);
	    for (var iter103 in this.gpu_info) {
	      if (this.gpu_info.hasOwnProperty(iter103)) {
	        iter103 = this.gpu_info[iter103];
	        iter103.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TClusterHardwareInfo = module.exports.TClusterHardwareInfo = function (args) {
	  this.hardware_info = null;
	  if (args) {
	    if (args.hardware_info !== undefined && args.hardware_info !== null) {
	      this.hardware_info = Thrift.copyList(args.hardware_info, [ttypes.THardwareInfo]);
	    }
	  }
	};
	TClusterHardwareInfo.prototype = {};
	TClusterHardwareInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          var _size104 = 0;
	          var _rtmp3108;
	          this.hardware_info = [];
	          var _etype107 = 0;
	          _rtmp3108 = input.readListBegin();
	          _etype107 = _rtmp3108.etype;
	          _size104 = _rtmp3108.size;
	          for (var _i109 = 0; _i109 < _size104; ++_i109) {
	            var elem110 = null;
	            elem110 = new ttypes.THardwareInfo();
	            elem110.read(input);
	            this.hardware_info.push(elem110);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TClusterHardwareInfo.prototype.write = function (output) {
	  output.writeStructBegin('TClusterHardwareInfo');
	  if (this.hardware_info !== null && this.hardware_info !== undefined) {
	    output.writeFieldBegin('hardware_info', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.hardware_info.length);
	    for (var iter111 in this.hardware_info) {
	      if (this.hardware_info.hasOwnProperty(iter111)) {
	        iter111 = this.hardware_info[iter111];
	        iter111.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TMemoryData = module.exports.TMemoryData = function (args) {
	  this.slab = null;
	  this.start_page = null;
	  this.num_pages = null;
	  this.touch = null;
	  this.chunk_key = null;
	  this.buffer_epoch = null;
	  this.is_free = null;
	  if (args) {
	    if (args.slab !== undefined && args.slab !== null) {
	      this.slab = args.slab;
	    }
	    if (args.start_page !== undefined && args.start_page !== null) {
	      this.start_page = args.start_page;
	    }
	    if (args.num_pages !== undefined && args.num_pages !== null) {
	      this.num_pages = args.num_pages;
	    }
	    if (args.touch !== undefined && args.touch !== null) {
	      this.touch = args.touch;
	    }
	    if (args.chunk_key !== undefined && args.chunk_key !== null) {
	      this.chunk_key = Thrift.copyList(args.chunk_key, [null]);
	    }
	    if (args.buffer_epoch !== undefined && args.buffer_epoch !== null) {
	      this.buffer_epoch = args.buffer_epoch;
	    }
	    if (args.is_free !== undefined && args.is_free !== null) {
	      this.is_free = args.is_free;
	    }
	  }
	};
	TMemoryData.prototype = {};
	TMemoryData.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.slab = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.start_page = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.num_pages = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I32) {
	          this.touch = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.LIST) {
	          var _size112 = 0;
	          var _rtmp3116;
	          this.chunk_key = [];
	          var _etype115 = 0;
	          _rtmp3116 = input.readListBegin();
	          _etype115 = _rtmp3116.etype;
	          _size112 = _rtmp3116.size;
	          for (var _i117 = 0; _i117 < _size112; ++_i117) {
	            var elem118 = null;
	            elem118 = input.readI64();
	            this.chunk_key.push(elem118);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I32) {
	          this.buffer_epoch = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_free = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TMemoryData.prototype.write = function (output) {
	  output.writeStructBegin('TMemoryData');
	  if (this.slab !== null && this.slab !== undefined) {
	    output.writeFieldBegin('slab', Thrift.Type.I64, 1);
	    output.writeI64(this.slab);
	    output.writeFieldEnd();
	  }
	  if (this.start_page !== null && this.start_page !== undefined) {
	    output.writeFieldBegin('start_page', Thrift.Type.I32, 2);
	    output.writeI32(this.start_page);
	    output.writeFieldEnd();
	  }
	  if (this.num_pages !== null && this.num_pages !== undefined) {
	    output.writeFieldBegin('num_pages', Thrift.Type.I64, 3);
	    output.writeI64(this.num_pages);
	    output.writeFieldEnd();
	  }
	  if (this.touch !== null && this.touch !== undefined) {
	    output.writeFieldBegin('touch', Thrift.Type.I32, 4);
	    output.writeI32(this.touch);
	    output.writeFieldEnd();
	  }
	  if (this.chunk_key !== null && this.chunk_key !== undefined) {
	    output.writeFieldBegin('chunk_key', Thrift.Type.LIST, 5);
	    output.writeListBegin(Thrift.Type.I64, this.chunk_key.length);
	    for (var iter119 in this.chunk_key) {
	      if (this.chunk_key.hasOwnProperty(iter119)) {
	        iter119 = this.chunk_key[iter119];
	        output.writeI64(iter119);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.buffer_epoch !== null && this.buffer_epoch !== undefined) {
	    output.writeFieldBegin('buffer_epoch', Thrift.Type.I32, 6);
	    output.writeI32(this.buffer_epoch);
	    output.writeFieldEnd();
	  }
	  if (this.is_free !== null && this.is_free !== undefined) {
	    output.writeFieldBegin('is_free', Thrift.Type.BOOL, 7);
	    output.writeBool(this.is_free);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TNodeMemoryInfo = module.exports.TNodeMemoryInfo = function (args) {
	  this.host_name = null;
	  this.page_size = null;
	  this.max_num_pages = null;
	  this.num_pages_allocated = null;
	  this.is_allocation_capped = null;
	  this.node_memory_data = null;
	  if (args) {
	    if (args.host_name !== undefined && args.host_name !== null) {
	      this.host_name = args.host_name;
	    }
	    if (args.page_size !== undefined && args.page_size !== null) {
	      this.page_size = args.page_size;
	    }
	    if (args.max_num_pages !== undefined && args.max_num_pages !== null) {
	      this.max_num_pages = args.max_num_pages;
	    }
	    if (args.num_pages_allocated !== undefined && args.num_pages_allocated !== null) {
	      this.num_pages_allocated = args.num_pages_allocated;
	    }
	    if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {
	      this.is_allocation_capped = args.is_allocation_capped;
	    }
	    if (args.node_memory_data !== undefined && args.node_memory_data !== null) {
	      this.node_memory_data = Thrift.copyList(args.node_memory_data, [ttypes.TMemoryData]);
	    }
	  }
	};
	TNodeMemoryInfo.prototype = {};
	TNodeMemoryInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.host_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.page_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.max_num_pages = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.num_pages_allocated = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_allocation_capped = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.LIST) {
	          var _size120 = 0;
	          var _rtmp3124;
	          this.node_memory_data = [];
	          var _etype123 = 0;
	          _rtmp3124 = input.readListBegin();
	          _etype123 = _rtmp3124.etype;
	          _size120 = _rtmp3124.size;
	          for (var _i125 = 0; _i125 < _size120; ++_i125) {
	            var elem126 = null;
	            elem126 = new ttypes.TMemoryData();
	            elem126.read(input);
	            this.node_memory_data.push(elem126);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TNodeMemoryInfo.prototype.write = function (output) {
	  output.writeStructBegin('TNodeMemoryInfo');
	  if (this.host_name !== null && this.host_name !== undefined) {
	    output.writeFieldBegin('host_name', Thrift.Type.STRING, 1);
	    output.writeString(this.host_name);
	    output.writeFieldEnd();
	  }
	  if (this.page_size !== null && this.page_size !== undefined) {
	    output.writeFieldBegin('page_size', Thrift.Type.I64, 2);
	    output.writeI64(this.page_size);
	    output.writeFieldEnd();
	  }
	  if (this.max_num_pages !== null && this.max_num_pages !== undefined) {
	    output.writeFieldBegin('max_num_pages', Thrift.Type.I64, 3);
	    output.writeI64(this.max_num_pages);
	    output.writeFieldEnd();
	  }
	  if (this.num_pages_allocated !== null && this.num_pages_allocated !== undefined) {
	    output.writeFieldBegin('num_pages_allocated', Thrift.Type.I64, 4);
	    output.writeI64(this.num_pages_allocated);
	    output.writeFieldEnd();
	  }
	  if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {
	    output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 5);
	    output.writeBool(this.is_allocation_capped);
	    output.writeFieldEnd();
	  }
	  if (this.node_memory_data !== null && this.node_memory_data !== undefined) {
	    output.writeFieldBegin('node_memory_data', Thrift.Type.LIST, 6);
	    output.writeListBegin(Thrift.Type.STRUCT, this.node_memory_data.length);
	    for (var iter127 in this.node_memory_data) {
	      if (this.node_memory_data.hasOwnProperty(iter127)) {
	        iter127 = this.node_memory_data[iter127];
	        iter127.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTableMeta = module.exports.TTableMeta = function (args) {
	  this.table_name = null;
	  this.num_cols = null;
	  this.col_datum_types = null;
	  this.is_view = null;
	  this.is_replicated = null;
	  this.shard_count = null;
	  this.max_rows = null;
	  if (args) {
	    if (args.table_name !== undefined && args.table_name !== null) {
	      this.table_name = args.table_name;
	    }
	    if (args.num_cols !== undefined && args.num_cols !== null) {
	      this.num_cols = args.num_cols;
	    }
	    if (args.col_datum_types !== undefined && args.col_datum_types !== null) {
	      this.col_datum_types = Thrift.copyList(args.col_datum_types, [null]);
	    }
	    if (args.is_view !== undefined && args.is_view !== null) {
	      this.is_view = args.is_view;
	    }
	    if (args.is_replicated !== undefined && args.is_replicated !== null) {
	      this.is_replicated = args.is_replicated;
	    }
	    if (args.shard_count !== undefined && args.shard_count !== null) {
	      this.shard_count = args.shard_count;
	    }
	    if (args.max_rows !== undefined && args.max_rows !== null) {
	      this.max_rows = args.max_rows;
	    }
	  }
	};
	TTableMeta.prototype = {};
	TTableMeta.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.table_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.num_cols = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          var _size128 = 0;
	          var _rtmp3132;
	          this.col_datum_types = [];
	          var _etype131 = 0;
	          _rtmp3132 = input.readListBegin();
	          _etype131 = _rtmp3132.etype;
	          _size128 = _rtmp3132.size;
	          for (var _i133 = 0; _i133 < _size128; ++_i133) {
	            var elem134 = null;
	            elem134 = input.readI32();
	            this.col_datum_types.push(elem134);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_view = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_replicated = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.shard_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I64) {
	          this.max_rows = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTableMeta.prototype.write = function (output) {
	  output.writeStructBegin('TTableMeta');
	  if (this.table_name !== null && this.table_name !== undefined) {
	    output.writeFieldBegin('table_name', Thrift.Type.STRING, 1);
	    output.writeString(this.table_name);
	    output.writeFieldEnd();
	  }
	  if (this.num_cols !== null && this.num_cols !== undefined) {
	    output.writeFieldBegin('num_cols', Thrift.Type.I64, 2);
	    output.writeI64(this.num_cols);
	    output.writeFieldEnd();
	  }
	  if (this.col_datum_types !== null && this.col_datum_types !== undefined) {
	    output.writeFieldBegin('col_datum_types', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.I32, this.col_datum_types.length);
	    for (var iter135 in this.col_datum_types) {
	      if (this.col_datum_types.hasOwnProperty(iter135)) {
	        iter135 = this.col_datum_types[iter135];
	        output.writeI32(iter135);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.is_view !== null && this.is_view !== undefined) {
	    output.writeFieldBegin('is_view', Thrift.Type.BOOL, 4);
	    output.writeBool(this.is_view);
	    output.writeFieldEnd();
	  }
	  if (this.is_replicated !== null && this.is_replicated !== undefined) {
	    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 5);
	    output.writeBool(this.is_replicated);
	    output.writeFieldEnd();
	  }
	  if (this.shard_count !== null && this.shard_count !== undefined) {
	    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);
	    output.writeI64(this.shard_count);
	    output.writeFieldEnd();
	  }
	  if (this.max_rows !== null && this.max_rows !== undefined) {
	    output.writeFieldBegin('max_rows', Thrift.Type.I64, 7);
	    output.writeI64(this.max_rows);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTableDetails = module.exports.TTableDetails = function (args) {
	  this.row_desc = null;
	  this.fragment_size = null;
	  this.page_size = null;
	  this.max_rows = null;
	  this.view_sql = null;
	  this.shard_count = null;
	  this.key_metainfo = null;
	  this.is_temporary = null;
	  if (args) {
	    if (args.row_desc !== undefined && args.row_desc !== null) {
	      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
	    }
	    if (args.fragment_size !== undefined && args.fragment_size !== null) {
	      this.fragment_size = args.fragment_size;
	    }
	    if (args.page_size !== undefined && args.page_size !== null) {
	      this.page_size = args.page_size;
	    }
	    if (args.max_rows !== undefined && args.max_rows !== null) {
	      this.max_rows = args.max_rows;
	    }
	    if (args.view_sql !== undefined && args.view_sql !== null) {
	      this.view_sql = args.view_sql;
	    }
	    if (args.shard_count !== undefined && args.shard_count !== null) {
	      this.shard_count = args.shard_count;
	    }
	    if (args.key_metainfo !== undefined && args.key_metainfo !== null) {
	      this.key_metainfo = args.key_metainfo;
	    }
	    if (args.is_temporary !== undefined && args.is_temporary !== null) {
	      this.is_temporary = args.is_temporary;
	    }
	  }
	};
	TTableDetails.prototype = {};
	TTableDetails.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          var _size136 = 0;
	          var _rtmp3140;
	          this.row_desc = [];
	          var _etype139 = 0;
	          _rtmp3140 = input.readListBegin();
	          _etype139 = _rtmp3140.etype;
	          _size136 = _rtmp3140.size;
	          for (var _i141 = 0; _i141 < _size136; ++_i141) {
	            var elem142 = null;
	            elem142 = new ttypes.TColumnType();
	            elem142.read(input);
	            this.row_desc.push(elem142);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.fragment_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.page_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.max_rows = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.view_sql = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.shard_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.STRING) {
	          this.key_metainfo = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_temporary = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTableDetails.prototype.write = function (output) {
	  output.writeStructBegin('TTableDetails');
	  if (this.row_desc !== null && this.row_desc !== undefined) {
	    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
	    for (var iter143 in this.row_desc) {
	      if (this.row_desc.hasOwnProperty(iter143)) {
	        iter143 = this.row_desc[iter143];
	        iter143.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.fragment_size !== null && this.fragment_size !== undefined) {
	    output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);
	    output.writeI64(this.fragment_size);
	    output.writeFieldEnd();
	  }
	  if (this.page_size !== null && this.page_size !== undefined) {
	    output.writeFieldBegin('page_size', Thrift.Type.I64, 3);
	    output.writeI64(this.page_size);
	    output.writeFieldEnd();
	  }
	  if (this.max_rows !== null && this.max_rows !== undefined) {
	    output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);
	    output.writeI64(this.max_rows);
	    output.writeFieldEnd();
	  }
	  if (this.view_sql !== null && this.view_sql !== undefined) {
	    output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);
	    output.writeString(this.view_sql);
	    output.writeFieldEnd();
	  }
	  if (this.shard_count !== null && this.shard_count !== undefined) {
	    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);
	    output.writeI64(this.shard_count);
	    output.writeFieldEnd();
	  }
	  if (this.key_metainfo !== null && this.key_metainfo !== undefined) {
	    output.writeFieldBegin('key_metainfo', Thrift.Type.STRING, 7);
	    output.writeString(this.key_metainfo);
	    output.writeFieldEnd();
	  }
	  if (this.is_temporary !== null && this.is_temporary !== undefined) {
	    output.writeFieldBegin('is_temporary', Thrift.Type.BOOL, 8);
	    output.writeBool(this.is_temporary);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColumnRange = module.exports.TColumnRange = function (args) {
	  this.type = null;
	  this.col_id = null;
	  this.table_id = null;
	  this.has_nulls = null;
	  this.int_min = null;
	  this.int_max = null;
	  this.bucket = null;
	  this.fp_min = null;
	  this.fp_max = null;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.col_id !== undefined && args.col_id !== null) {
	      this.col_id = args.col_id;
	    }
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.has_nulls !== undefined && args.has_nulls !== null) {
	      this.has_nulls = args.has_nulls;
	    }
	    if (args.int_min !== undefined && args.int_min !== null) {
	      this.int_min = args.int_min;
	    }
	    if (args.int_max !== undefined && args.int_max !== null) {
	      this.int_max = args.int_max;
	    }
	    if (args.bucket !== undefined && args.bucket !== null) {
	      this.bucket = args.bucket;
	    }
	    if (args.fp_min !== undefined && args.fp_min !== null) {
	      this.fp_min = args.fp_min;
	    }
	    if (args.fp_max !== undefined && args.fp_max !== null) {
	      this.fp_max = args.fp_max;
	    }
	  }
	};
	TColumnRange.prototype = {};
	TColumnRange.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.col_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.table_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.has_nulls = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.int_min = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.int_max = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I64) {
	          this.bucket = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.DOUBLE) {
	          this.fp_min = input.readDouble();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 9:
	        if (ftype == Thrift.Type.DOUBLE) {
	          this.fp_max = input.readDouble();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColumnRange.prototype.write = function (output) {
	  output.writeStructBegin('TColumnRange');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.col_id !== null && this.col_id !== undefined) {
	    output.writeFieldBegin('col_id', Thrift.Type.I32, 2);
	    output.writeI32(this.col_id);
	    output.writeFieldEnd();
	  }
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
	    output.writeI32(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.has_nulls !== null && this.has_nulls !== undefined) {
	    output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);
	    output.writeBool(this.has_nulls);
	    output.writeFieldEnd();
	  }
	  if (this.int_min !== null && this.int_min !== undefined) {
	    output.writeFieldBegin('int_min', Thrift.Type.I64, 5);
	    output.writeI64(this.int_min);
	    output.writeFieldEnd();
	  }
	  if (this.int_max !== null && this.int_max !== undefined) {
	    output.writeFieldBegin('int_max', Thrift.Type.I64, 6);
	    output.writeI64(this.int_max);
	    output.writeFieldEnd();
	  }
	  if (this.bucket !== null && this.bucket !== undefined) {
	    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);
	    output.writeI64(this.bucket);
	    output.writeFieldEnd();
	  }
	  if (this.fp_min !== null && this.fp_min !== undefined) {
	    output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);
	    output.writeDouble(this.fp_min);
	    output.writeFieldEnd();
	  }
	  if (this.fp_max !== null && this.fp_max !== undefined) {
	    output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);
	    output.writeDouble(this.fp_max);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDictionaryGeneration = module.exports.TDictionaryGeneration = function (args) {
	  this.dict_id = null;
	  this.entry_count = null;
	  if (args) {
	    if (args.dict_id !== undefined && args.dict_id !== null) {
	      this.dict_id = args.dict_id;
	    }
	    if (args.entry_count !== undefined && args.entry_count !== null) {
	      this.entry_count = args.entry_count;
	    }
	  }
	};
	TDictionaryGeneration.prototype = {};
	TDictionaryGeneration.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.dict_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.entry_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDictionaryGeneration.prototype.write = function (output) {
	  output.writeStructBegin('TDictionaryGeneration');
	  if (this.dict_id !== null && this.dict_id !== undefined) {
	    output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);
	    output.writeI32(this.dict_id);
	    output.writeFieldEnd();
	  }
	  if (this.entry_count !== null && this.entry_count !== undefined) {
	    output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);
	    output.writeI64(this.entry_count);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTableGeneration = module.exports.TTableGeneration = function (args) {
	  this.table_id = null;
	  this.tuple_count = null;
	  this.start_rowid = null;
	  if (args) {
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.tuple_count !== undefined && args.tuple_count !== null) {
	      this.tuple_count = args.tuple_count;
	    }
	    if (args.start_rowid !== undefined && args.start_rowid !== null) {
	      this.start_rowid = args.start_rowid;
	    }
	  }
	};
	TTableGeneration.prototype = {};
	TTableGeneration.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.table_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.tuple_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.start_rowid = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTableGeneration.prototype.write = function (output) {
	  output.writeStructBegin('TTableGeneration');
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);
	    output.writeI32(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.tuple_count !== null && this.tuple_count !== undefined) {
	    output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);
	    output.writeI64(this.tuple_count);
	    output.writeFieldEnd();
	  }
	  if (this.start_rowid !== null && this.start_rowid !== undefined) {
	    output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);
	    output.writeI64(this.start_rowid);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TPendingQuery = module.exports.TPendingQuery = function (args) {
	  this.id = null;
	  this.column_ranges = null;
	  this.dictionary_generations = null;
	  this.table_generations = null;
	  if (args) {
	    if (args.id !== undefined && args.id !== null) {
	      this.id = args.id;
	    }
	    if (args.column_ranges !== undefined && args.column_ranges !== null) {
	      this.column_ranges = Thrift.copyList(args.column_ranges, [ttypes.TColumnRange]);
	    }
	    if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {
	      this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [ttypes.TDictionaryGeneration]);
	    }
	    if (args.table_generations !== undefined && args.table_generations !== null) {
	      this.table_generations = Thrift.copyList(args.table_generations, [ttypes.TTableGeneration]);
	    }
	  }
	};
	TPendingQuery.prototype = {};
	TPendingQuery.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          var _size144 = 0;
	          var _rtmp3148;
	          this.column_ranges = [];
	          var _etype147 = 0;
	          _rtmp3148 = input.readListBegin();
	          _etype147 = _rtmp3148.etype;
	          _size144 = _rtmp3148.size;
	          for (var _i149 = 0; _i149 < _size144; ++_i149) {
	            var elem150 = null;
	            elem150 = new ttypes.TColumnRange();
	            elem150.read(input);
	            this.column_ranges.push(elem150);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          var _size151 = 0;
	          var _rtmp3155;
	          this.dictionary_generations = [];
	          var _etype154 = 0;
	          _rtmp3155 = input.readListBegin();
	          _etype154 = _rtmp3155.etype;
	          _size151 = _rtmp3155.size;
	          for (var _i156 = 0; _i156 < _size151; ++_i156) {
	            var elem157 = null;
	            elem157 = new ttypes.TDictionaryGeneration();
	            elem157.read(input);
	            this.dictionary_generations.push(elem157);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          var _size158 = 0;
	          var _rtmp3162;
	          this.table_generations = [];
	          var _etype161 = 0;
	          _rtmp3162 = input.readListBegin();
	          _etype161 = _rtmp3162.etype;
	          _size158 = _rtmp3162.size;
	          for (var _i163 = 0; _i163 < _size158; ++_i163) {
	            var elem164 = null;
	            elem164 = new ttypes.TTableGeneration();
	            elem164.read(input);
	            this.table_generations.push(elem164);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TPendingQuery.prototype.write = function (output) {
	  output.writeStructBegin('TPendingQuery');
	  if (this.id !== null && this.id !== undefined) {
	    output.writeFieldBegin('id', Thrift.Type.I64, 1);
	    output.writeI64(this.id);
	    output.writeFieldEnd();
	  }
	  if (this.column_ranges !== null && this.column_ranges !== undefined) {
	    output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);
	    for (var iter165 in this.column_ranges) {
	      if (this.column_ranges.hasOwnProperty(iter165)) {
	        iter165 = this.column_ranges[iter165];
	        iter165.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {
	    output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);
	    for (var iter166 in this.dictionary_generations) {
	      if (this.dictionary_generations.hasOwnProperty(iter166)) {
	        iter166 = this.dictionary_generations[iter166];
	        iter166.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.table_generations !== null && this.table_generations !== undefined) {
	    output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);
	    for (var iter167 in this.table_generations) {
	      if (this.table_generations.hasOwnProperty(iter167)) {
	        iter167 = this.table_generations[iter167];
	        iter167.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TVarLen = module.exports.TVarLen = function (args) {
	  this.payload = null;
	  this.is_null = null;
	  if (args) {
	    if (args.payload !== undefined && args.payload !== null) {
	      this.payload = args.payload;
	    }
	    if (args.is_null !== undefined && args.is_null !== null) {
	      this.is_null = args.is_null;
	    }
	  }
	};
	TVarLen.prototype = {};
	TVarLen.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.payload = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_null = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TVarLen.prototype.write = function (output) {
	  output.writeStructBegin('TVarLen');
	  if (this.payload !== null && this.payload !== undefined) {
	    output.writeFieldBegin('payload', Thrift.Type.STRING, 1);
	    output.writeBinary(this.payload);
	    output.writeFieldEnd();
	  }
	  if (this.is_null !== null && this.is_null !== undefined) {
	    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
	    output.writeBool(this.is_null);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDataBlockPtr = module.exports.TDataBlockPtr = function (args) {
	  this.fixed_len_data = null;
	  this.var_len_data = null;
	  if (args) {
	    if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {
	      this.fixed_len_data = args.fixed_len_data;
	    }
	    if (args.var_len_data !== undefined && args.var_len_data !== null) {
	      this.var_len_data = Thrift.copyList(args.var_len_data, [ttypes.TVarLen]);
	    }
	  }
	};
	TDataBlockPtr.prototype = {};
	TDataBlockPtr.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.fixed_len_data = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          var _size168 = 0;
	          var _rtmp3172;
	          this.var_len_data = [];
	          var _etype171 = 0;
	          _rtmp3172 = input.readListBegin();
	          _etype171 = _rtmp3172.etype;
	          _size168 = _rtmp3172.size;
	          for (var _i173 = 0; _i173 < _size168; ++_i173) {
	            var elem174 = null;
	            elem174 = new ttypes.TVarLen();
	            elem174.read(input);
	            this.var_len_data.push(elem174);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDataBlockPtr.prototype.write = function (output) {
	  output.writeStructBegin('TDataBlockPtr');
	  if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {
	    output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);
	    output.writeBinary(this.fixed_len_data);
	    output.writeFieldEnd();
	  }
	  if (this.var_len_data !== null && this.var_len_data !== undefined) {
	    output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);
	    for (var iter175 in this.var_len_data) {
	      if (this.var_len_data.hasOwnProperty(iter175)) {
	        iter175 = this.var_len_data[iter175];
	        iter175.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TInsertData = module.exports.TInsertData = function (args) {
	  this.db_id = null;
	  this.table_id = null;
	  this.column_ids = null;
	  this.data = null;
	  this.num_rows = null;
	  if (args) {
	    if (args.db_id !== undefined && args.db_id !== null) {
	      this.db_id = args.db_id;
	    }
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.column_ids !== undefined && args.column_ids !== null) {
	      this.column_ids = Thrift.copyList(args.column_ids, [null]);
	    }
	    if (args.data !== undefined && args.data !== null) {
	      this.data = Thrift.copyList(args.data, [ttypes.TDataBlockPtr]);
	    }
	    if (args.num_rows !== undefined && args.num_rows !== null) {
	      this.num_rows = args.num_rows;
	    }
	  }
	};
	TInsertData.prototype = {};
	TInsertData.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.db_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.table_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          var _size176 = 0;
	          var _rtmp3180;
	          this.column_ids = [];
	          var _etype179 = 0;
	          _rtmp3180 = input.readListBegin();
	          _etype179 = _rtmp3180.etype;
	          _size176 = _rtmp3180.size;
	          for (var _i181 = 0; _i181 < _size176; ++_i181) {
	            var elem182 = null;
	            elem182 = input.readI32();
	            this.column_ids.push(elem182);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          var _size183 = 0;
	          var _rtmp3187;
	          this.data = [];
	          var _etype186 = 0;
	          _rtmp3187 = input.readListBegin();
	          _etype186 = _rtmp3187.etype;
	          _size183 = _rtmp3187.size;
	          for (var _i188 = 0; _i188 < _size183; ++_i188) {
	            var elem189 = null;
	            elem189 = new ttypes.TDataBlockPtr();
	            elem189.read(input);
	            this.data.push(elem189);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.num_rows = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TInsertData.prototype.write = function (output) {
	  output.writeStructBegin('TInsertData');
	  if (this.db_id !== null && this.db_id !== undefined) {
	    output.writeFieldBegin('db_id', Thrift.Type.I32, 1);
	    output.writeI32(this.db_id);
	    output.writeFieldEnd();
	  }
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
	    output.writeI32(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.column_ids !== null && this.column_ids !== undefined) {
	    output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.I32, this.column_ids.length);
	    for (var iter190 in this.column_ids) {
	      if (this.column_ids.hasOwnProperty(iter190)) {
	        iter190 = this.column_ids[iter190];
	        output.writeI32(iter190);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.data !== null && this.data !== undefined) {
	    output.writeFieldBegin('data', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
	    for (var iter191 in this.data) {
	      if (this.data.hasOwnProperty(iter191)) {
	        iter191 = this.data[iter191];
	        iter191.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.num_rows !== null && this.num_rows !== undefined) {
	    output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);
	    output.writeI64(this.num_rows);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TPendingRenderQuery = module.exports.TPendingRenderQuery = function (args) {
	  this.id = null;
	  if (args) {
	    if (args.id !== undefined && args.id !== null) {
	      this.id = args.id;
	    }
	  }
	};
	TPendingRenderQuery.prototype = {};
	TPendingRenderQuery.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TPendingRenderQuery.prototype.write = function (output) {
	  output.writeStructBegin('TPendingRenderQuery');
	  if (this.id !== null && this.id !== undefined) {
	    output.writeFieldBegin('id', Thrift.Type.I64, 1);
	    output.writeI64(this.id);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRenderParseResult = module.exports.TRenderParseResult = function (args) {
	  this.merge_type = null;
	  this.node_id = null;
	  this.execution_time_ms = null;
	  this.render_time_ms = null;
	  this.total_time_ms = null;
	  if (args) {
	    if (args.merge_type !== undefined && args.merge_type !== null) {
	      this.merge_type = args.merge_type;
	    }
	    if (args.node_id !== undefined && args.node_id !== null) {
	      this.node_id = args.node_id;
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
	      this.render_time_ms = args.render_time_ms;
	    }
	    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
	      this.total_time_ms = args.total_time_ms;
	    }
	  }
	};
	TRenderParseResult.prototype = {};
	TRenderParseResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.merge_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.node_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.render_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.total_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRenderParseResult.prototype.write = function (output) {
	  output.writeStructBegin('TRenderParseResult');
	  if (this.merge_type !== null && this.merge_type !== undefined) {
	    output.writeFieldBegin('merge_type', Thrift.Type.I32, 1);
	    output.writeI32(this.merge_type);
	    output.writeFieldEnd();
	  }
	  if (this.node_id !== null && this.node_id !== undefined) {
	    output.writeFieldBegin('node_id', Thrift.Type.I32, 2);
	    output.writeI32(this.node_id);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
	    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
	    output.writeI64(this.render_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
	    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
	    output.writeI64(this.total_time_ms);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRawRenderPassDataResult = module.exports.TRawRenderPassDataResult = function (args) {
	  this.num_channels = null;
	  this.pixels = null;
	  this.row_ids_A = null;
	  this.row_ids_B = null;
	  this.table_ids = null;
	  this.accum_data = null;
	  if (args) {
	    if (args.num_channels !== undefined && args.num_channels !== null) {
	      this.num_channels = args.num_channels;
	    }
	    if (args.pixels !== undefined && args.pixels !== null) {
	      this.pixels = args.pixels;
	    }
	    if (args.row_ids_A !== undefined && args.row_ids_A !== null) {
	      this.row_ids_A = args.row_ids_A;
	    }
	    if (args.row_ids_B !== undefined && args.row_ids_B !== null) {
	      this.row_ids_B = args.row_ids_B;
	    }
	    if (args.table_ids !== undefined && args.table_ids !== null) {
	      this.table_ids = args.table_ids;
	    }
	    if (args.accum_data !== undefined && args.accum_data !== null) {
	      this.accum_data = args.accum_data;
	    }
	  }
	};
	TRawRenderPassDataResult.prototype = {};
	TRawRenderPassDataResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.num_channels = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.pixels = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.row_ids_A = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.row_ids_B = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.table_ids = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.accum_data = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRawRenderPassDataResult.prototype.write = function (output) {
	  output.writeStructBegin('TRawRenderPassDataResult');
	  if (this.num_channels !== null && this.num_channels !== undefined) {
	    output.writeFieldBegin('num_channels', Thrift.Type.I32, 1);
	    output.writeI32(this.num_channels);
	    output.writeFieldEnd();
	  }
	  if (this.pixels !== null && this.pixels !== undefined) {
	    output.writeFieldBegin('pixels', Thrift.Type.STRING, 2);
	    output.writeBinary(this.pixels);
	    output.writeFieldEnd();
	  }
	  if (this.row_ids_A !== null && this.row_ids_A !== undefined) {
	    output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 3);
	    output.writeBinary(this.row_ids_A);
	    output.writeFieldEnd();
	  }
	  if (this.row_ids_B !== null && this.row_ids_B !== undefined) {
	    output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 4);
	    output.writeBinary(this.row_ids_B);
	    output.writeFieldEnd();
	  }
	  if (this.table_ids !== null && this.table_ids !== undefined) {
	    output.writeFieldBegin('table_ids', Thrift.Type.STRING, 5);
	    output.writeBinary(this.table_ids);
	    output.writeFieldEnd();
	  }
	  if (this.accum_data !== null && this.accum_data !== undefined) {
	    output.writeFieldBegin('accum_data', Thrift.Type.STRING, 6);
	    output.writeBinary(this.accum_data);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRawPixelData = module.exports.TRawPixelData = function (args) {
	  this.width = null;
	  this.height = null;
	  this.render_pass_map = null;
	  if (args) {
	    if (args.width !== undefined && args.width !== null) {
	      this.width = args.width;
	    }
	    if (args.height !== undefined && args.height !== null) {
	      this.height = args.height;
	    }
	    if (args.render_pass_map !== undefined && args.render_pass_map !== null) {
	      this.render_pass_map = Thrift.copyMap(args.render_pass_map, [ttypes.TRawRenderPassDataResult]);
	    }
	  }
	};
	TRawPixelData.prototype = {};
	TRawPixelData.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.width = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.height = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.MAP) {
	          var _size192 = 0;
	          var _rtmp3196;
	          this.render_pass_map = {};
	          var _ktype193 = 0;
	          var _vtype194 = 0;
	          _rtmp3196 = input.readMapBegin();
	          _ktype193 = _rtmp3196.ktype;
	          _vtype194 = _rtmp3196.vtype;
	          _size192 = _rtmp3196.size;
	          for (var _i197 = 0; _i197 < _size192; ++_i197) {
	            var key198 = null;
	            var val199 = null;
	            key198 = input.readI32();
	            val199 = new ttypes.TRawRenderPassDataResult();
	            val199.read(input);
	            this.render_pass_map[key198] = val199;
	          }
	          input.readMapEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRawPixelData.prototype.write = function (output) {
	  output.writeStructBegin('TRawPixelData');
	  if (this.width !== null && this.width !== undefined) {
	    output.writeFieldBegin('width', Thrift.Type.I32, 1);
	    output.writeI32(this.width);
	    output.writeFieldEnd();
	  }
	  if (this.height !== null && this.height !== undefined) {
	    output.writeFieldBegin('height', Thrift.Type.I32, 2);
	    output.writeI32(this.height);
	    output.writeFieldEnd();
	  }
	  if (this.render_pass_map !== null && this.render_pass_map !== undefined) {
	    output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);
	    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));
	    for (var kiter200 in this.render_pass_map) {
	      if (this.render_pass_map.hasOwnProperty(kiter200)) {
	        var viter201 = this.render_pass_map[kiter200];
	        output.writeI32(kiter200);
	        viter201.write(output);
	      }
	    }
	    output.writeMapEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRenderDatum = module.exports.TRenderDatum = function (args) {
	  this.type = null;
	  this.cnt = null;
	  this.value = null;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.cnt !== undefined && args.cnt !== null) {
	      this.cnt = args.cnt;
	    }
	    if (args.value !== undefined && args.value !== null) {
	      this.value = args.value;
	    }
	  }
	};
	TRenderDatum.prototype = {};
	TRenderDatum.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.cnt = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.value = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRenderDatum.prototype.write = function (output) {
	  output.writeStructBegin('TRenderDatum');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.cnt !== null && this.cnt !== undefined) {
	    output.writeFieldBegin('cnt', Thrift.Type.I32, 2);
	    output.writeI32(this.cnt);
	    output.writeFieldEnd();
	  }
	  if (this.value !== null && this.value !== undefined) {
	    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
	    output.writeBinary(this.value);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRenderStepResult = module.exports.TRenderStepResult = function (args) {
	  this.merge_data = null;
	  this.raw_pixel_data = null;
	  this.execution_time_ms = null;
	  this.render_time_ms = null;
	  this.total_time_ms = null;
	  if (args) {
	    if (args.merge_data !== undefined && args.merge_data !== null) {
	      this.merge_data = Thrift.copyMap(args.merge_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, ttypes.TRenderDatum]);
	    }
	    if (args.raw_pixel_data !== undefined && args.raw_pixel_data !== null) {
	      this.raw_pixel_data = new ttypes.TRawPixelData(args.raw_pixel_data);
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
	      this.render_time_ms = args.render_time_ms;
	    }
	    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
	      this.total_time_ms = args.total_time_ms;
	    }
	  }
	};
	TRenderStepResult.prototype = {};
	TRenderStepResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.MAP) {
	          var _size202 = 0;
	          var _rtmp3206;
	          this.merge_data = {};
	          var _ktype203 = 0;
	          var _vtype204 = 0;
	          _rtmp3206 = input.readMapBegin();
	          _ktype203 = _rtmp3206.ktype;
	          _vtype204 = _rtmp3206.vtype;
	          _size202 = _rtmp3206.size;
	          for (var _i207 = 0; _i207 < _size202; ++_i207) {
	            var key208 = null;
	            var val209 = null;
	            key208 = input.readString();
	            var _size210 = 0;
	            var _rtmp3214;
	            val209 = {};
	            var _ktype211 = 0;
	            var _vtype212 = 0;
	            _rtmp3214 = input.readMapBegin();
	            _ktype211 = _rtmp3214.ktype;
	            _vtype212 = _rtmp3214.vtype;
	            _size210 = _rtmp3214.size;
	            for (var _i215 = 0; _i215 < _size210; ++_i215) {
	              var key216 = null;
	              var val217 = null;
	              key216 = input.readString();
	              var _size218 = 0;
	              var _rtmp3222;
	              val217 = {};
	              var _ktype219 = 0;
	              var _vtype220 = 0;
	              _rtmp3222 = input.readMapBegin();
	              _ktype219 = _rtmp3222.ktype;
	              _vtype220 = _rtmp3222.vtype;
	              _size218 = _rtmp3222.size;
	              for (var _i223 = 0; _i223 < _size218; ++_i223) {
	                var key224 = null;
	                var val225 = null;
	                key224 = input.readString();
	                var _size226 = 0;
	                var _rtmp3230;
	                val225 = {};
	                var _ktype227 = 0;
	                var _vtype228 = 0;
	                _rtmp3230 = input.readMapBegin();
	                _ktype227 = _rtmp3230.ktype;
	                _vtype228 = _rtmp3230.vtype;
	                _size226 = _rtmp3230.size;
	                for (var _i231 = 0; _i231 < _size226; ++_i231) {
	                  var key232 = null;
	                  var val233 = null;
	                  key232 = input.readString();
	                  var _size234 = 0;
	                  var _rtmp3238;
	                  val233 = [];
	                  var _etype237 = 0;
	                  _rtmp3238 = input.readListBegin();
	                  _etype237 = _rtmp3238.etype;
	                  _size234 = _rtmp3238.size;
	                  for (var _i239 = 0; _i239 < _size234; ++_i239) {
	                    var elem240 = null;
	                    elem240 = new ttypes.TRenderDatum();
	                    elem240.read(input);
	                    val233.push(elem240);
	                  }
	                  input.readListEnd();
	                  val225[key232] = val233;
	                }
	                input.readMapEnd();
	                val217[key224] = val225;
	              }
	              input.readMapEnd();
	              val209[key216] = val217;
	            }
	            input.readMapEnd();
	            this.merge_data[key208] = val209;
	          }
	          input.readMapEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.raw_pixel_data = new ttypes.TRawPixelData();
	          this.raw_pixel_data.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.render_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.total_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRenderStepResult.prototype.write = function (output) {
	  output.writeStructBegin('TRenderStepResult');
	  if (this.merge_data !== null && this.merge_data !== undefined) {
	    output.writeFieldBegin('merge_data', Thrift.Type.MAP, 1);
	    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merge_data));
	    for (var kiter241 in this.merge_data) {
	      if (this.merge_data.hasOwnProperty(kiter241)) {
	        var viter242 = this.merge_data[kiter241];
	        output.writeString(kiter241);
	        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter242));
	        for (var kiter243 in viter242) {
	          if (viter242.hasOwnProperty(kiter243)) {
	            var viter244 = viter242[kiter243];
	            output.writeString(kiter243);
	            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter244));
	            for (var kiter245 in viter244) {
	              if (viter244.hasOwnProperty(kiter245)) {
	                var viter246 = viter244[kiter245];
	                output.writeString(kiter245);
	                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter246));
	                for (var kiter247 in viter246) {
	                  if (viter246.hasOwnProperty(kiter247)) {
	                    var viter248 = viter246[kiter247];
	                    output.writeString(kiter247);
	                    output.writeListBegin(Thrift.Type.STRUCT, viter248.length);
	                    for (var iter249 in viter248) {
	                      if (viter248.hasOwnProperty(iter249)) {
	                        iter249 = viter248[iter249];
	                        iter249.write(output);
	                      }
	                    }
	                    output.writeListEnd();
	                  }
	                }
	                output.writeMapEnd();
	              }
	            }
	            output.writeMapEnd();
	          }
	        }
	        output.writeMapEnd();
	      }
	    }
	    output.writeMapEnd();
	    output.writeFieldEnd();
	  }
	  if (this.raw_pixel_data !== null && this.raw_pixel_data !== undefined) {
	    output.writeFieldBegin('raw_pixel_data', Thrift.Type.STRUCT, 2);
	    this.raw_pixel_data.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
	    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
	    output.writeI64(this.render_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
	    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
	    output.writeI64(this.total_time_ms);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDatabasePermissions = module.exports.TDatabasePermissions = function (args) {
	  this.create_ = null;
	  this.delete_ = null;
	  if (args) {
	    if (args.create_ !== undefined && args.create_ !== null) {
	      this.create_ = args.create_;
	    }
	    if (args.delete_ !== undefined && args.delete_ !== null) {
	      this.delete_ = args.delete_;
	    }
	  }
	};
	TDatabasePermissions.prototype = {};
	TDatabasePermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.create_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.delete_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDatabasePermissions.prototype.write = function (output) {
	  output.writeStructBegin('TDatabasePermissions');
	  if (this.create_ !== null && this.create_ !== undefined) {
	    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
	    output.writeBool(this.create_);
	    output.writeFieldEnd();
	  }
	  if (this.delete_ !== null && this.delete_ !== undefined) {
	    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);
	    output.writeBool(this.delete_);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTablePermissions = module.exports.TTablePermissions = function (args) {
	  this.create_ = null;
	  this.drop_ = null;
	  this.select_ = null;
	  this.insert_ = null;
	  this.update_ = null;
	  this.delete_ = null;
	  this.truncate_ = null;
	  if (args) {
	    if (args.create_ !== undefined && args.create_ !== null) {
	      this.create_ = args.create_;
	    }
	    if (args.drop_ !== undefined && args.drop_ !== null) {
	      this.drop_ = args.drop_;
	    }
	    if (args.select_ !== undefined && args.select_ !== null) {
	      this.select_ = args.select_;
	    }
	    if (args.insert_ !== undefined && args.insert_ !== null) {
	      this.insert_ = args.insert_;
	    }
	    if (args.update_ !== undefined && args.update_ !== null) {
	      this.update_ = args.update_;
	    }
	    if (args.delete_ !== undefined && args.delete_ !== null) {
	      this.delete_ = args.delete_;
	    }
	    if (args.truncate_ !== undefined && args.truncate_ !== null) {
	      this.truncate_ = args.truncate_;
	    }
	  }
	};
	TTablePermissions.prototype = {};
	TTablePermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.create_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.drop_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.select_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.insert_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.update_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.BOOL) {
	          this.delete_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.BOOL) {
	          this.truncate_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTablePermissions.prototype.write = function (output) {
	  output.writeStructBegin('TTablePermissions');
	  if (this.create_ !== null && this.create_ !== undefined) {
	    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
	    output.writeBool(this.create_);
	    output.writeFieldEnd();
	  }
	  if (this.drop_ !== null && this.drop_ !== undefined) {
	    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
	    output.writeBool(this.drop_);
	    output.writeFieldEnd();
	  }
	  if (this.select_ !== null && this.select_ !== undefined) {
	    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);
	    output.writeBool(this.select_);
	    output.writeFieldEnd();
	  }
	  if (this.insert_ !== null && this.insert_ !== undefined) {
	    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);
	    output.writeBool(this.insert_);
	    output.writeFieldEnd();
	  }
	  if (this.update_ !== null && this.update_ !== undefined) {
	    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);
	    output.writeBool(this.update_);
	    output.writeFieldEnd();
	  }
	  if (this.delete_ !== null && this.delete_ !== undefined) {
	    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);
	    output.writeBool(this.delete_);
	    output.writeFieldEnd();
	  }
	  if (this.truncate_ !== null && this.truncate_ !== undefined) {
	    output.writeFieldBegin('truncate_', Thrift.Type.BOOL, 7);
	    output.writeBool(this.truncate_);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDashboardPermissions = module.exports.TDashboardPermissions = function (args) {
	  this.create_ = null;
	  this.delete_ = null;
	  this.view_ = null;
	  this.edit_ = null;
	  if (args) {
	    if (args.create_ !== undefined && args.create_ !== null) {
	      this.create_ = args.create_;
	    }
	    if (args.delete_ !== undefined && args.delete_ !== null) {
	      this.delete_ = args.delete_;
	    }
	    if (args.view_ !== undefined && args.view_ !== null) {
	      this.view_ = args.view_;
	    }
	    if (args.edit_ !== undefined && args.edit_ !== null) {
	      this.edit_ = args.edit_;
	    }
	  }
	};
	TDashboardPermissions.prototype = {};
	TDashboardPermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.create_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.delete_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.view_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.edit_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDashboardPermissions.prototype.write = function (output) {
	  output.writeStructBegin('TDashboardPermissions');
	  if (this.create_ !== null && this.create_ !== undefined) {
	    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
	    output.writeBool(this.create_);
	    output.writeFieldEnd();
	  }
	  if (this.delete_ !== null && this.delete_ !== undefined) {
	    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);
	    output.writeBool(this.delete_);
	    output.writeFieldEnd();
	  }
	  if (this.view_ !== null && this.view_ !== undefined) {
	    output.writeFieldBegin('view_', Thrift.Type.BOOL, 3);
	    output.writeBool(this.view_);
	    output.writeFieldEnd();
	  }
	  if (this.edit_ !== null && this.edit_ !== undefined) {
	    output.writeFieldBegin('edit_', Thrift.Type.BOOL, 4);
	    output.writeBool(this.edit_);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TViewPermissions = module.exports.TViewPermissions = function (args) {
	  this.create_ = null;
	  this.drop_ = null;
	  this.select_ = null;
	  this.insert_ = null;
	  this.update_ = null;
	  this.delete_ = null;
	  if (args) {
	    if (args.create_ !== undefined && args.create_ !== null) {
	      this.create_ = args.create_;
	    }
	    if (args.drop_ !== undefined && args.drop_ !== null) {
	      this.drop_ = args.drop_;
	    }
	    if (args.select_ !== undefined && args.select_ !== null) {
	      this.select_ = args.select_;
	    }
	    if (args.insert_ !== undefined && args.insert_ !== null) {
	      this.insert_ = args.insert_;
	    }
	    if (args.update_ !== undefined && args.update_ !== null) {
	      this.update_ = args.update_;
	    }
	    if (args.delete_ !== undefined && args.delete_ !== null) {
	      this.delete_ = args.delete_;
	    }
	  }
	};
	TViewPermissions.prototype = {};
	TViewPermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.create_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.drop_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.select_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.insert_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.update_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.BOOL) {
	          this.delete_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TViewPermissions.prototype.write = function (output) {
	  output.writeStructBegin('TViewPermissions');
	  if (this.create_ !== null && this.create_ !== undefined) {
	    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
	    output.writeBool(this.create_);
	    output.writeFieldEnd();
	  }
	  if (this.drop_ !== null && this.drop_ !== undefined) {
	    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
	    output.writeBool(this.drop_);
	    output.writeFieldEnd();
	  }
	  if (this.select_ !== null && this.select_ !== undefined) {
	    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);
	    output.writeBool(this.select_);
	    output.writeFieldEnd();
	  }
	  if (this.insert_ !== null && this.insert_ !== undefined) {
	    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);
	    output.writeBool(this.insert_);
	    output.writeFieldEnd();
	  }
	  if (this.update_ !== null && this.update_ !== undefined) {
	    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);
	    output.writeBool(this.update_);
	    output.writeFieldEnd();
	  }
	  if (this.delete_ !== null && this.delete_ !== undefined) {
	    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);
	    output.writeBool(this.delete_);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDBObject = module.exports.TDBObject = function (args) {
	  this.objectName = null;
	  this.objectType = null;
	  this.privs = null;
	  this.grantee = null;
	  if (args) {
	    if (args.objectName !== undefined && args.objectName !== null) {
	      this.objectName = args.objectName;
	    }
	    if (args.objectType !== undefined && args.objectType !== null) {
	      this.objectType = args.objectType;
	    }
	    if (args.privs !== undefined && args.privs !== null) {
	      this.privs = Thrift.copyList(args.privs, [null]);
	    }
	    if (args.grantee !== undefined && args.grantee !== null) {
	      this.grantee = args.grantee;
	    }
	  }
	};
	TDBObject.prototype = {};
	TDBObject.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.objectName = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.objectType = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          var _size250 = 0;
	          var _rtmp3254;
	          this.privs = [];
	          var _etype253 = 0;
	          _rtmp3254 = input.readListBegin();
	          _etype253 = _rtmp3254.etype;
	          _size250 = _rtmp3254.size;
	          for (var _i255 = 0; _i255 < _size250; ++_i255) {
	            var elem256 = null;
	            elem256 = input.readBool();
	            this.privs.push(elem256);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.grantee = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDBObject.prototype.write = function (output) {
	  output.writeStructBegin('TDBObject');
	  if (this.objectName !== null && this.objectName !== undefined) {
	    output.writeFieldBegin('objectName', Thrift.Type.STRING, 1);
	    output.writeString(this.objectName);
	    output.writeFieldEnd();
	  }
	  if (this.objectType !== null && this.objectType !== undefined) {
	    output.writeFieldBegin('objectType', Thrift.Type.I32, 2);
	    output.writeI32(this.objectType);
	    output.writeFieldEnd();
	  }
	  if (this.privs !== null && this.privs !== undefined) {
	    output.writeFieldBegin('privs', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.BOOL, this.privs.length);
	    for (var iter257 in this.privs) {
	      if (this.privs.hasOwnProperty(iter257)) {
	        iter257 = this.privs[iter257];
	        output.writeBool(iter257);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.grantee !== null && this.grantee !== undefined) {
	    output.writeFieldBegin('grantee', Thrift.Type.STRING, 4);
	    output.writeString(this.grantee);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TLicenseInfo = module.exports.TLicenseInfo = function (args) {
	  this.claims = null;
	  if (args) {
	    if (args.claims !== undefined && args.claims !== null) {
	      this.claims = Thrift.copyList(args.claims, [null]);
	    }
	  }
	};
	TLicenseInfo.prototype = {};
	TLicenseInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          var _size258 = 0;
	          var _rtmp3262;
	          this.claims = [];
	          var _etype261 = 0;
	          _rtmp3262 = input.readListBegin();
	          _etype261 = _rtmp3262.etype;
	          _size258 = _rtmp3262.size;
	          for (var _i263 = 0; _i263 < _size258; ++_i263) {
	            var elem264 = null;
	            elem264 = input.readString();
	            this.claims.push(elem264);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TLicenseInfo.prototype.write = function (output) {
	  output.writeStructBegin('TLicenseInfo');
	  if (this.claims !== null && this.claims !== undefined) {
	    output.writeFieldBegin('claims', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRING, this.claims.length);
	    for (var iter265 in this.claims) {
	      if (this.claims.hasOwnProperty(iter265)) {
	        iter265 = this.claims[iter265];
	        output.writeString(iter265);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processQueryResults;

	var _processColumnarResults = __webpack_require__(121);

	var _processColumnarResults2 = _interopRequireDefault(_processColumnarResults);

	var _processRowResults = __webpack_require__(122);

	var _processRowResults2 = _interopRequireDefault(_processRowResults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Decides how to process raw results once they come back from the server.
	 *
	 * @param {Boolean} logging if enabled, will show how long the query took to execute in console
	 * @param {Function} updateQueryTimes A function that updates internal query times on connector
	 * @param {Object} options A list of options for processing the results
	 * @param {Boolean} options.isImage Set to true when querying for backend rendered images
	 * @param {Boolean} options.eliminateNullRows Removes null rows
	 * @param {String} options.query The SQL query string used only for logging
	 * @param {Number} options.queryId The ID of the query
	 * @param {Number} options.conId The unique connector identification
	 * @param {String} options.estimatedQueryTime The estimate of the query time
	 * @param {Array<Function>} the same callback coming from {@link #query}
	 * @param {Object} result - The query result used to decide whether to process
	 *                          as column or row results.
	 * @return {Object} null if image with callbacks, result if image with callbacks,
	 *                  otherwise formatted results
	 */
	function processQueryResults(logging, updateQueryTimes) {
	  return function (options, _datumEnum, result, callback) {
	    var isImage = false;
	    var eliminateNullRows = false;
	    var query = null;
	    var queryId = null;
	    var conId = null;
	    var estimatedQueryTime = null;
	    var hasCallback = Boolean(callback);

	    if (typeof options !== "undefined") {
	      isImage = options.isImage ? options.isImage : false;
	      eliminateNullRows = options.eliminateNullRows ? options.eliminateNullRows : false;
	      query = options.query ? options.query : null;
	      queryId = options.queryId ? options.queryId : null;
	      conId = typeof options.conId === "undefined" ? null : options.conId;
	      estimatedQueryTime = typeof options.estimatedQueryTime === "undefined" ? null : options.estimatedQueryTime;
	    }
	    if (result.execution_time_ms && conId !== null && estimatedQueryTime !== null) {
	      updateQueryTimes(conId, queryId, estimatedQueryTime, result.execution_time_ms);
	    }

	    // should use node_env
	    if (logging && result.execution_time_ms) {
	      console.log(query, "on Server", conId, "- Execution Time:", result.execution_time_ms, " ms, Total Time:", result.total_time_ms + "ms");
	    }

	    if (isImage && hasCallback) {
	      callback(null, result);
	    } else if (isImage && !hasCallback) {
	      return result;
	    } else {
	      var formattedResult = null;

	      if (!result.row_set) {
	        if (hasCallback) {
	          callback(new Error("No result to process"));
	        } else {
	          throw new Error("No result to process");
	        }
	        return;
	      }

	      if (result.row_set.is_columnar) {
	        formattedResult = (0, _processColumnarResults2.default)(result.row_set, eliminateNullRows, _datumEnum);
	      } else {
	        formattedResult = (0, _processRowResults2.default)(result.row_set, eliminateNullRows, _datumEnum);
	      }

	      formattedResult.timing = {
	        execution_time_ms: result.execution_time_ms,
	        total_time_ms: result.total_time_ms
	      };

	      if (hasCallback) {
	        callback(null, options.returnTiming ? formattedResult : formattedResult.results);
	      } else {
	        return options.returnTiming ? formattedResult : formattedResult.results;
	      }
	    }
	  };
	}

/***/ }),
/* 121 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processColumnarResults;
	/**
	 * Because it is inefficient for the server to return a row-based
	 * data structure, it is better to process the column-based results into a row-based
	 * format after the fact.
	 *
	 * @param {TRowSet} data The column-based data returned from a query
	 * @param {Boolean} eliminateNullRows A flag that allows removal of null rows from results
	 * @param {Object} dataEnum A list of types created from when executing {@link #invertDatumTypes}
	 * @returns {Object} processedResults The formatted results of the query
	 */
	function processColumnarResults(data, eliminateNullRows, dataEnum) {
	  var formattedResult = { fields: [], results: [] };
	  var numCols = data.row_desc.length;
	  var numRows = typeof data.columns[0] === "undefined" ? 0 : data.columns[0].nulls.length;
	  // to satisfy eslint no-magic-numbers rule
	  var oneThousandMilliseconds = 1000;

	  formattedResult.fields = data.row_desc.map(function (field) {
	    return {
	      name: field.col_name,
	      type: dataEnum[field.col_type.type],
	      is_array: field.col_type.is_array
	    };
	  });

	  for (var r = 0; r < numRows; r++) {
	    if (eliminateNullRows) {
	      var rowHasNull = false;
	      for (var c = 0; c < numCols; c++) {
	        if (data.columns[c].nulls[r]) {
	          rowHasNull = true;
	          break;
	        }
	      }
	      if (rowHasNull) {
	        continue; // eslint-disable-line no-continue
	      }
	    }
	    var row = {};
	    for (var _c = 0; _c < numCols; _c++) {
	      var fieldName = formattedResult.fields[_c].name;
	      var fieldType = formattedResult.fields[_c].type;
	      var fieldIsArray = formattedResult.fields[_c].is_array;
	      var isNull = data.columns[_c].nulls[r];
	      if (isNull) {
	        // row[fieldName] = "NULL";
	        row[fieldName] = null;
	        continue; // eslint-disable-line no-continue
	      }
	      if (fieldIsArray) {
	        row[fieldName] = [];
	        var arrayNumElems = data.columns[_c].data.arr_col[r].nulls.length;
	        for (var e = 0; e < arrayNumElems; e++) {
	          if (data.columns[_c].data.arr_col[r].nulls[e]) {
	            row[fieldName].push("NULL");
	            continue; // eslint-disable-line no-continue
	          }
	          switch (fieldType) {
	            case "BOOL":
	              row[fieldName].push(Boolean(data.columns[_c].data.arr_col[r].data.int_col[e]));
	              break;
	            case "SMALLINT":
	            case "INT":
	            case "BIGINT":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.int_col[e]);
	              break;
	            case "FLOAT":
	            case "DOUBLE":
	            case "DECIMAL":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.real_col[e]);
	              break;
	            case "STR":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.str_col[e]);
	              break;
	            case "TIME":
	            case "TIMESTAMP":
	            case "DATE":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.int_col[e] * oneThousandMilliseconds);
	              break;
	            default:
	              break;
	          }
	        }
	      } else {
	        switch (fieldType) {
	          case "BOOL":
	            row[fieldName] = Boolean(data.columns[_c].data.int_col[r]);
	            break;
	          case "SMALLINT":
	          case "INT":
	          case "BIGINT":
	            row[fieldName] = data.columns[_c].data.int_col[r];
	            break;
	          case "FLOAT":
	          case "DOUBLE":
	          case "DECIMAL":
	            row[fieldName] = data.columns[_c].data.real_col[r];
	            break;
	          case "STR":
	            row[fieldName] = data.columns[_c].data.str_col[r];
	            break;
	          case "TIME":
	          case "TIMESTAMP":
	          case "DATE":
	            row[fieldName] = new Date(data.columns[_c].data.int_col[r] * oneThousandMilliseconds);
	            break;
	          default:
	            break;
	        }
	      }
	    }
	    formattedResult.results.push(row);
	  }
	  return formattedResult;
	}

/***/ }),
/* 122 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processRowResults;
	/**
	 * It should be avoided to query for row-based results from the server, howerver
	 * it can still be done. In this case, still process them into the same format as
	 * (@link processColumnarResults} to keep the output consistent.
	 * @param {TRowSet} data - The row-based data returned from a query
	 * @param {Boolean} eliminateNullRows A flag that allows removal of null rows from results
	 * @param {Object} datumEnum A list of types created from when executing {@link #invertDatumTypes}
	 * @returns {Object} processedResults
	 */
	function processRowResults(data, eliminateNullRows, datumEnum) {
	  var numCols = data.row_desc.length;
	  var formattedResult = { fields: [], results: [] };

	  formattedResult.fields = data.row_desc.map(function (field) {
	    return {
	      name: field.col_name,
	      type: datumEnum[field.col_type.type],
	      is_array: field.col_type.is_array
	    };
	  });

	  formattedResult.results = [];
	  var numRows = 0;
	  if (typeof data.rows !== "undefined" && data.rows !== null) {
	    numRows = data.rows.length; // so won't throw if data.rows is missing
	  }

	  for (var r = 0; r < numRows; r++) {
	    if (eliminateNullRows) {
	      var rowHasNull = false;
	      for (var c = 0; c < numCols; c++) {
	        if (data.rows[r].columns[c].is_null) {
	          rowHasNull = true;
	          break;
	        }
	      }
	      if (rowHasNull) {
	        continue; // eslint-disable-line no-continue
	      }
	    }

	    var row = {};
	    for (var _c = 0; _c < numCols; _c++) {
	      var fieldName = formattedResult.fields[_c].name;
	      var fieldType = formattedResult.fields[_c].type;
	      var fieldIsArray = formattedResult.fields[_c].is_array;
	      if (fieldIsArray) {
	        if (data.rows[r].cols[_c].is_null) {
	          row[fieldName] = "NULL";
	          continue; // eslint-disable-line no-continue
	        }
	        row[fieldName] = [];
	        var arrayNumElems = data.rows[r].cols[_c].val.arr_val.length;
	        for (var e = 0; e < arrayNumElems; e++) {
	          var elemDatum = data.rows[r].cols[_c].val.arr_val[e];
	          if (elemDatum.is_null) {
	            row[fieldName].push("NULL");
	            continue; // eslint-disable-line no-continue
	          }
	          switch (fieldType) {
	            case "BOOL":
	              row[fieldName].push(Boolean(elemDatum.val.int_val));
	              break;
	            case "SMALLINT":
	            case "INT":
	            case "BIGINT":
	              row[fieldName].push(elemDatum.val.int_val);
	              break;
	            case "FLOAT":
	            case "DOUBLE":
	            case "DECIMAL":
	              row[fieldName].push(elemDatum.val.real_val);
	              break;
	            case "STR":
	              row[fieldName].push(elemDatum.val.str_val);
	              break;
	            case "TIME":
	            case "TIMESTAMP":
	            case "DATE":
	              row[fieldName].push(elemDatum.val.int_val * 1000); // eslint-disable-line no-magic-numbers
	              break;
	            default:
	              break;
	          }
	        }
	      } else {
	        var scalarDatum = data.rows[r].cols[_c];
	        if (scalarDatum.is_null) {
	          row[fieldName] = "NULL";
	          continue; // eslint-disable-line no-continue
	        }
	        switch (fieldType) {
	          case "BOOL":
	            row[fieldName] = Boolean(scalarDatum.val.int_val);
	            break;
	          case "SMALLINT":
	          case "INT":
	          case "BIGINT":
	            row[fieldName] = scalarDatum.val.int_val;
	            break;
	          case "FLOAT":
	          case "DOUBLE":
	          case "DECIMAL":
	            row[fieldName] = scalarDatum.val.real_val;
	            break;
	          case "STR":
	            row[fieldName] = scalarDatum.val.str_val;
	            break;
	          case "TIME":
	          case "TIMESTAMP":
	          case "DATE":
	            row[fieldName] = new Date(scalarDatum.val.int_val * 1000); // eslint-disable-line no-magic-numbers
	            break;
	          default:
	            break;
	        }
	      }
	    }
	    formattedResult.results.push(row);
	  }
	  return formattedResult;
	}

/***/ })
/******/ ]);