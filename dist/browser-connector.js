/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(4);
	__webpack_require__(6);
	__webpack_require__(8);
	__webpack_require__(10);
	__webpack_require__(12);
	module.exports = __webpack_require__(14);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(3))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(src) {
		function log(error) {
			(typeof console !== "undefined")
			&& (console.error || console.log)("[Script Loader]", error);
		}

		// Check for IE =< 8
		function isIE() {
			return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
		}

		try {
			if (typeof execScript !== "undefined" && isIE()) {
				execScript(src);
			} else if (typeof eval !== "undefined") {
				eval.call(null, src);
			} else {
				log("EvalError: No eval function available");
			}
		} catch (error) {
			log(error);
		}
	}


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jshint evil:true*/\n\n/**\n * The Thrift namespace houses the Apache Thrift JavaScript library\n * elements providing JavaScript bindings for the Apache Thrift RPC\n * system. End users will typically only directly make use of the\n * Transport (TXHRTransport/TWebSocketTransport) and Protocol\n * (TJSONPRotocol/TBinaryProtocol) constructors.\n *\n * Object methods beginning with a __ (e.g. __onOpen()) are internal\n * and should not be called outside of the object's own methods.\n *\n * This library creates one global object: Thrift\n * Code in this library must never create additional global identifiers,\n * all features must be scoped within the Thrift namespace.\n * @namespace\n * @example\n *     var transport = new Thrift.Transport(\"http://localhost:8585\");\n *     var protocol  = new Thrift.Protocol(transport);\n *     var client = new MyThriftSvcClient(protocol);\n *     var result = client.MyMethod();\n */\n\nvar Thrift = {\n    /**\n     * Thrift JavaScript library version.\n     * @readonly\n     * @const {string} Version\n     * @memberof Thrift\n     */\n    Version: '0.9.3',\n\n    /**\n     * Thrift IDL type string to Id mapping.\n     * @readonly\n     * @property {number}  STOP   - End of a set of fields.\n     * @property {number}  VOID   - No value (only legal for return types).\n     * @property {number}  BOOL   - True/False integer.\n     * @property {number}  BYTE   - Signed 8 bit integer.\n     * @property {number}  I08    - Signed 8 bit integer.\n     * @property {number}  DOUBLE - 64 bit IEEE 854 floating point.\n     * @property {number}  I16    - Signed 16 bit integer.\n     * @property {number}  I32    - Signed 32 bit integer.\n     * @property {number}  I64    - Signed 64 bit integer.\n     * @property {number}  STRING - Array of bytes representing a string of characters.\n     * @property {number}  UTF7   - Array of bytes representing a string of UTF7 encoded characters.\n     * @property {number}  STRUCT - A multifield type.\n     * @property {number}  MAP    - A collection type (map/associative-array/dictionary).\n     * @property {number}  SET    - A collection type (unordered and without repeated values).\n     * @property {number}  LIST   - A collection type (unordered).\n     * @property {number}  UTF8   - Array of bytes representing a string of UTF8 encoded characters.\n     * @property {number}  UTF16  - Array of bytes representing a string of UTF16 encoded characters.\n     */\n    Type: {\n        'STOP': 0,\n        'VOID': 1,\n        'BOOL': 2,\n        'BYTE': 3,\n        'I08': 3,\n        'DOUBLE': 4,\n        'I16': 6,\n        'I32': 8,\n        'I64': 10,\n        'STRING': 11,\n        'UTF7': 11,\n        'STRUCT': 12,\n        'MAP': 13,\n        'SET': 14,\n        'LIST': 15,\n        'UTF8': 16,\n        'UTF16': 17\n    },\n\n    /**\n     * Thrift RPC message type string to Id mapping.\n     * @readonly\n     * @property {number}  CALL      - RPC call sent from client to server.\n     * @property {number}  REPLY     - RPC call normal response from server to client.\n     * @property {number}  EXCEPTION - RPC call exception response from server to client.\n     * @property {number}  ONEWAY    - Oneway RPC call from client to server with no response.\n     */\n    MessageType: {\n        'CALL': 1,\n        'REPLY': 2,\n        'EXCEPTION': 3,\n        'ONEWAY': 4\n    },\n\n    /**\n     * Utility function returning the count of an object's own properties.\n     * @param {object} obj - Object to test.\n     * @returns {number} number of object's own properties\n     */\n    objectLength: function objectLength(obj) {\n        var length = 0;\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                length++;\n            }\n        }\n        return length;\n    },\n\n    /**\n     * Utility function to establish prototype inheritance.\n     * @see {@link http://javascript.crockford.com/prototypal.html|Prototypal Inheritance}\n     * @param {function} constructor - Contstructor function to set as derived.\n     * @param {function} superConstructor - Contstructor function to set as base.\n     * @param {string} [name] - Type name to set as name property in derived prototype.\n     */\n    inherits: function inherits(constructor, superConstructor, name) {\n        function F() {}\n        F.prototype = superConstructor.prototype;\n        constructor.prototype = new F();\n        constructor.prototype.name = name || \"\";\n    },\n\n    xhrWithCredentials: false\n};\n\n/**\n* Initializes a Thrift TException instance.\n* @constructor\n* @augments Error\n* @param {string} message - The TException message (distinct from the Error message).\n* @classdesc TException is the base class for all Thrift exceptions types.\n*/\nThrift.TException = function (message) {\n    this.message = message;\n};\nThrift.inherits(Thrift.TException, Error, 'TException');\n\n/**\n* Returns the message set on the exception.\n* @readonly\n* @returns {string} exception message\n*/\nThrift.TException.prototype.getMessage = function () {\n    return this.message;\n};\n\n/**\n* Thrift Application Exception type string to Id mapping.\n* @readonly\n* @property {number}  UNKNOWN                 - Unknown/undefined.\n* @property {number}  UNKNOWN_METHOD          - Client attempted to call a method unknown to the server.\n* @property {number}  INVALID_MESSAGE_TYPE    - Client passed an unknown/unsupported MessageType.\n* @property {number}  WRONG_METHOD_NAME       - Unused.\n* @property {number}  BAD_SEQUENCE_ID         - Unused in Thrift RPC, used to flag proprietary sequence number errors.\n* @property {number}  MISSING_RESULT          - Raised by a server processor if a handler fails to supply the required return result.\n* @property {number}  INTERNAL_ERROR          - Something bad happened.\n* @property {number}  PROTOCOL_ERROR          - The protocol layer failed to serialize or deserialize data.\n* @property {number}  INVALID_TRANSFORM       - Unused.\n* @property {number}  INVALID_PROTOCOL        - The protocol (or version) is not supported.\n* @property {number}  UNSUPPORTED_CLIENT_TYPE - Unused.\n*/\nThrift.TApplicationExceptionType = {\n    'UNKNOWN': 0,\n    'UNKNOWN_METHOD': 1,\n    'INVALID_MESSAGE_TYPE': 2,\n    'WRONG_METHOD_NAME': 3,\n    'BAD_SEQUENCE_ID': 4,\n    'MISSING_RESULT': 5,\n    'INTERNAL_ERROR': 6,\n    'PROTOCOL_ERROR': 7,\n    'INVALID_TRANSFORM': 8,\n    'INVALID_PROTOCOL': 9,\n    'UNSUPPORTED_CLIENT_TYPE': 10\n};\n\n/**\n* Initializes a Thrift TApplicationException instance.\n* @constructor\n* @augments Thrift.TException\n* @param {string} message - The TApplicationException message (distinct from the Error message).\n* @param {Thrift.TApplicationExceptionType} [code] - The TApplicationExceptionType code.\n* @classdesc TApplicationException is the exception class used to propagate exceptions from an RPC server back to a calling client.\n*/\nThrift.TApplicationException = function (message, code) {\n    this.message = message;\n    this.code = typeof code === \"number\" ? code : 0;\n};\nThrift.inherits(Thrift.TApplicationException, Thrift.TException, 'TApplicationException');\n\n/**\n* Read a TApplicationException from the supplied protocol.\n* @param {object} input - The input protocol to read from.\n*/\nThrift.TApplicationException.prototype.read = function (input) {\n    while (1) {\n        var ret = input.readFieldBegin();\n\n        if (ret.ftype == Thrift.Type.STOP) {\n            break;\n        }\n\n        var fid = ret.fid;\n\n        switch (fid) {\n            case 1:\n                if (ret.ftype == Thrift.Type.STRING) {\n                    ret = input.readString();\n                    this.message = ret.value;\n                } else {\n                    ret = input.skip(ret.ftype);\n                }\n                break;\n            case 2:\n                if (ret.ftype == Thrift.Type.I32) {\n                    ret = input.readI32();\n                    this.code = ret.value;\n                } else {\n                    ret = input.skip(ret.ftype);\n                }\n                break;\n            default:\n                ret = input.skip(ret.ftype);\n                break;\n        }\n\n        input.readFieldEnd();\n    }\n\n    input.readStructEnd();\n};\n\n/**\n* Wite a TApplicationException to the supplied protocol.\n* @param {object} output - The output protocol to write to.\n*/\nThrift.TApplicationException.prototype.write = function (output) {\n    output.writeStructBegin('TApplicationException');\n\n    if (this.message) {\n        output.writeFieldBegin('message', Thrift.Type.STRING, 1);\n        output.writeString(this.getMessage());\n        output.writeFieldEnd();\n    }\n\n    if (this.code) {\n        output.writeFieldBegin('type', Thrift.Type.I32, 2);\n        output.writeI32(this.code);\n        output.writeFieldEnd();\n    }\n\n    output.writeFieldStop();\n    output.writeStructEnd();\n};\n\n/**\n* Returns the application exception code set on the exception.\n* @readonly\n* @returns {Thrift.TApplicationExceptionType} exception code\n*/\nThrift.TApplicationException.prototype.getCode = function () {\n    return this.code;\n};\n\n/**\n* Constructor Function for the XHR transport.\n* If you do not specify a url then you must handle XHR operations on\n* your own. This type can also be constructed using the Transport alias\n* for backward compatibility.\n* @constructor\n* @param {string} [url] - The URL to connect to.\n* @classdesc The Apache Thrift Transport layer performs byte level I/O\n* between RPC clients and servers. The JavaScript TXHRTransport object\n* uses Http[s]/XHR. Target servers must implement the http[s] transport\n* (see: node.js example server_http.js).\n* @example\n*     var transport = new Thrift.TXHRTransport(\"http://localhost:8585\");\n*/\nThrift.Transport = Thrift.TXHRTransport = function (url, options) {\n    this.url = url;\n    this.wpos = 0;\n    this.rpos = 0;\n    this.useCORS = options && options.useCORS;\n    this.send_buf = '';\n    this.recv_buf = '';\n};\n\nThrift.TXHRTransport.prototype = {\n    /**\n     * Gets the browser specific XmlHttpRequest Object.\n     * @returns {object} the browser XHR interface object\n     */\n    getXmlHttpRequestObject: function getXmlHttpRequestObject() {\n        try {\n            return new XMLHttpRequest();\n        } catch (e1) {}\n        try {\n            return new ActiveXObject('Msxml2.XMLHTTP');\n        } catch (e2) {}\n        try {\n            return new ActiveXObject('Microsoft.XMLHTTP');\n        } catch (e3) {}\n\n        throw \"Your browser doesn't support XHR.\";\n    },\n\n    /**\n     * Sends the current XRH request if the transport was created with a URL\n     * and the async parameter is false. If the transport was not created with\n     * a URL, or the async parameter is True and no callback is provided, or\n     * the URL is an empty string, the current send buffer is returned.\n     * @param {object} async - If true the current send buffer is returned.\n     * @param {object} callback - Optional async completion callback\n     * @returns {undefined|string} Nothing or the current send buffer.\n     * @throws {string} If XHR fails.\n     */\n    flush: function flush(async, callback) {\n        var self = this;\n        if (async && !callback || this.url === undefined || this.url === '') {\n            return this.send_buf;\n        }\n\n        var xreq = this.getXmlHttpRequestObject();\n\n        if (xreq.overrideMimeType) {\n            xreq.overrideMimeType('application/vnd.apache.thrift.json; charset=utf-8');\n        }\n\n        if (callback) {\n            //Ignore XHR callbacks until the data arrives, then call the\n            //  client's callback\n            xreq.onreadystatechange = function () {\n                var clientCallback = callback;\n                return function () {\n                    if (this.readyState == 4 && this.status == 200) {\n                        self.setRecvBuffer(this.responseText);\n                        clientCallback();\n                    }\n                };\n            }();\n        }\n\n        xreq.open('POST', this.url, !!async);\n        xreq.withCredentials = Thrift.xhrWithCredentials;\n        if (xreq.setRequestHeader) {\n            xreq.setRequestHeader('Accept', 'application/vnd.apache.thrift.json; charset=utf-8');\n            xreq.setRequestHeader('Content-Type', 'application/vnd.apache.thrift.json; charset=utf-8');\n        }\n\n        xreq.send(this.send_buf);\n        if (async && callback) {\n            return;\n        }\n\n        if (xreq.readyState != 4) {\n            throw 'encountered an unknown ajax ready state: ' + xreq.readyState;\n        }\n\n        if (xreq.status != 200) {\n            throw 'encountered a unknown request status: ' + xreq.status;\n        }\n\n        this.recv_buf = xreq.responseText;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Creates a jQuery XHR object to be used for a Thrift server call.\n     * @param {object} client - The Thrift Service client object generated by the IDL compiler.\n     * @param {object} postData - The message to send to the server.\n     * @param {function} args - The original call arguments with the success call back at the end.\n     * @param {function} recv_method - The Thrift Service Client receive method for the call.\n     * @returns {object} A new jQuery XHR object.\n     * @throws {string} If the jQuery version is prior to 1.5 or if jQuery is not found.\n     */\n    jqRequest: function jqRequest(client, postData, args, recv_method) {\n        if (typeof jQuery === 'undefined' || typeof jQuery.Deferred === 'undefined') {\n            throw 'Thrift.js requires jQuery 1.5+ to use asynchronous requests';\n        }\n\n        var thriftTransport = this;\n\n        var jqXHR = jQuery.ajax({\n            url: this.url,\n            data: postData,\n            type: 'POST',\n            cache: false,\n            contentType: 'application/vnd.apache.thrift.json; charset=utf-8',\n            dataType: 'text thrift',\n            converters: {\n                'text thrift': function textThrift(responseData) {\n                    thriftTransport.setRecvBuffer(responseData);\n                    var value = recv_method.call(client);\n                    return value;\n                }\n            },\n            context: client,\n            success: jQuery.makeArray(args).pop()\n        });\n\n        return jqXHR;\n    },\n\n    /**\n     * Sets the buffer to provide the protocol when deserializing.\n     * @param {string} buf - The buffer to supply the protocol.\n     */\n    setRecvBuffer: function setRecvBuffer(buf) {\n        this.recv_buf = buf;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Returns true if the transport is open, XHR always returns true.\n     * @readonly\n     * @returns {boolean} Always True.\n     */\n    isOpen: function isOpen() {\n        return true;\n    },\n\n    /**\n     * Opens the transport connection, with XHR this is a nop.\n     */\n    open: function open() {},\n\n    /**\n     * Closes the transport connection, with XHR this is a nop.\n     */\n    close: function close() {},\n\n    /**\n     * Returns the specified number of characters from the response\n     * buffer.\n     * @param {number} len - The number of characters to return.\n     * @returns {string} Characters sent by the server.\n     */\n    read: function read(len) {\n        var avail = this.wpos - this.rpos;\n\n        if (avail === 0) {\n            return '';\n        }\n\n        var give = len;\n\n        if (avail < len) {\n            give = avail;\n        }\n\n        var ret = this.read_buf.substr(this.rpos, give);\n        this.rpos += give;\n\n        //clear buf when complete?\n        return ret;\n    },\n\n    /**\n     * Returns the entire response buffer.\n     * @returns {string} Characters sent by the server.\n     */\n    readAll: function readAll() {\n        return this.recv_buf;\n    },\n\n    /**\n     * Sets the send buffer to buf.\n     * @param {string} buf - The buffer to send.\n     */\n    write: function write(buf) {\n        this.send_buf = buf;\n    },\n\n    /**\n     * Returns the send buffer.\n     * @readonly\n     * @returns {string} The send buffer.\n     */\n    getSendBuffer: function getSendBuffer() {\n        return this.send_buf;\n    }\n\n};\n\n/**\n* Constructor Function for the WebSocket transport.\n* @constructor\n* @param {string} [url] - The URL to connect to.\n* @classdesc The Apache Thrift Transport layer performs byte level I/O\n* between RPC clients and servers. The JavaScript TWebSocketTransport object\n* uses the WebSocket protocol. Target servers must implement WebSocket.\n* (see: node.js example server_http.js).\n* @example\n*   var transport = new Thrift.TWebSocketTransport(\"http://localhost:8585\");\n*/\nThrift.TWebSocketTransport = function (url) {\n    this.__reset(url);\n};\n\nThrift.TWebSocketTransport.prototype = {\n    __reset: function __reset(url) {\n        this.url = url; //Where to connect\n        this.socket = null; //The web socket\n        this.callbacks = []; //Pending callbacks\n        this.send_pending = []; //Buffers/Callback pairs waiting to be sent\n        this.send_buf = ''; //Outbound data, immutable until sent\n        this.recv_buf = ''; //Inbound data\n        this.rb_wpos = 0; //Network write position in receive buffer\n        this.rb_rpos = 0; //Client read position in receive buffer\n    },\n\n    /**\n     * Sends the current WS request and registers callback. The async\n     * parameter is ignored (WS flush is always async) and the callback\n     * function parameter is required.\n     * @param {object} async - Ignored.\n     * @param {object} callback - The client completion callback.\n     * @returns {undefined|string} Nothing (undefined)\n     */\n    flush: function flush(async, callback) {\n        var self = this;\n        if (this.isOpen()) {\n            //Send data and register a callback to invoke the client callback\n            this.socket.send(this.send_buf);\n            this.callbacks.push(function () {\n                var clientCallback = callback;\n                return function (msg) {\n                    self.setRecvBuffer(msg);\n                    clientCallback();\n                };\n            }());\n        } else {\n            //Queue the send to go out __onOpen\n            this.send_pending.push({\n                buf: this.send_buf,\n                cb: callback\n            });\n        }\n    },\n\n    __onOpen: function __onOpen() {\n        var self = this;\n        if (this.send_pending.length > 0) {\n            //If the user made calls before the connection was fully\n            //open, send them now\n            this.send_pending.forEach(function (elem) {\n                this.socket.send(elem.buf);\n                this.callbacks.push(function () {\n                    var clientCallback = elem.cb;\n                    return function (msg) {\n                        self.setRecvBuffer(msg);\n                        clientCallback();\n                    };\n                }());\n            });\n            this.send_pending = [];\n        }\n    },\n\n    __onClose: function __onClose(evt) {\n        this.__reset(this.url);\n    },\n\n    __onMessage: function __onMessage(evt) {\n        if (this.callbacks.length) {\n            this.callbacks.shift()(evt.data);\n        }\n    },\n\n    __onError: function __onError(evt) {\n        console.log(\"Thrift WebSocket Error: \" + evt.toString());\n        this.socket.close();\n    },\n\n    /**\n     * Sets the buffer to use when receiving server responses.\n     * @param {string} buf - The buffer to receive server responses.\n     */\n    setRecvBuffer: function setRecvBuffer(buf) {\n        this.recv_buf = buf;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Returns true if the transport is open\n     * @readonly\n     * @returns {boolean}\n     */\n    isOpen: function isOpen() {\n        return this.socket && this.socket.readyState == this.socket.OPEN;\n    },\n\n    /**\n     * Opens the transport connection\n     */\n    open: function open() {\n        //If OPEN/CONNECTING/CLOSING ignore additional opens\n        if (this.socket && this.socket.readyState != this.socket.CLOSED) {\n            return;\n        }\n        //If there is no socket or the socket is closed:\n        this.socket = new WebSocket(this.url);\n        this.socket.onopen = this.__onOpen.bind(this);\n        this.socket.onmessage = this.__onMessage.bind(this);\n        this.socket.onerror = this.__onError.bind(this);\n        this.socket.onclose = this.__onClose.bind(this);\n    },\n\n    /**\n     * Closes the transport connection\n     */\n    close: function close() {\n        this.socket.close();\n    },\n\n    /**\n     * Returns the specified number of characters from the response\n     * buffer.\n     * @param {number} len - The number of characters to return.\n     * @returns {string} Characters sent by the server.\n     */\n    read: function read(len) {\n        var avail = this.wpos - this.rpos;\n\n        if (avail === 0) {\n            return '';\n        }\n\n        var give = len;\n\n        if (avail < len) {\n            give = avail;\n        }\n\n        var ret = this.read_buf.substr(this.rpos, give);\n        this.rpos += give;\n\n        //clear buf when complete?\n        return ret;\n    },\n\n    /**\n     * Returns the entire response buffer.\n     * @returns {string} Characters sent by the server.\n     */\n    readAll: function readAll() {\n        return this.recv_buf;\n    },\n\n    /**\n     * Sets the send buffer to buf.\n     * @param {string} buf - The buffer to send.\n     */\n    write: function write(buf) {\n        this.send_buf = buf;\n    },\n\n    /**\n     * Returns the send buffer.\n     * @readonly\n     * @returns {string} The send buffer.\n     */\n    getSendBuffer: function getSendBuffer() {\n        return this.send_buf;\n    }\n\n};\n\n/**\n* Initializes a Thrift JSON protocol instance.\n* @constructor\n* @param {Thrift.Transport} transport - The transport to serialize to/from.\n* @classdesc Apache Thrift Protocols perform serialization which enables cross\n* language RPC. The Protocol type is the JavaScript browser implementation\n* of the Apache Thrift TJSONProtocol.\n* @example\n*     var protocol  = new Thrift.Protocol(transport);\n*/\nThrift.TJSONProtocol = Thrift.Protocol = function (transport) {\n    this.tstack = [];\n    this.tpos = [];\n    this.transport = transport;\n};\n\n/**\n* Thrift IDL type Id to string mapping.\n* @readonly\n* @see {@link Thrift.Type}\n*/\nThrift.Protocol.Type = {};\nThrift.Protocol.Type[Thrift.Type.BOOL] = '\"tf\"';\nThrift.Protocol.Type[Thrift.Type.BYTE] = '\"i8\"';\nThrift.Protocol.Type[Thrift.Type.I16] = '\"i16\"';\nThrift.Protocol.Type[Thrift.Type.I32] = '\"i32\"';\nThrift.Protocol.Type[Thrift.Type.I64] = '\"i64\"';\nThrift.Protocol.Type[Thrift.Type.DOUBLE] = '\"dbl\"';\nThrift.Protocol.Type[Thrift.Type.STRUCT] = '\"rec\"';\nThrift.Protocol.Type[Thrift.Type.STRING] = '\"str\"';\nThrift.Protocol.Type[Thrift.Type.MAP] = '\"map\"';\nThrift.Protocol.Type[Thrift.Type.LIST] = '\"lst\"';\nThrift.Protocol.Type[Thrift.Type.SET] = '\"set\"';\n\n/**\n* Thrift IDL type string to Id mapping.\n* @readonly\n* @see {@link Thrift.Type}\n*/\nThrift.Protocol.RType = {};\nThrift.Protocol.RType.tf = Thrift.Type.BOOL;\nThrift.Protocol.RType.i8 = Thrift.Type.BYTE;\nThrift.Protocol.RType.i16 = Thrift.Type.I16;\nThrift.Protocol.RType.i32 = Thrift.Type.I32;\nThrift.Protocol.RType.i64 = Thrift.Type.I64;\nThrift.Protocol.RType.dbl = Thrift.Type.DOUBLE;\nThrift.Protocol.RType.rec = Thrift.Type.STRUCT;\nThrift.Protocol.RType.str = Thrift.Type.STRING;\nThrift.Protocol.RType.map = Thrift.Type.MAP;\nThrift.Protocol.RType.lst = Thrift.Type.LIST;\nThrift.Protocol.RType.set = Thrift.Type.SET;\n\n/**\n* The TJSONProtocol version number.\n* @readonly\n* @const {number} Version\n* @memberof Thrift.Protocol\n*/\nThrift.Protocol.Version = 1;\n\nThrift.Protocol.prototype = {\n    /**\n     * Returns the underlying transport.\n     * @readonly\n     * @returns {Thrift.Transport} The underlying transport.\n     */\n    getTransport: function getTransport() {\n        return this.transport;\n    },\n\n    /**\n     * Serializes the beginning of a Thrift RPC message.\n     * @param {string} name - The service method to call.\n     * @param {Thrift.MessageType} messageType - The type of method call.\n     * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).\n     */\n    writeMessageBegin: function writeMessageBegin(name, messageType, seqid) {\n        this.tstack = [];\n        this.tpos = [];\n\n        this.tstack.push([Thrift.Protocol.Version, '\"' + name + '\"', messageType, seqid]);\n    },\n\n    /**\n     * Serializes the end of a Thrift RPC message.\n     */\n    writeMessageEnd: function writeMessageEnd() {\n        var obj = this.tstack.pop();\n\n        this.wobj = this.tstack.pop();\n        this.wobj.push(obj);\n\n        this.wbuf = '[' + this.wobj.join(',') + ']';\n\n        this.transport.write(this.wbuf);\n    },\n\n    /**\n     * Serializes the beginning of a struct.\n     * @param {string} name - The name of the struct.\n     */\n    writeStructBegin: function writeStructBegin(name) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push({});\n    },\n\n    /**\n     * Serializes the end of a struct.\n     */\n    writeStructEnd: function writeStructEnd() {\n\n        var p = this.tpos.pop();\n        var struct = this.tstack[p];\n        var str = '{';\n        var first = true;\n        for (var key in struct) {\n            if (first) {\n                first = false;\n            } else {\n                str += ',';\n            }\n\n            str += key + ':' + struct[key];\n        }\n\n        str += '}';\n        this.tstack[p] = str;\n    },\n\n    /**\n     * Serializes the beginning of a struct field.\n     * @param {string} name - The name of the field.\n     * @param {Thrift.Protocol.Type} fieldType - The data type of the field.\n     * @param {number} fieldId - The field's unique identifier.\n     */\n    writeFieldBegin: function writeFieldBegin(name, fieldType, fieldId) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push({ 'fieldId': '\"' + fieldId + '\"', 'fieldType': Thrift.Protocol.Type[fieldType]\n        });\n    },\n\n    /**\n     * Serializes the end of a field.\n     */\n    writeFieldEnd: function writeFieldEnd() {\n        var value = this.tstack.pop();\n        var fieldInfo = this.tstack.pop();\n\n        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' + fieldInfo.fieldType + ':' + value + '}';\n        this.tpos.pop();\n    },\n\n    /**\n     * Serializes the end of the set of fields for a struct.\n     */\n    writeFieldStop: function writeFieldStop() {\n        //na\n    },\n\n    /**\n     * Serializes the beginning of a map collection.\n     * @param {Thrift.Type} keyType - The data type of the key.\n     * @param {Thrift.Type} valType - The data type of the value.\n     * @param {number} [size] - The number of elements in the map (ignored).\n     */\n    writeMapBegin: function writeMapBegin(keyType, valType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[keyType], Thrift.Protocol.Type[valType], 0]);\n    },\n\n    /**\n     * Serializes the end of a map.\n     */\n    writeMapEnd: function writeMapEnd() {\n        var p = this.tpos.pop();\n\n        if (p == this.tstack.length) {\n            return;\n        }\n\n        if ((this.tstack.length - p - 1) % 2 !== 0) {\n            this.tstack.push('');\n        }\n\n        var size = (this.tstack.length - p - 1) / 2;\n\n        this.tstack[p][this.tstack[p].length - 1] = size;\n\n        var map = '}';\n        var first = true;\n        while (this.tstack.length > p + 1) {\n            var v = this.tstack.pop();\n            var k = this.tstack.pop();\n            if (first) {\n                first = false;\n            } else {\n                map = ',' + map;\n            }\n\n            if (!isNaN(k)) {\n                k = '\"' + k + '\"';\n            } //json \"keys\" need to be strings\n            map = k + ':' + v + map;\n        }\n        map = '{' + map;\n\n        this.tstack[p].push(map);\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /**\n     * Serializes the beginning of a list collection.\n     * @param {Thrift.Type} elemType - The data type of the elements.\n     * @param {number} size - The number of elements in the list.\n     */\n    writeListBegin: function writeListBegin(elemType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[elemType], size]);\n    },\n\n    /**\n     * Serializes the end of a list.\n     */\n    writeListEnd: function writeListEnd() {\n        var p = this.tpos.pop();\n\n        while (this.tstack.length > p + 1) {\n            var tmpVal = this.tstack[p + 1];\n            this.tstack.splice(p + 1, 1);\n            this.tstack[p].push(tmpVal);\n        }\n\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /**\n     * Serializes the beginning of a set collection.\n     * @param {Thrift.Type} elemType - The data type of the elements.\n     * @param {number} size - The number of elements in the list.\n     */\n    writeSetBegin: function writeSetBegin(elemType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[elemType], size]);\n    },\n\n    /**\n     * Serializes the end of a set.\n     */\n    writeSetEnd: function writeSetEnd() {\n        var p = this.tpos.pop();\n\n        while (this.tstack.length > p + 1) {\n            var tmpVal = this.tstack[p + 1];\n            this.tstack.splice(p + 1, 1);\n            this.tstack[p].push(tmpVal);\n        }\n\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /** Serializes a boolean */\n    writeBool: function writeBool(value) {\n        this.tstack.push(value ? 1 : 0);\n    },\n\n    /** Serializes a number */\n    writeByte: function writeByte(i8) {\n        this.tstack.push(i8);\n    },\n\n    /** Serializes a number */\n    writeI16: function writeI16(i16) {\n        this.tstack.push(i16);\n    },\n\n    /** Serializes a number */\n    writeI32: function writeI32(i32) {\n        this.tstack.push(i32);\n    },\n\n    /** Serializes a number */\n    writeI64: function writeI64(i64) {\n        this.tstack.push(i64);\n    },\n\n    /** Serializes a number */\n    writeDouble: function writeDouble(dbl) {\n        this.tstack.push(dbl);\n    },\n\n    /** Serializes a string */\n    writeString: function writeString(str) {\n        // We do not encode uri components for wire transfer:\n        if (str === null) {\n            this.tstack.push(null);\n        } else {\n            // concat may be slower than building a byte buffer\n            var escapedString = '';\n            for (var i = 0; i < str.length; i++) {\n                var ch = str.charAt(i); // a single double quote: \"\n                if (ch === '\\\"') {\n                    escapedString += '\\\\\\\"'; // write out as: \\\"\n                } else if (ch === '\\\\') {\n                    // a single backslash\n                    escapedString += '\\\\\\\\'; // write out as double backslash\n                } else if (ch === '\\b') {\n                    // a single backspace: invisible\n                    escapedString += '\\\\b'; // write out as: \\b\"\n                } else if (ch === '\\f') {\n                    // a single formfeed: invisible\n                    escapedString += '\\\\f'; // write out as: \\f\"\n                } else if (ch === '\\n') {\n                    // a single newline: invisible\n                    escapedString += '\\\\n'; // write out as: \\n\"\n                } else if (ch === '\\r') {\n                    // a single return: invisible\n                    escapedString += '\\\\r'; // write out as: \\r\"\n                } else if (ch === '\\t') {\n                    // a single tab: invisible\n                    escapedString += '\\\\t'; // write out as: \\t\"\n                } else {\n                    escapedString += ch; // Else it need not be escaped\n                }\n            }\n            this.tstack.push('\"' + escapedString + '\"');\n        }\n    },\n\n    /** Serializes a string */\n    writeBinary: function writeBinary(str) {\n        this.writeString(str);\n    },\n\n    /**\n       @class\n       @name AnonReadMessageBeginReturn\n       @property {string} fname - The name of the service method.\n       @property {Thrift.MessageType} mtype - The type of message call.\n       @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).\n     */\n    /**\n     * Deserializes the beginning of a message.\n     * @returns {AnonReadMessageBeginReturn}\n     */\n    readMessageBegin: function readMessageBegin() {\n        this.rstack = [];\n        this.rpos = [];\n\n        if (typeof JSON !== 'undefined' && typeof JSON.parse === 'function') {\n            this.robj = JSON.parse(this.transport.readAll());\n        } else if (typeof jQuery !== 'undefined') {\n            this.robj = jQuery.parseJSON(this.transport.readAll());\n        } else {\n            this.robj = eval(this.transport.readAll());\n        }\n\n        var r = {};\n        var version = this.robj.shift();\n\n        if (version != Thrift.Protocol.Version) {\n            throw 'Wrong thrift protocol version: ' + version;\n        }\n\n        r.fname = this.robj.shift();\n        r.mtype = this.robj.shift();\n        r.rseqid = this.robj.shift();\n\n        //get to the main obj\n        this.rstack.push(this.robj.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a message. */\n    readMessageEnd: function readMessageEnd() {},\n\n    /**\n     * Deserializes the beginning of a struct.\n     * @param {string} [name] - The name of the struct (ignored)\n     * @returns {object} - An object with an empty string fname property\n     */\n    readStructBegin: function readStructBegin(name) {\n        var r = {};\n        r.fname = '';\n\n        //incase this is an array of structs\n        if (this.rstack[this.rstack.length - 1] instanceof Array) {\n            this.rstack.push(this.rstack[this.rstack.length - 1].shift());\n        }\n\n        return r;\n    },\n\n    /** Deserializes the end of a struct. */\n    readStructEnd: function readStructEnd() {\n        if (this.rstack[this.rstack.length - 2] instanceof Array) {\n            this.rstack.pop();\n        }\n    },\n\n    /**\n       @class\n       @name AnonReadFieldBeginReturn\n       @property {string} fname - The name of the field (always '').\n       @property {Thrift.Type} ftype - The data type of the field.\n       @property {number} fid - The unique identifier of the field.\n     */\n    /**\n     * Deserializes the beginning of a field.\n     * @returns {AnonReadFieldBeginReturn}\n     */\n    readFieldBegin: function readFieldBegin() {\n        var r = {};\n\n        var fid = -1;\n        var ftype = Thrift.Type.STOP;\n\n        //get a fieldId\n        for (var f in this.rstack[this.rstack.length - 1]) {\n            if (f === null) {\n                continue;\n            }\n\n            fid = parseInt(f, 10);\n            this.rpos.push(this.rstack.length);\n\n            var field = this.rstack[this.rstack.length - 1][fid];\n\n            //remove so we don't see it again\n            delete this.rstack[this.rstack.length - 1][fid];\n\n            this.rstack.push(field);\n\n            break;\n        }\n\n        if (fid != -1) {\n\n            //should only be 1 of these but this is the only\n            //way to match a key\n            for (var i in this.rstack[this.rstack.length - 1]) {\n                if (Thrift.Protocol.RType[i] === null) {\n                    continue;\n                }\n\n                ftype = Thrift.Protocol.RType[i];\n                this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][i];\n            }\n        }\n\n        r.fname = '';\n        r.ftype = ftype;\n        r.fid = fid;\n\n        return r;\n    },\n\n    /** Deserializes the end of a field. */\n    readFieldEnd: function readFieldEnd() {\n        var pos = this.rpos.pop();\n\n        //get back to the right place in the stack\n        while (this.rstack.length > pos) {\n            this.rstack.pop();\n        }\n    },\n\n    /**\n       @class\n       @name AnonReadMapBeginReturn\n       @property {Thrift.Type} ktype - The data type of the key.\n       @property {Thrift.Type} vtype - The data type of the value.\n       @property {number} size - The number of elements in the map.\n     */\n    /**\n     * Deserializes the beginning of a map.\n     * @returns {AnonReadMapBeginReturn}\n     */\n    readMapBegin: function readMapBegin() {\n        var map = this.rstack.pop();\n        var first = map.shift();\n        if (first instanceof Array) {\n            this.rstack.push(map);\n            map = first;\n            first = map.shift();\n        }\n\n        var r = {};\n        r.ktype = Thrift.Protocol.RType[first];\n        r.vtype = Thrift.Protocol.RType[map.shift()];\n        r.size = map.shift();\n\n        this.rpos.push(this.rstack.length);\n        this.rstack.push(map.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a map. */\n    readMapEnd: function readMapEnd() {\n        this.readFieldEnd();\n    },\n\n    /**\n       @class\n       @name AnonReadColBeginReturn\n       @property {Thrift.Type} etype - The data type of the element.\n       @property {number} size - The number of elements in the collection.\n     */\n    /**\n     * Deserializes the beginning of a list.\n     * @returns {AnonReadColBeginReturn}\n     */\n    readListBegin: function readListBegin() {\n        var list = this.rstack[this.rstack.length - 1];\n\n        var r = {};\n        r.etype = Thrift.Protocol.RType[list.shift()];\n        r.size = list.shift();\n\n        this.rpos.push(this.rstack.length);\n        this.rstack.push(list.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a list. */\n    readListEnd: function readListEnd() {\n        this.readFieldEnd();\n    },\n\n    /**\n     * Deserializes the beginning of a set.\n     * @returns {AnonReadColBeginReturn}\n     */\n    readSetBegin: function readSetBegin(elemType, size) {\n        return this.readListBegin(elemType, size);\n    },\n\n    /** Deserializes the end of a set. */\n    readSetEnd: function readSetEnd() {\n        return this.readListEnd();\n    },\n\n    /** Returns an object with a value property set to\n     *  False unless the next number in the protocol buffer\n     *  is 1, in which case the value property is True */\n    readBool: function readBool() {\n        var r = this.readI32();\n\n        if (r !== null && r.value == '1') {\n            r.value = true;\n        } else {\n            r.value = false;\n        }\n\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readByte: function readByte() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI16: function readI16() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI32: function readI32(f) {\n        if (f === undefined) {\n            f = this.rstack[this.rstack.length - 1];\n        }\n\n        var r = {};\n\n        if (f instanceof Array) {\n            if (f.length === 0) {\n                r.value = undefined;\n            } else {\n                if (!f.isReversed) {\n                    f.reverse();\n                    f.isReversed = true;\n                }\n                r.value = f.pop();\n            }\n        } else if (f instanceof Object) {\n            for (var i in f) {\n                if (i === null) {\n                    continue;\n                }\n                this.rstack.push(f[i]);\n                delete f[i];\n\n                r.value = i;\n                break;\n            }\n        } else {\n            r.value = f;\n            this.rstack.pop();\n        }\n\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI64: function readI64() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readDouble: function readDouble() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readString: function readString() {\n        var r = this.readI32();\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readBinary: function readBinary() {\n        return this.readString();\n    },\n\n    /**\n     * Method to arbitrarily skip over data */\n    skip: function skip(type) {\n        var ret, i;\n        switch (type) {\n            case Thrift.Type.STOP:\n                return null;\n\n            case Thrift.Type.BOOL:\n                return this.readBool();\n\n            case Thrift.Type.BYTE:\n                return this.readByte();\n\n            case Thrift.Type.I16:\n                return this.readI16();\n\n            case Thrift.Type.I32:\n                return this.readI32();\n\n            case Thrift.Type.I64:\n                return this.readI64();\n\n            case Thrift.Type.DOUBLE:\n                return this.readDouble();\n\n            case Thrift.Type.STRING:\n                return this.readString();\n\n            case Thrift.Type.STRUCT:\n                this.readStructBegin();\n                while (true) {\n                    ret = this.readFieldBegin();\n                    if (ret.ftype == Thrift.Type.STOP) {\n                        break;\n                    }\n                    this.skip(ret.ftype);\n                    this.readFieldEnd();\n                }\n                this.readStructEnd();\n                return null;\n\n            case Thrift.Type.MAP:\n                ret = this.readMapBegin();\n                for (i = 0; i < ret.size; i++) {\n                    if (i > 0) {\n                        if (this.rstack.length > this.rpos[this.rpos.length - 1] + 1) {\n                            this.rstack.pop();\n                        }\n                    }\n                    this.skip(ret.ktype);\n                    this.skip(ret.vtype);\n                }\n                this.readMapEnd();\n                return null;\n\n            case Thrift.Type.SET:\n                ret = this.readSetBegin();\n                for (i = 0; i < ret.size; i++) {\n                    this.skip(ret.etype);\n                }\n                this.readSetEnd();\n                return null;\n\n            case Thrift.Type.LIST:\n                ret = this.readListBegin();\n                for (i = 0; i < ret.size; i++) {\n                    this.skip(ret.etype);\n                }\n                this.readListEnd();\n                return null;\n        }\n    }\n};\n\n/**\n* Initializes a MutilplexProtocol Implementation as a Wrapper for Thrift.Protocol\n* @constructor\n*/\nThrift.MultiplexProtocol = function (srvName, trans, strictRead, strictWrite) {\n    Thrift.Protocol.call(this, trans, strictRead, strictWrite);\n    this.serviceName = srvName;\n};\nThrift.inherits(Thrift.MultiplexProtocol, Thrift.Protocol, 'multiplexProtocol');\n\n/** Override writeMessageBegin method of prototype*/\nThrift.MultiplexProtocol.prototype.writeMessageBegin = function (name, type, seqid) {\n\n    if (type === Thrift.MessageType.CALL || type === Thrift.MessageType.ONEWAY) {\n        Thrift.Protocol.prototype.writeMessageBegin.call(this, this.serviceName + \":\" + name, type, seqid);\n    } else {\n        Thrift.Protocol.prototype.writeMessageBegin.call(this, name, type, seqid);\n    }\n};\n\nThrift.Multiplexer = function () {\n    this.seqid = 0;\n};\n\n/** Instantiates a multiplexed client for a specific service\n* @constructor\n* @param {String} serviceName - The transport to serialize to/from.\n* @param {Thrift.ServiceClient} SCl - The Service Client Class\n* @param {Thrift.Transport} transport - Thrift.Transport instance which provides remote host:port\n* @example\n*    var mp = new Thrift.Multiplexer();\n*    var transport = new Thrift.Transport(\"http://localhost:9090/foo.thrift\");\n*    var protocol = new Thrift.Protocol(transport);\n*    var client = mp.createClient('AuthService', AuthServiceClient, transport);\n*/\nThrift.Multiplexer.prototype.createClient = function (serviceName, SCl, transport) {\n    if (SCl.Client) {\n        SCl = SCl.Client;\n    }\n    var self = this;\n    SCl.prototype.new_seqid = function () {\n        self.seqid += 1;\n        return self.seqid;\n    };\n    var client = new SCl(new Thrift.MultiplexProtocol(serviceName, transport));\n\n    return client;\n};\n\nvar copyList, copyMap;\n\nwindow.copyList = function (lst, types) {\n\n    if (!lst) {\n        return lst;\n    }\n\n    var type;\n\n    if (types.shift === undefined) {\n        type = types;\n    } else {\n        type = types[0];\n    }\n    var Type = type;\n\n    var len = lst.length,\n        result = [],\n        i,\n        val;\n    for (i = 0; i < len; i++) {\n        val = lst[i];\n        if (type === null) {\n            result.push(val);\n        } else if (type === copyMap || type === copyList) {\n            result.push(type(val, types.slice(1)));\n        } else {\n            result.push(new Type(val));\n        }\n    }\n    return result;\n};\n\nwindow.copyMap = function (obj, types) {\n\n    if (!obj) {\n        return obj;\n    }\n\n    var type;\n\n    if (types.shift === undefined) {\n        type = types;\n    } else {\n        type = types[0];\n    }\n    var Type = type;\n\n    var result = {},\n        val;\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            val = obj[prop];\n            if (type === null) {\n                result[prop] = val;\n            } else if (type === copyMap || type === copyList) {\n                result[prop] = type(val, types.slice(1));\n            } else {\n                result[prop] = new Type(val);\n            }\n        }\n    }\n    return result;\n};\n\nThrift.copyMap = copyMap;\nThrift.copyList = copyList;\n;window.Thrift = Thrift;"

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(5))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.10.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\n\nwindow.TDeviceType = {\n  'CPU': 0,\n  'GPU': 1\n};\nwindow.TDatumType = {\n  'SMALLINT': 0,\n  'INT': 1,\n  'BIGINT': 2,\n  'FLOAT': 3,\n  'DECIMAL': 4,\n  'DOUBLE': 5,\n  'STR': 6,\n  'TIME': 7,\n  'TIMESTAMP': 8,\n  'DATE': 9,\n  'BOOL': 10,\n  'INTERVAL_DAY_TIME': 11,\n  'INTERVAL_YEAR_MONTH': 12,\n  'POINT': 13,\n  'LINESTRING': 14,\n  'POLYGON': 15,\n  'MULTIPOLYGON': 16,\n  'TINYINT': 17,\n  'GEOMETRY': 18,\n  'GEOGRAPHY': 19\n};\nwindow.TEncodingType = {\n  'NONE': 0,\n  'FIXED': 1,\n  'RL': 2,\n  'DIFF': 3,\n  'DICT': 4,\n  'SPARSE': 5,\n  'GEOINT': 6,\n  'DATE_IN_DAYS': 7\n};\nwindow.TTypeInfo = function (args) {\n  this.type = null;\n  this.encoding = null;\n  this.nullable = null;\n  this.is_array = null;\n  this.precision = null;\n  this.scale = null;\n  this.comp_param = null;\n  this.size = -1;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.encoding !== undefined && args.encoding !== null) {\n      this.encoding = args.encoding;\n    }\n    if (args.nullable !== undefined && args.nullable !== null) {\n      this.nullable = args.nullable;\n    }\n    if (args.is_array !== undefined && args.is_array !== null) {\n      this.is_array = args.is_array;\n    }\n    if (args.precision !== undefined && args.precision !== null) {\n      this.precision = args.precision;\n    }\n    if (args.scale !== undefined && args.scale !== null) {\n      this.scale = args.scale;\n    }\n    if (args.comp_param !== undefined && args.comp_param !== null) {\n      this.comp_param = args.comp_param;\n    }\n    if (args.size !== undefined && args.size !== null) {\n      this.size = args.size;\n    }\n  }\n};\nTTypeInfo.prototype = {};\nTTypeInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.encoding = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.nullable = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_array = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.precision = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.scale = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I32) {\n          this.comp_param = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.I32) {\n          this.size = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTypeInfo.prototype.write = function (output) {\n  output.writeStructBegin('TTypeInfo');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.encoding !== null && this.encoding !== undefined) {\n    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);\n    output.writeI32(this.encoding);\n    output.writeFieldEnd();\n  }\n  if (this.nullable !== null && this.nullable !== undefined) {\n    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);\n    output.writeBool(this.nullable);\n    output.writeFieldEnd();\n  }\n  if (this.is_array !== null && this.is_array !== undefined) {\n    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);\n    output.writeBool(this.is_array);\n    output.writeFieldEnd();\n  }\n  if (this.precision !== null && this.precision !== undefined) {\n    output.writeFieldBegin('precision', Thrift.Type.I32, 5);\n    output.writeI32(this.precision);\n    output.writeFieldEnd();\n  }\n  if (this.scale !== null && this.scale !== undefined) {\n    output.writeFieldBegin('scale', Thrift.Type.I32, 6);\n    output.writeI32(this.scale);\n    output.writeFieldEnd();\n  }\n  if (this.comp_param !== null && this.comp_param !== undefined) {\n    output.writeFieldBegin('comp_param', Thrift.Type.I32, 7);\n    output.writeI32(this.comp_param);\n    output.writeFieldEnd();\n  }\n  if (this.size !== null && this.size !== undefined) {\n    output.writeFieldBegin('size', Thrift.Type.I32, 8);\n    output.writeI32(this.size);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(7))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.10.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\n\nwindow.TResultSetLayout = {\n  'GroupByPerfectHash': 0,\n  'GroupByBaselineHash': 1,\n  'Projection': 2,\n  'NonGroupedAggregate': 3\n};\nwindow.TCountDistinctImplType = {\n  'Invalid': 0,\n  'Bitmap': 1,\n  'StdSet': 2\n};\nwindow.TAggKind = {\n  'AVG': 0,\n  'MIN': 1,\n  'MAX': 2,\n  'SUM': 3,\n  'COUNT': 4,\n  'APPROX_COUNT_DISTINCT': 5,\n  'SAMPLE': 6,\n  'SINGLE_VALUE': 7\n};\nwindow.TSlotSize = function (args) {\n  this.padded = null;\n  this.logical = null;\n  if (args) {\n    if (args.padded !== undefined && args.padded !== null) {\n      this.padded = args.padded;\n    }\n    if (args.logical !== undefined && args.logical !== null) {\n      this.logical = args.logical;\n    }\n  }\n};\nTSlotSize.prototype = {};\nTSlotSize.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I16) {\n          this.padded = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I16) {\n          this.logical = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTSlotSize.prototype.write = function (output) {\n  output.writeStructBegin('TSlotSize');\n  if (this.padded !== null && this.padded !== undefined) {\n    output.writeFieldBegin('padded', Thrift.Type.I16, 1);\n    output.writeI16(this.padded);\n    output.writeFieldEnd();\n  }\n  if (this.logical !== null && this.logical !== undefined) {\n    output.writeFieldBegin('logical', Thrift.Type.I16, 2);\n    output.writeI16(this.logical);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColSlotContext = function (args) {\n  this.slot_sizes = null;\n  this.col_to_slot_map = null;\n  if (args) {\n    if (args.slot_sizes !== undefined && args.slot_sizes !== null) {\n      this.slot_sizes = Thrift.copyList(args.slot_sizes, [TSlotSize]);\n    }\n    if (args.col_to_slot_map !== undefined && args.col_to_slot_map !== null) {\n      this.col_to_slot_map = Thrift.copyList(args.col_to_slot_map, [Thrift.copyList, null]);\n    }\n  }\n};\nTColSlotContext.prototype = {};\nTColSlotContext.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size0 = 0;\n          var _rtmp34;\n          this.slot_sizes = [];\n          var _etype3 = 0;\n          _rtmp34 = input.readListBegin();\n          _etype3 = _rtmp34.etype;\n          _size0 = _rtmp34.size;\n          for (var _i5 = 0; _i5 < _size0; ++_i5) {\n            var elem6 = null;\n            elem6 = new TSlotSize();\n            elem6.read(input);\n            this.slot_sizes.push(elem6);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size7 = 0;\n          var _rtmp311;\n          this.col_to_slot_map = [];\n          var _etype10 = 0;\n          _rtmp311 = input.readListBegin();\n          _etype10 = _rtmp311.etype;\n          _size7 = _rtmp311.size;\n          for (var _i12 = 0; _i12 < _size7; ++_i12) {\n            var elem13 = null;\n            var _size14 = 0;\n            var _rtmp318;\n            elem13 = [];\n            var _etype17 = 0;\n            _rtmp318 = input.readListBegin();\n            _etype17 = _rtmp318.etype;\n            _size14 = _rtmp318.size;\n            for (var _i19 = 0; _i19 < _size14; ++_i19) {\n              var elem20 = null;\n              elem20 = input.readI32().value;\n              elem13.push(elem20);\n            }\n            input.readListEnd();\n            this.col_to_slot_map.push(elem13);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColSlotContext.prototype.write = function (output) {\n  output.writeStructBegin('TColSlotContext');\n  if (this.slot_sizes !== null && this.slot_sizes !== undefined) {\n    output.writeFieldBegin('slot_sizes', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.slot_sizes.length);\n    for (var iter21 in this.slot_sizes) {\n      if (this.slot_sizes.hasOwnProperty(iter21)) {\n        iter21 = this.slot_sizes[iter21];\n        iter21.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.col_to_slot_map !== null && this.col_to_slot_map !== undefined) {\n    output.writeFieldBegin('col_to_slot_map', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.LIST, this.col_to_slot_map.length);\n    for (var iter22 in this.col_to_slot_map) {\n      if (this.col_to_slot_map.hasOwnProperty(iter22)) {\n        iter22 = this.col_to_slot_map[iter22];\n        output.writeListBegin(Thrift.Type.I32, iter22.length);\n        for (var iter23 in iter22) {\n          if (iter22.hasOwnProperty(iter23)) {\n            iter23 = iter22[iter23];\n            output.writeI32(iter23);\n          }\n        }\n        output.writeListEnd();\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCountDistinctDescriptor = function (args) {\n  this.impl_type = null;\n  this.min_val = null;\n  this.bitmap_sz_bits = null;\n  this.approximate = null;\n  this.device_type = null;\n  this.sub_bitmap_count = null;\n  if (args) {\n    if (args.impl_type !== undefined && args.impl_type !== null) {\n      this.impl_type = args.impl_type;\n    }\n    if (args.min_val !== undefined && args.min_val !== null) {\n      this.min_val = args.min_val;\n    }\n    if (args.bitmap_sz_bits !== undefined && args.bitmap_sz_bits !== null) {\n      this.bitmap_sz_bits = args.bitmap_sz_bits;\n    }\n    if (args.approximate !== undefined && args.approximate !== null) {\n      this.approximate = args.approximate;\n    }\n    if (args.device_type !== undefined && args.device_type !== null) {\n      this.device_type = args.device_type;\n    }\n    if (args.sub_bitmap_count !== undefined && args.sub_bitmap_count !== null) {\n      this.sub_bitmap_count = args.sub_bitmap_count;\n    }\n  }\n};\nTCountDistinctDescriptor.prototype = {};\nTCountDistinctDescriptor.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.impl_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.min_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.bitmap_sz_bits = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.approximate = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.device_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.sub_bitmap_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCountDistinctDescriptor.prototype.write = function (output) {\n  output.writeStructBegin('TCountDistinctDescriptor');\n  if (this.impl_type !== null && this.impl_type !== undefined) {\n    output.writeFieldBegin('impl_type', Thrift.Type.I32, 1);\n    output.writeI32(this.impl_type);\n    output.writeFieldEnd();\n  }\n  if (this.min_val !== null && this.min_val !== undefined) {\n    output.writeFieldBegin('min_val', Thrift.Type.I64, 2);\n    output.writeI64(this.min_val);\n    output.writeFieldEnd();\n  }\n  if (this.bitmap_sz_bits !== null && this.bitmap_sz_bits !== undefined) {\n    output.writeFieldBegin('bitmap_sz_bits', Thrift.Type.I64, 3);\n    output.writeI64(this.bitmap_sz_bits);\n    output.writeFieldEnd();\n  }\n  if (this.approximate !== null && this.approximate !== undefined) {\n    output.writeFieldBegin('approximate', Thrift.Type.BOOL, 4);\n    output.writeBool(this.approximate);\n    output.writeFieldEnd();\n  }\n  if (this.device_type !== null && this.device_type !== undefined) {\n    output.writeFieldBegin('device_type', Thrift.Type.I32, 5);\n    output.writeI32(this.device_type);\n    output.writeFieldEnd();\n  }\n  if (this.sub_bitmap_count !== null && this.sub_bitmap_count !== undefined) {\n    output.writeFieldBegin('sub_bitmap_count', Thrift.Type.I64, 6);\n    output.writeI64(this.sub_bitmap_count);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TResultSetBufferDescriptor = function (args) {\n  this.layout = null;\n  this.keyless = null;\n  this.entry_count = null;\n  this.idx_target_as_key = null;\n  this.min_val = null;\n  this.max_val = null;\n  this.bucket = null;\n  this.group_col_widths = null;\n  this.key_bytewidth = null;\n  this.col_slot_context = null;\n  this.target_groupby_indices = null;\n  this.count_distinct_descriptors = null;\n  this.force_4byte_float = null;\n  if (args) {\n    if (args.layout !== undefined && args.layout !== null) {\n      this.layout = args.layout;\n    }\n    if (args.keyless !== undefined && args.keyless !== null) {\n      this.keyless = args.keyless;\n    }\n    if (args.entry_count !== undefined && args.entry_count !== null) {\n      this.entry_count = args.entry_count;\n    }\n    if (args.idx_target_as_key !== undefined && args.idx_target_as_key !== null) {\n      this.idx_target_as_key = args.idx_target_as_key;\n    }\n    if (args.min_val !== undefined && args.min_val !== null) {\n      this.min_val = args.min_val;\n    }\n    if (args.max_val !== undefined && args.max_val !== null) {\n      this.max_val = args.max_val;\n    }\n    if (args.bucket !== undefined && args.bucket !== null) {\n      this.bucket = args.bucket;\n    }\n    if (args.group_col_widths !== undefined && args.group_col_widths !== null) {\n      this.group_col_widths = Thrift.copyList(args.group_col_widths, [null]);\n    }\n    if (args.key_bytewidth !== undefined && args.key_bytewidth !== null) {\n      this.key_bytewidth = args.key_bytewidth;\n    }\n    if (args.col_slot_context !== undefined && args.col_slot_context !== null) {\n      this.col_slot_context = new TColSlotContext(args.col_slot_context);\n    }\n    if (args.target_groupby_indices !== undefined && args.target_groupby_indices !== null) {\n      this.target_groupby_indices = Thrift.copyList(args.target_groupby_indices, [null]);\n    }\n    if (args.count_distinct_descriptors !== undefined && args.count_distinct_descriptors !== null) {\n      this.count_distinct_descriptors = Thrift.copyList(args.count_distinct_descriptors, [TCountDistinctDescriptor]);\n    }\n    if (args.force_4byte_float !== undefined && args.force_4byte_float !== null) {\n      this.force_4byte_float = args.force_4byte_float;\n    }\n  }\n};\nTResultSetBufferDescriptor.prototype = {};\nTResultSetBufferDescriptor.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.layout = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.keyless = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.entry_count = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.idx_target_as_key = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.min_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.max_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.bucket = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.LIST) {\n          var _size24 = 0;\n          var _rtmp328;\n          this.group_col_widths = [];\n          var _etype27 = 0;\n          _rtmp328 = input.readListBegin();\n          _etype27 = _rtmp328.etype;\n          _size24 = _rtmp328.size;\n          for (var _i29 = 0; _i29 < _size24; ++_i29) {\n            var elem30 = null;\n            elem30 = input.readI16().value;\n            this.group_col_widths.push(elem30);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.I16) {\n          this.key_bytewidth = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.col_slot_context = new TColSlotContext();\n          this.col_slot_context.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 11:\n        if (ftype == Thrift.Type.LIST) {\n          var _size31 = 0;\n          var _rtmp335;\n          this.target_groupby_indices = [];\n          var _etype34 = 0;\n          _rtmp335 = input.readListBegin();\n          _etype34 = _rtmp335.etype;\n          _size31 = _rtmp335.size;\n          for (var _i36 = 0; _i36 < _size31; ++_i36) {\n            var elem37 = null;\n            elem37 = input.readI32().value;\n            this.target_groupby_indices.push(elem37);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 12:\n        if (ftype == Thrift.Type.LIST) {\n          var _size38 = 0;\n          var _rtmp342;\n          this.count_distinct_descriptors = [];\n          var _etype41 = 0;\n          _rtmp342 = input.readListBegin();\n          _etype41 = _rtmp342.etype;\n          _size38 = _rtmp342.size;\n          for (var _i43 = 0; _i43 < _size38; ++_i43) {\n            var elem44 = null;\n            elem44 = new TCountDistinctDescriptor();\n            elem44.read(input);\n            this.count_distinct_descriptors.push(elem44);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 13:\n        if (ftype == Thrift.Type.BOOL) {\n          this.force_4byte_float = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTResultSetBufferDescriptor.prototype.write = function (output) {\n  output.writeStructBegin('TResultSetBufferDescriptor');\n  if (this.layout !== null && this.layout !== undefined) {\n    output.writeFieldBegin('layout', Thrift.Type.I32, 1);\n    output.writeI32(this.layout);\n    output.writeFieldEnd();\n  }\n  if (this.keyless !== null && this.keyless !== undefined) {\n    output.writeFieldBegin('keyless', Thrift.Type.BOOL, 2);\n    output.writeBool(this.keyless);\n    output.writeFieldEnd();\n  }\n  if (this.entry_count !== null && this.entry_count !== undefined) {\n    output.writeFieldBegin('entry_count', Thrift.Type.I32, 3);\n    output.writeI32(this.entry_count);\n    output.writeFieldEnd();\n  }\n  if (this.idx_target_as_key !== null && this.idx_target_as_key !== undefined) {\n    output.writeFieldBegin('idx_target_as_key', Thrift.Type.I32, 4);\n    output.writeI32(this.idx_target_as_key);\n    output.writeFieldEnd();\n  }\n  if (this.min_val !== null && this.min_val !== undefined) {\n    output.writeFieldBegin('min_val', Thrift.Type.I64, 5);\n    output.writeI64(this.min_val);\n    output.writeFieldEnd();\n  }\n  if (this.max_val !== null && this.max_val !== undefined) {\n    output.writeFieldBegin('max_val', Thrift.Type.I64, 6);\n    output.writeI64(this.max_val);\n    output.writeFieldEnd();\n  }\n  if (this.bucket !== null && this.bucket !== undefined) {\n    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);\n    output.writeI64(this.bucket);\n    output.writeFieldEnd();\n  }\n  if (this.group_col_widths !== null && this.group_col_widths !== undefined) {\n    output.writeFieldBegin('group_col_widths', Thrift.Type.LIST, 8);\n    output.writeListBegin(Thrift.Type.I16, this.group_col_widths.length);\n    for (var iter45 in this.group_col_widths) {\n      if (this.group_col_widths.hasOwnProperty(iter45)) {\n        iter45 = this.group_col_widths[iter45];\n        output.writeI16(iter45);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.key_bytewidth !== null && this.key_bytewidth !== undefined) {\n    output.writeFieldBegin('key_bytewidth', Thrift.Type.I16, 9);\n    output.writeI16(this.key_bytewidth);\n    output.writeFieldEnd();\n  }\n  if (this.col_slot_context !== null && this.col_slot_context !== undefined) {\n    output.writeFieldBegin('col_slot_context', Thrift.Type.STRUCT, 10);\n    this.col_slot_context.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.target_groupby_indices !== null && this.target_groupby_indices !== undefined) {\n    output.writeFieldBegin('target_groupby_indices', Thrift.Type.LIST, 11);\n    output.writeListBegin(Thrift.Type.I32, this.target_groupby_indices.length);\n    for (var iter46 in this.target_groupby_indices) {\n      if (this.target_groupby_indices.hasOwnProperty(iter46)) {\n        iter46 = this.target_groupby_indices[iter46];\n        output.writeI32(iter46);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.count_distinct_descriptors !== null && this.count_distinct_descriptors !== undefined) {\n    output.writeFieldBegin('count_distinct_descriptors', Thrift.Type.LIST, 12);\n    output.writeListBegin(Thrift.Type.STRUCT, this.count_distinct_descriptors.length);\n    for (var iter47 in this.count_distinct_descriptors) {\n      if (this.count_distinct_descriptors.hasOwnProperty(iter47)) {\n        iter47 = this.count_distinct_descriptors[iter47];\n        iter47.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.force_4byte_float !== null && this.force_4byte_float !== undefined) {\n    output.writeFieldBegin('force_4byte_float', Thrift.Type.BOOL, 13);\n    output.writeBool(this.force_4byte_float);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTargetInfo = function (args) {\n  this.is_agg = null;\n  this.kind = null;\n  this.type = null;\n  this.arg_type = null;\n  this.skip_nulls = null;\n  this.is_distinct = null;\n  if (args) {\n    if (args.is_agg !== undefined && args.is_agg !== null) {\n      this.is_agg = args.is_agg;\n    }\n    if (args.kind !== undefined && args.kind !== null) {\n      this.kind = args.kind;\n    }\n    if (args.type !== undefined && args.type !== null) {\n      this.type = new TTypeInfo(args.type);\n    }\n    if (args.arg_type !== undefined && args.arg_type !== null) {\n      this.arg_type = new TTypeInfo(args.arg_type);\n    }\n    if (args.skip_nulls !== undefined && args.skip_nulls !== null) {\n      this.skip_nulls = args.skip_nulls;\n    }\n    if (args.is_distinct !== undefined && args.is_distinct !== null) {\n      this.is_distinct = args.is_distinct;\n    }\n  }\n};\nTTargetInfo.prototype = {};\nTTargetInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_agg = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.kind = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.type = new TTypeInfo();\n          this.type.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.arg_type = new TTypeInfo();\n          this.arg_type.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.skip_nulls = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_distinct = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTargetInfo.prototype.write = function (output) {\n  output.writeStructBegin('TTargetInfo');\n  if (this.is_agg !== null && this.is_agg !== undefined) {\n    output.writeFieldBegin('is_agg', Thrift.Type.BOOL, 1);\n    output.writeBool(this.is_agg);\n    output.writeFieldEnd();\n  }\n  if (this.kind !== null && this.kind !== undefined) {\n    output.writeFieldBegin('kind', Thrift.Type.I32, 2);\n    output.writeI32(this.kind);\n    output.writeFieldEnd();\n  }\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.STRUCT, 3);\n    this.type.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.arg_type !== null && this.arg_type !== undefined) {\n    output.writeFieldBegin('arg_type', Thrift.Type.STRUCT, 4);\n    this.arg_type.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.skip_nulls !== null && this.skip_nulls !== undefined) {\n    output.writeFieldBegin('skip_nulls', Thrift.Type.BOOL, 5);\n    output.writeBool(this.skip_nulls);\n    output.writeFieldEnd();\n  }\n  if (this.is_distinct !== null && this.is_distinct !== undefined) {\n    output.writeFieldBegin('is_distinct', Thrift.Type.BOOL, 6);\n    output.writeBool(this.is_distinct);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCountDistinctSetStorage = function (args) {\n  this.bitmap = null;\n  this.sparse_set = null;\n  if (args) {\n    if (args.bitmap !== undefined && args.bitmap !== null) {\n      this.bitmap = args.bitmap;\n    }\n    if (args.sparse_set !== undefined && args.sparse_set !== null) {\n      this.sparse_set = Thrift.copyList(args.sparse_set, [null]);\n    }\n  }\n};\nTCountDistinctSetStorage.prototype = {};\nTCountDistinctSetStorage.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.bitmap = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.SET) {\n          var _size48 = 0;\n          var _rtmp352;\n          this.sparse_set = [];\n          var _etype51 = 0;\n          _rtmp352 = input.readSetBegin();\n          _etype51 = _rtmp352.etype;\n          _size48 = _rtmp352.size;\n          for (var _i53 = 0; _i53 < _size48; ++_i53) {\n            var elem54 = null;\n            elem54 = input.readI64().value;\n            this.sparse_set.push(elem54);\n          }\n          input.readSetEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCountDistinctSetStorage.prototype.write = function (output) {\n  output.writeStructBegin('TCountDistinctSetStorage');\n  if (this.bitmap !== null && this.bitmap !== undefined) {\n    output.writeFieldBegin('bitmap', Thrift.Type.STRING, 1);\n    output.writeBinary(this.bitmap);\n    output.writeFieldEnd();\n  }\n  if (this.sparse_set !== null && this.sparse_set !== undefined) {\n    output.writeFieldBegin('sparse_set', Thrift.Type.SET, 2);\n    output.writeSetBegin(Thrift.Type.I64, this.sparse_set.length);\n    for (var iter55 in this.sparse_set) {\n      if (this.sparse_set.hasOwnProperty(iter55)) {\n        iter55 = this.sparse_set[iter55];\n        output.writeI64(iter55);\n      }\n    }\n    output.writeSetEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCountDistinctSet = function (args) {\n  this.type = null;\n  this.storage = null;\n  this.remote_ptr = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.storage !== undefined && args.storage !== null) {\n      this.storage = new TCountDistinctSetStorage(args.storage);\n    }\n    if (args.remote_ptr !== undefined && args.remote_ptr !== null) {\n      this.remote_ptr = args.remote_ptr;\n    }\n  }\n};\nTCountDistinctSet.prototype = {};\nTCountDistinctSet.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.storage = new TCountDistinctSetStorage();\n          this.storage.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.remote_ptr = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCountDistinctSet.prototype.write = function (output) {\n  output.writeStructBegin('TCountDistinctSet');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.storage !== null && this.storage !== undefined) {\n    output.writeFieldBegin('storage', Thrift.Type.STRUCT, 2);\n    this.storage.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.remote_ptr !== null && this.remote_ptr !== undefined) {\n    output.writeFieldBegin('remote_ptr', Thrift.Type.I64, 3);\n    output.writeI64(this.remote_ptr);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TSerializedRows = function (args) {\n  this.buffers = null;\n  this.buffer_lengths = null;\n  this.buffers_total_size = null;\n  this.total_compression_time_ms = null;\n  this.descriptor = null;\n  this.targets = null;\n  this.target_init_vals = null;\n  this.varlen_buffer = null;\n  this.count_distinct_sets = null;\n  this.explanation = null;\n  if (args) {\n    if (args.buffers !== undefined && args.buffers !== null) {\n      this.buffers = Thrift.copyList(args.buffers, [null]);\n    }\n    if (args.buffer_lengths !== undefined && args.buffer_lengths !== null) {\n      this.buffer_lengths = Thrift.copyList(args.buffer_lengths, [null]);\n    }\n    if (args.buffers_total_size !== undefined && args.buffers_total_size !== null) {\n      this.buffers_total_size = args.buffers_total_size;\n    }\n    if (args.total_compression_time_ms !== undefined && args.total_compression_time_ms !== null) {\n      this.total_compression_time_ms = args.total_compression_time_ms;\n    }\n    if (args.descriptor !== undefined && args.descriptor !== null) {\n      this.descriptor = new TResultSetBufferDescriptor(args.descriptor);\n    }\n    if (args.targets !== undefined && args.targets !== null) {\n      this.targets = Thrift.copyList(args.targets, [TTargetInfo]);\n    }\n    if (args.target_init_vals !== undefined && args.target_init_vals !== null) {\n      this.target_init_vals = Thrift.copyList(args.target_init_vals, [null]);\n    }\n    if (args.varlen_buffer !== undefined && args.varlen_buffer !== null) {\n      this.varlen_buffer = Thrift.copyList(args.varlen_buffer, [null]);\n    }\n    if (args.count_distinct_sets !== undefined && args.count_distinct_sets !== null) {\n      this.count_distinct_sets = Thrift.copyList(args.count_distinct_sets, [TCountDistinctSet]);\n    }\n    if (args.explanation !== undefined && args.explanation !== null) {\n      this.explanation = args.explanation;\n    }\n  }\n};\nTSerializedRows.prototype = {};\nTSerializedRows.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size56 = 0;\n          var _rtmp360;\n          this.buffers = [];\n          var _etype59 = 0;\n          _rtmp360 = input.readListBegin();\n          _etype59 = _rtmp360.etype;\n          _size56 = _rtmp360.size;\n          for (var _i61 = 0; _i61 < _size56; ++_i61) {\n            var elem62 = null;\n            elem62 = input.readBinary().value;\n            this.buffers.push(elem62);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size63 = 0;\n          var _rtmp367;\n          this.buffer_lengths = [];\n          var _etype66 = 0;\n          _rtmp367 = input.readListBegin();\n          _etype66 = _rtmp367.etype;\n          _size63 = _rtmp367.size;\n          for (var _i68 = 0; _i68 < _size63; ++_i68) {\n            var elem69 = null;\n            elem69 = input.readI64().value;\n            this.buffer_lengths.push(elem69);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.buffers_total_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.total_compression_time_ms = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.descriptor = new TResultSetBufferDescriptor();\n          this.descriptor.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.LIST) {\n          var _size70 = 0;\n          var _rtmp374;\n          this.targets = [];\n          var _etype73 = 0;\n          _rtmp374 = input.readListBegin();\n          _etype73 = _rtmp374.etype;\n          _size70 = _rtmp374.size;\n          for (var _i75 = 0; _i75 < _size70; ++_i75) {\n            var elem76 = null;\n            elem76 = new TTargetInfo();\n            elem76.read(input);\n            this.targets.push(elem76);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.LIST) {\n          var _size77 = 0;\n          var _rtmp381;\n          this.target_init_vals = [];\n          var _etype80 = 0;\n          _rtmp381 = input.readListBegin();\n          _etype80 = _rtmp381.etype;\n          _size77 = _rtmp381.size;\n          for (var _i82 = 0; _i82 < _size77; ++_i82) {\n            var elem83 = null;\n            elem83 = input.readI64().value;\n            this.target_init_vals.push(elem83);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.LIST) {\n          var _size84 = 0;\n          var _rtmp388;\n          this.varlen_buffer = [];\n          var _etype87 = 0;\n          _rtmp388 = input.readListBegin();\n          _etype87 = _rtmp388.etype;\n          _size84 = _rtmp388.size;\n          for (var _i89 = 0; _i89 < _size84; ++_i89) {\n            var elem90 = null;\n            elem90 = input.readBinary().value;\n            this.varlen_buffer.push(elem90);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.LIST) {\n          var _size91 = 0;\n          var _rtmp395;\n          this.count_distinct_sets = [];\n          var _etype94 = 0;\n          _rtmp395 = input.readListBegin();\n          _etype94 = _rtmp395.etype;\n          _size91 = _rtmp395.size;\n          for (var _i96 = 0; _i96 < _size91; ++_i96) {\n            var elem97 = null;\n            elem97 = new TCountDistinctSet();\n            elem97.read(input);\n            this.count_distinct_sets.push(elem97);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.STRING) {\n          this.explanation = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTSerializedRows.prototype.write = function (output) {\n  output.writeStructBegin('TSerializedRows');\n  if (this.buffers !== null && this.buffers !== undefined) {\n    output.writeFieldBegin('buffers', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRING, this.buffers.length);\n    for (var iter98 in this.buffers) {\n      if (this.buffers.hasOwnProperty(iter98)) {\n        iter98 = this.buffers[iter98];\n        output.writeBinary(iter98);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.buffer_lengths !== null && this.buffer_lengths !== undefined) {\n    output.writeFieldBegin('buffer_lengths', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.I64, this.buffer_lengths.length);\n    for (var iter99 in this.buffer_lengths) {\n      if (this.buffer_lengths.hasOwnProperty(iter99)) {\n        iter99 = this.buffer_lengths[iter99];\n        output.writeI64(iter99);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.buffers_total_size !== null && this.buffers_total_size !== undefined) {\n    output.writeFieldBegin('buffers_total_size', Thrift.Type.I64, 3);\n    output.writeI64(this.buffers_total_size);\n    output.writeFieldEnd();\n  }\n  if (this.total_compression_time_ms !== null && this.total_compression_time_ms !== undefined) {\n    output.writeFieldBegin('total_compression_time_ms', Thrift.Type.I32, 4);\n    output.writeI32(this.total_compression_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.descriptor !== null && this.descriptor !== undefined) {\n    output.writeFieldBegin('descriptor', Thrift.Type.STRUCT, 5);\n    this.descriptor.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.targets !== null && this.targets !== undefined) {\n    output.writeFieldBegin('targets', Thrift.Type.LIST, 6);\n    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);\n    for (var iter100 in this.targets) {\n      if (this.targets.hasOwnProperty(iter100)) {\n        iter100 = this.targets[iter100];\n        iter100.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.target_init_vals !== null && this.target_init_vals !== undefined) {\n    output.writeFieldBegin('target_init_vals', Thrift.Type.LIST, 7);\n    output.writeListBegin(Thrift.Type.I64, this.target_init_vals.length);\n    for (var iter101 in this.target_init_vals) {\n      if (this.target_init_vals.hasOwnProperty(iter101)) {\n        iter101 = this.target_init_vals[iter101];\n        output.writeI64(iter101);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.varlen_buffer !== null && this.varlen_buffer !== undefined) {\n    output.writeFieldBegin('varlen_buffer', Thrift.Type.LIST, 8);\n    output.writeListBegin(Thrift.Type.STRING, this.varlen_buffer.length);\n    for (var iter102 in this.varlen_buffer) {\n      if (this.varlen_buffer.hasOwnProperty(iter102)) {\n        iter102 = this.varlen_buffer[iter102];\n        output.writeBinary(iter102);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.count_distinct_sets !== null && this.count_distinct_sets !== undefined) {\n    output.writeFieldBegin('count_distinct_sets', Thrift.Type.LIST, 9);\n    output.writeListBegin(Thrift.Type.STRUCT, this.count_distinct_sets.length);\n    for (var iter103 in this.count_distinct_sets) {\n      if (this.count_distinct_sets.hasOwnProperty(iter103)) {\n        iter103 = this.count_distinct_sets[iter103];\n        iter103.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.explanation !== null && this.explanation !== undefined) {\n    output.writeFieldBegin('explanation', Thrift.Type.STRING, 10);\n    output.writeString(this.explanation);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(9))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.10.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\n\nwindow.TExecuteMode = {\n  'GPU': 1,\n  'CPU': 2\n};\nwindow.TFileType = {\n  'DELIMITED': 0,\n  'POLYGON': 1,\n  'PARQUET': 2\n};\nwindow.TPartitionDetail = {\n  'DEFAULT': 0,\n  'REPLICATED': 1,\n  'SHARDED': 2,\n  'OTHER': 3\n};\nwindow.TGeoFileLayerContents = {\n  'EMPTY': 0,\n  'GEO': 1,\n  'NON_GEO': 2,\n  'UNSUPPORTED_GEO': 3\n};\nwindow.TImportHeaderRow = {\n  'AUTODETECT': 0,\n  'NO_HEADER': 1,\n  'HAS_HEADER': 2\n};\nwindow.TRole = {\n  'SERVER': 0,\n  'AGGREGATOR': 1,\n  'LEAF': 2,\n  'STRING_DICTIONARY': 3\n};\nwindow.TMergeType = {\n  'UNION': 0,\n  'REDUCE': 1\n};\nwindow.TQueryType = {\n  'UNKNOWN': 0,\n  'READ': 1,\n  'WRITE': 2,\n  'SCHEMA_READ': 3,\n  'SCHEMA_WRITE': 4\n};\nwindow.TArrowTransport = {\n  'SHARED_MEMORY': 0,\n  'WIRE': 1\n};\nwindow.TExpressionRangeType = {\n  'INVALID': 0,\n  'INTEGER': 1,\n  'FLOAT': 2,\n  'DOUBLE': 3\n};\nwindow.TDBObjectType = {\n  'AbstractDBObjectType': 0,\n  'DatabaseDBObjectType': 1,\n  'TableDBObjectType': 2,\n  'DashboardDBObjectType': 3,\n  'ViewDBObjectType': 4\n};\nwindow.TDatumVal = function (args) {\n  this.int_val = null;\n  this.real_val = null;\n  this.str_val = null;\n  this.arr_val = null;\n  if (args) {\n    if (args.int_val !== undefined && args.int_val !== null) {\n      this.int_val = args.int_val;\n    }\n    if (args.real_val !== undefined && args.real_val !== null) {\n      this.real_val = args.real_val;\n    }\n    if (args.str_val !== undefined && args.str_val !== null) {\n      this.str_val = args.str_val;\n    }\n    if (args.arr_val !== undefined && args.arr_val !== null) {\n      this.arr_val = Thrift.copyList(args.arr_val, [null]);\n    }\n  }\n};\nTDatumVal.prototype = {};\nTDatumVal.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.int_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.real_val = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.str_val = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size0 = 0;\n          var _rtmp34;\n          this.arr_val = [];\n          var _etype3 = 0;\n          _rtmp34 = input.readListBegin();\n          _etype3 = _rtmp34.etype;\n          _size0 = _rtmp34.size;\n          for (var _i5 = 0; _i5 < _size0; ++_i5) {\n            var elem6 = null;\n            elem6 = new TDatum();\n            elem6.read(input);\n            this.arr_val.push(elem6);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatumVal.prototype.write = function (output) {\n  output.writeStructBegin('TDatumVal');\n  if (this.int_val !== null && this.int_val !== undefined) {\n    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);\n    output.writeI64(this.int_val);\n    output.writeFieldEnd();\n  }\n  if (this.real_val !== null && this.real_val !== undefined) {\n    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);\n    output.writeDouble(this.real_val);\n    output.writeFieldEnd();\n  }\n  if (this.str_val !== null && this.str_val !== undefined) {\n    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);\n    output.writeString(this.str_val);\n    output.writeFieldEnd();\n  }\n  if (this.arr_val !== null && this.arr_val !== undefined) {\n    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);\n    for (var iter7 in this.arr_val) {\n      if (this.arr_val.hasOwnProperty(iter7)) {\n        iter7 = this.arr_val[iter7];\n        iter7.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDatum = function (args) {\n  this.val = null;\n  this.is_null = null;\n  if (args) {\n    if (args.val !== undefined && args.val !== null) {\n      this.val = new TDatumVal(args.val);\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTDatum.prototype = {};\nTDatum.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.val = new TDatumVal();\n          this.val.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatum.prototype.write = function (output) {\n  output.writeStructBegin('TDatum');\n  if (this.val !== null && this.val !== undefined) {\n    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);\n    this.val.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStringValue = function (args) {\n  this.str_val = null;\n  this.is_null = null;\n  if (args) {\n    if (args.str_val !== undefined && args.str_val !== null) {\n      this.str_val = args.str_val;\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTStringValue.prototype = {};\nTStringValue.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.str_val = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStringValue.prototype.write = function (output) {\n  output.writeStructBegin('TStringValue');\n  if (this.str_val !== null && this.str_val !== undefined) {\n    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);\n    output.writeString(this.str_val);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnType = function (args) {\n  this.col_name = null;\n  this.col_type = null;\n  this.is_reserved_keyword = null;\n  this.src_name = null;\n  this.is_system = null;\n  this.is_physical = null;\n  this.col_id = null;\n  if (args) {\n    if (args.col_name !== undefined && args.col_name !== null) {\n      this.col_name = args.col_name;\n    }\n    if (args.col_type !== undefined && args.col_type !== null) {\n      this.col_type = new TTypeInfo(args.col_type);\n    }\n    if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {\n      this.is_reserved_keyword = args.is_reserved_keyword;\n    }\n    if (args.src_name !== undefined && args.src_name !== null) {\n      this.src_name = args.src_name;\n    }\n    if (args.is_system !== undefined && args.is_system !== null) {\n      this.is_system = args.is_system;\n    }\n    if (args.is_physical !== undefined && args.is_physical !== null) {\n      this.is_physical = args.is_physical;\n    }\n    if (args.col_id !== undefined && args.col_id !== null) {\n      this.col_id = args.col_id;\n    }\n  }\n};\nTColumnType.prototype = {};\nTColumnType.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.col_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.col_type = new TTypeInfo();\n          this.col_type.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_reserved_keyword = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.src_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_system = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_physical = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.col_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnType.prototype.write = function (output) {\n  output.writeStructBegin('TColumnType');\n  if (this.col_name !== null && this.col_name !== undefined) {\n    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);\n    output.writeString(this.col_name);\n    output.writeFieldEnd();\n  }\n  if (this.col_type !== null && this.col_type !== undefined) {\n    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);\n    this.col_type.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {\n    output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);\n    output.writeBool(this.is_reserved_keyword);\n    output.writeFieldEnd();\n  }\n  if (this.src_name !== null && this.src_name !== undefined) {\n    output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);\n    output.writeString(this.src_name);\n    output.writeFieldEnd();\n  }\n  if (this.is_system !== null && this.is_system !== undefined) {\n    output.writeFieldBegin('is_system', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_system);\n    output.writeFieldEnd();\n  }\n  if (this.is_physical !== null && this.is_physical !== undefined) {\n    output.writeFieldBegin('is_physical', Thrift.Type.BOOL, 6);\n    output.writeBool(this.is_physical);\n    output.writeFieldEnd();\n  }\n  if (this.col_id !== null && this.col_id !== undefined) {\n    output.writeFieldBegin('col_id', Thrift.Type.I64, 7);\n    output.writeI64(this.col_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRow = function (args) {\n  this.cols = null;\n  if (args) {\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TDatum]);\n    }\n  }\n};\nTRow.prototype = {};\nTRow.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size8 = 0;\n          var _rtmp312;\n          this.cols = [];\n          var _etype11 = 0;\n          _rtmp312 = input.readListBegin();\n          _etype11 = _rtmp312.etype;\n          _size8 = _rtmp312.size;\n          for (var _i13 = 0; _i13 < _size8; ++_i13) {\n            var elem14 = null;\n            elem14 = new TDatum();\n            elem14.read(input);\n            this.cols.push(elem14);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRow.prototype.write = function (output) {\n  output.writeStructBegin('TRow');\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter15 in this.cols) {\n      if (this.cols.hasOwnProperty(iter15)) {\n        iter15 = this.cols[iter15];\n        iter15.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnData = function (args) {\n  this.int_col = null;\n  this.real_col = null;\n  this.str_col = null;\n  this.arr_col = null;\n  if (args) {\n    if (args.int_col !== undefined && args.int_col !== null) {\n      this.int_col = Thrift.copyList(args.int_col, [null]);\n    }\n    if (args.real_col !== undefined && args.real_col !== null) {\n      this.real_col = Thrift.copyList(args.real_col, [null]);\n    }\n    if (args.str_col !== undefined && args.str_col !== null) {\n      this.str_col = Thrift.copyList(args.str_col, [null]);\n    }\n    if (args.arr_col !== undefined && args.arr_col !== null) {\n      this.arr_col = Thrift.copyList(args.arr_col, [null]);\n    }\n  }\n};\nTColumnData.prototype = {};\nTColumnData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size16 = 0;\n          var _rtmp320;\n          this.int_col = [];\n          var _etype19 = 0;\n          _rtmp320 = input.readListBegin();\n          _etype19 = _rtmp320.etype;\n          _size16 = _rtmp320.size;\n          for (var _i21 = 0; _i21 < _size16; ++_i21) {\n            var elem22 = null;\n            elem22 = input.readI64().value;\n            this.int_col.push(elem22);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size23 = 0;\n          var _rtmp327;\n          this.real_col = [];\n          var _etype26 = 0;\n          _rtmp327 = input.readListBegin();\n          _etype26 = _rtmp327.etype;\n          _size23 = _rtmp327.size;\n          for (var _i28 = 0; _i28 < _size23; ++_i28) {\n            var elem29 = null;\n            elem29 = input.readDouble().value;\n            this.real_col.push(elem29);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size30 = 0;\n          var _rtmp334;\n          this.str_col = [];\n          var _etype33 = 0;\n          _rtmp334 = input.readListBegin();\n          _etype33 = _rtmp334.etype;\n          _size30 = _rtmp334.size;\n          for (var _i35 = 0; _i35 < _size30; ++_i35) {\n            var elem36 = null;\n            elem36 = input.readString().value;\n            this.str_col.push(elem36);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size37 = 0;\n          var _rtmp341;\n          this.arr_col = [];\n          var _etype40 = 0;\n          _rtmp341 = input.readListBegin();\n          _etype40 = _rtmp341.etype;\n          _size37 = _rtmp341.size;\n          for (var _i42 = 0; _i42 < _size37; ++_i42) {\n            var elem43 = null;\n            elem43 = new TColumn();\n            elem43.read(input);\n            this.arr_col.push(elem43);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnData.prototype.write = function (output) {\n  output.writeStructBegin('TColumnData');\n  if (this.int_col !== null && this.int_col !== undefined) {\n    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.I64, this.int_col.length);\n    for (var iter44 in this.int_col) {\n      if (this.int_col.hasOwnProperty(iter44)) {\n        iter44 = this.int_col[iter44];\n        output.writeI64(iter44);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.real_col !== null && this.real_col !== undefined) {\n    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);\n    for (var iter45 in this.real_col) {\n      if (this.real_col.hasOwnProperty(iter45)) {\n        iter45 = this.real_col[iter45];\n        output.writeDouble(iter45);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.str_col !== null && this.str_col !== undefined) {\n    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);\n    for (var iter46 in this.str_col) {\n      if (this.str_col.hasOwnProperty(iter46)) {\n        iter46 = this.str_col[iter46];\n        output.writeString(iter46);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.arr_col !== null && this.arr_col !== undefined) {\n    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);\n    for (var iter47 in this.arr_col) {\n      if (this.arr_col.hasOwnProperty(iter47)) {\n        iter47 = this.arr_col[iter47];\n        iter47.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumn = function (args) {\n  this.data = null;\n  this.nulls = null;\n  if (args) {\n    if (args.data !== undefined && args.data !== null) {\n      this.data = new TColumnData(args.data);\n    }\n    if (args.nulls !== undefined && args.nulls !== null) {\n      this.nulls = Thrift.copyList(args.nulls, [null]);\n    }\n  }\n};\nTColumn.prototype = {};\nTColumn.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.data = new TColumnData();\n          this.data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size48 = 0;\n          var _rtmp352;\n          this.nulls = [];\n          var _etype51 = 0;\n          _rtmp352 = input.readListBegin();\n          _etype51 = _rtmp352.etype;\n          _size48 = _rtmp352.size;\n          for (var _i53 = 0; _i53 < _size48; ++_i53) {\n            var elem54 = null;\n            elem54 = input.readBool().value;\n            this.nulls.push(elem54);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumn.prototype.write = function (output) {\n  output.writeStructBegin('TColumn');\n  if (this.data !== null && this.data !== undefined) {\n    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);\n    this.data.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.nulls !== null && this.nulls !== undefined) {\n    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);\n    for (var iter55 in this.nulls) {\n      if (this.nulls.hasOwnProperty(iter55)) {\n        iter55 = this.nulls[iter55];\n        output.writeBool(iter55);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStringRow = function (args) {\n  this.cols = null;\n  if (args) {\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TStringValue]);\n    }\n  }\n};\nTStringRow.prototype = {};\nTStringRow.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size56 = 0;\n          var _rtmp360;\n          this.cols = [];\n          var _etype59 = 0;\n          _rtmp360 = input.readListBegin();\n          _etype59 = _rtmp360.etype;\n          _size56 = _rtmp360.size;\n          for (var _i61 = 0; _i61 < _size56; ++_i61) {\n            var elem62 = null;\n            elem62 = new TStringValue();\n            elem62.read(input);\n            this.cols.push(elem62);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStringRow.prototype.write = function (output) {\n  output.writeStructBegin('TStringRow');\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter63 in this.cols) {\n      if (this.cols.hasOwnProperty(iter63)) {\n        iter63 = this.cols[iter63];\n        iter63.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TKrb5Session = function (args) {\n  this.sessionId = null;\n  this.krbToken = null;\n  if (args) {\n    if (args.sessionId !== undefined && args.sessionId !== null) {\n      this.sessionId = args.sessionId;\n    }\n    if (args.krbToken !== undefined && args.krbToken !== null) {\n      this.krbToken = args.krbToken;\n    }\n  }\n};\nTKrb5Session.prototype = {};\nTKrb5Session.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.sessionId = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.krbToken = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTKrb5Session.prototype.write = function (output) {\n  output.writeStructBegin('TKrb5Session');\n  if (this.sessionId !== null && this.sessionId !== undefined) {\n    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);\n    output.writeString(this.sessionId);\n    output.writeFieldEnd();\n  }\n  if (this.krbToken !== null && this.krbToken !== undefined) {\n    output.writeFieldBegin('krbToken', Thrift.Type.STRING, 2);\n    output.writeString(this.krbToken);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStepResult = function (args) {\n  this.serialized_rows = null;\n  this.execution_finished = null;\n  this.merge_type = null;\n  this.sharded = null;\n  this.row_desc = null;\n  this.node_id = null;\n  if (args) {\n    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\n      this.serialized_rows = new TSerializedRows(args.serialized_rows);\n    }\n    if (args.execution_finished !== undefined && args.execution_finished !== null) {\n      this.execution_finished = args.execution_finished;\n    }\n    if (args.merge_type !== undefined && args.merge_type !== null) {\n      this.merge_type = args.merge_type;\n    }\n    if (args.sharded !== undefined && args.sharded !== null) {\n      this.sharded = args.sharded;\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.node_id !== undefined && args.node_id !== null) {\n      this.node_id = args.node_id;\n    }\n  }\n};\nTStepResult.prototype = {};\nTStepResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.serialized_rows = new TSerializedRows();\n          this.serialized_rows.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.execution_finished = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.merge_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.sharded = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          var _size64 = 0;\n          var _rtmp368;\n          this.row_desc = [];\n          var _etype67 = 0;\n          _rtmp368 = input.readListBegin();\n          _etype67 = _rtmp368.etype;\n          _size64 = _rtmp368.size;\n          for (var _i69 = 0; _i69 < _size64; ++_i69) {\n            var elem70 = null;\n            elem70 = new TColumnType();\n            elem70.read(input);\n            this.row_desc.push(elem70);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.node_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStepResult.prototype.write = function (output) {\n  output.writeStructBegin('TStepResult');\n  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\n    output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);\n    this.serialized_rows.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.execution_finished !== null && this.execution_finished !== undefined) {\n    output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);\n    output.writeBool(this.execution_finished);\n    output.writeFieldEnd();\n  }\n  if (this.merge_type !== null && this.merge_type !== undefined) {\n    output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);\n    output.writeI32(this.merge_type);\n    output.writeFieldEnd();\n  }\n  if (this.sharded !== null && this.sharded !== undefined) {\n    output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);\n    output.writeBool(this.sharded);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter71 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter71)) {\n        iter71 = this.row_desc[iter71];\n        iter71.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.node_id !== null && this.node_id !== undefined) {\n    output.writeFieldBegin('node_id', Thrift.Type.I32, 6);\n    output.writeI32(this.node_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRowSet = function (args) {\n  this.row_desc = null;\n  this.rows = null;\n  this.columns = null;\n  this.is_columnar = null;\n  if (args) {\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TRow]);\n    }\n    if (args.columns !== undefined && args.columns !== null) {\n      this.columns = Thrift.copyList(args.columns, [TColumn]);\n    }\n    if (args.is_columnar !== undefined && args.is_columnar !== null) {\n      this.is_columnar = args.is_columnar;\n    }\n  }\n};\nTRowSet.prototype = {};\nTRowSet.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size72 = 0;\n          var _rtmp376;\n          this.row_desc = [];\n          var _etype75 = 0;\n          _rtmp376 = input.readListBegin();\n          _etype75 = _rtmp376.etype;\n          _size72 = _rtmp376.size;\n          for (var _i77 = 0; _i77 < _size72; ++_i77) {\n            var elem78 = null;\n            elem78 = new TColumnType();\n            elem78.read(input);\n            this.row_desc.push(elem78);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size79 = 0;\n          var _rtmp383;\n          this.rows = [];\n          var _etype82 = 0;\n          _rtmp383 = input.readListBegin();\n          _etype82 = _rtmp383.etype;\n          _size79 = _rtmp383.size;\n          for (var _i84 = 0; _i84 < _size79; ++_i84) {\n            var elem85 = null;\n            elem85 = new TRow();\n            elem85.read(input);\n            this.rows.push(elem85);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size86 = 0;\n          var _rtmp390;\n          this.columns = [];\n          var _etype89 = 0;\n          _rtmp390 = input.readListBegin();\n          _etype89 = _rtmp390.etype;\n          _size86 = _rtmp390.size;\n          for (var _i91 = 0; _i91 < _size86; ++_i91) {\n            var elem92 = null;\n            elem92 = new TColumn();\n            elem92.read(input);\n            this.columns.push(elem92);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_columnar = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRowSet.prototype.write = function (output) {\n  output.writeStructBegin('TRowSet');\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter93 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter93)) {\n        iter93 = this.row_desc[iter93];\n        iter93.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter94 in this.rows) {\n      if (this.rows.hasOwnProperty(iter94)) {\n        iter94 = this.rows[iter94];\n        iter94.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.columns !== null && this.columns !== undefined) {\n    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);\n    for (var iter95 in this.columns) {\n      if (this.columns.hasOwnProperty(iter95)) {\n        iter95 = this.columns[iter95];\n        iter95.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.is_columnar !== null && this.is_columnar !== undefined) {\n    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);\n    output.writeBool(this.is_columnar);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TQueryResult = function (args) {\n  this.row_set = null;\n  this.execution_time_ms = null;\n  this.total_time_ms = null;\n  this.nonce = null;\n  this.debug = null;\n  this.success = true;\n  this.query_type = 0;\n  if (args) {\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n    if (args.debug !== undefined && args.debug !== null) {\n      this.debug = args.debug;\n    }\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.query_type !== undefined && args.query_type !== null) {\n      this.query_type = args.query_type;\n    }\n  }\n};\nTQueryResult.prototype = {};\nTQueryResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.debug = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.success = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I32) {\n          this.query_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTQueryResult.prototype.write = function (output) {\n  output.writeStructBegin('TQueryResult');\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  if (this.debug !== null && this.debug !== undefined) {\n    output.writeFieldBegin('debug', Thrift.Type.STRING, 5);\n    output.writeString(this.debug);\n    output.writeFieldEnd();\n  }\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.BOOL, 6);\n    output.writeBool(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.query_type !== null && this.query_type !== undefined) {\n    output.writeFieldBegin('query_type', Thrift.Type.I32, 7);\n    output.writeI32(this.query_type);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDataFrame = function (args) {\n  this.sm_handle = null;\n  this.sm_size = null;\n  this.df_handle = null;\n  this.df_size = null;\n  this.execution_time_ms = null;\n  this.arrow_conversion_time_ms = null;\n  this.df_buffer = null;\n  if (args) {\n    if (args.sm_handle !== undefined && args.sm_handle !== null) {\n      this.sm_handle = args.sm_handle;\n    }\n    if (args.sm_size !== undefined && args.sm_size !== null) {\n      this.sm_size = args.sm_size;\n    }\n    if (args.df_handle !== undefined && args.df_handle !== null) {\n      this.df_handle = args.df_handle;\n    }\n    if (args.df_size !== undefined && args.df_size !== null) {\n      this.df_size = args.df_size;\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.arrow_conversion_time_ms !== undefined && args.arrow_conversion_time_ms !== null) {\n      this.arrow_conversion_time_ms = args.arrow_conversion_time_ms;\n    }\n    if (args.df_buffer !== undefined && args.df_buffer !== null) {\n      this.df_buffer = args.df_buffer;\n    }\n  }\n};\nTDataFrame.prototype = {};\nTDataFrame.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.sm_handle = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.sm_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.df_handle = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.df_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.arrow_conversion_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.df_buffer = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDataFrame.prototype.write = function (output) {\n  output.writeStructBegin('TDataFrame');\n  if (this.sm_handle !== null && this.sm_handle !== undefined) {\n    output.writeFieldBegin('sm_handle', Thrift.Type.STRING, 1);\n    output.writeBinary(this.sm_handle);\n    output.writeFieldEnd();\n  }\n  if (this.sm_size !== null && this.sm_size !== undefined) {\n    output.writeFieldBegin('sm_size', Thrift.Type.I64, 2);\n    output.writeI64(this.sm_size);\n    output.writeFieldEnd();\n  }\n  if (this.df_handle !== null && this.df_handle !== undefined) {\n    output.writeFieldBegin('df_handle', Thrift.Type.STRING, 3);\n    output.writeBinary(this.df_handle);\n    output.writeFieldEnd();\n  }\n  if (this.df_size !== null && this.df_size !== undefined) {\n    output.writeFieldBegin('df_size', Thrift.Type.I64, 4);\n    output.writeI64(this.df_size);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.arrow_conversion_time_ms !== null && this.arrow_conversion_time_ms !== undefined) {\n    output.writeFieldBegin('arrow_conversion_time_ms', Thrift.Type.I64, 6);\n    output.writeI64(this.arrow_conversion_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.df_buffer !== null && this.df_buffer !== undefined) {\n    output.writeFieldBegin('df_buffer', Thrift.Type.STRING, 7);\n    output.writeBinary(this.df_buffer);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDBInfo = function (args) {\n  this.db_name = null;\n  this.db_owner = null;\n  if (args) {\n    if (args.db_name !== undefined && args.db_name !== null) {\n      this.db_name = args.db_name;\n    }\n    if (args.db_owner !== undefined && args.db_owner !== null) {\n      this.db_owner = args.db_owner;\n    }\n  }\n};\nTDBInfo.prototype = {};\nTDBInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.db_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.db_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDBInfo.prototype.write = function (output) {\n  output.writeStructBegin('TDBInfo');\n  if (this.db_name !== null && this.db_name !== undefined) {\n    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);\n    output.writeString(this.db_name);\n    output.writeFieldEnd();\n  }\n  if (this.db_owner !== null && this.db_owner !== undefined) {\n    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);\n    output.writeString(this.db_owner);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TOmniSciException = function (args) {\n  this.error_msg = null;\n  if (args) {\n    if (args.error_msg !== undefined && args.error_msg !== null) {\n      this.error_msg = args.error_msg;\n    }\n  }\n};\nThrift.inherits(TOmniSciException, Thrift.TException);\nTOmniSciException.prototype.name = 'TOmniSciException';\nTOmniSciException.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.error_msg = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTOmniSciException.prototype.write = function (output) {\n  output.writeStructBegin('TOmniSciException');\n  if (this.error_msg !== null && this.error_msg !== undefined) {\n    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);\n    output.writeString(this.error_msg);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCopyParams = function (args) {\n  this.delimiter = null;\n  this.null_str = null;\n  this.has_header = 0;\n  this.quoted = null;\n  this.quote = null;\n  this.escape = null;\n  this.line_delim = null;\n  this.array_delim = null;\n  this.array_begin = null;\n  this.array_end = null;\n  this.threads = null;\n  this.file_type = 0;\n  this.s3_access_key = null;\n  this.s3_secret_key = null;\n  this.s3_region = null;\n  this.geo_coords_encoding = 6;\n  this.geo_coords_comp_param = 32;\n  this.geo_coords_type = 18;\n  this.geo_coords_srid = 4326;\n  this.sanitize_column_names = true;\n  this.geo_layer_name = null;\n  this.s3_endpoint = null;\n  this.geo_assign_render_groups = true;\n  this.geo_explode_collections = false;\n  if (args) {\n    if (args.delimiter !== undefined && args.delimiter !== null) {\n      this.delimiter = args.delimiter;\n    }\n    if (args.null_str !== undefined && args.null_str !== null) {\n      this.null_str = args.null_str;\n    }\n    if (args.has_header !== undefined && args.has_header !== null) {\n      this.has_header = args.has_header;\n    }\n    if (args.quoted !== undefined && args.quoted !== null) {\n      this.quoted = args.quoted;\n    }\n    if (args.quote !== undefined && args.quote !== null) {\n      this.quote = args.quote;\n    }\n    if (args.escape !== undefined && args.escape !== null) {\n      this.escape = args.escape;\n    }\n    if (args.line_delim !== undefined && args.line_delim !== null) {\n      this.line_delim = args.line_delim;\n    }\n    if (args.array_delim !== undefined && args.array_delim !== null) {\n      this.array_delim = args.array_delim;\n    }\n    if (args.array_begin !== undefined && args.array_begin !== null) {\n      this.array_begin = args.array_begin;\n    }\n    if (args.array_end !== undefined && args.array_end !== null) {\n      this.array_end = args.array_end;\n    }\n    if (args.threads !== undefined && args.threads !== null) {\n      this.threads = args.threads;\n    }\n    if (args.file_type !== undefined && args.file_type !== null) {\n      this.file_type = args.file_type;\n    }\n    if (args.s3_access_key !== undefined && args.s3_access_key !== null) {\n      this.s3_access_key = args.s3_access_key;\n    }\n    if (args.s3_secret_key !== undefined && args.s3_secret_key !== null) {\n      this.s3_secret_key = args.s3_secret_key;\n    }\n    if (args.s3_region !== undefined && args.s3_region !== null) {\n      this.s3_region = args.s3_region;\n    }\n    if (args.geo_coords_encoding !== undefined && args.geo_coords_encoding !== null) {\n      this.geo_coords_encoding = args.geo_coords_encoding;\n    }\n    if (args.geo_coords_comp_param !== undefined && args.geo_coords_comp_param !== null) {\n      this.geo_coords_comp_param = args.geo_coords_comp_param;\n    }\n    if (args.geo_coords_type !== undefined && args.geo_coords_type !== null) {\n      this.geo_coords_type = args.geo_coords_type;\n    }\n    if (args.geo_coords_srid !== undefined && args.geo_coords_srid !== null) {\n      this.geo_coords_srid = args.geo_coords_srid;\n    }\n    if (args.sanitize_column_names !== undefined && args.sanitize_column_names !== null) {\n      this.sanitize_column_names = args.sanitize_column_names;\n    }\n    if (args.geo_layer_name !== undefined && args.geo_layer_name !== null) {\n      this.geo_layer_name = args.geo_layer_name;\n    }\n    if (args.s3_endpoint !== undefined && args.s3_endpoint !== null) {\n      this.s3_endpoint = args.s3_endpoint;\n    }\n    if (args.geo_assign_render_groups !== undefined && args.geo_assign_render_groups !== null) {\n      this.geo_assign_render_groups = args.geo_assign_render_groups;\n    }\n    if (args.geo_explode_collections !== undefined && args.geo_explode_collections !== null) {\n      this.geo_explode_collections = args.geo_explode_collections;\n    }\n  }\n};\nTCopyParams.prototype = {};\nTCopyParams.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.delimiter = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.null_str = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.has_header = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.quoted = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.quote = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.escape = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.line_delim = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_delim = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_begin = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_end = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 11:\n        if (ftype == Thrift.Type.I32) {\n          this.threads = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 12:\n        if (ftype == Thrift.Type.I32) {\n          this.file_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 13:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_access_key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 14:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_secret_key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 15:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_region = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 16:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_encoding = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 17:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_comp_param = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 18:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 19:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_srid = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 20:\n        if (ftype == Thrift.Type.BOOL) {\n          this.sanitize_column_names = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 21:\n        if (ftype == Thrift.Type.STRING) {\n          this.geo_layer_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 22:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_endpoint = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 23:\n        if (ftype == Thrift.Type.BOOL) {\n          this.geo_assign_render_groups = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 24:\n        if (ftype == Thrift.Type.BOOL) {\n          this.geo_explode_collections = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCopyParams.prototype.write = function (output) {\n  output.writeStructBegin('TCopyParams');\n  if (this.delimiter !== null && this.delimiter !== undefined) {\n    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);\n    output.writeString(this.delimiter);\n    output.writeFieldEnd();\n  }\n  if (this.null_str !== null && this.null_str !== undefined) {\n    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);\n    output.writeString(this.null_str);\n    output.writeFieldEnd();\n  }\n  if (this.has_header !== null && this.has_header !== undefined) {\n    output.writeFieldBegin('has_header', Thrift.Type.I32, 3);\n    output.writeI32(this.has_header);\n    output.writeFieldEnd();\n  }\n  if (this.quoted !== null && this.quoted !== undefined) {\n    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);\n    output.writeBool(this.quoted);\n    output.writeFieldEnd();\n  }\n  if (this.quote !== null && this.quote !== undefined) {\n    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);\n    output.writeString(this.quote);\n    output.writeFieldEnd();\n  }\n  if (this.escape !== null && this.escape !== undefined) {\n    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);\n    output.writeString(this.escape);\n    output.writeFieldEnd();\n  }\n  if (this.line_delim !== null && this.line_delim !== undefined) {\n    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);\n    output.writeString(this.line_delim);\n    output.writeFieldEnd();\n  }\n  if (this.array_delim !== null && this.array_delim !== undefined) {\n    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);\n    output.writeString(this.array_delim);\n    output.writeFieldEnd();\n  }\n  if (this.array_begin !== null && this.array_begin !== undefined) {\n    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);\n    output.writeString(this.array_begin);\n    output.writeFieldEnd();\n  }\n  if (this.array_end !== null && this.array_end !== undefined) {\n    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);\n    output.writeString(this.array_end);\n    output.writeFieldEnd();\n  }\n  if (this.threads !== null && this.threads !== undefined) {\n    output.writeFieldBegin('threads', Thrift.Type.I32, 11);\n    output.writeI32(this.threads);\n    output.writeFieldEnd();\n  }\n  if (this.file_type !== null && this.file_type !== undefined) {\n    output.writeFieldBegin('file_type', Thrift.Type.I32, 12);\n    output.writeI32(this.file_type);\n    output.writeFieldEnd();\n  }\n  if (this.s3_access_key !== null && this.s3_access_key !== undefined) {\n    output.writeFieldBegin('s3_access_key', Thrift.Type.STRING, 13);\n    output.writeString(this.s3_access_key);\n    output.writeFieldEnd();\n  }\n  if (this.s3_secret_key !== null && this.s3_secret_key !== undefined) {\n    output.writeFieldBegin('s3_secret_key', Thrift.Type.STRING, 14);\n    output.writeString(this.s3_secret_key);\n    output.writeFieldEnd();\n  }\n  if (this.s3_region !== null && this.s3_region !== undefined) {\n    output.writeFieldBegin('s3_region', Thrift.Type.STRING, 15);\n    output.writeString(this.s3_region);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_encoding !== null && this.geo_coords_encoding !== undefined) {\n    output.writeFieldBegin('geo_coords_encoding', Thrift.Type.I32, 16);\n    output.writeI32(this.geo_coords_encoding);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_comp_param !== null && this.geo_coords_comp_param !== undefined) {\n    output.writeFieldBegin('geo_coords_comp_param', Thrift.Type.I32, 17);\n    output.writeI32(this.geo_coords_comp_param);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_type !== null && this.geo_coords_type !== undefined) {\n    output.writeFieldBegin('geo_coords_type', Thrift.Type.I32, 18);\n    output.writeI32(this.geo_coords_type);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_srid !== null && this.geo_coords_srid !== undefined) {\n    output.writeFieldBegin('geo_coords_srid', Thrift.Type.I32, 19);\n    output.writeI32(this.geo_coords_srid);\n    output.writeFieldEnd();\n  }\n  if (this.sanitize_column_names !== null && this.sanitize_column_names !== undefined) {\n    output.writeFieldBegin('sanitize_column_names', Thrift.Type.BOOL, 20);\n    output.writeBool(this.sanitize_column_names);\n    output.writeFieldEnd();\n  }\n  if (this.geo_layer_name !== null && this.geo_layer_name !== undefined) {\n    output.writeFieldBegin('geo_layer_name', Thrift.Type.STRING, 21);\n    output.writeString(this.geo_layer_name);\n    output.writeFieldEnd();\n  }\n  if (this.s3_endpoint !== null && this.s3_endpoint !== undefined) {\n    output.writeFieldBegin('s3_endpoint', Thrift.Type.STRING, 22);\n    output.writeString(this.s3_endpoint);\n    output.writeFieldEnd();\n  }\n  if (this.geo_assign_render_groups !== null && this.geo_assign_render_groups !== undefined) {\n    output.writeFieldBegin('geo_assign_render_groups', Thrift.Type.BOOL, 23);\n    output.writeBool(this.geo_assign_render_groups);\n    output.writeFieldEnd();\n  }\n  if (this.geo_explode_collections !== null && this.geo_explode_collections !== undefined) {\n    output.writeFieldBegin('geo_explode_collections', Thrift.Type.BOOL, 24);\n    output.writeBool(this.geo_explode_collections);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCreateParams = function (args) {\n  this.is_replicated = null;\n  if (args) {\n    if (args.is_replicated !== undefined && args.is_replicated !== null) {\n      this.is_replicated = args.is_replicated;\n    }\n  }\n};\nTCreateParams.prototype = {};\nTCreateParams.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_replicated = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCreateParams.prototype.write = function (output) {\n  output.writeStructBegin('TCreateParams');\n  if (this.is_replicated !== null && this.is_replicated !== undefined) {\n    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 1);\n    output.writeBool(this.is_replicated);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDetectResult = function (args) {\n  this.row_set = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nTDetectResult.prototype = {};\nTDetectResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDetectResult.prototype.write = function (output) {\n  output.writeStructBegin('TDetectResult');\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TImportStatus = function (args) {\n  this.elapsed = null;\n  this.rows_completed = null;\n  this.rows_estimated = null;\n  this.rows_rejected = null;\n  if (args) {\n    if (args.elapsed !== undefined && args.elapsed !== null) {\n      this.elapsed = args.elapsed;\n    }\n    if (args.rows_completed !== undefined && args.rows_completed !== null) {\n      this.rows_completed = args.rows_completed;\n    }\n    if (args.rows_estimated !== undefined && args.rows_estimated !== null) {\n      this.rows_estimated = args.rows_estimated;\n    }\n    if (args.rows_rejected !== undefined && args.rows_rejected !== null) {\n      this.rows_rejected = args.rows_rejected;\n    }\n  }\n};\nTImportStatus.prototype = {};\nTImportStatus.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.elapsed = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_completed = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_estimated = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_rejected = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTImportStatus.prototype.write = function (output) {\n  output.writeStructBegin('TImportStatus');\n  if (this.elapsed !== null && this.elapsed !== undefined) {\n    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);\n    output.writeI64(this.elapsed);\n    output.writeFieldEnd();\n  }\n  if (this.rows_completed !== null && this.rows_completed !== undefined) {\n    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);\n    output.writeI64(this.rows_completed);\n    output.writeFieldEnd();\n  }\n  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {\n    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);\n    output.writeI64(this.rows_estimated);\n    output.writeFieldEnd();\n  }\n  if (this.rows_rejected !== null && this.rows_rejected !== undefined) {\n    output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);\n    output.writeI64(this.rows_rejected);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TFrontendView = function (args) {\n  this.view_name = null;\n  this.view_state = null;\n  this.image_hash = null;\n  this.update_time = null;\n  this.view_metadata = null;\n  if (args) {\n    if (args.view_name !== undefined && args.view_name !== null) {\n      this.view_name = args.view_name;\n    }\n    if (args.view_state !== undefined && args.view_state !== null) {\n      this.view_state = args.view_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.update_time !== undefined && args.update_time !== null) {\n      this.update_time = args.update_time;\n    }\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n      this.view_metadata = args.view_metadata;\n    }\n  }\n};\nTFrontendView.prototype = {};\nTFrontendView.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.update_time = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTFrontendView.prototype.write = function (output) {\n  output.writeStructBegin('TFrontendView');\n  if (this.view_name !== null && this.view_name !== undefined) {\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);\n    output.writeString(this.view_name);\n    output.writeFieldEnd();\n  }\n  if (this.view_state !== null && this.view_state !== undefined) {\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\n    output.writeString(this.view_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.update_time !== null && this.update_time !== undefined) {\n    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);\n    output.writeString(this.update_time);\n    output.writeFieldEnd();\n  }\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.view_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDashboard = function (args) {\n  this.dashboard_name = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.update_time = null;\n  this.dashboard_metadata = null;\n  this.dashboard_id = null;\n  this.dashboard_owner = null;\n  this.is_dash_shared = null;\n  if (args) {\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.update_time !== undefined && args.update_time !== null) {\n      this.update_time = args.update_time;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {\n      this.dashboard_owner = args.dashboard_owner;\n    }\n    if (args.is_dash_shared !== undefined && args.is_dash_shared !== null) {\n      this.is_dash_shared = args.is_dash_shared;\n    }\n  }\n};\nTDashboard.prototype = {};\nTDashboard.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.update_time = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_dash_shared = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDashboard.prototype.write = function (output) {\n  output.writeStructBegin('TDashboard');\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 1);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 2);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.update_time !== null && this.update_time !== undefined) {\n    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);\n    output.writeString(this.update_time);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 6);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {\n    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 7);\n    output.writeString(this.dashboard_owner);\n    output.writeFieldEnd();\n  }\n  if (this.is_dash_shared !== null && this.is_dash_shared !== undefined) {\n    output.writeFieldBegin('is_dash_shared', Thrift.Type.BOOL, 8);\n    output.writeBool(this.is_dash_shared);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TServerStatus = function (args) {\n  this.read_only = null;\n  this.version = null;\n  this.rendering_enabled = null;\n  this.start_time = null;\n  this.edition = null;\n  this.host_name = null;\n  this.poly_rendering_enabled = null;\n  this.role = null;\n  if (args) {\n    if (args.read_only !== undefined && args.read_only !== null) {\n      this.read_only = args.read_only;\n    }\n    if (args.version !== undefined && args.version !== null) {\n      this.version = args.version;\n    }\n    if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {\n      this.rendering_enabled = args.rendering_enabled;\n    }\n    if (args.start_time !== undefined && args.start_time !== null) {\n      this.start_time = args.start_time;\n    }\n    if (args.edition !== undefined && args.edition !== null) {\n      this.edition = args.edition;\n    }\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.poly_rendering_enabled !== undefined && args.poly_rendering_enabled !== null) {\n      this.poly_rendering_enabled = args.poly_rendering_enabled;\n    }\n    if (args.role !== undefined && args.role !== null) {\n      this.role = args.role;\n    }\n  }\n};\nTServerStatus.prototype = {};\nTServerStatus.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.read_only = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.version = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.rendering_enabled = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.start_time = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.edition = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.poly_rendering_enabled = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.I32) {\n          this.role = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTServerStatus.prototype.write = function (output) {\n  output.writeStructBegin('TServerStatus');\n  if (this.read_only !== null && this.read_only !== undefined) {\n    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);\n    output.writeBool(this.read_only);\n    output.writeFieldEnd();\n  }\n  if (this.version !== null && this.version !== undefined) {\n    output.writeFieldBegin('version', Thrift.Type.STRING, 2);\n    output.writeString(this.version);\n    output.writeFieldEnd();\n  }\n  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {\n    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);\n    output.writeBool(this.rendering_enabled);\n    output.writeFieldEnd();\n  }\n  if (this.start_time !== null && this.start_time !== undefined) {\n    output.writeFieldBegin('start_time', Thrift.Type.I64, 4);\n    output.writeI64(this.start_time);\n    output.writeFieldEnd();\n  }\n  if (this.edition !== null && this.edition !== undefined) {\n    output.writeFieldBegin('edition', Thrift.Type.STRING, 5);\n    output.writeString(this.edition);\n    output.writeFieldEnd();\n  }\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 6);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.poly_rendering_enabled !== null && this.poly_rendering_enabled !== undefined) {\n    output.writeFieldBegin('poly_rendering_enabled', Thrift.Type.BOOL, 7);\n    output.writeBool(this.poly_rendering_enabled);\n    output.writeFieldEnd();\n  }\n  if (this.role !== null && this.role !== undefined) {\n    output.writeFieldBegin('role', Thrift.Type.I32, 8);\n    output.writeI32(this.role);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPixel = function (args) {\n  this.x = null;\n  this.y = null;\n  if (args) {\n    if (args.x !== undefined && args.x !== null) {\n      this.x = args.x;\n    }\n    if (args.y !== undefined && args.y !== null) {\n      this.y = args.y;\n    }\n  }\n};\nTPixel.prototype = {};\nTPixel.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.x = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.y = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPixel.prototype.write = function (output) {\n  output.writeStructBegin('TPixel');\n  if (this.x !== null && this.x !== undefined) {\n    output.writeFieldBegin('x', Thrift.Type.I64, 1);\n    output.writeI64(this.x);\n    output.writeFieldEnd();\n  }\n  if (this.y !== null && this.y !== undefined) {\n    output.writeFieldBegin('y', Thrift.Type.I64, 2);\n    output.writeI64(this.y);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPixelTableRowResult = function (args) {\n  this.pixel = null;\n  this.vega_table_name = null;\n  this.table_id = null;\n  this.row_id = null;\n  this.row_set = null;\n  this.nonce = null;\n  if (args) {\n    if (args.pixel !== undefined && args.pixel !== null) {\n      this.pixel = new TPixel(args.pixel);\n    }\n    if (args.vega_table_name !== undefined && args.vega_table_name !== null) {\n      this.vega_table_name = args.vega_table_name;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = Thrift.copyList(args.table_id, [null]);\n    }\n    if (args.row_id !== undefined && args.row_id !== null) {\n      this.row_id = Thrift.copyList(args.row_id, [null]);\n    }\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nTPixelTableRowResult.prototype = {};\nTPixelTableRowResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pixel = new TPixel();\n          this.pixel.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size96 = 0;\n          var _rtmp3100;\n          this.table_id = [];\n          var _etype99 = 0;\n          _rtmp3100 = input.readListBegin();\n          _etype99 = _rtmp3100.etype;\n          _size96 = _rtmp3100.size;\n          for (var _i101 = 0; _i101 < _size96; ++_i101) {\n            var elem102 = null;\n            elem102 = input.readI64().value;\n            this.table_id.push(elem102);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size103 = 0;\n          var _rtmp3107;\n          this.row_id = [];\n          var _etype106 = 0;\n          _rtmp3107 = input.readListBegin();\n          _etype106 = _rtmp3107.etype;\n          _size103 = _rtmp3107.size;\n          for (var _i108 = 0; _i108 < _size103; ++_i108) {\n            var elem109 = null;\n            elem109 = input.readI64().value;\n            this.row_id.push(elem109);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPixelTableRowResult.prototype.write = function (output) {\n  output.writeStructBegin('TPixelTableRowResult');\n  if (this.pixel !== null && this.pixel !== undefined) {\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\n    this.pixel.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.vega_table_name !== null && this.vega_table_name !== undefined) {\n    output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.vega_table_name);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.I64, this.table_id.length);\n    for (var iter110 in this.table_id) {\n      if (this.table_id.hasOwnProperty(iter110)) {\n        iter110 = this.table_id[iter110];\n        output.writeI64(iter110);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.row_id !== null && this.row_id !== undefined) {\n    output.writeFieldBegin('row_id', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.I64, this.row_id.length);\n    for (var iter111 in this.row_id) {\n      if (this.row_id.hasOwnProperty(iter111)) {\n        iter111 = this.row_id[iter111];\n        output.writeI64(iter111);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderResult = function (args) {\n  this.image = null;\n  this.nonce = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  this.vega_metadata = null;\n  if (args) {\n    if (args.image !== undefined && args.image !== null) {\n      this.image = args.image;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n    if (args.vega_metadata !== undefined && args.vega_metadata !== null) {\n      this.vega_metadata = args.vega_metadata;\n    }\n  }\n};\nTRenderResult.prototype = {};\nTRenderResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.image = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderResult');\n  if (this.image !== null && this.image !== undefined) {\n    output.writeFieldBegin('image', Thrift.Type.STRING, 1);\n    output.writeBinary(this.image);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.vega_metadata !== null && this.vega_metadata !== undefined) {\n    output.writeFieldBegin('vega_metadata', Thrift.Type.STRING, 6);\n    output.writeString(this.vega_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TGpuSpecification = function (args) {\n  this.num_sm = null;\n  this.clock_frequency_kHz = null;\n  this.memory = null;\n  this.compute_capability_major = null;\n  this.compute_capability_minor = null;\n  if (args) {\n    if (args.num_sm !== undefined && args.num_sm !== null) {\n      this.num_sm = args.num_sm;\n    }\n    if (args.clock_frequency_kHz !== undefined && args.clock_frequency_kHz !== null) {\n      this.clock_frequency_kHz = args.clock_frequency_kHz;\n    }\n    if (args.memory !== undefined && args.memory !== null) {\n      this.memory = args.memory;\n    }\n    if (args.compute_capability_major !== undefined && args.compute_capability_major !== null) {\n      this.compute_capability_major = args.compute_capability_major;\n    }\n    if (args.compute_capability_minor !== undefined && args.compute_capability_minor !== null) {\n      this.compute_capability_minor = args.compute_capability_minor;\n    }\n  }\n};\nTGpuSpecification.prototype = {};\nTGpuSpecification.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.num_sm = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.clock_frequency_kHz = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.memory = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I16) {\n          this.compute_capability_major = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I16) {\n          this.compute_capability_minor = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTGpuSpecification.prototype.write = function (output) {\n  output.writeStructBegin('TGpuSpecification');\n  if (this.num_sm !== null && this.num_sm !== undefined) {\n    output.writeFieldBegin('num_sm', Thrift.Type.I32, 1);\n    output.writeI32(this.num_sm);\n    output.writeFieldEnd();\n  }\n  if (this.clock_frequency_kHz !== null && this.clock_frequency_kHz !== undefined) {\n    output.writeFieldBegin('clock_frequency_kHz', Thrift.Type.I64, 2);\n    output.writeI64(this.clock_frequency_kHz);\n    output.writeFieldEnd();\n  }\n  if (this.memory !== null && this.memory !== undefined) {\n    output.writeFieldBegin('memory', Thrift.Type.I64, 3);\n    output.writeI64(this.memory);\n    output.writeFieldEnd();\n  }\n  if (this.compute_capability_major !== null && this.compute_capability_major !== undefined) {\n    output.writeFieldBegin('compute_capability_major', Thrift.Type.I16, 4);\n    output.writeI16(this.compute_capability_major);\n    output.writeFieldEnd();\n  }\n  if (this.compute_capability_minor !== null && this.compute_capability_minor !== undefined) {\n    output.writeFieldBegin('compute_capability_minor', Thrift.Type.I16, 5);\n    output.writeI16(this.compute_capability_minor);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.THardwareInfo = function (args) {\n  this.num_gpu_hw = null;\n  this.num_cpu_hw = null;\n  this.num_gpu_allocated = null;\n  this.start_gpu = null;\n  this.host_name = null;\n  this.gpu_info = null;\n  if (args) {\n    if (args.num_gpu_hw !== undefined && args.num_gpu_hw !== null) {\n      this.num_gpu_hw = args.num_gpu_hw;\n    }\n    if (args.num_cpu_hw !== undefined && args.num_cpu_hw !== null) {\n      this.num_cpu_hw = args.num_cpu_hw;\n    }\n    if (args.num_gpu_allocated !== undefined && args.num_gpu_allocated !== null) {\n      this.num_gpu_allocated = args.num_gpu_allocated;\n    }\n    if (args.start_gpu !== undefined && args.start_gpu !== null) {\n      this.start_gpu = args.start_gpu;\n    }\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.gpu_info !== undefined && args.gpu_info !== null) {\n      this.gpu_info = Thrift.copyList(args.gpu_info, [TGpuSpecification]);\n    }\n  }\n};\nTHardwareInfo.prototype = {};\nTHardwareInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I16) {\n          this.num_gpu_hw = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I16) {\n          this.num_cpu_hw = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I16) {\n          this.num_gpu_allocated = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I16) {\n          this.start_gpu = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.LIST) {\n          var _size112 = 0;\n          var _rtmp3116;\n          this.gpu_info = [];\n          var _etype115 = 0;\n          _rtmp3116 = input.readListBegin();\n          _etype115 = _rtmp3116.etype;\n          _size112 = _rtmp3116.size;\n          for (var _i117 = 0; _i117 < _size112; ++_i117) {\n            var elem118 = null;\n            elem118 = new TGpuSpecification();\n            elem118.read(input);\n            this.gpu_info.push(elem118);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTHardwareInfo.prototype.write = function (output) {\n  output.writeStructBegin('THardwareInfo');\n  if (this.num_gpu_hw !== null && this.num_gpu_hw !== undefined) {\n    output.writeFieldBegin('num_gpu_hw', Thrift.Type.I16, 1);\n    output.writeI16(this.num_gpu_hw);\n    output.writeFieldEnd();\n  }\n  if (this.num_cpu_hw !== null && this.num_cpu_hw !== undefined) {\n    output.writeFieldBegin('num_cpu_hw', Thrift.Type.I16, 2);\n    output.writeI16(this.num_cpu_hw);\n    output.writeFieldEnd();\n  }\n  if (this.num_gpu_allocated !== null && this.num_gpu_allocated !== undefined) {\n    output.writeFieldBegin('num_gpu_allocated', Thrift.Type.I16, 3);\n    output.writeI16(this.num_gpu_allocated);\n    output.writeFieldEnd();\n  }\n  if (this.start_gpu !== null && this.start_gpu !== undefined) {\n    output.writeFieldBegin('start_gpu', Thrift.Type.I16, 4);\n    output.writeI16(this.start_gpu);\n    output.writeFieldEnd();\n  }\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 5);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.gpu_info !== null && this.gpu_info !== undefined) {\n    output.writeFieldBegin('gpu_info', Thrift.Type.LIST, 6);\n    output.writeListBegin(Thrift.Type.STRUCT, this.gpu_info.length);\n    for (var iter119 in this.gpu_info) {\n      if (this.gpu_info.hasOwnProperty(iter119)) {\n        iter119 = this.gpu_info[iter119];\n        iter119.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TClusterHardwareInfo = function (args) {\n  this.hardware_info = null;\n  if (args) {\n    if (args.hardware_info !== undefined && args.hardware_info !== null) {\n      this.hardware_info = Thrift.copyList(args.hardware_info, [THardwareInfo]);\n    }\n  }\n};\nTClusterHardwareInfo.prototype = {};\nTClusterHardwareInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size120 = 0;\n          var _rtmp3124;\n          this.hardware_info = [];\n          var _etype123 = 0;\n          _rtmp3124 = input.readListBegin();\n          _etype123 = _rtmp3124.etype;\n          _size120 = _rtmp3124.size;\n          for (var _i125 = 0; _i125 < _size120; ++_i125) {\n            var elem126 = null;\n            elem126 = new THardwareInfo();\n            elem126.read(input);\n            this.hardware_info.push(elem126);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTClusterHardwareInfo.prototype.write = function (output) {\n  output.writeStructBegin('TClusterHardwareInfo');\n  if (this.hardware_info !== null && this.hardware_info !== undefined) {\n    output.writeFieldBegin('hardware_info', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.hardware_info.length);\n    for (var iter127 in this.hardware_info) {\n      if (this.hardware_info.hasOwnProperty(iter127)) {\n        iter127 = this.hardware_info[iter127];\n        iter127.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TMemoryData = function (args) {\n  this.slab = null;\n  this.start_page = null;\n  this.num_pages = null;\n  this.touch = null;\n  this.chunk_key = null;\n  this.buffer_epoch = null;\n  this.is_free = null;\n  if (args) {\n    if (args.slab !== undefined && args.slab !== null) {\n      this.slab = args.slab;\n    }\n    if (args.start_page !== undefined && args.start_page !== null) {\n      this.start_page = args.start_page;\n    }\n    if (args.num_pages !== undefined && args.num_pages !== null) {\n      this.num_pages = args.num_pages;\n    }\n    if (args.touch !== undefined && args.touch !== null) {\n      this.touch = args.touch;\n    }\n    if (args.chunk_key !== undefined && args.chunk_key !== null) {\n      this.chunk_key = Thrift.copyList(args.chunk_key, [null]);\n    }\n    if (args.buffer_epoch !== undefined && args.buffer_epoch !== null) {\n      this.buffer_epoch = args.buffer_epoch;\n    }\n    if (args.is_free !== undefined && args.is_free !== null) {\n      this.is_free = args.is_free;\n    }\n  }\n};\nTMemoryData.prototype = {};\nTMemoryData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.slab = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.start_page = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.num_pages = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.touch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          var _size128 = 0;\n          var _rtmp3132;\n          this.chunk_key = [];\n          var _etype131 = 0;\n          _rtmp3132 = input.readListBegin();\n          _etype131 = _rtmp3132.etype;\n          _size128 = _rtmp3132.size;\n          for (var _i133 = 0; _i133 < _size128; ++_i133) {\n            var elem134 = null;\n            elem134 = input.readI64().value;\n            this.chunk_key.push(elem134);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.buffer_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_free = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTMemoryData.prototype.write = function (output) {\n  output.writeStructBegin('TMemoryData');\n  if (this.slab !== null && this.slab !== undefined) {\n    output.writeFieldBegin('slab', Thrift.Type.I64, 1);\n    output.writeI64(this.slab);\n    output.writeFieldEnd();\n  }\n  if (this.start_page !== null && this.start_page !== undefined) {\n    output.writeFieldBegin('start_page', Thrift.Type.I32, 2);\n    output.writeI32(this.start_page);\n    output.writeFieldEnd();\n  }\n  if (this.num_pages !== null && this.num_pages !== undefined) {\n    output.writeFieldBegin('num_pages', Thrift.Type.I64, 3);\n    output.writeI64(this.num_pages);\n    output.writeFieldEnd();\n  }\n  if (this.touch !== null && this.touch !== undefined) {\n    output.writeFieldBegin('touch', Thrift.Type.I32, 4);\n    output.writeI32(this.touch);\n    output.writeFieldEnd();\n  }\n  if (this.chunk_key !== null && this.chunk_key !== undefined) {\n    output.writeFieldBegin('chunk_key', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.I64, this.chunk_key.length);\n    for (var iter135 in this.chunk_key) {\n      if (this.chunk_key.hasOwnProperty(iter135)) {\n        iter135 = this.chunk_key[iter135];\n        output.writeI64(iter135);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.buffer_epoch !== null && this.buffer_epoch !== undefined) {\n    output.writeFieldBegin('buffer_epoch', Thrift.Type.I32, 6);\n    output.writeI32(this.buffer_epoch);\n    output.writeFieldEnd();\n  }\n  if (this.is_free !== null && this.is_free !== undefined) {\n    output.writeFieldBegin('is_free', Thrift.Type.BOOL, 7);\n    output.writeBool(this.is_free);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TNodeMemoryInfo = function (args) {\n  this.host_name = null;\n  this.page_size = null;\n  this.max_num_pages = null;\n  this.num_pages_allocated = null;\n  this.is_allocation_capped = null;\n  this.node_memory_data = null;\n  if (args) {\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.page_size !== undefined && args.page_size !== null) {\n      this.page_size = args.page_size;\n    }\n    if (args.max_num_pages !== undefined && args.max_num_pages !== null) {\n      this.max_num_pages = args.max_num_pages;\n    }\n    if (args.num_pages_allocated !== undefined && args.num_pages_allocated !== null) {\n      this.num_pages_allocated = args.num_pages_allocated;\n    }\n    if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {\n      this.is_allocation_capped = args.is_allocation_capped;\n    }\n    if (args.node_memory_data !== undefined && args.node_memory_data !== null) {\n      this.node_memory_data = Thrift.copyList(args.node_memory_data, [TMemoryData]);\n    }\n  }\n};\nTNodeMemoryInfo.prototype = {};\nTNodeMemoryInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.page_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.max_num_pages = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.num_pages_allocated = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_allocation_capped = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.LIST) {\n          var _size136 = 0;\n          var _rtmp3140;\n          this.node_memory_data = [];\n          var _etype139 = 0;\n          _rtmp3140 = input.readListBegin();\n          _etype139 = _rtmp3140.etype;\n          _size136 = _rtmp3140.size;\n          for (var _i141 = 0; _i141 < _size136; ++_i141) {\n            var elem142 = null;\n            elem142 = new TMemoryData();\n            elem142.read(input);\n            this.node_memory_data.push(elem142);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTNodeMemoryInfo.prototype.write = function (output) {\n  output.writeStructBegin('TNodeMemoryInfo');\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 1);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.page_size !== null && this.page_size !== undefined) {\n    output.writeFieldBegin('page_size', Thrift.Type.I64, 2);\n    output.writeI64(this.page_size);\n    output.writeFieldEnd();\n  }\n  if (this.max_num_pages !== null && this.max_num_pages !== undefined) {\n    output.writeFieldBegin('max_num_pages', Thrift.Type.I64, 3);\n    output.writeI64(this.max_num_pages);\n    output.writeFieldEnd();\n  }\n  if (this.num_pages_allocated !== null && this.num_pages_allocated !== undefined) {\n    output.writeFieldBegin('num_pages_allocated', Thrift.Type.I64, 4);\n    output.writeI64(this.num_pages_allocated);\n    output.writeFieldEnd();\n  }\n  if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {\n    output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_allocation_capped);\n    output.writeFieldEnd();\n  }\n  if (this.node_memory_data !== null && this.node_memory_data !== undefined) {\n    output.writeFieldBegin('node_memory_data', Thrift.Type.LIST, 6);\n    output.writeListBegin(Thrift.Type.STRUCT, this.node_memory_data.length);\n    for (var iter143 in this.node_memory_data) {\n      if (this.node_memory_data.hasOwnProperty(iter143)) {\n        iter143 = this.node_memory_data[iter143];\n        iter143.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableMeta = function (args) {\n  this.table_name = null;\n  this.num_cols = null;\n  this.is_view = null;\n  this.is_replicated = null;\n  this.shard_count = null;\n  this.max_rows = null;\n  this.table_id = null;\n  this.max_table_id = null;\n  this.col_types = null;\n  this.col_names = null;\n  if (args) {\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.num_cols !== undefined && args.num_cols !== null) {\n      this.num_cols = args.num_cols;\n    }\n    if (args.is_view !== undefined && args.is_view !== null) {\n      this.is_view = args.is_view;\n    }\n    if (args.is_replicated !== undefined && args.is_replicated !== null) {\n      this.is_replicated = args.is_replicated;\n    }\n    if (args.shard_count !== undefined && args.shard_count !== null) {\n      this.shard_count = args.shard_count;\n    }\n    if (args.max_rows !== undefined && args.max_rows !== null) {\n      this.max_rows = args.max_rows;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.max_table_id !== undefined && args.max_table_id !== null) {\n      this.max_table_id = args.max_table_id;\n    }\n    if (args.col_types !== undefined && args.col_types !== null) {\n      this.col_types = Thrift.copyList(args.col_types, [TTypeInfo]);\n    }\n    if (args.col_names !== undefined && args.col_names !== null) {\n      this.col_names = Thrift.copyList(args.col_names, [null]);\n    }\n  }\n};\nTTableMeta.prototype = {};\nTTableMeta.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.num_cols = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_view = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_replicated = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.shard_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.max_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.I64) {\n          this.table_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.I64) {\n          this.max_table_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.LIST) {\n          var _size144 = 0;\n          var _rtmp3148;\n          this.col_types = [];\n          var _etype147 = 0;\n          _rtmp3148 = input.readListBegin();\n          _etype147 = _rtmp3148.etype;\n          _size144 = _rtmp3148.size;\n          for (var _i149 = 0; _i149 < _size144; ++_i149) {\n            var elem150 = null;\n            elem150 = new TTypeInfo();\n            elem150.read(input);\n            this.col_types.push(elem150);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 11:\n        if (ftype == Thrift.Type.LIST) {\n          var _size151 = 0;\n          var _rtmp3155;\n          this.col_names = [];\n          var _etype154 = 0;\n          _rtmp3155 = input.readListBegin();\n          _etype154 = _rtmp3155.etype;\n          _size151 = _rtmp3155.size;\n          for (var _i156 = 0; _i156 < _size151; ++_i156) {\n            var elem157 = null;\n            elem157 = input.readString().value;\n            this.col_names.push(elem157);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableMeta.prototype.write = function (output) {\n  output.writeStructBegin('TTableMeta');\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 1);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.num_cols !== null && this.num_cols !== undefined) {\n    output.writeFieldBegin('num_cols', Thrift.Type.I64, 2);\n    output.writeI64(this.num_cols);\n    output.writeFieldEnd();\n  }\n  if (this.is_view !== null && this.is_view !== undefined) {\n    output.writeFieldBegin('is_view', Thrift.Type.BOOL, 4);\n    output.writeBool(this.is_view);\n    output.writeFieldEnd();\n  }\n  if (this.is_replicated !== null && this.is_replicated !== undefined) {\n    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_replicated);\n    output.writeFieldEnd();\n  }\n  if (this.shard_count !== null && this.shard_count !== undefined) {\n    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);\n    output.writeI64(this.shard_count);\n    output.writeFieldEnd();\n  }\n  if (this.max_rows !== null && this.max_rows !== undefined) {\n    output.writeFieldBegin('max_rows', Thrift.Type.I64, 7);\n    output.writeI64(this.max_rows);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I64, 8);\n    output.writeI64(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.max_table_id !== null && this.max_table_id !== undefined) {\n    output.writeFieldBegin('max_table_id', Thrift.Type.I64, 9);\n    output.writeI64(this.max_table_id);\n    output.writeFieldEnd();\n  }\n  if (this.col_types !== null && this.col_types !== undefined) {\n    output.writeFieldBegin('col_types', Thrift.Type.LIST, 10);\n    output.writeListBegin(Thrift.Type.STRUCT, this.col_types.length);\n    for (var iter158 in this.col_types) {\n      if (this.col_types.hasOwnProperty(iter158)) {\n        iter158 = this.col_types[iter158];\n        iter158.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.col_names !== null && this.col_names !== undefined) {\n    output.writeFieldBegin('col_names', Thrift.Type.LIST, 11);\n    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);\n    for (var iter159 in this.col_names) {\n      if (this.col_names.hasOwnProperty(iter159)) {\n        iter159 = this.col_names[iter159];\n        output.writeString(iter159);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableDetails = function (args) {\n  this.row_desc = null;\n  this.fragment_size = null;\n  this.page_size = null;\n  this.max_rows = null;\n  this.view_sql = null;\n  this.shard_count = null;\n  this.key_metainfo = null;\n  this.is_temporary = null;\n  this.partition_detail = null;\n  if (args) {\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.fragment_size !== undefined && args.fragment_size !== null) {\n      this.fragment_size = args.fragment_size;\n    }\n    if (args.page_size !== undefined && args.page_size !== null) {\n      this.page_size = args.page_size;\n    }\n    if (args.max_rows !== undefined && args.max_rows !== null) {\n      this.max_rows = args.max_rows;\n    }\n    if (args.view_sql !== undefined && args.view_sql !== null) {\n      this.view_sql = args.view_sql;\n    }\n    if (args.shard_count !== undefined && args.shard_count !== null) {\n      this.shard_count = args.shard_count;\n    }\n    if (args.key_metainfo !== undefined && args.key_metainfo !== null) {\n      this.key_metainfo = args.key_metainfo;\n    }\n    if (args.is_temporary !== undefined && args.is_temporary !== null) {\n      this.is_temporary = args.is_temporary;\n    }\n    if (args.partition_detail !== undefined && args.partition_detail !== null) {\n      this.partition_detail = args.partition_detail;\n    }\n  }\n};\nTTableDetails.prototype = {};\nTTableDetails.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size160 = 0;\n          var _rtmp3164;\n          this.row_desc = [];\n          var _etype163 = 0;\n          _rtmp3164 = input.readListBegin();\n          _etype163 = _rtmp3164.etype;\n          _size160 = _rtmp3164.size;\n          for (var _i165 = 0; _i165 < _size160; ++_i165) {\n            var elem166 = null;\n            elem166 = new TColumnType();\n            elem166.read(input);\n            this.row_desc.push(elem166);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.fragment_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.page_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.max_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_sql = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.shard_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.key_metainfo = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_temporary = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.I32) {\n          this.partition_detail = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableDetails.prototype.write = function (output) {\n  output.writeStructBegin('TTableDetails');\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter167 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter167)) {\n        iter167 = this.row_desc[iter167];\n        iter167.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.fragment_size !== null && this.fragment_size !== undefined) {\n    output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);\n    output.writeI64(this.fragment_size);\n    output.writeFieldEnd();\n  }\n  if (this.page_size !== null && this.page_size !== undefined) {\n    output.writeFieldBegin('page_size', Thrift.Type.I64, 3);\n    output.writeI64(this.page_size);\n    output.writeFieldEnd();\n  }\n  if (this.max_rows !== null && this.max_rows !== undefined) {\n    output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);\n    output.writeI64(this.max_rows);\n    output.writeFieldEnd();\n  }\n  if (this.view_sql !== null && this.view_sql !== undefined) {\n    output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);\n    output.writeString(this.view_sql);\n    output.writeFieldEnd();\n  }\n  if (this.shard_count !== null && this.shard_count !== undefined) {\n    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);\n    output.writeI64(this.shard_count);\n    output.writeFieldEnd();\n  }\n  if (this.key_metainfo !== null && this.key_metainfo !== undefined) {\n    output.writeFieldBegin('key_metainfo', Thrift.Type.STRING, 7);\n    output.writeString(this.key_metainfo);\n    output.writeFieldEnd();\n  }\n  if (this.is_temporary !== null && this.is_temporary !== undefined) {\n    output.writeFieldBegin('is_temporary', Thrift.Type.BOOL, 8);\n    output.writeBool(this.is_temporary);\n    output.writeFieldEnd();\n  }\n  if (this.partition_detail !== null && this.partition_detail !== undefined) {\n    output.writeFieldBegin('partition_detail', Thrift.Type.I32, 9);\n    output.writeI32(this.partition_detail);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnRange = function (args) {\n  this.type = null;\n  this.col_id = null;\n  this.table_id = null;\n  this.has_nulls = null;\n  this.int_min = null;\n  this.int_max = null;\n  this.bucket = null;\n  this.fp_min = null;\n  this.fp_max = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.col_id !== undefined && args.col_id !== null) {\n      this.col_id = args.col_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.has_nulls !== undefined && args.has_nulls !== null) {\n      this.has_nulls = args.has_nulls;\n    }\n    if (args.int_min !== undefined && args.int_min !== null) {\n      this.int_min = args.int_min;\n    }\n    if (args.int_max !== undefined && args.int_max !== null) {\n      this.int_max = args.int_max;\n    }\n    if (args.bucket !== undefined && args.bucket !== null) {\n      this.bucket = args.bucket;\n    }\n    if (args.fp_min !== undefined && args.fp_min !== null) {\n      this.fp_min = args.fp_min;\n    }\n    if (args.fp_max !== undefined && args.fp_max !== null) {\n      this.fp_max = args.fp_max;\n    }\n  }\n};\nTColumnRange.prototype = {};\nTColumnRange.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.col_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.has_nulls = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.int_min = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.int_max = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.bucket = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.fp_min = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.fp_max = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnRange.prototype.write = function (output) {\n  output.writeStructBegin('TColumnRange');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.col_id !== null && this.col_id !== undefined) {\n    output.writeFieldBegin('col_id', Thrift.Type.I32, 2);\n    output.writeI32(this.col_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.has_nulls !== null && this.has_nulls !== undefined) {\n    output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);\n    output.writeBool(this.has_nulls);\n    output.writeFieldEnd();\n  }\n  if (this.int_min !== null && this.int_min !== undefined) {\n    output.writeFieldBegin('int_min', Thrift.Type.I64, 5);\n    output.writeI64(this.int_min);\n    output.writeFieldEnd();\n  }\n  if (this.int_max !== null && this.int_max !== undefined) {\n    output.writeFieldBegin('int_max', Thrift.Type.I64, 6);\n    output.writeI64(this.int_max);\n    output.writeFieldEnd();\n  }\n  if (this.bucket !== null && this.bucket !== undefined) {\n    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);\n    output.writeI64(this.bucket);\n    output.writeFieldEnd();\n  }\n  if (this.fp_min !== null && this.fp_min !== undefined) {\n    output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);\n    output.writeDouble(this.fp_min);\n    output.writeFieldEnd();\n  }\n  if (this.fp_max !== null && this.fp_max !== undefined) {\n    output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);\n    output.writeDouble(this.fp_max);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDictionaryGeneration = function (args) {\n  this.dict_id = null;\n  this.entry_count = null;\n  if (args) {\n    if (args.dict_id !== undefined && args.dict_id !== null) {\n      this.dict_id = args.dict_id;\n    }\n    if (args.entry_count !== undefined && args.entry_count !== null) {\n      this.entry_count = args.entry_count;\n    }\n  }\n};\nTDictionaryGeneration.prototype = {};\nTDictionaryGeneration.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.dict_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.entry_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDictionaryGeneration.prototype.write = function (output) {\n  output.writeStructBegin('TDictionaryGeneration');\n  if (this.dict_id !== null && this.dict_id !== undefined) {\n    output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);\n    output.writeI32(this.dict_id);\n    output.writeFieldEnd();\n  }\n  if (this.entry_count !== null && this.entry_count !== undefined) {\n    output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);\n    output.writeI64(this.entry_count);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableGeneration = function (args) {\n  this.table_id = null;\n  this.tuple_count = null;\n  this.start_rowid = null;\n  if (args) {\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.tuple_count !== undefined && args.tuple_count !== null) {\n      this.tuple_count = args.tuple_count;\n    }\n    if (args.start_rowid !== undefined && args.start_rowid !== null) {\n      this.start_rowid = args.start_rowid;\n    }\n  }\n};\nTTableGeneration.prototype = {};\nTTableGeneration.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.tuple_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.start_rowid = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableGeneration.prototype.write = function (output) {\n  output.writeStructBegin('TTableGeneration');\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.tuple_count !== null && this.tuple_count !== undefined) {\n    output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);\n    output.writeI64(this.tuple_count);\n    output.writeFieldEnd();\n  }\n  if (this.start_rowid !== null && this.start_rowid !== undefined) {\n    output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);\n    output.writeI64(this.start_rowid);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPendingQuery = function (args) {\n  this.id = null;\n  this.column_ranges = null;\n  this.dictionary_generations = null;\n  this.table_generations = null;\n  this.parent_session_id = null;\n  if (args) {\n    if (args.id !== undefined && args.id !== null) {\n      this.id = args.id;\n    }\n    if (args.column_ranges !== undefined && args.column_ranges !== null) {\n      this.column_ranges = Thrift.copyList(args.column_ranges, [TColumnRange]);\n    }\n    if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {\n      this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [TDictionaryGeneration]);\n    }\n    if (args.table_generations !== undefined && args.table_generations !== null) {\n      this.table_generations = Thrift.copyList(args.table_generations, [TTableGeneration]);\n    }\n    if (args.parent_session_id !== undefined && args.parent_session_id !== null) {\n      this.parent_session_id = args.parent_session_id;\n    }\n  }\n};\nTPendingQuery.prototype = {};\nTPendingQuery.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size168 = 0;\n          var _rtmp3172;\n          this.column_ranges = [];\n          var _etype171 = 0;\n          _rtmp3172 = input.readListBegin();\n          _etype171 = _rtmp3172.etype;\n          _size168 = _rtmp3172.size;\n          for (var _i173 = 0; _i173 < _size168; ++_i173) {\n            var elem174 = null;\n            elem174 = new TColumnRange();\n            elem174.read(input);\n            this.column_ranges.push(elem174);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size175 = 0;\n          var _rtmp3179;\n          this.dictionary_generations = [];\n          var _etype178 = 0;\n          _rtmp3179 = input.readListBegin();\n          _etype178 = _rtmp3179.etype;\n          _size175 = _rtmp3179.size;\n          for (var _i180 = 0; _i180 < _size175; ++_i180) {\n            var elem181 = null;\n            elem181 = new TDictionaryGeneration();\n            elem181.read(input);\n            this.dictionary_generations.push(elem181);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size182 = 0;\n          var _rtmp3186;\n          this.table_generations = [];\n          var _etype185 = 0;\n          _rtmp3186 = input.readListBegin();\n          _etype185 = _rtmp3186.etype;\n          _size182 = _rtmp3186.size;\n          for (var _i187 = 0; _i187 < _size182; ++_i187) {\n            var elem188 = null;\n            elem188 = new TTableGeneration();\n            elem188.read(input);\n            this.table_generations.push(elem188);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.parent_session_id = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPendingQuery.prototype.write = function (output) {\n  output.writeStructBegin('TPendingQuery');\n  if (this.id !== null && this.id !== undefined) {\n    output.writeFieldBegin('id', Thrift.Type.I64, 1);\n    output.writeI64(this.id);\n    output.writeFieldEnd();\n  }\n  if (this.column_ranges !== null && this.column_ranges !== undefined) {\n    output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);\n    for (var iter189 in this.column_ranges) {\n      if (this.column_ranges.hasOwnProperty(iter189)) {\n        iter189 = this.column_ranges[iter189];\n        iter189.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {\n    output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);\n    for (var iter190 in this.dictionary_generations) {\n      if (this.dictionary_generations.hasOwnProperty(iter190)) {\n        iter190 = this.dictionary_generations[iter190];\n        iter190.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.table_generations !== null && this.table_generations !== undefined) {\n    output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);\n    for (var iter191 in this.table_generations) {\n      if (this.table_generations.hasOwnProperty(iter191)) {\n        iter191 = this.table_generations[iter191];\n        iter191.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.parent_session_id !== null && this.parent_session_id !== undefined) {\n    output.writeFieldBegin('parent_session_id', Thrift.Type.STRING, 5);\n    output.writeString(this.parent_session_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TVarLen = function (args) {\n  this.payload = null;\n  this.is_null = null;\n  if (args) {\n    if (args.payload !== undefined && args.payload !== null) {\n      this.payload = args.payload;\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTVarLen.prototype = {};\nTVarLen.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.payload = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTVarLen.prototype.write = function (output) {\n  output.writeStructBegin('TVarLen');\n  if (this.payload !== null && this.payload !== undefined) {\n    output.writeFieldBegin('payload', Thrift.Type.STRING, 1);\n    output.writeBinary(this.payload);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDataBlockPtr = function (args) {\n  this.fixed_len_data = null;\n  this.var_len_data = null;\n  if (args) {\n    if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {\n      this.fixed_len_data = args.fixed_len_data;\n    }\n    if (args.var_len_data !== undefined && args.var_len_data !== null) {\n      this.var_len_data = Thrift.copyList(args.var_len_data, [TVarLen]);\n    }\n  }\n};\nTDataBlockPtr.prototype = {};\nTDataBlockPtr.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.fixed_len_data = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size192 = 0;\n          var _rtmp3196;\n          this.var_len_data = [];\n          var _etype195 = 0;\n          _rtmp3196 = input.readListBegin();\n          _etype195 = _rtmp3196.etype;\n          _size192 = _rtmp3196.size;\n          for (var _i197 = 0; _i197 < _size192; ++_i197) {\n            var elem198 = null;\n            elem198 = new TVarLen();\n            elem198.read(input);\n            this.var_len_data.push(elem198);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDataBlockPtr.prototype.write = function (output) {\n  output.writeStructBegin('TDataBlockPtr');\n  if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {\n    output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);\n    output.writeBinary(this.fixed_len_data);\n    output.writeFieldEnd();\n  }\n  if (this.var_len_data !== null && this.var_len_data !== undefined) {\n    output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);\n    for (var iter199 in this.var_len_data) {\n      if (this.var_len_data.hasOwnProperty(iter199)) {\n        iter199 = this.var_len_data[iter199];\n        iter199.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TInsertData = function (args) {\n  this.db_id = null;\n  this.table_id = null;\n  this.column_ids = null;\n  this.data = null;\n  this.num_rows = null;\n  if (args) {\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.column_ids !== undefined && args.column_ids !== null) {\n      this.column_ids = Thrift.copyList(args.column_ids, [null]);\n    }\n    if (args.data !== undefined && args.data !== null) {\n      this.data = Thrift.copyList(args.data, [TDataBlockPtr]);\n    }\n    if (args.num_rows !== undefined && args.num_rows !== null) {\n      this.num_rows = args.num_rows;\n    }\n  }\n};\nTInsertData.prototype = {};\nTInsertData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size200 = 0;\n          var _rtmp3204;\n          this.column_ids = [];\n          var _etype203 = 0;\n          _rtmp3204 = input.readListBegin();\n          _etype203 = _rtmp3204.etype;\n          _size200 = _rtmp3204.size;\n          for (var _i205 = 0; _i205 < _size200; ++_i205) {\n            var elem206 = null;\n            elem206 = input.readI32().value;\n            this.column_ids.push(elem206);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size207 = 0;\n          var _rtmp3211;\n          this.data = [];\n          var _etype210 = 0;\n          _rtmp3211 = input.readListBegin();\n          _etype210 = _rtmp3211.etype;\n          _size207 = _rtmp3211.size;\n          for (var _i212 = 0; _i212 < _size207; ++_i212) {\n            var elem213 = null;\n            elem213 = new TDataBlockPtr();\n            elem213.read(input);\n            this.data.push(elem213);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.num_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTInsertData.prototype.write = function (output) {\n  output.writeStructBegin('TInsertData');\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 1);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.column_ids !== null && this.column_ids !== undefined) {\n    output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.I32, this.column_ids.length);\n    for (var iter214 in this.column_ids) {\n      if (this.column_ids.hasOwnProperty(iter214)) {\n        iter214 = this.column_ids[iter214];\n        output.writeI32(iter214);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.data !== null && this.data !== undefined) {\n    output.writeFieldBegin('data', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);\n    for (var iter215 in this.data) {\n      if (this.data.hasOwnProperty(iter215)) {\n        iter215 = this.data[iter215];\n        iter215.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.num_rows !== null && this.num_rows !== undefined) {\n    output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);\n    output.writeI64(this.num_rows);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPendingRenderQuery = function (args) {\n  this.id = null;\n  if (args) {\n    if (args.id !== undefined && args.id !== null) {\n      this.id = args.id;\n    }\n  }\n};\nTPendingRenderQuery.prototype = {};\nTPendingRenderQuery.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPendingRenderQuery.prototype.write = function (output) {\n  output.writeStructBegin('TPendingRenderQuery');\n  if (this.id !== null && this.id !== undefined) {\n    output.writeFieldBegin('id', Thrift.Type.I64, 1);\n    output.writeI64(this.id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderParseResult = function (args) {\n  this.merge_type = null;\n  this.node_id = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  if (args) {\n    if (args.merge_type !== undefined && args.merge_type !== null) {\n      this.merge_type = args.merge_type;\n    }\n    if (args.node_id !== undefined && args.node_id !== null) {\n      this.node_id = args.node_id;\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n  }\n};\nTRenderParseResult.prototype = {};\nTRenderParseResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.merge_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.node_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderParseResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderParseResult');\n  if (this.merge_type !== null && this.merge_type !== undefined) {\n    output.writeFieldBegin('merge_type', Thrift.Type.I32, 1);\n    output.writeI32(this.merge_type);\n    output.writeFieldEnd();\n  }\n  if (this.node_id !== null && this.node_id !== undefined) {\n    output.writeFieldBegin('node_id', Thrift.Type.I32, 2);\n    output.writeI32(this.node_id);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRawRenderPassDataResult = function (args) {\n  this.num_pixel_channels = null;\n  this.num_pixel_samples = null;\n  this.pixels = null;\n  this.row_ids_A = null;\n  this.row_ids_B = null;\n  this.table_ids = null;\n  this.accum_data = null;\n  this.accum_depth = null;\n  if (args) {\n    if (args.num_pixel_channels !== undefined && args.num_pixel_channels !== null) {\n      this.num_pixel_channels = args.num_pixel_channels;\n    }\n    if (args.num_pixel_samples !== undefined && args.num_pixel_samples !== null) {\n      this.num_pixel_samples = args.num_pixel_samples;\n    }\n    if (args.pixels !== undefined && args.pixels !== null) {\n      this.pixels = args.pixels;\n    }\n    if (args.row_ids_A !== undefined && args.row_ids_A !== null) {\n      this.row_ids_A = args.row_ids_A;\n    }\n    if (args.row_ids_B !== undefined && args.row_ids_B !== null) {\n      this.row_ids_B = args.row_ids_B;\n    }\n    if (args.table_ids !== undefined && args.table_ids !== null) {\n      this.table_ids = args.table_ids;\n    }\n    if (args.accum_data !== undefined && args.accum_data !== null) {\n      this.accum_data = args.accum_data;\n    }\n    if (args.accum_depth !== undefined && args.accum_depth !== null) {\n      this.accum_depth = args.accum_depth;\n    }\n  }\n};\nTRawRenderPassDataResult.prototype = {};\nTRawRenderPassDataResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.num_pixel_channels = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.num_pixel_samples = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.pixels = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.row_ids_A = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.row_ids_B = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_ids = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.accum_data = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.I32) {\n          this.accum_depth = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRawRenderPassDataResult.prototype.write = function (output) {\n  output.writeStructBegin('TRawRenderPassDataResult');\n  if (this.num_pixel_channels !== null && this.num_pixel_channels !== undefined) {\n    output.writeFieldBegin('num_pixel_channels', Thrift.Type.I32, 1);\n    output.writeI32(this.num_pixel_channels);\n    output.writeFieldEnd();\n  }\n  if (this.num_pixel_samples !== null && this.num_pixel_samples !== undefined) {\n    output.writeFieldBegin('num_pixel_samples', Thrift.Type.I32, 2);\n    output.writeI32(this.num_pixel_samples);\n    output.writeFieldEnd();\n  }\n  if (this.pixels !== null && this.pixels !== undefined) {\n    output.writeFieldBegin('pixels', Thrift.Type.STRING, 3);\n    output.writeBinary(this.pixels);\n    output.writeFieldEnd();\n  }\n  if (this.row_ids_A !== null && this.row_ids_A !== undefined) {\n    output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 4);\n    output.writeBinary(this.row_ids_A);\n    output.writeFieldEnd();\n  }\n  if (this.row_ids_B !== null && this.row_ids_B !== undefined) {\n    output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 5);\n    output.writeBinary(this.row_ids_B);\n    output.writeFieldEnd();\n  }\n  if (this.table_ids !== null && this.table_ids !== undefined) {\n    output.writeFieldBegin('table_ids', Thrift.Type.STRING, 6);\n    output.writeBinary(this.table_ids);\n    output.writeFieldEnd();\n  }\n  if (this.accum_data !== null && this.accum_data !== undefined) {\n    output.writeFieldBegin('accum_data', Thrift.Type.STRING, 7);\n    output.writeBinary(this.accum_data);\n    output.writeFieldEnd();\n  }\n  if (this.accum_depth !== null && this.accum_depth !== undefined) {\n    output.writeFieldBegin('accum_depth', Thrift.Type.I32, 8);\n    output.writeI32(this.accum_depth);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRawPixelData = function (args) {\n  this.width = null;\n  this.height = null;\n  this.render_pass_map = null;\n  if (args) {\n    if (args.width !== undefined && args.width !== null) {\n      this.width = args.width;\n    }\n    if (args.height !== undefined && args.height !== null) {\n      this.height = args.height;\n    }\n    if (args.render_pass_map !== undefined && args.render_pass_map !== null) {\n      this.render_pass_map = Thrift.copyMap(args.render_pass_map, [TRawRenderPassDataResult]);\n    }\n  }\n};\nTRawPixelData.prototype = {};\nTRawPixelData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.width = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.height = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.MAP) {\n          var _size216 = 0;\n          var _rtmp3220;\n          this.render_pass_map = {};\n          var _ktype217 = 0;\n          var _vtype218 = 0;\n          _rtmp3220 = input.readMapBegin();\n          _ktype217 = _rtmp3220.ktype;\n          _vtype218 = _rtmp3220.vtype;\n          _size216 = _rtmp3220.size;\n          for (var _i221 = 0; _i221 < _size216; ++_i221) {\n            if (_i221 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key222 = null;\n            var val223 = null;\n            key222 = input.readI32().value;\n            val223 = new TRawRenderPassDataResult();\n            val223.read(input);\n            this.render_pass_map[key222] = val223;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRawPixelData.prototype.write = function (output) {\n  output.writeStructBegin('TRawPixelData');\n  if (this.width !== null && this.width !== undefined) {\n    output.writeFieldBegin('width', Thrift.Type.I32, 1);\n    output.writeI32(this.width);\n    output.writeFieldEnd();\n  }\n  if (this.height !== null && this.height !== undefined) {\n    output.writeFieldBegin('height', Thrift.Type.I32, 2);\n    output.writeI32(this.height);\n    output.writeFieldEnd();\n  }\n  if (this.render_pass_map !== null && this.render_pass_map !== undefined) {\n    output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);\n    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));\n    for (var kiter224 in this.render_pass_map) {\n      if (this.render_pass_map.hasOwnProperty(kiter224)) {\n        var viter225 = this.render_pass_map[kiter224];\n        output.writeI32(kiter224);\n        viter225.write(output);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderDatum = function (args) {\n  this.type = null;\n  this.cnt = null;\n  this.value = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.cnt !== undefined && args.cnt !== null) {\n      this.cnt = args.cnt;\n    }\n    if (args.value !== undefined && args.value !== null) {\n      this.value = args.value;\n    }\n  }\n};\nTRenderDatum.prototype = {};\nTRenderDatum.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.cnt = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.value = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderDatum.prototype.write = function (output) {\n  output.writeStructBegin('TRenderDatum');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.cnt !== null && this.cnt !== undefined) {\n    output.writeFieldBegin('cnt', Thrift.Type.I32, 2);\n    output.writeI32(this.cnt);\n    output.writeFieldEnd();\n  }\n  if (this.value !== null && this.value !== undefined) {\n    output.writeFieldBegin('value', Thrift.Type.STRING, 3);\n    output.writeBinary(this.value);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderStepResult = function (args) {\n  this.merge_data = null;\n  this.raw_pixel_data = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  if (args) {\n    if (args.merge_data !== undefined && args.merge_data !== null) {\n      this.merge_data = Thrift.copyMap(args.merge_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, TRenderDatum]);\n    }\n    if (args.raw_pixel_data !== undefined && args.raw_pixel_data !== null) {\n      this.raw_pixel_data = new TRawPixelData(args.raw_pixel_data);\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n  }\n};\nTRenderStepResult.prototype = {};\nTRenderStepResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.MAP) {\n          var _size226 = 0;\n          var _rtmp3230;\n          this.merge_data = {};\n          var _ktype227 = 0;\n          var _vtype228 = 0;\n          _rtmp3230 = input.readMapBegin();\n          _ktype227 = _rtmp3230.ktype;\n          _vtype228 = _rtmp3230.vtype;\n          _size226 = _rtmp3230.size;\n          for (var _i231 = 0; _i231 < _size226; ++_i231) {\n            if (_i231 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key232 = null;\n            var val233 = null;\n            key232 = input.readString().value;\n            var _size234 = 0;\n            var _rtmp3238;\n            val233 = {};\n            var _ktype235 = 0;\n            var _vtype236 = 0;\n            _rtmp3238 = input.readMapBegin();\n            _ktype235 = _rtmp3238.ktype;\n            _vtype236 = _rtmp3238.vtype;\n            _size234 = _rtmp3238.size;\n            for (var _i239 = 0; _i239 < _size234; ++_i239) {\n              if (_i239 > 0) {\n                if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                  input.rstack.pop();\n                }\n              }\n              var key240 = null;\n              var val241 = null;\n              key240 = input.readString().value;\n              var _size242 = 0;\n              var _rtmp3246;\n              val241 = {};\n              var _ktype243 = 0;\n              var _vtype244 = 0;\n              _rtmp3246 = input.readMapBegin();\n              _ktype243 = _rtmp3246.ktype;\n              _vtype244 = _rtmp3246.vtype;\n              _size242 = _rtmp3246.size;\n              for (var _i247 = 0; _i247 < _size242; ++_i247) {\n                if (_i247 > 0) {\n                  if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                    input.rstack.pop();\n                  }\n                }\n                var key248 = null;\n                var val249 = null;\n                key248 = input.readString().value;\n                var _size250 = 0;\n                var _rtmp3254;\n                val249 = {};\n                var _ktype251 = 0;\n                var _vtype252 = 0;\n                _rtmp3254 = input.readMapBegin();\n                _ktype251 = _rtmp3254.ktype;\n                _vtype252 = _rtmp3254.vtype;\n                _size250 = _rtmp3254.size;\n                for (var _i255 = 0; _i255 < _size250; ++_i255) {\n                  if (_i255 > 0) {\n                    if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                      input.rstack.pop();\n                    }\n                  }\n                  var key256 = null;\n                  var val257 = null;\n                  key256 = input.readString().value;\n                  var _size258 = 0;\n                  var _rtmp3262;\n                  val257 = [];\n                  var _etype261 = 0;\n                  _rtmp3262 = input.readListBegin();\n                  _etype261 = _rtmp3262.etype;\n                  _size258 = _rtmp3262.size;\n                  for (var _i263 = 0; _i263 < _size258; ++_i263) {\n                    var elem264 = null;\n                    elem264 = new TRenderDatum();\n                    elem264.read(input);\n                    val257.push(elem264);\n                  }\n                  input.readListEnd();\n                  val249[key256] = val257;\n                }\n                input.readMapEnd();\n                val241[key248] = val249;\n              }\n              input.readMapEnd();\n              val233[key240] = val241;\n            }\n            input.readMapEnd();\n            this.merge_data[key232] = val233;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.raw_pixel_data = new TRawPixelData();\n          this.raw_pixel_data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderStepResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderStepResult');\n  if (this.merge_data !== null && this.merge_data !== undefined) {\n    output.writeFieldBegin('merge_data', Thrift.Type.MAP, 1);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merge_data));\n    for (var kiter265 in this.merge_data) {\n      if (this.merge_data.hasOwnProperty(kiter265)) {\n        var viter266 = this.merge_data[kiter265];\n        output.writeString(kiter265);\n        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter266));\n        for (var kiter267 in viter266) {\n          if (viter266.hasOwnProperty(kiter267)) {\n            var viter268 = viter266[kiter267];\n            output.writeString(kiter267);\n            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter268));\n            for (var kiter269 in viter268) {\n              if (viter268.hasOwnProperty(kiter269)) {\n                var viter270 = viter268[kiter269];\n                output.writeString(kiter269);\n                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter270));\n                for (var kiter271 in viter270) {\n                  if (viter270.hasOwnProperty(kiter271)) {\n                    var viter272 = viter270[kiter271];\n                    output.writeString(kiter271);\n                    output.writeListBegin(Thrift.Type.STRUCT, viter272.length);\n                    for (var iter273 in viter272) {\n                      if (viter272.hasOwnProperty(iter273)) {\n                        iter273 = viter272[iter273];\n                        iter273.write(output);\n                      }\n                    }\n                    output.writeListEnd();\n                  }\n                }\n                output.writeMapEnd();\n              }\n            }\n            output.writeMapEnd();\n          }\n        }\n        output.writeMapEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.raw_pixel_data !== null && this.raw_pixel_data !== undefined) {\n    output.writeFieldBegin('raw_pixel_data', Thrift.Type.STRUCT, 2);\n    this.raw_pixel_data.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDatabasePermissions = function (args) {\n  this.create_ = null;\n  this.delete_ = null;\n  this.view_sql_editor_ = null;\n  this.access_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n    if (args.view_sql_editor_ !== undefined && args.view_sql_editor_ !== null) {\n      this.view_sql_editor_ = args.view_sql_editor_;\n    }\n    if (args.access_ !== undefined && args.access_ !== null) {\n      this.access_ = args.access_;\n    }\n  }\n};\nTDatabasePermissions.prototype = {};\nTDatabasePermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.view_sql_editor_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.access_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatabasePermissions.prototype.write = function (output) {\n  output.writeStructBegin('TDatabasePermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  if (this.view_sql_editor_ !== null && this.view_sql_editor_ !== undefined) {\n    output.writeFieldBegin('view_sql_editor_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.view_sql_editor_);\n    output.writeFieldEnd();\n  }\n  if (this.access_ !== null && this.access_ !== undefined) {\n    output.writeFieldBegin('access_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.access_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTablePermissions = function (args) {\n  this.create_ = null;\n  this.drop_ = null;\n  this.select_ = null;\n  this.insert_ = null;\n  this.update_ = null;\n  this.delete_ = null;\n  this.truncate_ = null;\n  this.alter_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.drop_ !== undefined && args.drop_ !== null) {\n      this.drop_ = args.drop_;\n    }\n    if (args.select_ !== undefined && args.select_ !== null) {\n      this.select_ = args.select_;\n    }\n    if (args.insert_ !== undefined && args.insert_ !== null) {\n      this.insert_ = args.insert_;\n    }\n    if (args.update_ !== undefined && args.update_ !== null) {\n      this.update_ = args.update_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n    if (args.truncate_ !== undefined && args.truncate_ !== null) {\n      this.truncate_ = args.truncate_;\n    }\n    if (args.alter_ !== undefined && args.alter_ !== null) {\n      this.alter_ = args.alter_;\n    }\n  }\n};\nTTablePermissions.prototype = {};\nTTablePermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.drop_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.select_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.insert_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.update_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.truncate_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.BOOL) {\n          this.alter_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTablePermissions.prototype.write = function (output) {\n  output.writeStructBegin('TTablePermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.drop_ !== null && this.drop_ !== undefined) {\n    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.drop_);\n    output.writeFieldEnd();\n  }\n  if (this.select_ !== null && this.select_ !== undefined) {\n    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.select_);\n    output.writeFieldEnd();\n  }\n  if (this.insert_ !== null && this.insert_ !== undefined) {\n    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.insert_);\n    output.writeFieldEnd();\n  }\n  if (this.update_ !== null && this.update_ !== undefined) {\n    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);\n    output.writeBool(this.update_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  if (this.truncate_ !== null && this.truncate_ !== undefined) {\n    output.writeFieldBegin('truncate_', Thrift.Type.BOOL, 7);\n    output.writeBool(this.truncate_);\n    output.writeFieldEnd();\n  }\n  if (this.alter_ !== null && this.alter_ !== undefined) {\n    output.writeFieldBegin('alter_', Thrift.Type.BOOL, 8);\n    output.writeBool(this.alter_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDashboardPermissions = function (args) {\n  this.create_ = null;\n  this.delete_ = null;\n  this.view_ = null;\n  this.edit_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n    if (args.view_ !== undefined && args.view_ !== null) {\n      this.view_ = args.view_;\n    }\n    if (args.edit_ !== undefined && args.edit_ !== null) {\n      this.edit_ = args.edit_;\n    }\n  }\n};\nTDashboardPermissions.prototype = {};\nTDashboardPermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.view_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.edit_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDashboardPermissions.prototype.write = function (output) {\n  output.writeStructBegin('TDashboardPermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  if (this.view_ !== null && this.view_ !== undefined) {\n    output.writeFieldBegin('view_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.view_);\n    output.writeFieldEnd();\n  }\n  if (this.edit_ !== null && this.edit_ !== undefined) {\n    output.writeFieldBegin('edit_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.edit_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TViewPermissions = function (args) {\n  this.create_ = null;\n  this.drop_ = null;\n  this.select_ = null;\n  this.insert_ = null;\n  this.update_ = null;\n  this.delete_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.drop_ !== undefined && args.drop_ !== null) {\n      this.drop_ = args.drop_;\n    }\n    if (args.select_ !== undefined && args.select_ !== null) {\n      this.select_ = args.select_;\n    }\n    if (args.insert_ !== undefined && args.insert_ !== null) {\n      this.insert_ = args.insert_;\n    }\n    if (args.update_ !== undefined && args.update_ !== null) {\n      this.update_ = args.update_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n  }\n};\nTViewPermissions.prototype = {};\nTViewPermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.drop_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.select_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.insert_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.update_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTViewPermissions.prototype.write = function (output) {\n  output.writeStructBegin('TViewPermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.drop_ !== null && this.drop_ !== undefined) {\n    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.drop_);\n    output.writeFieldEnd();\n  }\n  if (this.select_ !== null && this.select_ !== undefined) {\n    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.select_);\n    output.writeFieldEnd();\n  }\n  if (this.insert_ !== null && this.insert_ !== undefined) {\n    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.insert_);\n    output.writeFieldEnd();\n  }\n  if (this.update_ !== null && this.update_ !== undefined) {\n    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);\n    output.writeBool(this.update_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDBObjectPermissions = function (args) {\n  this.database_permissions_ = null;\n  this.table_permissions_ = null;\n  this.dashboard_permissions_ = null;\n  this.view_permissions_ = null;\n  if (args) {\n    if (args.database_permissions_ !== undefined && args.database_permissions_ !== null) {\n      this.database_permissions_ = new TDatabasePermissions(args.database_permissions_);\n    }\n    if (args.table_permissions_ !== undefined && args.table_permissions_ !== null) {\n      this.table_permissions_ = new TTablePermissions(args.table_permissions_);\n    }\n    if (args.dashboard_permissions_ !== undefined && args.dashboard_permissions_ !== null) {\n      this.dashboard_permissions_ = new TDashboardPermissions(args.dashboard_permissions_);\n    }\n    if (args.view_permissions_ !== undefined && args.view_permissions_ !== null) {\n      this.view_permissions_ = new TViewPermissions(args.view_permissions_);\n    }\n  }\n};\nTDBObjectPermissions.prototype = {};\nTDBObjectPermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.database_permissions_ = new TDatabasePermissions();\n          this.database_permissions_.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.table_permissions_ = new TTablePermissions();\n          this.table_permissions_.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.dashboard_permissions_ = new TDashboardPermissions();\n          this.dashboard_permissions_.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.view_permissions_ = new TViewPermissions();\n          this.view_permissions_.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDBObjectPermissions.prototype.write = function (output) {\n  output.writeStructBegin('TDBObjectPermissions');\n  if (this.database_permissions_ !== null && this.database_permissions_ !== undefined) {\n    output.writeFieldBegin('database_permissions_', Thrift.Type.STRUCT, 1);\n    this.database_permissions_.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.table_permissions_ !== null && this.table_permissions_ !== undefined) {\n    output.writeFieldBegin('table_permissions_', Thrift.Type.STRUCT, 2);\n    this.table_permissions_.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_permissions_ !== null && this.dashboard_permissions_ !== undefined) {\n    output.writeFieldBegin('dashboard_permissions_', Thrift.Type.STRUCT, 3);\n    this.dashboard_permissions_.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.view_permissions_ !== null && this.view_permissions_ !== undefined) {\n    output.writeFieldBegin('view_permissions_', Thrift.Type.STRUCT, 4);\n    this.view_permissions_.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDBObject = function (args) {\n  this.objectName = null;\n  this.objectType = null;\n  this.privs = null;\n  this.grantee = null;\n  this.privilegeObjectType = null;\n  if (args) {\n    if (args.objectName !== undefined && args.objectName !== null) {\n      this.objectName = args.objectName;\n    }\n    if (args.objectType !== undefined && args.objectType !== null) {\n      this.objectType = args.objectType;\n    }\n    if (args.privs !== undefined && args.privs !== null) {\n      this.privs = Thrift.copyList(args.privs, [null]);\n    }\n    if (args.grantee !== undefined && args.grantee !== null) {\n      this.grantee = args.grantee;\n    }\n    if (args.privilegeObjectType !== undefined && args.privilegeObjectType !== null) {\n      this.privilegeObjectType = args.privilegeObjectType;\n    }\n  }\n};\nTDBObject.prototype = {};\nTDBObject.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.objectName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.objectType = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size274 = 0;\n          var _rtmp3278;\n          this.privs = [];\n          var _etype277 = 0;\n          _rtmp3278 = input.readListBegin();\n          _etype277 = _rtmp3278.etype;\n          _size274 = _rtmp3278.size;\n          for (var _i279 = 0; _i279 < _size274; ++_i279) {\n            var elem280 = null;\n            elem280 = input.readBool().value;\n            this.privs.push(elem280);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.grantee = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.privilegeObjectType = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDBObject.prototype.write = function (output) {\n  output.writeStructBegin('TDBObject');\n  if (this.objectName !== null && this.objectName !== undefined) {\n    output.writeFieldBegin('objectName', Thrift.Type.STRING, 1);\n    output.writeString(this.objectName);\n    output.writeFieldEnd();\n  }\n  if (this.objectType !== null && this.objectType !== undefined) {\n    output.writeFieldBegin('objectType', Thrift.Type.I32, 2);\n    output.writeI32(this.objectType);\n    output.writeFieldEnd();\n  }\n  if (this.privs !== null && this.privs !== undefined) {\n    output.writeFieldBegin('privs', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.BOOL, this.privs.length);\n    for (var iter281 in this.privs) {\n      if (this.privs.hasOwnProperty(iter281)) {\n        iter281 = this.privs[iter281];\n        output.writeBool(iter281);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.grantee !== null && this.grantee !== undefined) {\n    output.writeFieldBegin('grantee', Thrift.Type.STRING, 4);\n    output.writeString(this.grantee);\n    output.writeFieldEnd();\n  }\n  if (this.privilegeObjectType !== null && this.privilegeObjectType !== undefined) {\n    output.writeFieldBegin('privilegeObjectType', Thrift.Type.I32, 5);\n    output.writeI32(this.privilegeObjectType);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDashboardGrantees = function (args) {\n  this.name = null;\n  this.is_user = null;\n  this.permissions = null;\n  if (args) {\n    if (args.name !== undefined && args.name !== null) {\n      this.name = args.name;\n    }\n    if (args.is_user !== undefined && args.is_user !== null) {\n      this.is_user = args.is_user;\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n  }\n};\nTDashboardGrantees.prototype = {};\nTDashboardGrantees.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_user = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDashboardGrantees.prototype.write = function (output) {\n  output.writeStructBegin('TDashboardGrantees');\n  if (this.name !== null && this.name !== undefined) {\n    output.writeFieldBegin('name', Thrift.Type.STRING, 1);\n    output.writeString(this.name);\n    output.writeFieldEnd();\n  }\n  if (this.is_user !== null && this.is_user !== undefined) {\n    output.writeFieldBegin('is_user', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_user);\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 3);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TLicenseInfo = function (args) {\n  this.claims = null;\n  if (args) {\n    if (args.claims !== undefined && args.claims !== null) {\n      this.claims = Thrift.copyList(args.claims, [null]);\n    }\n  }\n};\nTLicenseInfo.prototype = {};\nTLicenseInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          var _size282 = 0;\n          var _rtmp3286;\n          this.claims = [];\n          var _etype285 = 0;\n          _rtmp3286 = input.readListBegin();\n          _etype285 = _rtmp3286.etype;\n          _size282 = _rtmp3286.size;\n          for (var _i287 = 0; _i287 < _size282; ++_i287) {\n            var elem288 = null;\n            elem288 = input.readString().value;\n            this.claims.push(elem288);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTLicenseInfo.prototype.write = function (output) {\n  output.writeStructBegin('TLicenseInfo');\n  if (this.claims !== null && this.claims !== undefined) {\n    output.writeFieldBegin('claims', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRING, this.claims.length);\n    for (var iter289 in this.claims) {\n      if (this.claims.hasOwnProperty(iter289)) {\n        iter289 = this.claims[iter289];\n        output.writeString(iter289);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TSessionInfo = function (args) {\n  this.user = null;\n  this.database = null;\n  this.start_time = null;\n  this.is_super = null;\n  if (args) {\n    if (args.user !== undefined && args.user !== null) {\n      this.user = args.user;\n    }\n    if (args.database !== undefined && args.database !== null) {\n      this.database = args.database;\n    }\n    if (args.start_time !== undefined && args.start_time !== null) {\n      this.start_time = args.start_time;\n    }\n    if (args.is_super !== undefined && args.is_super !== null) {\n      this.is_super = args.is_super;\n    }\n  }\n};\nTSessionInfo.prototype = {};\nTSessionInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.user = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.database = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.start_time = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_super = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTSessionInfo.prototype.write = function (output) {\n  output.writeStructBegin('TSessionInfo');\n  if (this.user !== null && this.user !== undefined) {\n    output.writeFieldBegin('user', Thrift.Type.STRING, 1);\n    output.writeString(this.user);\n    output.writeFieldEnd();\n  }\n  if (this.database !== null && this.database !== undefined) {\n    output.writeFieldBegin('database', Thrift.Type.STRING, 2);\n    output.writeString(this.database);\n    output.writeFieldEnd();\n  }\n  if (this.start_time !== null && this.start_time !== undefined) {\n    output.writeFieldBegin('start_time', Thrift.Type.I64, 3);\n    output.writeI64(this.start_time);\n    output.writeFieldEnd();\n  }\n  if (this.is_super !== null && this.is_super !== undefined) {\n    output.writeFieldBegin('is_super', Thrift.Type.BOOL, 4);\n    output.writeBool(this.is_super);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TGeoFileLayerInfo = function (args) {\n  this.name = null;\n  this.contents = null;\n  if (args) {\n    if (args.name !== undefined && args.name !== null) {\n      this.name = args.name;\n    }\n    if (args.contents !== undefined && args.contents !== null) {\n      this.contents = args.contents;\n    }\n  }\n};\nTGeoFileLayerInfo.prototype = {};\nTGeoFileLayerInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.contents = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTGeoFileLayerInfo.prototype.write = function (output) {\n  output.writeStructBegin('TGeoFileLayerInfo');\n  if (this.name !== null && this.name !== undefined) {\n    output.writeFieldBegin('name', Thrift.Type.STRING, 1);\n    output.writeString(this.name);\n    output.writeFieldEnd();\n  }\n  if (this.contents !== null && this.contents !== undefined) {\n    output.writeFieldBegin('contents', Thrift.Type.I32, 2);\n    output.writeI32(this.contents);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableEpochInfo = function (args) {\n  this.table_id = null;\n  this.table_epoch = null;\n  this.leaf_index = null;\n  if (args) {\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.table_epoch !== undefined && args.table_epoch !== null) {\n      this.table_epoch = args.table_epoch;\n    }\n    if (args.leaf_index !== undefined && args.leaf_index !== null) {\n      this.leaf_index = args.leaf_index;\n    }\n  }\n};\nTTableEpochInfo.prototype = {};\nTTableEpochInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.table_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.leaf_index = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableEpochInfo.prototype.write = function (output) {\n  output.writeStructBegin('TTableEpochInfo');\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_epoch !== null && this.table_epoch !== undefined) {\n    output.writeFieldBegin('table_epoch', Thrift.Type.I32, 2);\n    output.writeI32(this.table_epoch);\n    output.writeFieldEnd();\n  }\n  if (this.leaf_index !== null && this.leaf_index !== undefined) {\n    output.writeFieldBegin('leaf_index', Thrift.Type.I32, 3);\n    output.writeI32(this.leaf_index);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(11))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.10.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\n\n//HELPER FUNCTIONS AND STRUCTURES\n\nwindow.OmniSci_connect_args = function (args) {\n  this.user = null;\n  this.passwd = null;\n  this.dbname = null;\n  if (args) {\n    if (args.user !== undefined && args.user !== null) {\n      this.user = args.user;\n    }\n    if (args.passwd !== undefined && args.passwd !== null) {\n      this.passwd = args.passwd;\n    }\n    if (args.dbname !== undefined && args.dbname !== null) {\n      this.dbname = args.dbname;\n    }\n  }\n};\nOmniSci_connect_args.prototype = {};\nOmniSci_connect_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.user = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.passwd = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dbname = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_connect_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_connect_args');\n  if (this.user !== null && this.user !== undefined) {\n    output.writeFieldBegin('user', Thrift.Type.STRING, 1);\n    output.writeString(this.user);\n    output.writeFieldEnd();\n  }\n  if (this.passwd !== null && this.passwd !== undefined) {\n    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);\n    output.writeString(this.passwd);\n    output.writeFieldEnd();\n  }\n  if (this.dbname !== null && this.dbname !== undefined) {\n    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);\n    output.writeString(this.dbname);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_connect_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_connect_result.prototype = {};\nOmniSci_connect_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_connect_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_connect_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_krb5_connect_args = function (args) {\n  this.inputToken = null;\n  this.dbname = null;\n  if (args) {\n    if (args.inputToken !== undefined && args.inputToken !== null) {\n      this.inputToken = args.inputToken;\n    }\n    if (args.dbname !== undefined && args.dbname !== null) {\n      this.dbname = args.dbname;\n    }\n  }\n};\nOmniSci_krb5_connect_args.prototype = {};\nOmniSci_krb5_connect_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.inputToken = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dbname = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_krb5_connect_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_krb5_connect_args');\n  if (this.inputToken !== null && this.inputToken !== undefined) {\n    output.writeFieldBegin('inputToken', Thrift.Type.STRING, 1);\n    output.writeString(this.inputToken);\n    output.writeFieldEnd();\n  }\n  if (this.dbname !== null && this.dbname !== undefined) {\n    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);\n    output.writeString(this.dbname);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_krb5_connect_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TKrb5Session(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_krb5_connect_result.prototype = {};\nOmniSci_krb5_connect_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TKrb5Session();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_krb5_connect_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_krb5_connect_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_disconnect_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_disconnect_args.prototype = {};\nOmniSci_disconnect_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_disconnect_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_disconnect_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_disconnect_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_disconnect_result.prototype = {};\nOmniSci_disconnect_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_disconnect_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_disconnect_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_switch_database_args = function (args) {\n  this.session = null;\n  this.dbname = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dbname !== undefined && args.dbname !== null) {\n      this.dbname = args.dbname;\n    }\n  }\n};\nOmniSci_switch_database_args.prototype = {};\nOmniSci_switch_database_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dbname = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_switch_database_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_switch_database_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dbname !== null && this.dbname !== undefined) {\n    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);\n    output.writeString(this.dbname);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_switch_database_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_switch_database_result.prototype = {};\nOmniSci_switch_database_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_switch_database_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_switch_database_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clone_session_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_clone_session_args.prototype = {};\nOmniSci_clone_session_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clone_session_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clone_session_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clone_session_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_clone_session_result.prototype = {};\nOmniSci_clone_session_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clone_session_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clone_session_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_server_status_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_server_status_args.prototype = {};\nOmniSci_get_server_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_server_status_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_server_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_server_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TServerStatus(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_server_status_result.prototype = {};\nOmniSci_get_server_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TServerStatus();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_server_status_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_server_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_status_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_status_args.prototype = {};\nOmniSci_get_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_status_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TServerStatus]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_status_result.prototype = {};\nOmniSci_get_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size290 = 0;\n          var _rtmp3294;\n          this.success = [];\n          var _etype293 = 0;\n          _rtmp3294 = input.readListBegin();\n          _etype293 = _rtmp3294.etype;\n          _size290 = _rtmp3294.size;\n          for (var _i295 = 0; _i295 < _size290; ++_i295) {\n            var elem296 = null;\n            elem296 = new TServerStatus();\n            elem296.read(input);\n            this.success.push(elem296);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_status_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter297 in this.success) {\n      if (this.success.hasOwnProperty(iter297)) {\n        iter297 = this.success[iter297];\n        iter297.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_hardware_info_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_hardware_info_args.prototype = {};\nOmniSci_get_hardware_info_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_hardware_info_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_hardware_info_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_hardware_info_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TClusterHardwareInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_hardware_info_result.prototype = {};\nOmniSci_get_hardware_info_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TClusterHardwareInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_hardware_info_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_hardware_info_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_tables_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_tables_args.prototype = {};\nOmniSci_get_tables_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_tables_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_tables_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_tables_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_tables_result.prototype = {};\nOmniSci_get_tables_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size298 = 0;\n          var _rtmp3302;\n          this.success = [];\n          var _etype301 = 0;\n          _rtmp3302 = input.readListBegin();\n          _etype301 = _rtmp3302.etype;\n          _size298 = _rtmp3302.size;\n          for (var _i303 = 0; _i303 < _size298; ++_i303) {\n            var elem304 = null;\n            elem304 = input.readString().value;\n            this.success.push(elem304);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_tables_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_tables_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter305 in this.success) {\n      if (this.success.hasOwnProperty(iter305)) {\n        iter305 = this.success[iter305];\n        output.writeString(iter305);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_physical_tables_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_physical_tables_args.prototype = {};\nOmniSci_get_physical_tables_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_physical_tables_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_physical_tables_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_physical_tables_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_physical_tables_result.prototype = {};\nOmniSci_get_physical_tables_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size306 = 0;\n          var _rtmp3310;\n          this.success = [];\n          var _etype309 = 0;\n          _rtmp3310 = input.readListBegin();\n          _etype309 = _rtmp3310.etype;\n          _size306 = _rtmp3310.size;\n          for (var _i311 = 0; _i311 < _size306; ++_i311) {\n            var elem312 = null;\n            elem312 = input.readString().value;\n            this.success.push(elem312);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_physical_tables_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_physical_tables_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter313 in this.success) {\n      if (this.success.hasOwnProperty(iter313)) {\n        iter313 = this.success[iter313];\n        output.writeString(iter313);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_views_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_views_args.prototype = {};\nOmniSci_get_views_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_views_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_views_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_views_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_views_result.prototype = {};\nOmniSci_get_views_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size314 = 0;\n          var _rtmp3318;\n          this.success = [];\n          var _etype317 = 0;\n          _rtmp3318 = input.readListBegin();\n          _etype317 = _rtmp3318.etype;\n          _size314 = _rtmp3318.size;\n          for (var _i319 = 0; _i319 < _size314; ++_i319) {\n            var elem320 = null;\n            elem320 = input.readString().value;\n            this.success.push(elem320);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_views_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_views_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter321 in this.success) {\n      if (this.success.hasOwnProperty(iter321)) {\n        iter321 = this.success[iter321];\n        output.writeString(iter321);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_tables_meta_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_tables_meta_args.prototype = {};\nOmniSci_get_tables_meta_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_tables_meta_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_tables_meta_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_tables_meta_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TTableMeta]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_tables_meta_result.prototype = {};\nOmniSci_get_tables_meta_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size322 = 0;\n          var _rtmp3326;\n          this.success = [];\n          var _etype325 = 0;\n          _rtmp3326 = input.readListBegin();\n          _etype325 = _rtmp3326.etype;\n          _size322 = _rtmp3326.size;\n          for (var _i327 = 0; _i327 < _size322; ++_i327) {\n            var elem328 = null;\n            elem328 = new TTableMeta();\n            elem328.read(input);\n            this.success.push(elem328);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_tables_meta_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_tables_meta_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter329 in this.success) {\n      if (this.success.hasOwnProperty(iter329)) {\n        iter329 = this.success[iter329];\n        iter329.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_details_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nOmniSci_get_table_details_args.prototype = {};\nOmniSci_get_table_details_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_details_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_details_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_details_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TTableDetails(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_table_details_result.prototype = {};\nOmniSci_get_table_details_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TTableDetails();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_details_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_details_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_internal_table_details_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nOmniSci_get_internal_table_details_args.prototype = {};\nOmniSci_get_internal_table_details_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_internal_table_details_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_internal_table_details_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_internal_table_details_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TTableDetails(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_internal_table_details_result.prototype = {};\nOmniSci_get_internal_table_details_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TTableDetails();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_internal_table_details_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_internal_table_details_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_users_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_users_args.prototype = {};\nOmniSci_get_users_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_users_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_users_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_users_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_users_result.prototype = {};\nOmniSci_get_users_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size330 = 0;\n          var _rtmp3334;\n          this.success = [];\n          var _etype333 = 0;\n          _rtmp3334 = input.readListBegin();\n          _etype333 = _rtmp3334.etype;\n          _size330 = _rtmp3334.size;\n          for (var _i335 = 0; _i335 < _size330; ++_i335) {\n            var elem336 = null;\n            elem336 = input.readString().value;\n            this.success.push(elem336);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_users_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_users_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter337 in this.success) {\n      if (this.success.hasOwnProperty(iter337)) {\n        iter337 = this.success[iter337];\n        output.writeString(iter337);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_databases_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_databases_args.prototype = {};\nOmniSci_get_databases_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_databases_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_databases_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_databases_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBInfo]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_databases_result.prototype = {};\nOmniSci_get_databases_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size338 = 0;\n          var _rtmp3342;\n          this.success = [];\n          var _etype341 = 0;\n          _rtmp3342 = input.readListBegin();\n          _etype341 = _rtmp3342.etype;\n          _size338 = _rtmp3342.size;\n          for (var _i343 = 0; _i343 < _size338; ++_i343) {\n            var elem344 = null;\n            elem344 = new TDBInfo();\n            elem344.read(input);\n            this.success.push(elem344);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_databases_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_databases_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter345 in this.success) {\n      if (this.success.hasOwnProperty(iter345)) {\n        iter345 = this.success[iter345];\n        iter345.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_version_args = function (args) {};\nOmniSci_get_version_args.prototype = {};\nOmniSci_get_version_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    input.skip(ftype);\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_version_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_version_args');\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_version_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_version_result.prototype = {};\nOmniSci_get_version_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_version_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_version_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_start_heap_profile_args.prototype = {};\nOmniSci_start_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_heap_profile_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_start_heap_profile_result.prototype = {};\nOmniSci_start_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_heap_profile_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_stop_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_stop_heap_profile_args.prototype = {};\nOmniSci_stop_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_stop_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_stop_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_stop_heap_profile_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_stop_heap_profile_result.prototype = {};\nOmniSci_stop_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_stop_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_stop_heap_profile_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_heap_profile_args.prototype = {};\nOmniSci_get_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_heap_profile_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_heap_profile_result.prototype = {};\nOmniSci_get_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_heap_profile_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_memory_args = function (args) {\n  this.session = null;\n  this.memory_level = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.memory_level !== undefined && args.memory_level !== null) {\n      this.memory_level = args.memory_level;\n    }\n  }\n};\nOmniSci_get_memory_args.prototype = {};\nOmniSci_get_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.memory_level = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.memory_level !== null && this.memory_level !== undefined) {\n    output.writeFieldBegin('memory_level', Thrift.Type.STRING, 2);\n    output.writeString(this.memory_level);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_memory_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TNodeMemoryInfo]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_memory_result.prototype = {};\nOmniSci_get_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size346 = 0;\n          var _rtmp3350;\n          this.success = [];\n          var _etype349 = 0;\n          _rtmp3350 = input.readListBegin();\n          _etype349 = _rtmp3350.etype;\n          _size346 = _rtmp3350.size;\n          for (var _i351 = 0; _i351 < _size346; ++_i351) {\n            var elem352 = null;\n            elem352 = new TNodeMemoryInfo();\n            elem352.read(input);\n            this.success.push(elem352);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_memory_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter353 in this.success) {\n      if (this.success.hasOwnProperty(iter353)) {\n        iter353 = this.success[iter353];\n        iter353.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clear_cpu_memory_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_clear_cpu_memory_args.prototype = {};\nOmniSci_clear_cpu_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clear_cpu_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clear_cpu_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clear_cpu_memory_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_clear_cpu_memory_result.prototype = {};\nOmniSci_clear_cpu_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clear_cpu_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clear_cpu_memory_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clear_gpu_memory_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_clear_gpu_memory_args.prototype = {};\nOmniSci_clear_gpu_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clear_gpu_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clear_gpu_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clear_gpu_memory_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_clear_gpu_memory_result.prototype = {};\nOmniSci_clear_gpu_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clear_gpu_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clear_gpu_memory_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epoch_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  this.new_epoch = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.new_epoch !== undefined && args.new_epoch !== null) {\n      this.new_epoch = args.new_epoch;\n    }\n  }\n};\nOmniSci_set_table_epoch_args.prototype = {};\nOmniSci_set_table_epoch_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.new_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epoch_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epoch_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.new_epoch !== null && this.new_epoch !== undefined) {\n    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 4);\n    output.writeI32(this.new_epoch);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epoch_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_set_table_epoch_result.prototype = {};\nOmniSci_set_table_epoch_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epoch_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epoch_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epoch_by_name_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.new_epoch = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.new_epoch !== undefined && args.new_epoch !== null) {\n      this.new_epoch = args.new_epoch;\n    }\n  }\n};\nOmniSci_set_table_epoch_by_name_args.prototype = {};\nOmniSci_set_table_epoch_by_name_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.new_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epoch_by_name_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epoch_by_name_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.new_epoch !== null && this.new_epoch !== undefined) {\n    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 3);\n    output.writeI32(this.new_epoch);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epoch_by_name_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_set_table_epoch_by_name_result.prototype = {};\nOmniSci_set_table_epoch_by_name_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epoch_by_name_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epoch_by_name_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epoch_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nOmniSci_get_table_epoch_args.prototype = {};\nOmniSci_get_table_epoch_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epoch_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epoch_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epoch_result = function (args) {\n  this.success = null;\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n  }\n};\nOmniSci_get_table_epoch_result.prototype = {};\nOmniSci_get_table_epoch_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epoch_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epoch_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epoch_by_name_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nOmniSci_get_table_epoch_by_name_args.prototype = {};\nOmniSci_get_table_epoch_by_name_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epoch_by_name_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epoch_by_name_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epoch_by_name_result = function (args) {\n  this.success = null;\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n  }\n};\nOmniSci_get_table_epoch_by_name_result.prototype = {};\nOmniSci_get_table_epoch_by_name_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epoch_by_name_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epoch_by_name_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epochs_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nOmniSci_get_table_epochs_args.prototype = {};\nOmniSci_get_table_epochs_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epochs_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epochs_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epochs_result = function (args) {\n  this.success = null;\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TTableEpochInfo]);\n    }\n  }\n};\nOmniSci_get_table_epochs_result.prototype = {};\nOmniSci_get_table_epochs_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size354 = 0;\n          var _rtmp3358;\n          this.success = [];\n          var _etype357 = 0;\n          _rtmp3358 = input.readListBegin();\n          _etype357 = _rtmp3358.etype;\n          _size354 = _rtmp3358.size;\n          for (var _i359 = 0; _i359 < _size354; ++_i359) {\n            var elem360 = null;\n            elem360 = new TTableEpochInfo();\n            elem360.read(input);\n            this.success.push(elem360);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epochs_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epochs_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter361 in this.success) {\n      if (this.success.hasOwnProperty(iter361)) {\n        iter361 = this.success[iter361];\n        iter361.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epochs_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_epochs = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_epochs !== undefined && args.table_epochs !== null) {\n      this.table_epochs = Thrift.copyList(args.table_epochs, [TTableEpochInfo]);\n    }\n  }\n};\nOmniSci_set_table_epochs_args.prototype = {};\nOmniSci_set_table_epochs_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size362 = 0;\n          var _rtmp3366;\n          this.table_epochs = [];\n          var _etype365 = 0;\n          _rtmp3366 = input.readListBegin();\n          _etype365 = _rtmp3366.etype;\n          _size362 = _rtmp3366.size;\n          for (var _i367 = 0; _i367 < _size362; ++_i367) {\n            var elem368 = null;\n            elem368 = new TTableEpochInfo();\n            elem368.read(input);\n            this.table_epochs.push(elem368);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epochs_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epochs_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_epochs !== null && this.table_epochs !== undefined) {\n    output.writeFieldBegin('table_epochs', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.table_epochs.length);\n    for (var iter369 in this.table_epochs) {\n      if (this.table_epochs.hasOwnProperty(iter369)) {\n        iter369 = this.table_epochs[iter369];\n        iter369.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epochs_result = function (args) {};\nOmniSci_set_table_epochs_result.prototype = {};\nOmniSci_set_table_epochs_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    input.skip(ftype);\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epochs_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epochs_result');\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_session_info_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_session_info_args.prototype = {};\nOmniSci_get_session_info_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_session_info_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_session_info_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_session_info_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TSessionInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_session_info_result.prototype = {};\nOmniSci_get_session_info_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TSessionInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_session_info_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_session_info_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.column_format = null;\n  this.nonce = null;\n  this.first_n = -1;\n  this.at_most_n = -1;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.column_format !== undefined && args.column_format !== null) {\n      this.column_format = args.column_format;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n    if (args.at_most_n !== undefined && args.at_most_n !== null) {\n      this.at_most_n = args.at_most_n;\n    }\n  }\n};\nOmniSci_sql_execute_args.prototype = {};\nOmniSci_sql_execute_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.column_format = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.at_most_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.column_format !== null && this.column_format !== undefined) {\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);\n    output.writeBool(this.column_format);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  if (this.at_most_n !== null && this.at_most_n !== undefined) {\n    output.writeFieldBegin('at_most_n', Thrift.Type.I32, 6);\n    output.writeI32(this.at_most_n);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TQueryResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_sql_execute_result.prototype = {};\nOmniSci_sql_execute_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TQueryResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_df_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.device_type = null;\n  this.device_id = 0;\n  this.first_n = -1;\n  this.transport_method = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.device_type !== undefined && args.device_type !== null) {\n      this.device_type = args.device_type;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n    if (args.transport_method !== undefined && args.transport_method !== null) {\n      this.transport_method = args.transport_method;\n    }\n  }\n};\nOmniSci_sql_execute_df_args.prototype = {};\nOmniSci_sql_execute_df_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.transport_method = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_df_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_df_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.device_type !== null && this.device_type !== undefined) {\n    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);\n    output.writeI32(this.device_type);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  if (this.transport_method !== null && this.transport_method !== undefined) {\n    output.writeFieldBegin('transport_method', Thrift.Type.I32, 6);\n    output.writeI32(this.transport_method);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_df_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDataFrame(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_sql_execute_df_result.prototype = {};\nOmniSci_sql_execute_df_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDataFrame();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_df_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_df_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_gdf_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.device_id = 0;\n  this.first_n = -1;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n  }\n};\nOmniSci_sql_execute_gdf_args.prototype = {};\nOmniSci_sql_execute_gdf_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_gdf_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_gdf_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_gdf_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDataFrame(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_sql_execute_gdf_result.prototype = {};\nOmniSci_sql_execute_gdf_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDataFrame();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_gdf_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_gdf_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_deallocate_df_args = function (args) {\n  this.session = null;\n  this.df = null;\n  this.device_type = null;\n  this.device_id = 0;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.df !== undefined && args.df !== null) {\n      this.df = new TDataFrame(args.df);\n    }\n    if (args.device_type !== undefined && args.device_type !== null) {\n      this.device_type = args.device_type;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n  }\n};\nOmniSci_deallocate_df_args.prototype = {};\nOmniSci_deallocate_df_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.df = new TDataFrame();\n          this.df.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_deallocate_df_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_deallocate_df_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.df !== null && this.df !== undefined) {\n    output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);\n    this.df.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.device_type !== null && this.device_type !== undefined) {\n    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);\n    output.writeI32(this.device_type);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_deallocate_df_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_deallocate_df_result.prototype = {};\nOmniSci_deallocate_df_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_deallocate_df_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_deallocate_df_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_interrupt_args = function (args) {\n  this.query_session = null;\n  this.interrupt_session = null;\n  if (args) {\n    if (args.query_session !== undefined && args.query_session !== null) {\n      this.query_session = args.query_session;\n    }\n    if (args.interrupt_session !== undefined && args.interrupt_session !== null) {\n      this.interrupt_session = args.interrupt_session;\n    }\n  }\n};\nOmniSci_interrupt_args.prototype = {};\nOmniSci_interrupt_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.query_session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.interrupt_session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_interrupt_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_interrupt_args');\n  if (this.query_session !== null && this.query_session !== undefined) {\n    output.writeFieldBegin('query_session', Thrift.Type.STRING, 1);\n    output.writeString(this.query_session);\n    output.writeFieldEnd();\n  }\n  if (this.interrupt_session !== null && this.interrupt_session !== undefined) {\n    output.writeFieldBegin('interrupt_session', Thrift.Type.STRING, 2);\n    output.writeString(this.interrupt_session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_interrupt_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_interrupt_result.prototype = {};\nOmniSci_interrupt_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_interrupt_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_interrupt_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_validate_args = function (args) {\n  this.session = null;\n  this.query = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n  }\n};\nOmniSci_sql_validate_args.prototype = {};\nOmniSci_sql_validate_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_validate_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_validate_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_validate_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TColumnType]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_sql_validate_result.prototype = {};\nOmniSci_sql_validate_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size370 = 0;\n          var _rtmp3374;\n          this.success = [];\n          var _etype373 = 0;\n          _rtmp3374 = input.readListBegin();\n          _etype373 = _rtmp3374.etype;\n          _size370 = _rtmp3374.size;\n          for (var _i375 = 0; _i375 < _size370; ++_i375) {\n            var elem376 = null;\n            elem376 = new TColumnType();\n            elem376.read(input);\n            this.success.push(elem376);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_validate_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_validate_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter377 in this.success) {\n      if (this.success.hasOwnProperty(iter377)) {\n        iter377 = this.success[iter377];\n        iter377.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_completion_hints_args = function (args) {\n  this.session = null;\n  this.sql = null;\n  this.cursor = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.sql !== undefined && args.sql !== null) {\n      this.sql = args.sql;\n    }\n    if (args.cursor !== undefined && args.cursor !== null) {\n      this.cursor = args.cursor;\n    }\n  }\n};\nOmniSci_get_completion_hints_args.prototype = {};\nOmniSci_get_completion_hints_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.sql = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.cursor = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_completion_hints_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_completion_hints_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.sql !== null && this.sql !== undefined) {\n    output.writeFieldBegin('sql', Thrift.Type.STRING, 2);\n    output.writeString(this.sql);\n    output.writeFieldEnd();\n  }\n  if (this.cursor !== null && this.cursor !== undefined) {\n    output.writeFieldBegin('cursor', Thrift.Type.I32, 3);\n    output.writeI32(this.cursor);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_completion_hints_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TCompletionHint]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_completion_hints_result.prototype = {};\nOmniSci_get_completion_hints_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size378 = 0;\n          var _rtmp3382;\n          this.success = [];\n          var _etype381 = 0;\n          _rtmp3382 = input.readListBegin();\n          _etype381 = _rtmp3382.etype;\n          _size378 = _rtmp3382.size;\n          for (var _i383 = 0; _i383 < _size378; ++_i383) {\n            var elem384 = null;\n            elem384 = new TCompletionHint();\n            elem384.read(input);\n            this.success.push(elem384);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_completion_hints_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_completion_hints_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter385 in this.success) {\n      if (this.success.hasOwnProperty(iter385)) {\n        iter385 = this.success[iter385];\n        iter385.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_execution_mode_args = function (args) {\n  this.session = null;\n  this.mode = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.mode !== undefined && args.mode !== null) {\n      this.mode = args.mode;\n    }\n  }\n};\nOmniSci_set_execution_mode_args.prototype = {};\nOmniSci_set_execution_mode_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.mode = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_execution_mode_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_execution_mode_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.mode !== null && this.mode !== undefined) {\n    output.writeFieldBegin('mode', Thrift.Type.I32, 2);\n    output.writeI32(this.mode);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_execution_mode_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_set_execution_mode_result.prototype = {};\nOmniSci_set_execution_mode_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_execution_mode_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_execution_mode_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_render_vega_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.vega_json = null;\n  this.compression_level = null;\n  this.nonce = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.vega_json !== undefined && args.vega_json !== null) {\n      this.vega_json = args.vega_json;\n    }\n    if (args.compression_level !== undefined && args.compression_level !== null) {\n      this.compression_level = args.compression_level;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nOmniSci_render_vega_args.prototype = {};\nOmniSci_render_vega_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_json = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.compression_level = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_render_vega_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_render_vega_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.vega_json !== null && this.vega_json !== undefined) {\n    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);\n    output.writeString(this.vega_json);\n    output.writeFieldEnd();\n  }\n  if (this.compression_level !== null && this.compression_level !== undefined) {\n    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);\n    output.writeI32(this.compression_level);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_render_vega_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TRenderResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_render_vega_result.prototype = {};\nOmniSci_render_vega_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TRenderResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_render_vega_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_render_vega_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_result_row_for_pixel_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.pixel = null;\n  this.table_col_names = null;\n  this.column_format = null;\n  this.pixelRadius = null;\n  this.nonce = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.pixel !== undefined && args.pixel !== null) {\n      this.pixel = new TPixel(args.pixel);\n    }\n    if (args.table_col_names !== undefined && args.table_col_names !== null) {\n      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);\n    }\n    if (args.column_format !== undefined && args.column_format !== null) {\n      this.column_format = args.column_format;\n    }\n    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {\n      this.pixelRadius = args.pixelRadius;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nOmniSci_get_result_row_for_pixel_args.prototype = {};\nOmniSci_get_result_row_for_pixel_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pixel = new TPixel();\n          this.pixel.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.MAP) {\n          var _size386 = 0;\n          var _rtmp3390;\n          this.table_col_names = {};\n          var _ktype387 = 0;\n          var _vtype388 = 0;\n          _rtmp3390 = input.readMapBegin();\n          _ktype387 = _rtmp3390.ktype;\n          _vtype388 = _rtmp3390.vtype;\n          _size386 = _rtmp3390.size;\n          for (var _i391 = 0; _i391 < _size386; ++_i391) {\n            if (_i391 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key392 = null;\n            var val393 = null;\n            key392 = input.readString().value;\n            var _size394 = 0;\n            var _rtmp3398;\n            val393 = [];\n            var _etype397 = 0;\n            _rtmp3398 = input.readListBegin();\n            _etype397 = _rtmp3398.etype;\n            _size394 = _rtmp3398.size;\n            for (var _i399 = 0; _i399 < _size394; ++_i399) {\n              var elem400 = null;\n              elem400 = input.readString().value;\n              val393.push(elem400);\n            }\n            input.readListEnd();\n            this.table_col_names[key392] = val393;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.column_format = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.pixelRadius = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_result_row_for_pixel_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_result_row_for_pixel_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.pixel !== null && this.pixel !== undefined) {\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);\n    this.pixel.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.table_col_names !== null && this.table_col_names !== undefined) {\n    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));\n    for (var kiter401 in this.table_col_names) {\n      if (this.table_col_names.hasOwnProperty(kiter401)) {\n        var viter402 = this.table_col_names[kiter401];\n        output.writeString(kiter401);\n        output.writeListBegin(Thrift.Type.STRING, viter402.length);\n        for (var iter403 in viter402) {\n          if (viter402.hasOwnProperty(iter403)) {\n            iter403 = viter402[iter403];\n            output.writeString(iter403);\n          }\n        }\n        output.writeListEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.column_format !== null && this.column_format !== undefined) {\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);\n    output.writeBool(this.column_format);\n    output.writeFieldEnd();\n  }\n  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {\n    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);\n    output.writeI32(this.pixelRadius);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_result_row_for_pixel_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPixelTableRowResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_result_row_for_pixel_result.prototype = {};\nOmniSci_get_result_row_for_pixel_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPixelTableRowResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_result_row_for_pixel_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_result_row_for_pixel_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n  }\n};\nOmniSci_get_dashboard_args.prototype = {};\nOmniSci_get_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboard_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDashboard(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_dashboard_result.prototype = {};\nOmniSci_get_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDashboard();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboard_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboards_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_dashboards_args.prototype = {};\nOmniSci_get_dashboards_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboards_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboards_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboards_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDashboard]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_dashboards_result.prototype = {};\nOmniSci_get_dashboards_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size404 = 0;\n          var _rtmp3408;\n          this.success = [];\n          var _etype407 = 0;\n          _rtmp3408 = input.readListBegin();\n          _etype407 = _rtmp3408.etype;\n          _size404 = _rtmp3408.size;\n          for (var _i409 = 0; _i409 < _size404; ++_i409) {\n            var elem410 = null;\n            elem410 = new TDashboard();\n            elem410.read(input);\n            this.success.push(elem410);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboards_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboards_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter411 in this.success) {\n      if (this.success.hasOwnProperty(iter411)) {\n        iter411 = this.success[iter411];\n        iter411.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_name = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.dashboard_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n  }\n};\nOmniSci_create_dashboard_args.prototype = {};\nOmniSci_create_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 2);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 3);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_dashboard_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_create_dashboard_result.prototype = {};\nOmniSci_create_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_dashboard_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_replace_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.dashboard_name = null;\n  this.dashboard_owner = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.dashboard_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {\n      this.dashboard_owner = args.dashboard_owner;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n  }\n};\nOmniSci_replace_dashboard_args.prototype = {};\nOmniSci_replace_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_replace_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_replace_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 3);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {\n    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 4);\n    output.writeString(this.dashboard_owner);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 6);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 7);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_replace_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_replace_dashboard_result.prototype = {};\nOmniSci_replace_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_replace_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_replace_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_delete_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n  }\n};\nOmniSci_delete_dashboard_args.prototype = {};\nOmniSci_delete_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_delete_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_delete_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_delete_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_delete_dashboard_result.prototype = {};\nOmniSci_delete_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_delete_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_delete_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_share_dashboards_args = function (args) {\n  this.session = null;\n  this.dashboard_ids = null;\n  this.groups = null;\n  this.permissions = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {\n      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);\n    }\n    if (args.groups !== undefined && args.groups !== null) {\n      this.groups = Thrift.copyList(args.groups, [null]);\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n  }\n};\nOmniSci_share_dashboards_args.prototype = {};\nOmniSci_share_dashboards_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size412 = 0;\n          var _rtmp3416;\n          this.dashboard_ids = [];\n          var _etype415 = 0;\n          _rtmp3416 = input.readListBegin();\n          _etype415 = _rtmp3416.etype;\n          _size412 = _rtmp3416.size;\n          for (var _i417 = 0; _i417 < _size412; ++_i417) {\n            var elem418 = null;\n            elem418 = input.readI32().value;\n            this.dashboard_ids.push(elem418);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size419 = 0;\n          var _rtmp3423;\n          this.groups = [];\n          var _etype422 = 0;\n          _rtmp3423 = input.readListBegin();\n          _etype422 = _rtmp3423.etype;\n          _size419 = _rtmp3423.size;\n          for (var _i424 = 0; _i424 < _size419; ++_i424) {\n            var elem425 = null;\n            elem425 = input.readString().value;\n            this.groups.push(elem425);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_share_dashboards_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_share_dashboards_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {\n    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);\n    for (var iter426 in this.dashboard_ids) {\n      if (this.dashboard_ids.hasOwnProperty(iter426)) {\n        iter426 = this.dashboard_ids[iter426];\n        output.writeI32(iter426);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.groups !== null && this.groups !== undefined) {\n    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.groups.length);\n    for (var iter427 in this.groups) {\n      if (this.groups.hasOwnProperty(iter427)) {\n        iter427 = this.groups[iter427];\n        output.writeString(iter427);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 4);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_share_dashboards_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_share_dashboards_result.prototype = {};\nOmniSci_share_dashboards_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_share_dashboards_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_share_dashboards_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_delete_dashboards_args = function (args) {\n  this.session = null;\n  this.dashboard_ids = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {\n      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);\n    }\n  }\n};\nOmniSci_delete_dashboards_args.prototype = {};\nOmniSci_delete_dashboards_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size428 = 0;\n          var _rtmp3432;\n          this.dashboard_ids = [];\n          var _etype431 = 0;\n          _rtmp3432 = input.readListBegin();\n          _etype431 = _rtmp3432.etype;\n          _size428 = _rtmp3432.size;\n          for (var _i433 = 0; _i433 < _size428; ++_i433) {\n            var elem434 = null;\n            elem434 = input.readI32().value;\n            this.dashboard_ids.push(elem434);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_delete_dashboards_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_delete_dashboards_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {\n    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);\n    for (var iter435 in this.dashboard_ids) {\n      if (this.dashboard_ids.hasOwnProperty(iter435)) {\n        iter435 = this.dashboard_ids[iter435];\n        output.writeI32(iter435);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_delete_dashboards_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_delete_dashboards_result.prototype = {};\nOmniSci_delete_dashboards_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_delete_dashboards_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_delete_dashboards_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_share_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.groups = null;\n  this.objects = null;\n  this.permissions = null;\n  this.grant_role = false;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.groups !== undefined && args.groups !== null) {\n      this.groups = Thrift.copyList(args.groups, [null]);\n    }\n    if (args.objects !== undefined && args.objects !== null) {\n      this.objects = Thrift.copyList(args.objects, [null]);\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n    if (args.grant_role !== undefined && args.grant_role !== null) {\n      this.grant_role = args.grant_role;\n    }\n  }\n};\nOmniSci_share_dashboard_args.prototype = {};\nOmniSci_share_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size436 = 0;\n          var _rtmp3440;\n          this.groups = [];\n          var _etype439 = 0;\n          _rtmp3440 = input.readListBegin();\n          _etype439 = _rtmp3440.etype;\n          _size436 = _rtmp3440.size;\n          for (var _i441 = 0; _i441 < _size436; ++_i441) {\n            var elem442 = null;\n            elem442 = input.readString().value;\n            this.groups.push(elem442);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size443 = 0;\n          var _rtmp3447;\n          this.objects = [];\n          var _etype446 = 0;\n          _rtmp3447 = input.readListBegin();\n          _etype446 = _rtmp3447.etype;\n          _size443 = _rtmp3447.size;\n          for (var _i448 = 0; _i448 < _size443; ++_i448) {\n            var elem449 = null;\n            elem449 = input.readString().value;\n            this.objects.push(elem449);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.grant_role = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_share_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_share_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.groups !== null && this.groups !== undefined) {\n    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.groups.length);\n    for (var iter450 in this.groups) {\n      if (this.groups.hasOwnProperty(iter450)) {\n        iter450 = this.groups[iter450];\n        output.writeString(iter450);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.objects !== null && this.objects !== undefined) {\n    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRING, this.objects.length);\n    for (var iter451 in this.objects) {\n      if (this.objects.hasOwnProperty(iter451)) {\n        iter451 = this.objects[iter451];\n        output.writeString(iter451);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.grant_role !== null && this.grant_role !== undefined) {\n    output.writeFieldBegin('grant_role', Thrift.Type.BOOL, 6);\n    output.writeBool(this.grant_role);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_share_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_share_dashboard_result.prototype = {};\nOmniSci_share_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_share_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_share_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_unshare_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.groups = null;\n  this.objects = null;\n  this.permissions = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.groups !== undefined && args.groups !== null) {\n      this.groups = Thrift.copyList(args.groups, [null]);\n    }\n    if (args.objects !== undefined && args.objects !== null) {\n      this.objects = Thrift.copyList(args.objects, [null]);\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n  }\n};\nOmniSci_unshare_dashboard_args.prototype = {};\nOmniSci_unshare_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size452 = 0;\n          var _rtmp3456;\n          this.groups = [];\n          var _etype455 = 0;\n          _rtmp3456 = input.readListBegin();\n          _etype455 = _rtmp3456.etype;\n          _size452 = _rtmp3456.size;\n          for (var _i457 = 0; _i457 < _size452; ++_i457) {\n            var elem458 = null;\n            elem458 = input.readString().value;\n            this.groups.push(elem458);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          var _size459 = 0;\n          var _rtmp3463;\n          this.objects = [];\n          var _etype462 = 0;\n          _rtmp3463 = input.readListBegin();\n          _etype462 = _rtmp3463.etype;\n          _size459 = _rtmp3463.size;\n          for (var _i464 = 0; _i464 < _size459; ++_i464) {\n            var elem465 = null;\n            elem465 = input.readString().value;\n            this.objects.push(elem465);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_unshare_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_unshare_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.groups !== null && this.groups !== undefined) {\n    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.groups.length);\n    for (var iter466 in this.groups) {\n      if (this.groups.hasOwnProperty(iter466)) {\n        iter466 = this.groups[iter466];\n        output.writeString(iter466);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.objects !== null && this.objects !== undefined) {\n    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRING, this.objects.length);\n    for (var iter467 in this.objects) {\n      if (this.objects.hasOwnProperty(iter467)) {\n        iter467 = this.objects[iter467];\n        output.writeString(iter467);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_unshare_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_unshare_dashboard_result.prototype = {};\nOmniSci_unshare_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_unshare_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_unshare_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_unshare_dashboards_args = function (args) {\n  this.session = null;\n  this.dashboard_ids = null;\n  this.groups = null;\n  this.permissions = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {\n      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);\n    }\n    if (args.groups !== undefined && args.groups !== null) {\n      this.groups = Thrift.copyList(args.groups, [null]);\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n  }\n};\nOmniSci_unshare_dashboards_args.prototype = {};\nOmniSci_unshare_dashboards_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size468 = 0;\n          var _rtmp3472;\n          this.dashboard_ids = [];\n          var _etype471 = 0;\n          _rtmp3472 = input.readListBegin();\n          _etype471 = _rtmp3472.etype;\n          _size468 = _rtmp3472.size;\n          for (var _i473 = 0; _i473 < _size468; ++_i473) {\n            var elem474 = null;\n            elem474 = input.readI32().value;\n            this.dashboard_ids.push(elem474);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size475 = 0;\n          var _rtmp3479;\n          this.groups = [];\n          var _etype478 = 0;\n          _rtmp3479 = input.readListBegin();\n          _etype478 = _rtmp3479.etype;\n          _size475 = _rtmp3479.size;\n          for (var _i480 = 0; _i480 < _size475; ++_i480) {\n            var elem481 = null;\n            elem481 = input.readString().value;\n            this.groups.push(elem481);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_unshare_dashboards_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_unshare_dashboards_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {\n    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);\n    for (var iter482 in this.dashboard_ids) {\n      if (this.dashboard_ids.hasOwnProperty(iter482)) {\n        iter482 = this.dashboard_ids[iter482];\n        output.writeI32(iter482);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.groups !== null && this.groups !== undefined) {\n    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.groups.length);\n    for (var iter483 in this.groups) {\n      if (this.groups.hasOwnProperty(iter483)) {\n        iter483 = this.groups[iter483];\n        output.writeString(iter483);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 4);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_unshare_dashboards_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_unshare_dashboards_result.prototype = {};\nOmniSci_unshare_dashboards_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_unshare_dashboards_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_unshare_dashboards_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboard_grantees_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n  }\n};\nOmniSci_get_dashboard_grantees_args.prototype = {};\nOmniSci_get_dashboard_grantees_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboard_grantees_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboard_grantees_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboard_grantees_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDashboardGrantees]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_dashboard_grantees_result.prototype = {};\nOmniSci_get_dashboard_grantees_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size484 = 0;\n          var _rtmp3488;\n          this.success = [];\n          var _etype487 = 0;\n          _rtmp3488 = input.readListBegin();\n          _etype487 = _rtmp3488.etype;\n          _size484 = _rtmp3488.size;\n          for (var _i489 = 0; _i489 < _size484; ++_i489) {\n            var elem490 = null;\n            elem490 = new TDashboardGrantees();\n            elem490.read(input);\n            this.success.push(elem490);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboard_grantees_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboard_grantees_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter491 in this.success) {\n      if (this.success.hasOwnProperty(iter491)) {\n        iter491 = this.success[iter491];\n        iter491.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_link_view_args = function (args) {\n  this.session = null;\n  this.link = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.link !== undefined && args.link !== null) {\n      this.link = args.link;\n    }\n  }\n};\nOmniSci_get_link_view_args.prototype = {};\nOmniSci_get_link_view_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.link = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_link_view_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_link_view_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.link !== null && this.link !== undefined) {\n    output.writeFieldBegin('link', Thrift.Type.STRING, 2);\n    output.writeString(this.link);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_link_view_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TFrontendView(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_link_view_result.prototype = {};\nOmniSci_get_link_view_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TFrontendView();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_link_view_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_link_view_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_link_args = function (args) {\n  this.session = null;\n  this.view_state = null;\n  this.view_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.view_state !== undefined && args.view_state !== null) {\n      this.view_state = args.view_state;\n    }\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n      this.view_metadata = args.view_metadata;\n    }\n  }\n};\nOmniSci_create_link_args.prototype = {};\nOmniSci_create_link_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_link_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_link_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.view_state !== null && this.view_state !== undefined) {\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\n    output.writeString(this.view_state);\n    output.writeFieldEnd();\n  }\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);\n    output.writeString(this.view_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_link_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_create_link_result.prototype = {};\nOmniSci_create_link_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_link_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_link_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.rows = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TRow]);\n    }\n  }\n};\nOmniSci_load_table_binary_args.prototype = {};\nOmniSci_load_table_binary_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size492 = 0;\n          var _rtmp3496;\n          this.rows = [];\n          var _etype495 = 0;\n          _rtmp3496 = input.readListBegin();\n          _etype495 = _rtmp3496.etype;\n          _size492 = _rtmp3496.size;\n          for (var _i497 = 0; _i497 < _size492; ++_i497) {\n            var elem498 = null;\n            elem498 = new TRow();\n            elem498.read(input);\n            this.rows.push(elem498);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter499 in this.rows) {\n      if (this.rows.hasOwnProperty(iter499)) {\n        iter499 = this.rows[iter499];\n        iter499.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_load_table_binary_result.prototype = {};\nOmniSci_load_table_binary_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_columnar_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.cols = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TColumn]);\n    }\n  }\n};\nOmniSci_load_table_binary_columnar_args.prototype = {};\nOmniSci_load_table_binary_columnar_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size500 = 0;\n          var _rtmp3504;\n          this.cols = [];\n          var _etype503 = 0;\n          _rtmp3504 = input.readListBegin();\n          _etype503 = _rtmp3504.etype;\n          _size500 = _rtmp3504.size;\n          for (var _i505 = 0; _i505 < _size500; ++_i505) {\n            var elem506 = null;\n            elem506 = new TColumn();\n            elem506.read(input);\n            this.cols.push(elem506);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_columnar_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_columnar_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter507 in this.cols) {\n      if (this.cols.hasOwnProperty(iter507)) {\n        iter507 = this.cols[iter507];\n        iter507.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_columnar_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_load_table_binary_columnar_result.prototype = {};\nOmniSci_load_table_binary_columnar_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_columnar_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_columnar_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_arrow_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.arrow_stream = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.arrow_stream !== undefined && args.arrow_stream !== null) {\n      this.arrow_stream = args.arrow_stream;\n    }\n  }\n};\nOmniSci_load_table_binary_arrow_args.prototype = {};\nOmniSci_load_table_binary_arrow_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.arrow_stream = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_arrow_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_arrow_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.arrow_stream !== null && this.arrow_stream !== undefined) {\n    output.writeFieldBegin('arrow_stream', Thrift.Type.STRING, 3);\n    output.writeBinary(this.arrow_stream);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_arrow_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_load_table_binary_arrow_result.prototype = {};\nOmniSci_load_table_binary_arrow_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_arrow_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_arrow_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.rows = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TStringRow]);\n    }\n  }\n};\nOmniSci_load_table_args.prototype = {};\nOmniSci_load_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size508 = 0;\n          var _rtmp3512;\n          this.rows = [];\n          var _etype511 = 0;\n          _rtmp3512 = input.readListBegin();\n          _etype511 = _rtmp3512.etype;\n          _size508 = _rtmp3512.size;\n          for (var _i513 = 0; _i513 < _size508; ++_i513) {\n            var elem514 = null;\n            elem514 = new TStringRow();\n            elem514.read(input);\n            this.rows.push(elem514);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter515 in this.rows) {\n      if (this.rows.hasOwnProperty(iter515)) {\n        iter515 = this.rows[iter515];\n        iter515.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_load_table_result.prototype = {};\nOmniSci_load_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_detect_column_types_args = function (args) {\n  this.session = null;\n  this.file_name = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_detect_column_types_args.prototype = {};\nOmniSci_detect_column_types_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_detect_column_types_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_detect_column_types_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_detect_column_types_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDetectResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_detect_column_types_result.prototype = {};\nOmniSci_detect_column_types_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDetectResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_detect_column_types_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_detect_column_types_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.row_desc = null;\n  this.file_type = 0;\n  this.create_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.file_type !== undefined && args.file_type !== null) {\n      this.file_type = args.file_type;\n    }\n    if (args.create_params !== undefined && args.create_params !== null) {\n      this.create_params = new TCreateParams(args.create_params);\n    }\n  }\n};\nOmniSci_create_table_args.prototype = {};\nOmniSci_create_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size516 = 0;\n          var _rtmp3520;\n          this.row_desc = [];\n          var _etype519 = 0;\n          _rtmp3520 = input.readListBegin();\n          _etype519 = _rtmp3520.etype;\n          _size516 = _rtmp3520.size;\n          for (var _i521 = 0; _i521 < _size516; ++_i521) {\n            var elem522 = null;\n            elem522 = new TColumnType();\n            elem522.read(input);\n            this.row_desc.push(elem522);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.file_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.create_params = new TCreateParams();\n          this.create_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_table_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter523 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter523)) {\n        iter523 = this.row_desc[iter523];\n        iter523.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.file_type !== null && this.file_type !== undefined) {\n    output.writeFieldBegin('file_type', Thrift.Type.I32, 4);\n    output.writeI32(this.file_type);\n    output.writeFieldEnd();\n  }\n  if (this.create_params !== null && this.create_params !== undefined) {\n    output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 5);\n    this.create_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_create_table_result.prototype = {};\nOmniSci_create_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_table_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.file_name = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_import_table_args.prototype = {};\nOmniSci_import_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_table_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_import_table_result.prototype = {};\nOmniSci_import_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_table_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_geo_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.file_name = null;\n  this.copy_params = null;\n  this.row_desc = null;\n  this.create_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.create_params !== undefined && args.create_params !== null) {\n      this.create_params = new TCreateParams(args.create_params);\n    }\n  }\n};\nOmniSci_import_geo_table_args.prototype = {};\nOmniSci_import_geo_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          var _size524 = 0;\n          var _rtmp3528;\n          this.row_desc = [];\n          var _etype527 = 0;\n          _rtmp3528 = input.readListBegin();\n          _etype527 = _rtmp3528.etype;\n          _size524 = _rtmp3528.size;\n          for (var _i529 = 0; _i529 < _size524; ++_i529) {\n            var elem530 = null;\n            elem530 = new TColumnType();\n            elem530.read(input);\n            this.row_desc.push(elem530);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.create_params = new TCreateParams();\n          this.create_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_geo_table_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_geo_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter531 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter531)) {\n        iter531 = this.row_desc[iter531];\n        iter531.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.create_params !== null && this.create_params !== undefined) {\n    output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 6);\n    this.create_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_geo_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_import_geo_table_result.prototype = {};\nOmniSci_import_geo_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_geo_table_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_geo_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_table_status_args = function (args) {\n  this.session = null;\n  this.import_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.import_id !== undefined && args.import_id !== null) {\n      this.import_id = args.import_id;\n    }\n  }\n};\nOmniSci_import_table_status_args.prototype = {};\nOmniSci_import_table_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.import_id = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_table_status_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_table_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.import_id !== null && this.import_id !== undefined) {\n    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);\n    output.writeString(this.import_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_table_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TImportStatus(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_import_table_status_result.prototype = {};\nOmniSci_import_table_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TImportStatus();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_table_status_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_table_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_first_geo_file_in_archive_args = function (args) {\n  this.session = null;\n  this.archive_path = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.archive_path !== undefined && args.archive_path !== null) {\n      this.archive_path = args.archive_path;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_get_first_geo_file_in_archive_args.prototype = {};\nOmniSci_get_first_geo_file_in_archive_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.archive_path = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_first_geo_file_in_archive_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.archive_path !== null && this.archive_path !== undefined) {\n    output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);\n    output.writeString(this.archive_path);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_first_geo_file_in_archive_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_first_geo_file_in_archive_result.prototype = {};\nOmniSci_get_first_geo_file_in_archive_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_first_geo_file_in_archive_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_all_files_in_archive_args = function (args) {\n  this.session = null;\n  this.archive_path = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.archive_path !== undefined && args.archive_path !== null) {\n      this.archive_path = args.archive_path;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_get_all_files_in_archive_args.prototype = {};\nOmniSci_get_all_files_in_archive_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.archive_path = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_all_files_in_archive_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_all_files_in_archive_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.archive_path !== null && this.archive_path !== undefined) {\n    output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);\n    output.writeString(this.archive_path);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_all_files_in_archive_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_all_files_in_archive_result.prototype = {};\nOmniSci_get_all_files_in_archive_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size532 = 0;\n          var _rtmp3536;\n          this.success = [];\n          var _etype535 = 0;\n          _rtmp3536 = input.readListBegin();\n          _etype535 = _rtmp3536.etype;\n          _size532 = _rtmp3536.size;\n          for (var _i537 = 0; _i537 < _size532; ++_i537) {\n            var elem538 = null;\n            elem538 = input.readString().value;\n            this.success.push(elem538);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_all_files_in_archive_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_all_files_in_archive_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter539 in this.success) {\n      if (this.success.hasOwnProperty(iter539)) {\n        iter539 = this.success[iter539];\n        output.writeString(iter539);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_layers_in_geo_file_args = function (args) {\n  this.session = null;\n  this.file_name = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_get_layers_in_geo_file_args.prototype = {};\nOmniSci_get_layers_in_geo_file_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_layers_in_geo_file_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_layers_in_geo_file_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_layers_in_geo_file_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TGeoFileLayerInfo]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_layers_in_geo_file_result.prototype = {};\nOmniSci_get_layers_in_geo_file_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size540 = 0;\n          var _rtmp3544;\n          this.success = [];\n          var _etype543 = 0;\n          _rtmp3544 = input.readListBegin();\n          _etype543 = _rtmp3544.etype;\n          _size540 = _rtmp3544.size;\n          for (var _i545 = 0; _i545 < _size540; ++_i545) {\n            var elem546 = null;\n            elem546 = new TGeoFileLayerInfo();\n            elem546.read(input);\n            this.success.push(elem546);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_layers_in_geo_file_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_layers_in_geo_file_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter547 in this.success) {\n      if (this.success.hasOwnProperty(iter547)) {\n        iter547 = this.success[iter547];\n        iter547.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_query_get_outer_fragment_count_args = function (args) {\n  this.session = null;\n  this.query = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n  }\n};\nOmniSci_query_get_outer_fragment_count_args.prototype = {};\nOmniSci_query_get_outer_fragment_count_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_query_get_outer_fragment_count_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_query_get_outer_fragment_count_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_query_get_outer_fragment_count_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_query_get_outer_fragment_count_result.prototype = {};\nOmniSci_query_get_outer_fragment_count_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I64) {\n          this.success = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_query_get_outer_fragment_count_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_query_get_outer_fragment_count_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I64, 0);\n    output.writeI64(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_check_table_consistency_args = function (args) {\n  this.session = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nOmniSci_check_table_consistency_args.prototype = {};\nOmniSci_check_table_consistency_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_check_table_consistency_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_check_table_consistency_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_check_table_consistency_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TTableMeta(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_check_table_consistency_result.prototype = {};\nOmniSci_check_table_consistency_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TTableMeta();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_check_table_consistency_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_check_table_consistency_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_query_args = function (args) {\n  this.leaf_session = null;\n  this.parent_session = null;\n  this.query_ra = null;\n  this.just_explain = null;\n  this.outer_fragment_indices = null;\n  if (args) {\n    if (args.leaf_session !== undefined && args.leaf_session !== null) {\n      this.leaf_session = args.leaf_session;\n    }\n    if (args.parent_session !== undefined && args.parent_session !== null) {\n      this.parent_session = args.parent_session;\n    }\n    if (args.query_ra !== undefined && args.query_ra !== null) {\n      this.query_ra = args.query_ra;\n    }\n    if (args.just_explain !== undefined && args.just_explain !== null) {\n      this.just_explain = args.just_explain;\n    }\n    if (args.outer_fragment_indices !== undefined && args.outer_fragment_indices !== null) {\n      this.outer_fragment_indices = Thrift.copyList(args.outer_fragment_indices, [null]);\n    }\n  }\n};\nOmniSci_start_query_args.prototype = {};\nOmniSci_start_query_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.leaf_session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.parent_session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.query_ra = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.just_explain = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          var _size548 = 0;\n          var _rtmp3552;\n          this.outer_fragment_indices = [];\n          var _etype551 = 0;\n          _rtmp3552 = input.readListBegin();\n          _etype551 = _rtmp3552.etype;\n          _size548 = _rtmp3552.size;\n          for (var _i553 = 0; _i553 < _size548; ++_i553) {\n            var elem554 = null;\n            elem554 = input.readI64().value;\n            this.outer_fragment_indices.push(elem554);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_query_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_query_args');\n  if (this.leaf_session !== null && this.leaf_session !== undefined) {\n    output.writeFieldBegin('leaf_session', Thrift.Type.STRING, 1);\n    output.writeString(this.leaf_session);\n    output.writeFieldEnd();\n  }\n  if (this.parent_session !== null && this.parent_session !== undefined) {\n    output.writeFieldBegin('parent_session', Thrift.Type.STRING, 2);\n    output.writeString(this.parent_session);\n    output.writeFieldEnd();\n  }\n  if (this.query_ra !== null && this.query_ra !== undefined) {\n    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 3);\n    output.writeString(this.query_ra);\n    output.writeFieldEnd();\n  }\n  if (this.just_explain !== null && this.just_explain !== undefined) {\n    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 4);\n    output.writeBool(this.just_explain);\n    output.writeFieldEnd();\n  }\n  if (this.outer_fragment_indices !== null && this.outer_fragment_indices !== undefined) {\n    output.writeFieldBegin('outer_fragment_indices', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.I64, this.outer_fragment_indices.length);\n    for (var iter555 in this.outer_fragment_indices) {\n      if (this.outer_fragment_indices.hasOwnProperty(iter555)) {\n        iter555 = this.outer_fragment_indices[iter555];\n        output.writeI64(iter555);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_query_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPendingQuery(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_start_query_result.prototype = {};\nOmniSci_start_query_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPendingQuery();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_query_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_query_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_execute_query_step_args = function (args) {\n  this.pending_query = null;\n  this.subquery_id = null;\n  if (args) {\n    if (args.pending_query !== undefined && args.pending_query !== null) {\n      this.pending_query = new TPendingQuery(args.pending_query);\n    }\n    if (args.subquery_id !== undefined && args.subquery_id !== null) {\n      this.subquery_id = args.subquery_id;\n    }\n  }\n};\nOmniSci_execute_query_step_args.prototype = {};\nOmniSci_execute_query_step_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pending_query = new TPendingQuery();\n          this.pending_query.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.subquery_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_execute_query_step_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_execute_query_step_args');\n  if (this.pending_query !== null && this.pending_query !== undefined) {\n    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);\n    this.pending_query.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.subquery_id !== null && this.subquery_id !== undefined) {\n    output.writeFieldBegin('subquery_id', Thrift.Type.I64, 2);\n    output.writeI64(this.subquery_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_execute_query_step_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TStepResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_execute_query_step_result.prototype = {};\nOmniSci_execute_query_step_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TStepResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_execute_query_step_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_execute_query_step_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_broadcast_serialized_rows_args = function (args) {\n  this.serialized_rows = null;\n  this.row_desc = null;\n  this.query_id = null;\n  this.subquery_id = null;\n  this.is_final_subquery_result = null;\n  if (args) {\n    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\n      this.serialized_rows = new TSerializedRows(args.serialized_rows);\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.query_id !== undefined && args.query_id !== null) {\n      this.query_id = args.query_id;\n    }\n    if (args.subquery_id !== undefined && args.subquery_id !== null) {\n      this.subquery_id = args.subquery_id;\n    }\n    if (args.is_final_subquery_result !== undefined && args.is_final_subquery_result !== null) {\n      this.is_final_subquery_result = args.is_final_subquery_result;\n    }\n  }\n};\nOmniSci_broadcast_serialized_rows_args.prototype = {};\nOmniSci_broadcast_serialized_rows_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.serialized_rows = new TSerializedRows();\n          this.serialized_rows.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size556 = 0;\n          var _rtmp3560;\n          this.row_desc = [];\n          var _etype559 = 0;\n          _rtmp3560 = input.readListBegin();\n          _etype559 = _rtmp3560.etype;\n          _size556 = _rtmp3560.size;\n          for (var _i561 = 0; _i561 < _size556; ++_i561) {\n            var elem562 = null;\n            elem562 = new TColumnType();\n            elem562.read(input);\n            this.row_desc.push(elem562);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.query_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.subquery_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_final_subquery_result = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_broadcast_serialized_rows_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_broadcast_serialized_rows_args');\n  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\n    output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);\n    this.serialized_rows.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter563 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter563)) {\n        iter563 = this.row_desc[iter563];\n        iter563.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.query_id !== null && this.query_id !== undefined) {\n    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);\n    output.writeI64(this.query_id);\n    output.writeFieldEnd();\n  }\n  if (this.subquery_id !== null && this.subquery_id !== undefined) {\n    output.writeFieldBegin('subquery_id', Thrift.Type.I64, 4);\n    output.writeI64(this.subquery_id);\n    output.writeFieldEnd();\n  }\n  if (this.is_final_subquery_result !== null && this.is_final_subquery_result !== undefined) {\n    output.writeFieldBegin('is_final_subquery_result', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_final_subquery_result);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_broadcast_serialized_rows_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_broadcast_serialized_rows_result.prototype = {};\nOmniSci_broadcast_serialized_rows_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_broadcast_serialized_rows_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_broadcast_serialized_rows_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_render_query_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.node_idx = null;\n  this.vega_json = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.node_idx !== undefined && args.node_idx !== null) {\n      this.node_idx = args.node_idx;\n    }\n    if (args.vega_json !== undefined && args.vega_json !== null) {\n      this.vega_json = args.vega_json;\n    }\n  }\n};\nOmniSci_start_render_query_args.prototype = {};\nOmniSci_start_render_query_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I16) {\n          this.node_idx = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_json = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_render_query_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_render_query_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.node_idx !== null && this.node_idx !== undefined) {\n    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);\n    output.writeI16(this.node_idx);\n    output.writeFieldEnd();\n  }\n  if (this.vega_json !== null && this.vega_json !== undefined) {\n    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);\n    output.writeString(this.vega_json);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_render_query_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPendingRenderQuery(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_start_render_query_result.prototype = {};\nOmniSci_start_render_query_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPendingRenderQuery();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_render_query_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_render_query_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_execute_next_render_step_args = function (args) {\n  this.pending_render = null;\n  this.merged_data = null;\n  if (args) {\n    if (args.pending_render !== undefined && args.pending_render !== null) {\n      this.pending_render = new TPendingRenderQuery(args.pending_render);\n    }\n    if (args.merged_data !== undefined && args.merged_data !== null) {\n      this.merged_data = Thrift.copyMap(args.merged_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, TRenderDatum]);\n    }\n  }\n};\nOmniSci_execute_next_render_step_args.prototype = {};\nOmniSci_execute_next_render_step_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pending_render = new TPendingRenderQuery();\n          this.pending_render.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.MAP) {\n          var _size564 = 0;\n          var _rtmp3568;\n          this.merged_data = {};\n          var _ktype565 = 0;\n          var _vtype566 = 0;\n          _rtmp3568 = input.readMapBegin();\n          _ktype565 = _rtmp3568.ktype;\n          _vtype566 = _rtmp3568.vtype;\n          _size564 = _rtmp3568.size;\n          for (var _i569 = 0; _i569 < _size564; ++_i569) {\n            if (_i569 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key570 = null;\n            var val571 = null;\n            key570 = input.readString().value;\n            var _size572 = 0;\n            var _rtmp3576;\n            val571 = {};\n            var _ktype573 = 0;\n            var _vtype574 = 0;\n            _rtmp3576 = input.readMapBegin();\n            _ktype573 = _rtmp3576.ktype;\n            _vtype574 = _rtmp3576.vtype;\n            _size572 = _rtmp3576.size;\n            for (var _i577 = 0; _i577 < _size572; ++_i577) {\n              if (_i577 > 0) {\n                if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                  input.rstack.pop();\n                }\n              }\n              var key578 = null;\n              var val579 = null;\n              key578 = input.readString().value;\n              var _size580 = 0;\n              var _rtmp3584;\n              val579 = {};\n              var _ktype581 = 0;\n              var _vtype582 = 0;\n              _rtmp3584 = input.readMapBegin();\n              _ktype581 = _rtmp3584.ktype;\n              _vtype582 = _rtmp3584.vtype;\n              _size580 = _rtmp3584.size;\n              for (var _i585 = 0; _i585 < _size580; ++_i585) {\n                if (_i585 > 0) {\n                  if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                    input.rstack.pop();\n                  }\n                }\n                var key586 = null;\n                var val587 = null;\n                key586 = input.readString().value;\n                var _size588 = 0;\n                var _rtmp3592;\n                val587 = {};\n                var _ktype589 = 0;\n                var _vtype590 = 0;\n                _rtmp3592 = input.readMapBegin();\n                _ktype589 = _rtmp3592.ktype;\n                _vtype590 = _rtmp3592.vtype;\n                _size588 = _rtmp3592.size;\n                for (var _i593 = 0; _i593 < _size588; ++_i593) {\n                  if (_i593 > 0) {\n                    if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                      input.rstack.pop();\n                    }\n                  }\n                  var key594 = null;\n                  var val595 = null;\n                  key594 = input.readString().value;\n                  var _size596 = 0;\n                  var _rtmp3600;\n                  val595 = [];\n                  var _etype599 = 0;\n                  _rtmp3600 = input.readListBegin();\n                  _etype599 = _rtmp3600.etype;\n                  _size596 = _rtmp3600.size;\n                  for (var _i601 = 0; _i601 < _size596; ++_i601) {\n                    var elem602 = null;\n                    elem602 = new TRenderDatum();\n                    elem602.read(input);\n                    val595.push(elem602);\n                  }\n                  input.readListEnd();\n                  val587[key594] = val595;\n                }\n                input.readMapEnd();\n                val579[key586] = val587;\n              }\n              input.readMapEnd();\n              val571[key578] = val579;\n            }\n            input.readMapEnd();\n            this.merged_data[key570] = val571;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_execute_next_render_step_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_execute_next_render_step_args');\n  if (this.pending_render !== null && this.pending_render !== undefined) {\n    output.writeFieldBegin('pending_render', Thrift.Type.STRUCT, 1);\n    this.pending_render.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.merged_data !== null && this.merged_data !== undefined) {\n    output.writeFieldBegin('merged_data', Thrift.Type.MAP, 2);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merged_data));\n    for (var kiter603 in this.merged_data) {\n      if (this.merged_data.hasOwnProperty(kiter603)) {\n        var viter604 = this.merged_data[kiter603];\n        output.writeString(kiter603);\n        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter604));\n        for (var kiter605 in viter604) {\n          if (viter604.hasOwnProperty(kiter605)) {\n            var viter606 = viter604[kiter605];\n            output.writeString(kiter605);\n            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter606));\n            for (var kiter607 in viter606) {\n              if (viter606.hasOwnProperty(kiter607)) {\n                var viter608 = viter606[kiter607];\n                output.writeString(kiter607);\n                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter608));\n                for (var kiter609 in viter608) {\n                  if (viter608.hasOwnProperty(kiter609)) {\n                    var viter610 = viter608[kiter609];\n                    output.writeString(kiter609);\n                    output.writeListBegin(Thrift.Type.STRUCT, viter610.length);\n                    for (var iter611 in viter610) {\n                      if (viter610.hasOwnProperty(iter611)) {\n                        iter611 = viter610[iter611];\n                        iter611.write(output);\n                      }\n                    }\n                    output.writeListEnd();\n                  }\n                }\n                output.writeMapEnd();\n              }\n            }\n            output.writeMapEnd();\n          }\n        }\n        output.writeMapEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_execute_next_render_step_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TRenderStepResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_execute_next_render_step_result.prototype = {};\nOmniSci_execute_next_render_step_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TRenderStepResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_execute_next_render_step_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_execute_next_render_step_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_insert_data_args = function (args) {\n  this.session = null;\n  this.insert_data = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.insert_data !== undefined && args.insert_data !== null) {\n      this.insert_data = new TInsertData(args.insert_data);\n    }\n  }\n};\nOmniSci_insert_data_args.prototype = {};\nOmniSci_insert_data_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.insert_data = new TInsertData();\n          this.insert_data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_insert_data_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_insert_data_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.insert_data !== null && this.insert_data !== undefined) {\n    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);\n    this.insert_data.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_insert_data_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_insert_data_result.prototype = {};\nOmniSci_insert_data_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_insert_data_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_insert_data_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_checkpoint_args = function (args) {\n  this.session = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nOmniSci_checkpoint_args.prototype = {};\nOmniSci_checkpoint_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_checkpoint_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_checkpoint_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_checkpoint_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_checkpoint_result.prototype = {};\nOmniSci_checkpoint_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_checkpoint_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_checkpoint_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_roles_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_roles_args.prototype = {};\nOmniSci_get_roles_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_roles_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_roles_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_roles_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_roles_result.prototype = {};\nOmniSci_get_roles_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size612 = 0;\n          var _rtmp3616;\n          this.success = [];\n          var _etype615 = 0;\n          _rtmp3616 = input.readListBegin();\n          _etype615 = _rtmp3616.etype;\n          _size612 = _rtmp3616.size;\n          for (var _i617 = 0; _i617 < _size612; ++_i617) {\n            var elem618 = null;\n            elem618 = input.readString().value;\n            this.success.push(elem618);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_roles_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_roles_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter619 in this.success) {\n      if (this.success.hasOwnProperty(iter619)) {\n        iter619 = this.success[iter619];\n        output.writeString(iter619);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_db_objects_for_grantee_args = function (args) {\n  this.session = null;\n  this.roleName = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.roleName !== undefined && args.roleName !== null) {\n      this.roleName = args.roleName;\n    }\n  }\n};\nOmniSci_get_db_objects_for_grantee_args.prototype = {};\nOmniSci_get_db_objects_for_grantee_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.roleName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_db_objects_for_grantee_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_db_objects_for_grantee_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.roleName !== null && this.roleName !== undefined) {\n    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);\n    output.writeString(this.roleName);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_db_objects_for_grantee_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBObject]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_db_objects_for_grantee_result.prototype = {};\nOmniSci_get_db_objects_for_grantee_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size620 = 0;\n          var _rtmp3624;\n          this.success = [];\n          var _etype623 = 0;\n          _rtmp3624 = input.readListBegin();\n          _etype623 = _rtmp3624.etype;\n          _size620 = _rtmp3624.size;\n          for (var _i625 = 0; _i625 < _size620; ++_i625) {\n            var elem626 = null;\n            elem626 = new TDBObject();\n            elem626.read(input);\n            this.success.push(elem626);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_db_objects_for_grantee_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_db_objects_for_grantee_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter627 in this.success) {\n      if (this.success.hasOwnProperty(iter627)) {\n        iter627 = this.success[iter627];\n        iter627.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_db_object_privs_args = function (args) {\n  this.session = null;\n  this.objectName = null;\n  this.type = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.objectName !== undefined && args.objectName !== null) {\n      this.objectName = args.objectName;\n    }\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n  }\n};\nOmniSci_get_db_object_privs_args.prototype = {};\nOmniSci_get_db_object_privs_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.objectName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_db_object_privs_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_db_object_privs_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.objectName !== null && this.objectName !== undefined) {\n    output.writeFieldBegin('objectName', Thrift.Type.STRING, 2);\n    output.writeString(this.objectName);\n    output.writeFieldEnd();\n  }\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 3);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_db_object_privs_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBObject]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_db_object_privs_result.prototype = {};\nOmniSci_get_db_object_privs_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size628 = 0;\n          var _rtmp3632;\n          this.success = [];\n          var _etype631 = 0;\n          _rtmp3632 = input.readListBegin();\n          _etype631 = _rtmp3632.etype;\n          _size628 = _rtmp3632.size;\n          for (var _i633 = 0; _i633 < _size628; ++_i633) {\n            var elem634 = null;\n            elem634 = new TDBObject();\n            elem634.read(input);\n            this.success.push(elem634);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_db_object_privs_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_db_object_privs_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter635 in this.success) {\n      if (this.success.hasOwnProperty(iter635)) {\n        iter635 = this.success[iter635];\n        iter635.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_all_roles_for_user_args = function (args) {\n  this.session = null;\n  this.userName = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.userName !== undefined && args.userName !== null) {\n      this.userName = args.userName;\n    }\n  }\n};\nOmniSci_get_all_roles_for_user_args.prototype = {};\nOmniSci_get_all_roles_for_user_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.userName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_all_roles_for_user_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_all_roles_for_user_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.userName !== null && this.userName !== undefined) {\n    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);\n    output.writeString(this.userName);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_all_roles_for_user_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_all_roles_for_user_result.prototype = {};\nOmniSci_get_all_roles_for_user_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          var _size636 = 0;\n          var _rtmp3640;\n          this.success = [];\n          var _etype639 = 0;\n          _rtmp3640 = input.readListBegin();\n          _etype639 = _rtmp3640.etype;\n          _size636 = _rtmp3640.size;\n          for (var _i641 = 0; _i641 < _size636; ++_i641) {\n            var elem642 = null;\n            elem642 = input.readString().value;\n            this.success.push(elem642);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_all_roles_for_user_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_all_roles_for_user_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter643 in this.success) {\n      if (this.success.hasOwnProperty(iter643)) {\n        iter643 = this.success[iter643];\n        output.writeString(iter643);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_has_role_args = function (args) {\n  this.session = null;\n  this.granteeName = null;\n  this.roleName = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.granteeName !== undefined && args.granteeName !== null) {\n      this.granteeName = args.granteeName;\n    }\n    if (args.roleName !== undefined && args.roleName !== null) {\n      this.roleName = args.roleName;\n    }\n  }\n};\nOmniSci_has_role_args.prototype = {};\nOmniSci_has_role_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.granteeName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.roleName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_has_role_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_has_role_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.granteeName !== null && this.granteeName !== undefined) {\n    output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);\n    output.writeString(this.granteeName);\n    output.writeFieldEnd();\n  }\n  if (this.roleName !== null && this.roleName !== undefined) {\n    output.writeFieldBegin('roleName', Thrift.Type.STRING, 3);\n    output.writeString(this.roleName);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_has_role_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_has_role_result.prototype = {};\nOmniSci_has_role_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.BOOL) {\n          this.success = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_has_role_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_has_role_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);\n    output.writeBool(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_has_object_privilege_args = function (args) {\n  this.session = null;\n  this.granteeName = null;\n  this.ObjectName = null;\n  this.objectType = null;\n  this.permissions = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.granteeName !== undefined && args.granteeName !== null) {\n      this.granteeName = args.granteeName;\n    }\n    if (args.ObjectName !== undefined && args.ObjectName !== null) {\n      this.ObjectName = args.ObjectName;\n    }\n    if (args.objectType !== undefined && args.objectType !== null) {\n      this.objectType = args.objectType;\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDBObjectPermissions(args.permissions);\n    }\n  }\n};\nOmniSci_has_object_privilege_args.prototype = {};\nOmniSci_has_object_privilege_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.granteeName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.ObjectName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.objectType = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDBObjectPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_has_object_privilege_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_has_object_privilege_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.granteeName !== null && this.granteeName !== undefined) {\n    output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);\n    output.writeString(this.granteeName);\n    output.writeFieldEnd();\n  }\n  if (this.ObjectName !== null && this.ObjectName !== undefined) {\n    output.writeFieldBegin('ObjectName', Thrift.Type.STRING, 3);\n    output.writeString(this.ObjectName);\n    output.writeFieldEnd();\n  }\n  if (this.objectType !== null && this.objectType !== undefined) {\n    output.writeFieldBegin('objectType', Thrift.Type.I32, 4);\n    output.writeI32(this.objectType);\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_has_object_privilege_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_has_object_privilege_result.prototype = {};\nOmniSci_has_object_privilege_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.BOOL) {\n          this.success = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_has_object_privilege_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_has_object_privilege_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);\n    output.writeBool(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_license_key_args = function (args) {\n  this.session = null;\n  this.key = null;\n  this.nonce = '';\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.key !== undefined && args.key !== null) {\n      this.key = args.key;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nOmniSci_set_license_key_args.prototype = {};\nOmniSci_set_license_key_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_license_key_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_license_key_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.key !== null && this.key !== undefined) {\n    output.writeFieldBegin('key', Thrift.Type.STRING, 2);\n    output.writeString(this.key);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 3);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_license_key_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TLicenseInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_set_license_key_result.prototype = {};\nOmniSci_set_license_key_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TLicenseInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_license_key_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_license_key_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_license_claims_args = function (args) {\n  this.session = null;\n  this.nonce = '';\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nOmniSci_get_license_claims_args.prototype = {};\nOmniSci_get_license_claims_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_license_claims_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_license_claims_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_license_claims_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TLicenseInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_license_claims_result.prototype = {};\nOmniSci_get_license_claims_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TLicenseInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_license_claims_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_license_claims_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_device_parameters_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_device_parameters_args.prototype = {};\nOmniSci_get_device_parameters_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_device_parameters_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_device_parameters_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_device_parameters_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyMap(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_device_parameters_result.prototype = {};\nOmniSci_get_device_parameters_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.MAP) {\n          var _size644 = 0;\n          var _rtmp3648;\n          this.success = {};\n          var _ktype645 = 0;\n          var _vtype646 = 0;\n          _rtmp3648 = input.readMapBegin();\n          _ktype645 = _rtmp3648.ktype;\n          _vtype646 = _rtmp3648.vtype;\n          _size644 = _rtmp3648.size;\n          for (var _i649 = 0; _i649 < _size644; ++_i649) {\n            if (_i649 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key650 = null;\n            var val651 = null;\n            key650 = input.readString().value;\n            val651 = input.readString().value;\n            this.success[key650] = val651;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_device_parameters_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_device_parameters_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));\n    for (var kiter652 in this.success) {\n      if (this.success.hasOwnProperty(kiter652)) {\n        var viter653 = this.success[kiter652];\n        output.writeString(kiter652);\n        output.writeString(viter653);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_register_runtime_extension_functions_args = function (args) {\n  this.session = null;\n  this.udfs = null;\n  this.udtfs = null;\n  this.device_ir_map = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.udfs !== undefined && args.udfs !== null) {\n      this.udfs = Thrift.copyList(args.udfs, [TUserDefinedFunction]);\n    }\n    if (args.udtfs !== undefined && args.udtfs !== null) {\n      this.udtfs = Thrift.copyList(args.udtfs, [TUserDefinedTableFunction]);\n    }\n    if (args.device_ir_map !== undefined && args.device_ir_map !== null) {\n      this.device_ir_map = Thrift.copyMap(args.device_ir_map, [null]);\n    }\n  }\n};\nOmniSci_register_runtime_extension_functions_args.prototype = {};\nOmniSci_register_runtime_extension_functions_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size654 = 0;\n          var _rtmp3658;\n          this.udfs = [];\n          var _etype657 = 0;\n          _rtmp3658 = input.readListBegin();\n          _etype657 = _rtmp3658.etype;\n          _size654 = _rtmp3658.size;\n          for (var _i659 = 0; _i659 < _size654; ++_i659) {\n            var elem660 = null;\n            elem660 = new TUserDefinedFunction();\n            elem660.read(input);\n            this.udfs.push(elem660);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          var _size661 = 0;\n          var _rtmp3665;\n          this.udtfs = [];\n          var _etype664 = 0;\n          _rtmp3665 = input.readListBegin();\n          _etype664 = _rtmp3665.etype;\n          _size661 = _rtmp3665.size;\n          for (var _i666 = 0; _i666 < _size661; ++_i666) {\n            var elem667 = null;\n            elem667 = new TUserDefinedTableFunction();\n            elem667.read(input);\n            this.udtfs.push(elem667);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.MAP) {\n          var _size668 = 0;\n          var _rtmp3672;\n          this.device_ir_map = {};\n          var _ktype669 = 0;\n          var _vtype670 = 0;\n          _rtmp3672 = input.readMapBegin();\n          _ktype669 = _rtmp3672.ktype;\n          _vtype670 = _rtmp3672.vtype;\n          _size668 = _rtmp3672.size;\n          for (var _i673 = 0; _i673 < _size668; ++_i673) {\n            if (_i673 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key674 = null;\n            var val675 = null;\n            key674 = input.readString().value;\n            val675 = input.readString().value;\n            this.device_ir_map[key674] = val675;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_register_runtime_extension_functions_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_register_runtime_extension_functions_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.udfs !== null && this.udfs !== undefined) {\n    output.writeFieldBegin('udfs', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.udfs.length);\n    for (var iter676 in this.udfs) {\n      if (this.udfs.hasOwnProperty(iter676)) {\n        iter676 = this.udfs[iter676];\n        iter676.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.udtfs !== null && this.udtfs !== undefined) {\n    output.writeFieldBegin('udtfs', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.udtfs.length);\n    for (var iter677 in this.udtfs) {\n      if (this.udtfs.hasOwnProperty(iter677)) {\n        iter677 = this.udtfs[iter677];\n        iter677.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.device_ir_map !== null && this.device_ir_map !== undefined) {\n    output.writeFieldBegin('device_ir_map', Thrift.Type.MAP, 4);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.device_ir_map));\n    for (var kiter678 in this.device_ir_map) {\n      if (this.device_ir_map.hasOwnProperty(kiter678)) {\n        var viter679 = this.device_ir_map[kiter678];\n        output.writeString(kiter678);\n        output.writeString(viter679);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_register_runtime_extension_functions_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_register_runtime_extension_functions_result.prototype = {};\nOmniSci_register_runtime_extension_functions_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_register_runtime_extension_functions_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_register_runtime_extension_functions_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSciClient = function (input, output) {\n  this.input = input;\n  this.output = !output ? input : output;\n  this.seqid = 0;\n};\nOmniSciClient.prototype = {};\nOmniSciClient.prototype.connect = function (user, passwd, dbname, callback) {\n  this.send_connect(user, passwd, dbname, callback);\n  if (!callback) {\n    return this.recv_connect();\n  }\n};\n\nOmniSciClient.prototype.send_connect = function (user, passwd, dbname, callback) {\n  this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_connect_args();\n  args.user = user;\n  args.passwd = passwd;\n  args.dbname = dbname;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_connect();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_connect = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_connect_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'connect failed: unknown result';\n};\nOmniSciClient.prototype.krb5_connect = function (inputToken, dbname, callback) {\n  this.send_krb5_connect(inputToken, dbname, callback);\n  if (!callback) {\n    return this.recv_krb5_connect();\n  }\n};\n\nOmniSciClient.prototype.send_krb5_connect = function (inputToken, dbname, callback) {\n  this.output.writeMessageBegin('krb5_connect', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_krb5_connect_args();\n  args.inputToken = inputToken;\n  args.dbname = dbname;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_krb5_connect();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_krb5_connect = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_krb5_connect_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'krb5_connect failed: unknown result';\n};\nOmniSciClient.prototype.disconnect = function (session, callback) {\n  this.send_disconnect(session, callback);\n  if (!callback) {\n    this.recv_disconnect();\n  }\n};\n\nOmniSciClient.prototype.send_disconnect = function (session, callback) {\n  this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_disconnect_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_disconnect();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_disconnect = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_disconnect_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.switch_database = function (session, dbname, callback) {\n  this.send_switch_database(session, dbname, callback);\n  if (!callback) {\n    this.recv_switch_database();\n  }\n};\n\nOmniSciClient.prototype.send_switch_database = function (session, dbname, callback) {\n  this.output.writeMessageBegin('switch_database', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_switch_database_args();\n  args.session = session;\n  args.dbname = dbname;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_switch_database();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_switch_database = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_switch_database_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.clone_session = function (session, callback) {\n  this.send_clone_session(session, callback);\n  if (!callback) {\n    return this.recv_clone_session();\n  }\n};\n\nOmniSciClient.prototype.send_clone_session = function (session, callback) {\n  this.output.writeMessageBegin('clone_session', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_clone_session_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_clone_session();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_clone_session = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_clone_session_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'clone_session failed: unknown result';\n};\nOmniSciClient.prototype.get_server_status = function (session, callback) {\n  this.send_get_server_status(session, callback);\n  if (!callback) {\n    return this.recv_get_server_status();\n  }\n};\n\nOmniSciClient.prototype.send_get_server_status = function (session, callback) {\n  this.output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_server_status_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_server_status();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_server_status = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_server_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_server_status failed: unknown result';\n};\nOmniSciClient.prototype.get_status = function (session, callback) {\n  this.send_get_status(session, callback);\n  if (!callback) {\n    return this.recv_get_status();\n  }\n};\n\nOmniSciClient.prototype.send_get_status = function (session, callback) {\n  this.output.writeMessageBegin('get_status', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_status_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_status();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_status = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_status failed: unknown result';\n};\nOmniSciClient.prototype.get_hardware_info = function (session, callback) {\n  this.send_get_hardware_info(session, callback);\n  if (!callback) {\n    return this.recv_get_hardware_info();\n  }\n};\n\nOmniSciClient.prototype.send_get_hardware_info = function (session, callback) {\n  this.output.writeMessageBegin('get_hardware_info', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_hardware_info_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_hardware_info();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_hardware_info = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_hardware_info_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_hardware_info failed: unknown result';\n};\nOmniSciClient.prototype.get_tables = function (session, callback) {\n  this.send_get_tables(session, callback);\n  if (!callback) {\n    return this.recv_get_tables();\n  }\n};\n\nOmniSciClient.prototype.send_get_tables = function (session, callback) {\n  this.output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_tables_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_tables();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_tables = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_tables_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_tables failed: unknown result';\n};\nOmniSciClient.prototype.get_physical_tables = function (session, callback) {\n  this.send_get_physical_tables(session, callback);\n  if (!callback) {\n    return this.recv_get_physical_tables();\n  }\n};\n\nOmniSciClient.prototype.send_get_physical_tables = function (session, callback) {\n  this.output.writeMessageBegin('get_physical_tables', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_physical_tables_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_physical_tables();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_physical_tables = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_physical_tables_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_physical_tables failed: unknown result';\n};\nOmniSciClient.prototype.get_views = function (session, callback) {\n  this.send_get_views(session, callback);\n  if (!callback) {\n    return this.recv_get_views();\n  }\n};\n\nOmniSciClient.prototype.send_get_views = function (session, callback) {\n  this.output.writeMessageBegin('get_views', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_views_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_views();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_views = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_views_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_views failed: unknown result';\n};\nOmniSciClient.prototype.get_tables_meta = function (session, callback) {\n  this.send_get_tables_meta(session, callback);\n  if (!callback) {\n    return this.recv_get_tables_meta();\n  }\n};\n\nOmniSciClient.prototype.send_get_tables_meta = function (session, callback) {\n  this.output.writeMessageBegin('get_tables_meta', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_tables_meta_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_tables_meta();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_tables_meta = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_tables_meta_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_tables_meta failed: unknown result';\n};\nOmniSciClient.prototype.get_table_details = function (session, table_name, callback) {\n  this.send_get_table_details(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_table_details();\n  }\n};\n\nOmniSciClient.prototype.send_get_table_details = function (session, table_name, callback) {\n  this.output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_table_details_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_table_details();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_table_details = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_table_details_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_details failed: unknown result';\n};\nOmniSciClient.prototype.get_internal_table_details = function (session, table_name, callback) {\n  this.send_get_internal_table_details(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_internal_table_details();\n  }\n};\n\nOmniSciClient.prototype.send_get_internal_table_details = function (session, table_name, callback) {\n  this.output.writeMessageBegin('get_internal_table_details', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_internal_table_details_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_internal_table_details();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_internal_table_details = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_internal_table_details_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_internal_table_details failed: unknown result';\n};\nOmniSciClient.prototype.get_users = function (session, callback) {\n  this.send_get_users(session, callback);\n  if (!callback) {\n    return this.recv_get_users();\n  }\n};\n\nOmniSciClient.prototype.send_get_users = function (session, callback) {\n  this.output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_users_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_users();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_users = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_users_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_users failed: unknown result';\n};\nOmniSciClient.prototype.get_databases = function (session, callback) {\n  this.send_get_databases(session, callback);\n  if (!callback) {\n    return this.recv_get_databases();\n  }\n};\n\nOmniSciClient.prototype.send_get_databases = function (session, callback) {\n  this.output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_databases_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_databases();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_databases = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_databases_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_databases failed: unknown result';\n};\nOmniSciClient.prototype.get_version = function (callback) {\n  this.send_get_version(callback);\n  if (!callback) {\n    return this.recv_get_version();\n  }\n};\n\nOmniSciClient.prototype.send_get_version = function (callback) {\n  this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_version_args();\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_version();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_version = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_version_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_version failed: unknown result';\n};\nOmniSciClient.prototype.start_heap_profile = function (session, callback) {\n  this.send_start_heap_profile(session, callback);\n  if (!callback) {\n    this.recv_start_heap_profile();\n  }\n};\n\nOmniSciClient.prototype.send_start_heap_profile = function (session, callback) {\n  this.output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_start_heap_profile_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_start_heap_profile();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_start_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_start_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.stop_heap_profile = function (session, callback) {\n  this.send_stop_heap_profile(session, callback);\n  if (!callback) {\n    this.recv_stop_heap_profile();\n  }\n};\n\nOmniSciClient.prototype.send_stop_heap_profile = function (session, callback) {\n  this.output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_stop_heap_profile_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_stop_heap_profile();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_stop_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_stop_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.get_heap_profile = function (session, callback) {\n  this.send_get_heap_profile(session, callback);\n  if (!callback) {\n    return this.recv_get_heap_profile();\n  }\n};\n\nOmniSciClient.prototype.send_get_heap_profile = function (session, callback) {\n  this.output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_heap_profile_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_heap_profile();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_heap_profile failed: unknown result';\n};\nOmniSciClient.prototype.get_memory = function (session, memory_level, callback) {\n  this.send_get_memory(session, memory_level, callback);\n  if (!callback) {\n    return this.recv_get_memory();\n  }\n};\n\nOmniSciClient.prototype.send_get_memory = function (session, memory_level, callback) {\n  this.output.writeMessageBegin('get_memory', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_memory_args();\n  args.session = session;\n  args.memory_level = memory_level;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_memory();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_memory failed: unknown result';\n};\nOmniSciClient.prototype.clear_cpu_memory = function (session, callback) {\n  this.send_clear_cpu_memory(session, callback);\n  if (!callback) {\n    this.recv_clear_cpu_memory();\n  }\n};\n\nOmniSciClient.prototype.send_clear_cpu_memory = function (session, callback) {\n  this.output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_clear_cpu_memory_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_clear_cpu_memory();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_clear_cpu_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_clear_cpu_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.clear_gpu_memory = function (session, callback) {\n  this.send_clear_gpu_memory(session, callback);\n  if (!callback) {\n    this.recv_clear_gpu_memory();\n  }\n};\n\nOmniSciClient.prototype.send_clear_gpu_memory = function (session, callback) {\n  this.output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_clear_gpu_memory_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_clear_gpu_memory();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_clear_gpu_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_clear_gpu_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.set_table_epoch = function (session, db_id, table_id, new_epoch, callback) {\n  this.send_set_table_epoch(session, db_id, table_id, new_epoch, callback);\n  if (!callback) {\n    this.recv_set_table_epoch();\n  }\n};\n\nOmniSciClient.prototype.send_set_table_epoch = function (session, db_id, table_id, new_epoch, callback) {\n  this.output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_set_table_epoch_args();\n  args.session = session;\n  args.db_id = db_id;\n  args.table_id = table_id;\n  args.new_epoch = new_epoch;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_table_epoch();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_set_table_epoch = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_table_epoch_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.set_table_epoch_by_name = function (session, table_name, new_epoch, callback) {\n  this.send_set_table_epoch_by_name(session, table_name, new_epoch, callback);\n  if (!callback) {\n    this.recv_set_table_epoch_by_name();\n  }\n};\n\nOmniSciClient.prototype.send_set_table_epoch_by_name = function (session, table_name, new_epoch, callback) {\n  this.output.writeMessageBegin('set_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_set_table_epoch_by_name_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.new_epoch = new_epoch;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_table_epoch_by_name();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_set_table_epoch_by_name = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_table_epoch_by_name_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.get_table_epoch = function (session, db_id, table_id, callback) {\n  this.send_get_table_epoch(session, db_id, table_id, callback);\n  if (!callback) {\n    return this.recv_get_table_epoch();\n  }\n};\n\nOmniSciClient.prototype.send_get_table_epoch = function (session, db_id, table_id, callback) {\n  this.output.writeMessageBegin('get_table_epoch', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_table_epoch_args();\n  args.session = session;\n  args.db_id = db_id;\n  args.table_id = table_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_table_epoch();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_table_epoch = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_table_epoch_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_epoch failed: unknown result';\n};\nOmniSciClient.prototype.get_table_epoch_by_name = function (session, table_name, callback) {\n  this.send_get_table_epoch_by_name(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_table_epoch_by_name();\n  }\n};\n\nOmniSciClient.prototype.send_get_table_epoch_by_name = function (session, table_name, callback) {\n  this.output.writeMessageBegin('get_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_table_epoch_by_name_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_table_epoch_by_name();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_table_epoch_by_name = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_table_epoch_by_name_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_epoch_by_name failed: unknown result';\n};\nOmniSciClient.prototype.get_table_epochs = function (session, db_id, table_id, callback) {\n  this.send_get_table_epochs(session, db_id, table_id, callback);\n  if (!callback) {\n    return this.recv_get_table_epochs();\n  }\n};\n\nOmniSciClient.prototype.send_get_table_epochs = function (session, db_id, table_id, callback) {\n  this.output.writeMessageBegin('get_table_epochs', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_table_epochs_args();\n  args.session = session;\n  args.db_id = db_id;\n  args.table_id = table_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_table_epochs();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_table_epochs = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_table_epochs_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_epochs failed: unknown result';\n};\nOmniSciClient.prototype.set_table_epochs = function (session, db_id, table_epochs, callback) {\n  this.send_set_table_epochs(session, db_id, table_epochs, callback);\n  if (!callback) {\n    this.recv_set_table_epochs();\n  }\n};\n\nOmniSciClient.prototype.send_set_table_epochs = function (session, db_id, table_epochs, callback) {\n  this.output.writeMessageBegin('set_table_epochs', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_set_table_epochs_args();\n  args.session = session;\n  args.db_id = db_id;\n  args.table_epochs = table_epochs;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_table_epochs();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_set_table_epochs = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_table_epochs_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  return;\n};\nOmniSciClient.prototype.get_session_info = function (session, callback) {\n  this.send_get_session_info(session, callback);\n  if (!callback) {\n    return this.recv_get_session_info();\n  }\n};\n\nOmniSciClient.prototype.send_get_session_info = function (session, callback) {\n  this.output.writeMessageBegin('get_session_info', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_session_info_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_session_info();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_session_info = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_session_info_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_session_info failed: unknown result';\n};\nOmniSciClient.prototype.sql_execute = function (session, query, column_format, nonce, first_n, at_most_n, callback) {\n  this.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n, callback);\n  if (!callback) {\n    return this.recv_sql_execute();\n  }\n};\n\nOmniSciClient.prototype.send_sql_execute = function (session, query, column_format, nonce, first_n, at_most_n, callback) {\n  this.output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_sql_execute_args();\n  args.session = session;\n  args.query = query;\n  args.column_format = column_format;\n  args.nonce = nonce;\n  args.first_n = first_n;\n  args.at_most_n = at_most_n;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_sql_execute();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_sql_execute = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_sql_execute_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute failed: unknown result';\n};\nOmniSciClient.prototype.sql_execute_df = function (session, query, device_type, device_id, first_n, transport_method, callback) {\n  this.send_sql_execute_df(session, query, device_type, device_id, first_n, transport_method, callback);\n  if (!callback) {\n    return this.recv_sql_execute_df();\n  }\n};\n\nOmniSciClient.prototype.send_sql_execute_df = function (session, query, device_type, device_id, first_n, transport_method, callback) {\n  this.output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_sql_execute_df_args();\n  args.session = session;\n  args.query = query;\n  args.device_type = device_type;\n  args.device_id = device_id;\n  args.first_n = first_n;\n  args.transport_method = transport_method;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_sql_execute_df();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_sql_execute_df = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_sql_execute_df_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute_df failed: unknown result';\n};\nOmniSciClient.prototype.sql_execute_gdf = function (session, query, device_id, first_n, callback) {\n  this.send_sql_execute_gdf(session, query, device_id, first_n, callback);\n  if (!callback) {\n    return this.recv_sql_execute_gdf();\n  }\n};\n\nOmniSciClient.prototype.send_sql_execute_gdf = function (session, query, device_id, first_n, callback) {\n  this.output.writeMessageBegin('sql_execute_gdf', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_sql_execute_gdf_args();\n  args.session = session;\n  args.query = query;\n  args.device_id = device_id;\n  args.first_n = first_n;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_sql_execute_gdf();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_sql_execute_gdf = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_sql_execute_gdf_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute_gdf failed: unknown result';\n};\nOmniSciClient.prototype.deallocate_df = function (session, df, device_type, device_id, callback) {\n  this.send_deallocate_df(session, df, device_type, device_id, callback);\n  if (!callback) {\n    this.recv_deallocate_df();\n  }\n};\n\nOmniSciClient.prototype.send_deallocate_df = function (session, df, device_type, device_id, callback) {\n  this.output.writeMessageBegin('deallocate_df', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_deallocate_df_args();\n  args.session = session;\n  args.df = df;\n  args.device_type = device_type;\n  args.device_id = device_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_deallocate_df();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_deallocate_df = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_deallocate_df_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.interrupt = function (query_session, interrupt_session, callback) {\n  this.send_interrupt(query_session, interrupt_session, callback);\n  if (!callback) {\n    this.recv_interrupt();\n  }\n};\n\nOmniSciClient.prototype.send_interrupt = function (query_session, interrupt_session, callback) {\n  this.output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_interrupt_args();\n  args.query_session = query_session;\n  args.interrupt_session = interrupt_session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_interrupt();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_interrupt = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_interrupt_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.sql_validate = function (session, query, callback) {\n  this.send_sql_validate(session, query, callback);\n  if (!callback) {\n    return this.recv_sql_validate();\n  }\n};\n\nOmniSciClient.prototype.send_sql_validate = function (session, query, callback) {\n  this.output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_sql_validate_args();\n  args.session = session;\n  args.query = query;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_sql_validate();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_sql_validate = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_sql_validate_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_validate failed: unknown result';\n};\nOmniSciClient.prototype.get_completion_hints = function (session, sql, cursor, callback) {\n  this.send_get_completion_hints(session, sql, cursor, callback);\n  if (!callback) {\n    return this.recv_get_completion_hints();\n  }\n};\n\nOmniSciClient.prototype.send_get_completion_hints = function (session, sql, cursor, callback) {\n  this.output.writeMessageBegin('get_completion_hints', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_completion_hints_args();\n  args.session = session;\n  args.sql = sql;\n  args.cursor = cursor;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_completion_hints();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_completion_hints = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_completion_hints_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_completion_hints failed: unknown result';\n};\nOmniSciClient.prototype.set_execution_mode = function (session, mode, callback) {\n  this.send_set_execution_mode(session, mode, callback);\n  if (!callback) {\n    this.recv_set_execution_mode();\n  }\n};\n\nOmniSciClient.prototype.send_set_execution_mode = function (session, mode, callback) {\n  this.output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_set_execution_mode_args();\n  args.session = session;\n  args.mode = mode;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_execution_mode();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_set_execution_mode = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_execution_mode_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\n  this.send_render_vega(session, widget_id, vega_json, compression_level, nonce, callback);\n  if (!callback) {\n    return this.recv_render_vega();\n  }\n};\n\nOmniSciClient.prototype.send_render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\n  this.output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_render_vega_args();\n  args.session = session;\n  args.widget_id = widget_id;\n  args.vega_json = vega_json;\n  args.compression_level = compression_level;\n  args.nonce = nonce;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_render_vega();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_render_vega = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_render_vega_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'render_vega failed: unknown result';\n};\nOmniSciClient.prototype.get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\n  this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback);\n  if (!callback) {\n    return this.recv_get_result_row_for_pixel();\n  }\n};\n\nOmniSciClient.prototype.send_get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\n  this.output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_result_row_for_pixel_args();\n  args.session = session;\n  args.widget_id = widget_id;\n  args.pixel = pixel;\n  args.table_col_names = table_col_names;\n  args.column_format = column_format;\n  args.pixelRadius = pixelRadius;\n  args.nonce = nonce;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_result_row_for_pixel();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_result_row_for_pixel = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_result_row_for_pixel_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_result_row_for_pixel failed: unknown result';\n};\nOmniSciClient.prototype.get_dashboard = function (session, dashboard_id, callback) {\n  this.send_get_dashboard(session, dashboard_id, callback);\n  if (!callback) {\n    return this.recv_get_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_get_dashboard = function (session, dashboard_id, callback) {\n  this.output.writeMessageBegin('get_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_dashboard failed: unknown result';\n};\nOmniSciClient.prototype.get_dashboards = function (session, callback) {\n  this.send_get_dashboards(session, callback);\n  if (!callback) {\n    return this.recv_get_dashboards();\n  }\n};\n\nOmniSciClient.prototype.send_get_dashboards = function (session, callback) {\n  this.output.writeMessageBegin('get_dashboards', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_dashboards_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_dashboards();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_dashboards = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_dashboards_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_dashboards failed: unknown result';\n};\nOmniSciClient.prototype.create_dashboard = function (session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback);\n  if (!callback) {\n    return this.recv_create_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_create_dashboard = function (session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.output.writeMessageBegin('create_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_create_dashboard_args();\n  args.session = session;\n  args.dashboard_name = dashboard_name;\n  args.dashboard_state = dashboard_state;\n  args.image_hash = image_hash;\n  args.dashboard_metadata = dashboard_metadata;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_create_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_create_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_create_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'create_dashboard failed: unknown result';\n};\nOmniSciClient.prototype.replace_dashboard = function (session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback);\n  if (!callback) {\n    this.recv_replace_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_replace_dashboard = function (session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.output.writeMessageBegin('replace_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_replace_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.dashboard_name = dashboard_name;\n  args.dashboard_owner = dashboard_owner;\n  args.dashboard_state = dashboard_state;\n  args.image_hash = image_hash;\n  args.dashboard_metadata = dashboard_metadata;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_replace_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_replace_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_replace_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.delete_dashboard = function (session, dashboard_id, callback) {\n  this.send_delete_dashboard(session, dashboard_id, callback);\n  if (!callback) {\n    this.recv_delete_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_delete_dashboard = function (session, dashboard_id, callback) {\n  this.output.writeMessageBegin('delete_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_delete_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_delete_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_delete_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_delete_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.share_dashboards = function (session, dashboard_ids, groups, permissions, callback) {\n  this.send_share_dashboards(session, dashboard_ids, groups, permissions, callback);\n  if (!callback) {\n    this.recv_share_dashboards();\n  }\n};\n\nOmniSciClient.prototype.send_share_dashboards = function (session, dashboard_ids, groups, permissions, callback) {\n  this.output.writeMessageBegin('share_dashboards', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_share_dashboards_args();\n  args.session = session;\n  args.dashboard_ids = dashboard_ids;\n  args.groups = groups;\n  args.permissions = permissions;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_share_dashboards();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_share_dashboards = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_share_dashboards_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.delete_dashboards = function (session, dashboard_ids, callback) {\n  this.send_delete_dashboards(session, dashboard_ids, callback);\n  if (!callback) {\n    this.recv_delete_dashboards();\n  }\n};\n\nOmniSciClient.prototype.send_delete_dashboards = function (session, dashboard_ids, callback) {\n  this.output.writeMessageBegin('delete_dashboards', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_delete_dashboards_args();\n  args.session = session;\n  args.dashboard_ids = dashboard_ids;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_delete_dashboards();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_delete_dashboards = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_delete_dashboards_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.share_dashboard = function (session, dashboard_id, groups, objects, permissions, grant_role, callback) {\n  this.send_share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role, callback);\n  if (!callback) {\n    this.recv_share_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_share_dashboard = function (session, dashboard_id, groups, objects, permissions, grant_role, callback) {\n  this.output.writeMessageBegin('share_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_share_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.groups = groups;\n  args.objects = objects;\n  args.permissions = permissions;\n  args.grant_role = grant_role;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_share_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_share_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_share_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.unshare_dashboard = function (session, dashboard_id, groups, objects, permissions, callback) {\n  this.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions, callback);\n  if (!callback) {\n    this.recv_unshare_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_unshare_dashboard = function (session, dashboard_id, groups, objects, permissions, callback) {\n  this.output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_unshare_dashboard_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.groups = groups;\n  args.objects = objects;\n  args.permissions = permissions;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_unshare_dashboard();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_unshare_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_unshare_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.unshare_dashboards = function (session, dashboard_ids, groups, permissions, callback) {\n  this.send_unshare_dashboards(session, dashboard_ids, groups, permissions, callback);\n  if (!callback) {\n    this.recv_unshare_dashboards();\n  }\n};\n\nOmniSciClient.prototype.send_unshare_dashboards = function (session, dashboard_ids, groups, permissions, callback) {\n  this.output.writeMessageBegin('unshare_dashboards', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_unshare_dashboards_args();\n  args.session = session;\n  args.dashboard_ids = dashboard_ids;\n  args.groups = groups;\n  args.permissions = permissions;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_unshare_dashboards();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_unshare_dashboards = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_unshare_dashboards_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.get_dashboard_grantees = function (session, dashboard_id, callback) {\n  this.send_get_dashboard_grantees(session, dashboard_id, callback);\n  if (!callback) {\n    return this.recv_get_dashboard_grantees();\n  }\n};\n\nOmniSciClient.prototype.send_get_dashboard_grantees = function (session, dashboard_id, callback) {\n  this.output.writeMessageBegin('get_dashboard_grantees', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_dashboard_grantees_args();\n  args.session = session;\n  args.dashboard_id = dashboard_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_dashboard_grantees();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_dashboard_grantees = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_dashboard_grantees_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_dashboard_grantees failed: unknown result';\n};\nOmniSciClient.prototype.get_link_view = function (session, link, callback) {\n  this.send_get_link_view(session, link, callback);\n  if (!callback) {\n    return this.recv_get_link_view();\n  }\n};\n\nOmniSciClient.prototype.send_get_link_view = function (session, link, callback) {\n  this.output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_link_view_args();\n  args.session = session;\n  args.link = link;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_link_view();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_link_view = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_link_view_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_link_view failed: unknown result';\n};\nOmniSciClient.prototype.create_link = function (session, view_state, view_metadata, callback) {\n  this.send_create_link(session, view_state, view_metadata, callback);\n  if (!callback) {\n    return this.recv_create_link();\n  }\n};\n\nOmniSciClient.prototype.send_create_link = function (session, view_state, view_metadata, callback) {\n  this.output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_create_link_args();\n  args.session = session;\n  args.view_state = view_state;\n  args.view_metadata = view_metadata;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_create_link();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_create_link = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_create_link_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'create_link failed: unknown result';\n};\nOmniSciClient.prototype.load_table_binary = function (session, table_name, rows, callback) {\n  this.send_load_table_binary(session, table_name, rows, callback);\n  if (!callback) {\n    this.recv_load_table_binary();\n  }\n};\n\nOmniSciClient.prototype.send_load_table_binary = function (session, table_name, rows, callback) {\n  this.output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_load_table_binary_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.rows = rows;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_load_table_binary();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_load_table_binary = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_load_table_binary_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.load_table_binary_columnar = function (session, table_name, cols, callback) {\n  this.send_load_table_binary_columnar(session, table_name, cols, callback);\n  if (!callback) {\n    this.recv_load_table_binary_columnar();\n  }\n};\n\nOmniSciClient.prototype.send_load_table_binary_columnar = function (session, table_name, cols, callback) {\n  this.output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_load_table_binary_columnar_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.cols = cols;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_load_table_binary_columnar();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_load_table_binary_columnar = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_load_table_binary_columnar_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.load_table_binary_arrow = function (session, table_name, arrow_stream, callback) {\n  this.send_load_table_binary_arrow(session, table_name, arrow_stream, callback);\n  if (!callback) {\n    this.recv_load_table_binary_arrow();\n  }\n};\n\nOmniSciClient.prototype.send_load_table_binary_arrow = function (session, table_name, arrow_stream, callback) {\n  this.output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_load_table_binary_arrow_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.arrow_stream = arrow_stream;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_load_table_binary_arrow();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_load_table_binary_arrow = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_load_table_binary_arrow_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.load_table = function (session, table_name, rows, callback) {\n  this.send_load_table(session, table_name, rows, callback);\n  if (!callback) {\n    this.recv_load_table();\n  }\n};\n\nOmniSciClient.prototype.send_load_table = function (session, table_name, rows, callback) {\n  this.output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_load_table_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.rows = rows;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_load_table();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_load_table = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_load_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.detect_column_types = function (session, file_name, copy_params, callback) {\n  this.send_detect_column_types(session, file_name, copy_params, callback);\n  if (!callback) {\n    return this.recv_detect_column_types();\n  }\n};\n\nOmniSciClient.prototype.send_detect_column_types = function (session, file_name, copy_params, callback) {\n  this.output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_detect_column_types_args();\n  args.session = session;\n  args.file_name = file_name;\n  args.copy_params = copy_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_detect_column_types();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_detect_column_types = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_detect_column_types_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'detect_column_types failed: unknown result';\n};\nOmniSciClient.prototype.create_table = function (session, table_name, row_desc, file_type, create_params, callback) {\n  this.send_create_table(session, table_name, row_desc, file_type, create_params, callback);\n  if (!callback) {\n    this.recv_create_table();\n  }\n};\n\nOmniSciClient.prototype.send_create_table = function (session, table_name, row_desc, file_type, create_params, callback) {\n  this.output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_create_table_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.row_desc = row_desc;\n  args.file_type = file_type;\n  args.create_params = create_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_create_table();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_create_table = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_create_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.import_table = function (session, table_name, file_name, copy_params, callback) {\n  this.send_import_table(session, table_name, file_name, copy_params, callback);\n  if (!callback) {\n    this.recv_import_table();\n  }\n};\n\nOmniSciClient.prototype.send_import_table = function (session, table_name, file_name, copy_params, callback) {\n  this.output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_import_table_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.file_name = file_name;\n  args.copy_params = copy_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_import_table();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_import_table = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_import_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.import_geo_table = function (session, table_name, file_name, copy_params, row_desc, create_params, callback) {\n  this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params, callback);\n  if (!callback) {\n    this.recv_import_geo_table();\n  }\n};\n\nOmniSciClient.prototype.send_import_geo_table = function (session, table_name, file_name, copy_params, row_desc, create_params, callback) {\n  this.output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_import_geo_table_args();\n  args.session = session;\n  args.table_name = table_name;\n  args.file_name = file_name;\n  args.copy_params = copy_params;\n  args.row_desc = row_desc;\n  args.create_params = create_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_import_geo_table();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_import_geo_table = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_import_geo_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.import_table_status = function (session, import_id, callback) {\n  this.send_import_table_status(session, import_id, callback);\n  if (!callback) {\n    return this.recv_import_table_status();\n  }\n};\n\nOmniSciClient.prototype.send_import_table_status = function (session, import_id, callback) {\n  this.output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_import_table_status_args();\n  args.session = session;\n  args.import_id = import_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_import_table_status();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_import_table_status = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_import_table_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'import_table_status failed: unknown result';\n};\nOmniSciClient.prototype.get_first_geo_file_in_archive = function (session, archive_path, copy_params, callback) {\n  this.send_get_first_geo_file_in_archive(session, archive_path, copy_params, callback);\n  if (!callback) {\n    return this.recv_get_first_geo_file_in_archive();\n  }\n};\n\nOmniSciClient.prototype.send_get_first_geo_file_in_archive = function (session, archive_path, copy_params, callback) {\n  this.output.writeMessageBegin('get_first_geo_file_in_archive', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_first_geo_file_in_archive_args();\n  args.session = session;\n  args.archive_path = archive_path;\n  args.copy_params = copy_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_first_geo_file_in_archive();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_first_geo_file_in_archive = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_first_geo_file_in_archive_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_first_geo_file_in_archive failed: unknown result';\n};\nOmniSciClient.prototype.get_all_files_in_archive = function (session, archive_path, copy_params, callback) {\n  this.send_get_all_files_in_archive(session, archive_path, copy_params, callback);\n  if (!callback) {\n    return this.recv_get_all_files_in_archive();\n  }\n};\n\nOmniSciClient.prototype.send_get_all_files_in_archive = function (session, archive_path, copy_params, callback) {\n  this.output.writeMessageBegin('get_all_files_in_archive', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_all_files_in_archive_args();\n  args.session = session;\n  args.archive_path = archive_path;\n  args.copy_params = copy_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_all_files_in_archive();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_all_files_in_archive = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_all_files_in_archive_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_all_files_in_archive failed: unknown result';\n};\nOmniSciClient.prototype.get_layers_in_geo_file = function (session, file_name, copy_params, callback) {\n  this.send_get_layers_in_geo_file(session, file_name, copy_params, callback);\n  if (!callback) {\n    return this.recv_get_layers_in_geo_file();\n  }\n};\n\nOmniSciClient.prototype.send_get_layers_in_geo_file = function (session, file_name, copy_params, callback) {\n  this.output.writeMessageBegin('get_layers_in_geo_file', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_layers_in_geo_file_args();\n  args.session = session;\n  args.file_name = file_name;\n  args.copy_params = copy_params;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_layers_in_geo_file();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_layers_in_geo_file = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_layers_in_geo_file_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_layers_in_geo_file failed: unknown result';\n};\nOmniSciClient.prototype.query_get_outer_fragment_count = function (session, query, callback) {\n  this.send_query_get_outer_fragment_count(session, query, callback);\n  if (!callback) {\n    return this.recv_query_get_outer_fragment_count();\n  }\n};\n\nOmniSciClient.prototype.send_query_get_outer_fragment_count = function (session, query, callback) {\n  this.output.writeMessageBegin('query_get_outer_fragment_count', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_query_get_outer_fragment_count_args();\n  args.session = session;\n  args.query = query;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_query_get_outer_fragment_count();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_query_get_outer_fragment_count = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_query_get_outer_fragment_count_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'query_get_outer_fragment_count failed: unknown result';\n};\nOmniSciClient.prototype.check_table_consistency = function (session, table_id, callback) {\n  this.send_check_table_consistency(session, table_id, callback);\n  if (!callback) {\n    return this.recv_check_table_consistency();\n  }\n};\n\nOmniSciClient.prototype.send_check_table_consistency = function (session, table_id, callback) {\n  this.output.writeMessageBegin('check_table_consistency', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_check_table_consistency_args();\n  args.session = session;\n  args.table_id = table_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_check_table_consistency();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_check_table_consistency = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_check_table_consistency_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'check_table_consistency failed: unknown result';\n};\nOmniSciClient.prototype.start_query = function (leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices, callback) {\n  this.send_start_query(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices, callback);\n  if (!callback) {\n    return this.recv_start_query();\n  }\n};\n\nOmniSciClient.prototype.send_start_query = function (leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices, callback) {\n  this.output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_start_query_args();\n  args.leaf_session = leaf_session;\n  args.parent_session = parent_session;\n  args.query_ra = query_ra;\n  args.just_explain = just_explain;\n  args.outer_fragment_indices = outer_fragment_indices;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_start_query();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_start_query = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_start_query_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'start_query failed: unknown result';\n};\nOmniSciClient.prototype.execute_query_step = function (pending_query, subquery_id, callback) {\n  this.send_execute_query_step(pending_query, subquery_id, callback);\n  if (!callback) {\n    return this.recv_execute_query_step();\n  }\n};\n\nOmniSciClient.prototype.send_execute_query_step = function (pending_query, subquery_id, callback) {\n  this.output.writeMessageBegin('execute_query_step', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_execute_query_step_args();\n  args.pending_query = pending_query;\n  args.subquery_id = subquery_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_execute_query_step();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_execute_query_step = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_execute_query_step_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'execute_query_step failed: unknown result';\n};\nOmniSciClient.prototype.broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result, callback) {\n  this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result, callback);\n  if (!callback) {\n    this.recv_broadcast_serialized_rows();\n  }\n};\n\nOmniSciClient.prototype.send_broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result, callback) {\n  this.output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_broadcast_serialized_rows_args();\n  args.serialized_rows = serialized_rows;\n  args.row_desc = row_desc;\n  args.query_id = query_id;\n  args.subquery_id = subquery_id;\n  args.is_final_subquery_result = is_final_subquery_result;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_broadcast_serialized_rows();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_broadcast_serialized_rows = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_broadcast_serialized_rows_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.start_render_query = function (session, widget_id, node_idx, vega_json, callback) {\n  this.send_start_render_query(session, widget_id, node_idx, vega_json, callback);\n  if (!callback) {\n    return this.recv_start_render_query();\n  }\n};\n\nOmniSciClient.prototype.send_start_render_query = function (session, widget_id, node_idx, vega_json, callback) {\n  this.output.writeMessageBegin('start_render_query', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_start_render_query_args();\n  args.session = session;\n  args.widget_id = widget_id;\n  args.node_idx = node_idx;\n  args.vega_json = vega_json;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_start_render_query();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_start_render_query = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_start_render_query_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'start_render_query failed: unknown result';\n};\nOmniSciClient.prototype.execute_next_render_step = function (pending_render, merged_data, callback) {\n  this.send_execute_next_render_step(pending_render, merged_data, callback);\n  if (!callback) {\n    return this.recv_execute_next_render_step();\n  }\n};\n\nOmniSciClient.prototype.send_execute_next_render_step = function (pending_render, merged_data, callback) {\n  this.output.writeMessageBegin('execute_next_render_step', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_execute_next_render_step_args();\n  args.pending_render = pending_render;\n  args.merged_data = merged_data;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_execute_next_render_step();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_execute_next_render_step = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_execute_next_render_step_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'execute_next_render_step failed: unknown result';\n};\nOmniSciClient.prototype.insert_data = function (session, insert_data, callback) {\n  this.send_insert_data(session, insert_data, callback);\n  if (!callback) {\n    this.recv_insert_data();\n  }\n};\n\nOmniSciClient.prototype.send_insert_data = function (session, insert_data, callback) {\n  this.output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_insert_data_args();\n  args.session = session;\n  args.insert_data = insert_data;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_insert_data();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_insert_data = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_insert_data_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.checkpoint = function (session, table_id, callback) {\n  this.send_checkpoint(session, table_id, callback);\n  if (!callback) {\n    this.recv_checkpoint();\n  }\n};\n\nOmniSciClient.prototype.send_checkpoint = function (session, table_id, callback) {\n  this.output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_checkpoint_args();\n  args.session = session;\n  args.table_id = table_id;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_checkpoint();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_checkpoint = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_checkpoint_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\nOmniSciClient.prototype.get_roles = function (session, callback) {\n  this.send_get_roles(session, callback);\n  if (!callback) {\n    return this.recv_get_roles();\n  }\n};\n\nOmniSciClient.prototype.send_get_roles = function (session, callback) {\n  this.output.writeMessageBegin('get_roles', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_roles_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_roles();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_roles = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_roles_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_roles failed: unknown result';\n};\nOmniSciClient.prototype.get_db_objects_for_grantee = function (session, roleName, callback) {\n  this.send_get_db_objects_for_grantee(session, roleName, callback);\n  if (!callback) {\n    return this.recv_get_db_objects_for_grantee();\n  }\n};\n\nOmniSciClient.prototype.send_get_db_objects_for_grantee = function (session, roleName, callback) {\n  this.output.writeMessageBegin('get_db_objects_for_grantee', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_db_objects_for_grantee_args();\n  args.session = session;\n  args.roleName = roleName;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_db_objects_for_grantee();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_db_objects_for_grantee = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_db_objects_for_grantee_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_db_objects_for_grantee failed: unknown result';\n};\nOmniSciClient.prototype.get_db_object_privs = function (session, objectName, type, callback) {\n  this.send_get_db_object_privs(session, objectName, type, callback);\n  if (!callback) {\n    return this.recv_get_db_object_privs();\n  }\n};\n\nOmniSciClient.prototype.send_get_db_object_privs = function (session, objectName, type, callback) {\n  this.output.writeMessageBegin('get_db_object_privs', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_db_object_privs_args();\n  args.session = session;\n  args.objectName = objectName;\n  args.type = type;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_db_object_privs();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_db_object_privs = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_db_object_privs_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_db_object_privs failed: unknown result';\n};\nOmniSciClient.prototype.get_all_roles_for_user = function (session, userName, callback) {\n  this.send_get_all_roles_for_user(session, userName, callback);\n  if (!callback) {\n    return this.recv_get_all_roles_for_user();\n  }\n};\n\nOmniSciClient.prototype.send_get_all_roles_for_user = function (session, userName, callback) {\n  this.output.writeMessageBegin('get_all_roles_for_user', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_all_roles_for_user_args();\n  args.session = session;\n  args.userName = userName;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_all_roles_for_user();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_all_roles_for_user = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_all_roles_for_user_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_all_roles_for_user failed: unknown result';\n};\nOmniSciClient.prototype.has_role = function (session, granteeName, roleName, callback) {\n  this.send_has_role(session, granteeName, roleName, callback);\n  if (!callback) {\n    return this.recv_has_role();\n  }\n};\n\nOmniSciClient.prototype.send_has_role = function (session, granteeName, roleName, callback) {\n  this.output.writeMessageBegin('has_role', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_has_role_args();\n  args.session = session;\n  args.granteeName = granteeName;\n  args.roleName = roleName;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_has_role();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_has_role = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_has_role_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'has_role failed: unknown result';\n};\nOmniSciClient.prototype.has_object_privilege = function (session, granteeName, ObjectName, objectType, permissions, callback) {\n  this.send_has_object_privilege(session, granteeName, ObjectName, objectType, permissions, callback);\n  if (!callback) {\n    return this.recv_has_object_privilege();\n  }\n};\n\nOmniSciClient.prototype.send_has_object_privilege = function (session, granteeName, ObjectName, objectType, permissions, callback) {\n  this.output.writeMessageBegin('has_object_privilege', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_has_object_privilege_args();\n  args.session = session;\n  args.granteeName = granteeName;\n  args.ObjectName = ObjectName;\n  args.objectType = objectType;\n  args.permissions = permissions;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_has_object_privilege();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_has_object_privilege = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_has_object_privilege_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'has_object_privilege failed: unknown result';\n};\nOmniSciClient.prototype.set_license_key = function (session, key, nonce, callback) {\n  this.send_set_license_key(session, key, nonce, callback);\n  if (!callback) {\n    return this.recv_set_license_key();\n  }\n};\n\nOmniSciClient.prototype.send_set_license_key = function (session, key, nonce, callback) {\n  this.output.writeMessageBegin('set_license_key', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_set_license_key_args();\n  args.session = session;\n  args.key = key;\n  args.nonce = nonce;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_set_license_key();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_set_license_key = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_license_key_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'set_license_key failed: unknown result';\n};\nOmniSciClient.prototype.get_license_claims = function (session, nonce, callback) {\n  this.send_get_license_claims(session, nonce, callback);\n  if (!callback) {\n    return this.recv_get_license_claims();\n  }\n};\n\nOmniSciClient.prototype.send_get_license_claims = function (session, nonce, callback) {\n  this.output.writeMessageBegin('get_license_claims', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_license_claims_args();\n  args.session = session;\n  args.nonce = nonce;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_license_claims();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_license_claims = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_license_claims_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_license_claims failed: unknown result';\n};\nOmniSciClient.prototype.get_device_parameters = function (session, callback) {\n  this.send_get_device_parameters(session, callback);\n  if (!callback) {\n    return this.recv_get_device_parameters();\n  }\n};\n\nOmniSciClient.prototype.send_get_device_parameters = function (session, callback) {\n  this.output.writeMessageBegin('get_device_parameters', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_get_device_parameters_args();\n  args.session = session;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_get_device_parameters();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_get_device_parameters = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_device_parameters_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_device_parameters failed: unknown result';\n};\nOmniSciClient.prototype.register_runtime_extension_functions = function (session, udfs, udtfs, device_ir_map, callback) {\n  this.send_register_runtime_extension_functions(session, udfs, udtfs, device_ir_map, callback);\n  if (!callback) {\n    this.recv_register_runtime_extension_functions();\n  }\n};\n\nOmniSciClient.prototype.send_register_runtime_extension_functions = function (session, udfs, udtfs, device_ir_map, callback) {\n  this.output.writeMessageBegin('register_runtime_extension_functions', Thrift.MessageType.CALL, this.seqid);\n  var args = new OmniSci_register_runtime_extension_functions_args();\n  args.session = session;\n  args.udfs = udfs;\n  args.udtfs = udtfs;\n  args.device_ir_map = device_ir_map;\n  args.write(this.output);\n  this.output.writeMessageEnd();\n  if (callback) {\n    var self = this;\n    this.output.getTransport().flush(true, function () {\n      var result = null;\n      try {\n        result = self.recv_register_runtime_extension_functions();\n      } catch (e) {\n        result = e;\n      }\n      callback(result);\n    });\n  } else {\n    return this.output.getTransport().flush();\n  }\n};\n\nOmniSciClient.prototype.recv_register_runtime_extension_functions = function () {\n  var ret = this.input.readMessageBegin();\n  var fname = ret.fname;\n  var mtype = ret.mtype;\n  var rseqid = ret.rseqid;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_register_runtime_extension_functions_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};"

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(13))

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.10.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\n\nwindow.TCompletionHintType = {\n  'COLUMN': 0,\n  'TABLE': 1,\n  'VIEW': 2,\n  'SCHEMA': 3,\n  'CATALOG': 4,\n  'REPOSITORY': 5,\n  'FUNCTION': 6,\n  'KEYWORD': 7\n};\nwindow.TCompletionHint = function (args) {\n  this.type = null;\n  this.hints = null;\n  this.replaced = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.hints !== undefined && args.hints !== null) {\n      this.hints = Thrift.copyList(args.hints, [null]);\n    }\n    if (args.replaced !== undefined && args.replaced !== null) {\n      this.replaced = args.replaced;\n    }\n  }\n};\nTCompletionHint.prototype = {};\nTCompletionHint.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var fname = ret.fname;\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          var _size0 = 0;\n          var _rtmp34;\n          this.hints = [];\n          var _etype3 = 0;\n          _rtmp34 = input.readListBegin();\n          _etype3 = _rtmp34.etype;\n          _size0 = _rtmp34.size;\n          for (var _i5 = 0; _i5 < _size0; ++_i5) {\n            var elem6 = null;\n            elem6 = input.readString().value;\n            this.hints.push(elem6);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.replaced = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCompletionHint.prototype.write = function (output) {\n  output.writeStructBegin('TCompletionHint');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.hints !== null && this.hints !== undefined) {\n    output.writeFieldBegin('hints', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRING, this.hints.length);\n    for (var iter7 in this.hints) {\n      if (this.hints.hasOwnProperty(iter7)) {\n        iter7 = this.hints[iter7];\n        output.writeString(iter7);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.replaced !== null && this.replaced !== undefined) {\n    output.writeFieldBegin('replaced', Thrift.Type.STRING, 3);\n    output.writeString(this.replaced);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _helpers = __webpack_require__(16);

	var helpers = _interopRequireWildcard(_helpers);

	var _ramda = __webpack_require__(17);

	var _ramda2 = _interopRequireDefault(_ramda);

	var _eventemitter = __webpack_require__(19);

	var _eventemitter2 = _interopRequireDefault(_eventemitter);

	var _mapdClientV = __webpack_require__(20);

	var _mapdClientV2 = _interopRequireDefault(_mapdClientV);

	var _processQueryResults = __webpack_require__(55);

	var _processQueryResults2 = _interopRequireDefault(_processQueryResults);

	var _apacheArrow = __webpack_require__(58);

	var _apacheArrow2 = _interopRequireDefault(_apacheArrow);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* global TCreateParams: false, TDashboardPermissions: false, TDBObjectType: false, TDBObjectPermissions: false, TDatabasePermissions: false */

	var _ref = isNodeRuntime() && __webpack_require__(50) || window,
	    TDatumType = _ref.TDatumType,
	    TEncodingType = _ref.TEncodingType,
	    TDeviceType = _ref.TDeviceType; // eslint-disable-line global-require


	var _ref2 = isNodeRuntime() && __webpack_require__(54) || window,
	    TArrowTransport = _ref2.TArrowTransport,
	    TPixel = _ref2.TPixel,
	    TOmniSciException = _ref2.TOmniSciException; // eslint-disable-line global-require


	var MapDThrift = isNodeRuntime() && __webpack_require__(22); // eslint-disable-line global-require
	var Thrift = isNodeRuntime() && __webpack_require__(23) || window.Thrift; // eslint-disable-line global-require
	var thriftWrapper = Thrift;
	var parseUrl = isNodeRuntime() && __webpack_require__(161).parse; // eslint-disable-line global-require
	if (isNodeRuntime()) {
	  // Because browser Thrift and Node Thrift are exposed slightly differently.
	  Thrift = Thrift.Thrift;
	  Thrift.Transport = thriftWrapper.TBufferedTransport;
	  Thrift.Protocol = thriftWrapper.TJSONProtocol;
	}

	var COMPRESSION_LEVEL_DEFAULT = 3;

	function arrayify(maybeArray) {
	  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];
	}

	function isNodeRuntime() {
	  return typeof window === "undefined";
	}

	var MapdCon = function () {
	  function MapdCon() {
	    var _this = this;

	    _classCallCheck(this, MapdCon);

	    this.connectAsync = function () {
	      return new Promise(function (resolve, reject) {
	        _this.connect(function (error, con) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(con);
	          }
	        });
	      });
	    };

	    this.updateQueryTimes = function (conId, queryId, estimatedQueryTime, execution_time_ms) {
	      _this.queryTimes[queryId] = execution_time_ms;
	    };

	    this.events = new _eventemitter2.default();
	    this.EVENT_NAMES = {
	      ERROR: "error",
	      METHOD_CALLED: "method-called"

	      // ** Method wrappers **

	    };

	    this.handleErrors = function (method) {
	      return function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        return new Promise(function (resolve, reject) {
	          var success = function success(result) {
	            return resolve(result);
	          };
	          var failure = function failure(error) {
	            _this.events.emit(_this.EVENT_NAMES.ERROR, error);
	            return reject(error);
	          };

	          var promise = method.apply(_this, args);

	          promise.then(success).catch(function (error) {
	            return failure(error);
	          });
	        });
	      };
	    };

	    this.promisifyThriftMethodNode = function (client, sessionId, methodName, args) {
	      return new Promise(function (resolve, reject) {
	        client[methodName].apply(client, [sessionId].concat(args, function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        }));
	      });
	    };

	    this.promisifyThriftMethodBrowser = function (client, sessionId, methodName, args) {
	      return new Promise(function (resolve, reject) {
	        _this.events.emit(_this.EVENT_NAMES.METHOD_CALLED, methodName);
	        client[methodName].apply(client, [sessionId].concat(args, function (result) {
	          if (result instanceof Error) {
	            reject(result);
	          } else {
	            resolve(result);
	          }
	        }));
	      });
	    };

	    this.promisifyThriftMethod = isNodeRuntime() ? this.promisifyThriftMethodNode : this.promisifyThriftMethodBrowser;
	    this.overSingleClient = "SINGLE_CLIENT";
	    this.overAllClients = "ALL_CLIENTS";

	    this.wrapThrift = function (methodName, overClients, processArgs) {
	      return function () {
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        if (_this._sessionId) {
	          var processedArgs = processArgs(args);

	          if (overClients === _this.overSingleClient) {
	            return _this.promisifyThriftMethod(_this._client[0], _this._sessionId[0], methodName, processedArgs);
	          } else {
	            return Promise.all(_this._client.map(function (client, index) {
	              return _this.promisifyThriftMethod(client, _this._sessionId[index], methodName, processedArgs);
	            }));
	          }
	        } else {
	          return Promise.reject(new Error("You are not connected to a server. Try running the connect method first."));
	        }
	      };
	    };

	    this.getStatus = function (callback) {
	      _this._client[0].get_status(_this._sessionId[0], callback);
	    };

	    this.getStatusAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getStatus(function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    });

	    this.getHardwareInfo = function (callback) {
	      _this._client[0].get_hardware_info(_this._sessionId[0], callback);
	    };

	    this.getHardwareInfoAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getHardwareInfo(function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    });
	    this.getFirstGeoFileInArchiveAsync = this.handleErrors(this.wrapThrift("get_first_geo_file_in_archive", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getUsersAsync = this.handleErrors(this.wrapThrift("get_users", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.importTableStatusAsync = this.handleErrors(this.wrapThrift("import_table_status", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getRolesAsync = this.handleErrors(this.wrapThrift("get_roles", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getDashboardsAsync = this.handleErrors(this.wrapThrift("get_dashboards", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getDashboardAsync = this.handleErrors(this.wrapThrift("get_dashboard", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.createDashboardAsync = this.handleErrors(this.wrapThrift("create_dashboard", this.overAllClients, function (args) {
	      return args;
	    }));
	    this.replaceDashboardAsync = this.handleErrors(this.wrapThrift("replace_dashboard", this.overAllClients, function (args) {
	      return args;
	    }));
	    this.deleteDashboardAsync = this.handleErrors(this.wrapThrift("delete_dashboard", this.overAllClients, function (args) {
	      return args;
	    }));
	    this.deleteDashboardsAsync = this.handleErrors(this.wrapThrift("delete_dashboards", this.overAllClients, function (args) {
	      return args;
	    }));
	    this.shareDashboardAsync = this.handleErrors(this.wrapThrift("share_dashboard", this.overAllClients, function (_ref3) {
	      var _ref4 = _slicedToArray(_ref3, 4),
	          dashboardId = _ref4[0],
	          groups = _ref4[1],
	          objects = _ref4[2],
	          permissions = _ref4[3];

	      return [dashboardId, groups, objects, new TDashboardPermissions(permissions)];
	    }));
	    this.shareDashboardsAsync = this.handleErrors(this.wrapThrift("share_dashboards", this.overAllClients, function (_ref5) {
	      var _ref6 = _slicedToArray(_ref5, 3),
	          dashboardIds = _ref6[0],
	          groups = _ref6[1],
	          permissions = _ref6[2];

	      return [dashboardIds, groups, new TDashboardPermissions(permissions)];
	    }));
	    this.unshareDashboardAsync = this.handleErrors(this.wrapThrift("unshare_dashboard", this.overAllClients, function (_ref7) {
	      var _ref8 = _slicedToArray(_ref7, 4),
	          dashboardId = _ref8[0],
	          groups = _ref8[1],
	          objects = _ref8[2],
	          permissions = _ref8[3];

	      return [dashboardId, groups, objects, new TDashboardPermissions(permissions)];
	    }));
	    this.unshareDashboardsAsync = this.handleErrors(this.wrapThrift("unshare_dashboards", this.overAllClients, function (_ref9) {
	      var _ref10 = _slicedToArray(_ref9, 3),
	          dashboardIds = _ref10[0],
	          groups = _ref10[1],
	          permissions = _ref10[2];

	      return [dashboardIds, groups, new TDashboardPermissions(permissions)];
	    }));
	    this.getDashboardGranteesAsync = this.handleErrors(this.wrapThrift("get_dashboard_grantees", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getDbObjectsForGranteeAsync = this.handleErrors(this.wrapThrift("get_db_objects_for_grantee", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getDbObjectPrivsAsync = this.handleErrors(this.wrapThrift("get_db_object_privs", this.overSingleClient, function (_ref11) {
	      var _ref12 = _slicedToArray(_ref11, 2),
	          objectName = _ref12[0],
	          type = _ref12[1];

	      return [objectName, TDBObjectType[type]];
	    }));
	    this.getAllRolesForUserAsync = this.handleErrors(this.wrapThrift("get_all_roles_for_user", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.hasObjectPrivilegesAsync = this.handleErrors(this.wrapThrift("has_object_privilege", this.overSingleClient, function (_ref13) {
	      var _ref14 = _slicedToArray(_ref13, 4),
	          granteeName = _ref14[0],
	          objectName = _ref14[1],
	          objectType = _ref14[2],
	          permissions = _ref14[3];

	      return [granteeName, objectName, objectType, permissions];
	    }));

	    this.hasDbPrivilegesAsync = function (granteeName, dbName, dbPrivs) {
	      return _this.hasObjectPrivilegesAsync(granteeName, dbName, TDBObjectType.DatabaseDBObjectType, new TDBObjectPermissions({
	        database_permissions_: new TDatabasePermissions(dbPrivs)
	      }));
	    };

	    this.getSessionInfoAsync = this.handleErrors(this.wrapThrift("get_session_info", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.detectColumnTypesAsync = this.handleErrors(function (fileName, copyParams) {
	      return new Promise(function (resolve, reject) {
	        _this.detectColumnTypes.bind(_this, fileName, copyParams)(function (err, res) {
	          if (err) {
	            reject(err);
	          } else {
	            _this.importerRowDesc = res.row_set.row_desc;
	            resolve(res);
	          }
	        });
	      });
	    });
	    this.queryCache = {};
	    this.queryCacheTransient = true;

	    this.setQueryCacheTransient = function (value) {
	      if (value) {
	        // Reset and clear out any nontransient entries
	        _this.queryCache = {};
	      }
	      _this.queryCacheTransient = value;
	    };

	    this.clonePromise = function (promise) {
	      return new Promise(function (resolve, reject) {
	        promise.then(function (result) {
	          resolve((0, _ramda2.default)(result));
	        }).catch(function (error) {
	          reject(error);
	        });
	      });
	    };

	    this.queryAsync = this.handleErrors(function (query, options) {
	      var cacheEntry = _this.queryCache[query];

	      if (cacheEntry) {
	        return _this.clonePromise(cacheEntry);
	      } else {
	        var queryPromise = new Promise(function (resolve, reject) {
	          _this.events.emit(_this.EVENT_NAMES.METHOD_CALLED, "sql_execute");
	          _this.query(query, options, function (error, result) {
	            if (_this.queryCacheTransient) {
	              delete _this.queryCache[query];
	            }

	            if (error) {
	              reject(error);
	            } else {
	              resolve(result);
	            }
	          });
	        });

	        _this.queryCache[query] = queryPromise;

	        return _this.clonePromise(queryPromise);
	      }
	    });
	    this.queryDFAsync = this.handleErrors(function (query, options) {
	      var cacheEntry = _this.queryCache[query];

	      if (cacheEntry) {
	        return _this.clonePromise(cacheEntry);
	      } else {
	        var queryPromise = new Promise(function (resolve, reject) {
	          _this.events.emit(_this.EVENT_NAMES.METHOD_CALLED, "sql_execute_df");
	          _this.queryDF(query, options, function (error, result) {
	            if (_this.queryCacheTransient) {
	              delete _this.queryCache[query];
	            }

	            if (error) {
	              reject(error);
	            } else {
	              resolve(result);
	            }
	          });
	        });

	        _this.queryCache[query] = queryPromise;

	        return _this.clonePromise(queryPromise);
	      }
	    });
	    this.validateQuery = this.handleErrors(function (query) {
	      return new Promise(function (resolve, reject) {
	        _this._client[0].sql_validate(_this._sessionId[0], query, function (error, fields) {
	          if (error) {
	            reject(error);
	          } else {
	            var rowDict = fields.reduce(function (accum, value) {
	              accum[value.col_name] = value;
	              return accum;
	            }, {});
	            resolve(_this.convertFromThriftTypes(rowDict));
	          }
	        });
	      });
	    });
	    this.getTablesAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getTables.bind(_this)(function (error, tables) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(tables);
	          }
	        });
	      });
	    });
	    this.getTablesWithMetaAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getTablesWithMeta.bind(_this)(function (error, tables) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(tables);
	          }
	        });
	      });
	    });
	    this.getTablesMetaAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getTablesMeta.bind(_this)(function (error, tables) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(tables);
	          }
	        });
	      });
	    });
	    this.getFieldsAsync = this.handleErrors(function (tableName) {
	      return new Promise(function (resolve, reject) {
	        _this.getFields(tableName, function (error, fields) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(fields);
	          }
	        });
	      });
	    });
	    this.createTableAsync = this.handleErrors(function (tableName, rowDescObj, tableType, createParams) {
	      return new Promise(function (resolve, reject) {
	        _this.createTable(tableName, rowDescObj, tableType, createParams, function (err) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve();
	          }
	        });
	      });
	    });
	    this.importTableAsync = this.handleErrors(this.importTableAsyncWrapper(false));
	    this.importTableGeoAsync = this.handleErrors(this.importTableAsyncWrapper(true));
	    this.renderVegaAsync = this.handleErrors(function (widgetid, vega, options) {
	      return new Promise(function (resolve, reject) {
	        _this.renderVega(widgetid, vega, options, function (error, result) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    });
	    this.getResultRowForPixelAsync = this.handleErrors(function (widgetId, pixel, tableColNamesMap) {
	      var pixelRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
	      return new Promise(function (resolve, reject) {
	        _this.getResultRowForPixel(widgetId, pixel, tableColNamesMap, pixelRadius, function (error, result) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    });

	    this._host = null;
	    this._user = null;
	    this._password = null;
	    this._port = null;
	    this._dbName = null;
	    this._client = null;
	    this._sessionId = null;
	    this._protocol = null;
	    this._disableAutoReconnect = false;
	    this._datumEnum = {};
	    this._logging = false;
	    this._platform = "mapd";
	    this._nonce = 0;
	    this._balanceStrategy = "adaptive";
	    this._numConnections = 0;
	    this._lastRenderCon = 0;
	    this.queryTimes = {};
	    this.serverQueueTimes = null;
	    this.serverPingTimes = null;
	    this.pingCount = null;
	    this.DEFAULT_QUERY_TIME = 50;
	    this.NUM_PINGS_PER_SERVER = 4;
	    this.importerRowDesc = null;

	    // invoke initialization methods
	    this.invertDatumTypes();

	    this.processResults = function () {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var result = arguments[1];
	      var error = arguments[2];
	      var callback = arguments[3];

	      if (error) {
	        if (_this._logging && options.query) {
	          console.error(options.query, "\n", error);
	        }
	        callback(error);
	      } else {
	        var processor = (0, _processQueryResults2.default)(_this._logging, _this.updateQueryTimes);
	        var processResultsObject = processor(options, _this._datumEnum, result, callback);
	        return processResultsObject;
	      }
	    };

	    // return this to allow chaining off of instantiation
	    return this;
	  }

	  _createClass(MapdCon, [{
	    key: "xhrWithCredentials",
	    value: function xhrWithCredentials(enabled) {
	      Thrift.xhrWithCredentials = enabled;
	    }

	    /**
	     * Initializes the connector for use. This is similar to `connect()`, but stops short of
	     * actually connecting to the server.
	     *
	     * @return {MapdCon} Object.
	     */

	  }, {
	    key: "initClients",
	    value: function initClients() {
	      var allAreArrays = Array.isArray(this._host) && Array.isArray(this._port) && Array.isArray(this._dbName);
	      if (!allAreArrays) {
	        throw new Error("Host, port, and dbName must be arrays.");
	      }

	      this._client = [];
	      this._sessionId = [];

	      if (!this._host[0]) {
	        throw new Error("Please enter a host name.");
	      } else if (!this._port[0]) {
	        throw new Error("Please enter a port.");
	      }

	      // now check to see if length of all arrays are the same and > 0
	      var hostLength = this._host.length;
	      if (hostLength < 1) {
	        throw new Error("Must have at least one server to connect to.");
	      }
	      if (hostLength !== this._port.length) {
	        throw new Error("Array connection parameters must be of equal length.");
	      }

	      if (!this._protocol) {
	        this._protocol = this._host.map(function () {
	          return window.location.protocol.replace(":", "");
	        });
	      }

	      var transportUrls = this.getEndpoints();
	      var clients = [];

	      for (var h = 0; h < hostLength; h++) {
	        var client = null;

	        if (isNodeRuntime()) {
	          var _parseUrl = parseUrl(transportUrls[h]),
	              protocol = _parseUrl.protocol,
	              hostname = _parseUrl.hostname,
	              port = _parseUrl.port;

	          var connection = thriftWrapper.createHttpConnection(hostname, port, {
	            transport: thriftWrapper.TBufferedTransport,
	            protocol: thriftWrapper.TJSONProtocol,
	            path: "/",
	            headers: { Connection: "close" },
	            https: protocol === "https:"
	          });
	          connection.on("error", console.error); // eslint-disable-line no-console
	          client = thriftWrapper.createClient(MapDThrift, connection);
	          resetThriftClientOnArgumentErrorForMethods(this, client, ["connect", "createTableAsync", "dbName", "detectColumnTypesAsync", "disconnect", "getCompletionHintsAsync", "getFields", "getDashboardAsync", "getDashboardsAsync", "getResultRowForPixel", "getStatusAsync", "getTablesAsync", "getTablesWithMetaAsync", "host", "importTableAsync", "importTableGeoAsync", "logging", "password", "port", "protocol", "query", "queryDF", "renderVega", "sessionId", "user", "validateQuery"]);
	          clients.push(client);
	        } else {
	          var thriftTransport = new Thrift.Transport(transportUrls[h]);
	          var thriftProtocol = new Thrift.Protocol(thriftTransport);
	          clients.push(new _mapdClientV2.default(thriftProtocol));
	        }
	      }
	      this._client = clients;
	      this._numConnections = this._client.length;
	      return this;
	    }

	    /**
	     * Create a connection to the MapD server, generating a client and session ID.
	     * @param {Function} callback A callback that takes `(err, success)` as its signature.  Returns con singleton if successful.
	     * @return {MapdCon} Object.
	     *
	     * @example <caption>Connect to a MapD server:</caption>
	     * var con = new MapdCon()
	     *   .host('localhost')
	     *   .port('8080')
	     *   .dbName('myDatabase')
	     *   .user('foo')
	     *   .password('bar')
	     *   .connect((err, con) => console.log(con.sessionId()));
	     *
	     *   // ["om9E9Ujgbhl6wIzWgLENncjWsaXRDYLy"]
	     */

	  }, {
	    key: "connect",
	    value: function connect(callback) {
	      var _this2 = this;

	      if (!Array.isArray(this._user) || !Array.isArray(this._password)) {
	        return callback("Username and password must be arrays.");
	      }

	      if (!this._dbName[0]) {
	        throw new Error("Please enter a database.");
	      } else if (!this._user[0]) {
	        return callback("Please enter a username.");
	      } else if (!this._password[0]) {
	        return callback("Please enter a password.");
	      }

	      // now check to see if length of all arrays are the same and > 0
	      var hostLength = this._host.length;
	      if (hostLength < 1) {
	        return callback("Must have at least one server to connect to.");
	      }
	      if (hostLength !== this._port.length || hostLength !== this._user.length || hostLength !== this._password.length || hostLength !== this._dbName.length) {
	        return callback("Array connection parameters must be of equal length.");
	      }

	      var clients = [];
	      // eslint-disable-next-line no-restricted-syntax
	      try {
	        this.initClients();
	        clients = this._client;
	        // Reset the client property, so we can add only the ones that we can connect to below
	        this._client = [];
	      } catch (e) {
	        return callback(e.message);
	      }

	      var _loop = function _loop(h) {
	        var client = clients[h];

	        client.connect(_this2._user[h], _this2._password[h], _this2._dbName[h], function (error, sessionId) {
	          if (error) {
	            callback(error);
	            return;
	          }
	          _this2._client.push(client);
	          _this2._sessionId.push(sessionId);
	          callback(null, _this2);
	        });
	      };

	      for (var h = 0; h < clients.length; h++) {
	        _loop(h);
	      }

	      return this;
	    }
	  }, {
	    key: "convertFromThriftTypes",
	    value: function convertFromThriftTypes(fields) {
	      var fieldsArray = [];
	      // silly to change this from map to array
	      // - then later it turns back to map
	      for (var key in fields) {
	        if (fields.hasOwnProperty(key)) {
	          fieldsArray.push({
	            name: key,
	            type: this._datumEnum[fields[key].col_type.type],
	            precision: fields[key].col_type.precision,
	            is_array: fields[key].col_type.is_array,
	            is_dict: fields[key].col_type.encoding === TEncodingType.DICT // eslint-disable-line no-undef
	          });
	        }
	      }
	      return fieldsArray;
	    }

	    /**
	     * Disconnect from the server and then clear the client and session values.
	     * @param {Function} callback A callback that takes `(err, success)` as its signature.  Returns con singleton if successful.
	     * @return {MapdCon} Object.
	     *
	     * @example <caption>Disconnect from the server:</caption>
	     *
	     * con.sessionId() // ["om9E9Ujgbhl6wIzWgLENncjWsaXRDYLy"]
	     * con.disconnect((err, con) => console.log(err, con))
	     * con.sessionId() === null;
	     */

	  }, {
	    key: "disconnect",
	    value: function disconnect(callback) {
	      var _this3 = this;

	      if (this._sessionId !== null) {
	        for (var c = 0; c < this._client.length; c++) {
	          this._client[c].disconnect(this._sessionId[c], function (error) {
	            if (error && !_this3.isTimeoutError(error)) {
	              return callback(error, _this3);
	            }

	            _this3._sessionId = null;
	            _this3._client = null;
	            _this3._numConnections = 0;
	            _this3.serverPingTimes = null;

	            return callback(null, _this3);
	          });
	        }
	      }
	      return this;
	    }
	  }, {
	    key: "removeConnection",
	    value: function removeConnection(conId) {
	      if (conId < 0 || conId >= this.numConnections) {
	        var err = {
	          msg: "Remove connection id invalid"
	        };
	        throw err;
	      }
	      this._client.splice(conId, 1);
	      this._sessionId.splice(conId, 1);
	      this._numConnections--;
	    }

	    // Wrap a Thrift method to perform session check and mapping over
	    // all clients (for mutating methods)


	    // ** Client methods **

	    /**
	     * Get the status of the server as a {@link TServerStatus} object.
	     * This includes the server version number, whether the server is read-only,
	     * and whether backend rendering is enabled.
	     * @return {Promise.<Object>} An object that contains information about the server status.
	     *
	     * @example <caption>Get the server status:</caption>
	     *
	     * con.getStatusAsync().then((result) => console.log(result))
	     * // [{
	     * //   "read_only": false,
	     * //   "version": "3.0.0dev-20170503-40e2de3",
	     * //   "rendering_enabled": true,
	     * //   "start_time": 1493840131
	     * // }]
	     */

	    /**
	     * Get information about the server hardware:
	     * - Number of GPUs.
	     * - Number of GPUs allocated to MapD.
	     * - Start GPU.
	     * - Number of SMs, SMXs, or CUs (streaming multiprocessors).
	     * - Clock frequency of each GPU.
	     * - Physical memory of each GPU.
	     * - Compute capability of each GPU.
	     * @return {Promise.<Object>} An object that contains hardware information.
	     *
	     * @example <caption>Get server hardware information:</caption>
	     *
	     * con.getHardwareInfoAsync().then((result) => console.log(result))
	     * {
	     *   "hardware_info": [{
	     *    "num_gpu_hw": 2,
	     *      "num_cpu_hw": 12,
	     *      "num_gpu_allocated": 2,
	     *      "start_gpu": 0,
	     *      "host_name": "",
	     *      "gpu_info": [{
	     *          "num_sm": 28,
	     *          "clock_frequency_kHz": 1531000,
	     *          "memory": 12781682688,
	     *          "compute_capability_major": 6,
	     *          "compute_capability_minor": 1
	     *      }, {
	     *          "num_sm": 28,
	     *          "clock_frequency_kHz": 1531000,
	     *          "memory": 12782075904,
	     *          "compute_capability_major": 6,
	     *          "compute_capability_minor": 1
	     *      }]
	     *   }]
	     * }
	     */

	    /**
	     * Get the first geo file in an archive, if present, to determine if the archive should be treated as geo.
	     * @param {String} archivePath - The base filename of the archive.
	     * @param {TCopyParams} copyParams See {@link TCopyParams}
	     * @returns {Promise.<String>} Full path to the located geo file; otherwise, to the original archivePath.
	     *
	     * @example <caption>Get the first geo file in an archive:</caption>
	     *
	     * con.getFirstGeoFileInArchiveAsync('archive.zip', {}).then(res => console.log(res))
	     */


	    /**
	     * Get a list of all users on the database for this connection.
	     * @returns {Promise.<Array>} A list of all users (strings).
	     *
	     * @example <caption>Get a list of all users:</caption>
	     *
	     * con.getUsersAsync().then(res => console.log(res))
	     */


	    /**
	     * Get a list of all roles on the database for this connection.
	     * @returns {Promise.<Array>} A list of all roles (strings).
	     *
	     * @example <caption>Get a list of all roles:</caption>
	     *
	     * con.getRolesAsync().then(res => console.log(res))
	     */


	    /**
	     * Get a list of all dashboards on the database for this connection.
	     * @returns {Promise.<Array<TDashboard>>} A list of all dashboards (Dashboard objects).
	     *
	     * @example <caption>Get a list of all dashboards:</caption>
	     *
	     * con.getDashboardsAsync().then(res => console.log(res))
	     */


	    /**
	     * Get a single dashboard.
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @returns {Promise.<TDashboard>} The dashboard (Dashboard object).
	     *
	     * @example <caption>Get a dashboard:</caption>
	     *
	     * con.getDashboardAsync().then(res => console.log(res))
	     */


	    /**
	     * Add a new dashboard to the server.
	     * @param {String} dashboardName - The name of the new dashboard.
	     * @param {String} dashboardState - The Base64-encoded state string of the new dashboard.
	     * @param {String} imageHash - The numeric hash of the dashboard thumbnail.
	     * @param {String} metaData - Stringified metadata related to the view.
	     * @return {Promise} Returns a Promise.all result (array) of the IDs created on each client.
	     *
	     * @example <caption>Add a new dashboard to the server:</caption>
	     *
	     * con.createDashboardAsync('newSave', 'dashboardstateBase64', null, 'metaData').then(res => console.log(res))
	     */


	    /**
	     * Replace a dashboard on the server with new properties.
	     * @param {Number} dashboardId - The ID of the dashboard to replace.
	     * @param {String} dashboardName - The name of the new dashboard.
	     * @param {String} dashboardOwner - User ID of the owner of the dashboard.
	     * @param {String} dashboardState - The Base64-encoded state string of the new dashboard.
	     * @param {String} imageHash - The numeric hash of the dashboard thumbnail.
	     * @param {String} metaData - Stringified metadata related to the view.
	     * @return {Promise} Returns empty if successful, rejects if any client failed.
	     *
	     * @example <caption>Replace a dashboard on the server:</caption>
	     *
	     * con.replaceDashboardAsync(123, 'replaceSave', 'owner', 'dashboardstateBase64', null, 'metaData').then(res => console.log(res))
	     */


	    /**
	     * Delete a dashboard object containing a value for the <code>view_state</code> property.
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @return {Promise} Returns empty if successful, rejects if any client failed.
	     *
	     * @example <caption>Delete a specific dashboard from the server:</caption>
	     *
	     * con.deleteDashboardAsync(123).then(res => console.log(res))
	     */


	    /**
	     * Delete multiple dashboards
	     * @param {Array} dashboardIds - An array of dashboard ids (numbers)
	     * @return {Promise} Returns empty if successful, rejects if any client failed.
	     *
	     * @example <caption>Delete dashboards from the server:</caption>
	     *
	     * con.deleteDashboardsAsync([123, 456]).then(res => console.log(res))
	     */


	    /**
	     * Share a dashboard (GRANT a certain set of permissions to a specified list of groups).
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @param {String[]} groups - The roles and users that can access the dashboard.
	     * @param {String[]} objects - The database objects (tables) that groups can see.
	     * @param {String[]} permissions - Permissions granted to the groups.
	     * @return {Promise} Returns empty if successful.
	     *
	     * @example <caption>Share a dashboard:</caption>
	     *
	     * con.shareDashboardAsync(123, ['group1', 'group2'], ['object1', 'object2'], ['perm1', 'perm2']).then(res => console.log(res))
	     */


	    /**
	     * Share multiple dashboards.
	     * @param {Array} dashboardIds - An array of dashboard ids (numbers)
	     * @param {String[]} groups - The roles and users that can access the dashboard.
	     * @param {String[]} permissions - Permissions granted to the groups.
	     * @return {Promise} Returns empty if successful.
	     *
	     * @example <caption>Share dashboards:</caption>
	     *
	     * con.shareDashboardsAsync([123, 456], ['group1', 'group2'], ['perm1', 'perm2']).then(res => console.log(res))
	     */


	    /**
	     * Stop sharing a dashboard (REVOKE a certain set of permission from a specified list of groups).
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @param {String[]} groups - The roles and users that can access it.
	     * @param {String[]} objects - The database objects (tables) that groups can see.
	     * @param {String[]} permissions - Permissions revoked from the groups.
	     * @return {Promise} Returns empty if successful.
	     *
	     * @example <caption>Unshare a dashboard:</caption>
	     *
	     * con.unshareDashboardAsync(123, ['group1', 'group2'], ['object1', 'object2'], ['perm1', 'perm2']).then(res => console.log(res))
	     */


	    /**
	     * Unshare multiple dashboards.
	     * @param {Number[]} dashboardIds - An array of dashboard ids
	     * @param {String[]} groups - The roles and users to unshare with.
	     * @param {String[]} permissions - The permissions to remove.
	     * @return {Promise} Returns empty if successful.
	     *
	     * @example <caption>Unshare dashboards:</caption>
	     *
	     * con.unshareDashboardsAsync([123, 456], ['group1', 'group2'], ['perm1', 'perm2']).then(res => console.log(res))
	     */


	    /**
	     * Get the list of users that a dashboard has been shared with; that is, those users who have been granted permissions to the dashboard.
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @return {Promise} Returns the list of users (array).
	     *
	     * @example <caption>Get the list of grantees for a dashboard:</caption>
	     *
	     * con.getDashboardGranteesAsync(123).then(res => console.log(res))
	     */


	    /**
	     * Get a list of database objects granted to a role; that is, those objects the role has permissions to access.
	     * @param {String} roleName - The name of the role.
	     * @return {Promise} Returns the list of database object names (strings).
	     *
	     * @example <caption>Get list of accessible database objects for a role:</caption>
	     *
	     * con.getDbObjectsForGranteeAsync('role').then(res => console.log(res))
	     */


	    /**
	     * Get the privileges for the current user for a specified database object type and ID.
	     * @param {String} objectName - The ID of the object (e.g. table name or dashboard ID).
	     * @param {TDBObjectType} type - The type of the database object.
	     * @return {Promise.<TDBObject[]>} Returns the list of database objects for this type and ID, including their privs (property 'privs').
	     *
	     * @example <caption>Get the list of accessible database objects for the current user:</caption>
	     *
	     * con.getDbObjectPrivsAsync('table_name', 'TableDBObjectType').then(res => console.log(res))
	     */


	    /**
	     * Get all the roles assigned to a given username.
	     * @param {String} username - The username whose roles you wish to get.
	     * @return {Promise} A list of all roles assigned to the username.
	     */


	    /**
	     * Checks if the given user or role has a privilege(s) on a given object. Note that this check is
	     * transative; if a user has been granted a privilege via a role, this will return `true`.
	     * @param {String} granteeName - The name of the user or role to check privileges for.
	     * @param {String} objectName - The name of the object to check privileges against (for example,
	     * the database name, table name, etc.)
	     * @param {TDBObjectType} objectType - The type of object to check privileges against.
	     * @param {TDBObjectPermissions} permissions - An object containing the privileges to check. All
	     * the privileges specified must be granted for this function to return true.
	     * @return {Boolean} true if all the specified privileges have been granted to the user/role,
	     * false otherwise.
	     *
	     * @example <caption>Check if user <code>my_user</code> has the "view SQL Editor" privilege on the <code>my_db</code> database:</caption>
	     *
	     * con.hasDbPrivilegesAsync(
	     *   "my_user",
	     *   "my_db",
	     *   TDBObjectType.DatabaseDBObjectType,
	     *   new TDBObjectPermissions({
	     *     database_permissions_: new TDatabasePermissions(dbPrivs)
	     *   })
	     * ).then((res) =>
	     *   if(res) { console.log("Can view the SQL editor") }
	     * )
	     */


	    /**
	     * Specialization of `has_object_privilege` for checking database privileges of a user.
	     *
	     * @param {String} granteeName - The name of the user or role to check privileges for.
	     * @param {String} dbName - The name of the database to check user privileges against.
	     * @param {TDatabasePermissions} dbPrivs - An object specifying what privileges to check.
	     *
	     * @return {Boolean} true if the user/role has all the specified DB privileges, false otherwise.
	     *
	     * @example <caption>Check if user <code>my_user</code> has the "view SQL Editor" privilege on the <code>my_db</code> database:</caption>
	     *
	     * con.hasDbPrivilegesAsync("my_user", "my_db", {view_sql_editor_: true}).then(res =>
	     *  if(res) { console.log("Can view the SQL editor") }
	     * )
	     */

	  }, {
	    key: "detectColumnTypes",
	    value: function detectColumnTypes(fileName, copyParams, callback) {
	      var thriftCopyParams = helpers.convertObjectToThriftCopyParams(copyParams);
	      this._client[0].detect_column_types(this._sessionId[0], fileName, thriftCopyParams, callback);
	    }

	    /**
	     * Asynchronously get data from an importable file,
	     * such as a CSV or plaintext file with a header.
	     * @param {String} fileName - The name of the importable file.
	     * @param {TCopyParams} copyParams See {@link TCopyParams}
	     * @returns {Promise.<TDetectResult>} An object that has <code>copy_params</code> and <code>row_set</code>.
	     *
	     * @example <caption>Get data from table_data.csv:</caption>
	     *
	     * var copyParams = new TCopyParams();
	     * con.detectColumnTypesAsync('table_data.csv', copyParams).then(res => console.log(res))
	     * // TDetectResult {row_set: TRowSet, copy_params: TCopyParams}
	     *
	     */

	  }, {
	    key: "query",


	    /**
	     * Submit a query to the database and process the results.
	     * @param {String} query The query to perform.
	     * @param {Object} options Options for the query.
	     * @param {Function} callback A callback function with the signature <code>(err, result) => result</code>.
	     * @returns {Object} The result of the query.
	     *
	     * @example <caption>Create a query:</caption>
	     *
	     * var query = "SELECT count(*) AS n FROM tweets_nov_feb WHERE country='CO'";
	     * var options = {};
	     *
	     * con.query(query, options, function(err, result) {
	     *        console.log(result)
	     *      });
	     *
	     */
	    value: function query(_query, options, callback) {
	      var _this4 = this;

	      var columnarResults = true;
	      var eliminateNullRows = false;
	      var queryId = null;
	      var returnTiming = false;
	      var limit = -1;
	      var curNonce = (this._nonce++).toString();
	      if (options) {
	        columnarResults = options.hasOwnProperty("columnarResults") ? options.columnarResults : columnarResults;
	        eliminateNullRows = options.hasOwnProperty("eliminateNullRows") ? options.eliminateNullRows : eliminateNullRows;
	        queryId = options.hasOwnProperty("queryId") ? options.queryId : queryId;
	        returnTiming = options.hasOwnProperty("returnTiming") ? options.returnTiming : returnTiming;
	        limit = options.hasOwnProperty("limit") ? options.limit : limit;
	        curNonce = options.hasOwnProperty("logValues") ? JSON.stringify(options.logValues) : curNonce;
	      }

	      var lastQueryTime = queryId in this.queryTimes ? this.queryTimes[queryId] : this.DEFAULT_QUERY_TIME;

	      var conId = 0;

	      var processResultsOptions = {
	        returnTiming: returnTiming,
	        eliminateNullRows: eliminateNullRows,
	        query: _query,
	        queryId: queryId,
	        conId: conId,
	        estimatedQueryTime: lastQueryTime
	      };

	      try {
	        var AT_MOST_N = -1;
	        if (callback) {
	          this._client[conId].sql_execute(this._sessionId[conId], _query, columnarResults, curNonce, limit, AT_MOST_N, function (error, result) {
	            _this4.processResults(processResultsOptions, result, error, callback);
	          });
	          return curNonce;
	        } else if (!callback) {
	          var SQLExecuteResult = this._client[conId].sql_execute(this._sessionId[conId], _query, columnarResults, curNonce, limit, AT_MOST_N);
	          return this.processResults(processResultsOptions, SQLExecuteResult);
	        }
	      } catch (err) {
	        if (err.name === "NetworkError") {
	          this.removeConnection(conId);
	          if (this._numConnections === 0) {
	            err.msg = "No remaining database connections";
	            throw err;
	          }
	          this.query(_query, options, callback);
	        } else if (callback) {
	          callback(err);
	        } else {
	          throw err;
	        }
	      }
	    }

	    // This is a *Promise* cache, not a result cache. If queryAsync is called for the same query twice
	    // while the first is still in flight, it will return the Promise from the first call, saving
	    // an unnecessary duplicate trip and sharing the results to both callers once they come back.
	    //
	    // This only survives while requests are in flight in the default 'transient' mode, but if transient
	    // is off then it will act as a long-term cache, returning the resolved Promise with immediate results.

	    // Whether or not the query cache should immediately evict entries once they return with results


	    // We need to clone the original cached promise, so that the object returned is cloned for each consumer.
	    // This is because (unfortunately) Immerse still has a few locations that mutate the results object.

	  }, {
	    key: "queryDF",
	    value: function queryDF(query, options, callback) {
	      var _client$conId;

	      var deviceId = 0;
	      var limit = -1;
	      var conId = 0;

	      var args = [this._sessionId[conId], query, TDeviceType.CPU, deviceId, limit, TArrowTransport.WIRE, function (err, data) {
	        var arrowTable = _apacheArrow2.default.from(data.df_buffer);
	        return callback(err, arrowTable);
	      }];

	      return (_client$conId = this._client[conId]).sql_execute_df.apply(_client$conId, args);
	    }

	    /**
	     * Submit a query to validate that the backend can create a result set based on the SQL statement.
	     * @param {String} query The query to perform.
	     * @returns {Promise.<Object>} The result of whether the query is valid.
	     *
	     * @example <caption>Create a query and determine if it is valid:</caption>
	     *
	     * var query = "SELECT count(*) AS n FROM tweets_nov_feb WHERE country='CO'";
	     *
	     * con.validateQuery(query).then(res => console.log(res))
	     *
	     * // [{
	     * //    "name": "n",
	     * //    "type": "INT",
	     * //    "is_array": false,
	     * //    "is_dict": false
	     * //  }]
	     *
	     */

	  }, {
	    key: "getTables",
	    value: function getTables(callback) {
	      this._client[0].get_tables(this._sessionId[0], function (error, tables) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, tables.map(function (table) {
	            return {
	              name: table,
	              label: "obs"
	            };
	          }));
	        }
	      });
	    }

	    /**
	     * Get the names of the databases that exist in the current session connection.
	     * @return {Promise.<Object[]>} List of table objects containing the label and table names.
	     *
	     * @example <caption>Get the list of tables from a connection:</caption>
	     *
	     *  con.getTablesAsync().then(res => console.log(res))
	     *
	     *  //  [{
	     *  //    label: 'obs', // deprecated property
	     *  //    name: 'myTableName'
	     *  //   },
	     *  //  ...]
	     */

	  }, {
	    key: "getTablesWithMeta",
	    value: function getTablesWithMeta(callback) {
	      var _this5 = this;

	      this._client[0].get_tables_meta(this._sessionId[0], function (error, tables) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, tables.map(function (table) {
	            return {
	              name: table.table_name,
	              num_cols: Number(table.num_cols.toString()),
	              col_datum_types: table.col_types.map(function (type) {
	                return _this5._datumEnum[type.type];
	              }),
	              is_view: table.is_view,
	              is_replicated: table.is_replicated,
	              shard_count: Number(table.shard_count.toString()),
	              max_rows: isFinite(table.max_rows) ? Number(table.max_rows.toString()) : -1
	            };
	          }));
	        }
	      });
	    }

	    /**
	     * Get names and catalog metadata for tables that exist on the current session's connection.
	     * @return {Promise.<Object[]>} The list of objects containing table metadata.
	     *
	     * @example <caption>Get the list of tables with metadata from a connection:</caption>
	     *
	     *  con.getTablesWithMetaAsync().then(res => console.log(res))
	     *
	     *  [
	     *   {
	     *    name: 'my_table_name',
	     *    col_datum_types: [TDatumType::BOOL, TDatumType::DOUBLE],
	     *    is_view: false,
	     *    is_replicated: false,
	     *    shard_count: 0,
	     *    max_rows: -1
	     *   },
	     *  ...]
	     */

	  }, {
	    key: "getTablesMeta",
	    value: function getTablesMeta(callback) {
	      this._client[0].get_tables_meta(this._sessionId[0], function (error, tables) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, tables);
	        }
	      });
	    }

	    /**
	     * Get names and catalog metadata for tables that exist on the current session's connection.
	     * @return {Promise.<TTableMeta[]>} The list of objects containing table metadata.
	     *
	     * @example <caption>Get the list of tables with metadata from a connection:</caption>
	     *
	     *  con.getTablesMetaAsync().then(res => console.log(res))
	     *
	     *  [
	     *   {
	     *    table_name: 'my_table_name',
	     *    col_datum_types: [TDatumType::BOOL, TDatumType::DOUBLE],
	     *    col_names: ['bool_col', 'double_col'],
	     *    is_view: false,
	     *    is_replicated: false,
	     *    shard_count: 0,
	     *    max_rows: -1
	     *   },
	     *  ...]
	     */

	  }, {
	    key: "getCompletionHints",


	    /**
	     * Submits an SQL string to the backend and returns a completion hints object.
	     * @param {String} queryString A fragment of SQL input.
	     * @param {Object} options An options object continaing the current cursor position, 1-indexed from the start of `queryString`.
	     * @param {Function} callback A callback function with the signature `(err, result) => result`.
	     * @returns {Array} An array of completion hints objects that contains the completion hints.
	     *
	     * @example
	     * const queryString = "f";
	     * const cursor = 1;
	     *
	     * con.getCompletionHints(queryString, cursor, function(error, result) {
	     *        console.log(result)
	     *      });
	     *
	     *  [{
	     *    hints: ["FROM"],
	     *    replaced: "f",
	     *    type: 7
	     *   }]
	     *
	     */
	    value: function getCompletionHints(queryString, options, callback) {
	      var cursor = options.cursor;
	      this._client[0].get_completion_hints(this._sessionId[0], queryString, cursor, function (error, result) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, result);
	        }
	      });
	    }

	    /**
	     * Create an array-like object from {@link TDatumType} by
	     * changing the order of the string key and numerical value.
	     *
	     * @returns {Undefined} This function does not return anything.
	     */

	  }, {
	    key: "invertDatumTypes",
	    value: function invertDatumTypes() {
	      var datumType = TDatumType; // eslint-disable-line no-undef
	      for (var key in datumType) {
	        if (datumType.hasOwnProperty(key)) {
	          this._datumEnum[datumType[key]] = key;
	        }
	      }
	    }

	    /**
	     * Get a list of field objects for a specified table.
	     * @param {String} tableName Name of table containing field names.
	     * @param {Function} callback A callback that takes (`err, results`).
	     * @return {Array<Object>} The formatted list of field objects.
	     *
	     * @example <caption>Get the list of fields from a specific table:</caption>
	     *
	     * con.getFields('flights', (err, res) => console.log(res))
	     * // [{
	     *   name: 'fieldName',
	     *   type: 'BIGINT',
	     *   is_array: false,
	     *   is_dict: false
	     * }, ...]
	     */

	  }, {
	    key: "getFields",
	    value: function getFields(tableName, callback) {
	      var _this6 = this;

	      this._client[0].get_table_details(this._sessionId[0], tableName, function (error, fields) {
	        if (error) {
	          callback(error);
	        } else if (fields) {
	          var rowDict = fields.row_desc.reduce(function (accum, value) {
	            accum[value.col_name] = value;
	            return accum;
	          }, {});
	          callback(null, _extends({}, fields, {
	            columns: _this6.convertFromThriftTypes(rowDict)
	          }));
	        } else {
	          callback(new Error("Table (" + tableName + ") not found"));
	        }
	      });
	    }
	  }, {
	    key: "createTable",
	    value: function createTable(tableName, rowDescObj, tableType, createParams, callback) {
	      if (!this._sessionId) {
	        throw new Error("You are not connected to a server. Try running the connect method first.");
	      }

	      var thriftRowDesc = helpers.mutateThriftRowDesc(rowDescObj, this.importerRowDesc);

	      for (var c = 0; c < this._numConnections; c++) {
	        this._client[c].create_table(this._sessionId[c], tableName, thriftRowDesc, tableType, createParams, function (err) {
	          if (err) {
	            callback(err);
	          } else {
	            callback();
	          }
	        });
	      }
	    }

	    /**
	     * Create a table and persist it to the backend.
	     * @param {String} tableName The name of the new table.
	     * @param {Array<TColumnType>} rowDescObj Fields in the new table.
	     * @param {Number<TTableType>} tableType The types of tables a user can import into the database.
	     * @param {TCreateParams} createParams Properties to apply to the new table (e.g. replicated)
	     * @return {Promise.<undefined>} Generates an error if unsuccessful, or returns undefined if successful.
	     *
	     * @example <caption>Create a new table:</caption>
	     *
	     *  con.createTable('mynewtable', [TColumnType, TColumnType, ...], 0).then(res => console.log(res));
	     *  // undefined
	     */

	  }, {
	    key: "importTable",
	    value: function importTable(tableName, fileName, copyParams, rowDescObj, isShapeFile, callback) {
	      if (!this._sessionId) {
	        throw new Error("You are not connected to a server. Try running the connect method first.");
	      }

	      var thriftCopyParams = helpers.convertObjectToThriftCopyParams(copyParams);
	      var thriftRowDesc = helpers.mutateThriftRowDesc(rowDescObj, this.importerRowDesc);

	      var thriftCallBack = function thriftCallBack(err, res) {
	        if (err) {
	          callback(err);
	        } else {
	          callback(null, res);
	        }
	      };

	      for (var c = 0; c < this._numConnections; c++) {
	        if (isShapeFile) {
	          this._client[c].import_geo_table(this._sessionId[c], tableName, fileName, thriftCopyParams, thriftRowDesc, new TCreateParams(), thriftCallBack);
	        } else {
	          this._client[c].import_table(this._sessionId[c], tableName, fileName, thriftCopyParams, thriftCallBack);
	        }
	      }
	    }
	  }, {
	    key: "importTableAsyncWrapper",
	    value: function importTableAsyncWrapper(isShapeFile) {
	      var _this7 = this;

	      return function (tableName, fileName, copyParams, headers) {
	        return new Promise(function (resolve, reject) {
	          _this7.importTable(tableName, fileName, copyParams, headers, isShapeFile, function (err, link) {
	            if (err) {
	              reject(err);
	            } else {
	              resolve(link);
	            }
	          });
	        });
	      };
	    }

	    /**
	     * Import a delimited table from a file.
	     * @param {String} tableName The name of the new table.
	     * @param {String} fileName The name of the file containing the table.
	     * @param {TCopyParams} copyParams See {@link TCopyParams}
	     * @param {TColumnType[]} headers A collection of metadata related to the table headers.
	     */


	    /**
	     * Import a geo table from a file.
	     * @param {String} tableName The name of the new geo table.
	     * @param {String} fileName The name of the file containing the table.
	     * @param {TCopyParams} copyParams See {@link TCopyParams}
	     * @param {TColumnType[]} headers A colleciton of metadata related to the table headers.
	     */

	  }, {
	    key: "renderVega",


	    /**
	     * Use for backend rendering. This method fetches a PNG image
	     * that is a render of the Vega JSON object.
	     *
	     * @param {Number} widgetid The widget ID of the calling widget.
	     * @param {String} vega The Vega JSON.
	     * @param {Object} options The options for the render query.
	     * @param {Number} options.compressionLevel The PNG compression level.
	     *                  Range: 1 (low compression, faster) to 10 (high compression, slower).
	     *                  Default: 3.
	     * @param {Function} callback Takes `(err, success)` as its signature.  Returns con singleton if successful.
	     *
	     * @returns {Image} Base64 image.
	     */
	    value: function renderVega(widgetid, vega, options, callback) /* istanbul ignore next */{
	      var _this8 = this;

	      var queryId = null;
	      var compressionLevel = COMPRESSION_LEVEL_DEFAULT;

	      if (options) {
	        queryId = options.hasOwnProperty("queryId") ? options.queryId : queryId;
	        compressionLevel = options.hasOwnProperty("compressionLevel") ? options.compressionLevel : compressionLevel;
	      }

	      var lastQueryTime = queryId in this.queryTimes ? this.queryTimes[queryId] : this.DEFAULT_QUERY_TIME;

	      var curNonce = (this._nonce++).toString();

	      var conId = 0;
	      this._lastRenderCon = conId;

	      var processResultsOptions = {
	        isImage: true,
	        query: "render: " + vega,
	        queryId: queryId,
	        conId: conId,
	        estimatedQueryTime: lastQueryTime
	      };

	      if (!callback) {
	        var renderResult = this._client[conId].render_vega(this._sessionId[conId], widgetid, vega, compressionLevel, curNonce);
	        return this.processResults(processResultsOptions, renderResult);
	      }

	      this._client[conId].render_vega(this._sessionId[conId], widgetid, vega, compressionLevel, curNonce, function (error, result) {
	        _this8.processResults(processResultsOptions, result, error, callback);
	      });

	      return curNonce;
	    }
	  }, {
	    key: "getResultRowForPixel",


	    /**
	     * Used primarily for backend-rendered maps; fetches the row
	     * for a specific table that was last rendered at a pixel.
	     *
	     * @param {Number} widgetId The widget ID of the caller.
	     * @param {TPixel} pixel The pixel. The lower-left corner is pixel (0,0).
	     * @param {Object} tableColNamesMap Map of the object of `tableName` to the array of column names.
	     * @param {Number} [pixelRadius=2] The radius around the primary pixel to search within.
	     * @param {Function} callback A callback function with the signature `(err, result) => result`.
	     *
	     * @returns {String} Current result nonce
	     */
	    value: function getResultRowForPixel(widgetId, pixel, tableColNamesMap) /* istanbul ignore next */{
	      var pixelRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
	      var callback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

	      if (!(pixel instanceof TPixel)) {
	        pixel = new TPixel(pixel);
	      }

	      var columnFormat = true; // BOOL
	      var curNonce = (this._nonce++).toString();

	      if (!callback) {
	        return this.processPixelResults(undefined, // eslint-disable-line no-undefined
	        this._client[this._lastRenderCon].get_result_row_for_pixel(this._sessionId[this._lastRenderCon], widgetId, pixel, tableColNamesMap, columnFormat, pixelRadius, curNonce));
	      }

	      this._client[this._lastRenderCon].get_result_row_for_pixel(this._sessionId[this._lastRenderCon], widgetId, pixel, tableColNamesMap, columnFormat, pixelRadius, curNonce, this.processPixelResults.bind(this, callback));

	      return curNonce;
	    }
	  }, {
	    key: "processPixelResults",


	    /**
	     * Formats the pixel results into the same pattern as textual results.
	     *
	     * @param {Function} callback A callback function with the signature `(err, result) => result`.
	     * @param {Object} error An error if thrown; otherwise null.
	     * @param {Array|Object} results Unformatted results of pixel `rowId` information.
	     *
	     * @returns {Object} An object with the pixel results formatted for display.
	     */
	    value: function processPixelResults(callback, error, results) {
	      results = Array.isArray(results) ? results.pixel_rows : [results];

	      if (error) {
	        if (callback) {
	          return callback(error, results);
	        } else {
	          throw new Error("Unable to process result row for pixel results: " + error);
	        }
	      }

	      var processResultsOptions = {
	        isImage: false,
	        eliminateNullRows: false,
	        query: "pixel request",
	        queryId: -2
	      };

	      var numPixels = results.length;
	      for (var p = 0; p < numPixels; p++) {
	        results[p].row_set = this.processResults(processResultsOptions, results[p]);
	      }

	      if (callback) {
	        return callback(error, results);
	      } else {
	        return results;
	      }
	    }

	    // ** Configuration methods **

	    /**
	     * Get or set the session ID used by the server to serve the correct data.
	     * This is typically set by {@link connect} and should not be set manually.
	     * @param {Number} sessionId The session ID of the current connection.
	     * @return {Number|MapdCon} - The session ID or MapD connector itself.
	     *
	     * @example <caption>Get the session ID:</caption>
	     *
	     *  con.sessionId();
	     * // sessionID === 3145846410
	     *
	     * @example <caption>Set the session ID:</caption>
	     * var con = new MapdCon().connect().sessionId(3415846410);
	     * // NOTE: It is generally unsafe to set the session ID manually.
	     */

	  }, {
	    key: "sessionId",
	    value: function sessionId(_sessionId) {
	      if (!arguments.length) {
	        return this._sessionId;
	      }
	      this._sessionId = arrayify(_sessionId);
	      return this;
	    }

	    /**
	     * Get or set the connection server hostname.
	     * This is is typically the first method called after instantiating a new MapdCon.
	     * @param {String} host The hostname address.
	     * @return {String|MapdCon} The hostname or MapD connector itself.
	     *
	     * @example <caption>Set the hostname:</caption>
	     * var con = new MapdCon().host('localhost');
	     *
	     * @example <caption>Get the hostname:</caption>
	     * var host = con.host();
	     * // host === 'localhost'
	     */

	  }, {
	    key: "host",
	    value: function host(_host) {
	      if (!arguments.length) {
	        return this._host;
	      }
	      this._host = arrayify(_host);
	      return this;
	    }

	    /**
	     * Get or set the connection port.
	     * @param {String} port - The port to connect on.
	     * @return {String|MapdCon} - The port or MapD connector itself.
	     *
	     * @example <caption>Set the port:</caption>
	     * var con = new MapdCon().port('8080');
	     *
	     * @example <caption>Get the port:</caption>
	     * var port = con.port();
	     * // port === '8080'
	     */

	  }, {
	    key: "port",
	    value: function port(_port) {
	      if (!arguments.length) {
	        return this._port;
	      }
	      this._port = arrayify(_port);
	      return this;
	    }

	    /**
	     * Get or set the username with which to authenticate.
	     * @param {String} user - The username with which to authenticate.
	     * @return {String|MapdCon} - The username or MapD connector itself.
	     *
	     * @example <caption>Set the username:</caption>
	     * var con = new MapdCon().user('foo');
	     *
	     * @example <caption>Get the username:</caption>
	     * var username = con.user();
	     * // user === 'foo'
	     */

	  }, {
	    key: "user",
	    value: function user(_user) {
	      if (!arguments.length) {
	        return this._user;
	      }
	      this._user = arrayify(_user);
	      return this;
	    }

	    /**
	     * Get or set the user password for authentication.
	     * @param {String} password The password with which to authenticate.
	     * @return {String|MapdCon} The password or MapD connector itself.
	     *
	     * @example <caption>Set the password:</caption>
	     * var con = new MapdCon().password('bar');
	     *
	     * @example <caption>Get the username:</caption>
	     * var password = con.password();
	     * // password === 'bar'
	     */

	  }, {
	    key: "password",
	    value: function password(_password) {
	      if (!arguments.length) {
	        return this._password;
	      }
	      this._password = arrayify(_password);
	      return this;
	    }

	    /**
	     * Get or set the name of the database to connect to.
	     * @param {String} dbName - The database to connect to.
	     * @return {String|MapdCon} - The name of the database or the MapD connector itself.
	     *
	     * @example <caption>Set the database name:</caption>
	     * var con = new MapdCon().dbName('myDatabase');
	     *
	     * @example <caption>Get the database name:</caption>
	     * var dbName = con.dbName();
	     * // dbName === 'myDatabase'
	     */

	  }, {
	    key: "dbName",
	    value: function dbName(_dbName) {
	      if (!arguments.length) {
	        return this._dbName;
	      }
	      this._dbName = arrayify(_dbName);
	      return this;
	    }

	    /**
	     * Configure whether raw query strings are logged to the console.
	     * Used primarily for debugging; `false` by default.
	     * @param {Boolean} logging Set to true to enable logging.
	     * @return {Boolean|MapdCon} The current logging flag or MapD connector itself.
	     *
	     * @example <caption>Set logging to true:</caption>
	     * var con = new MapdCon().logging(true);
	     *
	     * @example <caption>Get the logging flag:</caption>
	     * var isLogging = con.logging();
	     * // isLogging === true
	     */

	  }, {
	    key: "logging",
	    value: function logging(_logging) {
	      if (typeof _logging === "undefined") {
	        return this._logging;
	      } else if (typeof _logging !== "boolean") {
	        return "logging can only be set with boolean values";
	      }
	      this._logging = _logging;
	      var isEnabledTxt = _logging ? "enabled" : "disabled";
	      return "SQL logging is now " + isEnabledTxt;
	    }

	    /**
	     * The name of the platform.
	     * @param {String} platform The platform; "mapd" by default.
	     * @return {String|MapdCon} - The platform or MapD connector itself.
	     *
	     * @example <caption>Set the platform name:</caption>
	     * var con = new MapdCon().platform('myPlatform');
	     *
	     * @example <caption>Get the platform name:</caption>
	     * var platform = con.platform();
	     * // platform === 'myPlatform'
	     */

	  }, {
	    key: "platform",
	    value: function platform(_platform) {
	      if (!arguments.length) {
	        return this._platform;
	      }
	      this._platform = _platform;
	      return this;
	    }

	    /**
	     * Get the number of connections that are currently open.
	     * @return {Number} The number of open connections.
	     *
	     * @example <caption>Get the number of connections:</caption>
	     *
	     * var numConnections = con.numConnections();
	     * // numConnections === 1
	     */

	  }, {
	    key: "numConnections",
	    value: function numConnections() {
	      return this._numConnections;
	    }

	    /**
	     * The protocol to use for requests.
	     * @param {String} protocol <code>http</code> or <code>https</code>.
	     * @return {String|MapdCon} The protocol or MapdCon itself.
	     *
	     * @example <caption>Set the protocol:</caption>
	     * var con = new MapdCon().protocol('http');
	     *
	     * @example <caption>Get the protocol:</caption>
	     * var protocol = con.protocol();
	     * // protocol === 'http'
	     */

	  }, {
	    key: "protocol",
	    value: function protocol(_protocol) {
	      if (!arguments.length) {
	        return this._protocol;
	      }
	      this._protocol = arrayify(_protocol);
	      return this;
	    }

	    /**
	     * Disables logic that automatically tries to reconnect to the server if there's an error
	     *
	     * @param {Boolean?} disable - If true, disables auto-reconnect
	     * @return {Boolean|MapdCon} The status of auto-reconnect, or MapdCon itself.
	     */

	  }, {
	    key: "disableAutoReconnect",
	    value: function disableAutoReconnect(disable) {
	      if (!arguments.length) {
	        return this._disableAutoReconnect;
	      }
	      this._disableAutoReconnect = disable;
	      return this;
	    }

	    /**
	     * Generates a list of endpoints from the connection parameters.
	     * @return {Array<String>} List of endpoints.
	     *
	     * @example <caption>Get the endpoints:</caption>
	     * var con = new MapdCon().protocol('http').host('localhost').port('8000');
	     * var endpoints = con.getEndpoints();
	     * // endpoints === [ 'http://localhost:8000' ]
	     */

	  }, {
	    key: "getEndpoints",
	    value: function getEndpoints() {
	      var _this9 = this;

	      return this._host.map(function (host, i) {
	        return _this9._protocol[i] + "://" + host + ":" + _this9._port[i];
	      });
	    }

	    /**
	     * Set the license for Trial or Enterprise
	     * @param {String} key The key to install
	     * @param {Object} config Protocol, host and port to connect to
	     * @return {Promise.<Object>} Claims or Error.
	     */

	  }, {
	    key: "setLicenseKey",
	    value: function setLicenseKey(key, _ref15) {
	      var _this10 = this;

	      var protocol = _ref15.protocol,
	          host = _ref15.host,
	          port = _ref15.port;

	      return new Promise(function (resolve) {
	        var client = Array.isArray(_this10._client) && _this10._client[0];
	        var sessionId = _this10._sessionId && _this10._sessionId[0];
	        if (!client) {
	          var url = protocol + "://" + host + ":" + port;
	          var thriftTransport = new Thrift.Transport(url);
	          var thriftProtocol = new Thrift.Protocol(thriftTransport);
	          client = new _mapdClientV2.default(thriftProtocol);
	          sessionId = "";
	        }
	        var result = client.set_license_key(sessionId, key, _this10._nonce++);
	        resolve(result);
	      });
	    }

	    /**
	     * Get the license for Trial or Enterprise
	     * @param {Object} config Protocol, host and port to connect to
	     * @return {Promise.<Object>} Claims or Error.
	     */

	  }, {
	    key: "getLicenseClaims",
	    value: function getLicenseClaims(_ref16) {
	      var _this11 = this;

	      var protocol = _ref16.protocol,
	          host = _ref16.host,
	          port = _ref16.port;

	      return new Promise(function (resolve, reject) {
	        var client = Array.isArray(_this11._client) && _this11._client[0];
	        var sessionId = _this11._sessionId && _this11._sessionId[0];
	        if (!client) {
	          var url = protocol + "://" + host + ":" + port;
	          var thriftTransport = new Thrift.Transport(url);
	          var thriftProtocol = new Thrift.Protocol(thriftTransport);
	          client = new _mapdClientV2.default(thriftProtocol);
	          sessionId = "";
	        }
	        try {
	          var result = client.get_license_claims(sessionId, _this11._nonce++);
	          resolve(result);
	        } catch (e) {
	          reject(e);
	        }
	      });
	    }
	  }, {
	    key: "isTimeoutError",
	    value: function isTimeoutError(result) {
	      return result instanceof TOmniSciException && (String(result.error_msg).indexOf("Session not valid.") !== -1 || String(result.error_msg).indexOf("User should re-authenticate.") !== -1);
	    }
	  }]);

	  return MapdCon;
	}();

	function resetThriftClientOnArgumentErrorForMethods(connector, client, methodNames) {
	  methodNames.forEach(function (methodName) {
	    var oldFunc = connector[methodName];
	    connector[methodName] = function () {
	      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      try {
	        // eslint-disable-line no-restricted-syntax
	        return oldFunc.apply(connector, args); // TODO should reject rather than throw for Promises.
	      } catch (e) {
	        // `this.output` is the Thrift transport instance
	        client.output.outCount = 0;
	        client.output.outBuffers = [];
	        client.output._seqid = null;
	        // dereference the callback
	        client._reqs[client._seqid] = null;
	        throw e; // re-throw the error to Rx
	      }
	    };
	  });
	}

	// Set a global mapdcon function when mapdcon is brought in via script tag.
	if (( false ? "undefined" : _typeof(module)) === "object" && module.exports) {
	  if (!isNodeRuntime()) {
	    window.MapdCon = MapdCon;
	  }
	}
	module.exports = MapdCon;
	exports.default = MapdCon;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)(module)))

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.timestampToMs = timestampToMs;
	var convertObjectToThriftCopyParams = exports.convertObjectToThriftCopyParams = function convertObjectToThriftCopyParams(obj) {
	  return new TCopyParams(obj);
	}; // eslint-disable-line no-undef

	var mutateThriftRowDesc = exports.mutateThriftRowDesc = function mutateThriftRowDesc(rowDescArray, thriftRowDescArray) {
	  rowDescArray.forEach(function (obj, i) {
	    thriftRowDescArray[i].col_name = obj.clean_col_name;
	    thriftRowDescArray[i].col_type.encoding = obj.col_type.encoding;
	    thriftRowDescArray[i].col_type.precision = obj.col_type.precision;
	    thriftRowDescArray[i].col_type.comp_param = obj.col_type.comp_param;
	    thriftRowDescArray[i].col_type.scale = obj.col_type.scale;
	    thriftRowDescArray[i].col_type.type = obj.col_type.type;
	  });
	  return thriftRowDescArray;
	};

	/**
	 * Converts a raw integer timestamp value from the DB into milliseconds. The DB timestamp value may
	 * represent seconds, ms, us, or ns depending on the precision of the column. This value is
	 * truncated or extended as necessary to convert to ms precision. The returned ms value is suitable
	 * for passing to the JS Date object constructor.
	 * @param {Number} timestamp - The raw integer timestamp in the database.
	 * @param {Number} precision - The precision of the timestamp column in the database.
	 * @returns {Number} The equivalent timestamp in milliseconds.
	 */
	function timestampToMs(timestamp, precision) {
	  // A precision of 0 = sec, 3 = ms. Thus, this line finds the value to divide the DB val
	  // eslint-disable-next-line no-magic-numbers
	  var divisor = Math.pow(10, precision - 3);
	  var timeInMs = timestamp / divisor;

	  return timeInMs;
	}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(18).clone;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	//  Ramda v0.26.1
	//  https://github.com/ramda/ramda
	//  (c) 2013-2019 Scott Sauyet, Michael Hurley, and David Chambers
	//  Ramda may be freely distributed under the MIT license.

	(function (global, factory) {
	   true ? factory(exports) :
	  typeof define === 'function' && define.amd ? define(['exports'], factory) :
	  (factory((global.R = {})));
	}(this, (function (exports) { 'use strict';

	  function _cloneRegExp(pattern) {
	    return new RegExp(pattern.source, (pattern.global     ? 'g' : '') +
	                                      (pattern.ignoreCase ? 'i' : '') +
	                                      (pattern.multiline  ? 'm' : '') +
	                                      (pattern.sticky     ? 'y' : '') +
	                                      (pattern.unicode    ? 'u' : ''));
	  }

	  function _isPlaceholder(a) {
	    return a != null &&
	           typeof a === 'object' &&
	           a['@@functional/placeholder'] === true;
	  }

	  /**
	   * Optimized internal one-arity curry function.
	   *
	   * @private
	   * @category Function
	   * @param {Function} fn The function to curry.
	   * @return {Function} The curried function.
	   */
	  function _curry1(fn) {
	    return function f1(a) {
	      if (arguments.length === 0 || _isPlaceholder(a)) {
	        return f1;
	      } else {
	        return fn.apply(this, arguments);
	      }
	    };
	  }

	  /**
	   * Gives a single-word string description of the (native) type of a value,
	   * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
	   * attempt to distinguish user Object types any further, reporting them all as
	   * 'Object'.
	   *
	   * @func
	   * @memberOf R
	   * @since v0.8.0
	   * @category Type
	   * @sig (* -> {*}) -> String
	   * @param {*} val The value to test
	   * @return {String}
	   * @example
	   *
	   *      R.type({}); //=> "Object"
	   *      R.type(1); //=> "Number"
	   *      R.type(false); //=> "Boolean"
	   *      R.type('s'); //=> "String"
	   *      R.type(null); //=> "Null"
	   *      R.type([]); //=> "Array"
	   *      R.type(/[A-z]/); //=> "RegExp"
	   *      R.type(() => {}); //=> "Function"
	   *      R.type(undefined); //=> "Undefined"
	   */
	  var type = _curry1(function type(val) {
	    return val === null
	      ? 'Null'
	      : val === undefined
	        ? 'Undefined'
	        : Object.prototype.toString.call(val).slice(8, -1);
	  });

	  /**
	   * Copies an object.
	   *
	   * @private
	   * @param {*} value The value to be copied
	   * @param {Array} refFrom Array containing the source references
	   * @param {Array} refTo Array containing the copied source references
	   * @param {Boolean} deep Whether or not to perform deep cloning.
	   * @return {*} The copied value.
	   */
	  function _clone(value, refFrom, refTo, deep) {
	    var copy = function copy(copiedValue) {
	      var len = refFrom.length;
	      var idx = 0;
	      while (idx < len) {
	        if (value === refFrom[idx]) {
	          return refTo[idx];
	        }
	        idx += 1;
	      }
	      refFrom[idx + 1] = value;
	      refTo[idx + 1] = copiedValue;
	      for (var key in value) {
	        copiedValue[key] = deep ?
	          _clone(value[key], refFrom, refTo, true) : value[key];
	      }
	      return copiedValue;
	    };
	    switch (type(value)) {
	      case 'Object':  return copy({});
	      case 'Array':   return copy([]);
	      case 'Date':    return new Date(value.valueOf());
	      case 'RegExp':  return _cloneRegExp(value);
	      default:        return value;
	    }
	  }

	  /**
	   * Creates a deep copy of the value which may contain (nested) `Array`s and
	   * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
	   * assigned by reference rather than copied
	   *
	   * Dispatches to a `clone` method if present.
	   *
	   * @func
	   * @memberOf R
	   * @since v0.1.0
	   * @category Object
	   * @sig {*} -> {*}
	   * @param {*} value The object or array to clone
	   * @return {*} A deeply cloned copy of `val`
	   * @example
	   *
	   *      const objects = [{}, {}, {}];
	   *      const objectsClone = R.clone(objects);
	   *      objects === objectsClone; //=> false
	   *      objects[0] === objectsClone[0]; //=> false
	   */
	  var clone = _curry1(function clone(value) {
	    return value != null && typeof value.clone === 'function' ?
	      value.clone() :
	      _clone(value, [], [], true);
	  });

	  exports.clone = clone;

	  Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = EventEmitter;
	}


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = MapDClientV2;

	var _wrapWithErrorHandling = __webpack_require__(21);

	var MapDClient = typeof window !== "undefined" && window.OmniSciClient || __webpack_require__(22).Client; // eslint-disable-line global-require

	function MapDClientV2(protocol) {
	  MapDClient.call(this, protocol);
	}

	MapDClientV2.prototype = Object.create(MapDClient.prototype);

	/* eslint-disable no-unused-expressions */
	!function () {
	  ["connect", "sql_execute", "sql_execute_df", "sql_validate", "render", "render_vega", "get_result_row_for_pixel", "get_completion_hints", "get_tables", "get_table_details", "get_tables_meta", "get_fields", "get_status", "get_server_status", "get_hardware_info", "create_link", "get_link_view", "detect_column_types", "send_create_table", "send_import_table", "detect_column_types", "set_license_key", "get_license_claims"].forEach(function (funcName) {
	    MapDClientV2.prototype[funcName] = function () {
	      return (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, funcName).apply(undefined, arguments);
	    };
	  });
	}();

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isResultError = isResultError;
	exports.createResultError = createResultError;
	exports.wrapMethod = wrapMethod;
	exports.wrapWithErrorHandling = wrapWithErrorHandling;
	var MapDClient = typeof window !== "undefined" && window.OmniSciClient || __webpack_require__(22).Client; // eslint-disable-line global-require
	var TMapDException = typeof window !== "undefined" && window.TOmniSciException || __webpack_require__(54).TOmniSciException; // eslint-disable-line global-require
	var Thrift = typeof window !== "undefined" && window.Thrift || __webpack_require__(23).Thrift; // eslint-disable-line global-require

	function isResultError(result) {
	  return result instanceof Thrift.TException || result instanceof Error;
	}

	function createResultError(result) {
	  if (result instanceof TMapDException) {
	    return new Error(result.error_msg);
	  } else if (typeof result.message === "undefined") {
	    return new Error("Unspecified Error");
	  } else {
	    return new Error(result.message);
	  }
	}

	/* eslint-disable consistent-this */
	function wrapMethod(context, method, isError) {
	  return function wrapped() {
	    var arity = MapDClient.prototype[method].length;

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    if (args.length === arity) {
	      var _MapDClient$prototype;

	      var callback = args.pop();
	      (_MapDClient$prototype = MapDClient.prototype[method]).call.apply(_MapDClient$prototype, [context].concat(args, [function (result) {
	        if (isError(result)) {
	          callback(result);
	        } else {
	          callback(null, result);
	        }
	      }]));
	    } else if (args.length === arity - 1) {
	      var _MapDClient$prototype2;

	      var result = (_MapDClient$prototype2 = MapDClient.prototype[method]).call.apply(_MapDClient$prototype2, [context].concat(args));
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    } else {
	      throw new Error("Insufficient arguments to run this method " + method);
	    }
	  };
	}

	function wrapWithErrorHandling(context, method) {
	  return wrapMethod(context, method, isResultError);
	}
	/* eslint-enable consistent-this */

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";//
	// Autogenerated by Thrift Compiler (0.13.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";var thrift=__webpack_require__(23);var Thrift=thrift.Thrift;var Q=thrift.Q;var Int64=__webpack_require__(41);var common_ttypes=__webpack_require__(50);var completion_hints_ttypes=__webpack_require__(51);var serialized_result_set_ttypes=__webpack_require__(52);var extension_functions_ttypes=__webpack_require__(53);var ttypes=__webpack_require__(54);//HELPER FUNCTIONS AND STRUCTURES
	var OmniSci_connect_args=function OmniSci_connect_args(args){this.user=null;this.passwd=null;this.dbname=null;if(args){if(args.user!==undefined&&args.user!==null){this.user=args.user;}if(args.passwd!==undefined&&args.passwd!==null){this.passwd=args.passwd;}if(args.dbname!==undefined&&args.dbname!==null){this.dbname=args.dbname;}}};OmniSci_connect_args.prototype={};OmniSci_connect_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.user=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.passwd=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.dbname=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_connect_args.prototype.write=function(output){output.writeStructBegin('OmniSci_connect_args');if(this.user!==null&&this.user!==undefined){output.writeFieldBegin('user',Thrift.Type.STRING,1);output.writeString(this.user);output.writeFieldEnd();}if(this.passwd!==null&&this.passwd!==undefined){output.writeFieldBegin('passwd',Thrift.Type.STRING,2);output.writeString(this.passwd);output.writeFieldEnd();}if(this.dbname!==null&&this.dbname!==undefined){output.writeFieldBegin('dbname',Thrift.Type.STRING,3);output.writeString(this.dbname);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_connect_result=function OmniSci_connect_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_connect_result.prototype={};OmniSci_connect_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_connect_result.prototype.write=function(output){output.writeStructBegin('OmniSci_connect_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_krb5_connect_args=function OmniSci_krb5_connect_args(args){this.inputToken=null;this.dbname=null;if(args){if(args.inputToken!==undefined&&args.inputToken!==null){this.inputToken=args.inputToken;}if(args.dbname!==undefined&&args.dbname!==null){this.dbname=args.dbname;}}};OmniSci_krb5_connect_args.prototype={};OmniSci_krb5_connect_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.inputToken=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.dbname=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_krb5_connect_args.prototype.write=function(output){output.writeStructBegin('OmniSci_krb5_connect_args');if(this.inputToken!==null&&this.inputToken!==undefined){output.writeFieldBegin('inputToken',Thrift.Type.STRING,1);output.writeString(this.inputToken);output.writeFieldEnd();}if(this.dbname!==null&&this.dbname!==undefined){output.writeFieldBegin('dbname',Thrift.Type.STRING,2);output.writeString(this.dbname);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_krb5_connect_result=function OmniSci_krb5_connect_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TKrb5Session(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_krb5_connect_result.prototype={};OmniSci_krb5_connect_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TKrb5Session();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_krb5_connect_result.prototype.write=function(output){output.writeStructBegin('OmniSci_krb5_connect_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_disconnect_args=function OmniSci_disconnect_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_disconnect_args.prototype={};OmniSci_disconnect_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_disconnect_args.prototype.write=function(output){output.writeStructBegin('OmniSci_disconnect_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_disconnect_result=function OmniSci_disconnect_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_disconnect_result.prototype={};OmniSci_disconnect_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_disconnect_result.prototype.write=function(output){output.writeStructBegin('OmniSci_disconnect_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_switch_database_args=function OmniSci_switch_database_args(args){this.session=null;this.dbname=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dbname!==undefined&&args.dbname!==null){this.dbname=args.dbname;}}};OmniSci_switch_database_args.prototype={};OmniSci_switch_database_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.dbname=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_switch_database_args.prototype.write=function(output){output.writeStructBegin('OmniSci_switch_database_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dbname!==null&&this.dbname!==undefined){output.writeFieldBegin('dbname',Thrift.Type.STRING,2);output.writeString(this.dbname);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_switch_database_result=function OmniSci_switch_database_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_switch_database_result.prototype={};OmniSci_switch_database_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_switch_database_result.prototype.write=function(output){output.writeStructBegin('OmniSci_switch_database_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_clone_session_args=function OmniSci_clone_session_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_clone_session_args.prototype={};OmniSci_clone_session_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_clone_session_args.prototype.write=function(output){output.writeStructBegin('OmniSci_clone_session_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_clone_session_result=function OmniSci_clone_session_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_clone_session_result.prototype={};OmniSci_clone_session_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_clone_session_result.prototype.write=function(output){output.writeStructBegin('OmniSci_clone_session_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_server_status_args=function OmniSci_get_server_status_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_server_status_args.prototype={};OmniSci_get_server_status_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_server_status_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_server_status_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_server_status_result=function OmniSci_get_server_status_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TServerStatus(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_server_status_result.prototype={};OmniSci_get_server_status_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TServerStatus();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_server_status_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_server_status_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_status_args=function OmniSci_get_status_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_status_args.prototype={};OmniSci_get_status_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_status_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_status_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_status_result=function OmniSci_get_status_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TServerStatus]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_status_result.prototype={};OmniSci_get_status_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3186=input.readListBegin();var _size185=_rtmp3186.size||0;for(var _i187=0;_i187<_size185;++_i187){var elem188=null;elem188=new ttypes.TServerStatus();elem188.read(input);this.success.push(elem188);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_status_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_status_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter189 in this.success){if(this.success.hasOwnProperty(iter189)){iter189=this.success[iter189];iter189.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_hardware_info_args=function OmniSci_get_hardware_info_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_hardware_info_args.prototype={};OmniSci_get_hardware_info_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_hardware_info_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_hardware_info_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_hardware_info_result=function OmniSci_get_hardware_info_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TClusterHardwareInfo(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_hardware_info_result.prototype={};OmniSci_get_hardware_info_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TClusterHardwareInfo();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_hardware_info_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_hardware_info_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_tables_args=function OmniSci_get_tables_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_tables_args.prototype={};OmniSci_get_tables_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_tables_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_tables_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_tables_result=function OmniSci_get_tables_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_tables_result.prototype={};OmniSci_get_tables_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3191=input.readListBegin();var _size190=_rtmp3191.size||0;for(var _i192=0;_i192<_size190;++_i192){var elem193=null;elem193=input.readString();this.success.push(elem193);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_tables_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_tables_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter194 in this.success){if(this.success.hasOwnProperty(iter194)){iter194=this.success[iter194];output.writeString(iter194);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_physical_tables_args=function OmniSci_get_physical_tables_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_physical_tables_args.prototype={};OmniSci_get_physical_tables_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_physical_tables_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_physical_tables_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_physical_tables_result=function OmniSci_get_physical_tables_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_physical_tables_result.prototype={};OmniSci_get_physical_tables_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3196=input.readListBegin();var _size195=_rtmp3196.size||0;for(var _i197=0;_i197<_size195;++_i197){var elem198=null;elem198=input.readString();this.success.push(elem198);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_physical_tables_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_physical_tables_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter199 in this.success){if(this.success.hasOwnProperty(iter199)){iter199=this.success[iter199];output.writeString(iter199);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_views_args=function OmniSci_get_views_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_views_args.prototype={};OmniSci_get_views_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_views_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_views_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_views_result=function OmniSci_get_views_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_views_result.prototype={};OmniSci_get_views_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3201=input.readListBegin();var _size200=_rtmp3201.size||0;for(var _i202=0;_i202<_size200;++_i202){var elem203=null;elem203=input.readString();this.success.push(elem203);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_views_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_views_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter204 in this.success){if(this.success.hasOwnProperty(iter204)){iter204=this.success[iter204];output.writeString(iter204);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_tables_meta_args=function OmniSci_get_tables_meta_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_tables_meta_args.prototype={};OmniSci_get_tables_meta_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_tables_meta_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_tables_meta_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_tables_meta_result=function OmniSci_get_tables_meta_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TTableMeta]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_tables_meta_result.prototype={};OmniSci_get_tables_meta_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3206=input.readListBegin();var _size205=_rtmp3206.size||0;for(var _i207=0;_i207<_size205;++_i207){var elem208=null;elem208=new ttypes.TTableMeta();elem208.read(input);this.success.push(elem208);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_tables_meta_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_tables_meta_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter209 in this.success){if(this.success.hasOwnProperty(iter209)){iter209=this.success[iter209];iter209.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_table_details_args=function OmniSci_get_table_details_args(args){this.session=null;this.table_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}}};OmniSci_get_table_details_args.prototype={};OmniSci_get_table_details_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_table_details_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_table_details_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_table_details_result=function OmniSci_get_table_details_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TTableDetails(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_table_details_result.prototype={};OmniSci_get_table_details_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TTableDetails();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_table_details_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_table_details_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_internal_table_details_args=function OmniSci_get_internal_table_details_args(args){this.session=null;this.table_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}}};OmniSci_get_internal_table_details_args.prototype={};OmniSci_get_internal_table_details_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_internal_table_details_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_internal_table_details_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_internal_table_details_result=function OmniSci_get_internal_table_details_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TTableDetails(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_internal_table_details_result.prototype={};OmniSci_get_internal_table_details_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TTableDetails();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_internal_table_details_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_internal_table_details_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_users_args=function OmniSci_get_users_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_users_args.prototype={};OmniSci_get_users_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_users_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_users_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_users_result=function OmniSci_get_users_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_users_result.prototype={};OmniSci_get_users_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3211=input.readListBegin();var _size210=_rtmp3211.size||0;for(var _i212=0;_i212<_size210;++_i212){var elem213=null;elem213=input.readString();this.success.push(elem213);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_users_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_users_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter214 in this.success){if(this.success.hasOwnProperty(iter214)){iter214=this.success[iter214];output.writeString(iter214);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_databases_args=function OmniSci_get_databases_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_databases_args.prototype={};OmniSci_get_databases_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_databases_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_databases_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_databases_result=function OmniSci_get_databases_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDBInfo]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_databases_result.prototype={};OmniSci_get_databases_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3216=input.readListBegin();var _size215=_rtmp3216.size||0;for(var _i217=0;_i217<_size215;++_i217){var elem218=null;elem218=new ttypes.TDBInfo();elem218.read(input);this.success.push(elem218);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_databases_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_databases_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter219 in this.success){if(this.success.hasOwnProperty(iter219)){iter219=this.success[iter219];iter219.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_version_args=function OmniSci_get_version_args(args){};OmniSci_get_version_args.prototype={};OmniSci_get_version_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;if(ftype==Thrift.Type.STOP){break;}input.skip(ftype);input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_version_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_version_args');output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_version_result=function OmniSci_get_version_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_version_result.prototype={};OmniSci_get_version_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_version_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_version_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_start_heap_profile_args=function OmniSci_start_heap_profile_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_start_heap_profile_args.prototype={};OmniSci_start_heap_profile_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_start_heap_profile_args.prototype.write=function(output){output.writeStructBegin('OmniSci_start_heap_profile_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_start_heap_profile_result=function OmniSci_start_heap_profile_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_start_heap_profile_result.prototype={};OmniSci_start_heap_profile_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_start_heap_profile_result.prototype.write=function(output){output.writeStructBegin('OmniSci_start_heap_profile_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_stop_heap_profile_args=function OmniSci_stop_heap_profile_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_stop_heap_profile_args.prototype={};OmniSci_stop_heap_profile_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_stop_heap_profile_args.prototype.write=function(output){output.writeStructBegin('OmniSci_stop_heap_profile_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_stop_heap_profile_result=function OmniSci_stop_heap_profile_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_stop_heap_profile_result.prototype={};OmniSci_stop_heap_profile_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_stop_heap_profile_result.prototype.write=function(output){output.writeStructBegin('OmniSci_stop_heap_profile_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_heap_profile_args=function OmniSci_get_heap_profile_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_heap_profile_args.prototype={};OmniSci_get_heap_profile_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_heap_profile_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_heap_profile_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_heap_profile_result=function OmniSci_get_heap_profile_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_heap_profile_result.prototype={};OmniSci_get_heap_profile_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_heap_profile_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_heap_profile_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_memory_args=function OmniSci_get_memory_args(args){this.session=null;this.memory_level=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.memory_level!==undefined&&args.memory_level!==null){this.memory_level=args.memory_level;}}};OmniSci_get_memory_args.prototype={};OmniSci_get_memory_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.memory_level=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_memory_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_memory_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.memory_level!==null&&this.memory_level!==undefined){output.writeFieldBegin('memory_level',Thrift.Type.STRING,2);output.writeString(this.memory_level);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_memory_result=function OmniSci_get_memory_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TNodeMemoryInfo]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_memory_result.prototype={};OmniSci_get_memory_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3221=input.readListBegin();var _size220=_rtmp3221.size||0;for(var _i222=0;_i222<_size220;++_i222){var elem223=null;elem223=new ttypes.TNodeMemoryInfo();elem223.read(input);this.success.push(elem223);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_memory_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_memory_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter224 in this.success){if(this.success.hasOwnProperty(iter224)){iter224=this.success[iter224];iter224.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_clear_cpu_memory_args=function OmniSci_clear_cpu_memory_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_clear_cpu_memory_args.prototype={};OmniSci_clear_cpu_memory_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_clear_cpu_memory_args.prototype.write=function(output){output.writeStructBegin('OmniSci_clear_cpu_memory_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_clear_cpu_memory_result=function OmniSci_clear_cpu_memory_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_clear_cpu_memory_result.prototype={};OmniSci_clear_cpu_memory_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_clear_cpu_memory_result.prototype.write=function(output){output.writeStructBegin('OmniSci_clear_cpu_memory_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_clear_gpu_memory_args=function OmniSci_clear_gpu_memory_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_clear_gpu_memory_args.prototype={};OmniSci_clear_gpu_memory_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_clear_gpu_memory_args.prototype.write=function(output){output.writeStructBegin('OmniSci_clear_gpu_memory_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_clear_gpu_memory_result=function OmniSci_clear_gpu_memory_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_clear_gpu_memory_result.prototype={};OmniSci_clear_gpu_memory_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_clear_gpu_memory_result.prototype.write=function(output){output.writeStructBegin('OmniSci_clear_gpu_memory_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_table_epoch_args=function OmniSci_set_table_epoch_args(args){this.session=null;this.db_id=null;this.table_id=null;this.new_epoch=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.db_id!==undefined&&args.db_id!==null){this.db_id=args.db_id;}if(args.table_id!==undefined&&args.table_id!==null){this.table_id=args.table_id;}if(args.new_epoch!==undefined&&args.new_epoch!==null){this.new_epoch=args.new_epoch;}}};OmniSci_set_table_epoch_args.prototype={};OmniSci_set_table_epoch_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.db_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.table_id=input.readI32();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.new_epoch=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_table_epoch_args.prototype.write=function(output){output.writeStructBegin('OmniSci_set_table_epoch_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.db_id!==null&&this.db_id!==undefined){output.writeFieldBegin('db_id',Thrift.Type.I32,2);output.writeI32(this.db_id);output.writeFieldEnd();}if(this.table_id!==null&&this.table_id!==undefined){output.writeFieldBegin('table_id',Thrift.Type.I32,3);output.writeI32(this.table_id);output.writeFieldEnd();}if(this.new_epoch!==null&&this.new_epoch!==undefined){output.writeFieldBegin('new_epoch',Thrift.Type.I32,4);output.writeI32(this.new_epoch);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_table_epoch_result=function OmniSci_set_table_epoch_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_set_table_epoch_result.prototype={};OmniSci_set_table_epoch_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_table_epoch_result.prototype.write=function(output){output.writeStructBegin('OmniSci_set_table_epoch_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_table_epoch_by_name_args=function OmniSci_set_table_epoch_by_name_args(args){this.session=null;this.table_name=null;this.new_epoch=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.new_epoch!==undefined&&args.new_epoch!==null){this.new_epoch=args.new_epoch;}}};OmniSci_set_table_epoch_by_name_args.prototype={};OmniSci_set_table_epoch_by_name_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.new_epoch=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_table_epoch_by_name_args.prototype.write=function(output){output.writeStructBegin('OmniSci_set_table_epoch_by_name_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.new_epoch!==null&&this.new_epoch!==undefined){output.writeFieldBegin('new_epoch',Thrift.Type.I32,3);output.writeI32(this.new_epoch);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_table_epoch_by_name_result=function OmniSci_set_table_epoch_by_name_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_set_table_epoch_by_name_result.prototype={};OmniSci_set_table_epoch_by_name_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_table_epoch_by_name_result.prototype.write=function(output){output.writeStructBegin('OmniSci_set_table_epoch_by_name_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_table_epoch_args=function OmniSci_get_table_epoch_args(args){this.session=null;this.db_id=null;this.table_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.db_id!==undefined&&args.db_id!==null){this.db_id=args.db_id;}if(args.table_id!==undefined&&args.table_id!==null){this.table_id=args.table_id;}}};OmniSci_get_table_epoch_args.prototype={};OmniSci_get_table_epoch_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.db_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.table_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_table_epoch_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_table_epoch_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.db_id!==null&&this.db_id!==undefined){output.writeFieldBegin('db_id',Thrift.Type.I32,2);output.writeI32(this.db_id);output.writeFieldEnd();}if(this.table_id!==null&&this.table_id!==undefined){output.writeFieldBegin('table_id',Thrift.Type.I32,3);output.writeI32(this.table_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_table_epoch_result=function OmniSci_get_table_epoch_result(args){this.success=null;if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}}};OmniSci_get_table_epoch_result.prototype={};OmniSci_get_table_epoch_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.I32){this.success=input.readI32();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_table_epoch_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_table_epoch_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.I32,0);output.writeI32(this.success);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_table_epoch_by_name_args=function OmniSci_get_table_epoch_by_name_args(args){this.session=null;this.table_name=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}}};OmniSci_get_table_epoch_by_name_args.prototype={};OmniSci_get_table_epoch_by_name_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_table_epoch_by_name_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_table_epoch_by_name_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_table_epoch_by_name_result=function OmniSci_get_table_epoch_by_name_result(args){this.success=null;if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}}};OmniSci_get_table_epoch_by_name_result.prototype={};OmniSci_get_table_epoch_by_name_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.I32){this.success=input.readI32();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_table_epoch_by_name_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_table_epoch_by_name_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.I32,0);output.writeI32(this.success);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_table_epochs_args=function OmniSci_get_table_epochs_args(args){this.session=null;this.db_id=null;this.table_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.db_id!==undefined&&args.db_id!==null){this.db_id=args.db_id;}if(args.table_id!==undefined&&args.table_id!==null){this.table_id=args.table_id;}}};OmniSci_get_table_epochs_args.prototype={};OmniSci_get_table_epochs_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.db_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.table_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_table_epochs_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_table_epochs_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.db_id!==null&&this.db_id!==undefined){output.writeFieldBegin('db_id',Thrift.Type.I32,2);output.writeI32(this.db_id);output.writeFieldEnd();}if(this.table_id!==null&&this.table_id!==undefined){output.writeFieldBegin('table_id',Thrift.Type.I32,3);output.writeI32(this.table_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_table_epochs_result=function OmniSci_get_table_epochs_result(args){this.success=null;if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TTableEpochInfo]);}}};OmniSci_get_table_epochs_result.prototype={};OmniSci_get_table_epochs_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3226=input.readListBegin();var _size225=_rtmp3226.size||0;for(var _i227=0;_i227<_size225;++_i227){var elem228=null;elem228=new ttypes.TTableEpochInfo();elem228.read(input);this.success.push(elem228);}input.readListEnd();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_table_epochs_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_table_epochs_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter229 in this.success){if(this.success.hasOwnProperty(iter229)){iter229=this.success[iter229];iter229.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_table_epochs_args=function OmniSci_set_table_epochs_args(args){this.session=null;this.db_id=null;this.table_epochs=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.db_id!==undefined&&args.db_id!==null){this.db_id=args.db_id;}if(args.table_epochs!==undefined&&args.table_epochs!==null){this.table_epochs=Thrift.copyList(args.table_epochs,[ttypes.TTableEpochInfo]);}}};OmniSci_set_table_epochs_args.prototype={};OmniSci_set_table_epochs_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.db_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.table_epochs=[];var _rtmp3231=input.readListBegin();var _size230=_rtmp3231.size||0;for(var _i232=0;_i232<_size230;++_i232){var elem233=null;elem233=new ttypes.TTableEpochInfo();elem233.read(input);this.table_epochs.push(elem233);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_table_epochs_args.prototype.write=function(output){output.writeStructBegin('OmniSci_set_table_epochs_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.db_id!==null&&this.db_id!==undefined){output.writeFieldBegin('db_id',Thrift.Type.I32,2);output.writeI32(this.db_id);output.writeFieldEnd();}if(this.table_epochs!==null&&this.table_epochs!==undefined){output.writeFieldBegin('table_epochs',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.table_epochs.length);for(var iter234 in this.table_epochs){if(this.table_epochs.hasOwnProperty(iter234)){iter234=this.table_epochs[iter234];iter234.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_table_epochs_result=function OmniSci_set_table_epochs_result(args){};OmniSci_set_table_epochs_result.prototype={};OmniSci_set_table_epochs_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;if(ftype==Thrift.Type.STOP){break;}input.skip(ftype);input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_table_epochs_result.prototype.write=function(output){output.writeStructBegin('OmniSci_set_table_epochs_result');output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_session_info_args=function OmniSci_get_session_info_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_session_info_args.prototype={};OmniSci_get_session_info_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_session_info_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_session_info_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_session_info_result=function OmniSci_get_session_info_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TSessionInfo(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_session_info_result.prototype={};OmniSci_get_session_info_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TSessionInfo();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_session_info_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_session_info_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_sql_execute_args=function OmniSci_sql_execute_args(args){this.session=null;this.query=null;this.column_format=null;this.nonce=null;this.first_n=-1;this.at_most_n=-1;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}if(args.column_format!==undefined&&args.column_format!==null){this.column_format=args.column_format;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}if(args.first_n!==undefined&&args.first_n!==null){this.first_n=args.first_n;}if(args.at_most_n!==undefined&&args.at_most_n!==null){this.at_most_n=args.at_most_n;}}};OmniSci_sql_execute_args.prototype={};OmniSci_sql_execute_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.BOOL){this.column_format=input.readBool();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.I32){this.first_n=input.readI32();}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.I32){this.at_most_n=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_sql_execute_args.prototype.write=function(output){output.writeStructBegin('OmniSci_sql_execute_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}if(this.column_format!==null&&this.column_format!==undefined){output.writeFieldBegin('column_format',Thrift.Type.BOOL,3);output.writeBool(this.column_format);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,4);output.writeString(this.nonce);output.writeFieldEnd();}if(this.first_n!==null&&this.first_n!==undefined){output.writeFieldBegin('first_n',Thrift.Type.I32,5);output.writeI32(this.first_n);output.writeFieldEnd();}if(this.at_most_n!==null&&this.at_most_n!==undefined){output.writeFieldBegin('at_most_n',Thrift.Type.I32,6);output.writeI32(this.at_most_n);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_sql_execute_result=function OmniSci_sql_execute_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TQueryResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_sql_execute_result.prototype={};OmniSci_sql_execute_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TQueryResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_sql_execute_result.prototype.write=function(output){output.writeStructBegin('OmniSci_sql_execute_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_sql_execute_df_args=function OmniSci_sql_execute_df_args(args){this.session=null;this.query=null;this.device_type=null;this.device_id=0;this.first_n=-1;this.transport_method=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}if(args.device_type!==undefined&&args.device_type!==null){this.device_type=args.device_type;}if(args.device_id!==undefined&&args.device_id!==null){this.device_id=args.device_id;}if(args.first_n!==undefined&&args.first_n!==null){this.first_n=args.first_n;}if(args.transport_method!==undefined&&args.transport_method!==null){this.transport_method=args.transport_method;}}};OmniSci_sql_execute_df_args.prototype={};OmniSci_sql_execute_df_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.device_type=input.readI32();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.device_id=input.readI32();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.I32){this.first_n=input.readI32();}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.I32){this.transport_method=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_sql_execute_df_args.prototype.write=function(output){output.writeStructBegin('OmniSci_sql_execute_df_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}if(this.device_type!==null&&this.device_type!==undefined){output.writeFieldBegin('device_type',Thrift.Type.I32,3);output.writeI32(this.device_type);output.writeFieldEnd();}if(this.device_id!==null&&this.device_id!==undefined){output.writeFieldBegin('device_id',Thrift.Type.I32,4);output.writeI32(this.device_id);output.writeFieldEnd();}if(this.first_n!==null&&this.first_n!==undefined){output.writeFieldBegin('first_n',Thrift.Type.I32,5);output.writeI32(this.first_n);output.writeFieldEnd();}if(this.transport_method!==null&&this.transport_method!==undefined){output.writeFieldBegin('transport_method',Thrift.Type.I32,6);output.writeI32(this.transport_method);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_sql_execute_df_result=function OmniSci_sql_execute_df_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TDataFrame(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_sql_execute_df_result.prototype={};OmniSci_sql_execute_df_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TDataFrame();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_sql_execute_df_result.prototype.write=function(output){output.writeStructBegin('OmniSci_sql_execute_df_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_sql_execute_gdf_args=function OmniSci_sql_execute_gdf_args(args){this.session=null;this.query=null;this.device_id=0;this.first_n=-1;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}if(args.device_id!==undefined&&args.device_id!==null){this.device_id=args.device_id;}if(args.first_n!==undefined&&args.first_n!==null){this.first_n=args.first_n;}}};OmniSci_sql_execute_gdf_args.prototype={};OmniSci_sql_execute_gdf_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.device_id=input.readI32();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.first_n=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_sql_execute_gdf_args.prototype.write=function(output){output.writeStructBegin('OmniSci_sql_execute_gdf_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}if(this.device_id!==null&&this.device_id!==undefined){output.writeFieldBegin('device_id',Thrift.Type.I32,3);output.writeI32(this.device_id);output.writeFieldEnd();}if(this.first_n!==null&&this.first_n!==undefined){output.writeFieldBegin('first_n',Thrift.Type.I32,4);output.writeI32(this.first_n);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_sql_execute_gdf_result=function OmniSci_sql_execute_gdf_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TDataFrame(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_sql_execute_gdf_result.prototype={};OmniSci_sql_execute_gdf_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TDataFrame();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_sql_execute_gdf_result.prototype.write=function(output){output.writeStructBegin('OmniSci_sql_execute_gdf_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_deallocate_df_args=function OmniSci_deallocate_df_args(args){this.session=null;this.df=null;this.device_type=null;this.device_id=0;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.df!==undefined&&args.df!==null){this.df=new ttypes.TDataFrame(args.df);}if(args.device_type!==undefined&&args.device_type!==null){this.device_type=args.device_type;}if(args.device_id!==undefined&&args.device_id!==null){this.device_id=args.device_id;}}};OmniSci_deallocate_df_args.prototype={};OmniSci_deallocate_df_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRUCT){this.df=new ttypes.TDataFrame();this.df.read(input);}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.device_type=input.readI32();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.device_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_deallocate_df_args.prototype.write=function(output){output.writeStructBegin('OmniSci_deallocate_df_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.df!==null&&this.df!==undefined){output.writeFieldBegin('df',Thrift.Type.STRUCT,2);this.df.write(output);output.writeFieldEnd();}if(this.device_type!==null&&this.device_type!==undefined){output.writeFieldBegin('device_type',Thrift.Type.I32,3);output.writeI32(this.device_type);output.writeFieldEnd();}if(this.device_id!==null&&this.device_id!==undefined){output.writeFieldBegin('device_id',Thrift.Type.I32,4);output.writeI32(this.device_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_deallocate_df_result=function OmniSci_deallocate_df_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_deallocate_df_result.prototype={};OmniSci_deallocate_df_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_deallocate_df_result.prototype.write=function(output){output.writeStructBegin('OmniSci_deallocate_df_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_interrupt_args=function OmniSci_interrupt_args(args){this.query_session=null;this.interrupt_session=null;if(args){if(args.query_session!==undefined&&args.query_session!==null){this.query_session=args.query_session;}if(args.interrupt_session!==undefined&&args.interrupt_session!==null){this.interrupt_session=args.interrupt_session;}}};OmniSci_interrupt_args.prototype={};OmniSci_interrupt_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.query_session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.interrupt_session=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_interrupt_args.prototype.write=function(output){output.writeStructBegin('OmniSci_interrupt_args');if(this.query_session!==null&&this.query_session!==undefined){output.writeFieldBegin('query_session',Thrift.Type.STRING,1);output.writeString(this.query_session);output.writeFieldEnd();}if(this.interrupt_session!==null&&this.interrupt_session!==undefined){output.writeFieldBegin('interrupt_session',Thrift.Type.STRING,2);output.writeString(this.interrupt_session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_interrupt_result=function OmniSci_interrupt_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_interrupt_result.prototype={};OmniSci_interrupt_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_interrupt_result.prototype.write=function(output){output.writeStructBegin('OmniSci_interrupt_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_sql_validate_args=function OmniSci_sql_validate_args(args){this.session=null;this.query=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}}};OmniSci_sql_validate_args.prototype={};OmniSci_sql_validate_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_sql_validate_args.prototype.write=function(output){output.writeStructBegin('OmniSci_sql_validate_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_sql_validate_result=function OmniSci_sql_validate_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TColumnType]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_sql_validate_result.prototype={};OmniSci_sql_validate_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3236=input.readListBegin();var _size235=_rtmp3236.size||0;for(var _i237=0;_i237<_size235;++_i237){var elem238=null;elem238=new ttypes.TColumnType();elem238.read(input);this.success.push(elem238);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_sql_validate_result.prototype.write=function(output){output.writeStructBegin('OmniSci_sql_validate_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter239 in this.success){if(this.success.hasOwnProperty(iter239)){iter239=this.success[iter239];iter239.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_completion_hints_args=function OmniSci_get_completion_hints_args(args){this.session=null;this.sql=null;this.cursor=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.sql!==undefined&&args.sql!==null){this.sql=args.sql;}if(args.cursor!==undefined&&args.cursor!==null){this.cursor=args.cursor;}}};OmniSci_get_completion_hints_args.prototype={};OmniSci_get_completion_hints_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.sql=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.cursor=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_completion_hints_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_completion_hints_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.sql!==null&&this.sql!==undefined){output.writeFieldBegin('sql',Thrift.Type.STRING,2);output.writeString(this.sql);output.writeFieldEnd();}if(this.cursor!==null&&this.cursor!==undefined){output.writeFieldBegin('cursor',Thrift.Type.I32,3);output.writeI32(this.cursor);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_completion_hints_result=function OmniSci_get_completion_hints_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[completion_hints_ttypes.TCompletionHint]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_completion_hints_result.prototype={};OmniSci_get_completion_hints_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3241=input.readListBegin();var _size240=_rtmp3241.size||0;for(var _i242=0;_i242<_size240;++_i242){var elem243=null;elem243=new completion_hints_ttypes.TCompletionHint();elem243.read(input);this.success.push(elem243);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_completion_hints_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_completion_hints_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter244 in this.success){if(this.success.hasOwnProperty(iter244)){iter244=this.success[iter244];iter244.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_execution_mode_args=function OmniSci_set_execution_mode_args(args){this.session=null;this.mode=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.mode!==undefined&&args.mode!==null){this.mode=args.mode;}}};OmniSci_set_execution_mode_args.prototype={};OmniSci_set_execution_mode_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.mode=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_execution_mode_args.prototype.write=function(output){output.writeStructBegin('OmniSci_set_execution_mode_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.mode!==null&&this.mode!==undefined){output.writeFieldBegin('mode',Thrift.Type.I32,2);output.writeI32(this.mode);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_execution_mode_result=function OmniSci_set_execution_mode_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_set_execution_mode_result.prototype={};OmniSci_set_execution_mode_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_execution_mode_result.prototype.write=function(output){output.writeStructBegin('OmniSci_set_execution_mode_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_render_vega_args=function OmniSci_render_vega_args(args){this.session=null;this.widget_id=null;this.vega_json=null;this.compression_level=null;this.nonce=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.widget_id!==undefined&&args.widget_id!==null){this.widget_id=args.widget_id;}if(args.vega_json!==undefined&&args.vega_json!==null){this.vega_json=args.vega_json;}if(args.compression_level!==undefined&&args.compression_level!==null){this.compression_level=args.compression_level;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}}};OmniSci_render_vega_args.prototype={};OmniSci_render_vega_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I64){this.widget_id=input.readI64();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.vega_json=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.compression_level=input.readI32();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_render_vega_args.prototype.write=function(output){output.writeStructBegin('OmniSci_render_vega_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.widget_id!==null&&this.widget_id!==undefined){output.writeFieldBegin('widget_id',Thrift.Type.I64,2);output.writeI64(this.widget_id);output.writeFieldEnd();}if(this.vega_json!==null&&this.vega_json!==undefined){output.writeFieldBegin('vega_json',Thrift.Type.STRING,3);output.writeString(this.vega_json);output.writeFieldEnd();}if(this.compression_level!==null&&this.compression_level!==undefined){output.writeFieldBegin('compression_level',Thrift.Type.I32,4);output.writeI32(this.compression_level);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,5);output.writeString(this.nonce);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_render_vega_result=function OmniSci_render_vega_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TRenderResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_render_vega_result.prototype={};OmniSci_render_vega_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TRenderResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_render_vega_result.prototype.write=function(output){output.writeStructBegin('OmniSci_render_vega_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_result_row_for_pixel_args=function OmniSci_get_result_row_for_pixel_args(args){this.session=null;this.widget_id=null;this.pixel=null;this.table_col_names=null;this.column_format=null;this.pixelRadius=null;this.nonce=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.widget_id!==undefined&&args.widget_id!==null){this.widget_id=args.widget_id;}if(args.pixel!==undefined&&args.pixel!==null){this.pixel=new ttypes.TPixel(args.pixel);}if(args.table_col_names!==undefined&&args.table_col_names!==null){this.table_col_names=Thrift.copyMap(args.table_col_names,[Thrift.copyList,null]);}if(args.column_format!==undefined&&args.column_format!==null){this.column_format=args.column_format;}if(args.pixelRadius!==undefined&&args.pixelRadius!==null){this.pixelRadius=args.pixelRadius;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}}};OmniSci_get_result_row_for_pixel_args.prototype={};OmniSci_get_result_row_for_pixel_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I64){this.widget_id=input.readI64();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRUCT){this.pixel=new ttypes.TPixel();this.pixel.read(input);}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.MAP){this.table_col_names={};var _rtmp3246=input.readMapBegin();var _size245=_rtmp3246.size||0;for(var _i247=0;_i247<_size245;++_i247){var key248=null;var val249=null;key248=input.readString();val249=[];var _rtmp3251=input.readListBegin();var _size250=_rtmp3251.size||0;for(var _i252=0;_i252<_size250;++_i252){var elem253=null;elem253=input.readString();val249.push(elem253);}input.readListEnd();this.table_col_names[key248]=val249;}input.readMapEnd();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.BOOL){this.column_format=input.readBool();}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.I32){this.pixelRadius=input.readI32();}else{input.skip(ftype);}break;case 7:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_result_row_for_pixel_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_result_row_for_pixel_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.widget_id!==null&&this.widget_id!==undefined){output.writeFieldBegin('widget_id',Thrift.Type.I64,2);output.writeI64(this.widget_id);output.writeFieldEnd();}if(this.pixel!==null&&this.pixel!==undefined){output.writeFieldBegin('pixel',Thrift.Type.STRUCT,3);this.pixel.write(output);output.writeFieldEnd();}if(this.table_col_names!==null&&this.table_col_names!==undefined){output.writeFieldBegin('table_col_names',Thrift.Type.MAP,4);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.LIST,Thrift.objectLength(this.table_col_names));for(var kiter254 in this.table_col_names){if(this.table_col_names.hasOwnProperty(kiter254)){var viter255=this.table_col_names[kiter254];output.writeString(kiter254);output.writeListBegin(Thrift.Type.STRING,viter255.length);for(var iter256 in viter255){if(viter255.hasOwnProperty(iter256)){iter256=viter255[iter256];output.writeString(iter256);}}output.writeListEnd();}}output.writeMapEnd();output.writeFieldEnd();}if(this.column_format!==null&&this.column_format!==undefined){output.writeFieldBegin('column_format',Thrift.Type.BOOL,5);output.writeBool(this.column_format);output.writeFieldEnd();}if(this.pixelRadius!==null&&this.pixelRadius!==undefined){output.writeFieldBegin('pixelRadius',Thrift.Type.I32,6);output.writeI32(this.pixelRadius);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,7);output.writeString(this.nonce);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_result_row_for_pixel_result=function OmniSci_get_result_row_for_pixel_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TPixelTableRowResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_result_row_for_pixel_result.prototype={};OmniSci_get_result_row_for_pixel_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TPixelTableRowResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_result_row_for_pixel_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_result_row_for_pixel_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_dashboard_args=function OmniSci_get_dashboard_args(args){this.session=null;this.dashboard_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}}};OmniSci_get_dashboard_args.prototype={};OmniSci_get_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_dashboard_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_dashboard_result=function OmniSci_get_dashboard_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TDashboard(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_dashboard_result.prototype={};OmniSci_get_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TDashboard();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_dashboard_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_dashboard_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_dashboards_args=function OmniSci_get_dashboards_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_dashboards_args.prototype={};OmniSci_get_dashboards_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_dashboards_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_dashboards_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_dashboards_result=function OmniSci_get_dashboards_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDashboard]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_dashboards_result.prototype={};OmniSci_get_dashboards_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3258=input.readListBegin();var _size257=_rtmp3258.size||0;for(var _i259=0;_i259<_size257;++_i259){var elem260=null;elem260=new ttypes.TDashboard();elem260.read(input);this.success.push(elem260);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_dashboards_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_dashboards_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter261 in this.success){if(this.success.hasOwnProperty(iter261)){iter261=this.success[iter261];iter261.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_create_dashboard_args=function OmniSci_create_dashboard_args(args){this.session=null;this.dashboard_name=null;this.dashboard_state=null;this.image_hash=null;this.dashboard_metadata=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_name!==undefined&&args.dashboard_name!==null){this.dashboard_name=args.dashboard_name;}if(args.dashboard_state!==undefined&&args.dashboard_state!==null){this.dashboard_state=args.dashboard_state;}if(args.image_hash!==undefined&&args.image_hash!==null){this.image_hash=args.image_hash;}if(args.dashboard_metadata!==undefined&&args.dashboard_metadata!==null){this.dashboard_metadata=args.dashboard_metadata;}}};OmniSci_create_dashboard_args.prototype={};OmniSci_create_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.dashboard_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.dashboard_state=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.image_hash=input.readString();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRING){this.dashboard_metadata=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_create_dashboard_args.prototype.write=function(output){output.writeStructBegin('OmniSci_create_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_name!==null&&this.dashboard_name!==undefined){output.writeFieldBegin('dashboard_name',Thrift.Type.STRING,2);output.writeString(this.dashboard_name);output.writeFieldEnd();}if(this.dashboard_state!==null&&this.dashboard_state!==undefined){output.writeFieldBegin('dashboard_state',Thrift.Type.STRING,3);output.writeString(this.dashboard_state);output.writeFieldEnd();}if(this.image_hash!==null&&this.image_hash!==undefined){output.writeFieldBegin('image_hash',Thrift.Type.STRING,4);output.writeString(this.image_hash);output.writeFieldEnd();}if(this.dashboard_metadata!==null&&this.dashboard_metadata!==undefined){output.writeFieldBegin('dashboard_metadata',Thrift.Type.STRING,5);output.writeString(this.dashboard_metadata);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_create_dashboard_result=function OmniSci_create_dashboard_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_create_dashboard_result.prototype={};OmniSci_create_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.I32){this.success=input.readI32();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_create_dashboard_result.prototype.write=function(output){output.writeStructBegin('OmniSci_create_dashboard_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.I32,0);output.writeI32(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_replace_dashboard_args=function OmniSci_replace_dashboard_args(args){this.session=null;this.dashboard_id=null;this.dashboard_name=null;this.dashboard_owner=null;this.dashboard_state=null;this.image_hash=null;this.dashboard_metadata=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}if(args.dashboard_name!==undefined&&args.dashboard_name!==null){this.dashboard_name=args.dashboard_name;}if(args.dashboard_owner!==undefined&&args.dashboard_owner!==null){this.dashboard_owner=args.dashboard_owner;}if(args.dashboard_state!==undefined&&args.dashboard_state!==null){this.dashboard_state=args.dashboard_state;}if(args.image_hash!==undefined&&args.image_hash!==null){this.image_hash=args.image_hash;}if(args.dashboard_metadata!==undefined&&args.dashboard_metadata!==null){this.dashboard_metadata=args.dashboard_metadata;}}};OmniSci_replace_dashboard_args.prototype={};OmniSci_replace_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.dashboard_name=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.dashboard_owner=input.readString();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRING){this.dashboard_state=input.readString();}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.STRING){this.image_hash=input.readString();}else{input.skip(ftype);}break;case 7:if(ftype==Thrift.Type.STRING){this.dashboard_metadata=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_replace_dashboard_args.prototype.write=function(output){output.writeStructBegin('OmniSci_replace_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}if(this.dashboard_name!==null&&this.dashboard_name!==undefined){output.writeFieldBegin('dashboard_name',Thrift.Type.STRING,3);output.writeString(this.dashboard_name);output.writeFieldEnd();}if(this.dashboard_owner!==null&&this.dashboard_owner!==undefined){output.writeFieldBegin('dashboard_owner',Thrift.Type.STRING,4);output.writeString(this.dashboard_owner);output.writeFieldEnd();}if(this.dashboard_state!==null&&this.dashboard_state!==undefined){output.writeFieldBegin('dashboard_state',Thrift.Type.STRING,5);output.writeString(this.dashboard_state);output.writeFieldEnd();}if(this.image_hash!==null&&this.image_hash!==undefined){output.writeFieldBegin('image_hash',Thrift.Type.STRING,6);output.writeString(this.image_hash);output.writeFieldEnd();}if(this.dashboard_metadata!==null&&this.dashboard_metadata!==undefined){output.writeFieldBegin('dashboard_metadata',Thrift.Type.STRING,7);output.writeString(this.dashboard_metadata);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_replace_dashboard_result=function OmniSci_replace_dashboard_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_replace_dashboard_result.prototype={};OmniSci_replace_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_replace_dashboard_result.prototype.write=function(output){output.writeStructBegin('OmniSci_replace_dashboard_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_delete_dashboard_args=function OmniSci_delete_dashboard_args(args){this.session=null;this.dashboard_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}}};OmniSci_delete_dashboard_args.prototype={};OmniSci_delete_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_delete_dashboard_args.prototype.write=function(output){output.writeStructBegin('OmniSci_delete_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_delete_dashboard_result=function OmniSci_delete_dashboard_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_delete_dashboard_result.prototype={};OmniSci_delete_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_delete_dashboard_result.prototype.write=function(output){output.writeStructBegin('OmniSci_delete_dashboard_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_share_dashboards_args=function OmniSci_share_dashboards_args(args){this.session=null;this.dashboard_ids=null;this.groups=null;this.permissions=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_ids!==undefined&&args.dashboard_ids!==null){this.dashboard_ids=Thrift.copyList(args.dashboard_ids,[null]);}if(args.groups!==undefined&&args.groups!==null){this.groups=Thrift.copyList(args.groups,[null]);}if(args.permissions!==undefined&&args.permissions!==null){this.permissions=new ttypes.TDashboardPermissions(args.permissions);}}};OmniSci_share_dashboards_args.prototype={};OmniSci_share_dashboards_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.LIST){this.dashboard_ids=[];var _rtmp3263=input.readListBegin();var _size262=_rtmp3263.size||0;for(var _i264=0;_i264<_size262;++_i264){var elem265=null;elem265=input.readI32();this.dashboard_ids.push(elem265);}input.readListEnd();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.groups=[];var _rtmp3267=input.readListBegin();var _size266=_rtmp3267.size||0;for(var _i268=0;_i268<_size266;++_i268){var elem269=null;elem269=input.readString();this.groups.push(elem269);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRUCT){this.permissions=new ttypes.TDashboardPermissions();this.permissions.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_share_dashboards_args.prototype.write=function(output){output.writeStructBegin('OmniSci_share_dashboards_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_ids!==null&&this.dashboard_ids!==undefined){output.writeFieldBegin('dashboard_ids',Thrift.Type.LIST,2);output.writeListBegin(Thrift.Type.I32,this.dashboard_ids.length);for(var iter270 in this.dashboard_ids){if(this.dashboard_ids.hasOwnProperty(iter270)){iter270=this.dashboard_ids[iter270];output.writeI32(iter270);}}output.writeListEnd();output.writeFieldEnd();}if(this.groups!==null&&this.groups!==undefined){output.writeFieldBegin('groups',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRING,this.groups.length);for(var iter271 in this.groups){if(this.groups.hasOwnProperty(iter271)){iter271=this.groups[iter271];output.writeString(iter271);}}output.writeListEnd();output.writeFieldEnd();}if(this.permissions!==null&&this.permissions!==undefined){output.writeFieldBegin('permissions',Thrift.Type.STRUCT,4);this.permissions.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_share_dashboards_result=function OmniSci_share_dashboards_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_share_dashboards_result.prototype={};OmniSci_share_dashboards_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_share_dashboards_result.prototype.write=function(output){output.writeStructBegin('OmniSci_share_dashboards_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_delete_dashboards_args=function OmniSci_delete_dashboards_args(args){this.session=null;this.dashboard_ids=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_ids!==undefined&&args.dashboard_ids!==null){this.dashboard_ids=Thrift.copyList(args.dashboard_ids,[null]);}}};OmniSci_delete_dashboards_args.prototype={};OmniSci_delete_dashboards_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.LIST){this.dashboard_ids=[];var _rtmp3273=input.readListBegin();var _size272=_rtmp3273.size||0;for(var _i274=0;_i274<_size272;++_i274){var elem275=null;elem275=input.readI32();this.dashboard_ids.push(elem275);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_delete_dashboards_args.prototype.write=function(output){output.writeStructBegin('OmniSci_delete_dashboards_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_ids!==null&&this.dashboard_ids!==undefined){output.writeFieldBegin('dashboard_ids',Thrift.Type.LIST,2);output.writeListBegin(Thrift.Type.I32,this.dashboard_ids.length);for(var iter276 in this.dashboard_ids){if(this.dashboard_ids.hasOwnProperty(iter276)){iter276=this.dashboard_ids[iter276];output.writeI32(iter276);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_delete_dashboards_result=function OmniSci_delete_dashboards_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_delete_dashboards_result.prototype={};OmniSci_delete_dashboards_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_delete_dashboards_result.prototype.write=function(output){output.writeStructBegin('OmniSci_delete_dashboards_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_share_dashboard_args=function OmniSci_share_dashboard_args(args){this.session=null;this.dashboard_id=null;this.groups=null;this.objects=null;this.permissions=null;this.grant_role=false;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}if(args.groups!==undefined&&args.groups!==null){this.groups=Thrift.copyList(args.groups,[null]);}if(args.objects!==undefined&&args.objects!==null){this.objects=Thrift.copyList(args.objects,[null]);}if(args.permissions!==undefined&&args.permissions!==null){this.permissions=new ttypes.TDashboardPermissions(args.permissions);}if(args.grant_role!==undefined&&args.grant_role!==null){this.grant_role=args.grant_role;}}};OmniSci_share_dashboard_args.prototype={};OmniSci_share_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.groups=[];var _rtmp3278=input.readListBegin();var _size277=_rtmp3278.size||0;for(var _i279=0;_i279<_size277;++_i279){var elem280=null;elem280=input.readString();this.groups.push(elem280);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.LIST){this.objects=[];var _rtmp3282=input.readListBegin();var _size281=_rtmp3282.size||0;for(var _i283=0;_i283<_size281;++_i283){var elem284=null;elem284=input.readString();this.objects.push(elem284);}input.readListEnd();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRUCT){this.permissions=new ttypes.TDashboardPermissions();this.permissions.read(input);}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.BOOL){this.grant_role=input.readBool();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_share_dashboard_args.prototype.write=function(output){output.writeStructBegin('OmniSci_share_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}if(this.groups!==null&&this.groups!==undefined){output.writeFieldBegin('groups',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRING,this.groups.length);for(var iter285 in this.groups){if(this.groups.hasOwnProperty(iter285)){iter285=this.groups[iter285];output.writeString(iter285);}}output.writeListEnd();output.writeFieldEnd();}if(this.objects!==null&&this.objects!==undefined){output.writeFieldBegin('objects',Thrift.Type.LIST,4);output.writeListBegin(Thrift.Type.STRING,this.objects.length);for(var iter286 in this.objects){if(this.objects.hasOwnProperty(iter286)){iter286=this.objects[iter286];output.writeString(iter286);}}output.writeListEnd();output.writeFieldEnd();}if(this.permissions!==null&&this.permissions!==undefined){output.writeFieldBegin('permissions',Thrift.Type.STRUCT,5);this.permissions.write(output);output.writeFieldEnd();}if(this.grant_role!==null&&this.grant_role!==undefined){output.writeFieldBegin('grant_role',Thrift.Type.BOOL,6);output.writeBool(this.grant_role);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_share_dashboard_result=function OmniSci_share_dashboard_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_share_dashboard_result.prototype={};OmniSci_share_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_share_dashboard_result.prototype.write=function(output){output.writeStructBegin('OmniSci_share_dashboard_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_unshare_dashboard_args=function OmniSci_unshare_dashboard_args(args){this.session=null;this.dashboard_id=null;this.groups=null;this.objects=null;this.permissions=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}if(args.groups!==undefined&&args.groups!==null){this.groups=Thrift.copyList(args.groups,[null]);}if(args.objects!==undefined&&args.objects!==null){this.objects=Thrift.copyList(args.objects,[null]);}if(args.permissions!==undefined&&args.permissions!==null){this.permissions=new ttypes.TDashboardPermissions(args.permissions);}}};OmniSci_unshare_dashboard_args.prototype={};OmniSci_unshare_dashboard_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.groups=[];var _rtmp3288=input.readListBegin();var _size287=_rtmp3288.size||0;for(var _i289=0;_i289<_size287;++_i289){var elem290=null;elem290=input.readString();this.groups.push(elem290);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.LIST){this.objects=[];var _rtmp3292=input.readListBegin();var _size291=_rtmp3292.size||0;for(var _i293=0;_i293<_size291;++_i293){var elem294=null;elem294=input.readString();this.objects.push(elem294);}input.readListEnd();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRUCT){this.permissions=new ttypes.TDashboardPermissions();this.permissions.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_unshare_dashboard_args.prototype.write=function(output){output.writeStructBegin('OmniSci_unshare_dashboard_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}if(this.groups!==null&&this.groups!==undefined){output.writeFieldBegin('groups',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRING,this.groups.length);for(var iter295 in this.groups){if(this.groups.hasOwnProperty(iter295)){iter295=this.groups[iter295];output.writeString(iter295);}}output.writeListEnd();output.writeFieldEnd();}if(this.objects!==null&&this.objects!==undefined){output.writeFieldBegin('objects',Thrift.Type.LIST,4);output.writeListBegin(Thrift.Type.STRING,this.objects.length);for(var iter296 in this.objects){if(this.objects.hasOwnProperty(iter296)){iter296=this.objects[iter296];output.writeString(iter296);}}output.writeListEnd();output.writeFieldEnd();}if(this.permissions!==null&&this.permissions!==undefined){output.writeFieldBegin('permissions',Thrift.Type.STRUCT,5);this.permissions.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_unshare_dashboard_result=function OmniSci_unshare_dashboard_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_unshare_dashboard_result.prototype={};OmniSci_unshare_dashboard_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_unshare_dashboard_result.prototype.write=function(output){output.writeStructBegin('OmniSci_unshare_dashboard_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_unshare_dashboards_args=function OmniSci_unshare_dashboards_args(args){this.session=null;this.dashboard_ids=null;this.groups=null;this.permissions=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_ids!==undefined&&args.dashboard_ids!==null){this.dashboard_ids=Thrift.copyList(args.dashboard_ids,[null]);}if(args.groups!==undefined&&args.groups!==null){this.groups=Thrift.copyList(args.groups,[null]);}if(args.permissions!==undefined&&args.permissions!==null){this.permissions=new ttypes.TDashboardPermissions(args.permissions);}}};OmniSci_unshare_dashboards_args.prototype={};OmniSci_unshare_dashboards_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.LIST){this.dashboard_ids=[];var _rtmp3298=input.readListBegin();var _size297=_rtmp3298.size||0;for(var _i299=0;_i299<_size297;++_i299){var elem300=null;elem300=input.readI32();this.dashboard_ids.push(elem300);}input.readListEnd();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.groups=[];var _rtmp3302=input.readListBegin();var _size301=_rtmp3302.size||0;for(var _i303=0;_i303<_size301;++_i303){var elem304=null;elem304=input.readString();this.groups.push(elem304);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRUCT){this.permissions=new ttypes.TDashboardPermissions();this.permissions.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_unshare_dashboards_args.prototype.write=function(output){output.writeStructBegin('OmniSci_unshare_dashboards_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_ids!==null&&this.dashboard_ids!==undefined){output.writeFieldBegin('dashboard_ids',Thrift.Type.LIST,2);output.writeListBegin(Thrift.Type.I32,this.dashboard_ids.length);for(var iter305 in this.dashboard_ids){if(this.dashboard_ids.hasOwnProperty(iter305)){iter305=this.dashboard_ids[iter305];output.writeI32(iter305);}}output.writeListEnd();output.writeFieldEnd();}if(this.groups!==null&&this.groups!==undefined){output.writeFieldBegin('groups',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRING,this.groups.length);for(var iter306 in this.groups){if(this.groups.hasOwnProperty(iter306)){iter306=this.groups[iter306];output.writeString(iter306);}}output.writeListEnd();output.writeFieldEnd();}if(this.permissions!==null&&this.permissions!==undefined){output.writeFieldBegin('permissions',Thrift.Type.STRUCT,4);this.permissions.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_unshare_dashboards_result=function OmniSci_unshare_dashboards_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_unshare_dashboards_result.prototype={};OmniSci_unshare_dashboards_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_unshare_dashboards_result.prototype.write=function(output){output.writeStructBegin('OmniSci_unshare_dashboards_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_dashboard_grantees_args=function OmniSci_get_dashboard_grantees_args(args){this.session=null;this.dashboard_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.dashboard_id!==undefined&&args.dashboard_id!==null){this.dashboard_id=args.dashboard_id;}}};OmniSci_get_dashboard_grantees_args.prototype={};OmniSci_get_dashboard_grantees_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.dashboard_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_dashboard_grantees_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_dashboard_grantees_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.dashboard_id!==null&&this.dashboard_id!==undefined){output.writeFieldBegin('dashboard_id',Thrift.Type.I32,2);output.writeI32(this.dashboard_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_dashboard_grantees_result=function OmniSci_get_dashboard_grantees_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDashboardGrantees]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_dashboard_grantees_result.prototype={};OmniSci_get_dashboard_grantees_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3308=input.readListBegin();var _size307=_rtmp3308.size||0;for(var _i309=0;_i309<_size307;++_i309){var elem310=null;elem310=new ttypes.TDashboardGrantees();elem310.read(input);this.success.push(elem310);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_dashboard_grantees_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_dashboard_grantees_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter311 in this.success){if(this.success.hasOwnProperty(iter311)){iter311=this.success[iter311];iter311.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_link_view_args=function OmniSci_get_link_view_args(args){this.session=null;this.link=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.link!==undefined&&args.link!==null){this.link=args.link;}}};OmniSci_get_link_view_args.prototype={};OmniSci_get_link_view_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.link=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_link_view_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_link_view_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.link!==null&&this.link!==undefined){output.writeFieldBegin('link',Thrift.Type.STRING,2);output.writeString(this.link);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_link_view_result=function OmniSci_get_link_view_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TFrontendView(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_link_view_result.prototype={};OmniSci_get_link_view_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TFrontendView();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_link_view_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_link_view_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_create_link_args=function OmniSci_create_link_args(args){this.session=null;this.view_state=null;this.view_metadata=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.view_state!==undefined&&args.view_state!==null){this.view_state=args.view_state;}if(args.view_metadata!==undefined&&args.view_metadata!==null){this.view_metadata=args.view_metadata;}}};OmniSci_create_link_args.prototype={};OmniSci_create_link_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.view_state=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.view_metadata=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_create_link_args.prototype.write=function(output){output.writeStructBegin('OmniSci_create_link_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.view_state!==null&&this.view_state!==undefined){output.writeFieldBegin('view_state',Thrift.Type.STRING,2);output.writeString(this.view_state);output.writeFieldEnd();}if(this.view_metadata!==null&&this.view_metadata!==undefined){output.writeFieldBegin('view_metadata',Thrift.Type.STRING,3);output.writeString(this.view_metadata);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_create_link_result=function OmniSci_create_link_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_create_link_result.prototype={};OmniSci_create_link_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_create_link_result.prototype.write=function(output){output.writeStructBegin('OmniSci_create_link_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_load_table_binary_args=function OmniSci_load_table_binary_args(args){this.session=null;this.table_name=null;this.rows=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.rows!==undefined&&args.rows!==null){this.rows=Thrift.copyList(args.rows,[ttypes.TRow]);}}};OmniSci_load_table_binary_args.prototype={};OmniSci_load_table_binary_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.rows=[];var _rtmp3313=input.readListBegin();var _size312=_rtmp3313.size||0;for(var _i314=0;_i314<_size312;++_i314){var elem315=null;elem315=new ttypes.TRow();elem315.read(input);this.rows.push(elem315);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_load_table_binary_args.prototype.write=function(output){output.writeStructBegin('OmniSci_load_table_binary_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.rows!==null&&this.rows!==undefined){output.writeFieldBegin('rows',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.rows.length);for(var iter316 in this.rows){if(this.rows.hasOwnProperty(iter316)){iter316=this.rows[iter316];iter316.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_load_table_binary_result=function OmniSci_load_table_binary_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_load_table_binary_result.prototype={};OmniSci_load_table_binary_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_load_table_binary_result.prototype.write=function(output){output.writeStructBegin('OmniSci_load_table_binary_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_load_table_binary_columnar_args=function OmniSci_load_table_binary_columnar_args(args){this.session=null;this.table_name=null;this.cols=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.cols!==undefined&&args.cols!==null){this.cols=Thrift.copyList(args.cols,[ttypes.TColumn]);}}};OmniSci_load_table_binary_columnar_args.prototype={};OmniSci_load_table_binary_columnar_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.cols=[];var _rtmp3318=input.readListBegin();var _size317=_rtmp3318.size||0;for(var _i319=0;_i319<_size317;++_i319){var elem320=null;elem320=new ttypes.TColumn();elem320.read(input);this.cols.push(elem320);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_load_table_binary_columnar_args.prototype.write=function(output){output.writeStructBegin('OmniSci_load_table_binary_columnar_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.cols!==null&&this.cols!==undefined){output.writeFieldBegin('cols',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.cols.length);for(var iter321 in this.cols){if(this.cols.hasOwnProperty(iter321)){iter321=this.cols[iter321];iter321.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_load_table_binary_columnar_result=function OmniSci_load_table_binary_columnar_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_load_table_binary_columnar_result.prototype={};OmniSci_load_table_binary_columnar_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_load_table_binary_columnar_result.prototype.write=function(output){output.writeStructBegin('OmniSci_load_table_binary_columnar_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_load_table_binary_arrow_args=function OmniSci_load_table_binary_arrow_args(args){this.session=null;this.table_name=null;this.arrow_stream=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.arrow_stream!==undefined&&args.arrow_stream!==null){this.arrow_stream=args.arrow_stream;}}};OmniSci_load_table_binary_arrow_args.prototype={};OmniSci_load_table_binary_arrow_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.arrow_stream=input.readBinary();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_load_table_binary_arrow_args.prototype.write=function(output){output.writeStructBegin('OmniSci_load_table_binary_arrow_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.arrow_stream!==null&&this.arrow_stream!==undefined){output.writeFieldBegin('arrow_stream',Thrift.Type.STRING,3);output.writeBinary(this.arrow_stream);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_load_table_binary_arrow_result=function OmniSci_load_table_binary_arrow_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_load_table_binary_arrow_result.prototype={};OmniSci_load_table_binary_arrow_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_load_table_binary_arrow_result.prototype.write=function(output){output.writeStructBegin('OmniSci_load_table_binary_arrow_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_load_table_args=function OmniSci_load_table_args(args){this.session=null;this.table_name=null;this.rows=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.rows!==undefined&&args.rows!==null){this.rows=Thrift.copyList(args.rows,[ttypes.TStringRow]);}}};OmniSci_load_table_args.prototype={};OmniSci_load_table_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.rows=[];var _rtmp3323=input.readListBegin();var _size322=_rtmp3323.size||0;for(var _i324=0;_i324<_size322;++_i324){var elem325=null;elem325=new ttypes.TStringRow();elem325.read(input);this.rows.push(elem325);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_load_table_args.prototype.write=function(output){output.writeStructBegin('OmniSci_load_table_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.rows!==null&&this.rows!==undefined){output.writeFieldBegin('rows',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.rows.length);for(var iter326 in this.rows){if(this.rows.hasOwnProperty(iter326)){iter326=this.rows[iter326];iter326.write(output);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_load_table_result=function OmniSci_load_table_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_load_table_result.prototype={};OmniSci_load_table_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_load_table_result.prototype.write=function(output){output.writeStructBegin('OmniSci_load_table_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_detect_column_types_args=function OmniSci_detect_column_types_args(args){this.session=null;this.file_name=null;this.copy_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.file_name!==undefined&&args.file_name!==null){this.file_name=args.file_name;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}}};OmniSci_detect_column_types_args.prototype={};OmniSci_detect_column_types_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.file_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_detect_column_types_args.prototype.write=function(output){output.writeStructBegin('OmniSci_detect_column_types_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.file_name!==null&&this.file_name!==undefined){output.writeFieldBegin('file_name',Thrift.Type.STRING,2);output.writeString(this.file_name);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,3);this.copy_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_detect_column_types_result=function OmniSci_detect_column_types_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TDetectResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_detect_column_types_result.prototype={};OmniSci_detect_column_types_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TDetectResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_detect_column_types_result.prototype.write=function(output){output.writeStructBegin('OmniSci_detect_column_types_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_create_table_args=function OmniSci_create_table_args(args){this.session=null;this.table_name=null;this.row_desc=null;this.file_type=0;this.create_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.row_desc!==undefined&&args.row_desc!==null){this.row_desc=Thrift.copyList(args.row_desc,[ttypes.TColumnType]);}if(args.file_type!==undefined&&args.file_type!==null){this.file_type=args.file_type;}if(args.create_params!==undefined&&args.create_params!==null){this.create_params=new ttypes.TCreateParams(args.create_params);}}};OmniSci_create_table_args.prototype={};OmniSci_create_table_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.row_desc=[];var _rtmp3328=input.readListBegin();var _size327=_rtmp3328.size||0;for(var _i329=0;_i329<_size327;++_i329){var elem330=null;elem330=new ttypes.TColumnType();elem330.read(input);this.row_desc.push(elem330);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.file_type=input.readI32();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRUCT){this.create_params=new ttypes.TCreateParams();this.create_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_create_table_args.prototype.write=function(output){output.writeStructBegin('OmniSci_create_table_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.row_desc!==null&&this.row_desc!==undefined){output.writeFieldBegin('row_desc',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.row_desc.length);for(var iter331 in this.row_desc){if(this.row_desc.hasOwnProperty(iter331)){iter331=this.row_desc[iter331];iter331.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.file_type!==null&&this.file_type!==undefined){output.writeFieldBegin('file_type',Thrift.Type.I32,4);output.writeI32(this.file_type);output.writeFieldEnd();}if(this.create_params!==null&&this.create_params!==undefined){output.writeFieldBegin('create_params',Thrift.Type.STRUCT,5);this.create_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_create_table_result=function OmniSci_create_table_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_create_table_result.prototype={};OmniSci_create_table_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_create_table_result.prototype.write=function(output){output.writeStructBegin('OmniSci_create_table_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_import_table_args=function OmniSci_import_table_args(args){this.session=null;this.table_name=null;this.file_name=null;this.copy_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.file_name!==undefined&&args.file_name!==null){this.file_name=args.file_name;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}}};OmniSci_import_table_args.prototype={};OmniSci_import_table_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.file_name=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_import_table_args.prototype.write=function(output){output.writeStructBegin('OmniSci_import_table_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.file_name!==null&&this.file_name!==undefined){output.writeFieldBegin('file_name',Thrift.Type.STRING,3);output.writeString(this.file_name);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,4);this.copy_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_import_table_result=function OmniSci_import_table_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_import_table_result.prototype={};OmniSci_import_table_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_import_table_result.prototype.write=function(output){output.writeStructBegin('OmniSci_import_table_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_import_geo_table_args=function OmniSci_import_geo_table_args(args){this.session=null;this.table_name=null;this.file_name=null;this.copy_params=null;this.row_desc=null;this.create_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_name!==undefined&&args.table_name!==null){this.table_name=args.table_name;}if(args.file_name!==undefined&&args.file_name!==null){this.file_name=args.file_name;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}if(args.row_desc!==undefined&&args.row_desc!==null){this.row_desc=Thrift.copyList(args.row_desc,[ttypes.TColumnType]);}if(args.create_params!==undefined&&args.create_params!==null){this.create_params=new ttypes.TCreateParams(args.create_params);}}};OmniSci_import_geo_table_args.prototype={};OmniSci_import_geo_table_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.table_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.file_name=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.LIST){this.row_desc=[];var _rtmp3333=input.readListBegin();var _size332=_rtmp3333.size||0;for(var _i334=0;_i334<_size332;++_i334){var elem335=null;elem335=new ttypes.TColumnType();elem335.read(input);this.row_desc.push(elem335);}input.readListEnd();}else{input.skip(ftype);}break;case 6:if(ftype==Thrift.Type.STRUCT){this.create_params=new ttypes.TCreateParams();this.create_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_import_geo_table_args.prototype.write=function(output){output.writeStructBegin('OmniSci_import_geo_table_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_name!==null&&this.table_name!==undefined){output.writeFieldBegin('table_name',Thrift.Type.STRING,2);output.writeString(this.table_name);output.writeFieldEnd();}if(this.file_name!==null&&this.file_name!==undefined){output.writeFieldBegin('file_name',Thrift.Type.STRING,3);output.writeString(this.file_name);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,4);this.copy_params.write(output);output.writeFieldEnd();}if(this.row_desc!==null&&this.row_desc!==undefined){output.writeFieldBegin('row_desc',Thrift.Type.LIST,5);output.writeListBegin(Thrift.Type.STRUCT,this.row_desc.length);for(var iter336 in this.row_desc){if(this.row_desc.hasOwnProperty(iter336)){iter336=this.row_desc[iter336];iter336.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.create_params!==null&&this.create_params!==undefined){output.writeFieldBegin('create_params',Thrift.Type.STRUCT,6);this.create_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_import_geo_table_result=function OmniSci_import_geo_table_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_import_geo_table_result.prototype={};OmniSci_import_geo_table_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_import_geo_table_result.prototype.write=function(output){output.writeStructBegin('OmniSci_import_geo_table_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_import_table_status_args=function OmniSci_import_table_status_args(args){this.session=null;this.import_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.import_id!==undefined&&args.import_id!==null){this.import_id=args.import_id;}}};OmniSci_import_table_status_args.prototype={};OmniSci_import_table_status_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.import_id=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_import_table_status_args.prototype.write=function(output){output.writeStructBegin('OmniSci_import_table_status_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.import_id!==null&&this.import_id!==undefined){output.writeFieldBegin('import_id',Thrift.Type.STRING,2);output.writeString(this.import_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_import_table_status_result=function OmniSci_import_table_status_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TImportStatus(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_import_table_status_result.prototype={};OmniSci_import_table_status_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TImportStatus();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_import_table_status_result.prototype.write=function(output){output.writeStructBegin('OmniSci_import_table_status_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_first_geo_file_in_archive_args=function OmniSci_get_first_geo_file_in_archive_args(args){this.session=null;this.archive_path=null;this.copy_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.archive_path!==undefined&&args.archive_path!==null){this.archive_path=args.archive_path;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}}};OmniSci_get_first_geo_file_in_archive_args.prototype={};OmniSci_get_first_geo_file_in_archive_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.archive_path=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_first_geo_file_in_archive_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.archive_path!==null&&this.archive_path!==undefined){output.writeFieldBegin('archive_path',Thrift.Type.STRING,2);output.writeString(this.archive_path);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,3);this.copy_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_first_geo_file_in_archive_result=function OmniSci_get_first_geo_file_in_archive_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_first_geo_file_in_archive_result.prototype={};OmniSci_get_first_geo_file_in_archive_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRING){this.success=input.readString();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_first_geo_file_in_archive_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRING,0);output.writeString(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_all_files_in_archive_args=function OmniSci_get_all_files_in_archive_args(args){this.session=null;this.archive_path=null;this.copy_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.archive_path!==undefined&&args.archive_path!==null){this.archive_path=args.archive_path;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}}};OmniSci_get_all_files_in_archive_args.prototype={};OmniSci_get_all_files_in_archive_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.archive_path=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_all_files_in_archive_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_all_files_in_archive_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.archive_path!==null&&this.archive_path!==undefined){output.writeFieldBegin('archive_path',Thrift.Type.STRING,2);output.writeString(this.archive_path);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,3);this.copy_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_all_files_in_archive_result=function OmniSci_get_all_files_in_archive_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_all_files_in_archive_result.prototype={};OmniSci_get_all_files_in_archive_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3338=input.readListBegin();var _size337=_rtmp3338.size||0;for(var _i339=0;_i339<_size337;++_i339){var elem340=null;elem340=input.readString();this.success.push(elem340);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_all_files_in_archive_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_all_files_in_archive_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter341 in this.success){if(this.success.hasOwnProperty(iter341)){iter341=this.success[iter341];output.writeString(iter341);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_layers_in_geo_file_args=function OmniSci_get_layers_in_geo_file_args(args){this.session=null;this.file_name=null;this.copy_params=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.file_name!==undefined&&args.file_name!==null){this.file_name=args.file_name;}if(args.copy_params!==undefined&&args.copy_params!==null){this.copy_params=new ttypes.TCopyParams(args.copy_params);}}};OmniSci_get_layers_in_geo_file_args.prototype={};OmniSci_get_layers_in_geo_file_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.file_name=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRUCT){this.copy_params=new ttypes.TCopyParams();this.copy_params.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_layers_in_geo_file_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_layers_in_geo_file_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.file_name!==null&&this.file_name!==undefined){output.writeFieldBegin('file_name',Thrift.Type.STRING,2);output.writeString(this.file_name);output.writeFieldEnd();}if(this.copy_params!==null&&this.copy_params!==undefined){output.writeFieldBegin('copy_params',Thrift.Type.STRUCT,3);this.copy_params.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_layers_in_geo_file_result=function OmniSci_get_layers_in_geo_file_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TGeoFileLayerInfo]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_layers_in_geo_file_result.prototype={};OmniSci_get_layers_in_geo_file_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3343=input.readListBegin();var _size342=_rtmp3343.size||0;for(var _i344=0;_i344<_size342;++_i344){var elem345=null;elem345=new ttypes.TGeoFileLayerInfo();elem345.read(input);this.success.push(elem345);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_layers_in_geo_file_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_layers_in_geo_file_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter346 in this.success){if(this.success.hasOwnProperty(iter346)){iter346=this.success[iter346];iter346.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_query_get_outer_fragment_count_args=function OmniSci_query_get_outer_fragment_count_args(args){this.session=null;this.query=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.query!==undefined&&args.query!==null){this.query=args.query;}}};OmniSci_query_get_outer_fragment_count_args.prototype={};OmniSci_query_get_outer_fragment_count_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.query=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_query_get_outer_fragment_count_args.prototype.write=function(output){output.writeStructBegin('OmniSci_query_get_outer_fragment_count_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.query!==null&&this.query!==undefined){output.writeFieldBegin('query',Thrift.Type.STRING,2);output.writeString(this.query);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_query_get_outer_fragment_count_result=function OmniSci_query_get_outer_fragment_count_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_query_get_outer_fragment_count_result.prototype={};OmniSci_query_get_outer_fragment_count_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.I64){this.success=input.readI64();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_query_get_outer_fragment_count_result.prototype.write=function(output){output.writeStructBegin('OmniSci_query_get_outer_fragment_count_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.I64,0);output.writeI64(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_check_table_consistency_args=function OmniSci_check_table_consistency_args(args){this.session=null;this.table_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_id!==undefined&&args.table_id!==null){this.table_id=args.table_id;}}};OmniSci_check_table_consistency_args.prototype={};OmniSci_check_table_consistency_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.table_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_check_table_consistency_args.prototype.write=function(output){output.writeStructBegin('OmniSci_check_table_consistency_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_id!==null&&this.table_id!==undefined){output.writeFieldBegin('table_id',Thrift.Type.I32,2);output.writeI32(this.table_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_check_table_consistency_result=function OmniSci_check_table_consistency_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TTableMeta(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_check_table_consistency_result.prototype={};OmniSci_check_table_consistency_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TTableMeta();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_check_table_consistency_result.prototype.write=function(output){output.writeStructBegin('OmniSci_check_table_consistency_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_start_query_args=function OmniSci_start_query_args(args){this.leaf_session=null;this.parent_session=null;this.query_ra=null;this.just_explain=null;this.outer_fragment_indices=null;if(args){if(args.leaf_session!==undefined&&args.leaf_session!==null){this.leaf_session=args.leaf_session;}if(args.parent_session!==undefined&&args.parent_session!==null){this.parent_session=args.parent_session;}if(args.query_ra!==undefined&&args.query_ra!==null){this.query_ra=args.query_ra;}if(args.just_explain!==undefined&&args.just_explain!==null){this.just_explain=args.just_explain;}if(args.outer_fragment_indices!==undefined&&args.outer_fragment_indices!==null){this.outer_fragment_indices=Thrift.copyList(args.outer_fragment_indices,[null]);}}};OmniSci_start_query_args.prototype={};OmniSci_start_query_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.leaf_session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.parent_session=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.query_ra=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.BOOL){this.just_explain=input.readBool();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.LIST){this.outer_fragment_indices=[];var _rtmp3348=input.readListBegin();var _size347=_rtmp3348.size||0;for(var _i349=0;_i349<_size347;++_i349){var elem350=null;elem350=input.readI64();this.outer_fragment_indices.push(elem350);}input.readListEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_start_query_args.prototype.write=function(output){output.writeStructBegin('OmniSci_start_query_args');if(this.leaf_session!==null&&this.leaf_session!==undefined){output.writeFieldBegin('leaf_session',Thrift.Type.STRING,1);output.writeString(this.leaf_session);output.writeFieldEnd();}if(this.parent_session!==null&&this.parent_session!==undefined){output.writeFieldBegin('parent_session',Thrift.Type.STRING,2);output.writeString(this.parent_session);output.writeFieldEnd();}if(this.query_ra!==null&&this.query_ra!==undefined){output.writeFieldBegin('query_ra',Thrift.Type.STRING,3);output.writeString(this.query_ra);output.writeFieldEnd();}if(this.just_explain!==null&&this.just_explain!==undefined){output.writeFieldBegin('just_explain',Thrift.Type.BOOL,4);output.writeBool(this.just_explain);output.writeFieldEnd();}if(this.outer_fragment_indices!==null&&this.outer_fragment_indices!==undefined){output.writeFieldBegin('outer_fragment_indices',Thrift.Type.LIST,5);output.writeListBegin(Thrift.Type.I64,this.outer_fragment_indices.length);for(var iter351 in this.outer_fragment_indices){if(this.outer_fragment_indices.hasOwnProperty(iter351)){iter351=this.outer_fragment_indices[iter351];output.writeI64(iter351);}}output.writeListEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_start_query_result=function OmniSci_start_query_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TPendingQuery(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_start_query_result.prototype={};OmniSci_start_query_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TPendingQuery();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_start_query_result.prototype.write=function(output){output.writeStructBegin('OmniSci_start_query_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_execute_query_step_args=function OmniSci_execute_query_step_args(args){this.pending_query=null;this.subquery_id=null;if(args){if(args.pending_query!==undefined&&args.pending_query!==null){this.pending_query=new ttypes.TPendingQuery(args.pending_query);}if(args.subquery_id!==undefined&&args.subquery_id!==null){this.subquery_id=args.subquery_id;}}};OmniSci_execute_query_step_args.prototype={};OmniSci_execute_query_step_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.pending_query=new ttypes.TPendingQuery();this.pending_query.read(input);}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I64){this.subquery_id=input.readI64();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_execute_query_step_args.prototype.write=function(output){output.writeStructBegin('OmniSci_execute_query_step_args');if(this.pending_query!==null&&this.pending_query!==undefined){output.writeFieldBegin('pending_query',Thrift.Type.STRUCT,1);this.pending_query.write(output);output.writeFieldEnd();}if(this.subquery_id!==null&&this.subquery_id!==undefined){output.writeFieldBegin('subquery_id',Thrift.Type.I64,2);output.writeI64(this.subquery_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_execute_query_step_result=function OmniSci_execute_query_step_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TStepResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_execute_query_step_result.prototype={};OmniSci_execute_query_step_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TStepResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_execute_query_step_result.prototype.write=function(output){output.writeStructBegin('OmniSci_execute_query_step_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_broadcast_serialized_rows_args=function OmniSci_broadcast_serialized_rows_args(args){this.serialized_rows=null;this.row_desc=null;this.query_id=null;this.subquery_id=null;this.is_final_subquery_result=null;if(args){if(args.serialized_rows!==undefined&&args.serialized_rows!==null){this.serialized_rows=new serialized_result_set_ttypes.TSerializedRows(args.serialized_rows);}if(args.row_desc!==undefined&&args.row_desc!==null){this.row_desc=Thrift.copyList(args.row_desc,[ttypes.TColumnType]);}if(args.query_id!==undefined&&args.query_id!==null){this.query_id=args.query_id;}if(args.subquery_id!==undefined&&args.subquery_id!==null){this.subquery_id=args.subquery_id;}if(args.is_final_subquery_result!==undefined&&args.is_final_subquery_result!==null){this.is_final_subquery_result=args.is_final_subquery_result;}}};OmniSci_broadcast_serialized_rows_args.prototype={};OmniSci_broadcast_serialized_rows_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.serialized_rows=new serialized_result_set_ttypes.TSerializedRows();this.serialized_rows.read(input);}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.LIST){this.row_desc=[];var _rtmp3353=input.readListBegin();var _size352=_rtmp3353.size||0;for(var _i354=0;_i354<_size352;++_i354){var elem355=null;elem355=new ttypes.TColumnType();elem355.read(input);this.row_desc.push(elem355);}input.readListEnd();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I64){this.query_id=input.readI64();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I64){this.subquery_id=input.readI64();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.BOOL){this.is_final_subquery_result=input.readBool();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_broadcast_serialized_rows_args.prototype.write=function(output){output.writeStructBegin('OmniSci_broadcast_serialized_rows_args');if(this.serialized_rows!==null&&this.serialized_rows!==undefined){output.writeFieldBegin('serialized_rows',Thrift.Type.STRUCT,1);this.serialized_rows.write(output);output.writeFieldEnd();}if(this.row_desc!==null&&this.row_desc!==undefined){output.writeFieldBegin('row_desc',Thrift.Type.LIST,2);output.writeListBegin(Thrift.Type.STRUCT,this.row_desc.length);for(var iter356 in this.row_desc){if(this.row_desc.hasOwnProperty(iter356)){iter356=this.row_desc[iter356];iter356.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.query_id!==null&&this.query_id!==undefined){output.writeFieldBegin('query_id',Thrift.Type.I64,3);output.writeI64(this.query_id);output.writeFieldEnd();}if(this.subquery_id!==null&&this.subquery_id!==undefined){output.writeFieldBegin('subquery_id',Thrift.Type.I64,4);output.writeI64(this.subquery_id);output.writeFieldEnd();}if(this.is_final_subquery_result!==null&&this.is_final_subquery_result!==undefined){output.writeFieldBegin('is_final_subquery_result',Thrift.Type.BOOL,5);output.writeBool(this.is_final_subquery_result);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_broadcast_serialized_rows_result=function OmniSci_broadcast_serialized_rows_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_broadcast_serialized_rows_result.prototype={};OmniSci_broadcast_serialized_rows_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_broadcast_serialized_rows_result.prototype.write=function(output){output.writeStructBegin('OmniSci_broadcast_serialized_rows_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_start_render_query_args=function OmniSci_start_render_query_args(args){this.session=null;this.widget_id=null;this.node_idx=null;this.vega_json=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.widget_id!==undefined&&args.widget_id!==null){this.widget_id=args.widget_id;}if(args.node_idx!==undefined&&args.node_idx!==null){this.node_idx=args.node_idx;}if(args.vega_json!==undefined&&args.vega_json!==null){this.vega_json=args.vega_json;}}};OmniSci_start_render_query_args.prototype={};OmniSci_start_render_query_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I64){this.widget_id=input.readI64();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I16){this.node_idx=input.readI16();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.STRING){this.vega_json=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_start_render_query_args.prototype.write=function(output){output.writeStructBegin('OmniSci_start_render_query_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.widget_id!==null&&this.widget_id!==undefined){output.writeFieldBegin('widget_id',Thrift.Type.I64,2);output.writeI64(this.widget_id);output.writeFieldEnd();}if(this.node_idx!==null&&this.node_idx!==undefined){output.writeFieldBegin('node_idx',Thrift.Type.I16,3);output.writeI16(this.node_idx);output.writeFieldEnd();}if(this.vega_json!==null&&this.vega_json!==undefined){output.writeFieldBegin('vega_json',Thrift.Type.STRING,4);output.writeString(this.vega_json);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_start_render_query_result=function OmniSci_start_render_query_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TPendingRenderQuery(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_start_render_query_result.prototype={};OmniSci_start_render_query_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TPendingRenderQuery();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_start_render_query_result.prototype.write=function(output){output.writeStructBegin('OmniSci_start_render_query_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_execute_next_render_step_args=function OmniSci_execute_next_render_step_args(args){this.pending_render=null;this.merged_data=null;if(args){if(args.pending_render!==undefined&&args.pending_render!==null){this.pending_render=new ttypes.TPendingRenderQuery(args.pending_render);}if(args.merged_data!==undefined&&args.merged_data!==null){this.merged_data=Thrift.copyMap(args.merged_data,[Thrift.copyMap,Thrift.copyMap,Thrift.copyMap,Thrift.copyList,ttypes.TRenderDatum]);}}};OmniSci_execute_next_render_step_args.prototype={};OmniSci_execute_next_render_step_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.pending_render=new ttypes.TPendingRenderQuery();this.pending_render.read(input);}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.MAP){this.merged_data={};var _rtmp3358=input.readMapBegin();var _size357=_rtmp3358.size||0;for(var _i359=0;_i359<_size357;++_i359){var key360=null;var val361=null;key360=input.readString();val361={};var _rtmp3363=input.readMapBegin();var _size362=_rtmp3363.size||0;for(var _i364=0;_i364<_size362;++_i364){var key365=null;var val366=null;key365=input.readString();val366={};var _rtmp3368=input.readMapBegin();var _size367=_rtmp3368.size||0;for(var _i369=0;_i369<_size367;++_i369){var key370=null;var val371=null;key370=input.readString();val371={};var _rtmp3373=input.readMapBegin();var _size372=_rtmp3373.size||0;for(var _i374=0;_i374<_size372;++_i374){var key375=null;var val376=null;key375=input.readString();val376=[];var _rtmp3378=input.readListBegin();var _size377=_rtmp3378.size||0;for(var _i379=0;_i379<_size377;++_i379){var elem380=null;elem380=new ttypes.TRenderDatum();elem380.read(input);val376.push(elem380);}input.readListEnd();val371[key375]=val376;}input.readMapEnd();val366[key370]=val371;}input.readMapEnd();val361[key365]=val366;}input.readMapEnd();this.merged_data[key360]=val361;}input.readMapEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_execute_next_render_step_args.prototype.write=function(output){output.writeStructBegin('OmniSci_execute_next_render_step_args');if(this.pending_render!==null&&this.pending_render!==undefined){output.writeFieldBegin('pending_render',Thrift.Type.STRUCT,1);this.pending_render.write(output);output.writeFieldEnd();}if(this.merged_data!==null&&this.merged_data!==undefined){output.writeFieldBegin('merged_data',Thrift.Type.MAP,2);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.MAP,Thrift.objectLength(this.merged_data));for(var kiter381 in this.merged_data){if(this.merged_data.hasOwnProperty(kiter381)){var viter382=this.merged_data[kiter381];output.writeString(kiter381);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.MAP,Thrift.objectLength(viter382));for(var kiter383 in viter382){if(viter382.hasOwnProperty(kiter383)){var viter384=viter382[kiter383];output.writeString(kiter383);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.MAP,Thrift.objectLength(viter384));for(var kiter385 in viter384){if(viter384.hasOwnProperty(kiter385)){var viter386=viter384[kiter385];output.writeString(kiter385);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.LIST,Thrift.objectLength(viter386));for(var kiter387 in viter386){if(viter386.hasOwnProperty(kiter387)){var viter388=viter386[kiter387];output.writeString(kiter387);output.writeListBegin(Thrift.Type.STRUCT,viter388.length);for(var iter389 in viter388){if(viter388.hasOwnProperty(iter389)){iter389=viter388[iter389];iter389.write(output);}}output.writeListEnd();}}output.writeMapEnd();}}output.writeMapEnd();}}output.writeMapEnd();}}output.writeMapEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_execute_next_render_step_result=function OmniSci_execute_next_render_step_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TRenderStepResult(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_execute_next_render_step_result.prototype={};OmniSci_execute_next_render_step_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TRenderStepResult();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_execute_next_render_step_result.prototype.write=function(output){output.writeStructBegin('OmniSci_execute_next_render_step_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_insert_data_args=function OmniSci_insert_data_args(args){this.session=null;this.insert_data=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.insert_data!==undefined&&args.insert_data!==null){this.insert_data=new ttypes.TInsertData(args.insert_data);}}};OmniSci_insert_data_args.prototype={};OmniSci_insert_data_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRUCT){this.insert_data=new ttypes.TInsertData();this.insert_data.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_insert_data_args.prototype.write=function(output){output.writeStructBegin('OmniSci_insert_data_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.insert_data!==null&&this.insert_data!==undefined){output.writeFieldBegin('insert_data',Thrift.Type.STRUCT,2);this.insert_data.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_insert_data_result=function OmniSci_insert_data_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_insert_data_result.prototype={};OmniSci_insert_data_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_insert_data_result.prototype.write=function(output){output.writeStructBegin('OmniSci_insert_data_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_checkpoint_args=function OmniSci_checkpoint_args(args){this.session=null;this.table_id=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.table_id!==undefined&&args.table_id!==null){this.table_id=args.table_id;}}};OmniSci_checkpoint_args.prototype={};OmniSci_checkpoint_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.I32){this.table_id=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_checkpoint_args.prototype.write=function(output){output.writeStructBegin('OmniSci_checkpoint_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.table_id!==null&&this.table_id!==undefined){output.writeFieldBegin('table_id',Thrift.Type.I32,2);output.writeI32(this.table_id);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_checkpoint_result=function OmniSci_checkpoint_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_checkpoint_result.prototype={};OmniSci_checkpoint_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_checkpoint_result.prototype.write=function(output){output.writeStructBegin('OmniSci_checkpoint_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_roles_args=function OmniSci_get_roles_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_roles_args.prototype={};OmniSci_get_roles_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_roles_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_roles_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_roles_result=function OmniSci_get_roles_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_roles_result.prototype={};OmniSci_get_roles_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3391=input.readListBegin();var _size390=_rtmp3391.size||0;for(var _i392=0;_i392<_size390;++_i392){var elem393=null;elem393=input.readString();this.success.push(elem393);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_roles_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_roles_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter394 in this.success){if(this.success.hasOwnProperty(iter394)){iter394=this.success[iter394];output.writeString(iter394);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_db_objects_for_grantee_args=function OmniSci_get_db_objects_for_grantee_args(args){this.session=null;this.roleName=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.roleName!==undefined&&args.roleName!==null){this.roleName=args.roleName;}}};OmniSci_get_db_objects_for_grantee_args.prototype={};OmniSci_get_db_objects_for_grantee_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.roleName=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_db_objects_for_grantee_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_db_objects_for_grantee_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.roleName!==null&&this.roleName!==undefined){output.writeFieldBegin('roleName',Thrift.Type.STRING,2);output.writeString(this.roleName);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_db_objects_for_grantee_result=function OmniSci_get_db_objects_for_grantee_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDBObject]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_db_objects_for_grantee_result.prototype={};OmniSci_get_db_objects_for_grantee_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3396=input.readListBegin();var _size395=_rtmp3396.size||0;for(var _i397=0;_i397<_size395;++_i397){var elem398=null;elem398=new ttypes.TDBObject();elem398.read(input);this.success.push(elem398);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_db_objects_for_grantee_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_db_objects_for_grantee_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter399 in this.success){if(this.success.hasOwnProperty(iter399)){iter399=this.success[iter399];iter399.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_db_object_privs_args=function OmniSci_get_db_object_privs_args(args){this.session=null;this.objectName=null;this.type=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.objectName!==undefined&&args.objectName!==null){this.objectName=args.objectName;}if(args.type!==undefined&&args.type!==null){this.type=args.type;}}};OmniSci_get_db_object_privs_args.prototype={};OmniSci_get_db_object_privs_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.objectName=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.I32){this.type=input.readI32();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_db_object_privs_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_db_object_privs_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.objectName!==null&&this.objectName!==undefined){output.writeFieldBegin('objectName',Thrift.Type.STRING,2);output.writeString(this.objectName);output.writeFieldEnd();}if(this.type!==null&&this.type!==undefined){output.writeFieldBegin('type',Thrift.Type.I32,3);output.writeI32(this.type);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_db_object_privs_result=function OmniSci_get_db_object_privs_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[ttypes.TDBObject]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_db_object_privs_result.prototype={};OmniSci_get_db_object_privs_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3401=input.readListBegin();var _size400=_rtmp3401.size||0;for(var _i402=0;_i402<_size400;++_i402){var elem403=null;elem403=new ttypes.TDBObject();elem403.read(input);this.success.push(elem403);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_db_object_privs_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_db_object_privs_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRUCT,this.success.length);for(var iter404 in this.success){if(this.success.hasOwnProperty(iter404)){iter404=this.success[iter404];iter404.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_all_roles_for_user_args=function OmniSci_get_all_roles_for_user_args(args){this.session=null;this.userName=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.userName!==undefined&&args.userName!==null){this.userName=args.userName;}}};OmniSci_get_all_roles_for_user_args.prototype={};OmniSci_get_all_roles_for_user_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.userName=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_all_roles_for_user_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_all_roles_for_user_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.userName!==null&&this.userName!==undefined){output.writeFieldBegin('userName',Thrift.Type.STRING,2);output.writeString(this.userName);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_all_roles_for_user_result=function OmniSci_get_all_roles_for_user_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyList(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_all_roles_for_user_result.prototype={};OmniSci_get_all_roles_for_user_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.LIST){this.success=[];var _rtmp3406=input.readListBegin();var _size405=_rtmp3406.size||0;for(var _i407=0;_i407<_size405;++_i407){var elem408=null;elem408=input.readString();this.success.push(elem408);}input.readListEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_all_roles_for_user_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_all_roles_for_user_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.LIST,0);output.writeListBegin(Thrift.Type.STRING,this.success.length);for(var iter409 in this.success){if(this.success.hasOwnProperty(iter409)){iter409=this.success[iter409];output.writeString(iter409);}}output.writeListEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_has_role_args=function OmniSci_has_role_args(args){this.session=null;this.granteeName=null;this.roleName=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.granteeName!==undefined&&args.granteeName!==null){this.granteeName=args.granteeName;}if(args.roleName!==undefined&&args.roleName!==null){this.roleName=args.roleName;}}};OmniSci_has_role_args.prototype={};OmniSci_has_role_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.granteeName=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.roleName=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_has_role_args.prototype.write=function(output){output.writeStructBegin('OmniSci_has_role_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.granteeName!==null&&this.granteeName!==undefined){output.writeFieldBegin('granteeName',Thrift.Type.STRING,2);output.writeString(this.granteeName);output.writeFieldEnd();}if(this.roleName!==null&&this.roleName!==undefined){output.writeFieldBegin('roleName',Thrift.Type.STRING,3);output.writeString(this.roleName);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_has_role_result=function OmniSci_has_role_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_has_role_result.prototype={};OmniSci_has_role_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.BOOL){this.success=input.readBool();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_has_role_result.prototype.write=function(output){output.writeStructBegin('OmniSci_has_role_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.BOOL,0);output.writeBool(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_has_object_privilege_args=function OmniSci_has_object_privilege_args(args){this.session=null;this.granteeName=null;this.ObjectName=null;this.objectType=null;this.permissions=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.granteeName!==undefined&&args.granteeName!==null){this.granteeName=args.granteeName;}if(args.ObjectName!==undefined&&args.ObjectName!==null){this.ObjectName=args.ObjectName;}if(args.objectType!==undefined&&args.objectType!==null){this.objectType=args.objectType;}if(args.permissions!==undefined&&args.permissions!==null){this.permissions=new ttypes.TDBObjectPermissions(args.permissions);}}};OmniSci_has_object_privilege_args.prototype={};OmniSci_has_object_privilege_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.granteeName=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.ObjectName=input.readString();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.I32){this.objectType=input.readI32();}else{input.skip(ftype);}break;case 5:if(ftype==Thrift.Type.STRUCT){this.permissions=new ttypes.TDBObjectPermissions();this.permissions.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_has_object_privilege_args.prototype.write=function(output){output.writeStructBegin('OmniSci_has_object_privilege_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.granteeName!==null&&this.granteeName!==undefined){output.writeFieldBegin('granteeName',Thrift.Type.STRING,2);output.writeString(this.granteeName);output.writeFieldEnd();}if(this.ObjectName!==null&&this.ObjectName!==undefined){output.writeFieldBegin('ObjectName',Thrift.Type.STRING,3);output.writeString(this.ObjectName);output.writeFieldEnd();}if(this.objectType!==null&&this.objectType!==undefined){output.writeFieldBegin('objectType',Thrift.Type.I32,4);output.writeI32(this.objectType);output.writeFieldEnd();}if(this.permissions!==null&&this.permissions!==undefined){output.writeFieldBegin('permissions',Thrift.Type.STRUCT,5);this.permissions.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_has_object_privilege_result=function OmniSci_has_object_privilege_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=args.success;}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_has_object_privilege_result.prototype={};OmniSci_has_object_privilege_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.BOOL){this.success=input.readBool();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_has_object_privilege_result.prototype.write=function(output){output.writeStructBegin('OmniSci_has_object_privilege_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.BOOL,0);output.writeBool(this.success);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_license_key_args=function OmniSci_set_license_key_args(args){this.session=null;this.key=null;this.nonce='';if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.key!==undefined&&args.key!==null){this.key=args.key;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}}};OmniSci_set_license_key_args.prototype={};OmniSci_set_license_key_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.key=input.readString();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_license_key_args.prototype.write=function(output){output.writeStructBegin('OmniSci_set_license_key_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.key!==null&&this.key!==undefined){output.writeFieldBegin('key',Thrift.Type.STRING,2);output.writeString(this.key);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,3);output.writeString(this.nonce);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_set_license_key_result=function OmniSci_set_license_key_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TLicenseInfo(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_set_license_key_result.prototype={};OmniSci_set_license_key_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TLicenseInfo();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_set_license_key_result.prototype.write=function(output){output.writeStructBegin('OmniSci_set_license_key_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_license_claims_args=function OmniSci_get_license_claims_args(args){this.session=null;this.nonce='';if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.nonce!==undefined&&args.nonce!==null){this.nonce=args.nonce;}}};OmniSci_get_license_claims_args.prototype={};OmniSci_get_license_claims_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.STRING){this.nonce=input.readString();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_license_claims_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_license_claims_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.nonce!==null&&this.nonce!==undefined){output.writeFieldBegin('nonce',Thrift.Type.STRING,2);output.writeString(this.nonce);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_license_claims_result=function OmniSci_get_license_claims_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=new ttypes.TLicenseInfo(args.success);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_license_claims_result.prototype={};OmniSci_get_license_claims_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.STRUCT){this.success=new ttypes.TLicenseInfo();this.success.read(input);}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_license_claims_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_license_claims_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.STRUCT,0);this.success.write(output);output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_device_parameters_args=function OmniSci_get_device_parameters_args(args){this.session=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}}};OmniSci_get_device_parameters_args.prototype={};OmniSci_get_device_parameters_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_device_parameters_args.prototype.write=function(output){output.writeStructBegin('OmniSci_get_device_parameters_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_get_device_parameters_result=function OmniSci_get_device_parameters_result(args){this.success=null;this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.success!==undefined&&args.success!==null){this.success=Thrift.copyMap(args.success,[null]);}if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_get_device_parameters_result.prototype={};OmniSci_get_device_parameters_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 0:if(ftype==Thrift.Type.MAP){this.success={};var _rtmp3411=input.readMapBegin();var _size410=_rtmp3411.size||0;for(var _i412=0;_i412<_size410;++_i412){var key413=null;var val414=null;key413=input.readString();val414=input.readString();this.success[key413]=val414;}input.readMapEnd();}else{input.skip(ftype);}break;case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_get_device_parameters_result.prototype.write=function(output){output.writeStructBegin('OmniSci_get_device_parameters_result');if(this.success!==null&&this.success!==undefined){output.writeFieldBegin('success',Thrift.Type.MAP,0);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.STRING,Thrift.objectLength(this.success));for(var kiter415 in this.success){if(this.success.hasOwnProperty(kiter415)){var viter416=this.success[kiter415];output.writeString(kiter415);output.writeString(viter416);}}output.writeMapEnd();output.writeFieldEnd();}if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_register_runtime_extension_functions_args=function OmniSci_register_runtime_extension_functions_args(args){this.session=null;this.udfs=null;this.udtfs=null;this.device_ir_map=null;if(args){if(args.session!==undefined&&args.session!==null){this.session=args.session;}if(args.udfs!==undefined&&args.udfs!==null){this.udfs=Thrift.copyList(args.udfs,[extension_functions_ttypes.TUserDefinedFunction]);}if(args.udtfs!==undefined&&args.udtfs!==null){this.udtfs=Thrift.copyList(args.udtfs,[extension_functions_ttypes.TUserDefinedTableFunction]);}if(args.device_ir_map!==undefined&&args.device_ir_map!==null){this.device_ir_map=Thrift.copyMap(args.device_ir_map,[null]);}}};OmniSci_register_runtime_extension_functions_args.prototype={};OmniSci_register_runtime_extension_functions_args.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRING){this.session=input.readString();}else{input.skip(ftype);}break;case 2:if(ftype==Thrift.Type.LIST){this.udfs=[];var _rtmp3418=input.readListBegin();var _size417=_rtmp3418.size||0;for(var _i419=0;_i419<_size417;++_i419){var elem420=null;elem420=new extension_functions_ttypes.TUserDefinedFunction();elem420.read(input);this.udfs.push(elem420);}input.readListEnd();}else{input.skip(ftype);}break;case 3:if(ftype==Thrift.Type.LIST){this.udtfs=[];var _rtmp3422=input.readListBegin();var _size421=_rtmp3422.size||0;for(var _i423=0;_i423<_size421;++_i423){var elem424=null;elem424=new extension_functions_ttypes.TUserDefinedTableFunction();elem424.read(input);this.udtfs.push(elem424);}input.readListEnd();}else{input.skip(ftype);}break;case 4:if(ftype==Thrift.Type.MAP){this.device_ir_map={};var _rtmp3426=input.readMapBegin();var _size425=_rtmp3426.size||0;for(var _i427=0;_i427<_size425;++_i427){var key428=null;var val429=null;key428=input.readString();val429=input.readString();this.device_ir_map[key428]=val429;}input.readMapEnd();}else{input.skip(ftype);}break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_register_runtime_extension_functions_args.prototype.write=function(output){output.writeStructBegin('OmniSci_register_runtime_extension_functions_args');if(this.session!==null&&this.session!==undefined){output.writeFieldBegin('session',Thrift.Type.STRING,1);output.writeString(this.session);output.writeFieldEnd();}if(this.udfs!==null&&this.udfs!==undefined){output.writeFieldBegin('udfs',Thrift.Type.LIST,2);output.writeListBegin(Thrift.Type.STRUCT,this.udfs.length);for(var iter430 in this.udfs){if(this.udfs.hasOwnProperty(iter430)){iter430=this.udfs[iter430];iter430.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.udtfs!==null&&this.udtfs!==undefined){output.writeFieldBegin('udtfs',Thrift.Type.LIST,3);output.writeListBegin(Thrift.Type.STRUCT,this.udtfs.length);for(var iter431 in this.udtfs){if(this.udtfs.hasOwnProperty(iter431)){iter431=this.udtfs[iter431];iter431.write(output);}}output.writeListEnd();output.writeFieldEnd();}if(this.device_ir_map!==null&&this.device_ir_map!==undefined){output.writeFieldBegin('device_ir_map',Thrift.Type.MAP,4);output.writeMapBegin(Thrift.Type.STRING,Thrift.Type.STRING,Thrift.objectLength(this.device_ir_map));for(var kiter432 in this.device_ir_map){if(this.device_ir_map.hasOwnProperty(kiter432)){var viter433=this.device_ir_map[kiter432];output.writeString(kiter432);output.writeString(viter433);}}output.writeMapEnd();output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSci_register_runtime_extension_functions_result=function OmniSci_register_runtime_extension_functions_result(args){this.e=null;if(args instanceof ttypes.TOmniSciException){this.e=args;return;}if(args){if(args.e!==undefined&&args.e!==null){this.e=args.e;}}};OmniSci_register_runtime_extension_functions_result.prototype={};OmniSci_register_runtime_extension_functions_result.prototype.read=function(input){input.readStructBegin();while(true){var ret=input.readFieldBegin();var ftype=ret.ftype;var fid=ret.fid;if(ftype==Thrift.Type.STOP){break;}switch(fid){case 1:if(ftype==Thrift.Type.STRUCT){this.e=new ttypes.TOmniSciException();this.e.read(input);}else{input.skip(ftype);}break;case 0:input.skip(ftype);break;default:input.skip(ftype);}input.readFieldEnd();}input.readStructEnd();return;};OmniSci_register_runtime_extension_functions_result.prototype.write=function(output){output.writeStructBegin('OmniSci_register_runtime_extension_functions_result');if(this.e!==null&&this.e!==undefined){output.writeFieldBegin('e',Thrift.Type.STRUCT,1);this.e.write(output);output.writeFieldEnd();}output.writeFieldStop();output.writeStructEnd();return;};var OmniSciClient=exports.Client=function(output,pClass){this.output=output;this.pClass=pClass;this._seqid=0;this._reqs={};};OmniSciClient.prototype={};OmniSciClient.prototype.seqid=function(){return this._seqid;};OmniSciClient.prototype.new_seqid=function(){return this._seqid+=1;};OmniSciClient.prototype.connect=function(user,passwd,dbname,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_connect(user,passwd,dbname);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_connect(user,passwd,dbname);}};OmniSciClient.prototype.send_connect=function(user,passwd,dbname){var output=new this.pClass(this.output);var params={user:user,passwd:passwd,dbname:dbname};var args=new OmniSci_connect_args(params);try{output.writeMessageBegin('connect',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_connect=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_connect_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('connect failed: unknown result');};OmniSciClient.prototype.krb5_connect=function(inputToken,dbname,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_krb5_connect(inputToken,dbname);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_krb5_connect(inputToken,dbname);}};OmniSciClient.prototype.send_krb5_connect=function(inputToken,dbname){var output=new this.pClass(this.output);var params={inputToken:inputToken,dbname:dbname};var args=new OmniSci_krb5_connect_args(params);try{output.writeMessageBegin('krb5_connect',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_krb5_connect=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_krb5_connect_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('krb5_connect failed: unknown result');};OmniSciClient.prototype.disconnect=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_disconnect(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_disconnect(session);}};OmniSciClient.prototype.send_disconnect=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_disconnect_args(params);try{output.writeMessageBegin('disconnect',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_disconnect=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_disconnect_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.switch_database=function(session,dbname,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_switch_database(session,dbname);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_switch_database(session,dbname);}};OmniSciClient.prototype.send_switch_database=function(session,dbname){var output=new this.pClass(this.output);var params={session:session,dbname:dbname};var args=new OmniSci_switch_database_args(params);try{output.writeMessageBegin('switch_database',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_switch_database=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_switch_database_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.clone_session=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_clone_session(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_clone_session(session);}};OmniSciClient.prototype.send_clone_session=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_clone_session_args(params);try{output.writeMessageBegin('clone_session',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_clone_session=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_clone_session_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('clone_session failed: unknown result');};OmniSciClient.prototype.get_server_status=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_server_status(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_server_status(session);}};OmniSciClient.prototype.send_get_server_status=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_server_status_args(params);try{output.writeMessageBegin('get_server_status',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_server_status=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_server_status_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_server_status failed: unknown result');};OmniSciClient.prototype.get_status=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_status(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_status(session);}};OmniSciClient.prototype.send_get_status=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_status_args(params);try{output.writeMessageBegin('get_status',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_status=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_status_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_status failed: unknown result');};OmniSciClient.prototype.get_hardware_info=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_hardware_info(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_hardware_info(session);}};OmniSciClient.prototype.send_get_hardware_info=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_hardware_info_args(params);try{output.writeMessageBegin('get_hardware_info',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_hardware_info=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_hardware_info_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_hardware_info failed: unknown result');};OmniSciClient.prototype.get_tables=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_tables(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_tables(session);}};OmniSciClient.prototype.send_get_tables=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_tables_args(params);try{output.writeMessageBegin('get_tables',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_tables=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_tables_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_tables failed: unknown result');};OmniSciClient.prototype.get_physical_tables=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_physical_tables(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_physical_tables(session);}};OmniSciClient.prototype.send_get_physical_tables=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_physical_tables_args(params);try{output.writeMessageBegin('get_physical_tables',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_physical_tables=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_physical_tables_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_physical_tables failed: unknown result');};OmniSciClient.prototype.get_views=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_views(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_views(session);}};OmniSciClient.prototype.send_get_views=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_views_args(params);try{output.writeMessageBegin('get_views',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_views=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_views_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_views failed: unknown result');};OmniSciClient.prototype.get_tables_meta=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_tables_meta(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_tables_meta(session);}};OmniSciClient.prototype.send_get_tables_meta=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_tables_meta_args(params);try{output.writeMessageBegin('get_tables_meta',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_tables_meta=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_tables_meta_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_tables_meta failed: unknown result');};OmniSciClient.prototype.get_table_details=function(session,table_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_table_details(session,table_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_table_details(session,table_name);}};OmniSciClient.prototype.send_get_table_details=function(session,table_name){var output=new this.pClass(this.output);var params={session:session,table_name:table_name};var args=new OmniSci_get_table_details_args(params);try{output.writeMessageBegin('get_table_details',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_table_details=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_table_details_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_table_details failed: unknown result');};OmniSciClient.prototype.get_internal_table_details=function(session,table_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_internal_table_details(session,table_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_internal_table_details(session,table_name);}};OmniSciClient.prototype.send_get_internal_table_details=function(session,table_name){var output=new this.pClass(this.output);var params={session:session,table_name:table_name};var args=new OmniSci_get_internal_table_details_args(params);try{output.writeMessageBegin('get_internal_table_details',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_internal_table_details=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_internal_table_details_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_internal_table_details failed: unknown result');};OmniSciClient.prototype.get_users=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_users(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_users(session);}};OmniSciClient.prototype.send_get_users=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_users_args(params);try{output.writeMessageBegin('get_users',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_users=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_users_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_users failed: unknown result');};OmniSciClient.prototype.get_databases=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_databases(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_databases(session);}};OmniSciClient.prototype.send_get_databases=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_databases_args(params);try{output.writeMessageBegin('get_databases',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_databases=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_databases_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_databases failed: unknown result');};OmniSciClient.prototype.get_version=function(callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_version();return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_version();}};OmniSciClient.prototype.send_get_version=function(){var output=new this.pClass(this.output);var args=new OmniSci_get_version_args();try{output.writeMessageBegin('get_version',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_version=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_version_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_version failed: unknown result');};OmniSciClient.prototype.start_heap_profile=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_start_heap_profile(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_start_heap_profile(session);}};OmniSciClient.prototype.send_start_heap_profile=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_start_heap_profile_args(params);try{output.writeMessageBegin('start_heap_profile',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_start_heap_profile=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_start_heap_profile_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.stop_heap_profile=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_stop_heap_profile(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_stop_heap_profile(session);}};OmniSciClient.prototype.send_stop_heap_profile=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_stop_heap_profile_args(params);try{output.writeMessageBegin('stop_heap_profile',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_stop_heap_profile=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_stop_heap_profile_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.get_heap_profile=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_heap_profile(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_heap_profile(session);}};OmniSciClient.prototype.send_get_heap_profile=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_heap_profile_args(params);try{output.writeMessageBegin('get_heap_profile',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_heap_profile=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_heap_profile_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_heap_profile failed: unknown result');};OmniSciClient.prototype.get_memory=function(session,memory_level,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_memory(session,memory_level);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_memory(session,memory_level);}};OmniSciClient.prototype.send_get_memory=function(session,memory_level){var output=new this.pClass(this.output);var params={session:session,memory_level:memory_level};var args=new OmniSci_get_memory_args(params);try{output.writeMessageBegin('get_memory',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_memory=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_memory_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_memory failed: unknown result');};OmniSciClient.prototype.clear_cpu_memory=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_clear_cpu_memory(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_clear_cpu_memory(session);}};OmniSciClient.prototype.send_clear_cpu_memory=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_clear_cpu_memory_args(params);try{output.writeMessageBegin('clear_cpu_memory',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_clear_cpu_memory=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_clear_cpu_memory_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.clear_gpu_memory=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_clear_gpu_memory(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_clear_gpu_memory(session);}};OmniSciClient.prototype.send_clear_gpu_memory=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_clear_gpu_memory_args(params);try{output.writeMessageBegin('clear_gpu_memory',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_clear_gpu_memory=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_clear_gpu_memory_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.set_table_epoch=function(session,db_id,table_id,new_epoch,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_table_epoch(session,db_id,table_id,new_epoch);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_table_epoch(session,db_id,table_id,new_epoch);}};OmniSciClient.prototype.send_set_table_epoch=function(session,db_id,table_id,new_epoch){var output=new this.pClass(this.output);var params={session:session,db_id:db_id,table_id:table_id,new_epoch:new_epoch};var args=new OmniSci_set_table_epoch_args(params);try{output.writeMessageBegin('set_table_epoch',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_set_table_epoch=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_set_table_epoch_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.set_table_epoch_by_name=function(session,table_name,new_epoch,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_table_epoch_by_name(session,table_name,new_epoch);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_table_epoch_by_name(session,table_name,new_epoch);}};OmniSciClient.prototype.send_set_table_epoch_by_name=function(session,table_name,new_epoch){var output=new this.pClass(this.output);var params={session:session,table_name:table_name,new_epoch:new_epoch};var args=new OmniSci_set_table_epoch_by_name_args(params);try{output.writeMessageBegin('set_table_epoch_by_name',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_set_table_epoch_by_name=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_set_table_epoch_by_name_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.get_table_epoch=function(session,db_id,table_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_table_epoch(session,db_id,table_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_table_epoch(session,db_id,table_id);}};OmniSciClient.prototype.send_get_table_epoch=function(session,db_id,table_id){var output=new this.pClass(this.output);var params={session:session,db_id:db_id,table_id:table_id};var args=new OmniSci_get_table_epoch_args(params);try{output.writeMessageBegin('get_table_epoch',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_table_epoch=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_table_epoch_result();result.read(input);input.readMessageEnd();if(null!==result.success){return callback(null,result.success);}return callback('get_table_epoch failed: unknown result');};OmniSciClient.prototype.get_table_epoch_by_name=function(session,table_name,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_table_epoch_by_name(session,table_name);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_table_epoch_by_name(session,table_name);}};OmniSciClient.prototype.send_get_table_epoch_by_name=function(session,table_name){var output=new this.pClass(this.output);var params={session:session,table_name:table_name};var args=new OmniSci_get_table_epoch_by_name_args(params);try{output.writeMessageBegin('get_table_epoch_by_name',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_table_epoch_by_name=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_table_epoch_by_name_result();result.read(input);input.readMessageEnd();if(null!==result.success){return callback(null,result.success);}return callback('get_table_epoch_by_name failed: unknown result');};OmniSciClient.prototype.get_table_epochs=function(session,db_id,table_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_table_epochs(session,db_id,table_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_table_epochs(session,db_id,table_id);}};OmniSciClient.prototype.send_get_table_epochs=function(session,db_id,table_id){var output=new this.pClass(this.output);var params={session:session,db_id:db_id,table_id:table_id};var args=new OmniSci_get_table_epochs_args(params);try{output.writeMessageBegin('get_table_epochs',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_table_epochs=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_table_epochs_result();result.read(input);input.readMessageEnd();if(null!==result.success){return callback(null,result.success);}return callback('get_table_epochs failed: unknown result');};OmniSciClient.prototype.set_table_epochs=function(session,db_id,table_epochs,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_table_epochs(session,db_id,table_epochs);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_table_epochs(session,db_id,table_epochs);}};OmniSciClient.prototype.send_set_table_epochs=function(session,db_id,table_epochs){var output=new this.pClass(this.output);var params={session:session,db_id:db_id,table_epochs:table_epochs};var args=new OmniSci_set_table_epochs_args(params);try{output.writeMessageBegin('set_table_epochs',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_set_table_epochs=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_set_table_epochs_result();result.read(input);input.readMessageEnd();callback(null);};OmniSciClient.prototype.get_session_info=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_session_info(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_session_info(session);}};OmniSciClient.prototype.send_get_session_info=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_session_info_args(params);try{output.writeMessageBegin('get_session_info',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_session_info=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_session_info_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_session_info failed: unknown result');};OmniSciClient.prototype.sql_execute=function(session,query,column_format,nonce,first_n,at_most_n,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_sql_execute(session,query,column_format,nonce,first_n,at_most_n);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_sql_execute(session,query,column_format,nonce,first_n,at_most_n);}};OmniSciClient.prototype.send_sql_execute=function(session,query,column_format,nonce,first_n,at_most_n){var output=new this.pClass(this.output);var params={session:session,query:query,column_format:column_format,nonce:nonce,first_n:first_n,at_most_n:at_most_n};var args=new OmniSci_sql_execute_args(params);try{output.writeMessageBegin('sql_execute',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_sql_execute=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_sql_execute_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('sql_execute failed: unknown result');};OmniSciClient.prototype.sql_execute_df=function(session,query,device_type,device_id,first_n,transport_method,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_sql_execute_df(session,query,device_type,device_id,first_n,transport_method);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_sql_execute_df(session,query,device_type,device_id,first_n,transport_method);}};OmniSciClient.prototype.send_sql_execute_df=function(session,query,device_type,device_id,first_n,transport_method){var output=new this.pClass(this.output);var params={session:session,query:query,device_type:device_type,device_id:device_id,first_n:first_n,transport_method:transport_method};var args=new OmniSci_sql_execute_df_args(params);try{output.writeMessageBegin('sql_execute_df',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_sql_execute_df=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_sql_execute_df_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('sql_execute_df failed: unknown result');};OmniSciClient.prototype.sql_execute_gdf=function(session,query,device_id,first_n,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_sql_execute_gdf(session,query,device_id,first_n);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_sql_execute_gdf(session,query,device_id,first_n);}};OmniSciClient.prototype.send_sql_execute_gdf=function(session,query,device_id,first_n){var output=new this.pClass(this.output);var params={session:session,query:query,device_id:device_id,first_n:first_n};var args=new OmniSci_sql_execute_gdf_args(params);try{output.writeMessageBegin('sql_execute_gdf',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_sql_execute_gdf=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_sql_execute_gdf_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('sql_execute_gdf failed: unknown result');};OmniSciClient.prototype.deallocate_df=function(session,df,device_type,device_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_deallocate_df(session,df,device_type,device_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_deallocate_df(session,df,device_type,device_id);}};OmniSciClient.prototype.send_deallocate_df=function(session,df,device_type,device_id){var output=new this.pClass(this.output);var params={session:session,df:df,device_type:device_type,device_id:device_id};var args=new OmniSci_deallocate_df_args(params);try{output.writeMessageBegin('deallocate_df',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_deallocate_df=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_deallocate_df_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.interrupt=function(query_session,interrupt_session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_interrupt(query_session,interrupt_session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_interrupt(query_session,interrupt_session);}};OmniSciClient.prototype.send_interrupt=function(query_session,interrupt_session){var output=new this.pClass(this.output);var params={query_session:query_session,interrupt_session:interrupt_session};var args=new OmniSci_interrupt_args(params);try{output.writeMessageBegin('interrupt',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_interrupt=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_interrupt_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.sql_validate=function(session,query,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_sql_validate(session,query);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_sql_validate(session,query);}};OmniSciClient.prototype.send_sql_validate=function(session,query){var output=new this.pClass(this.output);var params={session:session,query:query};var args=new OmniSci_sql_validate_args(params);try{output.writeMessageBegin('sql_validate',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_sql_validate=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_sql_validate_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('sql_validate failed: unknown result');};OmniSciClient.prototype.get_completion_hints=function(session,sql,cursor,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_completion_hints(session,sql,cursor);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_completion_hints(session,sql,cursor);}};OmniSciClient.prototype.send_get_completion_hints=function(session,sql,cursor){var output=new this.pClass(this.output);var params={session:session,sql:sql,cursor:cursor};var args=new OmniSci_get_completion_hints_args(params);try{output.writeMessageBegin('get_completion_hints',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_completion_hints=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_completion_hints_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_completion_hints failed: unknown result');};OmniSciClient.prototype.set_execution_mode=function(session,mode,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_execution_mode(session,mode);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_execution_mode(session,mode);}};OmniSciClient.prototype.send_set_execution_mode=function(session,mode){var output=new this.pClass(this.output);var params={session:session,mode:mode};var args=new OmniSci_set_execution_mode_args(params);try{output.writeMessageBegin('set_execution_mode',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_set_execution_mode=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_set_execution_mode_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.render_vega=function(session,widget_id,vega_json,compression_level,nonce,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_render_vega(session,widget_id,vega_json,compression_level,nonce);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_render_vega(session,widget_id,vega_json,compression_level,nonce);}};OmniSciClient.prototype.send_render_vega=function(session,widget_id,vega_json,compression_level,nonce){var output=new this.pClass(this.output);var params={session:session,widget_id:widget_id,vega_json:vega_json,compression_level:compression_level,nonce:nonce};var args=new OmniSci_render_vega_args(params);try{output.writeMessageBegin('render_vega',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_render_vega=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_render_vega_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('render_vega failed: unknown result');};OmniSciClient.prototype.get_result_row_for_pixel=function(session,widget_id,pixel,table_col_names,column_format,pixelRadius,nonce,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_result_row_for_pixel(session,widget_id,pixel,table_col_names,column_format,pixelRadius,nonce);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_result_row_for_pixel(session,widget_id,pixel,table_col_names,column_format,pixelRadius,nonce);}};OmniSciClient.prototype.send_get_result_row_for_pixel=function(session,widget_id,pixel,table_col_names,column_format,pixelRadius,nonce){var output=new this.pClass(this.output);var params={session:session,widget_id:widget_id,pixel:pixel,table_col_names:table_col_names,column_format:column_format,pixelRadius:pixelRadius,nonce:nonce};var args=new OmniSci_get_result_row_for_pixel_args(params);try{output.writeMessageBegin('get_result_row_for_pixel',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_result_row_for_pixel=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_result_row_for_pixel_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_result_row_for_pixel failed: unknown result');};OmniSciClient.prototype.get_dashboard=function(session,dashboard_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_dashboard(session,dashboard_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_dashboard(session,dashboard_id);}};OmniSciClient.prototype.send_get_dashboard=function(session,dashboard_id){var output=new this.pClass(this.output);var params={session:session,dashboard_id:dashboard_id};var args=new OmniSci_get_dashboard_args(params);try{output.writeMessageBegin('get_dashboard',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_dashboard failed: unknown result');};OmniSciClient.prototype.get_dashboards=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_dashboards(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_dashboards(session);}};OmniSciClient.prototype.send_get_dashboards=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_dashboards_args(params);try{output.writeMessageBegin('get_dashboards',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_dashboards=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_dashboards_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_dashboards failed: unknown result');};OmniSciClient.prototype.create_dashboard=function(session,dashboard_name,dashboard_state,image_hash,dashboard_metadata,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_create_dashboard(session,dashboard_name,dashboard_state,image_hash,dashboard_metadata);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_create_dashboard(session,dashboard_name,dashboard_state,image_hash,dashboard_metadata);}};OmniSciClient.prototype.send_create_dashboard=function(session,dashboard_name,dashboard_state,image_hash,dashboard_metadata){var output=new this.pClass(this.output);var params={session:session,dashboard_name:dashboard_name,dashboard_state:dashboard_state,image_hash:image_hash,dashboard_metadata:dashboard_metadata};var args=new OmniSci_create_dashboard_args(params);try{output.writeMessageBegin('create_dashboard',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_create_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_create_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('create_dashboard failed: unknown result');};OmniSciClient.prototype.replace_dashboard=function(session,dashboard_id,dashboard_name,dashboard_owner,dashboard_state,image_hash,dashboard_metadata,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_replace_dashboard(session,dashboard_id,dashboard_name,dashboard_owner,dashboard_state,image_hash,dashboard_metadata);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_replace_dashboard(session,dashboard_id,dashboard_name,dashboard_owner,dashboard_state,image_hash,dashboard_metadata);}};OmniSciClient.prototype.send_replace_dashboard=function(session,dashboard_id,dashboard_name,dashboard_owner,dashboard_state,image_hash,dashboard_metadata){var output=new this.pClass(this.output);var params={session:session,dashboard_id:dashboard_id,dashboard_name:dashboard_name,dashboard_owner:dashboard_owner,dashboard_state:dashboard_state,image_hash:image_hash,dashboard_metadata:dashboard_metadata};var args=new OmniSci_replace_dashboard_args(params);try{output.writeMessageBegin('replace_dashboard',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_replace_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_replace_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.delete_dashboard=function(session,dashboard_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_delete_dashboard(session,dashboard_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_delete_dashboard(session,dashboard_id);}};OmniSciClient.prototype.send_delete_dashboard=function(session,dashboard_id){var output=new this.pClass(this.output);var params={session:session,dashboard_id:dashboard_id};var args=new OmniSci_delete_dashboard_args(params);try{output.writeMessageBegin('delete_dashboard',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_delete_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_delete_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.share_dashboards=function(session,dashboard_ids,groups,permissions,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_share_dashboards(session,dashboard_ids,groups,permissions);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_share_dashboards(session,dashboard_ids,groups,permissions);}};OmniSciClient.prototype.send_share_dashboards=function(session,dashboard_ids,groups,permissions){var output=new this.pClass(this.output);var params={session:session,dashboard_ids:dashboard_ids,groups:groups,permissions:permissions};var args=new OmniSci_share_dashboards_args(params);try{output.writeMessageBegin('share_dashboards',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_share_dashboards=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_share_dashboards_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.delete_dashboards=function(session,dashboard_ids,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_delete_dashboards(session,dashboard_ids);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_delete_dashboards(session,dashboard_ids);}};OmniSciClient.prototype.send_delete_dashboards=function(session,dashboard_ids){var output=new this.pClass(this.output);var params={session:session,dashboard_ids:dashboard_ids};var args=new OmniSci_delete_dashboards_args(params);try{output.writeMessageBegin('delete_dashboards',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_delete_dashboards=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_delete_dashboards_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.share_dashboard=function(session,dashboard_id,groups,objects,permissions,grant_role,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_share_dashboard(session,dashboard_id,groups,objects,permissions,grant_role);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_share_dashboard(session,dashboard_id,groups,objects,permissions,grant_role);}};OmniSciClient.prototype.send_share_dashboard=function(session,dashboard_id,groups,objects,permissions,grant_role){var output=new this.pClass(this.output);var params={session:session,dashboard_id:dashboard_id,groups:groups,objects:objects,permissions:permissions,grant_role:grant_role};var args=new OmniSci_share_dashboard_args(params);try{output.writeMessageBegin('share_dashboard',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_share_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_share_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.unshare_dashboard=function(session,dashboard_id,groups,objects,permissions,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_unshare_dashboard(session,dashboard_id,groups,objects,permissions);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_unshare_dashboard(session,dashboard_id,groups,objects,permissions);}};OmniSciClient.prototype.send_unshare_dashboard=function(session,dashboard_id,groups,objects,permissions){var output=new this.pClass(this.output);var params={session:session,dashboard_id:dashboard_id,groups:groups,objects:objects,permissions:permissions};var args=new OmniSci_unshare_dashboard_args(params);try{output.writeMessageBegin('unshare_dashboard',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_unshare_dashboard=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_unshare_dashboard_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.unshare_dashboards=function(session,dashboard_ids,groups,permissions,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_unshare_dashboards(session,dashboard_ids,groups,permissions);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_unshare_dashboards(session,dashboard_ids,groups,permissions);}};OmniSciClient.prototype.send_unshare_dashboards=function(session,dashboard_ids,groups,permissions){var output=new this.pClass(this.output);var params={session:session,dashboard_ids:dashboard_ids,groups:groups,permissions:permissions};var args=new OmniSci_unshare_dashboards_args(params);try{output.writeMessageBegin('unshare_dashboards',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_unshare_dashboards=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_unshare_dashboards_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.get_dashboard_grantees=function(session,dashboard_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_dashboard_grantees(session,dashboard_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_dashboard_grantees(session,dashboard_id);}};OmniSciClient.prototype.send_get_dashboard_grantees=function(session,dashboard_id){var output=new this.pClass(this.output);var params={session:session,dashboard_id:dashboard_id};var args=new OmniSci_get_dashboard_grantees_args(params);try{output.writeMessageBegin('get_dashboard_grantees',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_dashboard_grantees=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_dashboard_grantees_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_dashboard_grantees failed: unknown result');};OmniSciClient.prototype.get_link_view=function(session,link,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_link_view(session,link);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_link_view(session,link);}};OmniSciClient.prototype.send_get_link_view=function(session,link){var output=new this.pClass(this.output);var params={session:session,link:link};var args=new OmniSci_get_link_view_args(params);try{output.writeMessageBegin('get_link_view',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_link_view=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_link_view_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_link_view failed: unknown result');};OmniSciClient.prototype.create_link=function(session,view_state,view_metadata,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_create_link(session,view_state,view_metadata);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_create_link(session,view_state,view_metadata);}};OmniSciClient.prototype.send_create_link=function(session,view_state,view_metadata){var output=new this.pClass(this.output);var params={session:session,view_state:view_state,view_metadata:view_metadata};var args=new OmniSci_create_link_args(params);try{output.writeMessageBegin('create_link',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_create_link=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_create_link_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('create_link failed: unknown result');};OmniSciClient.prototype.load_table_binary=function(session,table_name,rows,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_load_table_binary(session,table_name,rows);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_load_table_binary(session,table_name,rows);}};OmniSciClient.prototype.send_load_table_binary=function(session,table_name,rows){var output=new this.pClass(this.output);var params={session:session,table_name:table_name,rows:rows};var args=new OmniSci_load_table_binary_args(params);try{output.writeMessageBegin('load_table_binary',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_load_table_binary=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_load_table_binary_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.load_table_binary_columnar=function(session,table_name,cols,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_load_table_binary_columnar(session,table_name,cols);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_load_table_binary_columnar(session,table_name,cols);}};OmniSciClient.prototype.send_load_table_binary_columnar=function(session,table_name,cols){var output=new this.pClass(this.output);var params={session:session,table_name:table_name,cols:cols};var args=new OmniSci_load_table_binary_columnar_args(params);try{output.writeMessageBegin('load_table_binary_columnar',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_load_table_binary_columnar=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_load_table_binary_columnar_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.load_table_binary_arrow=function(session,table_name,arrow_stream,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_load_table_binary_arrow(session,table_name,arrow_stream);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_load_table_binary_arrow(session,table_name,arrow_stream);}};OmniSciClient.prototype.send_load_table_binary_arrow=function(session,table_name,arrow_stream){var output=new this.pClass(this.output);var params={session:session,table_name:table_name,arrow_stream:arrow_stream};var args=new OmniSci_load_table_binary_arrow_args(params);try{output.writeMessageBegin('load_table_binary_arrow',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_load_table_binary_arrow=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_load_table_binary_arrow_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.load_table=function(session,table_name,rows,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_load_table(session,table_name,rows);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_load_table(session,table_name,rows);}};OmniSciClient.prototype.send_load_table=function(session,table_name,rows){var output=new this.pClass(this.output);var params={session:session,table_name:table_name,rows:rows};var args=new OmniSci_load_table_args(params);try{output.writeMessageBegin('load_table',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_load_table=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_load_table_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.detect_column_types=function(session,file_name,copy_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_detect_column_types(session,file_name,copy_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_detect_column_types(session,file_name,copy_params);}};OmniSciClient.prototype.send_detect_column_types=function(session,file_name,copy_params){var output=new this.pClass(this.output);var params={session:session,file_name:file_name,copy_params:copy_params};var args=new OmniSci_detect_column_types_args(params);try{output.writeMessageBegin('detect_column_types',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_detect_column_types=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_detect_column_types_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('detect_column_types failed: unknown result');};OmniSciClient.prototype.create_table=function(session,table_name,row_desc,file_type,create_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_create_table(session,table_name,row_desc,file_type,create_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_create_table(session,table_name,row_desc,file_type,create_params);}};OmniSciClient.prototype.send_create_table=function(session,table_name,row_desc,file_type,create_params){var output=new this.pClass(this.output);var params={session:session,table_name:table_name,row_desc:row_desc,file_type:file_type,create_params:create_params};var args=new OmniSci_create_table_args(params);try{output.writeMessageBegin('create_table',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_create_table=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_create_table_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.import_table=function(session,table_name,file_name,copy_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_import_table(session,table_name,file_name,copy_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_import_table(session,table_name,file_name,copy_params);}};OmniSciClient.prototype.send_import_table=function(session,table_name,file_name,copy_params){var output=new this.pClass(this.output);var params={session:session,table_name:table_name,file_name:file_name,copy_params:copy_params};var args=new OmniSci_import_table_args(params);try{output.writeMessageBegin('import_table',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_import_table=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_import_table_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.import_geo_table=function(session,table_name,file_name,copy_params,row_desc,create_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_import_geo_table(session,table_name,file_name,copy_params,row_desc,create_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_import_geo_table(session,table_name,file_name,copy_params,row_desc,create_params);}};OmniSciClient.prototype.send_import_geo_table=function(session,table_name,file_name,copy_params,row_desc,create_params){var output=new this.pClass(this.output);var params={session:session,table_name:table_name,file_name:file_name,copy_params:copy_params,row_desc:row_desc,create_params:create_params};var args=new OmniSci_import_geo_table_args(params);try{output.writeMessageBegin('import_geo_table',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_import_geo_table=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_import_geo_table_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.import_table_status=function(session,import_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_import_table_status(session,import_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_import_table_status(session,import_id);}};OmniSciClient.prototype.send_import_table_status=function(session,import_id){var output=new this.pClass(this.output);var params={session:session,import_id:import_id};var args=new OmniSci_import_table_status_args(params);try{output.writeMessageBegin('import_table_status',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_import_table_status=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_import_table_status_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('import_table_status failed: unknown result');};OmniSciClient.prototype.get_first_geo_file_in_archive=function(session,archive_path,copy_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_first_geo_file_in_archive(session,archive_path,copy_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_first_geo_file_in_archive(session,archive_path,copy_params);}};OmniSciClient.prototype.send_get_first_geo_file_in_archive=function(session,archive_path,copy_params){var output=new this.pClass(this.output);var params={session:session,archive_path:archive_path,copy_params:copy_params};var args=new OmniSci_get_first_geo_file_in_archive_args(params);try{output.writeMessageBegin('get_first_geo_file_in_archive',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_first_geo_file_in_archive=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_first_geo_file_in_archive_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_first_geo_file_in_archive failed: unknown result');};OmniSciClient.prototype.get_all_files_in_archive=function(session,archive_path,copy_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_all_files_in_archive(session,archive_path,copy_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_all_files_in_archive(session,archive_path,copy_params);}};OmniSciClient.prototype.send_get_all_files_in_archive=function(session,archive_path,copy_params){var output=new this.pClass(this.output);var params={session:session,archive_path:archive_path,copy_params:copy_params};var args=new OmniSci_get_all_files_in_archive_args(params);try{output.writeMessageBegin('get_all_files_in_archive',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_all_files_in_archive=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_all_files_in_archive_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_all_files_in_archive failed: unknown result');};OmniSciClient.prototype.get_layers_in_geo_file=function(session,file_name,copy_params,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_layers_in_geo_file(session,file_name,copy_params);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_layers_in_geo_file(session,file_name,copy_params);}};OmniSciClient.prototype.send_get_layers_in_geo_file=function(session,file_name,copy_params){var output=new this.pClass(this.output);var params={session:session,file_name:file_name,copy_params:copy_params};var args=new OmniSci_get_layers_in_geo_file_args(params);try{output.writeMessageBegin('get_layers_in_geo_file',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_layers_in_geo_file=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_layers_in_geo_file_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_layers_in_geo_file failed: unknown result');};OmniSciClient.prototype.query_get_outer_fragment_count=function(session,query,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_query_get_outer_fragment_count(session,query);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_query_get_outer_fragment_count(session,query);}};OmniSciClient.prototype.send_query_get_outer_fragment_count=function(session,query){var output=new this.pClass(this.output);var params={session:session,query:query};var args=new OmniSci_query_get_outer_fragment_count_args(params);try{output.writeMessageBegin('query_get_outer_fragment_count',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_query_get_outer_fragment_count=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_query_get_outer_fragment_count_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('query_get_outer_fragment_count failed: unknown result');};OmniSciClient.prototype.check_table_consistency=function(session,table_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_check_table_consistency(session,table_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_check_table_consistency(session,table_id);}};OmniSciClient.prototype.send_check_table_consistency=function(session,table_id){var output=new this.pClass(this.output);var params={session:session,table_id:table_id};var args=new OmniSci_check_table_consistency_args(params);try{output.writeMessageBegin('check_table_consistency',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_check_table_consistency=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_check_table_consistency_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('check_table_consistency failed: unknown result');};OmniSciClient.prototype.start_query=function(leaf_session,parent_session,query_ra,just_explain,outer_fragment_indices,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_start_query(leaf_session,parent_session,query_ra,just_explain,outer_fragment_indices);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_start_query(leaf_session,parent_session,query_ra,just_explain,outer_fragment_indices);}};OmniSciClient.prototype.send_start_query=function(leaf_session,parent_session,query_ra,just_explain,outer_fragment_indices){var output=new this.pClass(this.output);var params={leaf_session:leaf_session,parent_session:parent_session,query_ra:query_ra,just_explain:just_explain,outer_fragment_indices:outer_fragment_indices};var args=new OmniSci_start_query_args(params);try{output.writeMessageBegin('start_query',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_start_query=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_start_query_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('start_query failed: unknown result');};OmniSciClient.prototype.execute_query_step=function(pending_query,subquery_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_execute_query_step(pending_query,subquery_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_execute_query_step(pending_query,subquery_id);}};OmniSciClient.prototype.send_execute_query_step=function(pending_query,subquery_id){var output=new this.pClass(this.output);var params={pending_query:pending_query,subquery_id:subquery_id};var args=new OmniSci_execute_query_step_args(params);try{output.writeMessageBegin('execute_query_step',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_execute_query_step=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_execute_query_step_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('execute_query_step failed: unknown result');};OmniSciClient.prototype.broadcast_serialized_rows=function(serialized_rows,row_desc,query_id,subquery_id,is_final_subquery_result,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_broadcast_serialized_rows(serialized_rows,row_desc,query_id,subquery_id,is_final_subquery_result);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_broadcast_serialized_rows(serialized_rows,row_desc,query_id,subquery_id,is_final_subquery_result);}};OmniSciClient.prototype.send_broadcast_serialized_rows=function(serialized_rows,row_desc,query_id,subquery_id,is_final_subquery_result){var output=new this.pClass(this.output);var params={serialized_rows:serialized_rows,row_desc:row_desc,query_id:query_id,subquery_id:subquery_id,is_final_subquery_result:is_final_subquery_result};var args=new OmniSci_broadcast_serialized_rows_args(params);try{output.writeMessageBegin('broadcast_serialized_rows',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_broadcast_serialized_rows=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_broadcast_serialized_rows_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.start_render_query=function(session,widget_id,node_idx,vega_json,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_start_render_query(session,widget_id,node_idx,vega_json);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_start_render_query(session,widget_id,node_idx,vega_json);}};OmniSciClient.prototype.send_start_render_query=function(session,widget_id,node_idx,vega_json){var output=new this.pClass(this.output);var params={session:session,widget_id:widget_id,node_idx:node_idx,vega_json:vega_json};var args=new OmniSci_start_render_query_args(params);try{output.writeMessageBegin('start_render_query',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_start_render_query=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_start_render_query_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('start_render_query failed: unknown result');};OmniSciClient.prototype.execute_next_render_step=function(pending_render,merged_data,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_execute_next_render_step(pending_render,merged_data);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_execute_next_render_step(pending_render,merged_data);}};OmniSciClient.prototype.send_execute_next_render_step=function(pending_render,merged_data){var output=new this.pClass(this.output);var params={pending_render:pending_render,merged_data:merged_data};var args=new OmniSci_execute_next_render_step_args(params);try{output.writeMessageBegin('execute_next_render_step',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_execute_next_render_step=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_execute_next_render_step_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('execute_next_render_step failed: unknown result');};OmniSciClient.prototype.insert_data=function(session,insert_data,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_insert_data(session,insert_data);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_insert_data(session,insert_data);}};OmniSciClient.prototype.send_insert_data=function(session,insert_data){var output=new this.pClass(this.output);var params={session:session,insert_data:insert_data};var args=new OmniSci_insert_data_args(params);try{output.writeMessageBegin('insert_data',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_insert_data=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_insert_data_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.checkpoint=function(session,table_id,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_checkpoint(session,table_id);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_checkpoint(session,table_id);}};OmniSciClient.prototype.send_checkpoint=function(session,table_id){var output=new this.pClass(this.output);var params={session:session,table_id:table_id};var args=new OmniSci_checkpoint_args(params);try{output.writeMessageBegin('checkpoint',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_checkpoint=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_checkpoint_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};OmniSciClient.prototype.get_roles=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_roles(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_roles(session);}};OmniSciClient.prototype.send_get_roles=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_roles_args(params);try{output.writeMessageBegin('get_roles',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_roles=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_roles_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_roles failed: unknown result');};OmniSciClient.prototype.get_db_objects_for_grantee=function(session,roleName,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_db_objects_for_grantee(session,roleName);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_db_objects_for_grantee(session,roleName);}};OmniSciClient.prototype.send_get_db_objects_for_grantee=function(session,roleName){var output=new this.pClass(this.output);var params={session:session,roleName:roleName};var args=new OmniSci_get_db_objects_for_grantee_args(params);try{output.writeMessageBegin('get_db_objects_for_grantee',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_db_objects_for_grantee=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_db_objects_for_grantee_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_db_objects_for_grantee failed: unknown result');};OmniSciClient.prototype.get_db_object_privs=function(session,objectName,type,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_db_object_privs(session,objectName,type);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_db_object_privs(session,objectName,type);}};OmniSciClient.prototype.send_get_db_object_privs=function(session,objectName,type){var output=new this.pClass(this.output);var params={session:session,objectName:objectName,type:type};var args=new OmniSci_get_db_object_privs_args(params);try{output.writeMessageBegin('get_db_object_privs',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_db_object_privs=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_db_object_privs_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_db_object_privs failed: unknown result');};OmniSciClient.prototype.get_all_roles_for_user=function(session,userName,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_all_roles_for_user(session,userName);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_all_roles_for_user(session,userName);}};OmniSciClient.prototype.send_get_all_roles_for_user=function(session,userName){var output=new this.pClass(this.output);var params={session:session,userName:userName};var args=new OmniSci_get_all_roles_for_user_args(params);try{output.writeMessageBegin('get_all_roles_for_user',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_all_roles_for_user=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_all_roles_for_user_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_all_roles_for_user failed: unknown result');};OmniSciClient.prototype.has_role=function(session,granteeName,roleName,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_has_role(session,granteeName,roleName);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_has_role(session,granteeName,roleName);}};OmniSciClient.prototype.send_has_role=function(session,granteeName,roleName){var output=new this.pClass(this.output);var params={session:session,granteeName:granteeName,roleName:roleName};var args=new OmniSci_has_role_args(params);try{output.writeMessageBegin('has_role',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_has_role=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_has_role_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('has_role failed: unknown result');};OmniSciClient.prototype.has_object_privilege=function(session,granteeName,ObjectName,objectType,permissions,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_has_object_privilege(session,granteeName,ObjectName,objectType,permissions);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_has_object_privilege(session,granteeName,ObjectName,objectType,permissions);}};OmniSciClient.prototype.send_has_object_privilege=function(session,granteeName,ObjectName,objectType,permissions){var output=new this.pClass(this.output);var params={session:session,granteeName:granteeName,ObjectName:ObjectName,objectType:objectType,permissions:permissions};var args=new OmniSci_has_object_privilege_args(params);try{output.writeMessageBegin('has_object_privilege',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_has_object_privilege=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_has_object_privilege_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('has_object_privilege failed: unknown result');};OmniSciClient.prototype.set_license_key=function(session,key,nonce,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_set_license_key(session,key,nonce);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_set_license_key(session,key,nonce);}};OmniSciClient.prototype.send_set_license_key=function(session,key,nonce){var output=new this.pClass(this.output);var params={session:session,key:key,nonce:nonce};var args=new OmniSci_set_license_key_args(params);try{output.writeMessageBegin('set_license_key',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_set_license_key=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_set_license_key_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('set_license_key failed: unknown result');};OmniSciClient.prototype.get_license_claims=function(session,nonce,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_license_claims(session,nonce);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_license_claims(session,nonce);}};OmniSciClient.prototype.send_get_license_claims=function(session,nonce){var output=new this.pClass(this.output);var params={session:session,nonce:nonce};var args=new OmniSci_get_license_claims_args(params);try{output.writeMessageBegin('get_license_claims',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_license_claims=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_license_claims_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_license_claims failed: unknown result');};OmniSciClient.prototype.get_device_parameters=function(session,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_get_device_parameters(session);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_get_device_parameters(session);}};OmniSciClient.prototype.send_get_device_parameters=function(session){var output=new this.pClass(this.output);var params={session:session};var args=new OmniSci_get_device_parameters_args(params);try{output.writeMessageBegin('get_device_parameters',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_get_device_parameters=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_get_device_parameters_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}if(null!==result.success){return callback(null,result.success);}return callback('get_device_parameters failed: unknown result');};OmniSciClient.prototype.register_runtime_extension_functions=function(session,udfs,udtfs,device_ir_map,callback){this._seqid=this.new_seqid();if(callback===undefined){var _defer=Q.defer();this._reqs[this.seqid()]=function(error,result){if(error){_defer.reject(error);}else{_defer.resolve(result);}};this.send_register_runtime_extension_functions(session,udfs,udtfs,device_ir_map);return _defer.promise;}else{this._reqs[this.seqid()]=callback;this.send_register_runtime_extension_functions(session,udfs,udtfs,device_ir_map);}};OmniSciClient.prototype.send_register_runtime_extension_functions=function(session,udfs,udtfs,device_ir_map){var output=new this.pClass(this.output);var params={session:session,udfs:udfs,udtfs:udtfs,device_ir_map:device_ir_map};var args=new OmniSci_register_runtime_extension_functions_args(params);try{output.writeMessageBegin('register_runtime_extension_functions',Thrift.MessageType.CALL,this.seqid());args.write(output);output.writeMessageEnd();return this.output.flush();}catch(e){delete this._reqs[this.seqid()];if(typeof output.reset==='function'){output.reset();}throw e;}};OmniSciClient.prototype.recv_register_runtime_extension_functions=function(input,mtype,rseqid){var callback=this._reqs[rseqid]||function(){};delete this._reqs[rseqid];if(mtype==Thrift.MessageType.EXCEPTION){var x=new Thrift.TApplicationException();x.read(input);input.readMessageEnd();return callback(x);}var result=new OmniSci_register_runtime_extension_functions_result();result.read(input);input.readMessageEnd();if(null!==result.e){return callback(result.e);}callback(null);};var OmniSciProcessor=exports.Processor=function(handler){this._handler=handler;};OmniSciProcessor.prototype.process=function(input,output){var r=input.readMessageBegin();if(this['process_'+r.fname]){return this['process_'+r.fname].call(this,r.rseqid,input,output);}else{input.skip(Thrift.Type.STRUCT);input.readMessageEnd();var x=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD,'Unknown function '+r.fname);output.writeMessageBegin(r.fname,Thrift.MessageType.EXCEPTION,r.rseqid);x.write(output);output.writeMessageEnd();output.flush();}};OmniSciProcessor.prototype.process_connect=function(seqid,input,output){var args=new OmniSci_connect_args();args.read(input);input.readMessageEnd();if(this._handler.connect.length===3){Q.fcall(this._handler.connect.bind(this._handler),args.user,args.passwd,args.dbname).then(function(result){var result_obj=new OmniSci_connect_result({success:result});output.writeMessageBegin("connect",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_connect_result(err);output.writeMessageBegin("connect",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("connect",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.connect(args.user,args.passwd,args.dbname,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_connect_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("connect",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("connect",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_krb5_connect=function(seqid,input,output){var args=new OmniSci_krb5_connect_args();args.read(input);input.readMessageEnd();if(this._handler.krb5_connect.length===2){Q.fcall(this._handler.krb5_connect.bind(this._handler),args.inputToken,args.dbname).then(function(result){var result_obj=new OmniSci_krb5_connect_result({success:result});output.writeMessageBegin("krb5_connect",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_krb5_connect_result(err);output.writeMessageBegin("krb5_connect",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("krb5_connect",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.krb5_connect(args.inputToken,args.dbname,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_krb5_connect_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("krb5_connect",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("krb5_connect",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_disconnect=function(seqid,input,output){var args=new OmniSci_disconnect_args();args.read(input);input.readMessageEnd();if(this._handler.disconnect.length===1){Q.fcall(this._handler.disconnect.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_disconnect_result({success:result});output.writeMessageBegin("disconnect",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_disconnect_result(err);output.writeMessageBegin("disconnect",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("disconnect",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.disconnect(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_disconnect_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("disconnect",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("disconnect",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_switch_database=function(seqid,input,output){var args=new OmniSci_switch_database_args();args.read(input);input.readMessageEnd();if(this._handler.switch_database.length===2){Q.fcall(this._handler.switch_database.bind(this._handler),args.session,args.dbname).then(function(result){var result_obj=new OmniSci_switch_database_result({success:result});output.writeMessageBegin("switch_database",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_switch_database_result(err);output.writeMessageBegin("switch_database",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("switch_database",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.switch_database(args.session,args.dbname,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_switch_database_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("switch_database",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("switch_database",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_clone_session=function(seqid,input,output){var args=new OmniSci_clone_session_args();args.read(input);input.readMessageEnd();if(this._handler.clone_session.length===1){Q.fcall(this._handler.clone_session.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_clone_session_result({success:result});output.writeMessageBegin("clone_session",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_clone_session_result(err);output.writeMessageBegin("clone_session",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clone_session",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.clone_session(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_clone_session_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("clone_session",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clone_session",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_server_status=function(seqid,input,output){var args=new OmniSci_get_server_status_args();args.read(input);input.readMessageEnd();if(this._handler.get_server_status.length===1){Q.fcall(this._handler.get_server_status.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_server_status_result({success:result});output.writeMessageBegin("get_server_status",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_server_status_result(err);output.writeMessageBegin("get_server_status",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_server_status",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_server_status(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_server_status_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_server_status",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_server_status",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_status=function(seqid,input,output){var args=new OmniSci_get_status_args();args.read(input);input.readMessageEnd();if(this._handler.get_status.length===1){Q.fcall(this._handler.get_status.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_status_result({success:result});output.writeMessageBegin("get_status",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_status_result(err);output.writeMessageBegin("get_status",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_status",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_status(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_status_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_status",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_status",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_hardware_info=function(seqid,input,output){var args=new OmniSci_get_hardware_info_args();args.read(input);input.readMessageEnd();if(this._handler.get_hardware_info.length===1){Q.fcall(this._handler.get_hardware_info.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_hardware_info_result({success:result});output.writeMessageBegin("get_hardware_info",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_hardware_info_result(err);output.writeMessageBegin("get_hardware_info",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_hardware_info",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_hardware_info(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_hardware_info_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_hardware_info",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_hardware_info",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_tables=function(seqid,input,output){var args=new OmniSci_get_tables_args();args.read(input);input.readMessageEnd();if(this._handler.get_tables.length===1){Q.fcall(this._handler.get_tables.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_tables_result({success:result});output.writeMessageBegin("get_tables",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_tables_result(err);output.writeMessageBegin("get_tables",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_tables",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_tables(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_tables_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_tables",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_tables",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_physical_tables=function(seqid,input,output){var args=new OmniSci_get_physical_tables_args();args.read(input);input.readMessageEnd();if(this._handler.get_physical_tables.length===1){Q.fcall(this._handler.get_physical_tables.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_physical_tables_result({success:result});output.writeMessageBegin("get_physical_tables",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_physical_tables_result(err);output.writeMessageBegin("get_physical_tables",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_physical_tables",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_physical_tables(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_physical_tables_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_physical_tables",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_physical_tables",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_views=function(seqid,input,output){var args=new OmniSci_get_views_args();args.read(input);input.readMessageEnd();if(this._handler.get_views.length===1){Q.fcall(this._handler.get_views.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_views_result({success:result});output.writeMessageBegin("get_views",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_views_result(err);output.writeMessageBegin("get_views",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_views",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_views(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_views_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_views",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_views",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_tables_meta=function(seqid,input,output){var args=new OmniSci_get_tables_meta_args();args.read(input);input.readMessageEnd();if(this._handler.get_tables_meta.length===1){Q.fcall(this._handler.get_tables_meta.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_tables_meta_result({success:result});output.writeMessageBegin("get_tables_meta",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_tables_meta_result(err);output.writeMessageBegin("get_tables_meta",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_tables_meta",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_tables_meta(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_tables_meta_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_tables_meta",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_tables_meta",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_table_details=function(seqid,input,output){var args=new OmniSci_get_table_details_args();args.read(input);input.readMessageEnd();if(this._handler.get_table_details.length===2){Q.fcall(this._handler.get_table_details.bind(this._handler),args.session,args.table_name).then(function(result){var result_obj=new OmniSci_get_table_details_result({success:result});output.writeMessageBegin("get_table_details",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_table_details_result(err);output.writeMessageBegin("get_table_details",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_details",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_table_details(args.session,args.table_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_table_details_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_table_details",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_details",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_internal_table_details=function(seqid,input,output){var args=new OmniSci_get_internal_table_details_args();args.read(input);input.readMessageEnd();if(this._handler.get_internal_table_details.length===2){Q.fcall(this._handler.get_internal_table_details.bind(this._handler),args.session,args.table_name).then(function(result){var result_obj=new OmniSci_get_internal_table_details_result({success:result});output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_internal_table_details_result(err);output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_internal_table_details(args.session,args.table_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_internal_table_details_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_internal_table_details",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_users=function(seqid,input,output){var args=new OmniSci_get_users_args();args.read(input);input.readMessageEnd();if(this._handler.get_users.length===1){Q.fcall(this._handler.get_users.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_users_result({success:result});output.writeMessageBegin("get_users",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_users_result(err);output.writeMessageBegin("get_users",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_users",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_users(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_users_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_users",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_users",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_databases=function(seqid,input,output){var args=new OmniSci_get_databases_args();args.read(input);input.readMessageEnd();if(this._handler.get_databases.length===1){Q.fcall(this._handler.get_databases.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_databases_result({success:result});output.writeMessageBegin("get_databases",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_databases_result(err);output.writeMessageBegin("get_databases",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_databases",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_databases(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_databases_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_databases",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_databases",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_version=function(seqid,input,output){var args=new OmniSci_get_version_args();args.read(input);input.readMessageEnd();if(this._handler.get_version.length===0){Q.fcall(this._handler.get_version.bind(this._handler)).then(function(result){var result_obj=new OmniSci_get_version_result({success:result});output.writeMessageBegin("get_version",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_version_result(err);output.writeMessageBegin("get_version",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_version",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_version(function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_version_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_version",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_version",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_start_heap_profile=function(seqid,input,output){var args=new OmniSci_start_heap_profile_args();args.read(input);input.readMessageEnd();if(this._handler.start_heap_profile.length===1){Q.fcall(this._handler.start_heap_profile.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_start_heap_profile_result({success:result});output.writeMessageBegin("start_heap_profile",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_start_heap_profile_result(err);output.writeMessageBegin("start_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.start_heap_profile(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_start_heap_profile_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("start_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_stop_heap_profile=function(seqid,input,output){var args=new OmniSci_stop_heap_profile_args();args.read(input);input.readMessageEnd();if(this._handler.stop_heap_profile.length===1){Q.fcall(this._handler.stop_heap_profile.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_stop_heap_profile_result({success:result});output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_stop_heap_profile_result(err);output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.stop_heap_profile(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_stop_heap_profile_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("stop_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_heap_profile=function(seqid,input,output){var args=new OmniSci_get_heap_profile_args();args.read(input);input.readMessageEnd();if(this._handler.get_heap_profile.length===1){Q.fcall(this._handler.get_heap_profile.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_heap_profile_result({success:result});output.writeMessageBegin("get_heap_profile",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_heap_profile_result(err);output.writeMessageBegin("get_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_heap_profile(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_heap_profile_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_heap_profile",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_heap_profile",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_memory=function(seqid,input,output){var args=new OmniSci_get_memory_args();args.read(input);input.readMessageEnd();if(this._handler.get_memory.length===2){Q.fcall(this._handler.get_memory.bind(this._handler),args.session,args.memory_level).then(function(result){var result_obj=new OmniSci_get_memory_result({success:result});output.writeMessageBegin("get_memory",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_memory_result(err);output.writeMessageBegin("get_memory",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_memory",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_memory(args.session,args.memory_level,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_memory_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_memory",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_memory",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_clear_cpu_memory=function(seqid,input,output){var args=new OmniSci_clear_cpu_memory_args();args.read(input);input.readMessageEnd();if(this._handler.clear_cpu_memory.length===1){Q.fcall(this._handler.clear_cpu_memory.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_clear_cpu_memory_result({success:result});output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_clear_cpu_memory_result(err);output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.clear_cpu_memory(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_clear_cpu_memory_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clear_cpu_memory",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_clear_gpu_memory=function(seqid,input,output){var args=new OmniSci_clear_gpu_memory_args();args.read(input);input.readMessageEnd();if(this._handler.clear_gpu_memory.length===1){Q.fcall(this._handler.clear_gpu_memory.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_clear_gpu_memory_result({success:result});output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_clear_gpu_memory_result(err);output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.clear_gpu_memory(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_clear_gpu_memory_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("clear_gpu_memory",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_set_table_epoch=function(seqid,input,output){var args=new OmniSci_set_table_epoch_args();args.read(input);input.readMessageEnd();if(this._handler.set_table_epoch.length===4){Q.fcall(this._handler.set_table_epoch.bind(this._handler),args.session,args.db_id,args.table_id,args.new_epoch).then(function(result){var result_obj=new OmniSci_set_table_epoch_result({success:result});output.writeMessageBegin("set_table_epoch",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_set_table_epoch_result(err);output.writeMessageBegin("set_table_epoch",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epoch",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_table_epoch(args.session,args.db_id,args.table_id,args.new_epoch,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_set_table_epoch_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_table_epoch",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epoch",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_set_table_epoch_by_name=function(seqid,input,output){var args=new OmniSci_set_table_epoch_by_name_args();args.read(input);input.readMessageEnd();if(this._handler.set_table_epoch_by_name.length===3){Q.fcall(this._handler.set_table_epoch_by_name.bind(this._handler),args.session,args.table_name,args.new_epoch).then(function(result){var result_obj=new OmniSci_set_table_epoch_by_name_result({success:result});output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_set_table_epoch_by_name_result(err);output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_table_epoch_by_name(args.session,args.table_name,args.new_epoch,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_set_table_epoch_by_name_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epoch_by_name",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_table_epoch=function(seqid,input,output){var args=new OmniSci_get_table_epoch_args();args.read(input);input.readMessageEnd();if(this._handler.get_table_epoch.length===3){Q.fcall(this._handler.get_table_epoch.bind(this._handler),args.session,args.db_id,args.table_id).then(function(result){var result_obj=new OmniSci_get_table_epoch_result({success:result});output.writeMessageBegin("get_table_epoch",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epoch",Thrift.MessageType.EXCEPTION,seqid);result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_table_epoch(args.session,args.db_id,args.table_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'){result_obj=new OmniSci_get_table_epoch_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_table_epoch",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epoch",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_table_epoch_by_name=function(seqid,input,output){var args=new OmniSci_get_table_epoch_by_name_args();args.read(input);input.readMessageEnd();if(this._handler.get_table_epoch_by_name.length===2){Q.fcall(this._handler.get_table_epoch_by_name.bind(this._handler),args.session,args.table_name).then(function(result){var result_obj=new OmniSci_get_table_epoch_by_name_result({success:result});output.writeMessageBegin("get_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epoch_by_name",Thrift.MessageType.EXCEPTION,seqid);result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_table_epoch_by_name(args.session,args.table_name,function(err,result){var result_obj;if(err===null||typeof err==='undefined'){result_obj=new OmniSci_get_table_epoch_by_name_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_table_epoch_by_name",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epoch_by_name",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_table_epochs=function(seqid,input,output){var args=new OmniSci_get_table_epochs_args();args.read(input);input.readMessageEnd();if(this._handler.get_table_epochs.length===3){Q.fcall(this._handler.get_table_epochs.bind(this._handler),args.session,args.db_id,args.table_id).then(function(result){var result_obj=new OmniSci_get_table_epochs_result({success:result});output.writeMessageBegin("get_table_epochs",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epochs",Thrift.MessageType.EXCEPTION,seqid);result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_table_epochs(args.session,args.db_id,args.table_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'){result_obj=new OmniSci_get_table_epochs_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_table_epochs",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_table_epochs",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_set_table_epochs=function(seqid,input,output){var args=new OmniSci_set_table_epochs_args();args.read(input);input.readMessageEnd();if(this._handler.set_table_epochs.length===3){Q.fcall(this._handler.set_table_epochs.bind(this._handler),args.session,args.db_id,args.table_epochs).then(function(result){var result_obj=new OmniSci_set_table_epochs_result({success:result});output.writeMessageBegin("set_table_epochs",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epochs",Thrift.MessageType.EXCEPTION,seqid);result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_table_epochs(args.session,args.db_id,args.table_epochs,function(err,result){var result_obj;if(err===null||typeof err==='undefined'){result_obj=new OmniSci_set_table_epochs_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_table_epochs",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_table_epochs",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_session_info=function(seqid,input,output){var args=new OmniSci_get_session_info_args();args.read(input);input.readMessageEnd();if(this._handler.get_session_info.length===1){Q.fcall(this._handler.get_session_info.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_session_info_result({success:result});output.writeMessageBegin("get_session_info",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_session_info_result(err);output.writeMessageBegin("get_session_info",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_session_info",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_session_info(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_session_info_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_session_info",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_session_info",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_sql_execute=function(seqid,input,output){var args=new OmniSci_sql_execute_args();args.read(input);input.readMessageEnd();if(this._handler.sql_execute.length===6){Q.fcall(this._handler.sql_execute.bind(this._handler),args.session,args.query,args.column_format,args.nonce,args.first_n,args.at_most_n).then(function(result){var result_obj=new OmniSci_sql_execute_result({success:result});output.writeMessageBegin("sql_execute",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_sql_execute_result(err);output.writeMessageBegin("sql_execute",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.sql_execute(args.session,args.query,args.column_format,args.nonce,args.first_n,args.at_most_n,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_sql_execute_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("sql_execute",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_sql_execute_df=function(seqid,input,output){var args=new OmniSci_sql_execute_df_args();args.read(input);input.readMessageEnd();if(this._handler.sql_execute_df.length===6){Q.fcall(this._handler.sql_execute_df.bind(this._handler),args.session,args.query,args.device_type,args.device_id,args.first_n,args.transport_method).then(function(result){var result_obj=new OmniSci_sql_execute_df_result({success:result});output.writeMessageBegin("sql_execute_df",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_sql_execute_df_result(err);output.writeMessageBegin("sql_execute_df",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute_df",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.sql_execute_df(args.session,args.query,args.device_type,args.device_id,args.first_n,args.transport_method,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_sql_execute_df_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("sql_execute_df",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute_df",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_sql_execute_gdf=function(seqid,input,output){var args=new OmniSci_sql_execute_gdf_args();args.read(input);input.readMessageEnd();if(this._handler.sql_execute_gdf.length===4){Q.fcall(this._handler.sql_execute_gdf.bind(this._handler),args.session,args.query,args.device_id,args.first_n).then(function(result){var result_obj=new OmniSci_sql_execute_gdf_result({success:result});output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_sql_execute_gdf_result(err);output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.sql_execute_gdf(args.session,args.query,args.device_id,args.first_n,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_sql_execute_gdf_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_execute_gdf",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_deallocate_df=function(seqid,input,output){var args=new OmniSci_deallocate_df_args();args.read(input);input.readMessageEnd();if(this._handler.deallocate_df.length===4){Q.fcall(this._handler.deallocate_df.bind(this._handler),args.session,args.df,args.device_type,args.device_id).then(function(result){var result_obj=new OmniSci_deallocate_df_result({success:result});output.writeMessageBegin("deallocate_df",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_deallocate_df_result(err);output.writeMessageBegin("deallocate_df",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("deallocate_df",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.deallocate_df(args.session,args.df,args.device_type,args.device_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_deallocate_df_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("deallocate_df",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("deallocate_df",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_interrupt=function(seqid,input,output){var args=new OmniSci_interrupt_args();args.read(input);input.readMessageEnd();if(this._handler.interrupt.length===2){Q.fcall(this._handler.interrupt.bind(this._handler),args.query_session,args.interrupt_session).then(function(result){var result_obj=new OmniSci_interrupt_result({success:result});output.writeMessageBegin("interrupt",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_interrupt_result(err);output.writeMessageBegin("interrupt",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("interrupt",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.interrupt(args.query_session,args.interrupt_session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_interrupt_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("interrupt",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("interrupt",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_sql_validate=function(seqid,input,output){var args=new OmniSci_sql_validate_args();args.read(input);input.readMessageEnd();if(this._handler.sql_validate.length===2){Q.fcall(this._handler.sql_validate.bind(this._handler),args.session,args.query).then(function(result){var result_obj=new OmniSci_sql_validate_result({success:result});output.writeMessageBegin("sql_validate",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_sql_validate_result(err);output.writeMessageBegin("sql_validate",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_validate",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.sql_validate(args.session,args.query,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_sql_validate_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("sql_validate",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("sql_validate",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_completion_hints=function(seqid,input,output){var args=new OmniSci_get_completion_hints_args();args.read(input);input.readMessageEnd();if(this._handler.get_completion_hints.length===3){Q.fcall(this._handler.get_completion_hints.bind(this._handler),args.session,args.sql,args.cursor).then(function(result){var result_obj=new OmniSci_get_completion_hints_result({success:result});output.writeMessageBegin("get_completion_hints",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_completion_hints_result(err);output.writeMessageBegin("get_completion_hints",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_completion_hints",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_completion_hints(args.session,args.sql,args.cursor,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_completion_hints_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_completion_hints",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_completion_hints",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_set_execution_mode=function(seqid,input,output){var args=new OmniSci_set_execution_mode_args();args.read(input);input.readMessageEnd();if(this._handler.set_execution_mode.length===2){Q.fcall(this._handler.set_execution_mode.bind(this._handler),args.session,args.mode).then(function(result){var result_obj=new OmniSci_set_execution_mode_result({success:result});output.writeMessageBegin("set_execution_mode",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_set_execution_mode_result(err);output.writeMessageBegin("set_execution_mode",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_execution_mode",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_execution_mode(args.session,args.mode,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_set_execution_mode_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_execution_mode",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_execution_mode",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_render_vega=function(seqid,input,output){var args=new OmniSci_render_vega_args();args.read(input);input.readMessageEnd();if(this._handler.render_vega.length===5){Q.fcall(this._handler.render_vega.bind(this._handler),args.session,args.widget_id,args.vega_json,args.compression_level,args.nonce).then(function(result){var result_obj=new OmniSci_render_vega_result({success:result});output.writeMessageBegin("render_vega",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_render_vega_result(err);output.writeMessageBegin("render_vega",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("render_vega",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.render_vega(args.session,args.widget_id,args.vega_json,args.compression_level,args.nonce,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_render_vega_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("render_vega",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("render_vega",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_result_row_for_pixel=function(seqid,input,output){var args=new OmniSci_get_result_row_for_pixel_args();args.read(input);input.readMessageEnd();if(this._handler.get_result_row_for_pixel.length===7){Q.fcall(this._handler.get_result_row_for_pixel.bind(this._handler),args.session,args.widget_id,args.pixel,args.table_col_names,args.column_format,args.pixelRadius,args.nonce).then(function(result){var result_obj=new OmniSci_get_result_row_for_pixel_result({success:result});output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_result_row_for_pixel_result(err);output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_result_row_for_pixel(args.session,args.widget_id,args.pixel,args.table_col_names,args.column_format,args.pixelRadius,args.nonce,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_result_row_for_pixel_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_result_row_for_pixel",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_dashboard=function(seqid,input,output){var args=new OmniSci_get_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.get_dashboard.length===2){Q.fcall(this._handler.get_dashboard.bind(this._handler),args.session,args.dashboard_id).then(function(result){var result_obj=new OmniSci_get_dashboard_result({success:result});output.writeMessageBegin("get_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_dashboard_result(err);output.writeMessageBegin("get_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_dashboard(args.session,args.dashboard_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_dashboards=function(seqid,input,output){var args=new OmniSci_get_dashboards_args();args.read(input);input.readMessageEnd();if(this._handler.get_dashboards.length===1){Q.fcall(this._handler.get_dashboards.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_dashboards_result({success:result});output.writeMessageBegin("get_dashboards",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_dashboards_result(err);output.writeMessageBegin("get_dashboards",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_dashboards(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_dashboards_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_dashboards",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_create_dashboard=function(seqid,input,output){var args=new OmniSci_create_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.create_dashboard.length===5){Q.fcall(this._handler.create_dashboard.bind(this._handler),args.session,args.dashboard_name,args.dashboard_state,args.image_hash,args.dashboard_metadata).then(function(result){var result_obj=new OmniSci_create_dashboard_result({success:result});output.writeMessageBegin("create_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_create_dashboard_result(err);output.writeMessageBegin("create_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.create_dashboard(args.session,args.dashboard_name,args.dashboard_state,args.image_hash,args.dashboard_metadata,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_create_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("create_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_replace_dashboard=function(seqid,input,output){var args=new OmniSci_replace_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.replace_dashboard.length===7){Q.fcall(this._handler.replace_dashboard.bind(this._handler),args.session,args.dashboard_id,args.dashboard_name,args.dashboard_owner,args.dashboard_state,args.image_hash,args.dashboard_metadata).then(function(result){var result_obj=new OmniSci_replace_dashboard_result({success:result});output.writeMessageBegin("replace_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_replace_dashboard_result(err);output.writeMessageBegin("replace_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("replace_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.replace_dashboard(args.session,args.dashboard_id,args.dashboard_name,args.dashboard_owner,args.dashboard_state,args.image_hash,args.dashboard_metadata,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_replace_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("replace_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("replace_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_delete_dashboard=function(seqid,input,output){var args=new OmniSci_delete_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.delete_dashboard.length===2){Q.fcall(this._handler.delete_dashboard.bind(this._handler),args.session,args.dashboard_id).then(function(result){var result_obj=new OmniSci_delete_dashboard_result({success:result});output.writeMessageBegin("delete_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_delete_dashboard_result(err);output.writeMessageBegin("delete_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("delete_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.delete_dashboard(args.session,args.dashboard_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_delete_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("delete_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("delete_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_share_dashboards=function(seqid,input,output){var args=new OmniSci_share_dashboards_args();args.read(input);input.readMessageEnd();if(this._handler.share_dashboards.length===4){Q.fcall(this._handler.share_dashboards.bind(this._handler),args.session,args.dashboard_ids,args.groups,args.permissions).then(function(result){var result_obj=new OmniSci_share_dashboards_result({success:result});output.writeMessageBegin("share_dashboards",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_share_dashboards_result(err);output.writeMessageBegin("share_dashboards",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("share_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.share_dashboards(args.session,args.dashboard_ids,args.groups,args.permissions,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_share_dashboards_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("share_dashboards",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("share_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_delete_dashboards=function(seqid,input,output){var args=new OmniSci_delete_dashboards_args();args.read(input);input.readMessageEnd();if(this._handler.delete_dashboards.length===2){Q.fcall(this._handler.delete_dashboards.bind(this._handler),args.session,args.dashboard_ids).then(function(result){var result_obj=new OmniSci_delete_dashboards_result({success:result});output.writeMessageBegin("delete_dashboards",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_delete_dashboards_result(err);output.writeMessageBegin("delete_dashboards",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("delete_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.delete_dashboards(args.session,args.dashboard_ids,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_delete_dashboards_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("delete_dashboards",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("delete_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_share_dashboard=function(seqid,input,output){var args=new OmniSci_share_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.share_dashboard.length===6){Q.fcall(this._handler.share_dashboard.bind(this._handler),args.session,args.dashboard_id,args.groups,args.objects,args.permissions,args.grant_role).then(function(result){var result_obj=new OmniSci_share_dashboard_result({success:result});output.writeMessageBegin("share_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_share_dashboard_result(err);output.writeMessageBegin("share_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("share_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.share_dashboard(args.session,args.dashboard_id,args.groups,args.objects,args.permissions,args.grant_role,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_share_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("share_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("share_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_unshare_dashboard=function(seqid,input,output){var args=new OmniSci_unshare_dashboard_args();args.read(input);input.readMessageEnd();if(this._handler.unshare_dashboard.length===5){Q.fcall(this._handler.unshare_dashboard.bind(this._handler),args.session,args.dashboard_id,args.groups,args.objects,args.permissions).then(function(result){var result_obj=new OmniSci_unshare_dashboard_result({success:result});output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_unshare_dashboard_result(err);output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.unshare_dashboard(args.session,args.dashboard_id,args.groups,args.objects,args.permissions,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_unshare_dashboard_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("unshare_dashboard",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_unshare_dashboards=function(seqid,input,output){var args=new OmniSci_unshare_dashboards_args();args.read(input);input.readMessageEnd();if(this._handler.unshare_dashboards.length===4){Q.fcall(this._handler.unshare_dashboards.bind(this._handler),args.session,args.dashboard_ids,args.groups,args.permissions).then(function(result){var result_obj=new OmniSci_unshare_dashboards_result({success:result});output.writeMessageBegin("unshare_dashboards",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_unshare_dashboards_result(err);output.writeMessageBegin("unshare_dashboards",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("unshare_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.unshare_dashboards(args.session,args.dashboard_ids,args.groups,args.permissions,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_unshare_dashboards_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("unshare_dashboards",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("unshare_dashboards",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_dashboard_grantees=function(seqid,input,output){var args=new OmniSci_get_dashboard_grantees_args();args.read(input);input.readMessageEnd();if(this._handler.get_dashboard_grantees.length===2){Q.fcall(this._handler.get_dashboard_grantees.bind(this._handler),args.session,args.dashboard_id).then(function(result){var result_obj=new OmniSci_get_dashboard_grantees_result({success:result});output.writeMessageBegin("get_dashboard_grantees",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_dashboard_grantees_result(err);output.writeMessageBegin("get_dashboard_grantees",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboard_grantees",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_dashboard_grantees(args.session,args.dashboard_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_dashboard_grantees_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_dashboard_grantees",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_dashboard_grantees",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_link_view=function(seqid,input,output){var args=new OmniSci_get_link_view_args();args.read(input);input.readMessageEnd();if(this._handler.get_link_view.length===2){Q.fcall(this._handler.get_link_view.bind(this._handler),args.session,args.link).then(function(result){var result_obj=new OmniSci_get_link_view_result({success:result});output.writeMessageBegin("get_link_view",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_link_view_result(err);output.writeMessageBegin("get_link_view",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_link_view",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_link_view(args.session,args.link,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_link_view_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_link_view",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_link_view",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_create_link=function(seqid,input,output){var args=new OmniSci_create_link_args();args.read(input);input.readMessageEnd();if(this._handler.create_link.length===3){Q.fcall(this._handler.create_link.bind(this._handler),args.session,args.view_state,args.view_metadata).then(function(result){var result_obj=new OmniSci_create_link_result({success:result});output.writeMessageBegin("create_link",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_create_link_result(err);output.writeMessageBegin("create_link",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_link",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.create_link(args.session,args.view_state,args.view_metadata,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_create_link_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("create_link",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_link",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_load_table_binary=function(seqid,input,output){var args=new OmniSci_load_table_binary_args();args.read(input);input.readMessageEnd();if(this._handler.load_table_binary.length===3){Q.fcall(this._handler.load_table_binary.bind(this._handler),args.session,args.table_name,args.rows).then(function(result){var result_obj=new OmniSci_load_table_binary_result({success:result});output.writeMessageBegin("load_table_binary",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_load_table_binary_result(err);output.writeMessageBegin("load_table_binary",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.load_table_binary(args.session,args.table_name,args.rows,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_load_table_binary_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("load_table_binary",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_load_table_binary_columnar=function(seqid,input,output){var args=new OmniSci_load_table_binary_columnar_args();args.read(input);input.readMessageEnd();if(this._handler.load_table_binary_columnar.length===3){Q.fcall(this._handler.load_table_binary_columnar.bind(this._handler),args.session,args.table_name,args.cols).then(function(result){var result_obj=new OmniSci_load_table_binary_columnar_result({success:result});output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_load_table_binary_columnar_result(err);output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.load_table_binary_columnar(args.session,args.table_name,args.cols,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_load_table_binary_columnar_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary_columnar",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_load_table_binary_arrow=function(seqid,input,output){var args=new OmniSci_load_table_binary_arrow_args();args.read(input);input.readMessageEnd();if(this._handler.load_table_binary_arrow.length===3){Q.fcall(this._handler.load_table_binary_arrow.bind(this._handler),args.session,args.table_name,args.arrow_stream).then(function(result){var result_obj=new OmniSci_load_table_binary_arrow_result({success:result});output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_load_table_binary_arrow_result(err);output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.load_table_binary_arrow(args.session,args.table_name,args.arrow_stream,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_load_table_binary_arrow_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table_binary_arrow",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_load_table=function(seqid,input,output){var args=new OmniSci_load_table_args();args.read(input);input.readMessageEnd();if(this._handler.load_table.length===3){Q.fcall(this._handler.load_table.bind(this._handler),args.session,args.table_name,args.rows).then(function(result){var result_obj=new OmniSci_load_table_result({success:result});output.writeMessageBegin("load_table",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_load_table_result(err);output.writeMessageBegin("load_table",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.load_table(args.session,args.table_name,args.rows,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_load_table_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("load_table",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("load_table",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_detect_column_types=function(seqid,input,output){var args=new OmniSci_detect_column_types_args();args.read(input);input.readMessageEnd();if(this._handler.detect_column_types.length===3){Q.fcall(this._handler.detect_column_types.bind(this._handler),args.session,args.file_name,args.copy_params).then(function(result){var result_obj=new OmniSci_detect_column_types_result({success:result});output.writeMessageBegin("detect_column_types",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_detect_column_types_result(err);output.writeMessageBegin("detect_column_types",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("detect_column_types",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.detect_column_types(args.session,args.file_name,args.copy_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_detect_column_types_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("detect_column_types",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("detect_column_types",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_create_table=function(seqid,input,output){var args=new OmniSci_create_table_args();args.read(input);input.readMessageEnd();if(this._handler.create_table.length===5){Q.fcall(this._handler.create_table.bind(this._handler),args.session,args.table_name,args.row_desc,args.file_type,args.create_params).then(function(result){var result_obj=new OmniSci_create_table_result({success:result});output.writeMessageBegin("create_table",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_create_table_result(err);output.writeMessageBegin("create_table",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_table",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.create_table(args.session,args.table_name,args.row_desc,args.file_type,args.create_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_create_table_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("create_table",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("create_table",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_import_table=function(seqid,input,output){var args=new OmniSci_import_table_args();args.read(input);input.readMessageEnd();if(this._handler.import_table.length===4){Q.fcall(this._handler.import_table.bind(this._handler),args.session,args.table_name,args.file_name,args.copy_params).then(function(result){var result_obj=new OmniSci_import_table_result({success:result});output.writeMessageBegin("import_table",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_import_table_result(err);output.writeMessageBegin("import_table",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_table",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.import_table(args.session,args.table_name,args.file_name,args.copy_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_import_table_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("import_table",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_table",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_import_geo_table=function(seqid,input,output){var args=new OmniSci_import_geo_table_args();args.read(input);input.readMessageEnd();if(this._handler.import_geo_table.length===6){Q.fcall(this._handler.import_geo_table.bind(this._handler),args.session,args.table_name,args.file_name,args.copy_params,args.row_desc,args.create_params).then(function(result){var result_obj=new OmniSci_import_geo_table_result({success:result});output.writeMessageBegin("import_geo_table",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_import_geo_table_result(err);output.writeMessageBegin("import_geo_table",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_geo_table",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.import_geo_table(args.session,args.table_name,args.file_name,args.copy_params,args.row_desc,args.create_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_import_geo_table_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("import_geo_table",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_geo_table",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_import_table_status=function(seqid,input,output){var args=new OmniSci_import_table_status_args();args.read(input);input.readMessageEnd();if(this._handler.import_table_status.length===2){Q.fcall(this._handler.import_table_status.bind(this._handler),args.session,args.import_id).then(function(result){var result_obj=new OmniSci_import_table_status_result({success:result});output.writeMessageBegin("import_table_status",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_import_table_status_result(err);output.writeMessageBegin("import_table_status",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_table_status",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.import_table_status(args.session,args.import_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_import_table_status_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("import_table_status",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("import_table_status",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_first_geo_file_in_archive=function(seqid,input,output){var args=new OmniSci_get_first_geo_file_in_archive_args();args.read(input);input.readMessageEnd();if(this._handler.get_first_geo_file_in_archive.length===3){Q.fcall(this._handler.get_first_geo_file_in_archive.bind(this._handler),args.session,args.archive_path,args.copy_params).then(function(result){var result_obj=new OmniSci_get_first_geo_file_in_archive_result({success:result});output.writeMessageBegin("get_first_geo_file_in_archive",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_first_geo_file_in_archive_result(err);output.writeMessageBegin("get_first_geo_file_in_archive",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_first_geo_file_in_archive",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_first_geo_file_in_archive(args.session,args.archive_path,args.copy_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_first_geo_file_in_archive_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_first_geo_file_in_archive",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_first_geo_file_in_archive",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_all_files_in_archive=function(seqid,input,output){var args=new OmniSci_get_all_files_in_archive_args();args.read(input);input.readMessageEnd();if(this._handler.get_all_files_in_archive.length===3){Q.fcall(this._handler.get_all_files_in_archive.bind(this._handler),args.session,args.archive_path,args.copy_params).then(function(result){var result_obj=new OmniSci_get_all_files_in_archive_result({success:result});output.writeMessageBegin("get_all_files_in_archive",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_all_files_in_archive_result(err);output.writeMessageBegin("get_all_files_in_archive",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_all_files_in_archive",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_all_files_in_archive(args.session,args.archive_path,args.copy_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_all_files_in_archive_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_all_files_in_archive",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_all_files_in_archive",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_layers_in_geo_file=function(seqid,input,output){var args=new OmniSci_get_layers_in_geo_file_args();args.read(input);input.readMessageEnd();if(this._handler.get_layers_in_geo_file.length===3){Q.fcall(this._handler.get_layers_in_geo_file.bind(this._handler),args.session,args.file_name,args.copy_params).then(function(result){var result_obj=new OmniSci_get_layers_in_geo_file_result({success:result});output.writeMessageBegin("get_layers_in_geo_file",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_layers_in_geo_file_result(err);output.writeMessageBegin("get_layers_in_geo_file",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_layers_in_geo_file",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_layers_in_geo_file(args.session,args.file_name,args.copy_params,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_layers_in_geo_file_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_layers_in_geo_file",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_layers_in_geo_file",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_query_get_outer_fragment_count=function(seqid,input,output){var args=new OmniSci_query_get_outer_fragment_count_args();args.read(input);input.readMessageEnd();if(this._handler.query_get_outer_fragment_count.length===2){Q.fcall(this._handler.query_get_outer_fragment_count.bind(this._handler),args.session,args.query).then(function(result){var result_obj=new OmniSci_query_get_outer_fragment_count_result({success:result});output.writeMessageBegin("query_get_outer_fragment_count",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_query_get_outer_fragment_count_result(err);output.writeMessageBegin("query_get_outer_fragment_count",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("query_get_outer_fragment_count",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.query_get_outer_fragment_count(args.session,args.query,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_query_get_outer_fragment_count_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("query_get_outer_fragment_count",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("query_get_outer_fragment_count",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_check_table_consistency=function(seqid,input,output){var args=new OmniSci_check_table_consistency_args();args.read(input);input.readMessageEnd();if(this._handler.check_table_consistency.length===2){Q.fcall(this._handler.check_table_consistency.bind(this._handler),args.session,args.table_id).then(function(result){var result_obj=new OmniSci_check_table_consistency_result({success:result});output.writeMessageBegin("check_table_consistency",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_check_table_consistency_result(err);output.writeMessageBegin("check_table_consistency",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("check_table_consistency",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.check_table_consistency(args.session,args.table_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_check_table_consistency_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("check_table_consistency",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("check_table_consistency",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_start_query=function(seqid,input,output){var args=new OmniSci_start_query_args();args.read(input);input.readMessageEnd();if(this._handler.start_query.length===5){Q.fcall(this._handler.start_query.bind(this._handler),args.leaf_session,args.parent_session,args.query_ra,args.just_explain,args.outer_fragment_indices).then(function(result){var result_obj=new OmniSci_start_query_result({success:result});output.writeMessageBegin("start_query",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_start_query_result(err);output.writeMessageBegin("start_query",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_query",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.start_query(args.leaf_session,args.parent_session,args.query_ra,args.just_explain,args.outer_fragment_indices,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_start_query_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("start_query",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_query",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_execute_query_step=function(seqid,input,output){var args=new OmniSci_execute_query_step_args();args.read(input);input.readMessageEnd();if(this._handler.execute_query_step.length===2){Q.fcall(this._handler.execute_query_step.bind(this._handler),args.pending_query,args.subquery_id).then(function(result){var result_obj=new OmniSci_execute_query_step_result({success:result});output.writeMessageBegin("execute_query_step",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_execute_query_step_result(err);output.writeMessageBegin("execute_query_step",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("execute_query_step",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.execute_query_step(args.pending_query,args.subquery_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_execute_query_step_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("execute_query_step",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("execute_query_step",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_broadcast_serialized_rows=function(seqid,input,output){var args=new OmniSci_broadcast_serialized_rows_args();args.read(input);input.readMessageEnd();if(this._handler.broadcast_serialized_rows.length===5){Q.fcall(this._handler.broadcast_serialized_rows.bind(this._handler),args.serialized_rows,args.row_desc,args.query_id,args.subquery_id,args.is_final_subquery_result).then(function(result){var result_obj=new OmniSci_broadcast_serialized_rows_result({success:result});output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_broadcast_serialized_rows_result(err);output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.broadcast_serialized_rows(args.serialized_rows,args.row_desc,args.query_id,args.subquery_id,args.is_final_subquery_result,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_broadcast_serialized_rows_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("broadcast_serialized_rows",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_start_render_query=function(seqid,input,output){var args=new OmniSci_start_render_query_args();args.read(input);input.readMessageEnd();if(this._handler.start_render_query.length===4){Q.fcall(this._handler.start_render_query.bind(this._handler),args.session,args.widget_id,args.node_idx,args.vega_json).then(function(result){var result_obj=new OmniSci_start_render_query_result({success:result});output.writeMessageBegin("start_render_query",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_start_render_query_result(err);output.writeMessageBegin("start_render_query",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_render_query",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.start_render_query(args.session,args.widget_id,args.node_idx,args.vega_json,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_start_render_query_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("start_render_query",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("start_render_query",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_execute_next_render_step=function(seqid,input,output){var args=new OmniSci_execute_next_render_step_args();args.read(input);input.readMessageEnd();if(this._handler.execute_next_render_step.length===2){Q.fcall(this._handler.execute_next_render_step.bind(this._handler),args.pending_render,args.merged_data).then(function(result){var result_obj=new OmniSci_execute_next_render_step_result({success:result});output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_execute_next_render_step_result(err);output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.execute_next_render_step(args.pending_render,args.merged_data,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_execute_next_render_step_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("execute_next_render_step",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_insert_data=function(seqid,input,output){var args=new OmniSci_insert_data_args();args.read(input);input.readMessageEnd();if(this._handler.insert_data.length===2){Q.fcall(this._handler.insert_data.bind(this._handler),args.session,args.insert_data).then(function(result){var result_obj=new OmniSci_insert_data_result({success:result});output.writeMessageBegin("insert_data",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_insert_data_result(err);output.writeMessageBegin("insert_data",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("insert_data",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.insert_data(args.session,args.insert_data,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_insert_data_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("insert_data",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("insert_data",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_checkpoint=function(seqid,input,output){var args=new OmniSci_checkpoint_args();args.read(input);input.readMessageEnd();if(this._handler.checkpoint.length===2){Q.fcall(this._handler.checkpoint.bind(this._handler),args.session,args.table_id).then(function(result){var result_obj=new OmniSci_checkpoint_result({success:result});output.writeMessageBegin("checkpoint",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_checkpoint_result(err);output.writeMessageBegin("checkpoint",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("checkpoint",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.checkpoint(args.session,args.table_id,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_checkpoint_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("checkpoint",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("checkpoint",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_roles=function(seqid,input,output){var args=new OmniSci_get_roles_args();args.read(input);input.readMessageEnd();if(this._handler.get_roles.length===1){Q.fcall(this._handler.get_roles.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_roles_result({success:result});output.writeMessageBegin("get_roles",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_roles_result(err);output.writeMessageBegin("get_roles",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_roles",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_roles(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_roles_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_roles",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_roles",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_db_objects_for_grantee=function(seqid,input,output){var args=new OmniSci_get_db_objects_for_grantee_args();args.read(input);input.readMessageEnd();if(this._handler.get_db_objects_for_grantee.length===2){Q.fcall(this._handler.get_db_objects_for_grantee.bind(this._handler),args.session,args.roleName).then(function(result){var result_obj=new OmniSci_get_db_objects_for_grantee_result({success:result});output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_db_objects_for_grantee_result(err);output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_db_objects_for_grantee(args.session,args.roleName,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_db_objects_for_grantee_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_db_objects_for_grantee",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_db_object_privs=function(seqid,input,output){var args=new OmniSci_get_db_object_privs_args();args.read(input);input.readMessageEnd();if(this._handler.get_db_object_privs.length===3){Q.fcall(this._handler.get_db_object_privs.bind(this._handler),args.session,args.objectName,args.type).then(function(result){var result_obj=new OmniSci_get_db_object_privs_result({success:result});output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_db_object_privs_result(err);output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_db_object_privs(args.session,args.objectName,args.type,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_db_object_privs_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_db_object_privs",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_all_roles_for_user=function(seqid,input,output){var args=new OmniSci_get_all_roles_for_user_args();args.read(input);input.readMessageEnd();if(this._handler.get_all_roles_for_user.length===2){Q.fcall(this._handler.get_all_roles_for_user.bind(this._handler),args.session,args.userName).then(function(result){var result_obj=new OmniSci_get_all_roles_for_user_result({success:result});output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_all_roles_for_user_result(err);output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_all_roles_for_user(args.session,args.userName,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_all_roles_for_user_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_all_roles_for_user",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_has_role=function(seqid,input,output){var args=new OmniSci_has_role_args();args.read(input);input.readMessageEnd();if(this._handler.has_role.length===3){Q.fcall(this._handler.has_role.bind(this._handler),args.session,args.granteeName,args.roleName).then(function(result){var result_obj=new OmniSci_has_role_result({success:result});output.writeMessageBegin("has_role",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_has_role_result(err);output.writeMessageBegin("has_role",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("has_role",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.has_role(args.session,args.granteeName,args.roleName,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_has_role_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("has_role",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("has_role",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_has_object_privilege=function(seqid,input,output){var args=new OmniSci_has_object_privilege_args();args.read(input);input.readMessageEnd();if(this._handler.has_object_privilege.length===5){Q.fcall(this._handler.has_object_privilege.bind(this._handler),args.session,args.granteeName,args.ObjectName,args.objectType,args.permissions).then(function(result){var result_obj=new OmniSci_has_object_privilege_result({success:result});output.writeMessageBegin("has_object_privilege",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_has_object_privilege_result(err);output.writeMessageBegin("has_object_privilege",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("has_object_privilege",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.has_object_privilege(args.session,args.granteeName,args.ObjectName,args.objectType,args.permissions,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_has_object_privilege_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("has_object_privilege",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("has_object_privilege",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_set_license_key=function(seqid,input,output){var args=new OmniSci_set_license_key_args();args.read(input);input.readMessageEnd();if(this._handler.set_license_key.length===3){Q.fcall(this._handler.set_license_key.bind(this._handler),args.session,args.key,args.nonce).then(function(result){var result_obj=new OmniSci_set_license_key_result({success:result});output.writeMessageBegin("set_license_key",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_set_license_key_result(err);output.writeMessageBegin("set_license_key",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_license_key",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.set_license_key(args.session,args.key,args.nonce,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_set_license_key_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("set_license_key",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("set_license_key",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_license_claims=function(seqid,input,output){var args=new OmniSci_get_license_claims_args();args.read(input);input.readMessageEnd();if(this._handler.get_license_claims.length===2){Q.fcall(this._handler.get_license_claims.bind(this._handler),args.session,args.nonce).then(function(result){var result_obj=new OmniSci_get_license_claims_result({success:result});output.writeMessageBegin("get_license_claims",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_license_claims_result(err);output.writeMessageBegin("get_license_claims",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_license_claims",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_license_claims(args.session,args.nonce,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_license_claims_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_license_claims",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_license_claims",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_get_device_parameters=function(seqid,input,output){var args=new OmniSci_get_device_parameters_args();args.read(input);input.readMessageEnd();if(this._handler.get_device_parameters.length===1){Q.fcall(this._handler.get_device_parameters.bind(this._handler),args.session).then(function(result){var result_obj=new OmniSci_get_device_parameters_result({success:result});output.writeMessageBegin("get_device_parameters",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_get_device_parameters_result(err);output.writeMessageBegin("get_device_parameters",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_device_parameters",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.get_device_parameters(args.session,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_get_device_parameters_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("get_device_parameters",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("get_device_parameters",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};OmniSciProcessor.prototype.process_register_runtime_extension_functions=function(seqid,input,output){var args=new OmniSci_register_runtime_extension_functions_args();args.read(input);input.readMessageEnd();if(this._handler.register_runtime_extension_functions.length===4){Q.fcall(this._handler.register_runtime_extension_functions.bind(this._handler),args.session,args.udfs,args.udtfs,args.device_ir_map).then(function(result){var result_obj=new OmniSci_register_runtime_extension_functions_result({success:result});output.writeMessageBegin("register_runtime_extension_functions",Thrift.MessageType.REPLY,seqid);result_obj.write(output);output.writeMessageEnd();output.flush();}).catch(function(err){var result;if(err instanceof ttypes.TOmniSciException){result=new OmniSci_register_runtime_extension_functions_result(err);output.writeMessageBegin("register_runtime_extension_functions",Thrift.MessageType.REPLY,seqid);}else{result=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("register_runtime_extension_functions",Thrift.MessageType.EXCEPTION,seqid);}result.write(output);output.writeMessageEnd();output.flush();});}else{this._handler.register_runtime_extension_functions(args.session,args.udfs,args.udtfs,args.device_ir_map,function(err,result){var result_obj;if(err===null||typeof err==='undefined'||err instanceof ttypes.TOmniSciException){result_obj=new OmniSci_register_runtime_extension_functions_result(err!==null||typeof err==='undefined'?err:{success:result});output.writeMessageBegin("register_runtime_extension_functions",Thrift.MessageType.REPLY,seqid);}else{result_obj=new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN,err.message);output.writeMessageBegin("register_runtime_extension_functions",Thrift.MessageType.EXCEPTION,seqid);}result_obj.write(output);output.writeMessageEnd();output.flush();});}};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	exports.Thrift = __webpack_require__(24);

	var xhrConnection = __webpack_require__(29);
	exports.XHRConnection = xhrConnection.XHRConnection;
	exports.createXHRConnection = xhrConnection.createXHRConnection;
	exports.createXHRClient = xhrConnection.createXHRClient;

	exports.Multiplexer = __webpack_require__(47).Multiplexer;

	exports.TWebSocketTransport = __webpack_require__(48);
	exports.TBufferedTransport = __webpack_require__(35);
	exports.TFramedTransport = __webpack_require__(49);

	exports.Protocol = exports.TJSONProtocol = __webpack_require__(43);
	exports.TBinaryProtocol = __webpack_require__(42);
	exports.TCompactProtocol = __webpack_require__(39);

	exports.Int64 = __webpack_require__(41);


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(25);

	var Type = exports.Type = {
	  STOP: 0,
	  VOID: 1,
	  BOOL: 2,
	  BYTE: 3,
	  I08: 3,
	  DOUBLE: 4,
	  I16: 6,
	  I32: 8,
	  I64: 10,
	  STRING: 11,
	  UTF7: 11,
	  STRUCT: 12,
	  MAP: 13,
	  SET: 14,
	  LIST: 15,
	  UTF8: 16,
	  UTF16: 17
	};

	exports.MessageType = {
	  CALL: 1,
	  REPLY: 2,
	  EXCEPTION: 3,
	  ONEWAY: 4
	};

	exports.TException = TException;

	function TException(message) {
	  Error.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.name = this.constructor.name;
	  this.message = message;
	};
	util.inherits(TException, Error);

	var TApplicationExceptionType = exports.TApplicationExceptionType = {
	  UNKNOWN: 0,
	  UNKNOWN_METHOD: 1,
	  INVALID_MESSAGE_TYPE: 2,
	  WRONG_METHOD_NAME: 3,
	  BAD_SEQUENCE_ID: 4,
	  MISSING_RESULT: 5,
	  INTERNAL_ERROR: 6,
	  PROTOCOL_ERROR: 7,
	  INVALID_TRANSFORM: 8,
	  INVALID_PROTOCOL: 9,
	  UNSUPPORTED_CLIENT_TYPE: 10
	};

	exports.TApplicationException = TApplicationException;

	function TApplicationException(type, message) {
	  TException.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.type = type || TApplicationExceptionType.UNKNOWN;
	  this.name = this.constructor.name;
	  this.message = message;
	};
	util.inherits(TApplicationException, TException);

	TApplicationException.prototype.read = function(input) {
	  var ftype;
	  var ret = input.readStructBegin('TApplicationException');

	  while(1){
	      ret = input.readFieldBegin();
	      if(ret.ftype == Type.STOP)
	          break;

	      switch(ret.fid){
	          case 1:
	              if( ret.ftype == Type.STRING ){
	                  ret = input.readString();
	                  this.message = ret;
	              } else {
	                  ret = input.skip(ret.ftype);
	              }
	              break;
	          case 2:
	              if( ret.ftype == Type.I32 ){
	                  ret = input.readI32();
	                  this.type = ret;
	              } else {
	                  ret   = input.skip(ret.ftype);
	              }
	              break;
	          default:
	              ret = input.skip(ret.ftype);
	              break;
	      }
	      input.readFieldEnd();
	  }
	  input.readStructEnd();
	};

	TApplicationException.prototype.write = function(output){
	  output.writeStructBegin('TApplicationException');

	  if (this.message) {
	      output.writeFieldBegin('message', Type.STRING, 1);
	      output.writeString(this.message);
	      output.writeFieldEnd();
	  }

	  if (this.code) {
	      output.writeFieldBegin('type', Type.I32, 2);
	      output.writeI32(this.code);
	      output.writeFieldEnd();
	  }

	  output.writeFieldStop();
	  output.writeStructEnd();
	};

	var TProtocolExceptionType = exports.TProtocolExceptionType = {
	  UNKNOWN: 0,
	  INVALID_DATA: 1,
	  NEGATIVE_SIZE: 2,
	  SIZE_LIMIT: 3,
	  BAD_VERSION: 4,
	  NOT_IMPLEMENTED: 5,
	  DEPTH_LIMIT: 6
	};


	exports.TProtocolException = TProtocolException;

	function TProtocolException(type, message) {
	  Error.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.name = this.constructor.name;
	  this.type = type;
	  this.message = message;
	};
	util.inherits(TProtocolException, Error);

	exports.objectLength = function(obj) {
	  return Object.keys(obj).length;
	};

	exports.inherits = function(constructor, superConstructor) {
	  util.inherits(constructor, superConstructor);
	};

	var copyList, copyMap;

	copyList = function(lst, types) {

	  if (!lst) {return lst; }

	  var type;

	  if (types.shift === undefined) {
	    type = types;
	  }
	  else {
	    type = types[0];
	  }
	  var Type = type;

	  var len = lst.length, result = [], i, val;
	  for (i = 0; i < len; i++) {
	    val = lst[i];
	    if (type === null) {
	      result.push(val);
	    }
	    else if (type === copyMap || type === copyList) {
	      result.push(type(val, types.slice(1)));
	    }
	    else {
	      result.push(new Type(val));
	    }
	  }
	  return result;
	};

	copyMap = function(obj, types){

	  if (!obj) {return obj; }

	  var type;

	  if (types.shift === undefined) {
	    type = types;
	  }
	  else {
	    type = types[0];
	  }
	  var Type = type;

	  var result = {}, val;
	  for(var prop in obj) {
	    if(obj.hasOwnProperty(prop)) {
	      val = obj[prop];
	      if (type === null) {
	        result[prop] = val;
	      }
	      else if (type === copyMap || type === copyList) {
	        result[prop] = type(val, types.slice(1));
	      }
	      else {
	        result[prop] = new Type(val);
	      }
	    }
	  }
	  return result;
	};

	module.exports.copyMap = copyMap;
	module.exports.copyList = copyList;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(27);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(28);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(26)))

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(25);
	var EventEmitter = __webpack_require__(34).EventEmitter;
	var thrift = __webpack_require__(24);

	var TBufferedTransport = __webpack_require__(35);
	var TJSONProtocol = __webpack_require__(43);
	var InputBufferUnderrunError = __webpack_require__(37);

	var createClient = __webpack_require__(46);

	exports.XHRConnection = XHRConnection;

	/**
	 * Constructor Function for the XHR Connection.
	 * If you do not specify a host and port then XHRConnection will default to the
	 * host and port of the page from which this javascript is served.
	 * @constructor
	 * @param {string} [url] - The URL to connect to.
	 * @classdesc TXHRConnection objects provide Thrift end point transport
	 *     semantics implemented using XHR.
	 * @example
	 *     var transport = new Thrift.TXHRConnection('localhost', 9099, {});
	 */
	function XHRConnection(host, port, options) {
	  this.options = options || {};
	  this.wpos = 0;
	  this.rpos = 0;
	  this.useCORS = (options && options.useCORS);
	  this.send_buf = '';
	  this.recv_buf = '';
	  this.transport = options.transport || TBufferedTransport;
	  this.protocol = options.protocol || TJSONProtocol;
	  this.headers = options.headers || {};

	  host = host || window.location.host;
	  port = port || window.location.port;
	  var prefix = options.https ? 'https://' : 'http://';
	  var path = options.path || '/';

	  if (port === '') {
	    port = undefined;
	  }

	  if (!port || port === 80 || port === '80') {
	    this.url = prefix + host + path;
	  } else {
	    this.url = prefix + host + ':' + port + path;
	  }

	  //The sequence map is used to map seqIDs back to the
	  //  calling client in multiplexed scenarios
	  this.seqId2Service = {};
	};

	util.inherits(XHRConnection, EventEmitter);

	/**
	* Gets the browser specific XmlHttpRequest Object.
	* @returns {object} the browser XHR interface object
	*/
	XHRConnection.prototype.getXmlHttpRequestObject = function() {
	  try { return new XMLHttpRequest(); } catch (e1) { }
	  try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch (e2) { }
	  try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch (e3) { }

	  throw "Your browser doesn't support XHR.";
	};

	/**
	 * Sends the current XRH request if the transport was created with a URL
	 * and the async parameter is false. If the transport was not created with
	 * a URL, or the async parameter is True and no callback is provided, or
	 * the URL is an empty string, the current send buffer is returned.
	 * @param {object} async - If true the current send buffer is returned.
	 * @param {object} callback - Optional async completion callback
	 * @returns {undefined|string} Nothing or the current send buffer.
	 * @throws {string} If XHR fails.
	 */
	XHRConnection.prototype.flush = function() {
	  var self = this;
	  if (this.url === undefined || this.url === '') {
	    return this.send_buf;
	  }

	  var xreq = this.getXmlHttpRequestObject();

	  if (xreq.overrideMimeType) {
	    xreq.overrideMimeType('application/json');
	  }

	  xreq.onreadystatechange = function() {
	    if (this.readyState == 4 && this.status == 200) {
	      self.setRecvBuffer(this.responseText);
	    }
	  };

	  xreq.open('POST', this.url, true);

	  Object.keys(this.headers).forEach(function(headerKey) {
	    xreq.setRequestHeader(headerKey, self.headers[headerKey]);
	  });

	  xreq.send(this.send_buf);
	};

	/**
	 * Sets the buffer to provide the protocol when deserializing.
	 * @param {string} buf - The buffer to supply the protocol.
	 */
	XHRConnection.prototype.setRecvBuffer = function(buf) {
	  this.recv_buf = buf;
	  this.recv_buf_sz = this.recv_buf.length;
	  this.wpos = this.recv_buf.length;
	  this.rpos = 0;

	  if (Object.prototype.toString.call(buf) == "[object ArrayBuffer]") {
	    var data = new Uint8Array(buf);
	  }
	  var thing = new Buffer(data || buf);

	  this.transport.receiver(this.__decodeCallback.bind(this))(thing);

	};

	XHRConnection.prototype.__decodeCallback = function(transport_with_data) {
	  var proto = new this.protocol(transport_with_data);
	  try {
	    while (true) {
	      var header = proto.readMessageBegin();
	      var dummy_seqid = header.rseqid * -1;
	      var client = this.client;
	      //The Multiplexed Protocol stores a hash of seqid to service names
	      //  in seqId2Service. If the SeqId is found in the hash we need to
	      //  lookup the appropriate client for this call.
	      //  The client var is a single client object when not multiplexing,
	      //  when using multiplexing it is a service name keyed hash of client
	      //  objects.
	      //NOTE: The 2 way interdependencies between protocols, transports,
	      //  connections and clients in the Node.js implementation are irregular
	      //  and make the implementation difficult to extend and maintain. We
	      //  should bring this stuff inline with typical thrift I/O stack
	      //  operation soon.
	      //  --ra
	      var service_name = this.seqId2Service[header.rseqid];
	      if (service_name) {
	        client = this.client[service_name];
	        delete this.seqId2Service[header.rseqid];
	      }
	      /*jshint -W083 */
	      client._reqs[dummy_seqid] = function(err, success) {
	        transport_with_data.commitPosition();
	        var clientCallback = client._reqs[header.rseqid];
	        delete client._reqs[header.rseqid];
	        if (clientCallback) {
	          clientCallback(err, success);
	        }
	      };
	      /*jshint +W083 */
	      if (client['recv_' + header.fname]) {
	        client['recv_' + header.fname](proto, header.mtype, dummy_seqid);
	      } else {
	        delete client._reqs[dummy_seqid];
	        this.emit("error",
	          new thrift.TApplicationException(
	            thrift.TApplicationExceptionType.WRONG_METHOD_NAME,
	            "Received a response to an unknown RPC function"));
	      }
	    }
	  } catch (e) {
	    if (e instanceof InputBufferUnderrunError) {
	      transport_with_data.rollbackPosition();
	    } else {
	      throw e;
	    }
	  }
	};

	/**
	 * Returns true if the transport is open, XHR always returns true.
	 * @readonly
	 * @returns {boolean} Always True.
	 */
	XHRConnection.prototype.isOpen = function() {
	  return true;
	};

	/**
	 * Opens the transport connection, with XHR this is a nop.
	 */
	XHRConnection.prototype.open = function() {};

	/**
	 * Closes the transport connection, with XHR this is a nop.
	 */
	XHRConnection.prototype.close = function() {};

	/**
	 * Returns the specified number of characters from the response
	 * buffer.
	 * @param {number} len - The number of characters to return.
	 * @returns {string} Characters sent by the server.
	 */
	XHRConnection.prototype.read = function(len) {
	  var avail = this.wpos - this.rpos;

	  if (avail === 0) {
	    return '';
	  }

	  var give = len;

	  if (avail < len) {
	    give = avail;
	  }

	  var ret = this.read_buf.substr(this.rpos, give);
	  this.rpos += give;

	  //clear buf when complete?
	  return ret;
	};

	/**
	 * Returns the entire response buffer.
	 * @returns {string} Characters sent by the server.
	 */
	XHRConnection.prototype.readAll = function() {
	  return this.recv_buf;
	};

	/**
	 * Sets the send buffer to buf.
	 * @param {string} buf - The buffer to send.
	 */
	XHRConnection.prototype.write = function(buf) {
	  this.send_buf = buf;
	  this.flush();
	};

	/**
	 * Returns the send buffer.
	 * @readonly
	 * @returns {string} The send buffer.
	 */
	XHRConnection.prototype.getSendBuffer = function() {
	  return this.send_buf;
	};

	/**
	 * Creates a new TXHRTransport object, used by Thrift clients to connect
	 *    to Thrift HTTP based servers.
	 * @param {string} host - The host name or IP to connect to.
	 * @param {number} port - The TCP port to connect to.
	 * @param {XHRConnectOptions} options - The configuration options to use.
	 * @returns {XHRConnection} The connection object.
	 * @see {@link XHRConnectOptions}
	 */
	exports.createXHRConnection = function(host, port, options) {
	  return new XHRConnection(host, port, options);
	};

	exports.createXHRClient = createClient;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(31)
	var ieee754 = __webpack_require__(32)
	var isArray = __webpack_require__(33)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function getLens (b64) {
	  var len = b64.length

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

	  var curByte = 0

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen

	  var i
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }

	  return parts.join('')
	}


/***/ }),
/* 32 */
/***/ (function(module, exports) {

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 33 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var binary = __webpack_require__(36);
	var InputBufferUnderrunError = __webpack_require__(37);
	var THeaderTransport = __webpack_require__(38);

	module.exports = TBufferedTransport;

	function TBufferedTransport(buffer, callback) {
	  this.defaultReadBufferSize = 1024;
	  this.writeBufferSize = 512; // Soft Limit
	  this.inBuf = new Buffer(this.defaultReadBufferSize);
	  this.readCursor = 0;
	  this.writeCursor = 0; // for input buffer
	  this.outBuffers = [];
	  this.outCount = 0;
	  this.onFlush = callback;
	};

	TBufferedTransport.prototype = new THeaderTransport();

	TBufferedTransport.prototype.reset = function() {
	  this.inBuf = new Buffer(this.defaultReadBufferSize);
	  this.readCursor = 0;
	  this.writeCursor = 0;
	  this.outBuffers = [];
	  this.outCount = 0;
	}

	TBufferedTransport.receiver = function(callback, seqid) {
	  var reader = new TBufferedTransport();

	  return function(data) {
	    if (reader.writeCursor + data.length > reader.inBuf.length) {
	      var buf = new Buffer(reader.writeCursor + data.length);
	      reader.inBuf.copy(buf, 0, 0, reader.writeCursor);
	      reader.inBuf = buf;
	    }
	    data.copy(reader.inBuf, reader.writeCursor, 0);
	    reader.writeCursor += data.length;

	    callback(reader, seqid);
	  };
	};


	TBufferedTransport.prototype.commitPosition = function(){
	  var unreadSize = this.writeCursor - this.readCursor;
	  var bufSize = (unreadSize * 2 > this.defaultReadBufferSize) ?
	    unreadSize * 2 : this.defaultReadBufferSize;
	  var buf = new Buffer(bufSize);
	  if (unreadSize > 0) {
	    this.inBuf.copy(buf, 0, this.readCursor, this.writeCursor);
	  }
	  this.readCursor = 0;
	  this.writeCursor = unreadSize;
	  this.inBuf = buf;
	};

	TBufferedTransport.prototype.rollbackPosition = function(){
	  this.readCursor = 0;
	}

	  // TODO: Implement open/close support
	TBufferedTransport.prototype.isOpen = function() {
	  return true;
	};

	TBufferedTransport.prototype.open = function() {
	};

	TBufferedTransport.prototype.close = function() {
	};

	  // Set the seqid of the message in the client
	  // So that callbacks can be found
	TBufferedTransport.prototype.setCurrSeqId = function(seqid) {
	  this._seqid = seqid;
	};

	TBufferedTransport.prototype.ensureAvailable = function(len) {
	  if (this.readCursor + len > this.writeCursor) {
	    throw new InputBufferUnderrunError();
	  }
	};

	TBufferedTransport.prototype.read = function(len) {
	  this.ensureAvailable(len);
	  var buf = new Buffer(len);
	  this.inBuf.copy(buf, 0, this.readCursor, this.readCursor + len);
	  this.readCursor += len;
	  return buf;
	};

	TBufferedTransport.prototype.readByte = function() {
	  this.ensureAvailable(1);
	  return binary.readByte(this.inBuf[this.readCursor++]);
	};

	TBufferedTransport.prototype.readI16 = function() {
	  this.ensureAvailable(2);
	  var i16 = binary.readI16(this.inBuf, this.readCursor);
	  this.readCursor += 2;
	  return i16;
	};

	TBufferedTransport.prototype.readI32 = function() {
	  this.ensureAvailable(4);
	  var i32 = binary.readI32(this.inBuf, this.readCursor);
	  this.readCursor += 4;
	  return i32;
	};

	TBufferedTransport.prototype.readDouble = function() {
	  this.ensureAvailable(8);
	  var d = binary.readDouble(this.inBuf, this.readCursor);
	  this.readCursor += 8;
	  return d;
	};

	TBufferedTransport.prototype.readString = function(len) {
	  this.ensureAvailable(len);
	  var str = this.inBuf.toString('utf8', this.readCursor, this.readCursor + len);
	  this.readCursor += len;
	  return str;
	};

	TBufferedTransport.prototype.borrow = function() {
	  var obj = {buf: this.inBuf, readIndex: this.readCursor, writeIndex: this.writeCursor};
	  return obj;
	};

	TBufferedTransport.prototype.consume = function(bytesConsumed) {
	  this.readCursor += bytesConsumed;
	};

	TBufferedTransport.prototype.write = function(buf) {
	  if (typeof(buf) === "string") {
	    buf = new Buffer(buf, 'utf8');
	  }
	  this.outBuffers.push(buf);
	  this.outCount += buf.length;
	};

	TBufferedTransport.prototype.flush = function() {
	  // If the seqid of the callback is available pass it to the onFlush
	  // Then remove the current seqid
	  var seqid = this._seqid;
	  this._seqid = null;

	  if (this.outCount < 1) {
	    return;
	  }

	  var msg = new Buffer(this.outCount),
	      pos = 0;
	  this.outBuffers.forEach(function(buf) {
	    buf.copy(msg, pos, 0);
	    pos += buf.length;
	  });

	  if (this.onFlush) {
	    // Passing seqid through this call to get it to the connection
	    this.onFlush(msg, seqid);
	  }

	  this.outBuffers = [];
	  this.outCount = 0;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 36 */
/***/ (function(module, exports) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var POW_8 = Math.pow(2, 8);
	var POW_16 = Math.pow(2, 16);
	var POW_24 = Math.pow(2, 24);
	var POW_32 = Math.pow(2, 32);
	var POW_40 = Math.pow(2, 40);
	var POW_48 = Math.pow(2, 48);
	var POW_52 = Math.pow(2, 52);
	var POW_1022 = Math.pow(2, 1022);

	exports.readByte = function(b){
		return b > 127 ? b-256 : b;
	};

	exports.readI16 = function(buff, off) {
	  off = off || 0;
	  var v = buff[off + 1];
	  v += buff[off] << 8;
	  if (buff[off] & 128) {
	    v -= POW_16;
	  }
	  return v;
	};

	exports.readI32 = function(buff, off) {
	  off = off || 0;
	  var v = buff[off + 3];
	  v += buff[off + 2] << 8;
	  v += buff[off + 1] << 16;
	  v += buff[off] * POW_24;
	  if (buff[off] & 0x80) {
	    v -= POW_32;
	  }
	  return v;
	};

	exports.writeI16 = function(buff, v) {
	  buff[1] = v & 0xff;
	  v >>= 8;
	  buff[0] = v & 0xff;
	  return buff;
	};

	exports.writeI32 = function(buff, v) {
	  buff[3] = v & 0xff;
	  v >>= 8;
	  buff[2] = v & 0xff;
	  v >>= 8;
	  buff[1] = v & 0xff;
	  v >>= 8;
	  buff[0] = v & 0xff;
	  return buff;
	};

	exports.readDouble = function(buff, off) {
	  off = off || 0;
	  var signed = buff[off] & 0x80;
	  var e = (buff[off+1] & 0xF0) >> 4;
	  e += (buff[off] & 0x7F) << 4;

	  var m = buff[off+7];
	  m += buff[off+6] << 8;
	  m += buff[off+5] << 16;
	  m += buff[off+4] * POW_24;
	  m += buff[off+3] * POW_32;
	  m += buff[off+2] * POW_40;
	  m += (buff[off+1] & 0x0F) * POW_48;

	  switch (e) {
	    case 0:
	      e = -1022;
	      break;
	    case 2047:
	      return m ? NaN : (signed ? -Infinity : Infinity);
	    default:
	      m += POW_52;
	      e -= 1023;
	  }

	  if (signed) {
	    m *= -1;
	  }

	  return m * Math.pow(2, e - 52);
	};

	/*
	 * Based on code from the jspack module:
	 * http://code.google.com/p/jspack/
	 */
	exports.writeDouble = function(buff, v) {
	  var m, e, c;

	  buff[0] = (v < 0 ? 0x80 : 0x00);

	  v = Math.abs(v);
	  if (v !== v) {
	    // NaN, use QNaN IEEE format
	    m = 2251799813685248;
	    e = 2047;
	  } else if (v === Infinity) {
	    m = 0;
	    e = 2047;
	  } else {
	    e = Math.floor(Math.log(v) / Math.LN2);
	    c = Math.pow(2, -e);
	    if (v * c < 1) {
	      e--;
	      c *= 2;
	    }

	    if (e + 1023 >= 2047)
	    {
	      // Overflow
	      m = 0;
	      e = 2047;
	    }
	    else if (e + 1023 >= 1)
	    {
	      // Normalized - term order matters, as Math.pow(2, 52-e) and v*Math.pow(2, 52) can overflow
	      m = (v*c-1) * POW_52;
	      e += 1023;
	    }
	    else
	    {
	      // Denormalized - also catches the '0' case, somewhat by chance
	      m = (v * POW_1022) * POW_52;
	      e = 0;
	    }
	  }

	  buff[1] = (e << 4) & 0xf0;
	  buff[0] |= (e >> 4) & 0x7f;

	  buff[7] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[6] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[5] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[4] = m & 0xff;
	  m >>= 8;
	  buff[3] = m & 0xff;
	  m >>= 8;
	  buff[2] = m & 0xff;
	  m >>= 8;
	  buff[1] |= m & 0x0f;

	  return buff;
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(25);

	module.exports = InputBufferUnderrunError;

	function InputBufferUnderrunError(message) {
	  Error.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.name = this.constructor.name;
	  this.message = message;
	};

	util.inherits(InputBufferUnderrunError, Error);


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var util = __webpack_require__(25);
	var TCompactProtocol = __webpack_require__(39);
	var TBinaryProtocol = __webpack_require__(42);
	var InputBufferUnderrunError = __webpack_require__(37);

	function THeaderTransportError(message) {
	  Error.call(this);
	  Error.captureStackTrace(this, this.constructor);
	  this.name = this.constructor.name;
	  this.message = message;
	}

	util.inherits(THeaderTransportError, Error);

	module.exports = THeaderTransport;

	// from HeaderFormat.md
	var COMPACT_PROTOCOL_OFFSET = 0;
	var COMPACT_PROTOCOL_VERSION_OFFSET = 1;
	var FRAME_SIZE_OFFSET = 0;
	var HEADER_MAGIC_OFFSET = 32 / 8;
	var FLAGS_OFFSET = 48 / 8;
	var SEQID_OFFSET = 64 / 8;
	var HEADER_SIZE_OFFSET = 96 / 8;
	var HEADER_START_OFFSET = 112 / 8;

	var HEADER_MAGIC = 0x0FFF;

	var TINFO_HEADER_KEY_VALUE_TYPE = 0x01;
	var MAX_FRAME_SIZE = 0x3FFFFFFF;

	 // A helper class for reading/writing varints. Uses
	 // TCompactProtocol under the hood
	function VarintHelper(readBuffer) {
	  var TBufferedTransport = __webpack_require__(35);
	  this.outputBuffer = null;
	  var _this = this;
	  this.transport = new TBufferedTransport(null, function(output) {
	    _this.outputBuffer = output;
	  });

	  this.transport.inBuf = readBuffer || Buffer.alloc(0);
	  this.transport.writeCursor = this.transport.inBuf.length;
	  this.protocol = new TCompactProtocol(this.transport);
	};

	VarintHelper.prototype.readVarint32 = function() {
	  return this.protocol.readVarint32();
	};

	VarintHelper.prototype.writeVarint32 = function(i) {
	  this.protocol.writeVarint32(i);
	};

	VarintHelper.prototype.readString = function() {
	  return this.protocol.readString();
	};

	VarintHelper.prototype.writeString = function(str) {
	  this.protocol.writeString(str);
	}

	VarintHelper.prototype.getOutCount = function() {
	  return this.transport.outCount;
	};

	VarintHelper.prototype.write = function(str) {
	  this.transport.write(str);
	};

	VarintHelper.prototype.toBuffer = function() {
	  this.transport.flush();
	  return this.outputBuffer;
	};

	// from lib/cpp/src/thrift/protocol/TProtocolTypes.h
	THeaderTransport.SubprotocolId = {
	  BINARY: 0,
	  JSON: 1,
	  COMPACT: 2,
	};

	/**
	  An abstract transport used as a prototype for other transports
	  to enable reading/writing theaders. This should NOT be used as a standalone transport
	  The methods in this transport are called by THeaderProtocol, which will call readHeaders/writeHeaders
	  in the read/writeMessageBegin methods and parse/write headers to/from a request
	  prior to reading/writing.

	  The reason this is not a standalone transport type is because different transport types
	  have their own individual static receiver methods that are called prior to instantiation.
	  There doesn't seem to be a way for THeaderTransport to know which receiver method to use
	  without reworking the server API.

	  For reading headers from a request, the parsed headers can be retrieved via
	  getReadHeader. Similarly, you can set headers to be written on the client via
	  setWriteHeader.
	 */
	function THeaderTransport() {
	  this.maxFrameSize = MAX_FRAME_SIZE;
	  this.protocolId = THeaderTransport.SubprotocolId.BINARY;
	  this.rheaders = {};
	  this.wheaders = {};
	  this.inBuf = Buffer.alloc(0);
	  this.outCount = 0;
	  this.flags = null;
	  this.seqid = 0;
	  this.shouldWriteHeaders = true;
	};

	var validateHeaders = function(key, value) {
	  if (typeof key !== 'string' || typeof value !== 'string') {
	    throw new THeaderTransportError('Header key and values must be strings');
	  }
	};

	var validateProtocolId = function(protocolId) {
	  var protocols = Object.keys(THeaderTransport.SubprotocolId);
	  for (var i = 0; i < protocols.length; i++) {
	    if (protocolId === THeaderTransport.SubprotocolId[protocols[i]]) return true;
	  }

	  throw new Error(protocolId + ' is not a valid protocol id');
	};

	THeaderTransport.prototype.setSeqId = function(seqid) {
	  this.seqid = seqid;
	};

	THeaderTransport.prototype.getSeqId = function(seqid) {
	  return this.seqid;
	};

	THeaderTransport.prototype.setFlags = function(flags) {
	  this.flags = flags;
	};

	THeaderTransport.prototype.getReadHeaders = function() {
	  return this.rheaders;
	};

	THeaderTransport.prototype.setReadHeader = function(key, value) {
	  validateHeaders(key, value);
	  this.rheaders[key] = value;
	};

	THeaderTransport.prototype.clearReadHeaders = function() {
	  this.rheaders = {};
	};

	THeaderTransport.prototype.getWriteHeaders = function() {
	  return this.wheaders;
	};

	THeaderTransport.prototype.setWriteHeader = function(key, value) {
	  validateHeaders(key, value);
	  this.wheaders[key] = value;
	};

	THeaderTransport.prototype.clearWriteHeaders = function() {
	  this.wheaders = {};
	};

	THeaderTransport.prototype.setMaxFrameSize = function(frameSize) {
	  this.maxFrameSize = frameSize;
	};

	THeaderTransport.prototype.setProtocolId = function(protocolId) {
	  validateProtocolId(protocolId);
	  this.protocolId = protocolId;
	};

	THeaderTransport.prototype.getProtocolId = function() {
	  return this.protocolId;
	};

	var isUnframedBinary = function(readBuffer) {
	  var version = readBuffer.readInt32BE();
	  return (version & TBinaryProtocol.VERSION_MASK) === TBinaryProtocol.VERSION_1;
	}

	var isUnframedCompact = function(readBuffer) {
	  var protocolId = readBuffer.readInt8(COMPACT_PROTOCOL_OFFSET);
	  var version = readBuffer.readInt8(COMPACT_PROTOCOL_VERSION_OFFSET);
	  return protocolId === TCompactProtocol.PROTOCOL_ID &&
	    (version & TCompactProtocol.VERSION_MASK) === TCompactProtocol.VERSION_N;
	}

	THeaderTransport.prototype.readHeaders = function() {
	  var readBuffer = this.inBuf;

	  var isUnframed = false;
	  if (isUnframedBinary(readBuffer)) {
	    this.setProtocolId(THeaderTransport.SubprotocolId.BINARY);
	    isUnframed = true;
	  }

	  if (isUnframedCompact(readBuffer)) {
	    this.setProtocolId(THeaderTransport.SubprotocolId.COMPACT);
	    isUnframed = true;
	  }

	  if (isUnframed) {
	    this.shouldWriteHeaders = false;
	    return;
	  }

	  var frameSize = readBuffer.readInt32BE(FRAME_SIZE_OFFSET);
	  if (frameSize > this.maxFrameSize) {
	    throw new THeaderTransportError('Frame exceeds maximum frame size');
	  }

	  var headerMagic = readBuffer.readInt16BE(HEADER_MAGIC_OFFSET);
	  this.shouldWriteHeaders = headerMagic === HEADER_MAGIC;
	  if (!this.shouldWriteHeaders) {
	    return;
	  }

	  this.setFlags(readBuffer.readInt16BE(FLAGS_OFFSET));
	  this.setSeqId(readBuffer.readInt32BE(SEQID_OFFSET));
	  var headerSize = readBuffer.readInt16BE(HEADER_SIZE_OFFSET) * 4;
	  var endOfHeaders = HEADER_START_OFFSET + headerSize;
	  if (endOfHeaders > readBuffer.length) {
	    throw new THeaderTransportError('Header size is greater than frame size');
	  }

	  var headerBuffer = Buffer.alloc(headerSize);
	  readBuffer.copy(headerBuffer, 0, HEADER_START_OFFSET, endOfHeaders);

	  var varintHelper = new VarintHelper(headerBuffer);
	  this.setProtocolId(varintHelper.readVarint32());
	  var transformCount = varintHelper.readVarint32();
	  if (transformCount > 0) {
	    throw new THeaderTransportError('Transforms are not yet supported');
	  }

	  while (true) {
	    try {
	      var headerType = varintHelper.readVarint32();
	      if (headerType !== TINFO_HEADER_KEY_VALUE_TYPE) {
	        break;
	      }

	      var numberOfHeaders = varintHelper.readVarint32();
	      for (var i = 0; i < numberOfHeaders; i++) {
	        var key = varintHelper.readString();
	        var value = varintHelper.readString();
	        this.setReadHeader(key, value);
	      }
	    } catch (e) {
	      if (e instanceof InputBufferUnderrunError) {
	        break;
	      }
	      throw e;
	    }
	  }

	  // moves the read cursor past the headers
	  this.read(endOfHeaders);
	  return this.getReadHeaders();
	};

	THeaderTransport.prototype.writeHeaders = function() {
	  // only write headers on the server if the client contained headers
	  if (!this.shouldWriteHeaders) {
	    return;
	  }
	  var headers = this.getWriteHeaders();

	  var varintWriter = new VarintHelper();
	  varintWriter.writeVarint32(this.protocolId);
	  varintWriter.writeVarint32(0); // transforms not supported

	  // writing info header key values
	  var headerKeys = Object.keys(headers);
	  if (headerKeys.length > 0) {
	    varintWriter.writeVarint32(TINFO_HEADER_KEY_VALUE_TYPE);
	    varintWriter.writeVarint32(headerKeys.length);
	    for (var i = 0; i < headerKeys.length; i++) {
	      var key = headerKeys[i];
	      var value = headers[key];

	      varintWriter.writeString(key);
	      varintWriter.writeString(value);
	    }
	  }
	 var headerSizeWithoutPadding = varintWriter.getOutCount();
	  var paddingNeeded = (4 - (headerSizeWithoutPadding % 4)) % 4;

	  var headerSize = Buffer.alloc(2);
	  headerSize.writeInt16BE(Math.floor((headerSizeWithoutPadding + paddingNeeded) / 4));

	  var paddingBuffer = Buffer.alloc(paddingNeeded);
	  paddingBuffer.fill(0x00);
	  varintWriter.write(paddingBuffer);
	  var headerContentBuffer = varintWriter.toBuffer();
	  var frameSize = Buffer.alloc(4);
	  frameSize.writeInt32BE(10 + this.outCount + headerContentBuffer.length);
	  var headerMagic = Buffer.alloc(2);
	  headerMagic.writeInt16BE(HEADER_MAGIC);

	  // flags are not yet supported, so write a zero
	  var flags = Buffer.alloc(2);
	  flags.writeInt16BE(0);

	  var seqid = Buffer.alloc(4);
	  seqid.writeInt32BE(this.getSeqId());

	  var headerBuffer = Buffer.concat([
	    frameSize,
	    headerMagic,
	    flags,
	    seqid,
	    headerSize,
	    headerContentBuffer,
	  ]);

	  this.outBuffers.unshift(headerBuffer);
	  this.outCount += headerBuffer.length;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var log = __webpack_require__(40);
	var Int64 = __webpack_require__(41);
	var Thrift = __webpack_require__(24);
	var Type = Thrift.Type;

	module.exports = TCompactProtocol;

	var POW_8 = Math.pow(2, 8);
	var POW_24 = Math.pow(2, 24);
	var POW_32 = Math.pow(2, 32);
	var POW_40 = Math.pow(2, 40);
	var POW_48 = Math.pow(2, 48);
	var POW_52 = Math.pow(2, 52);
	var POW_1022 = Math.pow(2, 1022);

	/**
	 * Constructor Function for the Compact Protocol.
	 * @constructor
	 * @param {object} [trans] - The underlying transport to read/write.
	 * @classdesc The Apache Thrift Protocol layer performs serialization
	 *     of base types, the compact protocol serializes data in binary
	 *     form with minimal space used for scalar values.
	 */
	function TCompactProtocol(trans) {
	  this.trans = trans;
	  this.lastField_ = [];
	  this.lastFieldId_ = 0;
	  this.string_limit_ = 0;
	  this.string_buf_ = null;
	  this.string_buf_size_ = 0;
	  this.container_limit_ = 0;
	  this.booleanField_ = {
	    name: null,
	    hasBoolValue: false
	  };
	  this.boolValue_ = {
	    hasBoolValue: false,
	    boolValue: false
	  };
	};


	//
	// Compact Protocol Constants
	//

	/**
	  * Compact Protocol ID number.
	  * @readonly
	  * @const {number} PROTOCOL_ID
	  */
	TCompactProtocol.PROTOCOL_ID = -126;  //1000 0010

	/**
	  * Compact Protocol version number.
	  * @readonly
	  * @const {number} VERSION_N
	  */
	TCompactProtocol.VERSION_N = 1;

	/**
	  * Compact Protocol version mask for combining protocol version and message type in one byte.
	  * @readonly
	  * @const {number} VERSION_MASK
	  */
	TCompactProtocol.VERSION_MASK = 0x1f; //0001 1111

	/**
	  * Compact Protocol message type mask for combining protocol version and message type in one byte.
	  * @readonly
	  * @const {number} TYPE_MASK
	  */
	TCompactProtocol.TYPE_MASK = -32;     //1110 0000

	/**
	  * Compact Protocol message type bits for ensuring message type bit size.
	  * @readonly
	  * @const {number} TYPE_BITS
	  */
	TCompactProtocol.TYPE_BITS = 7; //0000 0111

	/**
	  * Compact Protocol message type shift amount for combining protocol version and message type in one byte.
	  * @readonly
	  * @const {number} TYPE_SHIFT_AMOUNT
	  */
	TCompactProtocol.TYPE_SHIFT_AMOUNT = 5;

	/**
	 * Compact Protocol type IDs used to keep type data within one nibble.
	 * @readonly
	 * @property {number}  CT_STOP          - End of a set of fields.
	 * @property {number}  CT_BOOLEAN_TRUE  - Flag for Boolean field with true value (packed field and value).
	 * @property {number}  CT_BOOLEAN_FALSE - Flag for Boolean field with false value (packed field and value).
	 * @property {number}  CT_BYTE          - Signed 8 bit integer.
	 * @property {number}  CT_I16           - Signed 16 bit integer.
	 * @property {number}  CT_I32           - Signed 32 bit integer.
	 * @property {number}  CT_I64           - Signed 64 bit integer (2^53 max in JavaScript).
	 * @property {number}  CT_DOUBLE        - 64 bit IEEE 854 floating point.
	 * @property {number}  CT_BINARY        - Array of bytes (used for strings also).
	 * @property {number}  CT_LIST          - A collection type (unordered).
	 * @property {number}  CT_SET           - A collection type (unordered and without repeated values).
	 * @property {number}  CT_MAP           - A collection type (map/associative-array/dictionary).
	 * @property {number}  CT_STRUCT        - A multifield type.
	 */
	TCompactProtocol.Types = {
	  CT_STOP:           0x00,
	  CT_BOOLEAN_TRUE:   0x01,
	  CT_BOOLEAN_FALSE:  0x02,
	  CT_BYTE:           0x03,
	  CT_I16:            0x04,
	  CT_I32:            0x05,
	  CT_I64:            0x06,
	  CT_DOUBLE:         0x07,
	  CT_BINARY:         0x08,
	  CT_LIST:           0x09,
	  CT_SET:            0x0A,
	  CT_MAP:            0x0B,
	  CT_STRUCT:         0x0C
	};

	/**
	 * Array mapping Compact type IDs to standard Thrift type IDs.
	 * @readonly
	 */
	TCompactProtocol.TTypeToCType = [
	  TCompactProtocol.Types.CT_STOP,         // T_STOP
	  0,                                      // unused
	  TCompactProtocol.Types.CT_BOOLEAN_TRUE, // T_BOOL
	  TCompactProtocol.Types.CT_BYTE,         // T_BYTE
	  TCompactProtocol.Types.CT_DOUBLE,       // T_DOUBLE
	  0,                                      // unused
	  TCompactProtocol.Types.CT_I16,          // T_I16
	  0,                                      // unused
	  TCompactProtocol.Types.CT_I32,          // T_I32
	  0,                                      // unused
	  TCompactProtocol.Types.CT_I64,          // T_I64
	  TCompactProtocol.Types.CT_BINARY,       // T_STRING
	  TCompactProtocol.Types.CT_STRUCT,       // T_STRUCT
	  TCompactProtocol.Types.CT_MAP,          // T_MAP
	  TCompactProtocol.Types.CT_SET,          // T_SET
	  TCompactProtocol.Types.CT_LIST,         // T_LIST
	];


	//
	// Compact Protocol Utilities
	//

	/**
	 * Returns the underlying transport layer.
	 * @return {object} The underlying transport layer.
	 */TCompactProtocol.prototype.getTransport = function() {
	  return this.trans;
	};

	/**
	 * Lookup a Compact Protocol Type value for a given Thrift Type value.
	 * N.B. Used only internally.
	 * @param {number} ttype - Thrift type value
	 * @returns {number} Compact protocol type value
	 */
	TCompactProtocol.prototype.getCompactType = function(ttype) {
	  return TCompactProtocol.TTypeToCType[ttype];
	};

	/**
	 * Lookup a Thrift Type value for a given Compact Protocol Type value.
	 * N.B. Used only internally.
	 * @param {number} type - Compact Protocol type value
	 * @returns {number} Thrift Type value
	 */
	TCompactProtocol.prototype.getTType = function(type) {
	  switch (type) {
	    case Type.STOP:
	      return Type.STOP;
	    case TCompactProtocol.Types.CT_BOOLEAN_FALSE:
	    case TCompactProtocol.Types.CT_BOOLEAN_TRUE:
	      return Type.BOOL;
	    case TCompactProtocol.Types.CT_BYTE:
	      return Type.BYTE;
	    case TCompactProtocol.Types.CT_I16:
	      return Type.I16;
	    case TCompactProtocol.Types.CT_I32:
	      return Type.I32;
	    case TCompactProtocol.Types.CT_I64:
	      return Type.I64;
	    case TCompactProtocol.Types.CT_DOUBLE:
	      return Type.DOUBLE;
	    case TCompactProtocol.Types.CT_BINARY:
	      return Type.STRING;
	    case TCompactProtocol.Types.CT_LIST:
	      return Type.LIST;
	    case TCompactProtocol.Types.CT_SET:
	      return Type.SET;
	    case TCompactProtocol.Types.CT_MAP:
	      return Type.MAP;
	    case TCompactProtocol.Types.CT_STRUCT:
	      return Type.STRUCT;
	    default:
	      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, "Unknown type: " + type);
	  }
	  return Type.STOP;
	};


	//
	// Compact Protocol write operations
	//

	/**
	 * Send any buffered bytes to the end point.
	 */
	TCompactProtocol.prototype.flush = function() {
	  return this.trans.flush();
	};

	/**
	 * Writes an RPC message header
	 * @param {string} name - The method name for the message.
	 * @param {number} type - The type of message (CALL, REPLY, EXCEPTION, ONEWAY).
	 * @param {number} seqid - The call sequence number (if any).
	 */
	TCompactProtocol.prototype.writeMessageBegin = function(name, type, seqid) {
	  this.writeByte(TCompactProtocol.PROTOCOL_ID);
	  this.writeByte((TCompactProtocol.VERSION_N & TCompactProtocol.VERSION_MASK) |
	                     ((type << TCompactProtocol.TYPE_SHIFT_AMOUNT) & TCompactProtocol.TYPE_MASK));
	  this.writeVarint32(seqid);
	  this.writeString(name);

	  // Record client seqid to find callback again
	  if (this._seqid) {
	    log.warning('SeqId already set', { 'name': name });
	  } else {
	    this._seqid = seqid;
	    this.trans.setCurrSeqId(seqid);
	  }
	};

	TCompactProtocol.prototype.writeMessageEnd = function() {
	};

	TCompactProtocol.prototype.writeStructBegin = function(name) {
	  this.lastField_.push(this.lastFieldId_);
	  this.lastFieldId_ = 0;
	};

	TCompactProtocol.prototype.writeStructEnd = function() {
	  this.lastFieldId_ = this.lastField_.pop();
	};

	/**
	 * Writes a struct field header
	 * @param {string} name - The field name (not written with the compact protocol).
	 * @param {number} type - The field data type (a normal Thrift field Type).
	 * @param {number} id - The IDL field Id.
	 */
	TCompactProtocol.prototype.writeFieldBegin = function(name, type, id) {
	  if (type != Type.BOOL) {
	    return this.writeFieldBeginInternal(name, type, id, -1);
	  }

	  this.booleanField_.name = name;
	  this.booleanField_.fieldType = type;
	  this.booleanField_.fieldId = id;
	};

	TCompactProtocol.prototype.writeFieldEnd = function() {
	};

	TCompactProtocol.prototype.writeFieldStop = function() {
	  this.writeByte(TCompactProtocol.Types.CT_STOP);
	};

	/**
	 * Writes a map collection header
	 * @param {number} keyType - The Thrift type of the map keys.
	 * @param {number} valType - The Thrift type of the map values.
	 * @param {number} size - The number of k/v pairs in the map.
	 */
	TCompactProtocol.prototype.writeMapBegin = function(keyType, valType, size) {
	  if (size === 0) {
	    this.writeByte(0);
	  } else {
	    this.writeVarint32(size);
	    this.writeByte(this.getCompactType(keyType) << 4 | this.getCompactType(valType));
	  }
	};

	TCompactProtocol.prototype.writeMapEnd = function() {
	};

	/**
	 * Writes a list collection header
	 * @param {number} elemType - The Thrift type of the list elements.
	 * @param {number} size - The number of elements in the list.
	 */
	TCompactProtocol.prototype.writeListBegin = function(elemType, size) {
	  this.writeCollectionBegin(elemType, size);
	};

	TCompactProtocol.prototype.writeListEnd = function() {
	};

	/**
	 * Writes a set collection header
	 * @param {number} elemType - The Thrift type of the set elements.
	 * @param {number} size - The number of elements in the set.
	 */
	TCompactProtocol.prototype.writeSetBegin = function(elemType, size) {
	  this.writeCollectionBegin(elemType, size);
	};

	TCompactProtocol.prototype.writeSetEnd = function() {
	};

	TCompactProtocol.prototype.writeBool = function(value) {
	  if (this.booleanField_.name !== null) {
	    // we haven't written the field header yet
	    this.writeFieldBeginInternal(this.booleanField_.name,
	                                 this.booleanField_.fieldType,
	                                 this.booleanField_.fieldId,
	                                 (value ? TCompactProtocol.Types.CT_BOOLEAN_TRUE
	                                          : TCompactProtocol.Types.CT_BOOLEAN_FALSE));
	    this.booleanField_.name = null;
	  } else {
	    // we're not part of a field, so just write the value
	    this.writeByte((value ? TCompactProtocol.Types.CT_BOOLEAN_TRUE
	                            : TCompactProtocol.Types.CT_BOOLEAN_FALSE));
	  }
	};

	TCompactProtocol.prototype.writeByte = function(b) {
	  this.trans.write(new Buffer([b]));
	};

	TCompactProtocol.prototype.writeI16 = function(i16) {
	  this.writeVarint32(this.i32ToZigzag(i16));
	};

	TCompactProtocol.prototype.writeI32 = function(i32) {
	  this.writeVarint32(this.i32ToZigzag(i32));
	};

	TCompactProtocol.prototype.writeI64 = function(i64) {
	  this.writeVarint64(this.i64ToZigzag(i64));
	};

	// Little-endian, unlike TBinaryProtocol
	TCompactProtocol.prototype.writeDouble = function(v) {
	  var buff = new Buffer(8);
	  var m, e, c;

	  buff[7] = (v < 0 ? 0x80 : 0x00);

	  v = Math.abs(v);
	  if (v !== v) {
	    // NaN, use QNaN IEEE format
	    m = 2251799813685248;
	    e = 2047;
	  } else if (v === Infinity) {
	    m = 0;
	    e = 2047;
	  } else {
	    e = Math.floor(Math.log(v) / Math.LN2);
	    c = Math.pow(2, -e);
	    if (v * c < 1) {
	      e--;
	      c *= 2;
	    }

	    if (e + 1023 >= 2047)
	    {
	      // Overflow
	      m = 0;
	      e = 2047;
	    }
	    else if (e + 1023 >= 1)
	    {
	      // Normalized - term order matters, as Math.pow(2, 52-e) and v*Math.pow(2, 52) can overflow
	      m = (v*c-1) * POW_52;
	      e += 1023;
	    }
	    else
	    {
	      // Denormalized - also catches the '0' case, somewhat by chance
	      m = (v * POW_1022) * POW_52;
	      e = 0;
	    }
	  }

	  buff[6] = (e << 4) & 0xf0;
	  buff[7] |= (e >> 4) & 0x7f;

	  buff[0] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[1] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[2] = m & 0xff;
	  m = Math.floor(m / POW_8);
	  buff[3] = m & 0xff;
	  m >>= 8;
	  buff[4] = m & 0xff;
	  m >>= 8;
	  buff[5] = m & 0xff;
	  m >>= 8;
	  buff[6] |= m & 0x0f;

	  this.trans.write(buff);
	};

	TCompactProtocol.prototype.writeStringOrBinary = function(name, encoding, arg) {
	  if (typeof arg === 'string') {
	    this.writeVarint32(Buffer.byteLength(arg, encoding)) ;
	    this.trans.write(new Buffer(arg, encoding));
	  } else if (arg instanceof Buffer ||
	             Object.prototype.toString.call(arg) == '[object Uint8Array]') {
	    // Buffers in Node.js under Browserify may extend UInt8Array instead of
	    // defining a new object. We detect them here so we can write them
	    // correctly
	    this.writeVarint32(arg.length);
	    this.trans.write(arg);
	  } else {
	    throw new Error(name + ' called without a string/Buffer argument: ' + arg);
	  }
	};

	TCompactProtocol.prototype.writeString = function(arg) {
	  this.writeStringOrBinary('writeString', 'utf8', arg);
	};

	TCompactProtocol.prototype.writeBinary = function(arg) {
	  this.writeStringOrBinary('writeBinary', 'binary', arg);
	};


	//
	// Compact Protocol internal write methods
	//

	TCompactProtocol.prototype.writeFieldBeginInternal = function(name,
	                                                              fieldType,
	                                                              fieldId,
	                                                              typeOverride) {
	  //If there's a type override, use that.
	  var typeToWrite = (typeOverride == -1 ? this.getCompactType(fieldType) : typeOverride);
	  //Check if we can delta encode the field id
	  if (fieldId > this.lastFieldId_ && fieldId - this.lastFieldId_ <= 15) {
	    //Include the type delta with the field ID
	    this.writeByte((fieldId - this.lastFieldId_) << 4 | typeToWrite);
	  } else {
	    //Write separate type and ID values
	    this.writeByte(typeToWrite);
	    this.writeI16(fieldId);
	  }
	  this.lastFieldId_ = fieldId;
	};

	TCompactProtocol.prototype.writeCollectionBegin = function(elemType, size) {
	  if (size <= 14) {
	    //Combine size and type in one byte if possible
	    this.writeByte(size << 4 | this.getCompactType(elemType));
	  } else {
	    this.writeByte(0xf0 | this.getCompactType(elemType));
	    this.writeVarint32(size);
	  }
	};

	/**
	 * Write an i32 as a varint. Results in 1-5 bytes on the wire.
	 */
	TCompactProtocol.prototype.writeVarint32 = function(n) {
	  var buf = new Buffer(5);
	  var wsize = 0;
	  while (true) {
	    if ((n & ~0x7F) === 0) {
	      buf[wsize++] = n;
	      break;
	    } else {
	      buf[wsize++] = ((n & 0x7F) | 0x80);
	      n = n >>> 7;
	    }
	  }
	  var wbuf = new Buffer(wsize);
	  buf.copy(wbuf,0,0,wsize);
	  this.trans.write(wbuf);
	};

	/**
	 * Write an i64 as a varint. Results in 1-10 bytes on the wire.
	 * N.B. node-int64 is always big endian
	 */
	TCompactProtocol.prototype.writeVarint64 = function(n) {
	  if (typeof n === "number"){
	    n = new Int64(n);
	  }
	  if (! (n instanceof Int64)) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, "Expected Int64 or Number, found: " + n);
	  }

	  var buf = new Buffer(10);
	  var wsize = 0;
	  var hi = n.buffer.readUInt32BE(0, true);
	  var lo = n.buffer.readUInt32BE(4, true);
	  var mask = 0;
	  while (true) {
	    if (((lo & ~0x7F) === 0) && (hi === 0)) {
	      buf[wsize++] = lo;
	      break;
	    } else {
	      buf[wsize++] = ((lo & 0x7F) | 0x80);
	      mask = hi << 25;
	      lo = lo >>> 7;
	      hi = hi >>> 7;
	      lo = lo | mask;
	    }
	  }
	  var wbuf = new Buffer(wsize);
	  buf.copy(wbuf,0,0,wsize);
	  this.trans.write(wbuf);
	};

	/**
	 * Convert l into a zigzag long. This allows negative numbers to be
	 * represented compactly as a varint.
	 */
	TCompactProtocol.prototype.i64ToZigzag = function(l) {
	  if (typeof l === 'string') {
	    l = new Int64(parseInt(l, 10));
	  } else if (typeof l === 'number') {
	    l = new Int64(l);
	  }
	  if (! (l instanceof Int64)) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, "Expected Int64 or Number, found: " + l);
	  }
	  var hi = l.buffer.readUInt32BE(0, true);
	  var lo = l.buffer.readUInt32BE(4, true);
	  var sign = hi >>> 31;
	  hi = ((hi << 1) | (lo >>> 31)) ^ ((!!sign) ? 0xFFFFFFFF : 0);
	  lo = (lo << 1) ^ ((!!sign) ? 0xFFFFFFFF : 0);
	  return new Int64(hi, lo);
	};

	/**
	 * Convert n into a zigzag int. This allows negative numbers to be
	 * represented compactly as a varint.
	 */
	TCompactProtocol.prototype.i32ToZigzag = function(n) {
	  return (n << 1) ^ ((n & 0x80000000) ? 0xFFFFFFFF : 0);
	};


	//
	// Compact Protocol read operations
	//

	TCompactProtocol.prototype.readMessageBegin = function() {
	  //Read protocol ID
	  var protocolId = this.trans.readByte();
	  if (protocolId != TCompactProtocol.PROTOCOL_ID) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, "Bad protocol identifier " + protocolId);
	  }

	  //Read Version and Type
	  var versionAndType = this.trans.readByte();
	  var version = (versionAndType & TCompactProtocol.VERSION_MASK);
	  if (version != TCompactProtocol.VERSION_N) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, "Bad protocol version " + version);
	  }
	  var type = ((versionAndType >> TCompactProtocol.TYPE_SHIFT_AMOUNT) & TCompactProtocol.TYPE_BITS);

	  //Read SeqId
	  var seqid = this.readVarint32();

	  //Read name
	  var name = this.readString();

	  return {fname: name, mtype: type, rseqid: seqid};
	};

	TCompactProtocol.prototype.readMessageEnd = function() {
	};

	TCompactProtocol.prototype.readStructBegin = function() {
	  this.lastField_.push(this.lastFieldId_);
	  this.lastFieldId_ = 0;
	  return {fname: ''};
	};

	TCompactProtocol.prototype.readStructEnd = function() {
	  this.lastFieldId_ = this.lastField_.pop();
	};

	TCompactProtocol.prototype.readFieldBegin = function() {
	  var fieldId = 0;
	  var b = this.trans.readByte(b);
	  var type = (b & 0x0f);

	  if (type == TCompactProtocol.Types.CT_STOP) {
	    return {fname: null, ftype: Thrift.Type.STOP, fid: 0};
	  }

	  //Mask off the 4 MSB of the type header to check for field id delta.
	  var modifier = ((b & 0x000000f0) >>> 4);
	  if (modifier === 0) {
	    //If not a delta read the field id.
	    fieldId = this.readI16();
	  } else {
	    //Recover the field id from the delta
	    fieldId = (this.lastFieldId_ + modifier);
	  }
	  var fieldType = this.getTType(type);

	  //Boolean are encoded with the type
	  if (type == TCompactProtocol.Types.CT_BOOLEAN_TRUE ||
	      type == TCompactProtocol.Types.CT_BOOLEAN_FALSE) {
	    this.boolValue_.hasBoolValue = true;
	    this.boolValue_.boolValue =
	      (type == TCompactProtocol.Types.CT_BOOLEAN_TRUE ? true : false);
	  }

	  //Save the new field for the next delta computation.
	  this.lastFieldId_ = fieldId;
	  return {fname: null, ftype: fieldType, fid: fieldId};
	};

	TCompactProtocol.prototype.readFieldEnd = function() {
	};

	TCompactProtocol.prototype.readMapBegin = function() {
	  var msize = this.readVarint32();
	  if (msize < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative map size");
	  }

	  var kvType = 0;
	  if (msize !== 0) {
	    kvType = this.trans.readByte();
	  }

	  var keyType = this.getTType((kvType & 0xf0) >>> 4);
	  var valType = this.getTType(kvType & 0xf);
	  return {ktype: keyType, vtype: valType, size: msize};
	};

	TCompactProtocol.prototype.readMapEnd = function() {
	};

	TCompactProtocol.prototype.readListBegin = function() {
	  var size_and_type = this.trans.readByte();

	  var lsize = (size_and_type >>> 4) & 0x0000000f;
	  if (lsize == 15) {
	    lsize = this.readVarint32();
	  }

	  if (lsize < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative list size");
	  }

	  var elemType = this.getTType(size_and_type & 0x0000000f);

	  return {etype: elemType, size: lsize};
	};

	TCompactProtocol.prototype.readListEnd = function() {
	};

	TCompactProtocol.prototype.readSetBegin = function() {
	  return this.readListBegin();
	};

	TCompactProtocol.prototype.readSetEnd = function() {
	};

	TCompactProtocol.prototype.readBool = function() {
	  var value = false;
	  var rsize = 0;
	  if (this.boolValue_.hasBoolValue === true) {
	    value = this.boolValue_.boolValue;
	    this.boolValue_.hasBoolValue = false;
	  } else {
	    var res = this.trans.readByte();
	    rsize = res.rsize;
	    value = (res.value == TCompactProtocol.Types.CT_BOOLEAN_TRUE);
	  }
	  return value;
	};

	TCompactProtocol.prototype.readByte = function() {
	  return this.trans.readByte();
	};

	TCompactProtocol.prototype.readI16 = function() {
	  return this.readI32();
	};

	TCompactProtocol.prototype.readI32 = function() {
	  return this.zigzagToI32(this.readVarint32());
	};

	TCompactProtocol.prototype.readI64 = function() {
	  return this.zigzagToI64(this.readVarint64());
	};

	// Little-endian, unlike TBinaryProtocol
	TCompactProtocol.prototype.readDouble = function() {
	  var buff = this.trans.read(8);
	  var off = 0;

	  var signed = buff[off + 7] & 0x80;
	  var e = (buff[off+6] & 0xF0) >> 4;
	  e += (buff[off+7] & 0x7F) << 4;

	  var m = buff[off];
	  m += buff[off+1] << 8;
	  m += buff[off+2] << 16;
	  m += buff[off+3] * POW_24;
	  m += buff[off+4] * POW_32;
	  m += buff[off+5] * POW_40;
	  m += (buff[off+6] & 0x0F) * POW_48;

	  switch (e) {
	    case 0:
	      e = -1022;
	      break;
	    case 2047:
	      return m ? NaN : (signed ? -Infinity : Infinity);
	    default:
	      m += POW_52;
	      e -= 1023;
	  }

	  if (signed) {
	    m *= -1;
	  }

	  return m * Math.pow(2, e - 52);
	};

	TCompactProtocol.prototype.readBinary = function() {
	  var size = this.readVarint32();
	  if (size === 0) {
	    return new Buffer(0);
	  }

	  if (size < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative binary size");
	  }
	  return this.trans.read(size);
	};

	TCompactProtocol.prototype.readString = function() {
	  var size = this.readVarint32();
	  // Catch empty string case
	  if (size === 0) {
	    return "";
	  }

	  // Catch error cases
	  if (size < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative string size");
	  }
	  return this.trans.readString(size);
	};


	//
	// Compact Protocol internal read operations
	//

	/**
	 * Read an i32 from the wire as a varint. The MSB of each byte is set
	 * if there is another byte to follow. This can read up to 5 bytes.
	 */
	TCompactProtocol.prototype.readVarint32 = function() {
	  return this.readVarint64().toNumber();
	};

	/**
	 * Read an i64 from the wire as a proper varint. The MSB of each byte is set
	 * if there is another byte to follow. This can read up to 10 bytes.
	 */
	TCompactProtocol.prototype.readVarint64 = function() {
	  var rsize = 0;
	  var lo = 0;
	  var hi = 0;
	  var shift = 0;
	  while (true) {
	    var b = this.trans.readByte();
	    rsize ++;
	    if (shift <= 25) {
	      lo = lo | ((b & 0x7f) << shift);
	    } else if (25 < shift && shift < 32) {
	      lo = lo | ((b & 0x7f) << shift);
	      hi = hi | ((b & 0x7f) >>> (32-shift));
	    } else {
	      hi = hi | ((b & 0x7f) << (shift-32));
	    }
	    shift += 7;
	    if (!(b & 0x80)) {
	      break;
	    }
	    if (rsize >= 10) {
	      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, "Variable-length int over 10 bytes.");
	    }
	  }
	  return new Int64(hi, lo);
	};

	/**
	 * Convert from zigzag int to int.
	 */
	TCompactProtocol.prototype.zigzagToI32 = function(n) {
	  return (n >>> 1) ^ (-1 * (n & 1));
	};

	/**
	 * Convert from zigzag long to long.
	 */
	TCompactProtocol.prototype.zigzagToI64 = function(n) {
	  var hi = n.buffer.readUInt32BE(0, true);
	  var lo = n.buffer.readUInt32BE(4, true);

	  var neg = new Int64(hi & 0, lo & 1);
	  neg._2scomp();
	  var hi_neg = neg.buffer.readUInt32BE(0, true);
	  var lo_neg = neg.buffer.readUInt32BE(4, true);

	  var hi_lo = (hi << 31);
	  hi = (hi >>> 1) ^ (hi_neg);
	  lo = ((lo >>> 1) | hi_lo) ^ (lo_neg);
	  return new Int64(hi, lo);
	};

	TCompactProtocol.prototype.skip = function(type) {
	  switch (type) {
	    case Type.BOOL:
	      this.readBool();
	      break;
	    case Type.BYTE:
	      this.readByte();
	      break;
	    case Type.I16:
	      this.readI16();
	      break;
	    case Type.I32:
	      this.readI32();
	      break;
	    case Type.I64:
	      this.readI64();
	      break;
	    case Type.DOUBLE:
	      this.readDouble();
	      break;
	    case Type.STRING:
	      this.readString();
	      break;
	    case Type.STRUCT:
	      this.readStructBegin();
	      while (true) {
	        var r = this.readFieldBegin();
	        if (r.ftype === Type.STOP) {
	          break;
	        }
	        this.skip(r.ftype);
	        this.readFieldEnd();
	      }
	      this.readStructEnd();
	      break;
	    case Type.MAP:
	      var mapBegin = this.readMapBegin();
	      for (var i = 0; i < mapBegin.size; ++i) {
	        this.skip(mapBegin.ktype);
	        this.skip(mapBegin.vtype);
	      }
	      this.readMapEnd();
	      break;
	    case Type.SET:
	      var setBegin = this.readSetBegin();
	      for (var i2 = 0; i2 < setBegin.size; ++i2) {
	        this.skip(setBegin.etype);
	      }
	      this.readSetEnd();
	      break;
	    case Type.LIST:
	      var listBegin = this.readListBegin();
	      for (var i3 = 0; i3 < listBegin.size; ++i3) {
	        this.skip(listBegin.etype);
	      }
	      this.readListEnd();
	      break;
	    default:
	      throw new  Error("Invalid type: " + type);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var util = __webpack_require__(25);

	var disabled = function () {};
	var logFunc = console.log;
	var logLevel = 'error'; // default level

	function factory(level) {
	  return function () {
	    // better use spread syntax, but due to compatibility,
	    // use legacy method here.
	    var args = ['thrift: [' + level + '] '].concat(Array.from(arguments));
	    return logFunc(util.format.apply(null, args));
	  };
	}

	var trace = disabled;
	var debug = disabled;
	var error = disabled;
	var warning = disabled;
	var info = disabled;

	exports.setLogFunc = function (func) {
	  logFunc = func;
	};

	var setLogLevel = exports.setLogLevel = function (level) {
	  trace = debug = error = warning = info = disabled;
	  logLevel = level;
	  switch (logLevel) {
	  case 'trace':
	    trace = factory('TRACE');
	  case 'debug':
	    debug = factory('DEBUG');
	  case 'error':
	    error = factory('ERROR');
	  case 'warning':
	    warning = factory('WARN');
	  case 'info':
	    info = factory('INFO');
	  }
	};

	// set default
	setLogLevel(logLevel);

	exports.getLogLevel = function () {
	  return logLevel;
	};

	exports.trace = function () {
	  return trace.apply(null, arguments);
	};

	exports.debug = function () {
	  return debug.apply(null, arguments);
	};

	exports.error = function () {
	  return error.apply(null, arguments);
	};

	exports.warning = function () {
	  return warning.apply(null, arguments);
	};

	exports.info = function () {
	  return info.apply(null, arguments);
	};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {//     Int64.js
	//
	//     Copyright (c) 2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	/**
	 * Support for handling 64-bit int numbers in Javascript (node.js)
	 *
	 * JS Numbers are IEEE-754 binary double-precision floats, which limits the
	 * range of values that can be represented with integer precision to:
	 *
	 * 2^^53 <= N <= 2^53
	 *
	 * Int64 objects wrap a node Buffer that holds the 8-bytes of int64 data.  These
	 * objects operate directly on the buffer which means that if they are created
	 * using an existing buffer then setting the value will modify the Buffer, and
	 * vice-versa.
	 *
	 * Internal Representation
	 *
	 * The internal buffer format is Big Endian.  I.e. the most-significant byte is
	 * at buffer[0], the least-significant at buffer[7].  For the purposes of
	 * converting to/from JS native numbers, the value is assumed to be a signed
	 * integer stored in 2's complement form.
	 *
	 * For details about IEEE-754 see:
	 * http://en.wikipedia.org/wiki/Double_precision_floating-point_format
	 */

	// Useful masks and values for bit twiddling
	var MASK31 =  0x7fffffff, VAL31 = 0x80000000;
	var MASK32 =  0xffffffff, VAL32 = 0x100000000;

	// Map for converting hex octets to strings
	var _HEX = [];
	for (var i = 0; i < 256; i++) {
	  _HEX[i] = (i > 0xF ? '' : '0') + i.toString(16);
	}

	//
	// Int64
	//

	/**
	 * Constructor accepts any of the following argument types:
	 *
	 * new Int64(buffer[, offset=0]) - Existing Buffer with byte offset
	 * new Int64(Uint8Array[, offset=0]) - Existing Uint8Array with a byte offset
	 * new Int64(string)             - Hex string (throws if n is outside int64 range)
	 * new Int64(number)             - Number (throws if n is outside int64 range)
	 * new Int64(hi, lo)             - Raw bits as two 32-bit values
	 */
	var Int64 = module.exports = function(a1, a2) {
	  if (a1 instanceof Buffer) {
	    this.buffer = a1;
	    this.offset = a2 || 0;
	  } else if (Object.prototype.toString.call(a1) == '[object Uint8Array]') {
	    // Under Browserify, Buffers can extend Uint8Arrays rather than an
	    // instance of Buffer. We could assume the passed in Uint8Array is actually
	    // a buffer but that won't handle the case where a raw Uint8Array is passed
	    // in. We construct a new Buffer just in case.
	    this.buffer = new Buffer(a1);
	    this.offset = a2 || 0;
	  } else {
	    this.buffer = this.buffer || new Buffer(8);
	    this.offset = 0;
	    this.setValue.apply(this, arguments);
	  }
	};


	// Max integer value that JS can accurately represent
	Int64.MAX_INT = Math.pow(2, 53);

	// Min integer value that JS can accurately represent
	Int64.MIN_INT = -Math.pow(2, 53);

	Int64.prototype = {

	  constructor: Int64,

	  /**
	   * Do in-place 2's compliment.  See
	   * http://en.wikipedia.org/wiki/Two's_complement
	   */
	  _2scomp: function() {
	    var b = this.buffer, o = this.offset, carry = 1;
	    for (var i = o + 7; i >= o; i--) {
	      var v = (b[i] ^ 0xff) + carry;
	      b[i] = v & 0xff;
	      carry = v >> 8;
	    }
	  },

	  /**
	   * Set the value. Takes any of the following arguments:
	   *
	   * setValue(string) - A hexidecimal string
	   * setValue(number) - Number (throws if n is outside int64 range)
	   * setValue(hi, lo) - Raw bits as two 32-bit values
	   */
	  setValue: function(hi, lo) {
	    var negate = false;
	    if (arguments.length == 1) {
	      if (typeof(hi) == 'number') {
	        // Simplify bitfield retrieval by using abs() value.  We restore sign
	        // later
	        negate = hi < 0;
	        hi = Math.abs(hi);
	        lo = hi % VAL32;
	        hi = hi / VAL32;
	        if (hi > VAL32) throw new RangeError(hi  + ' is outside Int64 range');
	        hi = hi | 0;
	      } else if (typeof(hi) == 'string') {
	        hi = (hi + '').replace(/^0x/, '');
	        lo = hi.substr(-8);
	        hi = hi.length > 8 ? hi.substr(0, hi.length - 8) : '';
	        hi = parseInt(hi, 16);
	        lo = parseInt(lo, 16);
	      } else {
	        throw new Error(hi + ' must be a Number or String');
	      }
	    }

	    // Technically we should throw if hi or lo is outside int32 range here, but
	    // it's not worth the effort. Anything past the 32'nd bit is ignored.

	    // Copy bytes to buffer
	    var b = this.buffer, o = this.offset;
	    for (var i = 7; i >= 0; i--) {
	      b[o+i] = lo & 0xff;
	      lo = i == 4 ? hi : lo >>> 8;
	    }

	    // Restore sign of passed argument
	    if (negate) this._2scomp();
	  },

	  /**
	   * Convert to a native JS number.
	   *
	   * WARNING: Do not expect this value to be accurate to integer precision for
	   * large (positive or negative) numbers!
	   *
	   * @param allowImprecise If true, no check is performed to verify the
	   * returned value is accurate to integer precision.  If false, imprecise
	   * numbers (very large positive or negative numbers) will be forced to +/-
	   * Infinity.
	   */
	  toNumber: function(allowImprecise) {
	    var b = this.buffer, o = this.offset;

	    // Running sum of octets, doing a 2's complement
	    var negate = b[o] & 0x80, x = 0, carry = 1;
	    for (var i = 7, m = 1; i >= 0; i--, m *= 256) {
	      var v = b[o+i];

	      // 2's complement for negative numbers
	      if (negate) {
	        v = (v ^ 0xff) + carry;
	        carry = v >> 8;
	        v = v & 0xff;
	      }

	      x += v * m;
	    }

	    // Return Infinity if we've lost integer precision
	    if (!allowImprecise && x >= Int64.MAX_INT) {
	      return negate ? -Infinity : Infinity;
	    }

	    return negate ? -x : x;
	  },

	  /**
	   * Convert to a JS Number. Returns +/-Infinity for values that can't be
	   * represented to integer precision.
	   */
	  valueOf: function() {
	    return this.toNumber(false);
	  },

	  /**
	   * Return string value
	   *
	   * @param radix Just like Number#toString()'s radix
	   */
	  toString: function(radix) {
	    return this.valueOf().toString(radix || 10);
	  },

	  /**
	   * Return a string showing the buffer octets, with MSB on the left.
	   *
	   * @param sep separator string. default is '' (empty string)
	   */
	  toOctetString: function(sep) {
	    var out = new Array(8);
	    var b = this.buffer, o = this.offset;
	    for (var i = 0; i < 8; i++) {
	      out[i] = _HEX[b[o+i]];
	    }
	    return out.join(sep || '');
	  },

	  /**
	   * Returns the int64's 8 bytes in a buffer.
	   *
	   * @param {bool} [rawBuffer=false]  If no offset and this is true, return the internal buffer.  Should only be used if
	   *                                  you're discarding the Int64 afterwards, as it breaks encapsulation.
	   */
	  toBuffer: function(rawBuffer) {
	    if (rawBuffer && this.offset === 0) return this.buffer;

	    var out = new Buffer(8);
	    this.buffer.copy(out, 0, this.offset, this.offset + 8);
	    return out;
	  },

	  /**
	   * Copy 8 bytes of int64 into target buffer at target offset.
	   *
	   * @param {Buffer} targetBuffer       Buffer to copy into.
	   * @param {number} [targetOffset=0]   Offset into target buffer.
	   */
	  copy: function(targetBuffer, targetOffset) {
	    this.buffer.copy(targetBuffer, targetOffset || 0, this.offset, this.offset + 8);
	  },

	  /**
	   * Returns a number indicating whether this comes before or after or is the
	   * same as the other in sort order.
	   *
	   * @param {Int64} other  Other Int64 to compare.
	   */
	  compare: function(other) {

	    // If sign bits differ ...
	    if ((this.buffer[this.offset] & 0x80) != (other.buffer[other.offset] & 0x80)) {
	      return other.buffer[other.offset] - this.buffer[this.offset];
	    }

	    // otherwise, compare bytes lexicographically
	    for (var i = 0; i < 8; i++) {
	      if (this.buffer[this.offset+i] !== other.buffer[other.offset+i]) {
	        return this.buffer[this.offset+i] - other.buffer[other.offset+i];
	      }
	    }
	    return 0;
	  },

	  /**
	   * Returns a boolean indicating if this integer is equal to other.
	   *
	   * @param {Int64} other  Other Int64 to compare.
	   */
	  equals: function(other) {
	    return this.compare(other) === 0;
	  },

	  /**
	   * Pretty output in console.log
	   */
	  inspect: function() {
	    return '[Int64 value:' + this + ' octets:' + this.toOctetString(' ') + ']';
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var log = __webpack_require__(40);
	var binary = __webpack_require__(36);
	var Int64 = __webpack_require__(41);
	var Thrift = __webpack_require__(24);
	var Type = Thrift.Type;

	module.exports = TBinaryProtocol;

	// JavaScript supports only numeric doubles, therefore even hex values are always signed.
	// The largest integer value which can be represented in JavaScript is +/-2^53.
	// Bitwise operations convert numbers to 32 bit integers but perform sign extension
	// upon assigning values back to variables.
	var VERSION_MASK = -65536,   // 0xffff0000
	    VERSION_1 = -2147418112, // 0x80010000
	    TYPE_MASK = 0x000000ff;

	TBinaryProtocol.VERSION_MASK = VERSION_MASK;
	TBinaryProtocol.VERSION_1 = VERSION_1;
	TBinaryProtocol.TYPE_MASK = TYPE_MASK

	function TBinaryProtocol(trans, strictRead, strictWrite) {
	  this.trans = trans;
	  this.strictRead = (strictRead !== undefined ? strictRead : false);
	  this.strictWrite = (strictWrite !== undefined ? strictWrite : true);
	  this._seqid = null;
	};

	TBinaryProtocol.prototype.flush = function() {
	  return this.trans.flush();
	};

	TBinaryProtocol.prototype.writeMessageBegin = function(name, type, seqid) {
	    if (this.strictWrite) {
	      this.writeI32(VERSION_1 | type);
	      this.writeString(name);
	      this.writeI32(seqid);
	    } else {
	      this.writeString(name);
	      this.writeByte(type);
	      this.writeI32(seqid);
	    }
	    // Record client seqid to find callback again
	    if (this._seqid !== null) {
	      log.warning('SeqId already set', { 'name': name });
	    } else {
	      this._seqid = seqid;
	      this.trans.setCurrSeqId(seqid);
	    }
	};

	TBinaryProtocol.prototype.writeMessageEnd = function() {
	    if (this._seqid !== null) {
	        this._seqid = null;
	    } else {
	        log.warning('No seqid to unset');
	    }
	};

	TBinaryProtocol.prototype.writeStructBegin = function(name) {
	};

	TBinaryProtocol.prototype.writeStructEnd = function() {
	};

	TBinaryProtocol.prototype.writeFieldBegin = function(name, type, id) {
	  this.writeByte(type);
	  this.writeI16(id);
	};

	TBinaryProtocol.prototype.writeFieldEnd = function() {
	};

	TBinaryProtocol.prototype.writeFieldStop = function() {
	  this.writeByte(Type.STOP);
	};

	TBinaryProtocol.prototype.writeMapBegin = function(ktype, vtype, size) {
	  this.writeByte(ktype);
	  this.writeByte(vtype);
	  this.writeI32(size);
	};

	TBinaryProtocol.prototype.writeMapEnd = function() {
	};

	TBinaryProtocol.prototype.writeListBegin = function(etype, size) {
	  this.writeByte(etype);
	  this.writeI32(size);
	};

	TBinaryProtocol.prototype.writeListEnd = function() {
	};

	TBinaryProtocol.prototype.writeSetBegin = function(etype, size) {
	  this.writeByte(etype);
	  this.writeI32(size);
	};

	TBinaryProtocol.prototype.writeSetEnd = function() {
	};

	TBinaryProtocol.prototype.writeBool = function(bool) {
	  if (bool) {
	    this.writeByte(1);
	  } else {
	    this.writeByte(0);
	  }
	};

	TBinaryProtocol.prototype.writeByte = function(b) {
	  this.trans.write(new Buffer([b]));
	};

	TBinaryProtocol.prototype.writeI16 = function(i16) {
	  this.trans.write(binary.writeI16(new Buffer(2), i16));
	};

	TBinaryProtocol.prototype.writeI32 = function(i32) {
	  this.trans.write(binary.writeI32(new Buffer(4), i32));
	};

	TBinaryProtocol.prototype.writeI64 = function(i64) {
	  if (i64.buffer) {
	    this.trans.write(i64.buffer);
	  } else {
	    this.trans.write(new Int64(i64).buffer);
	  }
	};

	TBinaryProtocol.prototype.writeDouble = function(dub) {
	  this.trans.write(binary.writeDouble(new Buffer(8), dub));
	};

	TBinaryProtocol.prototype.writeStringOrBinary = function(name, encoding, arg) {
	  if (typeof(arg) === 'string') {
	    this.writeI32(Buffer.byteLength(arg, encoding));
	    this.trans.write(new Buffer(arg, encoding));
	  } else if ((arg instanceof Buffer) ||
	             (Object.prototype.toString.call(arg) == '[object Uint8Array]')) {
	    // Buffers in Node.js under Browserify may extend UInt8Array instead of
	    // defining a new object. We detect them here so we can write them
	    // correctly
	    this.writeI32(arg.length);
	    this.trans.write(arg);
	  } else {
	    throw new Error(name + ' called without a string/Buffer argument: ' + arg);
	  }
	};

	TBinaryProtocol.prototype.writeString = function(arg) {
	  this.writeStringOrBinary('writeString', 'utf8', arg);
	};

	TBinaryProtocol.prototype.writeBinary = function(arg) {
	  this.writeStringOrBinary('writeBinary', 'binary', arg);
	};

	TBinaryProtocol.prototype.readMessageBegin = function() {
	  var sz = this.readI32();
	  var type, name, seqid;

	  if (sz < 0) {
	    var version = sz & VERSION_MASK;
	    if (version != VERSION_1) {
	      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, "Bad version in readMessageBegin: " + sz);
	    }
	    type = sz & TYPE_MASK;
	    name = this.readString();
	    seqid = this.readI32();
	  } else {
	    if (this.strictRead) {
	      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, "No protocol version header");
	    }
	    name = this.trans.read(sz);
	    type = this.readByte();
	    seqid = this.readI32();
	  }
	  return {fname: name, mtype: type, rseqid: seqid};
	};

	TBinaryProtocol.prototype.readMessageEnd = function() {
	};

	TBinaryProtocol.prototype.readStructBegin = function() {
	  return {fname: ''};
	};

	TBinaryProtocol.prototype.readStructEnd = function() {
	};

	TBinaryProtocol.prototype.readFieldBegin = function() {
	  var type = this.readByte();
	  if (type == Type.STOP) {
	    return {fname: null, ftype: type, fid: 0};
	  }
	  var id = this.readI16();
	  return {fname: null, ftype: type, fid: id};
	};

	TBinaryProtocol.prototype.readFieldEnd = function() {
	};

	TBinaryProtocol.prototype.readMapBegin = function() {
	  var ktype = this.readByte();
	  var vtype = this.readByte();
	  var size = this.readI32();
	  return {ktype: ktype, vtype: vtype, size: size};
	};

	TBinaryProtocol.prototype.readMapEnd = function() {
	};

	TBinaryProtocol.prototype.readListBegin = function() {
	  var etype = this.readByte();
	  var size = this.readI32();
	  return {etype: etype, size: size};
	};

	TBinaryProtocol.prototype.readListEnd = function() {
	};

	TBinaryProtocol.prototype.readSetBegin = function() {
	  var etype = this.readByte();
	  var size = this.readI32();
	  return {etype: etype, size: size};
	};

	TBinaryProtocol.prototype.readSetEnd = function() {
	};

	TBinaryProtocol.prototype.readBool = function() {
	  var b = this.readByte();
	  if (b === 0) {
	    return false;
	  }
	  return true;
	};

	TBinaryProtocol.prototype.readByte = function() {
	  return this.trans.readByte();
	};

	TBinaryProtocol.prototype.readI16 = function() {
	  return this.trans.readI16();
	};

	TBinaryProtocol.prototype.readI32 = function() {
	  return this.trans.readI32();
	};

	TBinaryProtocol.prototype.readI64 = function() {
	  var buff = this.trans.read(8);
	  return new Int64(buff);
	};

	TBinaryProtocol.prototype.readDouble = function() {
	  return this.trans.readDouble();
	};

	TBinaryProtocol.prototype.readBinary = function() {
	  var len = this.readI32();
	  if (len === 0) {
	    return new Buffer(0);
	  }

	  if (len < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative binary size");
	  }
	  return this.trans.read(len);
	};

	TBinaryProtocol.prototype.readString = function() {
	  var len = this.readI32();
	  if (len === 0) {
	    return "";
	  }

	  if (len < 0) {
	    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, "Negative string size");
	  }
	  return this.trans.readString(len);
	};

	TBinaryProtocol.prototype.getTransport = function() {
	  return this.trans;
	};

	TBinaryProtocol.prototype.skip = function(type) {
	  switch (type) {
	    case Type.BOOL:
	      this.readBool();
	      break;
	    case Type.BYTE:
	      this.readByte();
	      break;
	    case Type.I16:
	      this.readI16();
	      break;
	    case Type.I32:
	      this.readI32();
	      break;
	    case Type.I64:
	      this.readI64();
	      break;
	    case Type.DOUBLE:
	      this.readDouble();
	      break;
	    case Type.STRING:
	      this.readString();
	      break;
	    case Type.STRUCT:
	      this.readStructBegin();
	      while (true) {
	        var r = this.readFieldBegin();
	        if (r.ftype === Type.STOP) {
	          break;
	        }
	        this.skip(r.ftype);
	        this.readFieldEnd();
	      }
	      this.readStructEnd();
	      break;
	    case Type.MAP:
	      var mapBegin = this.readMapBegin();
	      for (var i = 0; i < mapBegin.size; ++i) {
	        this.skip(mapBegin.ktype);
	        this.skip(mapBegin.vtype);
	      }
	      this.readMapEnd();
	      break;
	    case Type.SET:
	      var setBegin = this.readSetBegin();
	      for (var i2 = 0; i2 < setBegin.size; ++i2) {
	        this.skip(setBegin.etype);
	      }
	      this.readSetEnd();
	      break;
	    case Type.LIST:
	      var listBegin = this.readListBegin();
	      for (var i3 = 0; i3 < listBegin.size; ++i3) {
	        this.skip(listBegin.etype);
	      }
	      this.readListEnd();
	      break;
	    default:
	      throw new  Error("Invalid type: " + type);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var Int64 = __webpack_require__(41);
	var Thrift = __webpack_require__(24);
	var Type = Thrift.Type;
	var util = __webpack_require__(25);

	var Int64Util = __webpack_require__(44);
	var json_parse = __webpack_require__(45);

	var InputBufferUnderrunError = __webpack_require__(37);

	module.exports = TJSONProtocol;

	/**
	 * Initializes a Thrift JSON protocol instance.
	 * @constructor
	 * @param {Thrift.Transport} trans - The transport to serialize to/from.
	 * @classdesc Apache Thrift Protocols perform serialization which enables cross
	 * language RPC. The Protocol type is the JavaScript browser implementation
	 * of the Apache Thrift TJSONProtocol.
	 * @example
	 *     var protocol  = new Thrift.Protocol(transport);
	 */
	function TJSONProtocol(trans) {
	  this.tstack = [];
	  this.tpos = [];
	  this.trans = trans;
	};

	/**
	 * Thrift IDL type Id to string mapping.
	 * @readonly
	 * @see {@link Thrift.Type}
	 */
	TJSONProtocol.Type = {};
	TJSONProtocol.Type[Type.BOOL] = '"tf"';
	TJSONProtocol.Type[Type.BYTE] = '"i8"';
	TJSONProtocol.Type[Type.I16] = '"i16"';
	TJSONProtocol.Type[Type.I32] = '"i32"';
	TJSONProtocol.Type[Type.I64] = '"i64"';
	TJSONProtocol.Type[Type.DOUBLE] = '"dbl"';
	TJSONProtocol.Type[Type.STRUCT] = '"rec"';
	TJSONProtocol.Type[Type.STRING] = '"str"';
	TJSONProtocol.Type[Type.MAP] = '"map"';
	TJSONProtocol.Type[Type.LIST] = '"lst"';
	TJSONProtocol.Type[Type.SET] = '"set"';

	/**
	 * Thrift IDL type string to Id mapping.
	 * @readonly
	 * @see {@link Thrift.Type}
	 */
	TJSONProtocol.RType = {};
	TJSONProtocol.RType.tf = Type.BOOL;
	TJSONProtocol.RType.i8 = Type.BYTE;
	TJSONProtocol.RType.i16 = Type.I16;
	TJSONProtocol.RType.i32 = Type.I32;
	TJSONProtocol.RType.i64 = Type.I64;
	TJSONProtocol.RType.dbl = Type.DOUBLE;
	TJSONProtocol.RType.rec = Type.STRUCT;
	TJSONProtocol.RType.str = Type.STRING;
	TJSONProtocol.RType.map = Type.MAP;
	TJSONProtocol.RType.lst = Type.LIST;
	TJSONProtocol.RType.set = Type.SET;

	/**
	 * The TJSONProtocol version number.
	 * @readonly
	 * @const {number} Version
	 * @memberof Thrift.Protocol
	 */
	TJSONProtocol.Version = 1;

	TJSONProtocol.prototype.flush = function() {
	  this.writeToTransportIfStackIsFlushable();
	  return this.trans.flush();
	};

	TJSONProtocol.prototype.writeToTransportIfStackIsFlushable = function() {
	  if (this.tstack.length === 1) {
	    this.trans.write(this.tstack.pop());
	  }
	};

	/**
	 * Serializes the beginning of a Thrift RPC message.
	 * @param {string} name - The service method to call.
	 * @param {Thrift.MessageType} messageType - The type of method call.
	 * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).
	 */
	TJSONProtocol.prototype.writeMessageBegin = function(name, messageType, seqid) {
	  this.tstack.push([TJSONProtocol.Version, '"' + name + '"', messageType, seqid]);
	};

	/**
	 * Serializes the end of a Thrift RPC message.
	 */
	TJSONProtocol.prototype.writeMessageEnd = function() {
	  var obj = this.tstack.pop();

	  this.wobj = this.tstack.pop();
	  this.wobj.push(obj);

	  this.wbuf = '[' + this.wobj.join(',') + ']';

	  // we assume there is nothing more to come so we write
	  this.trans.write(this.wbuf);
	};

	/**
	 * Serializes the beginning of a struct.
	 * @param {string} name - The name of the struct.
	 */
	TJSONProtocol.prototype.writeStructBegin = function(name) {
	  this.tpos.push(this.tstack.length);
	  this.tstack.push({});
	};

	/**
	 * Serializes the end of a struct.
	 */
	TJSONProtocol.prototype.writeStructEnd = function() {
	  var p = this.tpos.pop();
	  var struct = this.tstack[p];
	  var str = '{';
	  var first = true;
	  for (var key in struct) {
	    if (first) {
	      first = false;
	    } else {
	      str += ',';
	    }

	    str += key + ':' + struct[key];
	  }

	  str += '}';
	  this.tstack[p] = str;

	  this.writeToTransportIfStackIsFlushable();
	};

	/**
	 * Serializes the beginning of a struct field.
	 * @param {string} name - The name of the field.
	 * @param {Thrift.Protocol.Type} fieldType - The data type of the field.
	 * @param {number} fieldId - The field's unique identifier.
	 */
	TJSONProtocol.prototype.writeFieldBegin = function(name, fieldType, fieldId) {
	  this.tpos.push(this.tstack.length);
	  this.tstack.push({ 'fieldId': '"' +
	    fieldId + '"', 'fieldType': TJSONProtocol.Type[fieldType]
	  });
	};

	/**
	 * Serializes the end of a field.
	 */
	TJSONProtocol.prototype.writeFieldEnd = function() {
	  var value = this.tstack.pop();
	  var fieldInfo = this.tstack.pop();

	  if (':' + value === ":[object Object]") {
	    this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +
	      fieldInfo.fieldType + ':' + JSON.stringify(value) + '}';
	  } else {
	    this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +
	      fieldInfo.fieldType + ':' + value + '}';
	  }
	  this.tpos.pop();

	  this.writeToTransportIfStackIsFlushable();
	};

	/**
	 * Serializes the end of the set of fields for a struct.
	 */
	TJSONProtocol.prototype.writeFieldStop = function() {
	};

	/**
	 * Serializes the beginning of a map collection.
	 * @param {Thrift.Type} keyType - The data type of the key.
	 * @param {Thrift.Type} valType - The data type of the value.
	 * @param {number} [size] - The number of elements in the map (ignored).
	 */
	TJSONProtocol.prototype.writeMapBegin = function(keyType, valType, size) {
	  //size is invalid, we'll set it on end.
	  this.tpos.push(this.tstack.length);
	  this.tstack.push([TJSONProtocol.Type[keyType], TJSONProtocol.Type[valType], 0]);
	};

	/**
	 * Serializes the end of a map.
	 */
	TJSONProtocol.prototype.writeMapEnd = function() {
	  var p = this.tpos.pop();

	  if (p == this.tstack.length) {
	    return;
	  }

	  if ((this.tstack.length - p - 1) % 2 !== 0) {
	    this.tstack.push('');
	  }

	  var size = (this.tstack.length - p - 1) / 2;

	  this.tstack[p][this.tstack[p].length - 1] = size;

	  var map = '}';
	  var first = true;
	  while (this.tstack.length > p + 1) {
	    var v = this.tstack.pop();
	    var k = this.tstack.pop();
	    if (first) {
	      first = false;
	    } else {
	      map = ',' + map;
	    }

	    if (! isNaN(k)) { k = '"' + k + '"'; } //json "keys" need to be strings
	    map = k + ':' + v + map;
	  }
	  map = '{' + map;

	  this.tstack[p].push(map);
	  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';

	  this.writeToTransportIfStackIsFlushable();
	};

	/**
	 * Serializes the beginning of a list collection.
	 * @param {Thrift.Type} elemType - The data type of the elements.
	 * @param {number} size - The number of elements in the list.
	 */
	TJSONProtocol.prototype.writeListBegin = function(elemType, size) {
	  this.tpos.push(this.tstack.length);
	  this.tstack.push([TJSONProtocol.Type[elemType], size]);
	};

	/**
	 * Serializes the end of a list.
	 */
	TJSONProtocol.prototype.writeListEnd = function() {
	  var p = this.tpos.pop();

	  while (this.tstack.length > p + 1) {
	    var tmpVal = this.tstack[p + 1];
	    this.tstack.splice(p + 1, 1);
	    this.tstack[p].push(tmpVal);
	  }

	  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';

	  this.writeToTransportIfStackIsFlushable();
	};

	/**
	 * Serializes the beginning of a set collection.
	 * @param {Thrift.Type} elemType - The data type of the elements.
	 * @param {number} size - The number of elements in the list.
	 */
	TJSONProtocol.prototype.writeSetBegin = function(elemType, size) {
	    this.tpos.push(this.tstack.length);
	    this.tstack.push([TJSONProtocol.Type[elemType], size]);
	};

	/**
	 * Serializes the end of a set.
	 */
	TJSONProtocol.prototype.writeSetEnd = function() {
	  var p = this.tpos.pop();

	  while (this.tstack.length > p + 1) {
	    var tmpVal = this.tstack[p + 1];
	    this.tstack.splice(p + 1, 1);
	    this.tstack[p].push(tmpVal);
	  }

	  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';

	  this.writeToTransportIfStackIsFlushable();
	};

	/** Serializes a boolean */
	TJSONProtocol.prototype.writeBool = function(bool) {
	  this.tstack.push(bool ? 1 : 0);
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeByte = function(byte) {
	  this.tstack.push(byte);
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeI16 = function(i16) {
	  this.tstack.push(i16);
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeI32 = function(i32) {
	  this.tstack.push(i32);
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeI64 = function(i64) {
	  if (i64 instanceof Int64) {
	    this.tstack.push(Int64Util.toDecimalString(i64));
	  } else {
	    this.tstack.push(i64);
	  }
	};

	/** Serializes a number */
	TJSONProtocol.prototype.writeDouble = function(dub) {
	  this.tstack.push(dub);
	};

	/** Serializes a string */
	TJSONProtocol.prototype.writeString = function(arg) {
	  // We do not encode uri components for wire transfer:
	  if (arg === null) {
	      this.tstack.push(null);
	  } else {
	      if (typeof arg === 'string') {
	        var str = arg;
	      } else if (arg instanceof Buffer) {
	        var str = arg.toString('utf8');
	      } else {
	        throw new Error('writeString called without a string/Buffer argument: ' + arg);
	      }

	      // concat may be slower than building a byte buffer
	      var escapedString = '';
	      for (var i = 0; i < str.length; i++) {
	          var ch = str.charAt(i);      // a single double quote: "
	          if (ch === '\"') {
	              escapedString += '\\\"'; // write out as: \"
	          } else if (ch === '\\') {    // a single backslash: \
	              escapedString += '\\\\'; // write out as: \\
	          /* Currently escaped forward slashes break TJSONProtocol.
	           * As it stands, we can simply pass forward slashes into
	           * our strings across the wire without being escaped.
	           * I think this is the protocol's bug, not thrift.js
	           * } else if(ch === '/') {   // a single forward slash: /
	           *  escapedString += '\\/';  // write out as \/
	           * }
	           */
	          } else if (ch === '\b') {    // a single backspace: invisible
	              escapedString += '\\b';  // write out as: \b"
	          } else if (ch === '\f') {    // a single formfeed: invisible
	              escapedString += '\\f';  // write out as: \f"
	          } else if (ch === '\n') {    // a single newline: invisible
	              escapedString += '\\n';  // write out as: \n"
	          } else if (ch === '\r') {    // a single return: invisible
	              escapedString += '\\r';  // write out as: \r"
	          } else if (ch === '\t') {    // a single tab: invisible
	              escapedString += '\\t';  // write out as: \t"
	          } else {
	              escapedString += ch;     // Else it need not be escaped
	          }
	      }
	      this.tstack.push('"' + escapedString + '"');
	  }
	};

	/** Serializes a string */
	TJSONProtocol.prototype.writeBinary = function(arg) {
	  if (typeof arg === 'string') {
	    var buf = new Buffer(arg, 'binary');
	  } else if (arg instanceof Buffer ||
	             Object.prototype.toString.call(arg) == '[object Uint8Array]')  {
	    var buf = arg;
	  } else {
	    throw new Error('writeBinary called without a string/Buffer argument: ' + arg);
	  }
	  this.tstack.push('"' + buf.toString('base64') + '"');
	};

	/**
	 * @class
	 * @name AnonReadMessageBeginReturn
	 * @property {string} fname - The name of the service method.
	 * @property {Thrift.MessageType} mtype - The type of message call.
	 * @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).
	 */
	/**
	 * Deserializes the beginning of a message.
	 * @returns {AnonReadMessageBeginReturn}
	 */
	TJSONProtocol.prototype.readMessageBegin = function() {
	  this.rstack = [];
	  this.rpos = [];

	  //Borrow the inbound transport buffer and ensure data is present/consistent
	  var transBuf = this.trans.borrow();
	  if (transBuf.readIndex >= transBuf.writeIndex) {
	    throw new InputBufferUnderrunError();
	  }
	  var cursor = transBuf.readIndex;

	  if (transBuf.buf[cursor] !== 0x5B) { //[
	    throw new Error("Malformed JSON input, no opening bracket");
	  }

	  //Parse a single message (there may be several in the buffer)
	  //  TODO: Handle characters using multiple code units
	  cursor++;
	  var openBracketCount = 1;
	  var inString = false;
	  for (; cursor < transBuf.writeIndex; cursor++) {
	    var chr = transBuf.buf[cursor];
	    //we use hexa charcode here because data[i] returns an int and not a char
	    if (inString) {
	      if (chr === 0x22) { //"
	        inString = false;
	      } else if (chr === 0x5C) { //\
	        //escaped character, skip
	        cursor += 1;
	      }
	    } else {
	      if (chr === 0x5B) { //[
	        openBracketCount += 1;
	      } else if (chr === 0x5D) { //]
	        openBracketCount -= 1;
	        if (openBracketCount === 0) {
	          //end of json message detected
	          break;
	        }
	      } else if (chr === 0x22) { //"
	        inString = true;
	      }
	    }
	  }

	  if (openBracketCount !== 0) {
	    // Missing closing bracket. Can be buffer underrun.
	    throw new InputBufferUnderrunError();
	  }

	  //Reconstitute the JSON object and conume the necessary bytes
	  this.robj = json_parse(transBuf.buf.slice(transBuf.readIndex, cursor+1).toString());
	  this.trans.consume(cursor + 1 - transBuf.readIndex);

	  //Verify the protocol version
	  var version = this.robj.shift();
	  if (version != TJSONProtocol.Version) {
	    throw new Error('Wrong thrift protocol version: ' + version);
	  }

	  //Objectify the thrift message {name/type/sequence-number} for return
	  // and then save the JSON object in rstack
	  var r = {};
	  r.fname = this.robj.shift();
	  r.mtype = this.robj.shift();
	  r.rseqid = this.robj.shift();
	  this.rstack.push(this.robj.shift());
	  return r;
	};

	/** Deserializes the end of a message. */
	TJSONProtocol.prototype.readMessageEnd = function() {
	};

	/**
	 * Deserializes the beginning of a struct.
	 * @param {string} [name] - The name of the struct (ignored)
	 * @returns {object} - An object with an empty string fname property
	 */
	TJSONProtocol.prototype.readStructBegin = function() {
	  var r = {};
	  r.fname = '';

	  //incase this is an array of structs
	  if (this.rstack[this.rstack.length - 1] instanceof Array) {
	    this.rstack.push(this.rstack[this.rstack.length - 1].shift());
	  }

	  return r;
	};

	/** Deserializes the end of a struct. */
	TJSONProtocol.prototype.readStructEnd = function() {
	  this.rstack.pop();
	};

	/**
	 * @class
	 * @name AnonReadFieldBeginReturn
	 * @property {string} fname - The name of the field (always '').
	 * @property {Thrift.Type} ftype - The data type of the field.
	 * @property {number} fid - The unique identifier of the field.
	 */
	/**
	 * Deserializes the beginning of a field.
	 * @returns {AnonReadFieldBeginReturn}
	 */
	TJSONProtocol.prototype.readFieldBegin = function() {
	  var r = {};

	  var fid = -1;
	  var ftype = Type.STOP;

	  //get a fieldId
	  for (var f in (this.rstack[this.rstack.length - 1])) {
	    if (f === null) {
	      continue;
	    }

	    fid = parseInt(f, 10);
	    this.rpos.push(this.rstack.length);

	    var field = this.rstack[this.rstack.length - 1][fid];

	    //remove so we don't see it again
	    delete this.rstack[this.rstack.length - 1][fid];

	    this.rstack.push(field);

	    break;
	  }

	  if (fid != -1) {
	    //should only be 1 of these but this is the only
	    //way to match a key
	    for (var i in (this.rstack[this.rstack.length - 1])) {
	      if (TJSONProtocol.RType[i] === null) {
	        continue;
	      }

	      ftype = TJSONProtocol.RType[i];
	      this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][i];
	    }
	  }

	  r.fname = '';
	  r.ftype = ftype;
	  r.fid = fid;

	  return r;
	};

	/** Deserializes the end of a field. */
	TJSONProtocol.prototype.readFieldEnd = function() {
	  var pos = this.rpos.pop();

	  //get back to the right place in the stack
	  while (this.rstack.length > pos) {
	    this.rstack.pop();
	  }
	};

	/**
	 * @class
	 * @name AnonReadMapBeginReturn
	 * @property {Thrift.Type} ktype - The data type of the key.
	 * @property {Thrift.Type} vtype - The data type of the value.
	 * @property {number} size - The number of elements in the map.
	 */
	/**
	 * Deserializes the beginning of a map.
	 * @returns {AnonReadMapBeginReturn}
	 */
	TJSONProtocol.prototype.readMapBegin = function() {
	  var map = this.rstack.pop();
	  var first = map.shift();
	  if (first instanceof Array) {
	    this.rstack.push(map);
	    map = first;
	    first = map.shift();
	  }

	  var r = {};
	  r.ktype = TJSONProtocol.RType[first];
	  r.vtype = TJSONProtocol.RType[map.shift()];
	  r.size = map.shift();


	  this.rpos.push(this.rstack.length);
	  this.rstack.push(map.shift());

	  return r;
	};

	/** Deserializes the end of a map. */
	TJSONProtocol.prototype.readMapEnd = function() {
	  this.readFieldEnd();
	};

	/**
	 * @class
	 * @name AnonReadColBeginReturn
	 * @property {Thrift.Type} etype - The data type of the element.
	 * @property {number} size - The number of elements in the collection.
	 */
	/**
	 * Deserializes the beginning of a list.
	 * @returns {AnonReadColBeginReturn}
	 */
	TJSONProtocol.prototype.readListBegin = function() {
	  var list = this.rstack[this.rstack.length - 1];

	  var r = {};
	  r.etype = TJSONProtocol.RType[list.shift()];
	  r.size = list.shift();

	  this.rpos.push(this.rstack.length);
	  this.rstack.push(list.shift());

	  return r;
	};

	/** Deserializes the end of a list. */
	TJSONProtocol.prototype.readListEnd = function() {
	  var pos = this.rpos.pop() - 2;
	  var st = this.rstack;
	  st.pop();
	  if (st instanceof Array && st.length > pos && st[pos].length > 0) {
	    st.push(st[pos].shift());
	  }
	};

	/**
	 * Deserializes the beginning of a set.
	 * @returns {AnonReadColBeginReturn}
	 */
	TJSONProtocol.prototype.readSetBegin = function() {
	  return this.readListBegin();
	};

	/** Deserializes the end of a set. */
	TJSONProtocol.prototype.readSetEnd = function() {
	  return this.readListEnd();
	};

	TJSONProtocol.prototype.readBool = function() {
	  return this.readValue() == '1';
	};

	TJSONProtocol.prototype.readByte = function() {
	  return this.readI32();
	};

	TJSONProtocol.prototype.readI16 = function() {
	  return this.readI32();
	};

	TJSONProtocol.prototype.readI32 = function(f) {
	  return +this.readValue();
	}

	/** Returns the next value found in the protocol buffer */
	TJSONProtocol.prototype.readValue = function(f) {
	  if (f === undefined) {
	    f = this.rstack[this.rstack.length - 1];
	  }

	  var r = {};

	  if (f instanceof Array) {
	    if (f.length === 0) {
	      r.value = undefined;
	    } else {
	      r.value = f.shift();
	    }
	  } else if (!(f instanceof Int64) && f instanceof Object) {
	    for (var i in f) {
	      if (i === null) {
	        continue;
	      }
	      this.rstack.push(f[i]);
	      delete f[i];

	      r.value = i;
	      break;
	    }
	  } else {
	    r.value = f;
	    this.rstack.pop();
	  }

	  return r.value;
	};

	TJSONProtocol.prototype.readI64 = function() {
	  var n = this.readValue()
	  if (typeof n === 'string') {
	    // Assuming no one is sending in 1.11111e+33 format
	    return Int64Util.fromDecimalString(n);
	  } else {
	    return new Int64(n);
	  }
	};

	TJSONProtocol.prototype.readDouble = function() {
	  return this.readI32();
	};

	TJSONProtocol.prototype.readBinary = function() {
	  return new Buffer(this.readValue(), 'base64');
	};

	TJSONProtocol.prototype.readString = function() {
	  return this.readValue();
	};

	/**
	 * Returns the underlying transport.
	 * @readonly
	 * @returns {Thrift.Transport} The underlying transport.
	 */
	TJSONProtocol.prototype.getTransport = function() {
	  return this.trans;
	};

	/**
	 * Method to arbitrarily skip over data
	 */
	TJSONProtocol.prototype.skip = function(type) {
	    switch (type) {
	    case Type.BOOL:
	      this.readBool();
	      break;
	    case Type.BYTE:
	      this.readByte();
	      break;
	    case Type.I16:
	      this.readI16();
	      break;
	    case Type.I32:
	      this.readI32();
	      break;
	    case Type.I64:
	      this.readI64();
	      break;
	    case Type.DOUBLE:
	      this.readDouble();
	      break;
	    case Type.STRING:
	      this.readString();
	      break;
	    case Type.STRUCT:
	      this.readStructBegin();
	      while (true) {
	        var r = this.readFieldBegin();
	        if (r.ftype === Type.STOP) {
	          break;
	        }
	        this.skip(r.ftype);
	        this.readFieldEnd();
	      }
	      this.readStructEnd();
	      break;
	    case Type.MAP:
	      var mapBegin = this.readMapBegin();
	      for (var i = 0; i < mapBegin.size; ++i) {
	        this.skip(mapBegin.ktype);
	        this.skip(mapBegin.vtype);
	      }
	      this.readMapEnd();
	      break;
	    case Type.SET:
	      var setBegin = this.readSetBegin();
	      for (var i2 = 0; i2 < setBegin.size; ++i2) {
	        this.skip(setBegin.etype);
	      }
	      this.readSetEnd();
	      break;
	    case Type.LIST:
	      var listBegin = this.readListBegin();
	      for (var i3 = 0; i3 < listBegin.size; ++i3) {
	        this.skip(listBegin.etype);
	      }
	      this.readListEnd();
	      break;
	    default:
	      throw new  Error("Invalid type: " + type);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var Int64 = __webpack_require__(41);

	var Int64Util = module.exports = {};

	var POW2_24 = Math.pow(2, 24);
	var POW2_31 = Math.pow(2, 31);
	var POW2_32 = Math.pow(2, 32);
	var POW10_11 = Math.pow(10, 11);

	Int64Util.toDecimalString = function(i64) {
	  var b = i64.buffer;
	  var o = i64.offset;
	  if ((!b[o] && !(b[o + 1] & 0xe0)) ||
	      (!~b[o] && !~(b[o + 1] & 0xe0))) {
	    // The magnitude is small enough.
	    return i64.toString();
	  } else {
	    var negative = b[o] & 0x80;
	    if (negative) {
	      // 2's complement
	      var incremented = false;
	      var buffer = new Buffer(8);
	      for (var i = 7; i >= 0; --i) {
	        buffer[i] = (~b[o + i] + (incremented ? 0 : 1)) & 0xff;
	        incremented |= b[o + i];
	      }
	      b = buffer;
	    }
	    var high2 = b[o + 1] + (b[o] << 8);
	    // Lesser 11 digits with exceeding values but is under 53 bits capacity.
	    var low = b[o + 7] + (b[o + 6] << 8) + (b[o + 5] << 16)
	        + b[o + 4] * POW2_24  // Bit shift renders 32th bit as sign, so use multiplication
	        + (b[o + 3] + (b[o + 2] << 8)) * POW2_32 + high2 * 74976710656;  // The literal is 2^48 % 10^11
	    // 12th digit and greater.
	    var high = Math.floor(low / POW10_11) + high2 * 2814;  // The literal is 2^48 / 10^11
	    // Make it exactly 11 with leading zeros.
	    low = ('00000000000' + String(low % POW10_11)).slice(-11);
	    return (negative ? '-' : '') + String(high) + low;
	  }
	};

	Int64Util.fromDecimalString = function(text) {
	  var negative = text.charAt(0) === '-';
	  if (text.length < (negative ? 17 : 16)) {
	    // The magnitude is smaller than 2^53.
	    return new Int64(+text);
	  } else if (text.length > (negative ? 20 : 19)) {
	    throw new RangeError('Too many digits for Int64: ' + text);
	  } else {
	    // Most significant (up to 5) digits
	    var high5 = +text.slice(negative ? 1 : 0, -15);
	    var low = +text.slice(-15) + high5 * 2764472320;  // The literal is 10^15 % 2^32
	    var high = Math.floor(low / POW2_32) + high5 * 232830;  // The literal is 10^15 / 2^&32
	    low = low % POW2_32;
	    if (high >= POW2_31 &&
	        !(negative && high == POW2_31 && low == 0)  // Allow minimum Int64
	       ) {
	      throw new RangeError('The magnitude is too large for Int64.');
	    }
	    if (negative) {
	      // 2's complement
	      high = ~high;
	      if (low === 0) {
	        high = (high + 1) & 0xffffffff;
	      } else {
	        low = ~low + 1;
	      }
	      high = 0x80000000 | high;
	    }
	    return new Int64(high, low);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Imported from Douglas Crockford's reference implementation with minimum modification
	 * to handle Int64.
	 *
	 * https://github.com/douglascrockford/JSON-js/blob/c98948ae1944a28e2e8ebc3717894e580aeaaa05/json_parse.js
	 *
	 * Original license header:
	 *
	 * json_parse.js
	 * 2015-05-02
	 * Public Domain.
	 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
	 */


	/*jslint for */

	/*property
	    at, b, call, charAt, f, fromCharCode, hasOwnProperty, message, n, name,
	    prototype, push, r, t, text
	*/

	var Int64 = __webpack_require__(41);
	var Int64Util = __webpack_require__(44);

	var json_parse = module.exports = (function () {
	    "use strict";

	// This is a function that can parse a JSON text, producing a JavaScript
	// data structure. It is a simple, recursive descent parser. It does not use
	// eval or regular expressions, so it can be used as a model for implementing
	// a JSON parser in other languages.

	// We are defining the function inside of another function to avoid creating
	// global variables.

	    var at,     // The index of the current character
	        ch,     // The current character
	        escapee = {
	            '"': '"',
	            '\\': '\\',
	            '/': '/',
	            b: '\b',
	            f: '\f',
	            n: '\n',
	            r: '\r',
	            t: '\t'
	        },
	        text,

	        error = function (m) {

	// Call error when something is wrong.

	            throw new SyntaxError(m);
	        },

	        next = function (c) {

	// If a c parameter is provided, verify that it matches the current character.

	            if (c && c !== ch) {
	                error("Expected '" + c + "' instead of '" + ch + "'");
	            }

	// Get the next character. When there are no more characters,
	// return the empty string.

	            ch = text.charAt(at);
	            at += 1;
	            return ch;
	        },

	        number = function () {

	// Parse a number value.

	            var number,
	                string = '';

	            if (ch === '-') {
	                string = '-';
	                next('-');
	            }
	            while (ch >= '0' && ch <= '9') {
	                string += ch;
	                next();
	            }
	            if (ch === '.') {
	                string += '.';
	                while (next() && ch >= '0' && ch <= '9') {
	                    string += ch;
	                }
	            }
	            if (ch === 'e' || ch === 'E') {
	                string += ch;
	                next();
	                if (ch === '-' || ch === '+') {
	                    string += ch;
	                    next();
	                }
	                while (ch >= '0' && ch <= '9') {
	                    string += ch;
	                    next();
	                }
	            }
	            number = +string;
	            if (!isFinite(number)) {
	                error("Bad number");
	            } else if (number >= Int64.MAX_INT || number <= Int64.MIN_INT) {
	                // Return raw string for further process in TJSONProtocol
	                return string;
	            } else {
	                return number;
	            }
	        },

	        string = function () {

	// Parse a string value.

	            var hex,
	                i,
	                string = '',
	                uffff;

	// When parsing for string values, we must look for " and \ characters.

	            if (ch === '"') {
	                while (next()) {
	                    if (ch === '"') {
	                        next();
	                        return string;
	                    }
	                    if (ch === '\\') {
	                        next();
	                        if (ch === 'u') {
	                            uffff = 0;
	                            for (i = 0; i < 4; i += 1) {
	                                hex = parseInt(next(), 16);
	                                if (!isFinite(hex)) {
	                                    break;
	                                }
	                                uffff = uffff * 16 + hex;
	                            }
	                            string += String.fromCharCode(uffff);
	                        } else if (typeof escapee[ch] === 'string') {
	                            string += escapee[ch];
	                        } else {
	                            break;
	                        }
	                    } else {
	                        string += ch;
	                    }
	                }
	            }
	            error("Bad string");
	        },

	        white = function () {

	// Skip whitespace.

	            while (ch && ch <= ' ') {
	                next();
	            }
	        },

	        word = function () {

	// true, false, or null.

	            switch (ch) {
	            case 't':
	                next('t');
	                next('r');
	                next('u');
	                next('e');
	                return true;
	            case 'f':
	                next('f');
	                next('a');
	                next('l');
	                next('s');
	                next('e');
	                return false;
	            case 'n':
	                next('n');
	                next('u');
	                next('l');
	                next('l');
	                return null;
	            }
	            error("Unexpected '" + ch + "'");
	        },

	        value,  // Place holder for the value function.

	        array = function () {

	// Parse an array value.

	            var array = [];

	            if (ch === '[') {
	                next('[');
	                white();
	                if (ch === ']') {
	                    next(']');
	                    return array;   // empty array
	                }
	                while (ch) {
	                    array.push(value());
	                    white();
	                    if (ch === ']') {
	                        next(']');
	                        return array;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad array");
	        },

	        object = function () {

	// Parse an object value.

	            var key,
	                object = {};

	            if (ch === '{') {
	                next('{');
	                white();
	                if (ch === '}') {
	                    next('}');
	                    return object;   // empty object
	                }
	                while (ch) {
	                    key = string();
	                    white();
	                    next(':');
	                    if (Object.hasOwnProperty.call(object, key)) {
	                        error('Duplicate key "' + key + '"');
	                    }
	                    object[key] = value();
	                    white();
	                    if (ch === '}') {
	                        next('}');
	                        return object;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad object");
	        };

	    value = function () {

	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.

	        white();
	        switch (ch) {
	        case '{':
	            return object();
	        case '[':
	            return array();
	        case '"':
	            return string();
	        case '-':
	            return number();
	        default:
	            return ch >= '0' && ch <= '9'
	                ? number()
	                : word();
	        }
	    };

	// Return the json_parse function. It will have access to all of the above
	// functions and variables.

	    return function (source) {
	        var result;

	        text = source;
	        at = 0;
	        ch = ' ';
	        result = value();
	        white();
	        if (ch) {
	            error("Syntax error");
	        }

	        return result;
	    };
	}());


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	module.exports = createClient;

	/**
	 * Creates a new client object for the specified Thrift service.
	 * @param {object} ServiceClient - The module containing the generated service client
	 * @param {Connection} Connection - The connection to use.
	 * @returns {object} The client object.
	 */
	function createClient(ServiceClient, connection) {
	  // TODO validate required options and throw otherwise
	  if (ServiceClient.Client) {
	    ServiceClient = ServiceClient.Client;
	  }
	  // TODO detangle these initialization calls
	  // creating "client" requires
	  //   - new service client instance
	  //
	  // New service client instance requires
	  //   - new transport instance
	  //   - protocol class reference
	  //
	  // New transport instance requires
	  //   - Buffer to use (or none)
	  //   - Callback to call on flush

	  // Wrap the write method
	  var writeCb = function(buf, seqid) {
	    connection.write(buf, seqid);
	  };
	  var transport = new connection.transport(undefined, writeCb);
	  var client = new ServiceClient(transport, connection.protocol);
	  transport.client = client;
	  connection.client = client;
	  return client;
	};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */
	var util = __webpack_require__(25);
	var Thrift = __webpack_require__(24);

	exports.Multiplexer = Multiplexer;

	function Wrapper(serviceName, protocol, connection) {

	  function MultiplexProtocol(trans, strictRead, strictWrite) {
	    protocol.call(this, trans, strictRead, strictWrite);
	  };

	  util.inherits(MultiplexProtocol, protocol);

	  MultiplexProtocol.prototype.writeMessageBegin = function(name, type, seqid) {
	    if (type == Thrift.MessageType.CALL || type == Thrift.MessageType.ONEWAY) {
	      connection.seqId2Service[seqid] = serviceName;
	      MultiplexProtocol.super_.prototype.writeMessageBegin.call(this,
	                                                                serviceName + ":" + name,
	                                                                type,
	                                                                seqid);
	    } else {
	      MultiplexProtocol.super_.prototype.writeMessageBegin.call(this, name, type, seqid);
	    }
	  };

	  return MultiplexProtocol;
	};

	function Multiplexer() {
	  this.seqid = 0;
	};

	Multiplexer.prototype.createClient = function(serviceName, ServiceClient, connection) {
	  if (ServiceClient.Client) {
	    ServiceClient = ServiceClient.Client;
	  }
	  var writeCb = function(buf, seqid) {
	    connection.write(buf,seqid);
	  };
	  var transport = new connection.transport(undefined, writeCb);
	  var protocolWrapper = new Wrapper(serviceName, connection.protocol, connection);
	  var client = new ServiceClient(transport, protocolWrapper);
	  var self = this;
	  client.new_seqid = function() {
	    self.seqid += 1;
	    return self.seqid;
	  };

	  if (typeof connection.client !== 'object') {
	    connection.client = {};
	  }
	  connection.client[serviceName] = client;

	  return client;
	};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var log = __webpack_require__(40);

	module.exports = TWebSocketTransport;

	/**
	 * Constructor Function for the WebSocket transport.
	 * @constructor
	 * @param {string} [url] - The URL to connect to.
	 * @classdesc The Apache Thrift Transport layer performs byte level I/O
	 * between RPC clients and servers. The JavaScript TWebSocketTransport object
	 * uses the WebSocket protocol. Target servers must implement WebSocket.
	 * (see: node.js example server_http.js).
	 * @example
	 *   var transport = new Thrift.TWebSocketTransport("http://localhost:8585");
	 */
	function TWebSocketTransport(url) {
	    this.__reset(url);
	};


	TWebSocketTransport.prototype.__reset = function(url) {
	  this.url = url;             //Where to connect
	  this.socket = null;         //The web socket
	  this.callbacks = [];        //Pending callbacks
	  this.send_pending = [];     //Buffers/Callback pairs waiting to be sent
	  this.send_buf = '';         //Outbound data, immutable until sent
	  this.recv_buf = '';         //Inbound data
	  this.rb_wpos = 0;           //Network write position in receive buffer
	  this.rb_rpos = 0;           //Client read position in receive buffer
	};

	/**
	 * Sends the current WS request and registers callback. The async
	 * parameter is ignored (WS flush is always async) and the callback
	 * function parameter is required.
	 * @param {object} async - Ignored.
	 * @param {object} callback - The client completion callback.
	 * @returns {undefined|string} Nothing (undefined)
	 */
	TWebSocketTransport.prototype.flush = function(async, callback) {
	  var self = this;
	  if (this.isOpen()) {
	    //Send data and register a callback to invoke the client callback
	    this.socket.send(this.send_buf);
	    this.callbacks.push((function() {
	      var clientCallback = callback;
	      return function(msg) {
	        self.setRecvBuffer(msg);
	        clientCallback();
	      };
	    }()));
	  } else {
	    //Queue the send to go out __onOpen
	    this.send_pending.push({
	      buf: this.send_buf,
	      cb:  callback
	    });
	  }
	};

	TWebSocketTransport.prototype.__onOpen = function() {
	   var self = this;
	   if (this.send_pending.length > 0) {
	      //If the user made calls before the connection was fully
	      //open, send them now
	      this.send_pending.forEach(function(elem) {
	         this.socket.send(elem.buf);
	         this.callbacks.push((function() {
	           var clientCallback = elem.cb;
	           return function(msg) {
	              self.setRecvBuffer(msg);
	              clientCallback();
	           };
	         }()));
	      });
	      this.send_pending = [];
	   }
	};

	TWebSocketTransport.prototype.__onClose = function(evt) {
	  this.__reset(this.url);
	};

	TWebSocketTransport.prototype.__onMessage = function(evt) {
	  if (this.callbacks.length) {
	    this.callbacks.shift()(evt.data);
	  }
	};

	TWebSocketTransport.prototype.__onError = function(evt) {
	  log.error('websocket: ' + evt.toString());
	  this.socket.close();
	};

	/**
	 * Sets the buffer to use when receiving server responses.
	 * @param {string} buf - The buffer to receive server responses.
	 */
	TWebSocketTransport.prototype.setRecvBuffer = function(buf) {
	  this.recv_buf = buf;
	  this.recv_buf_sz = this.recv_buf.length;
	  this.wpos = this.recv_buf.length;
	  this.rpos = 0;
	};

	/**
	 * Returns true if the transport is open
	 * @readonly
	 * @returns {boolean}
	 */
	TWebSocketTransport.prototype.isOpen = function() {
	  return this.socket && this.socket.readyState == this.socket.OPEN;
	};

	/**
	 * Opens the transport connection
	 */
	TWebSocketTransport.prototype.open = function() {
	  //If OPEN/CONNECTING/CLOSING ignore additional opens
	  if (this.socket && this.socket.readyState != this.socket.CLOSED) {
	    return;
	  }
	  //If there is no socket or the socket is closed:
	  this.socket = new WebSocket(this.url);
	  this.socket.onopen = this.__onOpen.bind(this);
	  this.socket.onmessage = this.__onMessage.bind(this);
	  this.socket.onerror = this.__onError.bind(this);
	  this.socket.onclose = this.__onClose.bind(this);
	};

	/**
	 * Closes the transport connection
	 */
	TWebSocketTransport.prototype.close = function() {
	  this.socket.close();
	};

	/**
	 * Returns the specified number of characters from the response
	 * buffer.
	 * @param {number} len - The number of characters to return.
	 * @returns {string} Characters sent by the server.
	 */
	TWebSocketTransport.prototype.read = function(len) {
	  var avail = this.wpos - this.rpos;

	  if (avail === 0) {
	    return '';
	  }

	  var give = len;

	  if (avail < len) {
	    give = avail;
	  }

	  var ret = this.read_buf.substr(this.rpos, give);
	  this.rpos += give;

	  //clear buf when complete?
	  return ret;
	};

	/**
	 * Returns the entire response buffer.
	 * @returns {string} Characters sent by the server.
	 */
	TWebSocketTransport.prototype.readAll = function() {
	  return this.recv_buf;
	};

	/**
	 * Sets the send buffer to buf.
	 * @param {string} buf - The buffer to send.
	 */
	TWebSocketTransport.prototype.write = function(buf) {
	  this.send_buf = buf;
	};

	/**
	 * Returns the send buffer.
	 * @readonly
	 * @returns {string} The send buffer.
	 */
	TWebSocketTransport.prototype.getSendBuffer = function() {
	  return this.send_buf;
	};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * Licensed to the Apache Software Foundation (ASF) under one
	 * or more contributor license agreements. See the NOTICE file
	 * distributed with this work for additional information
	 * regarding copyright ownership. The ASF licenses this file
	 * to you under the Apache License, Version 2.0 (the
	 * "License"); you may not use this file except in compliance
	 * with the License. You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	 * KIND, either express or implied. See the License for the
	 * specific language governing permissions and limitations
	 * under the License.
	 */

	var binary = __webpack_require__(36);
	var InputBufferUnderrunError = __webpack_require__(37);
	var THeaderTransport = __webpack_require__(38);

	module.exports = TFramedTransport;

	function TFramedTransport(buffer, callback) {
	  this.inBuf = buffer || new Buffer(0);
	  this.outBuffers = [];
	  this.outCount = 0;
	  this.readPos = 0;
	  this.onFlush = callback;
	};

	TFramedTransport.prototype = new THeaderTransport();

	TFramedTransport.receiver = function(callback, seqid) {
	  var residual = null;

	  return function(data) {
	    // Prepend any residual data from our previous read
	    if (residual) {
	      data = Buffer.concat([residual, data]);
	      residual = null;
	    }

	    // framed transport
	    while (data.length) {
	      if (data.length < 4) {
	        // Not enough bytes to continue, save and resume on next packet
	        residual = data;
	        return;
	      }
	      var frameSize = binary.readI32(data, 0);
	      if (data.length < 4 + frameSize) {
	        // Not enough bytes to continue, save and resume on next packet
	        residual = data;
	        return;
	      }

	      var frame = data.slice(4, 4 + frameSize);
	      residual = data.slice(4 + frameSize);

	      callback(new TFramedTransport(frame), seqid);

	      data = residual;
	      residual = null;
	    }
	  };
	};

	TFramedTransport.prototype.commitPosition = function(){},
	TFramedTransport.prototype.rollbackPosition = function(){},

	  // TODO: Implement open/close support
	TFramedTransport.prototype.isOpen = function() {
	  return true;
	};
	TFramedTransport.prototype.open = function() {};
	TFramedTransport.prototype.close =  function() {};

	  // Set the seqid of the message in the client
	  // So that callbacks can be found
	TFramedTransport.prototype.setCurrSeqId = function(seqid) {
	  this._seqid = seqid;
	};

	TFramedTransport.prototype.ensureAvailable = function(len) {
	  if (this.readPos + len > this.inBuf.length) {
	    throw new InputBufferUnderrunError();
	  }
	};

	TFramedTransport.prototype.read = function(len) { // this function will be used for each frames.
	  this.ensureAvailable(len);
	  var end = this.readPos + len;

	  if (this.inBuf.length < end) {
	    throw new Error('read(' + len + ') failed - not enough data');
	  }

	  var buf = this.inBuf.slice(this.readPos, end);
	  this.readPos = end;
	  return buf;
	};

	TFramedTransport.prototype.readByte = function() {
	  this.ensureAvailable(1);
	  return binary.readByte(this.inBuf[this.readPos++]);
	};

	TFramedTransport.prototype.readI16 = function() {
	  this.ensureAvailable(2);
	  var i16 = binary.readI16(this.inBuf, this.readPos);
	  this.readPos += 2;
	  return i16;
	};

	TFramedTransport.prototype.readI32 = function() {
	  this.ensureAvailable(4);
	  var i32 = binary.readI32(this.inBuf, this.readPos);
	  this.readPos += 4;
	  return i32;
	};

	TFramedTransport.prototype.readDouble = function() {
	  this.ensureAvailable(8);
	  var d = binary.readDouble(this.inBuf, this.readPos);
	  this.readPos += 8;
	  return d;
	};

	TFramedTransport.prototype.readString = function(len) {
	  this.ensureAvailable(len);
	  var str = this.inBuf.toString('utf8', this.readPos, this.readPos + len);
	  this.readPos += len;
	  return str;
	};

	TFramedTransport.prototype.borrow = function() {
	  return {
	    buf: this.inBuf,
	    readIndex: this.readPos,
	    writeIndex: this.inBuf.length
	  };
	};

	TFramedTransport.prototype.consume = function(bytesConsumed) {
	  this.readPos += bytesConsumed;
	};

	TFramedTransport.prototype.write = function(buf, encoding) {
	  if (typeof(buf) === "string") {
	    buf = new Buffer(buf, encoding || 'utf8');
	  }
	  this.outBuffers.push(buf);
	  this.outCount += buf.length;
	};

	TFramedTransport.prototype.flush = function() {
	  // If the seqid of the callback is available pass it to the onFlush
	  // Then remove the current seqid
	  var seqid = this._seqid;
	  this._seqid = null;

	  var out = new Buffer(this.outCount),
	      pos = 0;
	  this.outBuffers.forEach(function(buf) {
	    buf.copy(out, pos, 0);
	    pos += buf.length;
	  });

	  if (this.onFlush) {
	    // TODO: optimize this better, allocate one buffer instead of both:
	    var msg = new Buffer(out.length + 4);
	    binary.writeI32(msg, out.length);
	    out.copy(msg, 4, 0, out.length);
	    if (this.onFlush) {
	      // Passing seqid through this call to get it to the connection
	      this.onFlush(msg, seqid);
	    }
	  }

	  this.outBuffers = [];
	  this.outCount = 0;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	//
	// Autogenerated by Thrift Compiler (0.13.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";

	var thrift = __webpack_require__(23);
	var Thrift = thrift.Thrift;
	var Q = thrift.Q;
	var Int64 = __webpack_require__(41);

	var ttypes = module.exports = {};
	ttypes.TDeviceType = {
	  'CPU': 0,
	  'GPU': 1
	};
	ttypes.TDatumType = {
	  'SMALLINT': 0,
	  'INT': 1,
	  'BIGINT': 2,
	  'FLOAT': 3,
	  'DECIMAL': 4,
	  'DOUBLE': 5,
	  'STR': 6,
	  'TIME': 7,
	  'TIMESTAMP': 8,
	  'DATE': 9,
	  'BOOL': 10,
	  'INTERVAL_DAY_TIME': 11,
	  'INTERVAL_YEAR_MONTH': 12,
	  'POINT': 13,
	  'LINESTRING': 14,
	  'POLYGON': 15,
	  'MULTIPOLYGON': 16,
	  'TINYINT': 17,
	  'GEOMETRY': 18,
	  'GEOGRAPHY': 19
	};
	ttypes.TEncodingType = {
	  'NONE': 0,
	  'FIXED': 1,
	  'RL': 2,
	  'DIFF': 3,
	  'DICT': 4,
	  'SPARSE': 5,
	  'GEOINT': 6,
	  'DATE_IN_DAYS': 7
	};
	var TTypeInfo = module.exports.TTypeInfo = function (args) {
	  this.type = null;
	  this.encoding = null;
	  this.nullable = null;
	  this.is_array = null;
	  this.precision = null;
	  this.scale = null;
	  this.comp_param = null;
	  this.size = -1;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.encoding !== undefined && args.encoding !== null) {
	      this.encoding = args.encoding;
	    }
	    if (args.nullable !== undefined && args.nullable !== null) {
	      this.nullable = args.nullable;
	    }
	    if (args.is_array !== undefined && args.is_array !== null) {
	      this.is_array = args.is_array;
	    }
	    if (args.precision !== undefined && args.precision !== null) {
	      this.precision = args.precision;
	    }
	    if (args.scale !== undefined && args.scale !== null) {
	      this.scale = args.scale;
	    }
	    if (args.comp_param !== undefined && args.comp_param !== null) {
	      this.comp_param = args.comp_param;
	    }
	    if (args.size !== undefined && args.size !== null) {
	      this.size = args.size;
	    }
	  }
	};
	TTypeInfo.prototype = {};
	TTypeInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I32) {
	          this.encoding = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.nullable = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_array = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I32) {
	          this.precision = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I32) {
	          this.scale = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I32) {
	          this.comp_param = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.I32) {
	          this.size = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTypeInfo.prototype.write = function (output) {
	  output.writeStructBegin('TTypeInfo');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.encoding !== null && this.encoding !== undefined) {
	    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);
	    output.writeI32(this.encoding);
	    output.writeFieldEnd();
	  }
	  if (this.nullable !== null && this.nullable !== undefined) {
	    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);
	    output.writeBool(this.nullable);
	    output.writeFieldEnd();
	  }
	  if (this.is_array !== null && this.is_array !== undefined) {
	    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);
	    output.writeBool(this.is_array);
	    output.writeFieldEnd();
	  }
	  if (this.precision !== null && this.precision !== undefined) {
	    output.writeFieldBegin('precision', Thrift.Type.I32, 5);
	    output.writeI32(this.precision);
	    output.writeFieldEnd();
	  }
	  if (this.scale !== null && this.scale !== undefined) {
	    output.writeFieldBegin('scale', Thrift.Type.I32, 6);
	    output.writeI32(this.scale);
	    output.writeFieldEnd();
	  }
	  if (this.comp_param !== null && this.comp_param !== undefined) {
	    output.writeFieldBegin('comp_param', Thrift.Type.I32, 7);
	    output.writeI32(this.comp_param);
	    output.writeFieldEnd();
	  }
	  if (this.size !== null && this.size !== undefined) {
	    output.writeFieldBegin('size', Thrift.Type.I32, 8);
	    output.writeI32(this.size);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	//
	// Autogenerated by Thrift Compiler (0.13.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";

	var thrift = __webpack_require__(23);
	var Thrift = thrift.Thrift;
	var Q = thrift.Q;
	var Int64 = __webpack_require__(41);

	var ttypes = module.exports = {};
	ttypes.TCompletionHintType = {
	  'COLUMN': 0,
	  'TABLE': 1,
	  'VIEW': 2,
	  'SCHEMA': 3,
	  'CATALOG': 4,
	  'REPOSITORY': 5,
	  'FUNCTION': 6,
	  'KEYWORD': 7
	};
	var TCompletionHint = module.exports.TCompletionHint = function (args) {
	  this.type = null;
	  this.hints = null;
	  this.replaced = null;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.hints !== undefined && args.hints !== null) {
	      this.hints = Thrift.copyList(args.hints, [null]);
	    }
	    if (args.replaced !== undefined && args.replaced !== null) {
	      this.replaced = args.replaced;
	    }
	  }
	};
	TCompletionHint.prototype = {};
	TCompletionHint.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.hints = [];
	          var _rtmp31 = input.readListBegin();
	          var _size0 = _rtmp31.size || 0;
	          for (var _i2 = 0; _i2 < _size0; ++_i2) {
	            var elem3 = null;
	            elem3 = input.readString();
	            this.hints.push(elem3);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.replaced = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TCompletionHint.prototype.write = function (output) {
	  output.writeStructBegin('TCompletionHint');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.hints !== null && this.hints !== undefined) {
	    output.writeFieldBegin('hints', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.STRING, this.hints.length);
	    for (var iter4 in this.hints) {
	      if (this.hints.hasOwnProperty(iter4)) {
	        iter4 = this.hints[iter4];
	        output.writeString(iter4);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.replaced !== null && this.replaced !== undefined) {
	    output.writeFieldBegin('replaced', Thrift.Type.STRING, 3);
	    output.writeString(this.replaced);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	//
	// Autogenerated by Thrift Compiler (0.13.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";

	var thrift = __webpack_require__(23);
	var Thrift = thrift.Thrift;
	var Q = thrift.Q;
	var Int64 = __webpack_require__(41);

	var common_ttypes = __webpack_require__(50);

	var ttypes = module.exports = {};
	ttypes.TResultSetLayout = {
	  'GroupByPerfectHash': 0,
	  'GroupByBaselineHash': 1,
	  'Projection': 2,
	  'NonGroupedAggregate': 3
	};
	ttypes.TCountDistinctImplType = {
	  'Invalid': 0,
	  'Bitmap': 1,
	  'StdSet': 2
	};
	ttypes.TAggKind = {
	  'AVG': 0,
	  'MIN': 1,
	  'MAX': 2,
	  'SUM': 3,
	  'COUNT': 4,
	  'APPROX_COUNT_DISTINCT': 5,
	  'SAMPLE': 6,
	  'SINGLE_VALUE': 7
	};
	var TSlotSize = module.exports.TSlotSize = function (args) {
	  this.padded = null;
	  this.logical = null;
	  if (args) {
	    if (args.padded !== undefined && args.padded !== null) {
	      this.padded = args.padded;
	    }
	    if (args.logical !== undefined && args.logical !== null) {
	      this.logical = args.logical;
	    }
	  }
	};
	TSlotSize.prototype = {};
	TSlotSize.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I16) {
	          this.padded = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I16) {
	          this.logical = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TSlotSize.prototype.write = function (output) {
	  output.writeStructBegin('TSlotSize');
	  if (this.padded !== null && this.padded !== undefined) {
	    output.writeFieldBegin('padded', Thrift.Type.I16, 1);
	    output.writeI16(this.padded);
	    output.writeFieldEnd();
	  }
	  if (this.logical !== null && this.logical !== undefined) {
	    output.writeFieldBegin('logical', Thrift.Type.I16, 2);
	    output.writeI16(this.logical);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColSlotContext = module.exports.TColSlotContext = function (args) {
	  this.slot_sizes = null;
	  this.col_to_slot_map = null;
	  if (args) {
	    if (args.slot_sizes !== undefined && args.slot_sizes !== null) {
	      this.slot_sizes = Thrift.copyList(args.slot_sizes, [ttypes.TSlotSize]);
	    }
	    if (args.col_to_slot_map !== undefined && args.col_to_slot_map !== null) {
	      this.col_to_slot_map = Thrift.copyList(args.col_to_slot_map, [Thrift.copyList, null]);
	    }
	  }
	};
	TColSlotContext.prototype = {};
	TColSlotContext.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.slot_sizes = [];
	          var _rtmp31 = input.readListBegin();
	          var _size0 = _rtmp31.size || 0;
	          for (var _i2 = 0; _i2 < _size0; ++_i2) {
	            var elem3 = null;
	            elem3 = new ttypes.TSlotSize();
	            elem3.read(input);
	            this.slot_sizes.push(elem3);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.col_to_slot_map = [];
	          var _rtmp35 = input.readListBegin();
	          var _size4 = _rtmp35.size || 0;
	          for (var _i6 = 0; _i6 < _size4; ++_i6) {
	            var elem7 = null;
	            elem7 = [];
	            var _rtmp39 = input.readListBegin();
	            var _size8 = _rtmp39.size || 0;
	            for (var _i10 = 0; _i10 < _size8; ++_i10) {
	              var elem11 = null;
	              elem11 = input.readI32();
	              elem7.push(elem11);
	            }
	            input.readListEnd();
	            this.col_to_slot_map.push(elem7);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColSlotContext.prototype.write = function (output) {
	  output.writeStructBegin('TColSlotContext');
	  if (this.slot_sizes !== null && this.slot_sizes !== undefined) {
	    output.writeFieldBegin('slot_sizes', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.slot_sizes.length);
	    for (var iter12 in this.slot_sizes) {
	      if (this.slot_sizes.hasOwnProperty(iter12)) {
	        iter12 = this.slot_sizes[iter12];
	        iter12.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.col_to_slot_map !== null && this.col_to_slot_map !== undefined) {
	    output.writeFieldBegin('col_to_slot_map', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.LIST, this.col_to_slot_map.length);
	    for (var iter13 in this.col_to_slot_map) {
	      if (this.col_to_slot_map.hasOwnProperty(iter13)) {
	        iter13 = this.col_to_slot_map[iter13];
	        output.writeListBegin(Thrift.Type.I32, iter13.length);
	        for (var iter14 in iter13) {
	          if (iter13.hasOwnProperty(iter14)) {
	            iter14 = iter13[iter14];
	            output.writeI32(iter14);
	          }
	        }
	        output.writeListEnd();
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TCountDistinctDescriptor = module.exports.TCountDistinctDescriptor = function (args) {
	  this.impl_type = null;
	  this.min_val = null;
	  this.bitmap_sz_bits = null;
	  this.approximate = null;
	  this.device_type = null;
	  this.sub_bitmap_count = null;
	  if (args) {
	    if (args.impl_type !== undefined && args.impl_type !== null) {
	      this.impl_type = args.impl_type;
	    }
	    if (args.min_val !== undefined && args.min_val !== null) {
	      this.min_val = args.min_val;
	    }
	    if (args.bitmap_sz_bits !== undefined && args.bitmap_sz_bits !== null) {
	      this.bitmap_sz_bits = args.bitmap_sz_bits;
	    }
	    if (args.approximate !== undefined && args.approximate !== null) {
	      this.approximate = args.approximate;
	    }
	    if (args.device_type !== undefined && args.device_type !== null) {
	      this.device_type = args.device_type;
	    }
	    if (args.sub_bitmap_count !== undefined && args.sub_bitmap_count !== null) {
	      this.sub_bitmap_count = args.sub_bitmap_count;
	    }
	  }
	};
	TCountDistinctDescriptor.prototype = {};
	TCountDistinctDescriptor.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.impl_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.min_val = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.bitmap_sz_bits = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.approximate = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I32) {
	          this.device_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.sub_bitmap_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TCountDistinctDescriptor.prototype.write = function (output) {
	  output.writeStructBegin('TCountDistinctDescriptor');
	  if (this.impl_type !== null && this.impl_type !== undefined) {
	    output.writeFieldBegin('impl_type', Thrift.Type.I32, 1);
	    output.writeI32(this.impl_type);
	    output.writeFieldEnd();
	  }
	  if (this.min_val !== null && this.min_val !== undefined) {
	    output.writeFieldBegin('min_val', Thrift.Type.I64, 2);
	    output.writeI64(this.min_val);
	    output.writeFieldEnd();
	  }
	  if (this.bitmap_sz_bits !== null && this.bitmap_sz_bits !== undefined) {
	    output.writeFieldBegin('bitmap_sz_bits', Thrift.Type.I64, 3);
	    output.writeI64(this.bitmap_sz_bits);
	    output.writeFieldEnd();
	  }
	  if (this.approximate !== null && this.approximate !== undefined) {
	    output.writeFieldBegin('approximate', Thrift.Type.BOOL, 4);
	    output.writeBool(this.approximate);
	    output.writeFieldEnd();
	  }
	  if (this.device_type !== null && this.device_type !== undefined) {
	    output.writeFieldBegin('device_type', Thrift.Type.I32, 5);
	    output.writeI32(this.device_type);
	    output.writeFieldEnd();
	  }
	  if (this.sub_bitmap_count !== null && this.sub_bitmap_count !== undefined) {
	    output.writeFieldBegin('sub_bitmap_count', Thrift.Type.I64, 6);
	    output.writeI64(this.sub_bitmap_count);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TResultSetBufferDescriptor = module.exports.TResultSetBufferDescriptor = function (args) {
	  this.layout = null;
	  this.keyless = null;
	  this.entry_count = null;
	  this.idx_target_as_key = null;
	  this.min_val = null;
	  this.max_val = null;
	  this.bucket = null;
	  this.group_col_widths = null;
	  this.key_bytewidth = null;
	  this.col_slot_context = null;
	  this.target_groupby_indices = null;
	  this.count_distinct_descriptors = null;
	  this.force_4byte_float = null;
	  if (args) {
	    if (args.layout !== undefined && args.layout !== null) {
	      this.layout = args.layout;
	    }
	    if (args.keyless !== undefined && args.keyless !== null) {
	      this.keyless = args.keyless;
	    }
	    if (args.entry_count !== undefined && args.entry_count !== null) {
	      this.entry_count = args.entry_count;
	    }
	    if (args.idx_target_as_key !== undefined && args.idx_target_as_key !== null) {
	      this.idx_target_as_key = args.idx_target_as_key;
	    }
	    if (args.min_val !== undefined && args.min_val !== null) {
	      this.min_val = args.min_val;
	    }
	    if (args.max_val !== undefined && args.max_val !== null) {
	      this.max_val = args.max_val;
	    }
	    if (args.bucket !== undefined && args.bucket !== null) {
	      this.bucket = args.bucket;
	    }
	    if (args.group_col_widths !== undefined && args.group_col_widths !== null) {
	      this.group_col_widths = Thrift.copyList(args.group_col_widths, [null]);
	    }
	    if (args.key_bytewidth !== undefined && args.key_bytewidth !== null) {
	      this.key_bytewidth = args.key_bytewidth;
	    }
	    if (args.col_slot_context !== undefined && args.col_slot_context !== null) {
	      this.col_slot_context = new ttypes.TColSlotContext(args.col_slot_context);
	    }
	    if (args.target_groupby_indices !== undefined && args.target_groupby_indices !== null) {
	      this.target_groupby_indices = Thrift.copyList(args.target_groupby_indices, [null]);
	    }
	    if (args.count_distinct_descriptors !== undefined && args.count_distinct_descriptors !== null) {
	      this.count_distinct_descriptors = Thrift.copyList(args.count_distinct_descriptors, [ttypes.TCountDistinctDescriptor]);
	    }
	    if (args.force_4byte_float !== undefined && args.force_4byte_float !== null) {
	      this.force_4byte_float = args.force_4byte_float;
	    }
	  }
	};
	TResultSetBufferDescriptor.prototype = {};
	TResultSetBufferDescriptor.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.layout = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.keyless = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.entry_count = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I32) {
	          this.idx_target_as_key = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.min_val = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.max_val = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I64) {
	          this.bucket = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.LIST) {
	          this.group_col_widths = [];
	          var _rtmp316 = input.readListBegin();
	          var _size15 = _rtmp316.size || 0;
	          for (var _i17 = 0; _i17 < _size15; ++_i17) {
	            var elem18 = null;
	            elem18 = input.readI16();
	            this.group_col_widths.push(elem18);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 9:
	        if (ftype == Thrift.Type.I16) {
	          this.key_bytewidth = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 10:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.col_slot_context = new ttypes.TColSlotContext();
	          this.col_slot_context.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 11:
	        if (ftype == Thrift.Type.LIST) {
	          this.target_groupby_indices = [];
	          var _rtmp320 = input.readListBegin();
	          var _size19 = _rtmp320.size || 0;
	          for (var _i21 = 0; _i21 < _size19; ++_i21) {
	            var elem22 = null;
	            elem22 = input.readI32();
	            this.target_groupby_indices.push(elem22);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 12:
	        if (ftype == Thrift.Type.LIST) {
	          this.count_distinct_descriptors = [];
	          var _rtmp324 = input.readListBegin();
	          var _size23 = _rtmp324.size || 0;
	          for (var _i25 = 0; _i25 < _size23; ++_i25) {
	            var elem26 = null;
	            elem26 = new ttypes.TCountDistinctDescriptor();
	            elem26.read(input);
	            this.count_distinct_descriptors.push(elem26);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 13:
	        if (ftype == Thrift.Type.BOOL) {
	          this.force_4byte_float = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TResultSetBufferDescriptor.prototype.write = function (output) {
	  output.writeStructBegin('TResultSetBufferDescriptor');
	  if (this.layout !== null && this.layout !== undefined) {
	    output.writeFieldBegin('layout', Thrift.Type.I32, 1);
	    output.writeI32(this.layout);
	    output.writeFieldEnd();
	  }
	  if (this.keyless !== null && this.keyless !== undefined) {
	    output.writeFieldBegin('keyless', Thrift.Type.BOOL, 2);
	    output.writeBool(this.keyless);
	    output.writeFieldEnd();
	  }
	  if (this.entry_count !== null && this.entry_count !== undefined) {
	    output.writeFieldBegin('entry_count', Thrift.Type.I32, 3);
	    output.writeI32(this.entry_count);
	    output.writeFieldEnd();
	  }
	  if (this.idx_target_as_key !== null && this.idx_target_as_key !== undefined) {
	    output.writeFieldBegin('idx_target_as_key', Thrift.Type.I32, 4);
	    output.writeI32(this.idx_target_as_key);
	    output.writeFieldEnd();
	  }
	  if (this.min_val !== null && this.min_val !== undefined) {
	    output.writeFieldBegin('min_val', Thrift.Type.I64, 5);
	    output.writeI64(this.min_val);
	    output.writeFieldEnd();
	  }
	  if (this.max_val !== null && this.max_val !== undefined) {
	    output.writeFieldBegin('max_val', Thrift.Type.I64, 6);
	    output.writeI64(this.max_val);
	    output.writeFieldEnd();
	  }
	  if (this.bucket !== null && this.bucket !== undefined) {
	    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);
	    output.writeI64(this.bucket);
	    output.writeFieldEnd();
	  }
	  if (this.group_col_widths !== null && this.group_col_widths !== undefined) {
	    output.writeFieldBegin('group_col_widths', Thrift.Type.LIST, 8);
	    output.writeListBegin(Thrift.Type.I16, this.group_col_widths.length);
	    for (var iter27 in this.group_col_widths) {
	      if (this.group_col_widths.hasOwnProperty(iter27)) {
	        iter27 = this.group_col_widths[iter27];
	        output.writeI16(iter27);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.key_bytewidth !== null && this.key_bytewidth !== undefined) {
	    output.writeFieldBegin('key_bytewidth', Thrift.Type.I16, 9);
	    output.writeI16(this.key_bytewidth);
	    output.writeFieldEnd();
	  }
	  if (this.col_slot_context !== null && this.col_slot_context !== undefined) {
	    output.writeFieldBegin('col_slot_context', Thrift.Type.STRUCT, 10);
	    this.col_slot_context.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.target_groupby_indices !== null && this.target_groupby_indices !== undefined) {
	    output.writeFieldBegin('target_groupby_indices', Thrift.Type.LIST, 11);
	    output.writeListBegin(Thrift.Type.I32, this.target_groupby_indices.length);
	    for (var iter28 in this.target_groupby_indices) {
	      if (this.target_groupby_indices.hasOwnProperty(iter28)) {
	        iter28 = this.target_groupby_indices[iter28];
	        output.writeI32(iter28);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.count_distinct_descriptors !== null && this.count_distinct_descriptors !== undefined) {
	    output.writeFieldBegin('count_distinct_descriptors', Thrift.Type.LIST, 12);
	    output.writeListBegin(Thrift.Type.STRUCT, this.count_distinct_descriptors.length);
	    for (var iter29 in this.count_distinct_descriptors) {
	      if (this.count_distinct_descriptors.hasOwnProperty(iter29)) {
	        iter29 = this.count_distinct_descriptors[iter29];
	        iter29.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.force_4byte_float !== null && this.force_4byte_float !== undefined) {
	    output.writeFieldBegin('force_4byte_float', Thrift.Type.BOOL, 13);
	    output.writeBool(this.force_4byte_float);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTargetInfo = module.exports.TTargetInfo = function (args) {
	  this.is_agg = null;
	  this.kind = null;
	  this.type = null;
	  this.arg_type = null;
	  this.skip_nulls = null;
	  this.is_distinct = null;
	  if (args) {
	    if (args.is_agg !== undefined && args.is_agg !== null) {
	      this.is_agg = args.is_agg;
	    }
	    if (args.kind !== undefined && args.kind !== null) {
	      this.kind = args.kind;
	    }
	    if (args.type !== undefined && args.type !== null) {
	      this.type = new common_ttypes.TTypeInfo(args.type);
	    }
	    if (args.arg_type !== undefined && args.arg_type !== null) {
	      this.arg_type = new common_ttypes.TTypeInfo(args.arg_type);
	    }
	    if (args.skip_nulls !== undefined && args.skip_nulls !== null) {
	      this.skip_nulls = args.skip_nulls;
	    }
	    if (args.is_distinct !== undefined && args.is_distinct !== null) {
	      this.is_distinct = args.is_distinct;
	    }
	  }
	};
	TTargetInfo.prototype = {};
	TTargetInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_agg = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.kind = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.type = new common_ttypes.TTypeInfo();
	          this.type.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.arg_type = new common_ttypes.TTypeInfo();
	          this.arg_type.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.skip_nulls = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_distinct = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTargetInfo.prototype.write = function (output) {
	  output.writeStructBegin('TTargetInfo');
	  if (this.is_agg !== null && this.is_agg !== undefined) {
	    output.writeFieldBegin('is_agg', Thrift.Type.BOOL, 1);
	    output.writeBool(this.is_agg);
	    output.writeFieldEnd();
	  }
	  if (this.kind !== null && this.kind !== undefined) {
	    output.writeFieldBegin('kind', Thrift.Type.I32, 2);
	    output.writeI32(this.kind);
	    output.writeFieldEnd();
	  }
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.STRUCT, 3);
	    this.type.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.arg_type !== null && this.arg_type !== undefined) {
	    output.writeFieldBegin('arg_type', Thrift.Type.STRUCT, 4);
	    this.arg_type.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.skip_nulls !== null && this.skip_nulls !== undefined) {
	    output.writeFieldBegin('skip_nulls', Thrift.Type.BOOL, 5);
	    output.writeBool(this.skip_nulls);
	    output.writeFieldEnd();
	  }
	  if (this.is_distinct !== null && this.is_distinct !== undefined) {
	    output.writeFieldBegin('is_distinct', Thrift.Type.BOOL, 6);
	    output.writeBool(this.is_distinct);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TCountDistinctSetStorage = module.exports.TCountDistinctSetStorage = function (args) {
	  this.bitmap = null;
	  this.sparse_set = null;
	  if (args) {
	    if (args.bitmap !== undefined && args.bitmap !== null) {
	      this.bitmap = args.bitmap;
	    }
	    if (args.sparse_set !== undefined && args.sparse_set !== null) {
	      this.sparse_set = Thrift.copyList(args.sparse_set, [null]);
	    }
	  }
	};
	TCountDistinctSetStorage.prototype = {};
	TCountDistinctSetStorage.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.bitmap = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.SET) {
	          this.sparse_set = [];
	          var _rtmp331 = input.readSetBegin();
	          var _size30 = _rtmp331.size || 0;
	          for (var _i32 = 0; _i32 < _size30; ++_i32) {
	            var elem33 = null;
	            elem33 = input.readI64();
	            this.sparse_set.push(elem33);
	          }
	          input.readSetEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TCountDistinctSetStorage.prototype.write = function (output) {
	  output.writeStructBegin('TCountDistinctSetStorage');
	  if (this.bitmap !== null && this.bitmap !== undefined) {
	    output.writeFieldBegin('bitmap', Thrift.Type.STRING, 1);
	    output.writeBinary(this.bitmap);
	    output.writeFieldEnd();
	  }
	  if (this.sparse_set !== null && this.sparse_set !== undefined) {
	    output.writeFieldBegin('sparse_set', Thrift.Type.SET, 2);
	    output.writeSetBegin(Thrift.Type.I64, this.sparse_set.length);
	    for (var iter34 in this.sparse_set) {
	      if (this.sparse_set.hasOwnProperty(iter34)) {
	        iter34 = this.sparse_set[iter34];
	        output.writeI64(iter34);
	      }
	    }
	    output.writeSetEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TCountDistinctSet = module.exports.TCountDistinctSet = function (args) {
	  this.type = null;
	  this.storage = null;
	  this.remote_ptr = null;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.storage !== undefined && args.storage !== null) {
	      this.storage = new ttypes.TCountDistinctSetStorage(args.storage);
	    }
	    if (args.remote_ptr !== undefined && args.remote_ptr !== null) {
	      this.remote_ptr = args.remote_ptr;
	    }
	  }
	};
	TCountDistinctSet.prototype = {};
	TCountDistinctSet.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.storage = new ttypes.TCountDistinctSetStorage();
	          this.storage.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.remote_ptr = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TCountDistinctSet.prototype.write = function (output) {
	  output.writeStructBegin('TCountDistinctSet');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.storage !== null && this.storage !== undefined) {
	    output.writeFieldBegin('storage', Thrift.Type.STRUCT, 2);
	    this.storage.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.remote_ptr !== null && this.remote_ptr !== undefined) {
	    output.writeFieldBegin('remote_ptr', Thrift.Type.I64, 3);
	    output.writeI64(this.remote_ptr);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TSerializedRows = module.exports.TSerializedRows = function (args) {
	  this.buffers = null;
	  this.buffer_lengths = null;
	  this.buffers_total_size = null;
	  this.total_compression_time_ms = null;
	  this.descriptor = null;
	  this.targets = null;
	  this.target_init_vals = null;
	  this.varlen_buffer = null;
	  this.count_distinct_sets = null;
	  this.explanation = null;
	  if (args) {
	    if (args.buffers !== undefined && args.buffers !== null) {
	      this.buffers = Thrift.copyList(args.buffers, [null]);
	    }
	    if (args.buffer_lengths !== undefined && args.buffer_lengths !== null) {
	      this.buffer_lengths = Thrift.copyList(args.buffer_lengths, [null]);
	    }
	    if (args.buffers_total_size !== undefined && args.buffers_total_size !== null) {
	      this.buffers_total_size = args.buffers_total_size;
	    }
	    if (args.total_compression_time_ms !== undefined && args.total_compression_time_ms !== null) {
	      this.total_compression_time_ms = args.total_compression_time_ms;
	    }
	    if (args.descriptor !== undefined && args.descriptor !== null) {
	      this.descriptor = new ttypes.TResultSetBufferDescriptor(args.descriptor);
	    }
	    if (args.targets !== undefined && args.targets !== null) {
	      this.targets = Thrift.copyList(args.targets, [ttypes.TTargetInfo]);
	    }
	    if (args.target_init_vals !== undefined && args.target_init_vals !== null) {
	      this.target_init_vals = Thrift.copyList(args.target_init_vals, [null]);
	    }
	    if (args.varlen_buffer !== undefined && args.varlen_buffer !== null) {
	      this.varlen_buffer = Thrift.copyList(args.varlen_buffer, [null]);
	    }
	    if (args.count_distinct_sets !== undefined && args.count_distinct_sets !== null) {
	      this.count_distinct_sets = Thrift.copyList(args.count_distinct_sets, [ttypes.TCountDistinctSet]);
	    }
	    if (args.explanation !== undefined && args.explanation !== null) {
	      this.explanation = args.explanation;
	    }
	  }
	};
	TSerializedRows.prototype = {};
	TSerializedRows.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.buffers = [];
	          var _rtmp336 = input.readListBegin();
	          var _size35 = _rtmp336.size || 0;
	          for (var _i37 = 0; _i37 < _size35; ++_i37) {
	            var elem38 = null;
	            elem38 = input.readBinary();
	            this.buffers.push(elem38);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.buffer_lengths = [];
	          var _rtmp340 = input.readListBegin();
	          var _size39 = _rtmp340.size || 0;
	          for (var _i41 = 0; _i41 < _size39; ++_i41) {
	            var elem42 = null;
	            elem42 = input.readI64();
	            this.buffer_lengths.push(elem42);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.buffers_total_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I32) {
	          this.total_compression_time_ms = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.descriptor = new ttypes.TResultSetBufferDescriptor();
	          this.descriptor.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.LIST) {
	          this.targets = [];
	          var _rtmp344 = input.readListBegin();
	          var _size43 = _rtmp344.size || 0;
	          for (var _i45 = 0; _i45 < _size43; ++_i45) {
	            var elem46 = null;
	            elem46 = new ttypes.TTargetInfo();
	            elem46.read(input);
	            this.targets.push(elem46);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.LIST) {
	          this.target_init_vals = [];
	          var _rtmp348 = input.readListBegin();
	          var _size47 = _rtmp348.size || 0;
	          for (var _i49 = 0; _i49 < _size47; ++_i49) {
	            var elem50 = null;
	            elem50 = input.readI64();
	            this.target_init_vals.push(elem50);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.LIST) {
	          this.varlen_buffer = [];
	          var _rtmp352 = input.readListBegin();
	          var _size51 = _rtmp352.size || 0;
	          for (var _i53 = 0; _i53 < _size51; ++_i53) {
	            var elem54 = null;
	            elem54 = input.readBinary();
	            this.varlen_buffer.push(elem54);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 9:
	        if (ftype == Thrift.Type.LIST) {
	          this.count_distinct_sets = [];
	          var _rtmp356 = input.readListBegin();
	          var _size55 = _rtmp356.size || 0;
	          for (var _i57 = 0; _i57 < _size55; ++_i57) {
	            var elem58 = null;
	            elem58 = new ttypes.TCountDistinctSet();
	            elem58.read(input);
	            this.count_distinct_sets.push(elem58);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 10:
	        if (ftype == Thrift.Type.STRING) {
	          this.explanation = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TSerializedRows.prototype.write = function (output) {
	  output.writeStructBegin('TSerializedRows');
	  if (this.buffers !== null && this.buffers !== undefined) {
	    output.writeFieldBegin('buffers', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRING, this.buffers.length);
	    for (var iter59 in this.buffers) {
	      if (this.buffers.hasOwnProperty(iter59)) {
	        iter59 = this.buffers[iter59];
	        output.writeBinary(iter59);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.buffer_lengths !== null && this.buffer_lengths !== undefined) {
	    output.writeFieldBegin('buffer_lengths', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.I64, this.buffer_lengths.length);
	    for (var iter60 in this.buffer_lengths) {
	      if (this.buffer_lengths.hasOwnProperty(iter60)) {
	        iter60 = this.buffer_lengths[iter60];
	        output.writeI64(iter60);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.buffers_total_size !== null && this.buffers_total_size !== undefined) {
	    output.writeFieldBegin('buffers_total_size', Thrift.Type.I64, 3);
	    output.writeI64(this.buffers_total_size);
	    output.writeFieldEnd();
	  }
	  if (this.total_compression_time_ms !== null && this.total_compression_time_ms !== undefined) {
	    output.writeFieldBegin('total_compression_time_ms', Thrift.Type.I32, 4);
	    output.writeI32(this.total_compression_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.descriptor !== null && this.descriptor !== undefined) {
	    output.writeFieldBegin('descriptor', Thrift.Type.STRUCT, 5);
	    this.descriptor.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.targets !== null && this.targets !== undefined) {
	    output.writeFieldBegin('targets', Thrift.Type.LIST, 6);
	    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);
	    for (var iter61 in this.targets) {
	      if (this.targets.hasOwnProperty(iter61)) {
	        iter61 = this.targets[iter61];
	        iter61.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.target_init_vals !== null && this.target_init_vals !== undefined) {
	    output.writeFieldBegin('target_init_vals', Thrift.Type.LIST, 7);
	    output.writeListBegin(Thrift.Type.I64, this.target_init_vals.length);
	    for (var iter62 in this.target_init_vals) {
	      if (this.target_init_vals.hasOwnProperty(iter62)) {
	        iter62 = this.target_init_vals[iter62];
	        output.writeI64(iter62);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.varlen_buffer !== null && this.varlen_buffer !== undefined) {
	    output.writeFieldBegin('varlen_buffer', Thrift.Type.LIST, 8);
	    output.writeListBegin(Thrift.Type.STRING, this.varlen_buffer.length);
	    for (var iter63 in this.varlen_buffer) {
	      if (this.varlen_buffer.hasOwnProperty(iter63)) {
	        iter63 = this.varlen_buffer[iter63];
	        output.writeBinary(iter63);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.count_distinct_sets !== null && this.count_distinct_sets !== undefined) {
	    output.writeFieldBegin('count_distinct_sets', Thrift.Type.LIST, 9);
	    output.writeListBegin(Thrift.Type.STRUCT, this.count_distinct_sets.length);
	    for (var iter64 in this.count_distinct_sets) {
	      if (this.count_distinct_sets.hasOwnProperty(iter64)) {
	        iter64 = this.count_distinct_sets[iter64];
	        iter64.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.explanation !== null && this.explanation !== undefined) {
	    output.writeFieldBegin('explanation', Thrift.Type.STRING, 10);
	    output.writeString(this.explanation);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	//
	// Autogenerated by Thrift Compiler (0.13.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";

	var thrift = __webpack_require__(23);
	var Thrift = thrift.Thrift;
	var Q = thrift.Q;
	var Int64 = __webpack_require__(41);

	var ttypes = module.exports = {};
	ttypes.TExtArgumentType = {
	  'Int8': 0,
	  'Int16': 1,
	  'Int32': 2,
	  'Int64': 3,
	  'Float': 4,
	  'Double': 5,
	  'Void': 6,
	  'PInt8': 7,
	  'PInt16': 8,
	  'PInt32': 9,
	  'PInt64': 10,
	  'PFloat': 11,
	  'PDouble': 12,
	  'PBool': 13,
	  'Bool': 14,
	  'ArrayInt8': 15,
	  'ArrayInt16': 16,
	  'ArrayInt32': 17,
	  'ArrayInt64': 18,
	  'ArrayFloat': 19,
	  'ArrayDouble': 20,
	  'ArrayBool': 21,
	  'GeoPoint': 22,
	  'GeoLineString': 23,
	  'Cursor': 24,
	  'GeoPolygon': 25,
	  'GeoMultiPolygon': 26,
	  'ColumnInt8': 27,
	  'ColumnInt16': 28,
	  'ColumnInt32': 29,
	  'ColumnInt64': 30,
	  'ColumnFloat': 31,
	  'ColumnDouble': 32,
	  'ColumnBool': 33
	};
	ttypes.TOutputBufferSizeType = {
	  'kConstant': 0,
	  'kUserSpecifiedConstantParameter': 1,
	  'kUserSpecifiedRowMultiplier': 2
	};
	var TUserDefinedFunction = module.exports.TUserDefinedFunction = function (args) {
	  this.name = null;
	  this.argTypes = null;
	  this.retType = null;
	  if (args) {
	    if (args.name !== undefined && args.name !== null) {
	      this.name = args.name;
	    }
	    if (args.argTypes !== undefined && args.argTypes !== null) {
	      this.argTypes = Thrift.copyList(args.argTypes, [null]);
	    }
	    if (args.retType !== undefined && args.retType !== null) {
	      this.retType = args.retType;
	    }
	  }
	};
	TUserDefinedFunction.prototype = {};
	TUserDefinedFunction.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.argTypes = [];
	          var _rtmp31 = input.readListBegin();
	          var _size0 = _rtmp31.size || 0;
	          for (var _i2 = 0; _i2 < _size0; ++_i2) {
	            var elem3 = null;
	            elem3 = input.readI32();
	            this.argTypes.push(elem3);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.retType = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TUserDefinedFunction.prototype.write = function (output) {
	  output.writeStructBegin('TUserDefinedFunction');
	  if (this.name !== null && this.name !== undefined) {
	    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
	    output.writeString(this.name);
	    output.writeFieldEnd();
	  }
	  if (this.argTypes !== null && this.argTypes !== undefined) {
	    output.writeFieldBegin('argTypes', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.I32, this.argTypes.length);
	    for (var iter4 in this.argTypes) {
	      if (this.argTypes.hasOwnProperty(iter4)) {
	        iter4 = this.argTypes[iter4];
	        output.writeI32(iter4);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.retType !== null && this.retType !== undefined) {
	    output.writeFieldBegin('retType', Thrift.Type.I32, 3);
	    output.writeI32(this.retType);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TUserDefinedTableFunction = module.exports.TUserDefinedTableFunction = function (args) {
	  this.name = null;
	  this.sizerType = null;
	  this.sizerArgPos = null;
	  this.inputArgTypes = null;
	  this.outputArgTypes = null;
	  this.sqlArgTypes = null;
	  if (args) {
	    if (args.name !== undefined && args.name !== null) {
	      this.name = args.name;
	    }
	    if (args.sizerType !== undefined && args.sizerType !== null) {
	      this.sizerType = args.sizerType;
	    }
	    if (args.sizerArgPos !== undefined && args.sizerArgPos !== null) {
	      this.sizerArgPos = args.sizerArgPos;
	    }
	    if (args.inputArgTypes !== undefined && args.inputArgTypes !== null) {
	      this.inputArgTypes = Thrift.copyList(args.inputArgTypes, [null]);
	    }
	    if (args.outputArgTypes !== undefined && args.outputArgTypes !== null) {
	      this.outputArgTypes = Thrift.copyList(args.outputArgTypes, [null]);
	    }
	    if (args.sqlArgTypes !== undefined && args.sqlArgTypes !== null) {
	      this.sqlArgTypes = Thrift.copyList(args.sqlArgTypes, [null]);
	    }
	  }
	};
	TUserDefinedTableFunction.prototype = {};
	TUserDefinedTableFunction.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.sizerType = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.sizerArgPos = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          this.inputArgTypes = [];
	          var _rtmp36 = input.readListBegin();
	          var _size5 = _rtmp36.size || 0;
	          for (var _i7 = 0; _i7 < _size5; ++_i7) {
	            var elem8 = null;
	            elem8 = input.readI32();
	            this.inputArgTypes.push(elem8);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.LIST) {
	          this.outputArgTypes = [];
	          var _rtmp310 = input.readListBegin();
	          var _size9 = _rtmp310.size || 0;
	          for (var _i11 = 0; _i11 < _size9; ++_i11) {
	            var elem12 = null;
	            elem12 = input.readI32();
	            this.outputArgTypes.push(elem12);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.LIST) {
	          this.sqlArgTypes = [];
	          var _rtmp314 = input.readListBegin();
	          var _size13 = _rtmp314.size || 0;
	          for (var _i15 = 0; _i15 < _size13; ++_i15) {
	            var elem16 = null;
	            elem16 = input.readI32();
	            this.sqlArgTypes.push(elem16);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TUserDefinedTableFunction.prototype.write = function (output) {
	  output.writeStructBegin('TUserDefinedTableFunction');
	  if (this.name !== null && this.name !== undefined) {
	    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
	    output.writeString(this.name);
	    output.writeFieldEnd();
	  }
	  if (this.sizerType !== null && this.sizerType !== undefined) {
	    output.writeFieldBegin('sizerType', Thrift.Type.I32, 2);
	    output.writeI32(this.sizerType);
	    output.writeFieldEnd();
	  }
	  if (this.sizerArgPos !== null && this.sizerArgPos !== undefined) {
	    output.writeFieldBegin('sizerArgPos', Thrift.Type.I32, 3);
	    output.writeI32(this.sizerArgPos);
	    output.writeFieldEnd();
	  }
	  if (this.inputArgTypes !== null && this.inputArgTypes !== undefined) {
	    output.writeFieldBegin('inputArgTypes', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.I32, this.inputArgTypes.length);
	    for (var iter17 in this.inputArgTypes) {
	      if (this.inputArgTypes.hasOwnProperty(iter17)) {
	        iter17 = this.inputArgTypes[iter17];
	        output.writeI32(iter17);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.outputArgTypes !== null && this.outputArgTypes !== undefined) {
	    output.writeFieldBegin('outputArgTypes', Thrift.Type.LIST, 5);
	    output.writeListBegin(Thrift.Type.I32, this.outputArgTypes.length);
	    for (var iter18 in this.outputArgTypes) {
	      if (this.outputArgTypes.hasOwnProperty(iter18)) {
	        iter18 = this.outputArgTypes[iter18];
	        output.writeI32(iter18);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.sqlArgTypes !== null && this.sqlArgTypes !== undefined) {
	    output.writeFieldBegin('sqlArgTypes', Thrift.Type.LIST, 6);
	    output.writeListBegin(Thrift.Type.I32, this.sqlArgTypes.length);
	    for (var iter19 in this.sqlArgTypes) {
	      if (this.sqlArgTypes.hasOwnProperty(iter19)) {
	        iter19 = this.sqlArgTypes[iter19];
	        output.writeI32(iter19);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	//
	// Autogenerated by Thrift Compiler (0.13.0)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	"use strict";

	var thrift = __webpack_require__(23);
	var Thrift = thrift.Thrift;
	var Q = thrift.Q;
	var Int64 = __webpack_require__(41);

	var common_ttypes = __webpack_require__(50);
	var completion_hints_ttypes = __webpack_require__(51);
	var serialized_result_set_ttypes = __webpack_require__(52);
	var extension_functions_ttypes = __webpack_require__(53);

	var ttypes = module.exports = {};
	ttypes.TExecuteMode = {
	  'GPU': 1,
	  'CPU': 2
	};
	ttypes.TFileType = {
	  'DELIMITED': 0,
	  'POLYGON': 1,
	  'PARQUET': 2
	};
	ttypes.TPartitionDetail = {
	  'DEFAULT': 0,
	  'REPLICATED': 1,
	  'SHARDED': 2,
	  'OTHER': 3
	};
	ttypes.TGeoFileLayerContents = {
	  'EMPTY': 0,
	  'GEO': 1,
	  'NON_GEO': 2,
	  'UNSUPPORTED_GEO': 3
	};
	ttypes.TImportHeaderRow = {
	  'AUTODETECT': 0,
	  'NO_HEADER': 1,
	  'HAS_HEADER': 2
	};
	ttypes.TRole = {
	  'SERVER': 0,
	  'AGGREGATOR': 1,
	  'LEAF': 2,
	  'STRING_DICTIONARY': 3
	};
	ttypes.TMergeType = {
	  'UNION': 0,
	  'REDUCE': 1
	};
	ttypes.TQueryType = {
	  'UNKNOWN': 0,
	  'READ': 1,
	  'WRITE': 2,
	  'SCHEMA_READ': 3,
	  'SCHEMA_WRITE': 4
	};
	ttypes.TArrowTransport = {
	  'SHARED_MEMORY': 0,
	  'WIRE': 1
	};
	ttypes.TExpressionRangeType = {
	  'INVALID': 0,
	  'INTEGER': 1,
	  'FLOAT': 2,
	  'DOUBLE': 3
	};
	ttypes.TDBObjectType = {
	  'AbstractDBObjectType': 0,
	  'DatabaseDBObjectType': 1,
	  'TableDBObjectType': 2,
	  'DashboardDBObjectType': 3,
	  'ViewDBObjectType': 4
	};
	var TDatumVal = module.exports.TDatumVal = function (args) {
	  this.int_val = null;
	  this.real_val = null;
	  this.str_val = null;
	  this.arr_val = null;
	  if (args) {
	    if (args.int_val !== undefined && args.int_val !== null) {
	      this.int_val = args.int_val;
	    }
	    if (args.real_val !== undefined && args.real_val !== null) {
	      this.real_val = args.real_val;
	    }
	    if (args.str_val !== undefined && args.str_val !== null) {
	      this.str_val = args.str_val;
	    }
	    if (args.arr_val !== undefined && args.arr_val !== null) {
	      this.arr_val = Thrift.copyList(args.arr_val, [null]);
	    }
	  }
	};
	TDatumVal.prototype = {};
	TDatumVal.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.int_val = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.DOUBLE) {
	          this.real_val = input.readDouble();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.str_val = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          this.arr_val = [];
	          var _rtmp31 = input.readListBegin();
	          var _size0 = _rtmp31.size || 0;
	          for (var _i2 = 0; _i2 < _size0; ++_i2) {
	            var elem3 = null;
	            elem3 = new ttypes.TDatum();
	            elem3.read(input);
	            this.arr_val.push(elem3);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDatumVal.prototype.write = function (output) {
	  output.writeStructBegin('TDatumVal');
	  if (this.int_val !== null && this.int_val !== undefined) {
	    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);
	    output.writeI64(this.int_val);
	    output.writeFieldEnd();
	  }
	  if (this.real_val !== null && this.real_val !== undefined) {
	    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);
	    output.writeDouble(this.real_val);
	    output.writeFieldEnd();
	  }
	  if (this.str_val !== null && this.str_val !== undefined) {
	    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);
	    output.writeString(this.str_val);
	    output.writeFieldEnd();
	  }
	  if (this.arr_val !== null && this.arr_val !== undefined) {
	    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);
	    for (var iter4 in this.arr_val) {
	      if (this.arr_val.hasOwnProperty(iter4)) {
	        iter4 = this.arr_val[iter4];
	        iter4.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDatum = module.exports.TDatum = function (args) {
	  this.val = null;
	  this.is_null = null;
	  if (args) {
	    if (args.val !== undefined && args.val !== null) {
	      this.val = new ttypes.TDatumVal(args.val);
	    }
	    if (args.is_null !== undefined && args.is_null !== null) {
	      this.is_null = args.is_null;
	    }
	  }
	};
	TDatum.prototype = {};
	TDatum.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.val = new ttypes.TDatumVal();
	          this.val.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_null = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDatum.prototype.write = function (output) {
	  output.writeStructBegin('TDatum');
	  if (this.val !== null && this.val !== undefined) {
	    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);
	    this.val.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.is_null !== null && this.is_null !== undefined) {
	    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
	    output.writeBool(this.is_null);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TStringValue = module.exports.TStringValue = function (args) {
	  this.str_val = null;
	  this.is_null = null;
	  if (args) {
	    if (args.str_val !== undefined && args.str_val !== null) {
	      this.str_val = args.str_val;
	    }
	    if (args.is_null !== undefined && args.is_null !== null) {
	      this.is_null = args.is_null;
	    }
	  }
	};
	TStringValue.prototype = {};
	TStringValue.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.str_val = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_null = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TStringValue.prototype.write = function (output) {
	  output.writeStructBegin('TStringValue');
	  if (this.str_val !== null && this.str_val !== undefined) {
	    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);
	    output.writeString(this.str_val);
	    output.writeFieldEnd();
	  }
	  if (this.is_null !== null && this.is_null !== undefined) {
	    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
	    output.writeBool(this.is_null);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColumnType = module.exports.TColumnType = function (args) {
	  this.col_name = null;
	  this.col_type = null;
	  this.is_reserved_keyword = null;
	  this.src_name = null;
	  this.is_system = null;
	  this.is_physical = null;
	  this.col_id = null;
	  if (args) {
	    if (args.col_name !== undefined && args.col_name !== null) {
	      this.col_name = args.col_name;
	    }
	    if (args.col_type !== undefined && args.col_type !== null) {
	      this.col_type = new common_ttypes.TTypeInfo(args.col_type);
	    }
	    if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {
	      this.is_reserved_keyword = args.is_reserved_keyword;
	    }
	    if (args.src_name !== undefined && args.src_name !== null) {
	      this.src_name = args.src_name;
	    }
	    if (args.is_system !== undefined && args.is_system !== null) {
	      this.is_system = args.is_system;
	    }
	    if (args.is_physical !== undefined && args.is_physical !== null) {
	      this.is_physical = args.is_physical;
	    }
	    if (args.col_id !== undefined && args.col_id !== null) {
	      this.col_id = args.col_id;
	    }
	  }
	};
	TColumnType.prototype = {};
	TColumnType.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.col_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.col_type = new common_ttypes.TTypeInfo();
	          this.col_type.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_reserved_keyword = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.src_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_system = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_physical = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I64) {
	          this.col_id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColumnType.prototype.write = function (output) {
	  output.writeStructBegin('TColumnType');
	  if (this.col_name !== null && this.col_name !== undefined) {
	    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);
	    output.writeString(this.col_name);
	    output.writeFieldEnd();
	  }
	  if (this.col_type !== null && this.col_type !== undefined) {
	    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);
	    this.col_type.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {
	    output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);
	    output.writeBool(this.is_reserved_keyword);
	    output.writeFieldEnd();
	  }
	  if (this.src_name !== null && this.src_name !== undefined) {
	    output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);
	    output.writeString(this.src_name);
	    output.writeFieldEnd();
	  }
	  if (this.is_system !== null && this.is_system !== undefined) {
	    output.writeFieldBegin('is_system', Thrift.Type.BOOL, 5);
	    output.writeBool(this.is_system);
	    output.writeFieldEnd();
	  }
	  if (this.is_physical !== null && this.is_physical !== undefined) {
	    output.writeFieldBegin('is_physical', Thrift.Type.BOOL, 6);
	    output.writeBool(this.is_physical);
	    output.writeFieldEnd();
	  }
	  if (this.col_id !== null && this.col_id !== undefined) {
	    output.writeFieldBegin('col_id', Thrift.Type.I64, 7);
	    output.writeI64(this.col_id);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRow = module.exports.TRow = function (args) {
	  this.cols = null;
	  if (args) {
	    if (args.cols !== undefined && args.cols !== null) {
	      this.cols = Thrift.copyList(args.cols, [ttypes.TDatum]);
	    }
	  }
	};
	TRow.prototype = {};
	TRow.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.cols = [];
	          var _rtmp36 = input.readListBegin();
	          var _size5 = _rtmp36.size || 0;
	          for (var _i7 = 0; _i7 < _size5; ++_i7) {
	            var elem8 = null;
	            elem8 = new ttypes.TDatum();
	            elem8.read(input);
	            this.cols.push(elem8);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRow.prototype.write = function (output) {
	  output.writeStructBegin('TRow');
	  if (this.cols !== null && this.cols !== undefined) {
	    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
	    for (var iter9 in this.cols) {
	      if (this.cols.hasOwnProperty(iter9)) {
	        iter9 = this.cols[iter9];
	        iter9.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColumnData = module.exports.TColumnData = function (args) {
	  this.int_col = null;
	  this.real_col = null;
	  this.str_col = null;
	  this.arr_col = null;
	  if (args) {
	    if (args.int_col !== undefined && args.int_col !== null) {
	      this.int_col = Thrift.copyList(args.int_col, [null]);
	    }
	    if (args.real_col !== undefined && args.real_col !== null) {
	      this.real_col = Thrift.copyList(args.real_col, [null]);
	    }
	    if (args.str_col !== undefined && args.str_col !== null) {
	      this.str_col = Thrift.copyList(args.str_col, [null]);
	    }
	    if (args.arr_col !== undefined && args.arr_col !== null) {
	      this.arr_col = Thrift.copyList(args.arr_col, [null]);
	    }
	  }
	};
	TColumnData.prototype = {};
	TColumnData.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.int_col = [];
	          var _rtmp311 = input.readListBegin();
	          var _size10 = _rtmp311.size || 0;
	          for (var _i12 = 0; _i12 < _size10; ++_i12) {
	            var elem13 = null;
	            elem13 = input.readI64();
	            this.int_col.push(elem13);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.real_col = [];
	          var _rtmp315 = input.readListBegin();
	          var _size14 = _rtmp315.size || 0;
	          for (var _i16 = 0; _i16 < _size14; ++_i16) {
	            var elem17 = null;
	            elem17 = input.readDouble();
	            this.real_col.push(elem17);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          this.str_col = [];
	          var _rtmp319 = input.readListBegin();
	          var _size18 = _rtmp319.size || 0;
	          for (var _i20 = 0; _i20 < _size18; ++_i20) {
	            var elem21 = null;
	            elem21 = input.readString();
	            this.str_col.push(elem21);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          this.arr_col = [];
	          var _rtmp323 = input.readListBegin();
	          var _size22 = _rtmp323.size || 0;
	          for (var _i24 = 0; _i24 < _size22; ++_i24) {
	            var elem25 = null;
	            elem25 = new ttypes.TColumn();
	            elem25.read(input);
	            this.arr_col.push(elem25);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColumnData.prototype.write = function (output) {
	  output.writeStructBegin('TColumnData');
	  if (this.int_col !== null && this.int_col !== undefined) {
	    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.I64, this.int_col.length);
	    for (var iter26 in this.int_col) {
	      if (this.int_col.hasOwnProperty(iter26)) {
	        iter26 = this.int_col[iter26];
	        output.writeI64(iter26);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.real_col !== null && this.real_col !== undefined) {
	    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);
	    for (var iter27 in this.real_col) {
	      if (this.real_col.hasOwnProperty(iter27)) {
	        iter27 = this.real_col[iter27];
	        output.writeDouble(iter27);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.str_col !== null && this.str_col !== undefined) {
	    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);
	    for (var iter28 in this.str_col) {
	      if (this.str_col.hasOwnProperty(iter28)) {
	        iter28 = this.str_col[iter28];
	        output.writeString(iter28);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.arr_col !== null && this.arr_col !== undefined) {
	    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);
	    for (var iter29 in this.arr_col) {
	      if (this.arr_col.hasOwnProperty(iter29)) {
	        iter29 = this.arr_col[iter29];
	        iter29.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColumn = module.exports.TColumn = function (args) {
	  this.data = null;
	  this.nulls = null;
	  if (args) {
	    if (args.data !== undefined && args.data !== null) {
	      this.data = new ttypes.TColumnData(args.data);
	    }
	    if (args.nulls !== undefined && args.nulls !== null) {
	      this.nulls = Thrift.copyList(args.nulls, [null]);
	    }
	  }
	};
	TColumn.prototype = {};
	TColumn.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.data = new ttypes.TColumnData();
	          this.data.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.nulls = [];
	          var _rtmp331 = input.readListBegin();
	          var _size30 = _rtmp331.size || 0;
	          for (var _i32 = 0; _i32 < _size30; ++_i32) {
	            var elem33 = null;
	            elem33 = input.readBool();
	            this.nulls.push(elem33);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColumn.prototype.write = function (output) {
	  output.writeStructBegin('TColumn');
	  if (this.data !== null && this.data !== undefined) {
	    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
	    this.data.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.nulls !== null && this.nulls !== undefined) {
	    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);
	    for (var iter34 in this.nulls) {
	      if (this.nulls.hasOwnProperty(iter34)) {
	        iter34 = this.nulls[iter34];
	        output.writeBool(iter34);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TStringRow = module.exports.TStringRow = function (args) {
	  this.cols = null;
	  if (args) {
	    if (args.cols !== undefined && args.cols !== null) {
	      this.cols = Thrift.copyList(args.cols, [ttypes.TStringValue]);
	    }
	  }
	};
	TStringRow.prototype = {};
	TStringRow.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.cols = [];
	          var _rtmp336 = input.readListBegin();
	          var _size35 = _rtmp336.size || 0;
	          for (var _i37 = 0; _i37 < _size35; ++_i37) {
	            var elem38 = null;
	            elem38 = new ttypes.TStringValue();
	            elem38.read(input);
	            this.cols.push(elem38);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TStringRow.prototype.write = function (output) {
	  output.writeStructBegin('TStringRow');
	  if (this.cols !== null && this.cols !== undefined) {
	    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
	    for (var iter39 in this.cols) {
	      if (this.cols.hasOwnProperty(iter39)) {
	        iter39 = this.cols[iter39];
	        iter39.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TKrb5Session = module.exports.TKrb5Session = function (args) {
	  this.sessionId = null;
	  this.krbToken = null;
	  if (args) {
	    if (args.sessionId !== undefined && args.sessionId !== null) {
	      this.sessionId = args.sessionId;
	    }
	    if (args.krbToken !== undefined && args.krbToken !== null) {
	      this.krbToken = args.krbToken;
	    }
	  }
	};
	TKrb5Session.prototype = {};
	TKrb5Session.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.sessionId = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.krbToken = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TKrb5Session.prototype.write = function (output) {
	  output.writeStructBegin('TKrb5Session');
	  if (this.sessionId !== null && this.sessionId !== undefined) {
	    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
	    output.writeString(this.sessionId);
	    output.writeFieldEnd();
	  }
	  if (this.krbToken !== null && this.krbToken !== undefined) {
	    output.writeFieldBegin('krbToken', Thrift.Type.STRING, 2);
	    output.writeString(this.krbToken);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TStepResult = module.exports.TStepResult = function (args) {
	  this.serialized_rows = null;
	  this.execution_finished = null;
	  this.merge_type = null;
	  this.sharded = null;
	  this.row_desc = null;
	  this.node_id = null;
	  if (args) {
	    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
	      this.serialized_rows = new serialized_result_set_ttypes.TSerializedRows(args.serialized_rows);
	    }
	    if (args.execution_finished !== undefined && args.execution_finished !== null) {
	      this.execution_finished = args.execution_finished;
	    }
	    if (args.merge_type !== undefined && args.merge_type !== null) {
	      this.merge_type = args.merge_type;
	    }
	    if (args.sharded !== undefined && args.sharded !== null) {
	      this.sharded = args.sharded;
	    }
	    if (args.row_desc !== undefined && args.row_desc !== null) {
	      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
	    }
	    if (args.node_id !== undefined && args.node_id !== null) {
	      this.node_id = args.node_id;
	    }
	  }
	};
	TStepResult.prototype = {};
	TStepResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.serialized_rows = new serialized_result_set_ttypes.TSerializedRows();
	          this.serialized_rows.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.execution_finished = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.merge_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.sharded = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.LIST) {
	          this.row_desc = [];
	          var _rtmp341 = input.readListBegin();
	          var _size40 = _rtmp341.size || 0;
	          for (var _i42 = 0; _i42 < _size40; ++_i42) {
	            var elem43 = null;
	            elem43 = new ttypes.TColumnType();
	            elem43.read(input);
	            this.row_desc.push(elem43);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I32) {
	          this.node_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TStepResult.prototype.write = function (output) {
	  output.writeStructBegin('TStepResult');
	  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
	    output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);
	    this.serialized_rows.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.execution_finished !== null && this.execution_finished !== undefined) {
	    output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);
	    output.writeBool(this.execution_finished);
	    output.writeFieldEnd();
	  }
	  if (this.merge_type !== null && this.merge_type !== undefined) {
	    output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);
	    output.writeI32(this.merge_type);
	    output.writeFieldEnd();
	  }
	  if (this.sharded !== null && this.sharded !== undefined) {
	    output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);
	    output.writeBool(this.sharded);
	    output.writeFieldEnd();
	  }
	  if (this.row_desc !== null && this.row_desc !== undefined) {
	    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
	    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
	    for (var iter44 in this.row_desc) {
	      if (this.row_desc.hasOwnProperty(iter44)) {
	        iter44 = this.row_desc[iter44];
	        iter44.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.node_id !== null && this.node_id !== undefined) {
	    output.writeFieldBegin('node_id', Thrift.Type.I32, 6);
	    output.writeI32(this.node_id);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRowSet = module.exports.TRowSet = function (args) {
	  this.row_desc = null;
	  this.rows = null;
	  this.columns = null;
	  this.is_columnar = null;
	  if (args) {
	    if (args.row_desc !== undefined && args.row_desc !== null) {
	      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
	    }
	    if (args.rows !== undefined && args.rows !== null) {
	      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
	    }
	    if (args.columns !== undefined && args.columns !== null) {
	      this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);
	    }
	    if (args.is_columnar !== undefined && args.is_columnar !== null) {
	      this.is_columnar = args.is_columnar;
	    }
	  }
	};
	TRowSet.prototype = {};
	TRowSet.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.row_desc = [];
	          var _rtmp346 = input.readListBegin();
	          var _size45 = _rtmp346.size || 0;
	          for (var _i47 = 0; _i47 < _size45; ++_i47) {
	            var elem48 = null;
	            elem48 = new ttypes.TColumnType();
	            elem48.read(input);
	            this.row_desc.push(elem48);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.rows = [];
	          var _rtmp350 = input.readListBegin();
	          var _size49 = _rtmp350.size || 0;
	          for (var _i51 = 0; _i51 < _size49; ++_i51) {
	            var elem52 = null;
	            elem52 = new ttypes.TRow();
	            elem52.read(input);
	            this.rows.push(elem52);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          this.columns = [];
	          var _rtmp354 = input.readListBegin();
	          var _size53 = _rtmp354.size || 0;
	          for (var _i55 = 0; _i55 < _size53; ++_i55) {
	            var elem56 = null;
	            elem56 = new ttypes.TColumn();
	            elem56.read(input);
	            this.columns.push(elem56);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_columnar = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRowSet.prototype.write = function (output) {
	  output.writeStructBegin('TRowSet');
	  if (this.row_desc !== null && this.row_desc !== undefined) {
	    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
	    for (var iter57 in this.row_desc) {
	      if (this.row_desc.hasOwnProperty(iter57)) {
	        iter57 = this.row_desc[iter57];
	        iter57.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.rows !== null && this.rows !== undefined) {
	    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
	    for (var iter58 in this.rows) {
	      if (this.rows.hasOwnProperty(iter58)) {
	        iter58 = this.rows[iter58];
	        iter58.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.columns !== null && this.columns !== undefined) {
	    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
	    for (var iter59 in this.columns) {
	      if (this.columns.hasOwnProperty(iter59)) {
	        iter59 = this.columns[iter59];
	        iter59.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.is_columnar !== null && this.is_columnar !== undefined) {
	    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);
	    output.writeBool(this.is_columnar);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TQueryResult = module.exports.TQueryResult = function (args) {
	  this.row_set = null;
	  this.execution_time_ms = null;
	  this.total_time_ms = null;
	  this.nonce = null;
	  this.debug = null;
	  this.success = true;
	  this.query_type = 0;
	  if (args) {
	    if (args.row_set !== undefined && args.row_set !== null) {
	      this.row_set = new ttypes.TRowSet(args.row_set);
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
	      this.total_time_ms = args.total_time_ms;
	    }
	    if (args.nonce !== undefined && args.nonce !== null) {
	      this.nonce = args.nonce;
	    }
	    if (args.debug !== undefined && args.debug !== null) {
	      this.debug = args.debug;
	    }
	    if (args.success !== undefined && args.success !== null) {
	      this.success = args.success;
	    }
	    if (args.query_type !== undefined && args.query_type !== null) {
	      this.query_type = args.query_type;
	    }
	  }
	};
	TQueryResult.prototype = {};
	TQueryResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.row_set = new ttypes.TRowSet();
	          this.row_set.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.total_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.nonce = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.debug = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.BOOL) {
	          this.success = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I32) {
	          this.query_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TQueryResult.prototype.write = function (output) {
	  output.writeStructBegin('TQueryResult');
	  if (this.row_set !== null && this.row_set !== undefined) {
	    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
	    this.row_set.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
	    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);
	    output.writeI64(this.total_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.nonce !== null && this.nonce !== undefined) {
	    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
	    output.writeString(this.nonce);
	    output.writeFieldEnd();
	  }
	  if (this.debug !== null && this.debug !== undefined) {
	    output.writeFieldBegin('debug', Thrift.Type.STRING, 5);
	    output.writeString(this.debug);
	    output.writeFieldEnd();
	  }
	  if (this.success !== null && this.success !== undefined) {
	    output.writeFieldBegin('success', Thrift.Type.BOOL, 6);
	    output.writeBool(this.success);
	    output.writeFieldEnd();
	  }
	  if (this.query_type !== null && this.query_type !== undefined) {
	    output.writeFieldBegin('query_type', Thrift.Type.I32, 7);
	    output.writeI32(this.query_type);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDataFrame = module.exports.TDataFrame = function (args) {
	  this.sm_handle = null;
	  this.sm_size = null;
	  this.df_handle = null;
	  this.df_size = null;
	  this.execution_time_ms = null;
	  this.arrow_conversion_time_ms = null;
	  this.df_buffer = null;
	  if (args) {
	    if (args.sm_handle !== undefined && args.sm_handle !== null) {
	      this.sm_handle = args.sm_handle;
	    }
	    if (args.sm_size !== undefined && args.sm_size !== null) {
	      this.sm_size = args.sm_size;
	    }
	    if (args.df_handle !== undefined && args.df_handle !== null) {
	      this.df_handle = args.df_handle;
	    }
	    if (args.df_size !== undefined && args.df_size !== null) {
	      this.df_size = args.df_size;
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.arrow_conversion_time_ms !== undefined && args.arrow_conversion_time_ms !== null) {
	      this.arrow_conversion_time_ms = args.arrow_conversion_time_ms;
	    }
	    if (args.df_buffer !== undefined && args.df_buffer !== null) {
	      this.df_buffer = args.df_buffer;
	    }
	  }
	};
	TDataFrame.prototype = {};
	TDataFrame.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.sm_handle = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.sm_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.df_handle = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.df_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.arrow_conversion_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.STRING) {
	          this.df_buffer = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDataFrame.prototype.write = function (output) {
	  output.writeStructBegin('TDataFrame');
	  if (this.sm_handle !== null && this.sm_handle !== undefined) {
	    output.writeFieldBegin('sm_handle', Thrift.Type.STRING, 1);
	    output.writeBinary(this.sm_handle);
	    output.writeFieldEnd();
	  }
	  if (this.sm_size !== null && this.sm_size !== undefined) {
	    output.writeFieldBegin('sm_size', Thrift.Type.I64, 2);
	    output.writeI64(this.sm_size);
	    output.writeFieldEnd();
	  }
	  if (this.df_handle !== null && this.df_handle !== undefined) {
	    output.writeFieldBegin('df_handle', Thrift.Type.STRING, 3);
	    output.writeBinary(this.df_handle);
	    output.writeFieldEnd();
	  }
	  if (this.df_size !== null && this.df_size !== undefined) {
	    output.writeFieldBegin('df_size', Thrift.Type.I64, 4);
	    output.writeI64(this.df_size);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 5);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.arrow_conversion_time_ms !== null && this.arrow_conversion_time_ms !== undefined) {
	    output.writeFieldBegin('arrow_conversion_time_ms', Thrift.Type.I64, 6);
	    output.writeI64(this.arrow_conversion_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.df_buffer !== null && this.df_buffer !== undefined) {
	    output.writeFieldBegin('df_buffer', Thrift.Type.STRING, 7);
	    output.writeBinary(this.df_buffer);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDBInfo = module.exports.TDBInfo = function (args) {
	  this.db_name = null;
	  this.db_owner = null;
	  if (args) {
	    if (args.db_name !== undefined && args.db_name !== null) {
	      this.db_name = args.db_name;
	    }
	    if (args.db_owner !== undefined && args.db_owner !== null) {
	      this.db_owner = args.db_owner;
	    }
	  }
	};
	TDBInfo.prototype = {};
	TDBInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.db_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.db_owner = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDBInfo.prototype.write = function (output) {
	  output.writeStructBegin('TDBInfo');
	  if (this.db_name !== null && this.db_name !== undefined) {
	    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
	    output.writeString(this.db_name);
	    output.writeFieldEnd();
	  }
	  if (this.db_owner !== null && this.db_owner !== undefined) {
	    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);
	    output.writeString(this.db_owner);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TOmniSciException = module.exports.TOmniSciException = function (args) {
	  Thrift.TException.call(this, "TOmniSciException");
	  this.name = "TOmniSciException";
	  this.error_msg = null;
	  if (args) {
	    if (args.error_msg !== undefined && args.error_msg !== null) {
	      this.error_msg = args.error_msg;
	    }
	  }
	};
	Thrift.inherits(TOmniSciException, Thrift.TException);
	TOmniSciException.prototype.name = 'TOmniSciException';
	TOmniSciException.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.error_msg = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TOmniSciException.prototype.write = function (output) {
	  output.writeStructBegin('TOmniSciException');
	  if (this.error_msg !== null && this.error_msg !== undefined) {
	    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);
	    output.writeString(this.error_msg);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TCopyParams = module.exports.TCopyParams = function (args) {
	  this.delimiter = null;
	  this.null_str = null;
	  this.has_header = 0;
	  this.quoted = null;
	  this.quote = null;
	  this.escape = null;
	  this.line_delim = null;
	  this.array_delim = null;
	  this.array_begin = null;
	  this.array_end = null;
	  this.threads = null;
	  this.file_type = 0;
	  this.s3_access_key = null;
	  this.s3_secret_key = null;
	  this.s3_region = null;
	  this.geo_coords_encoding = 6;
	  this.geo_coords_comp_param = 32;
	  this.geo_coords_type = 18;
	  this.geo_coords_srid = 4326;
	  this.sanitize_column_names = true;
	  this.geo_layer_name = null;
	  this.s3_endpoint = null;
	  this.geo_assign_render_groups = true;
	  this.geo_explode_collections = false;
	  if (args) {
	    if (args.delimiter !== undefined && args.delimiter !== null) {
	      this.delimiter = args.delimiter;
	    }
	    if (args.null_str !== undefined && args.null_str !== null) {
	      this.null_str = args.null_str;
	    }
	    if (args.has_header !== undefined && args.has_header !== null) {
	      this.has_header = args.has_header;
	    }
	    if (args.quoted !== undefined && args.quoted !== null) {
	      this.quoted = args.quoted;
	    }
	    if (args.quote !== undefined && args.quote !== null) {
	      this.quote = args.quote;
	    }
	    if (args.escape !== undefined && args.escape !== null) {
	      this.escape = args.escape;
	    }
	    if (args.line_delim !== undefined && args.line_delim !== null) {
	      this.line_delim = args.line_delim;
	    }
	    if (args.array_delim !== undefined && args.array_delim !== null) {
	      this.array_delim = args.array_delim;
	    }
	    if (args.array_begin !== undefined && args.array_begin !== null) {
	      this.array_begin = args.array_begin;
	    }
	    if (args.array_end !== undefined && args.array_end !== null) {
	      this.array_end = args.array_end;
	    }
	    if (args.threads !== undefined && args.threads !== null) {
	      this.threads = args.threads;
	    }
	    if (args.file_type !== undefined && args.file_type !== null) {
	      this.file_type = args.file_type;
	    }
	    if (args.s3_access_key !== undefined && args.s3_access_key !== null) {
	      this.s3_access_key = args.s3_access_key;
	    }
	    if (args.s3_secret_key !== undefined && args.s3_secret_key !== null) {
	      this.s3_secret_key = args.s3_secret_key;
	    }
	    if (args.s3_region !== undefined && args.s3_region !== null) {
	      this.s3_region = args.s3_region;
	    }
	    if (args.geo_coords_encoding !== undefined && args.geo_coords_encoding !== null) {
	      this.geo_coords_encoding = args.geo_coords_encoding;
	    }
	    if (args.geo_coords_comp_param !== undefined && args.geo_coords_comp_param !== null) {
	      this.geo_coords_comp_param = args.geo_coords_comp_param;
	    }
	    if (args.geo_coords_type !== undefined && args.geo_coords_type !== null) {
	      this.geo_coords_type = args.geo_coords_type;
	    }
	    if (args.geo_coords_srid !== undefined && args.geo_coords_srid !== null) {
	      this.geo_coords_srid = args.geo_coords_srid;
	    }
	    if (args.sanitize_column_names !== undefined && args.sanitize_column_names !== null) {
	      this.sanitize_column_names = args.sanitize_column_names;
	    }
	    if (args.geo_layer_name !== undefined && args.geo_layer_name !== null) {
	      this.geo_layer_name = args.geo_layer_name;
	    }
	    if (args.s3_endpoint !== undefined && args.s3_endpoint !== null) {
	      this.s3_endpoint = args.s3_endpoint;
	    }
	    if (args.geo_assign_render_groups !== undefined && args.geo_assign_render_groups !== null) {
	      this.geo_assign_render_groups = args.geo_assign_render_groups;
	    }
	    if (args.geo_explode_collections !== undefined && args.geo_explode_collections !== null) {
	      this.geo_explode_collections = args.geo_explode_collections;
	    }
	  }
	};
	TCopyParams.prototype = {};
	TCopyParams.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.delimiter = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.null_str = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.has_header = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.quoted = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.quote = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.escape = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.STRING) {
	          this.line_delim = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.STRING) {
	          this.array_delim = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 9:
	        if (ftype == Thrift.Type.STRING) {
	          this.array_begin = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 10:
	        if (ftype == Thrift.Type.STRING) {
	          this.array_end = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 11:
	        if (ftype == Thrift.Type.I32) {
	          this.threads = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 12:
	        if (ftype == Thrift.Type.I32) {
	          this.file_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 13:
	        if (ftype == Thrift.Type.STRING) {
	          this.s3_access_key = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 14:
	        if (ftype == Thrift.Type.STRING) {
	          this.s3_secret_key = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 15:
	        if (ftype == Thrift.Type.STRING) {
	          this.s3_region = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 16:
	        if (ftype == Thrift.Type.I32) {
	          this.geo_coords_encoding = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 17:
	        if (ftype == Thrift.Type.I32) {
	          this.geo_coords_comp_param = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 18:
	        if (ftype == Thrift.Type.I32) {
	          this.geo_coords_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 19:
	        if (ftype == Thrift.Type.I32) {
	          this.geo_coords_srid = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 20:
	        if (ftype == Thrift.Type.BOOL) {
	          this.sanitize_column_names = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 21:
	        if (ftype == Thrift.Type.STRING) {
	          this.geo_layer_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 22:
	        if (ftype == Thrift.Type.STRING) {
	          this.s3_endpoint = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 23:
	        if (ftype == Thrift.Type.BOOL) {
	          this.geo_assign_render_groups = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 24:
	        if (ftype == Thrift.Type.BOOL) {
	          this.geo_explode_collections = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TCopyParams.prototype.write = function (output) {
	  output.writeStructBegin('TCopyParams');
	  if (this.delimiter !== null && this.delimiter !== undefined) {
	    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);
	    output.writeString(this.delimiter);
	    output.writeFieldEnd();
	  }
	  if (this.null_str !== null && this.null_str !== undefined) {
	    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);
	    output.writeString(this.null_str);
	    output.writeFieldEnd();
	  }
	  if (this.has_header !== null && this.has_header !== undefined) {
	    output.writeFieldBegin('has_header', Thrift.Type.I32, 3);
	    output.writeI32(this.has_header);
	    output.writeFieldEnd();
	  }
	  if (this.quoted !== null && this.quoted !== undefined) {
	    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);
	    output.writeBool(this.quoted);
	    output.writeFieldEnd();
	  }
	  if (this.quote !== null && this.quote !== undefined) {
	    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);
	    output.writeString(this.quote);
	    output.writeFieldEnd();
	  }
	  if (this.escape !== null && this.escape !== undefined) {
	    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);
	    output.writeString(this.escape);
	    output.writeFieldEnd();
	  }
	  if (this.line_delim !== null && this.line_delim !== undefined) {
	    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);
	    output.writeString(this.line_delim);
	    output.writeFieldEnd();
	  }
	  if (this.array_delim !== null && this.array_delim !== undefined) {
	    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);
	    output.writeString(this.array_delim);
	    output.writeFieldEnd();
	  }
	  if (this.array_begin !== null && this.array_begin !== undefined) {
	    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);
	    output.writeString(this.array_begin);
	    output.writeFieldEnd();
	  }
	  if (this.array_end !== null && this.array_end !== undefined) {
	    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);
	    output.writeString(this.array_end);
	    output.writeFieldEnd();
	  }
	  if (this.threads !== null && this.threads !== undefined) {
	    output.writeFieldBegin('threads', Thrift.Type.I32, 11);
	    output.writeI32(this.threads);
	    output.writeFieldEnd();
	  }
	  if (this.file_type !== null && this.file_type !== undefined) {
	    output.writeFieldBegin('file_type', Thrift.Type.I32, 12);
	    output.writeI32(this.file_type);
	    output.writeFieldEnd();
	  }
	  if (this.s3_access_key !== null && this.s3_access_key !== undefined) {
	    output.writeFieldBegin('s3_access_key', Thrift.Type.STRING, 13);
	    output.writeString(this.s3_access_key);
	    output.writeFieldEnd();
	  }
	  if (this.s3_secret_key !== null && this.s3_secret_key !== undefined) {
	    output.writeFieldBegin('s3_secret_key', Thrift.Type.STRING, 14);
	    output.writeString(this.s3_secret_key);
	    output.writeFieldEnd();
	  }
	  if (this.s3_region !== null && this.s3_region !== undefined) {
	    output.writeFieldBegin('s3_region', Thrift.Type.STRING, 15);
	    output.writeString(this.s3_region);
	    output.writeFieldEnd();
	  }
	  if (this.geo_coords_encoding !== null && this.geo_coords_encoding !== undefined) {
	    output.writeFieldBegin('geo_coords_encoding', Thrift.Type.I32, 16);
	    output.writeI32(this.geo_coords_encoding);
	    output.writeFieldEnd();
	  }
	  if (this.geo_coords_comp_param !== null && this.geo_coords_comp_param !== undefined) {
	    output.writeFieldBegin('geo_coords_comp_param', Thrift.Type.I32, 17);
	    output.writeI32(this.geo_coords_comp_param);
	    output.writeFieldEnd();
	  }
	  if (this.geo_coords_type !== null && this.geo_coords_type !== undefined) {
	    output.writeFieldBegin('geo_coords_type', Thrift.Type.I32, 18);
	    output.writeI32(this.geo_coords_type);
	    output.writeFieldEnd();
	  }
	  if (this.geo_coords_srid !== null && this.geo_coords_srid !== undefined) {
	    output.writeFieldBegin('geo_coords_srid', Thrift.Type.I32, 19);
	    output.writeI32(this.geo_coords_srid);
	    output.writeFieldEnd();
	  }
	  if (this.sanitize_column_names !== null && this.sanitize_column_names !== undefined) {
	    output.writeFieldBegin('sanitize_column_names', Thrift.Type.BOOL, 20);
	    output.writeBool(this.sanitize_column_names);
	    output.writeFieldEnd();
	  }
	  if (this.geo_layer_name !== null && this.geo_layer_name !== undefined) {
	    output.writeFieldBegin('geo_layer_name', Thrift.Type.STRING, 21);
	    output.writeString(this.geo_layer_name);
	    output.writeFieldEnd();
	  }
	  if (this.s3_endpoint !== null && this.s3_endpoint !== undefined) {
	    output.writeFieldBegin('s3_endpoint', Thrift.Type.STRING, 22);
	    output.writeString(this.s3_endpoint);
	    output.writeFieldEnd();
	  }
	  if (this.geo_assign_render_groups !== null && this.geo_assign_render_groups !== undefined) {
	    output.writeFieldBegin('geo_assign_render_groups', Thrift.Type.BOOL, 23);
	    output.writeBool(this.geo_assign_render_groups);
	    output.writeFieldEnd();
	  }
	  if (this.geo_explode_collections !== null && this.geo_explode_collections !== undefined) {
	    output.writeFieldBegin('geo_explode_collections', Thrift.Type.BOOL, 24);
	    output.writeBool(this.geo_explode_collections);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TCreateParams = module.exports.TCreateParams = function (args) {
	  this.is_replicated = null;
	  if (args) {
	    if (args.is_replicated !== undefined && args.is_replicated !== null) {
	      this.is_replicated = args.is_replicated;
	    }
	  }
	};
	TCreateParams.prototype = {};
	TCreateParams.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_replicated = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TCreateParams.prototype.write = function (output) {
	  output.writeStructBegin('TCreateParams');
	  if (this.is_replicated !== null && this.is_replicated !== undefined) {
	    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 1);
	    output.writeBool(this.is_replicated);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDetectResult = module.exports.TDetectResult = function (args) {
	  this.row_set = null;
	  this.copy_params = null;
	  if (args) {
	    if (args.row_set !== undefined && args.row_set !== null) {
	      this.row_set = new ttypes.TRowSet(args.row_set);
	    }
	    if (args.copy_params !== undefined && args.copy_params !== null) {
	      this.copy_params = new ttypes.TCopyParams(args.copy_params);
	    }
	  }
	};
	TDetectResult.prototype = {};
	TDetectResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.row_set = new ttypes.TRowSet();
	          this.row_set.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.copy_params = new ttypes.TCopyParams();
	          this.copy_params.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDetectResult.prototype.write = function (output) {
	  output.writeStructBegin('TDetectResult');
	  if (this.row_set !== null && this.row_set !== undefined) {
	    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
	    this.row_set.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.copy_params !== null && this.copy_params !== undefined) {
	    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);
	    this.copy_params.write(output);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TImportStatus = module.exports.TImportStatus = function (args) {
	  this.elapsed = null;
	  this.rows_completed = null;
	  this.rows_estimated = null;
	  this.rows_rejected = null;
	  if (args) {
	    if (args.elapsed !== undefined && args.elapsed !== null) {
	      this.elapsed = args.elapsed;
	    }
	    if (args.rows_completed !== undefined && args.rows_completed !== null) {
	      this.rows_completed = args.rows_completed;
	    }
	    if (args.rows_estimated !== undefined && args.rows_estimated !== null) {
	      this.rows_estimated = args.rows_estimated;
	    }
	    if (args.rows_rejected !== undefined && args.rows_rejected !== null) {
	      this.rows_rejected = args.rows_rejected;
	    }
	  }
	};
	TImportStatus.prototype = {};
	TImportStatus.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.elapsed = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.rows_completed = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.rows_estimated = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.rows_rejected = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TImportStatus.prototype.write = function (output) {
	  output.writeStructBegin('TImportStatus');
	  if (this.elapsed !== null && this.elapsed !== undefined) {
	    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);
	    output.writeI64(this.elapsed);
	    output.writeFieldEnd();
	  }
	  if (this.rows_completed !== null && this.rows_completed !== undefined) {
	    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);
	    output.writeI64(this.rows_completed);
	    output.writeFieldEnd();
	  }
	  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {
	    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);
	    output.writeI64(this.rows_estimated);
	    output.writeFieldEnd();
	  }
	  if (this.rows_rejected !== null && this.rows_rejected !== undefined) {
	    output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);
	    output.writeI64(this.rows_rejected);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TFrontendView = module.exports.TFrontendView = function (args) {
	  this.view_name = null;
	  this.view_state = null;
	  this.image_hash = null;
	  this.update_time = null;
	  this.view_metadata = null;
	  if (args) {
	    if (args.view_name !== undefined && args.view_name !== null) {
	      this.view_name = args.view_name;
	    }
	    if (args.view_state !== undefined && args.view_state !== null) {
	      this.view_state = args.view_state;
	    }
	    if (args.image_hash !== undefined && args.image_hash !== null) {
	      this.image_hash = args.image_hash;
	    }
	    if (args.update_time !== undefined && args.update_time !== null) {
	      this.update_time = args.update_time;
	    }
	    if (args.view_metadata !== undefined && args.view_metadata !== null) {
	      this.view_metadata = args.view_metadata;
	    }
	  }
	};
	TFrontendView.prototype = {};
	TFrontendView.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.view_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.view_state = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.image_hash = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.update_time = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.view_metadata = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TFrontendView.prototype.write = function (output) {
	  output.writeStructBegin('TFrontendView');
	  if (this.view_name !== null && this.view_name !== undefined) {
	    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);
	    output.writeString(this.view_name);
	    output.writeFieldEnd();
	  }
	  if (this.view_state !== null && this.view_state !== undefined) {
	    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
	    output.writeString(this.view_state);
	    output.writeFieldEnd();
	  }
	  if (this.image_hash !== null && this.image_hash !== undefined) {
	    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
	    output.writeString(this.image_hash);
	    output.writeFieldEnd();
	  }
	  if (this.update_time !== null && this.update_time !== undefined) {
	    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
	    output.writeString(this.update_time);
	    output.writeFieldEnd();
	  }
	  if (this.view_metadata !== null && this.view_metadata !== undefined) {
	    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);
	    output.writeString(this.view_metadata);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDashboard = module.exports.TDashboard = function (args) {
	  this.dashboard_name = null;
	  this.dashboard_state = null;
	  this.image_hash = null;
	  this.update_time = null;
	  this.dashboard_metadata = null;
	  this.dashboard_id = null;
	  this.dashboard_owner = null;
	  this.is_dash_shared = null;
	  if (args) {
	    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
	      this.dashboard_name = args.dashboard_name;
	    }
	    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
	      this.dashboard_state = args.dashboard_state;
	    }
	    if (args.image_hash !== undefined && args.image_hash !== null) {
	      this.image_hash = args.image_hash;
	    }
	    if (args.update_time !== undefined && args.update_time !== null) {
	      this.update_time = args.update_time;
	    }
	    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
	      this.dashboard_metadata = args.dashboard_metadata;
	    }
	    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
	      this.dashboard_id = args.dashboard_id;
	    }
	    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {
	      this.dashboard_owner = args.dashboard_owner;
	    }
	    if (args.is_dash_shared !== undefined && args.is_dash_shared !== null) {
	      this.is_dash_shared = args.is_dash_shared;
	    }
	  }
	};
	TDashboard.prototype = {};
	TDashboard.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.dashboard_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.dashboard_state = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.image_hash = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.update_time = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.dashboard_metadata = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I32) {
	          this.dashboard_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.STRING) {
	          this.dashboard_owner = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_dash_shared = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDashboard.prototype.write = function (output) {
	  output.writeStructBegin('TDashboard');
	  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
	    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 1);
	    output.writeString(this.dashboard_name);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
	    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 2);
	    output.writeString(this.dashboard_state);
	    output.writeFieldEnd();
	  }
	  if (this.image_hash !== null && this.image_hash !== undefined) {
	    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
	    output.writeString(this.image_hash);
	    output.writeFieldEnd();
	  }
	  if (this.update_time !== null && this.update_time !== undefined) {
	    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
	    output.writeString(this.update_time);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
	    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);
	    output.writeString(this.dashboard_metadata);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
	    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 6);
	    output.writeI32(this.dashboard_id);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {
	    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 7);
	    output.writeString(this.dashboard_owner);
	    output.writeFieldEnd();
	  }
	  if (this.is_dash_shared !== null && this.is_dash_shared !== undefined) {
	    output.writeFieldBegin('is_dash_shared', Thrift.Type.BOOL, 8);
	    output.writeBool(this.is_dash_shared);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TServerStatus = module.exports.TServerStatus = function (args) {
	  this.read_only = null;
	  this.version = null;
	  this.rendering_enabled = null;
	  this.start_time = null;
	  this.edition = null;
	  this.host_name = null;
	  this.poly_rendering_enabled = null;
	  this.role = null;
	  if (args) {
	    if (args.read_only !== undefined && args.read_only !== null) {
	      this.read_only = args.read_only;
	    }
	    if (args.version !== undefined && args.version !== null) {
	      this.version = args.version;
	    }
	    if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {
	      this.rendering_enabled = args.rendering_enabled;
	    }
	    if (args.start_time !== undefined && args.start_time !== null) {
	      this.start_time = args.start_time;
	    }
	    if (args.edition !== undefined && args.edition !== null) {
	      this.edition = args.edition;
	    }
	    if (args.host_name !== undefined && args.host_name !== null) {
	      this.host_name = args.host_name;
	    }
	    if (args.poly_rendering_enabled !== undefined && args.poly_rendering_enabled !== null) {
	      this.poly_rendering_enabled = args.poly_rendering_enabled;
	    }
	    if (args.role !== undefined && args.role !== null) {
	      this.role = args.role;
	    }
	  }
	};
	TServerStatus.prototype = {};
	TServerStatus.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.read_only = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.version = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.rendering_enabled = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.start_time = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.edition = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.host_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.BOOL) {
	          this.poly_rendering_enabled = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.I32) {
	          this.role = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TServerStatus.prototype.write = function (output) {
	  output.writeStructBegin('TServerStatus');
	  if (this.read_only !== null && this.read_only !== undefined) {
	    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);
	    output.writeBool(this.read_only);
	    output.writeFieldEnd();
	  }
	  if (this.version !== null && this.version !== undefined) {
	    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
	    output.writeString(this.version);
	    output.writeFieldEnd();
	  }
	  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {
	    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);
	    output.writeBool(this.rendering_enabled);
	    output.writeFieldEnd();
	  }
	  if (this.start_time !== null && this.start_time !== undefined) {
	    output.writeFieldBegin('start_time', Thrift.Type.I64, 4);
	    output.writeI64(this.start_time);
	    output.writeFieldEnd();
	  }
	  if (this.edition !== null && this.edition !== undefined) {
	    output.writeFieldBegin('edition', Thrift.Type.STRING, 5);
	    output.writeString(this.edition);
	    output.writeFieldEnd();
	  }
	  if (this.host_name !== null && this.host_name !== undefined) {
	    output.writeFieldBegin('host_name', Thrift.Type.STRING, 6);
	    output.writeString(this.host_name);
	    output.writeFieldEnd();
	  }
	  if (this.poly_rendering_enabled !== null && this.poly_rendering_enabled !== undefined) {
	    output.writeFieldBegin('poly_rendering_enabled', Thrift.Type.BOOL, 7);
	    output.writeBool(this.poly_rendering_enabled);
	    output.writeFieldEnd();
	  }
	  if (this.role !== null && this.role !== undefined) {
	    output.writeFieldBegin('role', Thrift.Type.I32, 8);
	    output.writeI32(this.role);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TPixel = module.exports.TPixel = function (args) {
	  this.x = null;
	  this.y = null;
	  if (args) {
	    if (args.x !== undefined && args.x !== null) {
	      this.x = args.x;
	    }
	    if (args.y !== undefined && args.y !== null) {
	      this.y = args.y;
	    }
	  }
	};
	TPixel.prototype = {};
	TPixel.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.x = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.y = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TPixel.prototype.write = function (output) {
	  output.writeStructBegin('TPixel');
	  if (this.x !== null && this.x !== undefined) {
	    output.writeFieldBegin('x', Thrift.Type.I64, 1);
	    output.writeI64(this.x);
	    output.writeFieldEnd();
	  }
	  if (this.y !== null && this.y !== undefined) {
	    output.writeFieldBegin('y', Thrift.Type.I64, 2);
	    output.writeI64(this.y);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TPixelTableRowResult = module.exports.TPixelTableRowResult = function (args) {
	  this.pixel = null;
	  this.vega_table_name = null;
	  this.table_id = null;
	  this.row_id = null;
	  this.row_set = null;
	  this.nonce = null;
	  if (args) {
	    if (args.pixel !== undefined && args.pixel !== null) {
	      this.pixel = new ttypes.TPixel(args.pixel);
	    }
	    if (args.vega_table_name !== undefined && args.vega_table_name !== null) {
	      this.vega_table_name = args.vega_table_name;
	    }
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = Thrift.copyList(args.table_id, [null]);
	    }
	    if (args.row_id !== undefined && args.row_id !== null) {
	      this.row_id = Thrift.copyList(args.row_id, [null]);
	    }
	    if (args.row_set !== undefined && args.row_set !== null) {
	      this.row_set = new ttypes.TRowSet(args.row_set);
	    }
	    if (args.nonce !== undefined && args.nonce !== null) {
	      this.nonce = args.nonce;
	    }
	  }
	};
	TPixelTableRowResult.prototype = {};
	TPixelTableRowResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.pixel = new ttypes.TPixel();
	          this.pixel.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.vega_table_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          this.table_id = [];
	          var _rtmp361 = input.readListBegin();
	          var _size60 = _rtmp361.size || 0;
	          for (var _i62 = 0; _i62 < _size60; ++_i62) {
	            var elem63 = null;
	            elem63 = input.readI64();
	            this.table_id.push(elem63);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          this.row_id = [];
	          var _rtmp365 = input.readListBegin();
	          var _size64 = _rtmp365.size || 0;
	          for (var _i66 = 0; _i66 < _size64; ++_i66) {
	            var elem67 = null;
	            elem67 = input.readI64();
	            this.row_id.push(elem67);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.row_set = new ttypes.TRowSet();
	          this.row_set.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.nonce = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TPixelTableRowResult.prototype.write = function (output) {
	  output.writeStructBegin('TPixelTableRowResult');
	  if (this.pixel !== null && this.pixel !== undefined) {
	    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);
	    this.pixel.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.vega_table_name !== null && this.vega_table_name !== undefined) {
	    output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);
	    output.writeString(this.vega_table_name);
	    output.writeFieldEnd();
	  }
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.I64, this.table_id.length);
	    for (var iter68 in this.table_id) {
	      if (this.table_id.hasOwnProperty(iter68)) {
	        iter68 = this.table_id[iter68];
	        output.writeI64(iter68);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.row_id !== null && this.row_id !== undefined) {
	    output.writeFieldBegin('row_id', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.I64, this.row_id.length);
	    for (var iter69 in this.row_id) {
	      if (this.row_id.hasOwnProperty(iter69)) {
	        iter69 = this.row_id[iter69];
	        output.writeI64(iter69);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.row_set !== null && this.row_set !== undefined) {
	    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);
	    this.row_set.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.nonce !== null && this.nonce !== undefined) {
	    output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);
	    output.writeString(this.nonce);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRenderResult = module.exports.TRenderResult = function (args) {
	  this.image = null;
	  this.nonce = null;
	  this.execution_time_ms = null;
	  this.render_time_ms = null;
	  this.total_time_ms = null;
	  this.vega_metadata = null;
	  if (args) {
	    if (args.image !== undefined && args.image !== null) {
	      this.image = args.image;
	    }
	    if (args.nonce !== undefined && args.nonce !== null) {
	      this.nonce = args.nonce;
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
	      this.render_time_ms = args.render_time_ms;
	    }
	    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
	      this.total_time_ms = args.total_time_ms;
	    }
	    if (args.vega_metadata !== undefined && args.vega_metadata !== null) {
	      this.vega_metadata = args.vega_metadata;
	    }
	  }
	};
	TRenderResult.prototype = {};
	TRenderResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.image = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.nonce = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.render_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.total_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.vega_metadata = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRenderResult.prototype.write = function (output) {
	  output.writeStructBegin('TRenderResult');
	  if (this.image !== null && this.image !== undefined) {
	    output.writeFieldBegin('image', Thrift.Type.STRING, 1);
	    output.writeBinary(this.image);
	    output.writeFieldEnd();
	  }
	  if (this.nonce !== null && this.nonce !== undefined) {
	    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
	    output.writeString(this.nonce);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
	    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
	    output.writeI64(this.render_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
	    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
	    output.writeI64(this.total_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.vega_metadata !== null && this.vega_metadata !== undefined) {
	    output.writeFieldBegin('vega_metadata', Thrift.Type.STRING, 6);
	    output.writeString(this.vega_metadata);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TGpuSpecification = module.exports.TGpuSpecification = function (args) {
	  this.num_sm = null;
	  this.clock_frequency_kHz = null;
	  this.memory = null;
	  this.compute_capability_major = null;
	  this.compute_capability_minor = null;
	  if (args) {
	    if (args.num_sm !== undefined && args.num_sm !== null) {
	      this.num_sm = args.num_sm;
	    }
	    if (args.clock_frequency_kHz !== undefined && args.clock_frequency_kHz !== null) {
	      this.clock_frequency_kHz = args.clock_frequency_kHz;
	    }
	    if (args.memory !== undefined && args.memory !== null) {
	      this.memory = args.memory;
	    }
	    if (args.compute_capability_major !== undefined && args.compute_capability_major !== null) {
	      this.compute_capability_major = args.compute_capability_major;
	    }
	    if (args.compute_capability_minor !== undefined && args.compute_capability_minor !== null) {
	      this.compute_capability_minor = args.compute_capability_minor;
	    }
	  }
	};
	TGpuSpecification.prototype = {};
	TGpuSpecification.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.num_sm = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.clock_frequency_kHz = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.memory = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I16) {
	          this.compute_capability_major = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I16) {
	          this.compute_capability_minor = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TGpuSpecification.prototype.write = function (output) {
	  output.writeStructBegin('TGpuSpecification');
	  if (this.num_sm !== null && this.num_sm !== undefined) {
	    output.writeFieldBegin('num_sm', Thrift.Type.I32, 1);
	    output.writeI32(this.num_sm);
	    output.writeFieldEnd();
	  }
	  if (this.clock_frequency_kHz !== null && this.clock_frequency_kHz !== undefined) {
	    output.writeFieldBegin('clock_frequency_kHz', Thrift.Type.I64, 2);
	    output.writeI64(this.clock_frequency_kHz);
	    output.writeFieldEnd();
	  }
	  if (this.memory !== null && this.memory !== undefined) {
	    output.writeFieldBegin('memory', Thrift.Type.I64, 3);
	    output.writeI64(this.memory);
	    output.writeFieldEnd();
	  }
	  if (this.compute_capability_major !== null && this.compute_capability_major !== undefined) {
	    output.writeFieldBegin('compute_capability_major', Thrift.Type.I16, 4);
	    output.writeI16(this.compute_capability_major);
	    output.writeFieldEnd();
	  }
	  if (this.compute_capability_minor !== null && this.compute_capability_minor !== undefined) {
	    output.writeFieldBegin('compute_capability_minor', Thrift.Type.I16, 5);
	    output.writeI16(this.compute_capability_minor);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var THardwareInfo = module.exports.THardwareInfo = function (args) {
	  this.num_gpu_hw = null;
	  this.num_cpu_hw = null;
	  this.num_gpu_allocated = null;
	  this.start_gpu = null;
	  this.host_name = null;
	  this.gpu_info = null;
	  if (args) {
	    if (args.num_gpu_hw !== undefined && args.num_gpu_hw !== null) {
	      this.num_gpu_hw = args.num_gpu_hw;
	    }
	    if (args.num_cpu_hw !== undefined && args.num_cpu_hw !== null) {
	      this.num_cpu_hw = args.num_cpu_hw;
	    }
	    if (args.num_gpu_allocated !== undefined && args.num_gpu_allocated !== null) {
	      this.num_gpu_allocated = args.num_gpu_allocated;
	    }
	    if (args.start_gpu !== undefined && args.start_gpu !== null) {
	      this.start_gpu = args.start_gpu;
	    }
	    if (args.host_name !== undefined && args.host_name !== null) {
	      this.host_name = args.host_name;
	    }
	    if (args.gpu_info !== undefined && args.gpu_info !== null) {
	      this.gpu_info = Thrift.copyList(args.gpu_info, [ttypes.TGpuSpecification]);
	    }
	  }
	};
	THardwareInfo.prototype = {};
	THardwareInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I16) {
	          this.num_gpu_hw = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I16) {
	          this.num_cpu_hw = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I16) {
	          this.num_gpu_allocated = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I16) {
	          this.start_gpu = input.readI16();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.host_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.LIST) {
	          this.gpu_info = [];
	          var _rtmp371 = input.readListBegin();
	          var _size70 = _rtmp371.size || 0;
	          for (var _i72 = 0; _i72 < _size70; ++_i72) {
	            var elem73 = null;
	            elem73 = new ttypes.TGpuSpecification();
	            elem73.read(input);
	            this.gpu_info.push(elem73);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	THardwareInfo.prototype.write = function (output) {
	  output.writeStructBegin('THardwareInfo');
	  if (this.num_gpu_hw !== null && this.num_gpu_hw !== undefined) {
	    output.writeFieldBegin('num_gpu_hw', Thrift.Type.I16, 1);
	    output.writeI16(this.num_gpu_hw);
	    output.writeFieldEnd();
	  }
	  if (this.num_cpu_hw !== null && this.num_cpu_hw !== undefined) {
	    output.writeFieldBegin('num_cpu_hw', Thrift.Type.I16, 2);
	    output.writeI16(this.num_cpu_hw);
	    output.writeFieldEnd();
	  }
	  if (this.num_gpu_allocated !== null && this.num_gpu_allocated !== undefined) {
	    output.writeFieldBegin('num_gpu_allocated', Thrift.Type.I16, 3);
	    output.writeI16(this.num_gpu_allocated);
	    output.writeFieldEnd();
	  }
	  if (this.start_gpu !== null && this.start_gpu !== undefined) {
	    output.writeFieldBegin('start_gpu', Thrift.Type.I16, 4);
	    output.writeI16(this.start_gpu);
	    output.writeFieldEnd();
	  }
	  if (this.host_name !== null && this.host_name !== undefined) {
	    output.writeFieldBegin('host_name', Thrift.Type.STRING, 5);
	    output.writeString(this.host_name);
	    output.writeFieldEnd();
	  }
	  if (this.gpu_info !== null && this.gpu_info !== undefined) {
	    output.writeFieldBegin('gpu_info', Thrift.Type.LIST, 6);
	    output.writeListBegin(Thrift.Type.STRUCT, this.gpu_info.length);
	    for (var iter74 in this.gpu_info) {
	      if (this.gpu_info.hasOwnProperty(iter74)) {
	        iter74 = this.gpu_info[iter74];
	        iter74.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TClusterHardwareInfo = module.exports.TClusterHardwareInfo = function (args) {
	  this.hardware_info = null;
	  if (args) {
	    if (args.hardware_info !== undefined && args.hardware_info !== null) {
	      this.hardware_info = Thrift.copyList(args.hardware_info, [ttypes.THardwareInfo]);
	    }
	  }
	};
	TClusterHardwareInfo.prototype = {};
	TClusterHardwareInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.hardware_info = [];
	          var _rtmp376 = input.readListBegin();
	          var _size75 = _rtmp376.size || 0;
	          for (var _i77 = 0; _i77 < _size75; ++_i77) {
	            var elem78 = null;
	            elem78 = new ttypes.THardwareInfo();
	            elem78.read(input);
	            this.hardware_info.push(elem78);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TClusterHardwareInfo.prototype.write = function (output) {
	  output.writeStructBegin('TClusterHardwareInfo');
	  if (this.hardware_info !== null && this.hardware_info !== undefined) {
	    output.writeFieldBegin('hardware_info', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.hardware_info.length);
	    for (var iter79 in this.hardware_info) {
	      if (this.hardware_info.hasOwnProperty(iter79)) {
	        iter79 = this.hardware_info[iter79];
	        iter79.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TMemoryData = module.exports.TMemoryData = function (args) {
	  this.slab = null;
	  this.start_page = null;
	  this.num_pages = null;
	  this.touch = null;
	  this.chunk_key = null;
	  this.buffer_epoch = null;
	  this.is_free = null;
	  if (args) {
	    if (args.slab !== undefined && args.slab !== null) {
	      this.slab = args.slab;
	    }
	    if (args.start_page !== undefined && args.start_page !== null) {
	      this.start_page = args.start_page;
	    }
	    if (args.num_pages !== undefined && args.num_pages !== null) {
	      this.num_pages = args.num_pages;
	    }
	    if (args.touch !== undefined && args.touch !== null) {
	      this.touch = args.touch;
	    }
	    if (args.chunk_key !== undefined && args.chunk_key !== null) {
	      this.chunk_key = Thrift.copyList(args.chunk_key, [null]);
	    }
	    if (args.buffer_epoch !== undefined && args.buffer_epoch !== null) {
	      this.buffer_epoch = args.buffer_epoch;
	    }
	    if (args.is_free !== undefined && args.is_free !== null) {
	      this.is_free = args.is_free;
	    }
	  }
	};
	TMemoryData.prototype = {};
	TMemoryData.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.slab = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.start_page = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.num_pages = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I32) {
	          this.touch = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.LIST) {
	          this.chunk_key = [];
	          var _rtmp381 = input.readListBegin();
	          var _size80 = _rtmp381.size || 0;
	          for (var _i82 = 0; _i82 < _size80; ++_i82) {
	            var elem83 = null;
	            elem83 = input.readI64();
	            this.chunk_key.push(elem83);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I32) {
	          this.buffer_epoch = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_free = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TMemoryData.prototype.write = function (output) {
	  output.writeStructBegin('TMemoryData');
	  if (this.slab !== null && this.slab !== undefined) {
	    output.writeFieldBegin('slab', Thrift.Type.I64, 1);
	    output.writeI64(this.slab);
	    output.writeFieldEnd();
	  }
	  if (this.start_page !== null && this.start_page !== undefined) {
	    output.writeFieldBegin('start_page', Thrift.Type.I32, 2);
	    output.writeI32(this.start_page);
	    output.writeFieldEnd();
	  }
	  if (this.num_pages !== null && this.num_pages !== undefined) {
	    output.writeFieldBegin('num_pages', Thrift.Type.I64, 3);
	    output.writeI64(this.num_pages);
	    output.writeFieldEnd();
	  }
	  if (this.touch !== null && this.touch !== undefined) {
	    output.writeFieldBegin('touch', Thrift.Type.I32, 4);
	    output.writeI32(this.touch);
	    output.writeFieldEnd();
	  }
	  if (this.chunk_key !== null && this.chunk_key !== undefined) {
	    output.writeFieldBegin('chunk_key', Thrift.Type.LIST, 5);
	    output.writeListBegin(Thrift.Type.I64, this.chunk_key.length);
	    for (var iter84 in this.chunk_key) {
	      if (this.chunk_key.hasOwnProperty(iter84)) {
	        iter84 = this.chunk_key[iter84];
	        output.writeI64(iter84);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.buffer_epoch !== null && this.buffer_epoch !== undefined) {
	    output.writeFieldBegin('buffer_epoch', Thrift.Type.I32, 6);
	    output.writeI32(this.buffer_epoch);
	    output.writeFieldEnd();
	  }
	  if (this.is_free !== null && this.is_free !== undefined) {
	    output.writeFieldBegin('is_free', Thrift.Type.BOOL, 7);
	    output.writeBool(this.is_free);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TNodeMemoryInfo = module.exports.TNodeMemoryInfo = function (args) {
	  this.host_name = null;
	  this.page_size = null;
	  this.max_num_pages = null;
	  this.num_pages_allocated = null;
	  this.is_allocation_capped = null;
	  this.node_memory_data = null;
	  if (args) {
	    if (args.host_name !== undefined && args.host_name !== null) {
	      this.host_name = args.host_name;
	    }
	    if (args.page_size !== undefined && args.page_size !== null) {
	      this.page_size = args.page_size;
	    }
	    if (args.max_num_pages !== undefined && args.max_num_pages !== null) {
	      this.max_num_pages = args.max_num_pages;
	    }
	    if (args.num_pages_allocated !== undefined && args.num_pages_allocated !== null) {
	      this.num_pages_allocated = args.num_pages_allocated;
	    }
	    if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {
	      this.is_allocation_capped = args.is_allocation_capped;
	    }
	    if (args.node_memory_data !== undefined && args.node_memory_data !== null) {
	      this.node_memory_data = Thrift.copyList(args.node_memory_data, [ttypes.TMemoryData]);
	    }
	  }
	};
	TNodeMemoryInfo.prototype = {};
	TNodeMemoryInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.host_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.page_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.max_num_pages = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.num_pages_allocated = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_allocation_capped = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.LIST) {
	          this.node_memory_data = [];
	          var _rtmp386 = input.readListBegin();
	          var _size85 = _rtmp386.size || 0;
	          for (var _i87 = 0; _i87 < _size85; ++_i87) {
	            var elem88 = null;
	            elem88 = new ttypes.TMemoryData();
	            elem88.read(input);
	            this.node_memory_data.push(elem88);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TNodeMemoryInfo.prototype.write = function (output) {
	  output.writeStructBegin('TNodeMemoryInfo');
	  if (this.host_name !== null && this.host_name !== undefined) {
	    output.writeFieldBegin('host_name', Thrift.Type.STRING, 1);
	    output.writeString(this.host_name);
	    output.writeFieldEnd();
	  }
	  if (this.page_size !== null && this.page_size !== undefined) {
	    output.writeFieldBegin('page_size', Thrift.Type.I64, 2);
	    output.writeI64(this.page_size);
	    output.writeFieldEnd();
	  }
	  if (this.max_num_pages !== null && this.max_num_pages !== undefined) {
	    output.writeFieldBegin('max_num_pages', Thrift.Type.I64, 3);
	    output.writeI64(this.max_num_pages);
	    output.writeFieldEnd();
	  }
	  if (this.num_pages_allocated !== null && this.num_pages_allocated !== undefined) {
	    output.writeFieldBegin('num_pages_allocated', Thrift.Type.I64, 4);
	    output.writeI64(this.num_pages_allocated);
	    output.writeFieldEnd();
	  }
	  if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {
	    output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 5);
	    output.writeBool(this.is_allocation_capped);
	    output.writeFieldEnd();
	  }
	  if (this.node_memory_data !== null && this.node_memory_data !== undefined) {
	    output.writeFieldBegin('node_memory_data', Thrift.Type.LIST, 6);
	    output.writeListBegin(Thrift.Type.STRUCT, this.node_memory_data.length);
	    for (var iter89 in this.node_memory_data) {
	      if (this.node_memory_data.hasOwnProperty(iter89)) {
	        iter89 = this.node_memory_data[iter89];
	        iter89.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTableMeta = module.exports.TTableMeta = function (args) {
	  this.table_name = null;
	  this.num_cols = null;
	  this.is_view = null;
	  this.is_replicated = null;
	  this.shard_count = null;
	  this.max_rows = null;
	  this.table_id = null;
	  this.max_table_id = null;
	  this.col_types = null;
	  this.col_names = null;
	  if (args) {
	    if (args.table_name !== undefined && args.table_name !== null) {
	      this.table_name = args.table_name;
	    }
	    if (args.num_cols !== undefined && args.num_cols !== null) {
	      this.num_cols = args.num_cols;
	    }
	    if (args.is_view !== undefined && args.is_view !== null) {
	      this.is_view = args.is_view;
	    }
	    if (args.is_replicated !== undefined && args.is_replicated !== null) {
	      this.is_replicated = args.is_replicated;
	    }
	    if (args.shard_count !== undefined && args.shard_count !== null) {
	      this.shard_count = args.shard_count;
	    }
	    if (args.max_rows !== undefined && args.max_rows !== null) {
	      this.max_rows = args.max_rows;
	    }
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.max_table_id !== undefined && args.max_table_id !== null) {
	      this.max_table_id = args.max_table_id;
	    }
	    if (args.col_types !== undefined && args.col_types !== null) {
	      this.col_types = Thrift.copyList(args.col_types, [common_ttypes.TTypeInfo]);
	    }
	    if (args.col_names !== undefined && args.col_names !== null) {
	      this.col_names = Thrift.copyList(args.col_names, [null]);
	    }
	  }
	};
	TTableMeta.prototype = {};
	TTableMeta.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.table_name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.num_cols = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_view = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_replicated = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.shard_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I64) {
	          this.max_rows = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.I64) {
	          this.table_id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 9:
	        if (ftype == Thrift.Type.I64) {
	          this.max_table_id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 10:
	        if (ftype == Thrift.Type.LIST) {
	          this.col_types = [];
	          var _rtmp391 = input.readListBegin();
	          var _size90 = _rtmp391.size || 0;
	          for (var _i92 = 0; _i92 < _size90; ++_i92) {
	            var elem93 = null;
	            elem93 = new common_ttypes.TTypeInfo();
	            elem93.read(input);
	            this.col_types.push(elem93);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 11:
	        if (ftype == Thrift.Type.LIST) {
	          this.col_names = [];
	          var _rtmp395 = input.readListBegin();
	          var _size94 = _rtmp395.size || 0;
	          for (var _i96 = 0; _i96 < _size94; ++_i96) {
	            var elem97 = null;
	            elem97 = input.readString();
	            this.col_names.push(elem97);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTableMeta.prototype.write = function (output) {
	  output.writeStructBegin('TTableMeta');
	  if (this.table_name !== null && this.table_name !== undefined) {
	    output.writeFieldBegin('table_name', Thrift.Type.STRING, 1);
	    output.writeString(this.table_name);
	    output.writeFieldEnd();
	  }
	  if (this.num_cols !== null && this.num_cols !== undefined) {
	    output.writeFieldBegin('num_cols', Thrift.Type.I64, 2);
	    output.writeI64(this.num_cols);
	    output.writeFieldEnd();
	  }
	  if (this.is_view !== null && this.is_view !== undefined) {
	    output.writeFieldBegin('is_view', Thrift.Type.BOOL, 4);
	    output.writeBool(this.is_view);
	    output.writeFieldEnd();
	  }
	  if (this.is_replicated !== null && this.is_replicated !== undefined) {
	    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 5);
	    output.writeBool(this.is_replicated);
	    output.writeFieldEnd();
	  }
	  if (this.shard_count !== null && this.shard_count !== undefined) {
	    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);
	    output.writeI64(this.shard_count);
	    output.writeFieldEnd();
	  }
	  if (this.max_rows !== null && this.max_rows !== undefined) {
	    output.writeFieldBegin('max_rows', Thrift.Type.I64, 7);
	    output.writeI64(this.max_rows);
	    output.writeFieldEnd();
	  }
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I64, 8);
	    output.writeI64(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.max_table_id !== null && this.max_table_id !== undefined) {
	    output.writeFieldBegin('max_table_id', Thrift.Type.I64, 9);
	    output.writeI64(this.max_table_id);
	    output.writeFieldEnd();
	  }
	  if (this.col_types !== null && this.col_types !== undefined) {
	    output.writeFieldBegin('col_types', Thrift.Type.LIST, 10);
	    output.writeListBegin(Thrift.Type.STRUCT, this.col_types.length);
	    for (var iter98 in this.col_types) {
	      if (this.col_types.hasOwnProperty(iter98)) {
	        iter98 = this.col_types[iter98];
	        iter98.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.col_names !== null && this.col_names !== undefined) {
	    output.writeFieldBegin('col_names', Thrift.Type.LIST, 11);
	    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);
	    for (var iter99 in this.col_names) {
	      if (this.col_names.hasOwnProperty(iter99)) {
	        iter99 = this.col_names[iter99];
	        output.writeString(iter99);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTableDetails = module.exports.TTableDetails = function (args) {
	  this.row_desc = null;
	  this.fragment_size = null;
	  this.page_size = null;
	  this.max_rows = null;
	  this.view_sql = null;
	  this.shard_count = null;
	  this.key_metainfo = null;
	  this.is_temporary = null;
	  this.partition_detail = null;
	  if (args) {
	    if (args.row_desc !== undefined && args.row_desc !== null) {
	      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
	    }
	    if (args.fragment_size !== undefined && args.fragment_size !== null) {
	      this.fragment_size = args.fragment_size;
	    }
	    if (args.page_size !== undefined && args.page_size !== null) {
	      this.page_size = args.page_size;
	    }
	    if (args.max_rows !== undefined && args.max_rows !== null) {
	      this.max_rows = args.max_rows;
	    }
	    if (args.view_sql !== undefined && args.view_sql !== null) {
	      this.view_sql = args.view_sql;
	    }
	    if (args.shard_count !== undefined && args.shard_count !== null) {
	      this.shard_count = args.shard_count;
	    }
	    if (args.key_metainfo !== undefined && args.key_metainfo !== null) {
	      this.key_metainfo = args.key_metainfo;
	    }
	    if (args.is_temporary !== undefined && args.is_temporary !== null) {
	      this.is_temporary = args.is_temporary;
	    }
	    if (args.partition_detail !== undefined && args.partition_detail !== null) {
	      this.partition_detail = args.partition_detail;
	    }
	  }
	};
	TTableDetails.prototype = {};
	TTableDetails.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.row_desc = [];
	          var _rtmp3101 = input.readListBegin();
	          var _size100 = _rtmp3101.size || 0;
	          for (var _i102 = 0; _i102 < _size100; ++_i102) {
	            var elem103 = null;
	            elem103 = new ttypes.TColumnType();
	            elem103.read(input);
	            this.row_desc.push(elem103);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.fragment_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.page_size = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.max_rows = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.view_sql = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.shard_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.STRING) {
	          this.key_metainfo = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_temporary = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 9:
	        if (ftype == Thrift.Type.I32) {
	          this.partition_detail = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTableDetails.prototype.write = function (output) {
	  output.writeStructBegin('TTableDetails');
	  if (this.row_desc !== null && this.row_desc !== undefined) {
	    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
	    for (var iter104 in this.row_desc) {
	      if (this.row_desc.hasOwnProperty(iter104)) {
	        iter104 = this.row_desc[iter104];
	        iter104.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.fragment_size !== null && this.fragment_size !== undefined) {
	    output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);
	    output.writeI64(this.fragment_size);
	    output.writeFieldEnd();
	  }
	  if (this.page_size !== null && this.page_size !== undefined) {
	    output.writeFieldBegin('page_size', Thrift.Type.I64, 3);
	    output.writeI64(this.page_size);
	    output.writeFieldEnd();
	  }
	  if (this.max_rows !== null && this.max_rows !== undefined) {
	    output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);
	    output.writeI64(this.max_rows);
	    output.writeFieldEnd();
	  }
	  if (this.view_sql !== null && this.view_sql !== undefined) {
	    output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);
	    output.writeString(this.view_sql);
	    output.writeFieldEnd();
	  }
	  if (this.shard_count !== null && this.shard_count !== undefined) {
	    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);
	    output.writeI64(this.shard_count);
	    output.writeFieldEnd();
	  }
	  if (this.key_metainfo !== null && this.key_metainfo !== undefined) {
	    output.writeFieldBegin('key_metainfo', Thrift.Type.STRING, 7);
	    output.writeString(this.key_metainfo);
	    output.writeFieldEnd();
	  }
	  if (this.is_temporary !== null && this.is_temporary !== undefined) {
	    output.writeFieldBegin('is_temporary', Thrift.Type.BOOL, 8);
	    output.writeBool(this.is_temporary);
	    output.writeFieldEnd();
	  }
	  if (this.partition_detail !== null && this.partition_detail !== undefined) {
	    output.writeFieldBegin('partition_detail', Thrift.Type.I32, 9);
	    output.writeI32(this.partition_detail);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TColumnRange = module.exports.TColumnRange = function (args) {
	  this.type = null;
	  this.col_id = null;
	  this.table_id = null;
	  this.has_nulls = null;
	  this.int_min = null;
	  this.int_max = null;
	  this.bucket = null;
	  this.fp_min = null;
	  this.fp_max = null;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.col_id !== undefined && args.col_id !== null) {
	      this.col_id = args.col_id;
	    }
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.has_nulls !== undefined && args.has_nulls !== null) {
	      this.has_nulls = args.has_nulls;
	    }
	    if (args.int_min !== undefined && args.int_min !== null) {
	      this.int_min = args.int_min;
	    }
	    if (args.int_max !== undefined && args.int_max !== null) {
	      this.int_max = args.int_max;
	    }
	    if (args.bucket !== undefined && args.bucket !== null) {
	      this.bucket = args.bucket;
	    }
	    if (args.fp_min !== undefined && args.fp_min !== null) {
	      this.fp_min = args.fp_min;
	    }
	    if (args.fp_max !== undefined && args.fp_max !== null) {
	      this.fp_max = args.fp_max;
	    }
	  }
	};
	TColumnRange.prototype = {};
	TColumnRange.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.col_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.table_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.has_nulls = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.int_min = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.I64) {
	          this.int_max = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.I64) {
	          this.bucket = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.DOUBLE) {
	          this.fp_min = input.readDouble();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 9:
	        if (ftype == Thrift.Type.DOUBLE) {
	          this.fp_max = input.readDouble();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TColumnRange.prototype.write = function (output) {
	  output.writeStructBegin('TColumnRange');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.col_id !== null && this.col_id !== undefined) {
	    output.writeFieldBegin('col_id', Thrift.Type.I32, 2);
	    output.writeI32(this.col_id);
	    output.writeFieldEnd();
	  }
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
	    output.writeI32(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.has_nulls !== null && this.has_nulls !== undefined) {
	    output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);
	    output.writeBool(this.has_nulls);
	    output.writeFieldEnd();
	  }
	  if (this.int_min !== null && this.int_min !== undefined) {
	    output.writeFieldBegin('int_min', Thrift.Type.I64, 5);
	    output.writeI64(this.int_min);
	    output.writeFieldEnd();
	  }
	  if (this.int_max !== null && this.int_max !== undefined) {
	    output.writeFieldBegin('int_max', Thrift.Type.I64, 6);
	    output.writeI64(this.int_max);
	    output.writeFieldEnd();
	  }
	  if (this.bucket !== null && this.bucket !== undefined) {
	    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);
	    output.writeI64(this.bucket);
	    output.writeFieldEnd();
	  }
	  if (this.fp_min !== null && this.fp_min !== undefined) {
	    output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);
	    output.writeDouble(this.fp_min);
	    output.writeFieldEnd();
	  }
	  if (this.fp_max !== null && this.fp_max !== undefined) {
	    output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);
	    output.writeDouble(this.fp_max);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDictionaryGeneration = module.exports.TDictionaryGeneration = function (args) {
	  this.dict_id = null;
	  this.entry_count = null;
	  if (args) {
	    if (args.dict_id !== undefined && args.dict_id !== null) {
	      this.dict_id = args.dict_id;
	    }
	    if (args.entry_count !== undefined && args.entry_count !== null) {
	      this.entry_count = args.entry_count;
	    }
	  }
	};
	TDictionaryGeneration.prototype = {};
	TDictionaryGeneration.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.dict_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.entry_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDictionaryGeneration.prototype.write = function (output) {
	  output.writeStructBegin('TDictionaryGeneration');
	  if (this.dict_id !== null && this.dict_id !== undefined) {
	    output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);
	    output.writeI32(this.dict_id);
	    output.writeFieldEnd();
	  }
	  if (this.entry_count !== null && this.entry_count !== undefined) {
	    output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);
	    output.writeI64(this.entry_count);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTableGeneration = module.exports.TTableGeneration = function (args) {
	  this.table_id = null;
	  this.tuple_count = null;
	  this.start_rowid = null;
	  if (args) {
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.tuple_count !== undefined && args.tuple_count !== null) {
	      this.tuple_count = args.tuple_count;
	    }
	    if (args.start_rowid !== undefined && args.start_rowid !== null) {
	      this.start_rowid = args.start_rowid;
	    }
	  }
	};
	TTableGeneration.prototype = {};
	TTableGeneration.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.table_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I64) {
	          this.tuple_count = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.start_rowid = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTableGeneration.prototype.write = function (output) {
	  output.writeStructBegin('TTableGeneration');
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);
	    output.writeI32(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.tuple_count !== null && this.tuple_count !== undefined) {
	    output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);
	    output.writeI64(this.tuple_count);
	    output.writeFieldEnd();
	  }
	  if (this.start_rowid !== null && this.start_rowid !== undefined) {
	    output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);
	    output.writeI64(this.start_rowid);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TPendingQuery = module.exports.TPendingQuery = function (args) {
	  this.id = null;
	  this.column_ranges = null;
	  this.dictionary_generations = null;
	  this.table_generations = null;
	  this.parent_session_id = null;
	  if (args) {
	    if (args.id !== undefined && args.id !== null) {
	      this.id = args.id;
	    }
	    if (args.column_ranges !== undefined && args.column_ranges !== null) {
	      this.column_ranges = Thrift.copyList(args.column_ranges, [ttypes.TColumnRange]);
	    }
	    if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {
	      this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [ttypes.TDictionaryGeneration]);
	    }
	    if (args.table_generations !== undefined && args.table_generations !== null) {
	      this.table_generations = Thrift.copyList(args.table_generations, [ttypes.TTableGeneration]);
	    }
	    if (args.parent_session_id !== undefined && args.parent_session_id !== null) {
	      this.parent_session_id = args.parent_session_id;
	    }
	  }
	};
	TPendingQuery.prototype = {};
	TPendingQuery.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.column_ranges = [];
	          var _rtmp3106 = input.readListBegin();
	          var _size105 = _rtmp3106.size || 0;
	          for (var _i107 = 0; _i107 < _size105; ++_i107) {
	            var elem108 = null;
	            elem108 = new ttypes.TColumnRange();
	            elem108.read(input);
	            this.column_ranges.push(elem108);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          this.dictionary_generations = [];
	          var _rtmp3110 = input.readListBegin();
	          var _size109 = _rtmp3110.size || 0;
	          for (var _i111 = 0; _i111 < _size109; ++_i111) {
	            var elem112 = null;
	            elem112 = new ttypes.TDictionaryGeneration();
	            elem112.read(input);
	            this.dictionary_generations.push(elem112);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          this.table_generations = [];
	          var _rtmp3114 = input.readListBegin();
	          var _size113 = _rtmp3114.size || 0;
	          for (var _i115 = 0; _i115 < _size113; ++_i115) {
	            var elem116 = null;
	            elem116 = new ttypes.TTableGeneration();
	            elem116.read(input);
	            this.table_generations.push(elem116);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.parent_session_id = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TPendingQuery.prototype.write = function (output) {
	  output.writeStructBegin('TPendingQuery');
	  if (this.id !== null && this.id !== undefined) {
	    output.writeFieldBegin('id', Thrift.Type.I64, 1);
	    output.writeI64(this.id);
	    output.writeFieldEnd();
	  }
	  if (this.column_ranges !== null && this.column_ranges !== undefined) {
	    output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);
	    for (var iter117 in this.column_ranges) {
	      if (this.column_ranges.hasOwnProperty(iter117)) {
	        iter117 = this.column_ranges[iter117];
	        iter117.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {
	    output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);
	    for (var iter118 in this.dictionary_generations) {
	      if (this.dictionary_generations.hasOwnProperty(iter118)) {
	        iter118 = this.dictionary_generations[iter118];
	        iter118.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.table_generations !== null && this.table_generations !== undefined) {
	    output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);
	    for (var iter119 in this.table_generations) {
	      if (this.table_generations.hasOwnProperty(iter119)) {
	        iter119 = this.table_generations[iter119];
	        iter119.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.parent_session_id !== null && this.parent_session_id !== undefined) {
	    output.writeFieldBegin('parent_session_id', Thrift.Type.STRING, 5);
	    output.writeString(this.parent_session_id);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TVarLen = module.exports.TVarLen = function (args) {
	  this.payload = null;
	  this.is_null = null;
	  if (args) {
	    if (args.payload !== undefined && args.payload !== null) {
	      this.payload = args.payload;
	    }
	    if (args.is_null !== undefined && args.is_null !== null) {
	      this.is_null = args.is_null;
	    }
	  }
	};
	TVarLen.prototype = {};
	TVarLen.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.payload = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_null = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TVarLen.prototype.write = function (output) {
	  output.writeStructBegin('TVarLen');
	  if (this.payload !== null && this.payload !== undefined) {
	    output.writeFieldBegin('payload', Thrift.Type.STRING, 1);
	    output.writeBinary(this.payload);
	    output.writeFieldEnd();
	  }
	  if (this.is_null !== null && this.is_null !== undefined) {
	    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
	    output.writeBool(this.is_null);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDataBlockPtr = module.exports.TDataBlockPtr = function (args) {
	  this.fixed_len_data = null;
	  this.var_len_data = null;
	  if (args) {
	    if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {
	      this.fixed_len_data = args.fixed_len_data;
	    }
	    if (args.var_len_data !== undefined && args.var_len_data !== null) {
	      this.var_len_data = Thrift.copyList(args.var_len_data, [ttypes.TVarLen]);
	    }
	  }
	};
	TDataBlockPtr.prototype = {};
	TDataBlockPtr.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.fixed_len_data = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.LIST) {
	          this.var_len_data = [];
	          var _rtmp3121 = input.readListBegin();
	          var _size120 = _rtmp3121.size || 0;
	          for (var _i122 = 0; _i122 < _size120; ++_i122) {
	            var elem123 = null;
	            elem123 = new ttypes.TVarLen();
	            elem123.read(input);
	            this.var_len_data.push(elem123);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDataBlockPtr.prototype.write = function (output) {
	  output.writeStructBegin('TDataBlockPtr');
	  if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {
	    output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);
	    output.writeBinary(this.fixed_len_data);
	    output.writeFieldEnd();
	  }
	  if (this.var_len_data !== null && this.var_len_data !== undefined) {
	    output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);
	    output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);
	    for (var iter124 in this.var_len_data) {
	      if (this.var_len_data.hasOwnProperty(iter124)) {
	        iter124 = this.var_len_data[iter124];
	        iter124.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TInsertData = module.exports.TInsertData = function (args) {
	  this.db_id = null;
	  this.table_id = null;
	  this.column_ids = null;
	  this.data = null;
	  this.num_rows = null;
	  if (args) {
	    if (args.db_id !== undefined && args.db_id !== null) {
	      this.db_id = args.db_id;
	    }
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.column_ids !== undefined && args.column_ids !== null) {
	      this.column_ids = Thrift.copyList(args.column_ids, [null]);
	    }
	    if (args.data !== undefined && args.data !== null) {
	      this.data = Thrift.copyList(args.data, [ttypes.TDataBlockPtr]);
	    }
	    if (args.num_rows !== undefined && args.num_rows !== null) {
	      this.num_rows = args.num_rows;
	    }
	  }
	};
	TInsertData.prototype = {};
	TInsertData.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.db_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.table_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          this.column_ids = [];
	          var _rtmp3126 = input.readListBegin();
	          var _size125 = _rtmp3126.size || 0;
	          for (var _i127 = 0; _i127 < _size125; ++_i127) {
	            var elem128 = null;
	            elem128 = input.readI32();
	            this.column_ids.push(elem128);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.LIST) {
	          this.data = [];
	          var _rtmp3130 = input.readListBegin();
	          var _size129 = _rtmp3130.size || 0;
	          for (var _i131 = 0; _i131 < _size129; ++_i131) {
	            var elem132 = null;
	            elem132 = new ttypes.TDataBlockPtr();
	            elem132.read(input);
	            this.data.push(elem132);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.num_rows = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TInsertData.prototype.write = function (output) {
	  output.writeStructBegin('TInsertData');
	  if (this.db_id !== null && this.db_id !== undefined) {
	    output.writeFieldBegin('db_id', Thrift.Type.I32, 1);
	    output.writeI32(this.db_id);
	    output.writeFieldEnd();
	  }
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
	    output.writeI32(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.column_ids !== null && this.column_ids !== undefined) {
	    output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.I32, this.column_ids.length);
	    for (var iter133 in this.column_ids) {
	      if (this.column_ids.hasOwnProperty(iter133)) {
	        iter133 = this.column_ids[iter133];
	        output.writeI32(iter133);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.data !== null && this.data !== undefined) {
	    output.writeFieldBegin('data', Thrift.Type.LIST, 4);
	    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
	    for (var iter134 in this.data) {
	      if (this.data.hasOwnProperty(iter134)) {
	        iter134 = this.data[iter134];
	        iter134.write(output);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.num_rows !== null && this.num_rows !== undefined) {
	    output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);
	    output.writeI64(this.num_rows);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TPendingRenderQuery = module.exports.TPendingRenderQuery = function (args) {
	  this.id = null;
	  if (args) {
	    if (args.id !== undefined && args.id !== null) {
	      this.id = args.id;
	    }
	  }
	};
	TPendingRenderQuery.prototype = {};
	TPendingRenderQuery.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I64) {
	          this.id = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TPendingRenderQuery.prototype.write = function (output) {
	  output.writeStructBegin('TPendingRenderQuery');
	  if (this.id !== null && this.id !== undefined) {
	    output.writeFieldBegin('id', Thrift.Type.I64, 1);
	    output.writeI64(this.id);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRenderParseResult = module.exports.TRenderParseResult = function (args) {
	  this.merge_type = null;
	  this.node_id = null;
	  this.execution_time_ms = null;
	  this.render_time_ms = null;
	  this.total_time_ms = null;
	  if (args) {
	    if (args.merge_type !== undefined && args.merge_type !== null) {
	      this.merge_type = args.merge_type;
	    }
	    if (args.node_id !== undefined && args.node_id !== null) {
	      this.node_id = args.node_id;
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
	      this.render_time_ms = args.render_time_ms;
	    }
	    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
	      this.total_time_ms = args.total_time_ms;
	    }
	  }
	};
	TRenderParseResult.prototype = {};
	TRenderParseResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.merge_type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.node_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.render_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.total_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRenderParseResult.prototype.write = function (output) {
	  output.writeStructBegin('TRenderParseResult');
	  if (this.merge_type !== null && this.merge_type !== undefined) {
	    output.writeFieldBegin('merge_type', Thrift.Type.I32, 1);
	    output.writeI32(this.merge_type);
	    output.writeFieldEnd();
	  }
	  if (this.node_id !== null && this.node_id !== undefined) {
	    output.writeFieldBegin('node_id', Thrift.Type.I32, 2);
	    output.writeI32(this.node_id);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
	    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
	    output.writeI64(this.render_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
	    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
	    output.writeI64(this.total_time_ms);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRawRenderPassDataResult = module.exports.TRawRenderPassDataResult = function (args) {
	  this.num_pixel_channels = null;
	  this.num_pixel_samples = null;
	  this.pixels = null;
	  this.row_ids_A = null;
	  this.row_ids_B = null;
	  this.table_ids = null;
	  this.accum_data = null;
	  this.accum_depth = null;
	  if (args) {
	    if (args.num_pixel_channels !== undefined && args.num_pixel_channels !== null) {
	      this.num_pixel_channels = args.num_pixel_channels;
	    }
	    if (args.num_pixel_samples !== undefined && args.num_pixel_samples !== null) {
	      this.num_pixel_samples = args.num_pixel_samples;
	    }
	    if (args.pixels !== undefined && args.pixels !== null) {
	      this.pixels = args.pixels;
	    }
	    if (args.row_ids_A !== undefined && args.row_ids_A !== null) {
	      this.row_ids_A = args.row_ids_A;
	    }
	    if (args.row_ids_B !== undefined && args.row_ids_B !== null) {
	      this.row_ids_B = args.row_ids_B;
	    }
	    if (args.table_ids !== undefined && args.table_ids !== null) {
	      this.table_ids = args.table_ids;
	    }
	    if (args.accum_data !== undefined && args.accum_data !== null) {
	      this.accum_data = args.accum_data;
	    }
	    if (args.accum_depth !== undefined && args.accum_depth !== null) {
	      this.accum_depth = args.accum_depth;
	    }
	  }
	};
	TRawRenderPassDataResult.prototype = {};
	TRawRenderPassDataResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.num_pixel_channels = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.num_pixel_samples = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.pixels = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.row_ids_A = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.STRING) {
	          this.row_ids_B = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.STRING) {
	          this.table_ids = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.STRING) {
	          this.accum_data = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.I32) {
	          this.accum_depth = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRawRenderPassDataResult.prototype.write = function (output) {
	  output.writeStructBegin('TRawRenderPassDataResult');
	  if (this.num_pixel_channels !== null && this.num_pixel_channels !== undefined) {
	    output.writeFieldBegin('num_pixel_channels', Thrift.Type.I32, 1);
	    output.writeI32(this.num_pixel_channels);
	    output.writeFieldEnd();
	  }
	  if (this.num_pixel_samples !== null && this.num_pixel_samples !== undefined) {
	    output.writeFieldBegin('num_pixel_samples', Thrift.Type.I32, 2);
	    output.writeI32(this.num_pixel_samples);
	    output.writeFieldEnd();
	  }
	  if (this.pixels !== null && this.pixels !== undefined) {
	    output.writeFieldBegin('pixels', Thrift.Type.STRING, 3);
	    output.writeBinary(this.pixels);
	    output.writeFieldEnd();
	  }
	  if (this.row_ids_A !== null && this.row_ids_A !== undefined) {
	    output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 4);
	    output.writeBinary(this.row_ids_A);
	    output.writeFieldEnd();
	  }
	  if (this.row_ids_B !== null && this.row_ids_B !== undefined) {
	    output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 5);
	    output.writeBinary(this.row_ids_B);
	    output.writeFieldEnd();
	  }
	  if (this.table_ids !== null && this.table_ids !== undefined) {
	    output.writeFieldBegin('table_ids', Thrift.Type.STRING, 6);
	    output.writeBinary(this.table_ids);
	    output.writeFieldEnd();
	  }
	  if (this.accum_data !== null && this.accum_data !== undefined) {
	    output.writeFieldBegin('accum_data', Thrift.Type.STRING, 7);
	    output.writeBinary(this.accum_data);
	    output.writeFieldEnd();
	  }
	  if (this.accum_depth !== null && this.accum_depth !== undefined) {
	    output.writeFieldBegin('accum_depth', Thrift.Type.I32, 8);
	    output.writeI32(this.accum_depth);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRawPixelData = module.exports.TRawPixelData = function (args) {
	  this.width = null;
	  this.height = null;
	  this.render_pass_map = null;
	  if (args) {
	    if (args.width !== undefined && args.width !== null) {
	      this.width = args.width;
	    }
	    if (args.height !== undefined && args.height !== null) {
	      this.height = args.height;
	    }
	    if (args.render_pass_map !== undefined && args.render_pass_map !== null) {
	      this.render_pass_map = Thrift.copyMap(args.render_pass_map, [ttypes.TRawRenderPassDataResult]);
	    }
	  }
	};
	TRawPixelData.prototype = {};
	TRawPixelData.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.width = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.height = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.MAP) {
	          this.render_pass_map = {};
	          var _rtmp3136 = input.readMapBegin();
	          var _size135 = _rtmp3136.size || 0;
	          for (var _i137 = 0; _i137 < _size135; ++_i137) {
	            var key138 = null;
	            var val139 = null;
	            key138 = input.readI32();
	            val139 = new ttypes.TRawRenderPassDataResult();
	            val139.read(input);
	            this.render_pass_map[key138] = val139;
	          }
	          input.readMapEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRawPixelData.prototype.write = function (output) {
	  output.writeStructBegin('TRawPixelData');
	  if (this.width !== null && this.width !== undefined) {
	    output.writeFieldBegin('width', Thrift.Type.I32, 1);
	    output.writeI32(this.width);
	    output.writeFieldEnd();
	  }
	  if (this.height !== null && this.height !== undefined) {
	    output.writeFieldBegin('height', Thrift.Type.I32, 2);
	    output.writeI32(this.height);
	    output.writeFieldEnd();
	  }
	  if (this.render_pass_map !== null && this.render_pass_map !== undefined) {
	    output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);
	    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));
	    for (var kiter140 in this.render_pass_map) {
	      if (this.render_pass_map.hasOwnProperty(kiter140)) {
	        var viter141 = this.render_pass_map[kiter140];
	        output.writeI32(kiter140);
	        viter141.write(output);
	      }
	    }
	    output.writeMapEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRenderDatum = module.exports.TRenderDatum = function (args) {
	  this.type = null;
	  this.cnt = null;
	  this.value = null;
	  if (args) {
	    if (args.type !== undefined && args.type !== null) {
	      this.type = args.type;
	    }
	    if (args.cnt !== undefined && args.cnt !== null) {
	      this.cnt = args.cnt;
	    }
	    if (args.value !== undefined && args.value !== null) {
	      this.value = args.value;
	    }
	  }
	};
	TRenderDatum.prototype = {};
	TRenderDatum.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.type = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.cnt = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRING) {
	          this.value = input.readBinary();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRenderDatum.prototype.write = function (output) {
	  output.writeStructBegin('TRenderDatum');
	  if (this.type !== null && this.type !== undefined) {
	    output.writeFieldBegin('type', Thrift.Type.I32, 1);
	    output.writeI32(this.type);
	    output.writeFieldEnd();
	  }
	  if (this.cnt !== null && this.cnt !== undefined) {
	    output.writeFieldBegin('cnt', Thrift.Type.I32, 2);
	    output.writeI32(this.cnt);
	    output.writeFieldEnd();
	  }
	  if (this.value !== null && this.value !== undefined) {
	    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
	    output.writeBinary(this.value);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TRenderStepResult = module.exports.TRenderStepResult = function (args) {
	  this.merge_data = null;
	  this.raw_pixel_data = null;
	  this.execution_time_ms = null;
	  this.render_time_ms = null;
	  this.total_time_ms = null;
	  if (args) {
	    if (args.merge_data !== undefined && args.merge_data !== null) {
	      this.merge_data = Thrift.copyMap(args.merge_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, ttypes.TRenderDatum]);
	    }
	    if (args.raw_pixel_data !== undefined && args.raw_pixel_data !== null) {
	      this.raw_pixel_data = new ttypes.TRawPixelData(args.raw_pixel_data);
	    }
	    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
	      this.execution_time_ms = args.execution_time_ms;
	    }
	    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
	      this.render_time_ms = args.render_time_ms;
	    }
	    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
	      this.total_time_ms = args.total_time_ms;
	    }
	  }
	};
	TRenderStepResult.prototype = {};
	TRenderStepResult.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.MAP) {
	          this.merge_data = {};
	          var _rtmp3143 = input.readMapBegin();
	          var _size142 = _rtmp3143.size || 0;
	          for (var _i144 = 0; _i144 < _size142; ++_i144) {
	            var key145 = null;
	            var val146 = null;
	            key145 = input.readString();
	            val146 = {};
	            var _rtmp3148 = input.readMapBegin();
	            var _size147 = _rtmp3148.size || 0;
	            for (var _i149 = 0; _i149 < _size147; ++_i149) {
	              var key150 = null;
	              var val151 = null;
	              key150 = input.readString();
	              val151 = {};
	              var _rtmp3153 = input.readMapBegin();
	              var _size152 = _rtmp3153.size || 0;
	              for (var _i154 = 0; _i154 < _size152; ++_i154) {
	                var key155 = null;
	                var val156 = null;
	                key155 = input.readString();
	                val156 = {};
	                var _rtmp3158 = input.readMapBegin();
	                var _size157 = _rtmp3158.size || 0;
	                for (var _i159 = 0; _i159 < _size157; ++_i159) {
	                  var key160 = null;
	                  var val161 = null;
	                  key160 = input.readString();
	                  val161 = [];
	                  var _rtmp3163 = input.readListBegin();
	                  var _size162 = _rtmp3163.size || 0;
	                  for (var _i164 = 0; _i164 < _size162; ++_i164) {
	                    var elem165 = null;
	                    elem165 = new ttypes.TRenderDatum();
	                    elem165.read(input);
	                    val161.push(elem165);
	                  }
	                  input.readListEnd();
	                  val156[key160] = val161;
	                }
	                input.readMapEnd();
	                val151[key155] = val156;
	              }
	              input.readMapEnd();
	              val146[key150] = val151;
	            }
	            input.readMapEnd();
	            this.merge_data[key145] = val146;
	          }
	          input.readMapEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.raw_pixel_data = new ttypes.TRawPixelData();
	          this.raw_pixel_data.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.execution_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.I64) {
	          this.render_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I64) {
	          this.total_time_ms = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TRenderStepResult.prototype.write = function (output) {
	  output.writeStructBegin('TRenderStepResult');
	  if (this.merge_data !== null && this.merge_data !== undefined) {
	    output.writeFieldBegin('merge_data', Thrift.Type.MAP, 1);
	    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merge_data));
	    for (var kiter166 in this.merge_data) {
	      if (this.merge_data.hasOwnProperty(kiter166)) {
	        var viter167 = this.merge_data[kiter166];
	        output.writeString(kiter166);
	        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter167));
	        for (var kiter168 in viter167) {
	          if (viter167.hasOwnProperty(kiter168)) {
	            var viter169 = viter167[kiter168];
	            output.writeString(kiter168);
	            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter169));
	            for (var kiter170 in viter169) {
	              if (viter169.hasOwnProperty(kiter170)) {
	                var viter171 = viter169[kiter170];
	                output.writeString(kiter170);
	                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter171));
	                for (var kiter172 in viter171) {
	                  if (viter171.hasOwnProperty(kiter172)) {
	                    var viter173 = viter171[kiter172];
	                    output.writeString(kiter172);
	                    output.writeListBegin(Thrift.Type.STRUCT, viter173.length);
	                    for (var iter174 in viter173) {
	                      if (viter173.hasOwnProperty(iter174)) {
	                        iter174 = viter173[iter174];
	                        iter174.write(output);
	                      }
	                    }
	                    output.writeListEnd();
	                  }
	                }
	                output.writeMapEnd();
	              }
	            }
	            output.writeMapEnd();
	          }
	        }
	        output.writeMapEnd();
	      }
	    }
	    output.writeMapEnd();
	    output.writeFieldEnd();
	  }
	  if (this.raw_pixel_data !== null && this.raw_pixel_data !== undefined) {
	    output.writeFieldBegin('raw_pixel_data', Thrift.Type.STRUCT, 2);
	    this.raw_pixel_data.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
	    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
	    output.writeI64(this.execution_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
	    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
	    output.writeI64(this.render_time_ms);
	    output.writeFieldEnd();
	  }
	  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
	    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
	    output.writeI64(this.total_time_ms);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDatabasePermissions = module.exports.TDatabasePermissions = function (args) {
	  this.create_ = null;
	  this.delete_ = null;
	  this.view_sql_editor_ = null;
	  this.access_ = null;
	  if (args) {
	    if (args.create_ !== undefined && args.create_ !== null) {
	      this.create_ = args.create_;
	    }
	    if (args.delete_ !== undefined && args.delete_ !== null) {
	      this.delete_ = args.delete_;
	    }
	    if (args.view_sql_editor_ !== undefined && args.view_sql_editor_ !== null) {
	      this.view_sql_editor_ = args.view_sql_editor_;
	    }
	    if (args.access_ !== undefined && args.access_ !== null) {
	      this.access_ = args.access_;
	    }
	  }
	};
	TDatabasePermissions.prototype = {};
	TDatabasePermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.create_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.delete_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.view_sql_editor_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.access_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDatabasePermissions.prototype.write = function (output) {
	  output.writeStructBegin('TDatabasePermissions');
	  if (this.create_ !== null && this.create_ !== undefined) {
	    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
	    output.writeBool(this.create_);
	    output.writeFieldEnd();
	  }
	  if (this.delete_ !== null && this.delete_ !== undefined) {
	    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);
	    output.writeBool(this.delete_);
	    output.writeFieldEnd();
	  }
	  if (this.view_sql_editor_ !== null && this.view_sql_editor_ !== undefined) {
	    output.writeFieldBegin('view_sql_editor_', Thrift.Type.BOOL, 3);
	    output.writeBool(this.view_sql_editor_);
	    output.writeFieldEnd();
	  }
	  if (this.access_ !== null && this.access_ !== undefined) {
	    output.writeFieldBegin('access_', Thrift.Type.BOOL, 4);
	    output.writeBool(this.access_);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTablePermissions = module.exports.TTablePermissions = function (args) {
	  this.create_ = null;
	  this.drop_ = null;
	  this.select_ = null;
	  this.insert_ = null;
	  this.update_ = null;
	  this.delete_ = null;
	  this.truncate_ = null;
	  this.alter_ = null;
	  if (args) {
	    if (args.create_ !== undefined && args.create_ !== null) {
	      this.create_ = args.create_;
	    }
	    if (args.drop_ !== undefined && args.drop_ !== null) {
	      this.drop_ = args.drop_;
	    }
	    if (args.select_ !== undefined && args.select_ !== null) {
	      this.select_ = args.select_;
	    }
	    if (args.insert_ !== undefined && args.insert_ !== null) {
	      this.insert_ = args.insert_;
	    }
	    if (args.update_ !== undefined && args.update_ !== null) {
	      this.update_ = args.update_;
	    }
	    if (args.delete_ !== undefined && args.delete_ !== null) {
	      this.delete_ = args.delete_;
	    }
	    if (args.truncate_ !== undefined && args.truncate_ !== null) {
	      this.truncate_ = args.truncate_;
	    }
	    if (args.alter_ !== undefined && args.alter_ !== null) {
	      this.alter_ = args.alter_;
	    }
	  }
	};
	TTablePermissions.prototype = {};
	TTablePermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.create_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.drop_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.select_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.insert_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.update_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.BOOL) {
	          this.delete_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 7:
	        if (ftype == Thrift.Type.BOOL) {
	          this.truncate_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 8:
	        if (ftype == Thrift.Type.BOOL) {
	          this.alter_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTablePermissions.prototype.write = function (output) {
	  output.writeStructBegin('TTablePermissions');
	  if (this.create_ !== null && this.create_ !== undefined) {
	    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
	    output.writeBool(this.create_);
	    output.writeFieldEnd();
	  }
	  if (this.drop_ !== null && this.drop_ !== undefined) {
	    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
	    output.writeBool(this.drop_);
	    output.writeFieldEnd();
	  }
	  if (this.select_ !== null && this.select_ !== undefined) {
	    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);
	    output.writeBool(this.select_);
	    output.writeFieldEnd();
	  }
	  if (this.insert_ !== null && this.insert_ !== undefined) {
	    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);
	    output.writeBool(this.insert_);
	    output.writeFieldEnd();
	  }
	  if (this.update_ !== null && this.update_ !== undefined) {
	    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);
	    output.writeBool(this.update_);
	    output.writeFieldEnd();
	  }
	  if (this.delete_ !== null && this.delete_ !== undefined) {
	    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);
	    output.writeBool(this.delete_);
	    output.writeFieldEnd();
	  }
	  if (this.truncate_ !== null && this.truncate_ !== undefined) {
	    output.writeFieldBegin('truncate_', Thrift.Type.BOOL, 7);
	    output.writeBool(this.truncate_);
	    output.writeFieldEnd();
	  }
	  if (this.alter_ !== null && this.alter_ !== undefined) {
	    output.writeFieldBegin('alter_', Thrift.Type.BOOL, 8);
	    output.writeBool(this.alter_);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDashboardPermissions = module.exports.TDashboardPermissions = function (args) {
	  this.create_ = null;
	  this.delete_ = null;
	  this.view_ = null;
	  this.edit_ = null;
	  if (args) {
	    if (args.create_ !== undefined && args.create_ !== null) {
	      this.create_ = args.create_;
	    }
	    if (args.delete_ !== undefined && args.delete_ !== null) {
	      this.delete_ = args.delete_;
	    }
	    if (args.view_ !== undefined && args.view_ !== null) {
	      this.view_ = args.view_;
	    }
	    if (args.edit_ !== undefined && args.edit_ !== null) {
	      this.edit_ = args.edit_;
	    }
	  }
	};
	TDashboardPermissions.prototype = {};
	TDashboardPermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.create_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.delete_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.view_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.edit_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDashboardPermissions.prototype.write = function (output) {
	  output.writeStructBegin('TDashboardPermissions');
	  if (this.create_ !== null && this.create_ !== undefined) {
	    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
	    output.writeBool(this.create_);
	    output.writeFieldEnd();
	  }
	  if (this.delete_ !== null && this.delete_ !== undefined) {
	    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);
	    output.writeBool(this.delete_);
	    output.writeFieldEnd();
	  }
	  if (this.view_ !== null && this.view_ !== undefined) {
	    output.writeFieldBegin('view_', Thrift.Type.BOOL, 3);
	    output.writeBool(this.view_);
	    output.writeFieldEnd();
	  }
	  if (this.edit_ !== null && this.edit_ !== undefined) {
	    output.writeFieldBegin('edit_', Thrift.Type.BOOL, 4);
	    output.writeBool(this.edit_);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TViewPermissions = module.exports.TViewPermissions = function (args) {
	  this.create_ = null;
	  this.drop_ = null;
	  this.select_ = null;
	  this.insert_ = null;
	  this.update_ = null;
	  this.delete_ = null;
	  if (args) {
	    if (args.create_ !== undefined && args.create_ !== null) {
	      this.create_ = args.create_;
	    }
	    if (args.drop_ !== undefined && args.drop_ !== null) {
	      this.drop_ = args.drop_;
	    }
	    if (args.select_ !== undefined && args.select_ !== null) {
	      this.select_ = args.select_;
	    }
	    if (args.insert_ !== undefined && args.insert_ !== null) {
	      this.insert_ = args.insert_;
	    }
	    if (args.update_ !== undefined && args.update_ !== null) {
	      this.update_ = args.update_;
	    }
	    if (args.delete_ !== undefined && args.delete_ !== null) {
	      this.delete_ = args.delete_;
	    }
	  }
	};
	TViewPermissions.prototype = {};
	TViewPermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.BOOL) {
	          this.create_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.drop_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.BOOL) {
	          this.select_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.insert_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.BOOL) {
	          this.update_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 6:
	        if (ftype == Thrift.Type.BOOL) {
	          this.delete_ = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TViewPermissions.prototype.write = function (output) {
	  output.writeStructBegin('TViewPermissions');
	  if (this.create_ !== null && this.create_ !== undefined) {
	    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
	    output.writeBool(this.create_);
	    output.writeFieldEnd();
	  }
	  if (this.drop_ !== null && this.drop_ !== undefined) {
	    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
	    output.writeBool(this.drop_);
	    output.writeFieldEnd();
	  }
	  if (this.select_ !== null && this.select_ !== undefined) {
	    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);
	    output.writeBool(this.select_);
	    output.writeFieldEnd();
	  }
	  if (this.insert_ !== null && this.insert_ !== undefined) {
	    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);
	    output.writeBool(this.insert_);
	    output.writeFieldEnd();
	  }
	  if (this.update_ !== null && this.update_ !== undefined) {
	    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);
	    output.writeBool(this.update_);
	    output.writeFieldEnd();
	  }
	  if (this.delete_ !== null && this.delete_ !== undefined) {
	    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);
	    output.writeBool(this.delete_);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDBObjectPermissions = module.exports.TDBObjectPermissions = function (args) {
	  this.database_permissions_ = null;
	  this.table_permissions_ = null;
	  this.dashboard_permissions_ = null;
	  this.view_permissions_ = null;
	  if (args) {
	    if (args.database_permissions_ !== undefined && args.database_permissions_ !== null) {
	      this.database_permissions_ = new ttypes.TDatabasePermissions(args.database_permissions_);
	    }
	    if (args.table_permissions_ !== undefined && args.table_permissions_ !== null) {
	      this.table_permissions_ = new ttypes.TTablePermissions(args.table_permissions_);
	    }
	    if (args.dashboard_permissions_ !== undefined && args.dashboard_permissions_ !== null) {
	      this.dashboard_permissions_ = new ttypes.TDashboardPermissions(args.dashboard_permissions_);
	    }
	    if (args.view_permissions_ !== undefined && args.view_permissions_ !== null) {
	      this.view_permissions_ = new ttypes.TViewPermissions(args.view_permissions_);
	    }
	  }
	};
	TDBObjectPermissions.prototype = {};
	TDBObjectPermissions.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.database_permissions_ = new ttypes.TDatabasePermissions();
	          this.database_permissions_.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.table_permissions_ = new ttypes.TTablePermissions();
	          this.table_permissions_.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.dashboard_permissions_ = new ttypes.TDashboardPermissions();
	          this.dashboard_permissions_.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.view_permissions_ = new ttypes.TViewPermissions();
	          this.view_permissions_.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDBObjectPermissions.prototype.write = function (output) {
	  output.writeStructBegin('TDBObjectPermissions');
	  if (this.database_permissions_ !== null && this.database_permissions_ !== undefined) {
	    output.writeFieldBegin('database_permissions_', Thrift.Type.STRUCT, 1);
	    this.database_permissions_.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.table_permissions_ !== null && this.table_permissions_ !== undefined) {
	    output.writeFieldBegin('table_permissions_', Thrift.Type.STRUCT, 2);
	    this.table_permissions_.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.dashboard_permissions_ !== null && this.dashboard_permissions_ !== undefined) {
	    output.writeFieldBegin('dashboard_permissions_', Thrift.Type.STRUCT, 3);
	    this.dashboard_permissions_.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.view_permissions_ !== null && this.view_permissions_ !== undefined) {
	    output.writeFieldBegin('view_permissions_', Thrift.Type.STRUCT, 4);
	    this.view_permissions_.write(output);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDBObject = module.exports.TDBObject = function (args) {
	  this.objectName = null;
	  this.objectType = null;
	  this.privs = null;
	  this.grantee = null;
	  this.privilegeObjectType = null;
	  if (args) {
	    if (args.objectName !== undefined && args.objectName !== null) {
	      this.objectName = args.objectName;
	    }
	    if (args.objectType !== undefined && args.objectType !== null) {
	      this.objectType = args.objectType;
	    }
	    if (args.privs !== undefined && args.privs !== null) {
	      this.privs = Thrift.copyList(args.privs, [null]);
	    }
	    if (args.grantee !== undefined && args.grantee !== null) {
	      this.grantee = args.grantee;
	    }
	    if (args.privilegeObjectType !== undefined && args.privilegeObjectType !== null) {
	      this.privilegeObjectType = args.privilegeObjectType;
	    }
	  }
	};
	TDBObject.prototype = {};
	TDBObject.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.objectName = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.objectType = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.LIST) {
	          this.privs = [];
	          var _rtmp3176 = input.readListBegin();
	          var _size175 = _rtmp3176.size || 0;
	          for (var _i177 = 0; _i177 < _size175; ++_i177) {
	            var elem178 = null;
	            elem178 = input.readBool();
	            this.privs.push(elem178);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.STRING) {
	          this.grantee = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 5:
	        if (ftype == Thrift.Type.I32) {
	          this.privilegeObjectType = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDBObject.prototype.write = function (output) {
	  output.writeStructBegin('TDBObject');
	  if (this.objectName !== null && this.objectName !== undefined) {
	    output.writeFieldBegin('objectName', Thrift.Type.STRING, 1);
	    output.writeString(this.objectName);
	    output.writeFieldEnd();
	  }
	  if (this.objectType !== null && this.objectType !== undefined) {
	    output.writeFieldBegin('objectType', Thrift.Type.I32, 2);
	    output.writeI32(this.objectType);
	    output.writeFieldEnd();
	  }
	  if (this.privs !== null && this.privs !== undefined) {
	    output.writeFieldBegin('privs', Thrift.Type.LIST, 3);
	    output.writeListBegin(Thrift.Type.BOOL, this.privs.length);
	    for (var iter179 in this.privs) {
	      if (this.privs.hasOwnProperty(iter179)) {
	        iter179 = this.privs[iter179];
	        output.writeBool(iter179);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  if (this.grantee !== null && this.grantee !== undefined) {
	    output.writeFieldBegin('grantee', Thrift.Type.STRING, 4);
	    output.writeString(this.grantee);
	    output.writeFieldEnd();
	  }
	  if (this.privilegeObjectType !== null && this.privilegeObjectType !== undefined) {
	    output.writeFieldBegin('privilegeObjectType', Thrift.Type.I32, 5);
	    output.writeI32(this.privilegeObjectType);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TDashboardGrantees = module.exports.TDashboardGrantees = function (args) {
	  this.name = null;
	  this.is_user = null;
	  this.permissions = null;
	  if (args) {
	    if (args.name !== undefined && args.name !== null) {
	      this.name = args.name;
	    }
	    if (args.is_user !== undefined && args.is_user !== null) {
	      this.is_user = args.is_user;
	    }
	    if (args.permissions !== undefined && args.permissions !== null) {
	      this.permissions = new ttypes.TDashboardPermissions(args.permissions);
	    }
	  }
	};
	TDashboardGrantees.prototype = {};
	TDashboardGrantees.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_user = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.STRUCT) {
	          this.permissions = new ttypes.TDashboardPermissions();
	          this.permissions.read(input);
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TDashboardGrantees.prototype.write = function (output) {
	  output.writeStructBegin('TDashboardGrantees');
	  if (this.name !== null && this.name !== undefined) {
	    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
	    output.writeString(this.name);
	    output.writeFieldEnd();
	  }
	  if (this.is_user !== null && this.is_user !== undefined) {
	    output.writeFieldBegin('is_user', Thrift.Type.BOOL, 2);
	    output.writeBool(this.is_user);
	    output.writeFieldEnd();
	  }
	  if (this.permissions !== null && this.permissions !== undefined) {
	    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 3);
	    this.permissions.write(output);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TLicenseInfo = module.exports.TLicenseInfo = function (args) {
	  this.claims = null;
	  if (args) {
	    if (args.claims !== undefined && args.claims !== null) {
	      this.claims = Thrift.copyList(args.claims, [null]);
	    }
	  }
	};
	TLicenseInfo.prototype = {};
	TLicenseInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.LIST) {
	          this.claims = [];
	          var _rtmp3181 = input.readListBegin();
	          var _size180 = _rtmp3181.size || 0;
	          for (var _i182 = 0; _i182 < _size180; ++_i182) {
	            var elem183 = null;
	            elem183 = input.readString();
	            this.claims.push(elem183);
	          }
	          input.readListEnd();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TLicenseInfo.prototype.write = function (output) {
	  output.writeStructBegin('TLicenseInfo');
	  if (this.claims !== null && this.claims !== undefined) {
	    output.writeFieldBegin('claims', Thrift.Type.LIST, 1);
	    output.writeListBegin(Thrift.Type.STRING, this.claims.length);
	    for (var iter184 in this.claims) {
	      if (this.claims.hasOwnProperty(iter184)) {
	        iter184 = this.claims[iter184];
	        output.writeString(iter184);
	      }
	    }
	    output.writeListEnd();
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TSessionInfo = module.exports.TSessionInfo = function (args) {
	  this.user = null;
	  this.database = null;
	  this.start_time = null;
	  this.is_super = null;
	  if (args) {
	    if (args.user !== undefined && args.user !== null) {
	      this.user = args.user;
	    }
	    if (args.database !== undefined && args.database !== null) {
	      this.database = args.database;
	    }
	    if (args.start_time !== undefined && args.start_time !== null) {
	      this.start_time = args.start_time;
	    }
	    if (args.is_super !== undefined && args.is_super !== null) {
	      this.is_super = args.is_super;
	    }
	  }
	};
	TSessionInfo.prototype = {};
	TSessionInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.user = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.STRING) {
	          this.database = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I64) {
	          this.start_time = input.readI64();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 4:
	        if (ftype == Thrift.Type.BOOL) {
	          this.is_super = input.readBool();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TSessionInfo.prototype.write = function (output) {
	  output.writeStructBegin('TSessionInfo');
	  if (this.user !== null && this.user !== undefined) {
	    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
	    output.writeString(this.user);
	    output.writeFieldEnd();
	  }
	  if (this.database !== null && this.database !== undefined) {
	    output.writeFieldBegin('database', Thrift.Type.STRING, 2);
	    output.writeString(this.database);
	    output.writeFieldEnd();
	  }
	  if (this.start_time !== null && this.start_time !== undefined) {
	    output.writeFieldBegin('start_time', Thrift.Type.I64, 3);
	    output.writeI64(this.start_time);
	    output.writeFieldEnd();
	  }
	  if (this.is_super !== null && this.is_super !== undefined) {
	    output.writeFieldBegin('is_super', Thrift.Type.BOOL, 4);
	    output.writeBool(this.is_super);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TGeoFileLayerInfo = module.exports.TGeoFileLayerInfo = function (args) {
	  this.name = null;
	  this.contents = null;
	  if (args) {
	    if (args.name !== undefined && args.name !== null) {
	      this.name = args.name;
	    }
	    if (args.contents !== undefined && args.contents !== null) {
	      this.contents = args.contents;
	    }
	  }
	};
	TGeoFileLayerInfo.prototype = {};
	TGeoFileLayerInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.STRING) {
	          this.name = input.readString();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.contents = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TGeoFileLayerInfo.prototype.write = function (output) {
	  output.writeStructBegin('TGeoFileLayerInfo');
	  if (this.name !== null && this.name !== undefined) {
	    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
	    output.writeString(this.name);
	    output.writeFieldEnd();
	  }
	  if (this.contents !== null && this.contents !== undefined) {
	    output.writeFieldBegin('contents', Thrift.Type.I32, 2);
	    output.writeI32(this.contents);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

	var TTableEpochInfo = module.exports.TTableEpochInfo = function (args) {
	  this.table_id = null;
	  this.table_epoch = null;
	  this.leaf_index = null;
	  if (args) {
	    if (args.table_id !== undefined && args.table_id !== null) {
	      this.table_id = args.table_id;
	    }
	    if (args.table_epoch !== undefined && args.table_epoch !== null) {
	      this.table_epoch = args.table_epoch;
	    }
	    if (args.leaf_index !== undefined && args.leaf_index !== null) {
	      this.leaf_index = args.leaf_index;
	    }
	  }
	};
	TTableEpochInfo.prototype = {};
	TTableEpochInfo.prototype.read = function (input) {
	  input.readStructBegin();
	  while (true) {
	    var ret = input.readFieldBegin();
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid) {
	      case 1:
	        if (ftype == Thrift.Type.I32) {
	          this.table_id = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 2:
	        if (ftype == Thrift.Type.I32) {
	          this.table_epoch = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      case 3:
	        if (ftype == Thrift.Type.I32) {
	          this.leaf_index = input.readI32();
	        } else {
	          input.skip(ftype);
	        }
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};

	TTableEpochInfo.prototype.write = function (output) {
	  output.writeStructBegin('TTableEpochInfo');
	  if (this.table_id !== null && this.table_id !== undefined) {
	    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);
	    output.writeI32(this.table_id);
	    output.writeFieldEnd();
	  }
	  if (this.table_epoch !== null && this.table_epoch !== undefined) {
	    output.writeFieldBegin('table_epoch', Thrift.Type.I32, 2);
	    output.writeI32(this.table_epoch);
	    output.writeFieldEnd();
	  }
	  if (this.leaf_index !== null && this.leaf_index !== undefined) {
	    output.writeFieldBegin('leaf_index', Thrift.Type.I32, 3);
	    output.writeI32(this.leaf_index);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processQueryResults;

	var _processColumnarResults = __webpack_require__(56);

	var _processColumnarResults2 = _interopRequireDefault(_processColumnarResults);

	var _processRowResults = __webpack_require__(57);

	var _processRowResults2 = _interopRequireDefault(_processRowResults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Determines how to process raw results when they return from the server.
	 *
	 * @param {Boolean} logging If enabled, shows on the console how long the query took to run.
	 * @param {Function} updateQueryTimes A function that updates internal query times on the connector.
	 * @param {Object} options A list of options for processing the results.
	 * @param {Boolean} options.isImage Set to true when querying for backend-rendered images.
	 * @param {Boolean} options.eliminateNullRows Removes null rows.
	 * @param {String} options.query The SQL query string used only for logging.
	 * @param {Number} options.queryId The ID of the query.
	 * @param {Number} options.conId The unique connector identification.
	 * @param {String} options.estimatedQueryTime The estimate of the query time.
	 * @param {Array<Function>} callback The same callback coming from {@link #query}.
	 * @param {Object} result - The query result used to decide whether to process
	 *                          as column or row results.
	 * @return {Object} Null if image with callbacks, result if image with callbacks,
	 *                  otherwise formatted results.
	 */
	function processQueryResults(logging, updateQueryTimes) {
	  return function (options, _datumEnum, result, callback) {
	    var isImage = false;
	    var eliminateNullRows = false;
	    var query = null;
	    var queryId = null;
	    var conId = null;
	    var estimatedQueryTime = null;
	    var hasCallback = Boolean(callback);

	    if (typeof options !== "undefined") {
	      isImage = options.isImage ? options.isImage : false;
	      eliminateNullRows = options.eliminateNullRows ? options.eliminateNullRows : false;
	      query = options.query ? options.query : null;
	      queryId = options.queryId ? options.queryId : null;
	      conId = typeof options.conId === "undefined" ? null : options.conId;
	      estimatedQueryTime = typeof options.estimatedQueryTime === "undefined" ? null : options.estimatedQueryTime;
	    }
	    if (result.execution_time_ms && conId !== null && estimatedQueryTime !== null) {
	      updateQueryTimes(conId, queryId, estimatedQueryTime, result.execution_time_ms);
	    }

	    // should use node_env
	    if (logging && result.execution_time_ms) {
	      console.log(query, "on Server", conId, "- Execution Time:", result.execution_time_ms, " ms, Total Time:", result.total_time_ms + "ms");
	    }

	    if (isImage && hasCallback) {
	      callback(null, result);
	    } else if (isImage && !hasCallback) {
	      return result;
	    } else {
	      var formattedResult = null;

	      if (!result.row_set) {
	        if (hasCallback) {
	          callback(new Error("No result to process"));
	        } else {
	          throw new Error("No result to process");
	        }
	        return;
	      }

	      try {
	        if (result.row_set.is_columnar) {
	          formattedResult = (0, _processColumnarResults2.default)(result.row_set, eliminateNullRows, _datumEnum);
	        } else {
	          formattedResult = (0, _processRowResults2.default)(result.row_set, eliminateNullRows, _datumEnum);
	        }

	        formattedResult.timing = {
	          execution_time_ms: result.execution_time_ms,
	          total_time_ms: result.total_time_ms
	        };
	      } catch (err) {
	        if (hasCallback) {
	          callback(err);
	        } else {
	          throw err;
	        }
	        return;
	      }

	      if (hasCallback) {
	        callback(null, options.returnTiming ? formattedResult : formattedResult.results);
	      } else {
	        return options.returnTiming ? formattedResult : formattedResult.results;
	      }
	    }
	  };
	}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processColumnarResults;

	var _helpers = __webpack_require__(16);

	/**
	 * Process the column-based results from the query in a row-based format.
	 * (Returning row-based results directly from the server is inefficient.)
	 *
	 * @param {TRowSet} data The column-based data returned from a query.
	 * @param {Boolean} eliminateNullRows A flag that removes null rows from results.
	 * @param {Object} dataEnum A list of types created from when executing {@link #invertDatumTypes}.
	 * @returns {Object} The formatted results of the query.
	 * @example <caption>Convert data returned in column-based format to row-based:</caption>
	 */
	function processColumnarResults(data, eliminateNullRows, dataEnum) {
	  var formattedResult = { fields: [], results: [] };
	  var numCols = data.row_desc.length;
	  var numRows = typeof data.columns[0] === "undefined" ? 0 : data.columns[0].nulls.length;

	  formattedResult.fields = data.row_desc.map(function (field) {
	    return {
	      name: field.col_name,
	      type: dataEnum[field.col_type.type],
	      is_array: field.col_type.is_array
	    };
	  });

	  for (var r = 0; r < numRows; r++) {
	    if (eliminateNullRows) {
	      var rowHasNull = false;
	      for (var c = 0; c < numCols; c++) {
	        if (data.columns[c].nulls[r]) {
	          rowHasNull = true;
	          break;
	        }
	      }
	      if (rowHasNull) {
	        continue; // eslint-disable-line no-continue
	      }
	    }
	    var row = {};
	    for (var _c = 0; _c < numCols; _c++) {
	      var fieldName = formattedResult.fields[_c].name;
	      var fieldType = formattedResult.fields[_c].type;
	      var fieldIsArray = formattedResult.fields[_c].is_array;
	      var isNull = data.columns[_c].nulls[r];
	      var fieldPrecision = data.row_desc[_c].col_type.precision;

	      if (isNull) {
	        // row[fieldName] = "NULL";
	        row[fieldName] = null;
	        continue; // eslint-disable-line no-continue
	      }
	      if (fieldIsArray) {
	        row[fieldName] = [];
	        var arrayNumElems = data.columns[_c].data.arr_col[r].nulls.length;
	        for (var e = 0; e < arrayNumElems; e++) {
	          if (data.columns[_c].data.arr_col[r].nulls[e]) {
	            row[fieldName].push("NULL");
	            continue; // eslint-disable-line no-continue
	          }
	          switch (fieldType) {
	            case "BOOL":
	              row[fieldName].push(Boolean(data.columns[_c].data.arr_col[r].data.int_col[e]));
	              break;
	            case "SMALLINT":
	            case "INT":
	            case "BIGINT":
	            case "TINYINT":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.int_col[e]);
	              break;
	            case "FLOAT":
	            case "DOUBLE":
	            case "DECIMAL":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.real_col[e]);
	              break;
	            case "STR":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.str_col[e]);
	              break;
	            case "TIME":
	            case "TIMESTAMP":
	            case "DATE":
	              var timeInMs = (0, _helpers.timestampToMs)(data.columns[_c].data.int_col[r], fieldPrecision);
	              row[fieldName].push(timeInMs);
	              break;
	            default:
	              throw new Error("Unrecognized array field type: " + fieldType);
	          }
	        }
	      } else {
	        // Not an array
	        switch (fieldType) {
	          case "BOOL":
	            row[fieldName] = Boolean(data.columns[_c].data.int_col[r]);
	            break;
	          case "SMALLINT":
	          case "INT":
	          case "BIGINT":
	          case "TINYINT":
	            row[fieldName] = data.columns[_c].data.int_col[r];
	            break;
	          case "FLOAT":
	          case "DOUBLE":
	          case "DECIMAL":
	            row[fieldName] = data.columns[_c].data.real_col[r];
	            break;
	          case "STR":
	            row[fieldName] = data.columns[_c].data.str_col[r];
	            break;
	          case "TIME":
	          case "TIMESTAMP":
	          case "DATE":
	            var _timeInMs = (0, _helpers.timestampToMs)(data.columns[_c].data.int_col[r], fieldPrecision);
	            row[fieldName] = new Date(_timeInMs);
	            break;
	          case "POINT":
	          case "LINESTRING":
	          case "POLYGON":
	          case "MULTIPOLYGON":
	            row[fieldName] = data.columns[_c].data.str_col[r];
	            break;
	          default:
	            throw new Error("Unrecognized field type: " + fieldType);
	        }
	      }
	    }
	    formattedResult.results.push(row);
	  }
	  return formattedResult;
	}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processRowResults;

	var _helpers = __webpack_require__(16);

	/**
	 * Query for row-based results from the server. In general, is inefficient and should be
	 * avoided. Instead, use {@link processColumnarResults} and then convert the results to
	 * row-based format.
	 * @param {TRowSet} data - The row-based data returned from a query.
	 * @param {Boolean} eliminateNullRows Flag that removes null rows from results.
	 * @param {Object} datumEnum A list of types created from when executing {@link #invertDatumTypes}.
	 * @returns {Object} The formatted results of the query.
	 * @example<caption> Return row-based results directly from the server:
	 */
	function processRowResults(data, eliminateNullRows, datumEnum) {
	  var numCols = data.row_desc.length;
	  var formattedResult = { fields: [], results: [] };

	  formattedResult.fields = data.row_desc.map(function (field) {
	    return {
	      name: field.col_name,
	      type: datumEnum[field.col_type.type],
	      is_array: field.col_type.is_array
	    };
	  });

	  formattedResult.results = [];
	  var numRows = 0;
	  if (typeof data.rows !== "undefined" && data.rows !== null) {
	    numRows = data.rows.length; // so won't throw if data.rows is missing
	  }

	  for (var r = 0; r < numRows; r++) {
	    if (eliminateNullRows) {
	      var rowHasNull = false;
	      for (var c = 0; c < numCols; c++) {
	        if (data.rows[r].columns[c].is_null) {
	          rowHasNull = true;
	          break;
	        }
	      }
	      if (rowHasNull) {
	        continue; // eslint-disable-line no-continue
	      }
	    }

	    var row = {};
	    for (var _c = 0; _c < numCols; _c++) {
	      var fieldName = formattedResult.fields[_c].name;
	      var fieldType = formattedResult.fields[_c].type;
	      var fieldIsArray = formattedResult.fields[_c].is_array;
	      var fieldPrecision = data.row_desc[_c].col_type.precision;
	      if (fieldIsArray) {
	        if (data.rows[r].cols[_c].is_null) {
	          row[fieldName] = "NULL";
	          continue; // eslint-disable-line no-continue
	        }
	        row[fieldName] = [];
	        var arrayNumElems = data.rows[r].cols[_c].val.arr_val.length;
	        for (var e = 0; e < arrayNumElems; e++) {
	          var elemDatum = data.rows[r].cols[_c].val.arr_val[e];
	          if (elemDatum.is_null) {
	            row[fieldName].push("NULL");
	            continue; // eslint-disable-line no-continue
	          }
	          switch (fieldType) {
	            case "BOOL":
	              row[fieldName].push(Boolean(elemDatum.val.int_val));
	              break;
	            case "SMALLINT":
	            case "INT":
	            case "BIGINT":
	            case "TINYINT":
	              row[fieldName].push(elemDatum.val.int_val);
	              break;
	            case "FLOAT":
	            case "DOUBLE":
	            case "DECIMAL":
	              row[fieldName].push(elemDatum.val.real_val);
	              break;
	            case "STR":
	              row[fieldName].push(elemDatum.val.str_val);
	              break;
	            case "TIME":
	            case "TIMESTAMP":
	            case "DATE":
	              var timeInMs = (0, _helpers.timestampToMs)(elemDatum.val.int_val, fieldPrecision);
	              row[fieldName].push(timeInMs);
	              break;
	            default:
	              throw new Error("Unrecognized array field type: " + fieldType);
	          }
	        }
	      } else {
	        var scalarDatum = data.rows[r].cols[_c];
	        if (scalarDatum.is_null) {
	          row[fieldName] = "NULL";
	          continue; // eslint-disable-line no-continue
	        }
	        switch (fieldType) {
	          case "BOOL":
	            row[fieldName] = Boolean(scalarDatum.val.int_val);
	            break;
	          case "SMALLINT":
	          case "INT":
	          case "BIGINT":
	          case "TINYINT":
	            row[fieldName] = scalarDatum.val.int_val;
	            break;
	          case "FLOAT":
	          case "DOUBLE":
	          case "DECIMAL":
	            row[fieldName] = scalarDatum.val.real_val;
	            break;
	          case "STR":
	            row[fieldName] = scalarDatum.val.str_val;
	            break;
	          case "TIME":
	          case "TIMESTAMP":
	          case "DATE":
	            var _timeInMs = (0, _helpers.timestampToMs)(scalarDatum.val.int_val, fieldPrecision);
	            row[fieldName] = new Date(_timeInMs);
	            break;
	          case "POINT":
	          case "LINESTRING":
	          case "POLYGON":
	          case "MULTIPOLYGON":
	            row[fieldName] = scalarDatum.val.str_val;
	            break;
	          default:
	            throw new Error("Unrecognized field type: " + fieldType);
	        }
	      }
	    }
	    formattedResult.results.push(row);
	  }
	  return formattedResult;
	}

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	Object.defineProperty(exports, "__esModule", { value: true });
	var adapters_1 = __webpack_require__(59);
	var index_1 = __webpack_require__(66);
	var reader_1 = __webpack_require__(109);
	var writer_1 = __webpack_require__(118);
	var iterable_1 = __webpack_require__(154);
	var builder_1 = __webpack_require__(155);
	var reader_2 = __webpack_require__(156);
	var writer_2 = __webpack_require__(157);
	adapters_1.default.toDOMStream = iterable_1.toDOMStream;
	index_1.Builder['throughDOM'] = builder_1.builderThroughDOMStream;
	reader_1.RecordBatchReader['throughDOM'] = reader_2.recordBatchReaderThroughDOMStream;
	writer_1.RecordBatchWriter['throughDOM'] = writer_2.recordBatchWriterThroughDOMStream;
	var Arrow_1 = __webpack_require__(158);
	exports.ArrowType = Arrow_1.ArrowType;
	exports.DateUnit = Arrow_1.DateUnit;
	exports.IntervalUnit = Arrow_1.IntervalUnit;
	exports.MessageHeader = Arrow_1.MessageHeader;
	exports.MetadataVersion = Arrow_1.MetadataVersion;
	exports.Precision = Arrow_1.Precision;
	exports.TimeUnit = Arrow_1.TimeUnit;
	exports.Type = Arrow_1.Type;
	exports.UnionMode = Arrow_1.UnionMode;
	exports.BufferType = Arrow_1.BufferType;
	exports.Data = Arrow_1.Data;
	exports.DataType = Arrow_1.DataType;
	exports.Null = Arrow_1.Null;
	exports.Bool = Arrow_1.Bool;
	exports.Int = Arrow_1.Int;
	exports.Int8 = Arrow_1.Int8;
	exports.Int16 = Arrow_1.Int16;
	exports.Int32 = Arrow_1.Int32;
	exports.Int64 = Arrow_1.Int64;
	exports.Uint8 = Arrow_1.Uint8;
	exports.Uint16 = Arrow_1.Uint16;
	exports.Uint32 = Arrow_1.Uint32;
	exports.Uint64 = Arrow_1.Uint64;
	exports.Float = Arrow_1.Float;
	exports.Float16 = Arrow_1.Float16;
	exports.Float32 = Arrow_1.Float32;
	exports.Float64 = Arrow_1.Float64;
	exports.Utf8 = Arrow_1.Utf8;
	exports.Binary = Arrow_1.Binary;
	exports.FixedSizeBinary = Arrow_1.FixedSizeBinary;
	exports.Date_ = Arrow_1.Date_;
	exports.DateDay = Arrow_1.DateDay;
	exports.DateMillisecond = Arrow_1.DateMillisecond;
	exports.Timestamp = Arrow_1.Timestamp;
	exports.TimestampSecond = Arrow_1.TimestampSecond;
	exports.TimestampMillisecond = Arrow_1.TimestampMillisecond;
	exports.TimestampMicrosecond = Arrow_1.TimestampMicrosecond;
	exports.TimestampNanosecond = Arrow_1.TimestampNanosecond;
	exports.Time = Arrow_1.Time;
	exports.TimeSecond = Arrow_1.TimeSecond;
	exports.TimeMillisecond = Arrow_1.TimeMillisecond;
	exports.TimeMicrosecond = Arrow_1.TimeMicrosecond;
	exports.TimeNanosecond = Arrow_1.TimeNanosecond;
	exports.Decimal = Arrow_1.Decimal;
	exports.List = Arrow_1.List;
	exports.Struct = Arrow_1.Struct;
	exports.Union = Arrow_1.Union;
	exports.DenseUnion = Arrow_1.DenseUnion;
	exports.SparseUnion = Arrow_1.SparseUnion;
	exports.Dictionary = Arrow_1.Dictionary;
	exports.Interval = Arrow_1.Interval;
	exports.IntervalDayTime = Arrow_1.IntervalDayTime;
	exports.IntervalYearMonth = Arrow_1.IntervalYearMonth;
	exports.FixedSizeList = Arrow_1.FixedSizeList;
	exports.Map_ = Arrow_1.Map_;
	exports.Table = Arrow_1.Table;
	exports.Column = Arrow_1.Column;
	exports.Schema = Arrow_1.Schema;
	exports.Field = Arrow_1.Field;
	exports.Visitor = Arrow_1.Visitor;
	exports.Vector = Arrow_1.Vector;
	exports.BaseVector = Arrow_1.BaseVector;
	exports.BinaryVector = Arrow_1.BinaryVector;
	exports.BoolVector = Arrow_1.BoolVector;
	exports.Chunked = Arrow_1.Chunked;
	exports.DateVector = Arrow_1.DateVector;
	exports.DateDayVector = Arrow_1.DateDayVector;
	exports.DateMillisecondVector = Arrow_1.DateMillisecondVector;
	exports.DecimalVector = Arrow_1.DecimalVector;
	exports.DictionaryVector = Arrow_1.DictionaryVector;
	exports.FixedSizeBinaryVector = Arrow_1.FixedSizeBinaryVector;
	exports.FixedSizeListVector = Arrow_1.FixedSizeListVector;
	exports.FloatVector = Arrow_1.FloatVector;
	exports.Float16Vector = Arrow_1.Float16Vector;
	exports.Float32Vector = Arrow_1.Float32Vector;
	exports.Float64Vector = Arrow_1.Float64Vector;
	exports.IntervalVector = Arrow_1.IntervalVector;
	exports.IntervalDayTimeVector = Arrow_1.IntervalDayTimeVector;
	exports.IntervalYearMonthVector = Arrow_1.IntervalYearMonthVector;
	exports.IntVector = Arrow_1.IntVector;
	exports.Int8Vector = Arrow_1.Int8Vector;
	exports.Int16Vector = Arrow_1.Int16Vector;
	exports.Int32Vector = Arrow_1.Int32Vector;
	exports.Int64Vector = Arrow_1.Int64Vector;
	exports.Uint8Vector = Arrow_1.Uint8Vector;
	exports.Uint16Vector = Arrow_1.Uint16Vector;
	exports.Uint32Vector = Arrow_1.Uint32Vector;
	exports.Uint64Vector = Arrow_1.Uint64Vector;
	exports.ListVector = Arrow_1.ListVector;
	exports.MapVector = Arrow_1.MapVector;
	exports.NullVector = Arrow_1.NullVector;
	exports.StructVector = Arrow_1.StructVector;
	exports.TimestampVector = Arrow_1.TimestampVector;
	exports.TimestampSecondVector = Arrow_1.TimestampSecondVector;
	exports.TimestampMillisecondVector = Arrow_1.TimestampMillisecondVector;
	exports.TimestampMicrosecondVector = Arrow_1.TimestampMicrosecondVector;
	exports.TimestampNanosecondVector = Arrow_1.TimestampNanosecondVector;
	exports.TimeVector = Arrow_1.TimeVector;
	exports.TimeSecondVector = Arrow_1.TimeSecondVector;
	exports.TimeMillisecondVector = Arrow_1.TimeMillisecondVector;
	exports.TimeMicrosecondVector = Arrow_1.TimeMicrosecondVector;
	exports.TimeNanosecondVector = Arrow_1.TimeNanosecondVector;
	exports.UnionVector = Arrow_1.UnionVector;
	exports.DenseUnionVector = Arrow_1.DenseUnionVector;
	exports.SparseUnionVector = Arrow_1.SparseUnionVector;
	exports.Utf8Vector = Arrow_1.Utf8Vector;
	exports.ByteStream = Arrow_1.ByteStream;
	exports.AsyncByteStream = Arrow_1.AsyncByteStream;
	exports.AsyncByteQueue = Arrow_1.AsyncByteQueue;
	exports.RecordBatchReader = Arrow_1.RecordBatchReader;
	exports.RecordBatchFileReader = Arrow_1.RecordBatchFileReader;
	exports.RecordBatchStreamReader = Arrow_1.RecordBatchStreamReader;
	exports.AsyncRecordBatchFileReader = Arrow_1.AsyncRecordBatchFileReader;
	exports.AsyncRecordBatchStreamReader = Arrow_1.AsyncRecordBatchStreamReader;
	exports.RecordBatchWriter = Arrow_1.RecordBatchWriter;
	exports.RecordBatchFileWriter = Arrow_1.RecordBatchFileWriter;
	exports.RecordBatchStreamWriter = Arrow_1.RecordBatchStreamWriter;
	exports.RecordBatchJSONWriter = Arrow_1.RecordBatchJSONWriter;
	exports.MessageReader = Arrow_1.MessageReader;
	exports.AsyncMessageReader = Arrow_1.AsyncMessageReader;
	exports.JSONMessageReader = Arrow_1.JSONMessageReader;
	exports.Message = Arrow_1.Message;
	exports.RecordBatch = Arrow_1.RecordBatch;
	exports.DataFrame = Arrow_1.DataFrame;
	exports.FilteredDataFrame = Arrow_1.FilteredDataFrame;
	exports.CountByResult = Arrow_1.CountByResult;
	exports.predicate = Arrow_1.predicate;
	exports.util = Arrow_1.util;
	exports.Builder = Arrow_1.Builder;
	exports.BinaryBuilder = Arrow_1.BinaryBuilder;
	exports.BoolBuilder = Arrow_1.BoolBuilder;
	exports.DateBuilder = Arrow_1.DateBuilder;
	exports.DateDayBuilder = Arrow_1.DateDayBuilder;
	exports.DateMillisecondBuilder = Arrow_1.DateMillisecondBuilder;
	exports.DecimalBuilder = Arrow_1.DecimalBuilder;
	exports.DictionaryBuilder = Arrow_1.DictionaryBuilder;
	exports.FixedSizeBinaryBuilder = Arrow_1.FixedSizeBinaryBuilder;
	exports.FixedSizeListBuilder = Arrow_1.FixedSizeListBuilder;
	exports.FloatBuilder = Arrow_1.FloatBuilder;
	exports.Float16Builder = Arrow_1.Float16Builder;
	exports.Float32Builder = Arrow_1.Float32Builder;
	exports.Float64Builder = Arrow_1.Float64Builder;
	exports.IntervalBuilder = Arrow_1.IntervalBuilder;
	exports.IntervalDayTimeBuilder = Arrow_1.IntervalDayTimeBuilder;
	exports.IntervalYearMonthBuilder = Arrow_1.IntervalYearMonthBuilder;
	exports.IntBuilder = Arrow_1.IntBuilder;
	exports.Int8Builder = Arrow_1.Int8Builder;
	exports.Int16Builder = Arrow_1.Int16Builder;
	exports.Int32Builder = Arrow_1.Int32Builder;
	exports.Int64Builder = Arrow_1.Int64Builder;
	exports.Uint8Builder = Arrow_1.Uint8Builder;
	exports.Uint16Builder = Arrow_1.Uint16Builder;
	exports.Uint32Builder = Arrow_1.Uint32Builder;
	exports.Uint64Builder = Arrow_1.Uint64Builder;
	exports.ListBuilder = Arrow_1.ListBuilder;
	exports.MapBuilder = Arrow_1.MapBuilder;
	exports.NullBuilder = Arrow_1.NullBuilder;
	exports.StructBuilder = Arrow_1.StructBuilder;
	exports.TimestampBuilder = Arrow_1.TimestampBuilder;
	exports.TimestampSecondBuilder = Arrow_1.TimestampSecondBuilder;
	exports.TimestampMillisecondBuilder = Arrow_1.TimestampMillisecondBuilder;
	exports.TimestampMicrosecondBuilder = Arrow_1.TimestampMicrosecondBuilder;
	exports.TimestampNanosecondBuilder = Arrow_1.TimestampNanosecondBuilder;
	exports.TimeBuilder = Arrow_1.TimeBuilder;
	exports.TimeSecondBuilder = Arrow_1.TimeSecondBuilder;
	exports.TimeMillisecondBuilder = Arrow_1.TimeMillisecondBuilder;
	exports.TimeMicrosecondBuilder = Arrow_1.TimeMicrosecondBuilder;
	exports.TimeNanosecondBuilder = Arrow_1.TimeNanosecondBuilder;
	exports.UnionBuilder = Arrow_1.UnionBuilder;
	exports.DenseUnionBuilder = Arrow_1.DenseUnionBuilder;
	exports.SparseUnionBuilder = Arrow_1.SparseUnionBuilder;
	exports.Utf8Builder = Arrow_1.Utf8Builder;

	//# sourceMappingURL=Arrow.dom.js.map

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _asyncGenerator = function () { function AwaitValue(value) { this.value = value; } function AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; if (value instanceof AwaitValue) { Promise.resolve(value.value).then(function (arg) { resume("next", arg); }, function (arg) { resume("throw", arg); }); } else { settle(result.done ? "return" : "normal", result.value); } } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } } if (typeof Symbol === "function" && Symbol.asyncIterator) { AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; } AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); }; AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); }; AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); }; return { wrap: function wrap(fn) { return function () { return new AsyncGenerator(fn.apply(this, arguments)); }; }, await: function _await(value) { return new AwaitValue(value); } }; }();

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	/** @ignore */
	var _fromAsyncIterable = function () {
	    var _ref4 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee(source) {
	        var done, threw, buffers, buffer, cmd, size, bufferLength, byteRange, _ref5, it, _ref6, _ref7;

	        return regeneratorRuntime.wrap(function _callee$(_context2) {
	            while (1) {
	                switch (_context2.prev = _context2.next) {
	                    case 0:
	                        byteRange = function byteRange() {
	                            if (cmd === 'peek') {
	                                return buffer_1.joinUint8Arrays(buffers, size)[0];
	                            }

	                            var _buffer_1$joinUint8Ar3 = buffer_1.joinUint8Arrays(buffers, size);

	                            var _buffer_1$joinUint8Ar4 = _slicedToArray(_buffer_1$joinUint8Ar3, 3);

	                            buffer = _buffer_1$joinUint8Ar4[0];
	                            buffers = _buffer_1$joinUint8Ar4[1];
	                            bufferLength = _buffer_1$joinUint8Ar4[2];

	                            return buffer;
	                        };

	                        done = void 0, threw = false;
	                        buffers = [], buffer = void 0;
	                        cmd = void 0, size = void 0, bufferLength = 0;
	                        _context2.next = 6;
	                        return null;

	                    case 6:
	                        _ref5 = _context2.sent;
	                        cmd = _ref5.cmd;
	                        size = _ref5.size;

	                        // initialize the iterator
	                        it = buffer_1.toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();
	                        _context2.prev = 10;

	                    case 11:
	                        if (!isNaN(size - bufferLength)) {
	                            _context2.next = 17;
	                            break;
	                        }

	                        _context2.next = 14;
	                        return _asyncGenerator.await(it.next(undefined));

	                    case 14:
	                        _context2.t0 = _context2.sent;
	                        _context2.next = 20;
	                        break;

	                    case 17:
	                        _context2.next = 19;
	                        return _asyncGenerator.await(it.next(size - bufferLength));

	                    case 19:
	                        _context2.t0 = _context2.sent;

	                    case 20:
	                        _ref6 = _context2.t0;
	                        done = _ref6.done;
	                        buffer = _ref6.value;

	                        // if chunk is not null or empty, push it onto the queue
	                        if (!done && buffer.byteLength > 0) {
	                            buffers.push(buffer);
	                            bufferLength += buffer.byteLength;
	                        }
	                        // If we have enough bytes in our buffer, yield chunks until we don't

	                        if (!(done || size <= bufferLength)) {
	                            _context2.next = 31;
	                            break;
	                        }

	                    case 25:
	                        _context2.next = 27;
	                        return byteRange();

	                    case 27:
	                        _ref7 = _context2.sent;
	                        cmd = _ref7.cmd;
	                        size = _ref7.size;

	                    case 30:
	                        if (size < bufferLength) {
	                            _context2.next = 25;
	                            break;
	                        }

	                    case 31:
	                        if (!done) {
	                            _context2.next = 11;
	                            break;
	                        }

	                    case 32:
	                        _context2.next = 40;
	                        break;

	                    case 34:
	                        _context2.prev = 34;
	                        _context2.t1 = _context2["catch"](10);
	                        _context2.t2 = (threw = true) && typeof it.throw === 'function';

	                        if (!_context2.t2) {
	                            _context2.next = 40;
	                            break;
	                        }

	                        _context2.next = 40;
	                        return _asyncGenerator.await(it.throw(_context2.t1));

	                    case 40:
	                        _context2.prev = 40;
	                        _context2.t3 = threw === false && typeof it.return === 'function';

	                        if (!_context2.t3) {
	                            _context2.next = 45;
	                            break;
	                        }

	                        _context2.next = 45;
	                        return _asyncGenerator.await(it.return());

	                    case 45:
	                        return _context2.finish(40);

	                    case 46:
	                    case "end":
	                        return _context2.stop();
	                }
	            }
	        }, _callee, this, [[10, 34, 40, 46]]);
	    }));

	    return function _fromAsyncIterable(_x) {
	        return _ref4.apply(this, arguments);
	    };
	}();
	// All this manual Uint8Array chunk management can be avoided if/when engines
	// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():
	// https://github.com/domenic/proposal-arraybuffer-transfer
	/** @ignore */


	var _fromDOMStream = function () {
	    var _ref8 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(source) {
	        var done, threw, buffers, buffer, cmd, size, bufferLength, byteRange, _ref9, it, _ref10, _ref11;

	        return regeneratorRuntime.wrap(function _callee2$(_context3) {
	            while (1) {
	                switch (_context3.prev = _context3.next) {
	                    case 0:
	                        byteRange = function byteRange() {
	                            if (cmd === 'peek') {
	                                return buffer_1.joinUint8Arrays(buffers, size)[0];
	                            }

	                            var _buffer_1$joinUint8Ar5 = buffer_1.joinUint8Arrays(buffers, size);

	                            var _buffer_1$joinUint8Ar6 = _slicedToArray(_buffer_1$joinUint8Ar5, 3);

	                            buffer = _buffer_1$joinUint8Ar6[0];
	                            buffers = _buffer_1$joinUint8Ar6[1];
	                            bufferLength = _buffer_1$joinUint8Ar6[2];

	                            return buffer;
	                        };

	                        done = false, threw = false;
	                        buffers = [], buffer = void 0;
	                        cmd = void 0, size = void 0, bufferLength = 0;
	                        _context3.next = 6;
	                        return null;

	                    case 6:
	                        _ref9 = _context3.sent;
	                        cmd = _ref9.cmd;
	                        size = _ref9.size;

	                        // initialize the reader and lock the stream
	                        it = new AdaptiveByteReader(source);
	                        _context3.prev = 10;

	                    case 11:
	                        if (!isNaN(size - bufferLength)) {
	                            _context3.next = 17;
	                            break;
	                        }

	                        _context3.next = 14;
	                        return _asyncGenerator.await(it['read'](undefined));

	                    case 14:
	                        _context3.t0 = _context3.sent;
	                        _context3.next = 20;
	                        break;

	                    case 17:
	                        _context3.next = 19;
	                        return _asyncGenerator.await(it['read'](size - bufferLength));

	                    case 19:
	                        _context3.t0 = _context3.sent;

	                    case 20:
	                        _ref10 = _context3.t0;
	                        done = _ref10.done;
	                        buffer = _ref10.value;

	                        // if chunk is not null or empty, push it onto the queue
	                        if (!done && buffer.byteLength > 0) {
	                            buffers.push(buffer_1.toUint8Array(buffer));
	                            bufferLength += buffer.byteLength;
	                        }
	                        // If we have enough bytes in our buffer, yield chunks until we don't

	                        if (!(done || size <= bufferLength)) {
	                            _context3.next = 31;
	                            break;
	                        }

	                    case 25:
	                        _context3.next = 27;
	                        return byteRange();

	                    case 27:
	                        _ref11 = _context3.sent;
	                        cmd = _ref11.cmd;
	                        size = _ref11.size;

	                    case 30:
	                        if (size < bufferLength) {
	                            _context3.next = 25;
	                            break;
	                        }

	                    case 31:
	                        if (!done) {
	                            _context3.next = 11;
	                            break;
	                        }

	                    case 32:
	                        _context3.next = 40;
	                        break;

	                    case 34:
	                        _context3.prev = 34;
	                        _context3.t1 = _context3["catch"](10);
	                        _context3.t2 = threw = true;

	                        if (!_context3.t2) {
	                            _context3.next = 40;
	                            break;
	                        }

	                        _context3.next = 40;
	                        return _asyncGenerator.await(it['cancel'](_context3.t1));

	                    case 40:
	                        _context3.prev = 40;

	                        if (!(threw === false)) {
	                            _context3.next = 46;
	                            break;
	                        }

	                        _context3.next = 44;
	                        return _asyncGenerator.await(it['cancel']());

	                    case 44:
	                        _context3.next = 47;
	                        break;

	                    case 46:
	                        source['locked'] && it.releaseLock();

	                    case 47:
	                        return _context3.finish(40);

	                    case 48:
	                    case "end":
	                        return _context3.stop();
	                }
	            }
	        }, _callee2, this, [[10, 34, 40, 48]]);
	    }));

	    return function _fromDOMStream(_x2) {
	        return _ref8.apply(this, arguments);
	    };
	}();
	/** @ignore */


	/** @ignore */
	var readInto = function () {
	    var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(reader, buffer, offset, size) {
	        var _ref16, done, value;

	        return regeneratorRuntime.wrap(function _callee6$(_context7) {
	            while (1) {
	                switch (_context7.prev = _context7.next) {
	                    case 0:
	                        if (!(offset >= size)) {
	                            _context7.next = 2;
	                            break;
	                        }

	                        return _context7.abrupt("return", { done: false, value: new Uint8Array(buffer, 0, size) });

	                    case 2:
	                        _context7.next = 4;
	                        return reader.read(new Uint8Array(buffer, offset, size - offset));

	                    case 4:
	                        _ref16 = _context7.sent;
	                        done = _ref16.done;
	                        value = _ref16.value;

	                        if (!((offset += value.byteLength) < size && !done)) {
	                            _context7.next = 11;
	                            break;
	                        }

	                        _context7.next = 10;
	                        return readInto(reader, value.buffer, offset, size);

	                    case 10:
	                        return _context7.abrupt("return", _context7.sent);

	                    case 11:
	                        return _context7.abrupt("return", { done: done, value: new Uint8Array(value.buffer, 0, offset) });

	                    case 12:
	                    case "end":
	                        return _context7.stop();
	                }
	            }
	        }, _callee6, this);
	    }));

	    return function readInto(_x6, _x7, _x8, _x9) {
	        return _ref15.apply(this, arguments);
	    };
	}();
	/** @ignore */


	/** @ignore */
	var _fromNodeStream = function () {
	    var _ref17 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(stream) {
	        var events, event, done, err, cmd, size, bufferLength, buffers, buffer, byteRange, _ref18, _ref19, _ref20, _ref21, cleanup;

	        return regeneratorRuntime.wrap(function _callee8$(_context9) {
	            while (1) {
	                switch (_context9.prev = _context9.next) {
	                    case 0:
	                        cleanup = function cleanup(events, err) {
	                            var _this = this;

	                            buffer = buffers = null;
	                            return new Promise(function () {
	                                var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(resolve, reject) {
	                                    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, evt, fn, destroy;

	                                    return regeneratorRuntime.wrap(function _callee7$(_context8) {
	                                        while (1) {
	                                            switch (_context8.prev = _context8.next) {
	                                                case 0:
	                                                    _iteratorNormalCompletion = true;
	                                                    _didIteratorError = false;
	                                                    _iteratorError = undefined;
	                                                    _context8.prev = 3;

	                                                    for (_iterator = events[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                                                        _step$value = _slicedToArray(_step.value, 2), evt = _step$value[0], fn = _step$value[1];

	                                                        stream['off'](evt, fn);
	                                                    }
	                                                    _context8.next = 11;
	                                                    break;

	                                                case 7:
	                                                    _context8.prev = 7;
	                                                    _context8.t0 = _context8["catch"](3);
	                                                    _didIteratorError = true;
	                                                    _iteratorError = _context8.t0;

	                                                case 11:
	                                                    _context8.prev = 11;
	                                                    _context8.prev = 12;

	                                                    if (!_iteratorNormalCompletion && _iterator.return) {
	                                                        _iterator.return();
	                                                    }

	                                                case 14:
	                                                    _context8.prev = 14;

	                                                    if (!_didIteratorError) {
	                                                        _context8.next = 17;
	                                                        break;
	                                                    }

	                                                    throw _iteratorError;

	                                                case 17:
	                                                    return _context8.finish(14);

	                                                case 18:
	                                                    return _context8.finish(11);

	                                                case 19:
	                                                    try {
	                                                        // Some stream implementations don't call the destroy callback,
	                                                        // because it's really a node-internal API. Just calling `destroy`
	                                                        // here should be enough to conform to the ReadableStream contract
	                                                        destroy = stream['destroy'];

	                                                        destroy && destroy.call(stream, err);
	                                                        err = undefined;
	                                                    } catch (e) {
	                                                        err = e || err;
	                                                    } finally {
	                                                        err != null ? reject(err) : resolve();
	                                                    }

	                                                case 20:
	                                                case "end":
	                                                    return _context8.stop();
	                                            }
	                                        }
	                                    }, _callee7, _this, [[3, 7, 11, 19], [12,, 14, 18]]);
	                                }));

	                                return function (_x11, _x12) {
	                                    return _ref22.apply(this, arguments);
	                                };
	                            }());
	                        };

	                        byteRange = function byteRange() {
	                            if (cmd === 'peek') {
	                                return buffer_1.joinUint8Arrays(buffers, size)[0];
	                            }

	                            var _buffer_1$joinUint8Ar7 = buffer_1.joinUint8Arrays(buffers, size);

	                            var _buffer_1$joinUint8Ar8 = _slicedToArray(_buffer_1$joinUint8Ar7, 3);

	                            buffer = _buffer_1$joinUint8Ar8[0];
	                            buffers = _buffer_1$joinUint8Ar8[1];
	                            bufferLength = _buffer_1$joinUint8Ar8[2];

	                            return buffer;
	                        };

	                        events = [];
	                        event = 'error';
	                        done = false, err = null;
	                        cmd = void 0, size = void 0, bufferLength = 0;
	                        buffers = [], buffer = void 0;
	                        _context9.next = 9;
	                        return null;

	                    case 9:
	                        _ref18 = _context9.sent;
	                        cmd = _ref18.cmd;
	                        size = _ref18.size;

	                        if (!stream['isTTY']) {
	                            _context9.next = 16;
	                            break;
	                        }

	                        _context9.next = 15;
	                        return new Uint8Array(0);

	                    case 15:
	                        return _context9.abrupt("return", _context9.sent);

	                    case 16:
	                        _context9.prev = 16;

	                        // initialize the stream event handlers
	                        events[0] = onEvent(stream, 'end');
	                        events[1] = onEvent(stream, 'error');

	                    case 19:
	                        events[2] = onEvent(stream, 'readable');
	                        // wait on the first message event from the stream
	                        _context9.next = 22;
	                        return _asyncGenerator.await(Promise.race(events.map(function (x) {
	                            return x[2];
	                        })));

	                    case 22:
	                        _ref19 = _context9.sent;
	                        _ref20 = _slicedToArray(_ref19, 2);
	                        event = _ref20[0];
	                        err = _ref20[1];

	                        if (!(event === 'error')) {
	                            _context9.next = 28;
	                            break;
	                        }

	                        return _context9.abrupt("break", 37);

	                    case 28:
	                        if (!(done = event === 'end')) {
	                            // If the size is NaN, request to read everything in the stream's internal buffer
	                            if (!isFinite(size - bufferLength)) {
	                                buffer = buffer_1.toUint8Array(stream['read'](undefined));
	                            } else {
	                                buffer = buffer_1.toUint8Array(stream['read'](size - bufferLength));
	                                // If the byteLength is 0, then the requested amount is more than the stream has
	                                // in its internal buffer. In this case the stream needs a "kick" to tell it to
	                                // continue emitting readable events, so request to read everything the stream
	                                // has in its internal buffer right now.
	                                if (buffer.byteLength < size - bufferLength) {
	                                    buffer = buffer_1.toUint8Array(stream['read'](undefined));
	                                }
	                            }
	                            // if chunk is not null or empty, push it onto the queue
	                            if (buffer.byteLength > 0) {
	                                buffers.push(buffer);
	                                bufferLength += buffer.byteLength;
	                            }
	                        }
	                        // If we have enough bytes in our buffer, yield chunks until we don't

	                        if (!(done || size <= bufferLength)) {
	                            _context9.next = 36;
	                            break;
	                        }

	                    case 30:
	                        _context9.next = 32;
	                        return byteRange();

	                    case 32:
	                        _ref21 = _context9.sent;
	                        cmd = _ref21.cmd;
	                        size = _ref21.size;

	                    case 35:
	                        if (size < bufferLength) {
	                            _context9.next = 30;
	                            break;
	                        }

	                    case 36:
	                        if (!done) {
	                            _context9.next = 19;
	                            break;
	                        }

	                    case 37:
	                        _context9.prev = 37;
	                        _context9.next = 40;
	                        return _asyncGenerator.await(cleanup(events, event === 'error' ? err : null));

	                    case 40:
	                        return _context9.finish(37);

	                    case 41:
	                    case "end":
	                        return _context9.stop();
	                }
	            }
	        }, _callee8, this, [[16,, 37, 41]]);
	    }));

	    return function _fromNodeStream(_x10) {
	        return _ref17.apply(this, arguments);
	    };
	}();

	//# sourceMappingURL=adapters.js.map


	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _marked = /*#__PURE__*/regeneratorRuntime.mark(_fromIterable);

	Object.defineProperty(exports, "__esModule", { value: true });
	var buffer_1 = __webpack_require__(60);
	/** @ignore */
	exports.default = {
	    fromIterable: function fromIterable(source) {
	        return pump(_fromIterable(source));
	    },
	    fromAsyncIterable: function fromAsyncIterable(source) {
	        return pump(_fromAsyncIterable(source));
	    },
	    fromDOMStream: function fromDOMStream(source) {
	        return pump(_fromDOMStream(source));
	    },
	    fromNodeStream: function fromNodeStream(stream) {
	        return pump(_fromNodeStream(stream));
	    },

	    // @ts-ignore
	    toDOMStream: function toDOMStream(source, options) {
	        throw new Error("\"toDOMStream\" not available in this environment");
	    },

	    // @ts-ignore
	    toNodeStream: function toNodeStream(source, options) {
	        throw new Error("\"toNodeStream\" not available in this environment");
	    }
	};
	/** @ignore */
	var pump = function pump(iterator) {
	    iterator.next();return iterator;
	};
	/** @ignore */
	function _fromIterable(source) {
	    var done, threw, buffers, buffer, cmd, size, bufferLength, byteRange, _ref, it, _ref2, _ref3;

	    return regeneratorRuntime.wrap(function _fromIterable$(_context) {
	        while (1) {
	            switch (_context.prev = _context.next) {
	                case 0:
	                    byteRange = function byteRange() {
	                        if (cmd === 'peek') {
	                            return buffer_1.joinUint8Arrays(buffers, size)[0];
	                        }

	                        var _buffer_1$joinUint8Ar = buffer_1.joinUint8Arrays(buffers, size);

	                        var _buffer_1$joinUint8Ar2 = _slicedToArray(_buffer_1$joinUint8Ar, 3);

	                        buffer = _buffer_1$joinUint8Ar2[0];
	                        buffers = _buffer_1$joinUint8Ar2[1];
	                        bufferLength = _buffer_1$joinUint8Ar2[2];

	                        return buffer;
	                    };

	                    done = void 0, threw = false;
	                    buffers = [], buffer = void 0;
	                    cmd = void 0, size = void 0, bufferLength = 0;
	                    _context.next = 6;
	                    return null;

	                case 6:
	                    _ref = _context.sent;
	                    cmd = _ref.cmd;
	                    size = _ref.size;

	                    // initialize the iterator
	                    it = buffer_1.toUint8ArrayIterator(source)[Symbol.iterator]();
	                    _context.prev = 10;

	                case 11:
	                    // if chunk is not null or empty, push it onto the queue
	                    _ref2 = isNaN(size - bufferLength) ? it.next(undefined) : it.next(size - bufferLength);
	                    // read the next value

	                    done = _ref2.done;
	                    buffer = _ref2.value;
	                    if (!done && buffer.byteLength > 0) {
	                        buffers.push(buffer);
	                        bufferLength += buffer.byteLength;
	                    }
	                    // If we have enough bytes in our buffer, yield chunks until we don't

	                    if (!(done || size <= bufferLength)) {
	                        _context.next = 22;
	                        break;
	                    }

	                case 16:
	                    _context.next = 18;
	                    return byteRange();

	                case 18:
	                    _ref3 = _context.sent;
	                    cmd = _ref3.cmd;
	                    size = _ref3.size;

	                case 21:
	                    if (size < bufferLength) {
	                        _context.next = 16;
	                        break;
	                    }

	                case 22:
	                    if (!done) {
	                        _context.next = 11;
	                        break;
	                    }

	                case 23:
	                    _context.next = 28;
	                    break;

	                case 25:
	                    _context.prev = 25;
	                    _context.t0 = _context["catch"](10);

	                    (threw = true) && typeof it.throw === 'function' && it.throw(_context.t0);

	                case 28:
	                    _context.prev = 28;

	                    threw === false && typeof it.return === 'function' && it.return();
	                    return _context.finish(28);

	                case 31:
	                case "end":
	                    return _context.stop();
	            }
	        }
	    }, _marked, this, [[10, 25, 28, 31]]);
	}
	var AdaptiveByteReader = function () {
	    function AdaptiveByteReader(source) {
	        _classCallCheck(this, AdaptiveByteReader);

	        this.source = source;
	        this.byobReader = null;
	        this.defaultReader = null;
	        try {
	            this.supportsBYOB = !!(this.reader = this.getBYOBReader());
	        } catch (e) {
	            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());
	        }
	    }

	    _createClass(AdaptiveByteReader, [{
	        key: "releaseLock",
	        value: function releaseLock() {
	            if (this.reader) {
	                this.reader.releaseLock();
	            }
	            this.reader = this.byobReader = this.defaultReader = null;
	        }
	    }, {
	        key: "cancel",
	        value: function () {
	            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(reason) {
	                var reader, source;
	                return regeneratorRuntime.wrap(function _callee3$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                reader = this.reader, source = this.source;
	                                _context4.t0 = reader;

	                                if (!_context4.t0) {
	                                    _context4.next = 5;
	                                    break;
	                                }

	                                _context4.next = 5;
	                                return reader['cancel'](reason).catch(function () {});

	                            case 5:
	                                source && source['locked'] && this.releaseLock();

	                            case 6:
	                            case "end":
	                                return _context4.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));

	            function cancel(_x3) {
	                return _ref12.apply(this, arguments);
	            }

	            return cancel;
	        }()
	    }, {
	        key: "read",
	        value: function () {
	            var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(size) {
	                var result;
	                return regeneratorRuntime.wrap(function _callee4$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                if (!(size === 0)) {
	                                    _context5.next = 2;
	                                    break;
	                                }

	                                return _context5.abrupt("return", { done: this.reader == null, value: new Uint8Array(0) });

	                            case 2:
	                                if (!(!this.supportsBYOB || typeof size !== 'number')) {
	                                    _context5.next = 8;
	                                    break;
	                                }

	                                _context5.next = 5;
	                                return this.getDefaultReader().read();

	                            case 5:
	                                _context5.t0 = _context5.sent;
	                                _context5.next = 11;
	                                break;

	                            case 8:
	                                _context5.next = 10;
	                                return this.readFromBYOBReader(size);

	                            case 10:
	                                _context5.t0 = _context5.sent;

	                            case 11:
	                                result = _context5.t0;

	                                !result.done && (result.value = buffer_1.toUint8Array(result));
	                                return _context5.abrupt("return", result);

	                            case 14:
	                            case "end":
	                                return _context5.stop();
	                        }
	                    }
	                }, _callee4, this);
	            }));

	            function read(_x4) {
	                return _ref13.apply(this, arguments);
	            }

	            return read;
	        }()
	    }, {
	        key: "getDefaultReader",
	        value: function getDefaultReader() {
	            if (this.byobReader) {
	                this.releaseLock();
	            }
	            if (!this.defaultReader) {
	                this.defaultReader = this.source['getReader']();
	                // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions
	                // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified
	                // about why these errors are raised, but I'm sure there's some important spec reason that
	                // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the
	                // only solution in this case :/
	                this.defaultReader['closed'].catch(function () {});
	            }
	            return this.reader = this.defaultReader;
	        }
	    }, {
	        key: "getBYOBReader",
	        value: function getBYOBReader() {
	            if (this.defaultReader) {
	                this.releaseLock();
	            }
	            if (!this.byobReader) {
	                this.byobReader = this.source['getReader']({ mode: 'byob' });
	                // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions
	                // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified
	                // about why these errors are raised, but I'm sure there's some important spec reason that
	                // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the
	                // only solution in this case :/
	                this.byobReader['closed'].catch(function () {});
	            }
	            return this.reader = this.byobReader;
	        }
	        // This strategy plucked from the example in the streams spec:
	        // https://streams.spec.whatwg.org/#example-manual-read-bytes

	    }, {
	        key: "readFromBYOBReader",
	        value: function () {
	            var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(size) {
	                return regeneratorRuntime.wrap(function _callee5$(_context6) {
	                    while (1) {
	                        switch (_context6.prev = _context6.next) {
	                            case 0:
	                                _context6.next = 2;
	                                return readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);

	                            case 2:
	                                return _context6.abrupt("return", _context6.sent);

	                            case 3:
	                            case "end":
	                                return _context6.stop();
	                        }
	                    }
	                }, _callee5, this);
	            }));

	            function readFromBYOBReader(_x5) {
	                return _ref14.apply(this, arguments);
	            }

	            return readFromBYOBReader;
	        }()
	    }, {
	        key: "closed",
	        get: function get() {
	            return this.reader ? this.reader['closed'].catch(function () {}) : Promise.resolve();
	        }
	    }]);

	    return AdaptiveByteReader;
	}();

	var onEvent = function onEvent(stream, event) {
	    var handler = function handler(_) {
	        return resolve([event, _]);
	    };
	    var resolve = void 0;
	    return [event, handler, new Promise(function (r) {
	        return (resolve = r) && stream['once'](event, handler);
	    })];
	};

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _asyncGenerator = function () { function AwaitValue(value) { this.value = value; } function AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; if (value instanceof AwaitValue) { Promise.resolve(value.value).then(function (arg) { resume("next", arg); }, function (arg) { resume("throw", arg); }); } else { settle(result.done ? "return" : "normal", result.value); } } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } } if (typeof Symbol === "function" && Symbol.asyncIterator) { AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; } AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); }; AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); }; AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); }; return { wrap: function wrap(fn) { return function () { return new AsyncGenerator(fn.apply(this, arguments)); }; }, await: function _await(value) { return new AwaitValue(value); } }; }();

	/** @ignore */
	var toArrayBufferViewAsyncIterator = function () {
	    var _ref = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(ArrayCtor, source) {
	        var wrap, emit, buffers;
	        return regeneratorRuntime.wrap(function _callee6$(_context8) {
	            while (1) {
	                switch (_context8.prev = _context8.next) {
	                    case 0:
	                        if (!compat_1.isPromise(source)) {
	                            _context8.next = 13;
	                            break;
	                        }

	                        _context8.t0 = _asyncGeneratorDelegate;
	                        _context8.t1 = _asyncIterator;
	                        _context8.t2 = toArrayBufferViewAsyncIterator;
	                        _context8.t3 = ArrayCtor;
	                        _context8.next = 7;
	                        return _asyncGenerator.await(source);

	                    case 7:
	                        _context8.t4 = _context8.sent;
	                        _context8.t5 = (0, _context8.t2)(_context8.t3, _context8.t4);
	                        _context8.t6 = (0, _context8.t1)(_context8.t5);
	                        _context8.t7 = _asyncGenerator.await;
	                        return _context8.delegateYield((0, _context8.t0)(_context8.t6, _context8.t7), "t8", 12);

	                    case 12:
	                        return _context8.abrupt("return", _context8.t8);

	                    case 13:
	                        wrap = function () {
	                            var _ref2 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(x) {
	                                return regeneratorRuntime.wrap(function _callee2$(_context4) {
	                                    while (1) {
	                                        switch (_context4.prev = _context4.next) {
	                                            case 0:
	                                                _context4.next = 2;
	                                                return _asyncGenerator.await(x);

	                                            case 2:
	                                                _context4.next = 4;
	                                                return _context4.sent;

	                                            case 4:
	                                            case "end":
	                                                return _context4.stop();
	                                        }
	                                    }
	                                }, _callee2, this);
	                            }));

	                            return function wrap(_x6) {
	                                return _ref2.apply(this, arguments);
	                            };
	                        }();

	                        emit = function () {
	                            var _ref3 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(source) {
	                                return regeneratorRuntime.wrap(function _callee4$(_context6) {
	                                    while (1) {
	                                        switch (_context6.prev = _context6.next) {
	                                            case 0:
	                                                return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pump( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(it) {
	                                                    var r;
	                                                    return regeneratorRuntime.wrap(function _callee3$(_context5) {
	                                                        while (1) {
	                                                            switch (_context5.prev = _context5.next) {
	                                                                case 0:
	                                                                    r = null;

	                                                                case 1:
	                                                                    _context5.t0 = it;
	                                                                    _context5.next = 4;
	                                                                    return r && r.value;

	                                                                case 4:
	                                                                    _context5.t1 = _context5.sent;
	                                                                    r = _context5.t0.next.call(_context5.t0, _context5.t1);

	                                                                case 6:
	                                                                    if (!r.done) {
	                                                                        _context5.next = 1;
	                                                                        break;
	                                                                    }

	                                                                case 7:
	                                                                case "end":
	                                                                    return _context5.stop();
	                                                            }
	                                                        }
	                                                    }, _callee3, this);
	                                                })(source[Symbol.iterator]()))), _asyncGenerator.await), "t0", 1);

	                                            case 1:
	                                            case "end":
	                                                return _context6.stop();
	                                        }
	                                    }
	                                }, _callee4, this);
	                            }));

	                            return function emit(_x7) {
	                                return _ref3.apply(this, arguments);
	                            };
	                        }();

	                        buffers = typeof source === 'string' ? wrap(source) // if string, wrap in an AsyncIterableIterator
	                        : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator
	                        : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator
	                        : source instanceof SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator
	                        : compat_1.isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values
	                        : !compat_1.isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator
	                        : source; // otherwise if AsyncIterable, use it

	                        return _context8.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pump(function () {
	                            var _ref4 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(it) {
	                                var r;
	                                return regeneratorRuntime.wrap(function _callee5$(_context7) {
	                                    while (1) {
	                                        switch (_context7.prev = _context7.next) {
	                                            case 0:
	                                                r = null;

	                                            case 1:
	                                                _context7.t0 = _asyncGenerator;
	                                                _context7.t1 = it;
	                                                _context7.next = 5;
	                                                return toArrayBufferView(ArrayCtor, r);

	                                            case 5:
	                                                _context7.t2 = _context7.sent;
	                                                _context7.t3 = _context7.t1.next.call(_context7.t1, _context7.t2);
	                                                _context7.next = 9;
	                                                return _context7.t0.await.call(_context7.t0, _context7.t3);

	                                            case 9:
	                                                r = _context7.sent;

	                                            case 10:
	                                                if (!r.done) {
	                                                    _context7.next = 1;
	                                                    break;
	                                                }

	                                            case 11:
	                                            case "end":
	                                                return _context7.stop();
	                                        }
	                                    }
	                                }, _callee5, this);
	                            }));

	                            return function (_x8) {
	                                return _ref4.apply(this, arguments);
	                            };
	                        }()(buffers[Symbol.asyncIterator]()))), _asyncGenerator.await), "t9", 17);

	                    case 17:
	                    case "end":
	                        return _context8.stop();
	                }
	            }
	        }, _callee6, this);
	    }));

	    return function toArrayBufferViewAsyncIterator(_x4, _x5) {
	        return _ref.apply(this, arguments);
	    };
	}();

	function _asyncIterator(iterable) { if (typeof Symbol === "function") { if (Symbol.asyncIterator) { var method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { return iterable[Symbol.iterator](); } } throw new TypeError("Object is not async iterable"); }

	function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { return pump("return", value); }; } return iter; }

	var _marked = /*#__PURE__*/regeneratorRuntime.mark(toArrayBufferViewIterator);

	Object.defineProperty(exports, "__esModule", { value: true });
	var flatbuffers_1 = __webpack_require__(61);
	var utf8_1 = __webpack_require__(62);
	var ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;
	var compat_1 = __webpack_require__(64);
	/** @ignore */
	var SharedArrayBuf = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer;
	/** @ignore */
	function collapseContiguousByteRanges(chunks) {
	    var result = chunks[0] ? [chunks[0]] : [];
	    var xOffset = void 0,
	        yOffset = void 0,
	        xLen = void 0,
	        yLen = void 0;
	    for (var x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {
	        x = result[j];
	        y = chunks[i];
	        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y
	        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {
	            y && (result[++j] = y);
	            continue;
	        }
	        var _x = x;
	        xOffset = _x.byteOffset;
	        xLen = _x.byteLength;

	        // continue if the byte ranges of x and y aren't contiguous
	        var _y = y;
	        yOffset = _y.byteOffset;
	        yLen = _y.byteLength;
	        if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {
	            y && (result[++j] = y);
	            continue;
	        }
	        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);
	    }
	    return result;
	}
	/** @ignore */
	function memcpy(target, source) {
	    var targetByteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	    var sourceByteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : source.byteLength;

	    var targetByteLength = target.byteLength;
	    var dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);
	    var src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));
	    dst.set(src, targetByteOffset);
	    return target;
	}
	exports.memcpy = memcpy;
	/** @ignore */
	function joinUint8Arrays(chunks, size) {
	    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,
	    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during
	    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer
	    var result = collapseContiguousByteRanges(chunks);
	    var byteLength = result.reduce(function (x, b) {
	        return x + b.byteLength;
	    }, 0);
	    var source = void 0,
	        sliced = void 0,
	        buffer = void 0;
	    var offset = 0,
	        index = -1,
	        length = Math.min(size || Infinity, byteLength);
	    for (var n = result.length; ++index < n;) {
	        source = result[index];
	        sliced = source.subarray(0, Math.min(source.length, length - offset));
	        if (length <= offset + sliced.length) {
	            if (sliced.length < source.length) {
	                result[index] = source.subarray(sliced.length);
	            } else if (sliced.length === source.length) {
	                index++;
	            }
	            buffer ? memcpy(buffer, sliced, offset) : buffer = sliced;
	            break;
	        }
	        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);
	        offset += sliced.length;
	    }
	    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];
	}
	exports.joinUint8Arrays = joinUint8Arrays;
	function toArrayBufferView(ArrayBufferViewCtor, input) {
	    var value = compat_1.isIteratorResult(input) ? input.value : input;
	    if (value instanceof ArrayBufferViewCtor) {
	        if (ArrayBufferViewCtor === Uint8Array) {
	            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need
	            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/
	            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);
	        }
	        return value;
	    }
	    if (!value) {
	        return new ArrayBufferViewCtor(0);
	    }
	    if (typeof value === 'string') {
	        value = utf8_1.encodeUtf8(value);
	    }
	    if (value instanceof ArrayBuffer) {
	        return new ArrayBufferViewCtor(value);
	    }
	    if (value instanceof SharedArrayBuf) {
	        return new ArrayBufferViewCtor(value);
	    }
	    if (value instanceof ByteBuffer) {
	        return toArrayBufferView(ArrayBufferViewCtor, value.bytes());
	    }
	    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);
	}
	exports.toArrayBufferView = toArrayBufferView;
	/** @ignore */exports.toInt8Array = function (input) {
	    return toArrayBufferView(Int8Array, input);
	};
	/** @ignore */exports.toInt16Array = function (input) {
	    return toArrayBufferView(Int16Array, input);
	};
	/** @ignore */exports.toInt32Array = function (input) {
	    return toArrayBufferView(Int32Array, input);
	};
	/** @ignore */exports.toBigInt64Array = function (input) {
	    return toArrayBufferView(compat_1.BigInt64Array, input);
	};
	/** @ignore */exports.toUint8Array = function (input) {
	    return toArrayBufferView(Uint8Array, input);
	};
	/** @ignore */exports.toUint16Array = function (input) {
	    return toArrayBufferView(Uint16Array, input);
	};
	/** @ignore */exports.toUint32Array = function (input) {
	    return toArrayBufferView(Uint32Array, input);
	};
	/** @ignore */exports.toBigUint64Array = function (input) {
	    return toArrayBufferView(compat_1.BigUint64Array, input);
	};
	/** @ignore */exports.toFloat32Array = function (input) {
	    return toArrayBufferView(Float32Array, input);
	};
	/** @ignore */exports.toFloat64Array = function (input) {
	    return toArrayBufferView(Float64Array, input);
	};
	/** @ignore */exports.toUint8ClampedArray = function (input) {
	    return toArrayBufferView(Uint8ClampedArray, input);
	};
	/** @ignore */
	var pump = function pump(iterator) {
	    iterator.next();return iterator;
	};
	/** @ignore */
	function toArrayBufferViewIterator(ArrayCtor, source) {
	    var wrap, buffers;
	    return regeneratorRuntime.wrap(function toArrayBufferViewIterator$(_context3) {
	        while (1) {
	            switch (_context3.prev = _context3.next) {
	                case 0:
	                    wrap = /*#__PURE__*/regeneratorRuntime.mark(function wrap(x) {
	                        return regeneratorRuntime.wrap(function wrap$(_context) {
	                            while (1) {
	                                switch (_context.prev = _context.next) {
	                                    case 0:
	                                        _context.next = 2;
	                                        return x;

	                                    case 2:
	                                    case "end":
	                                        return _context.stop();
	                                }
	                            }
	                        }, wrap, this);
	                    });
	                    buffers = typeof source === 'string' ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof SharedArrayBuf ? wrap(source) : !compat_1.isIterable(source) ? wrap(source) : source;
	                    return _context3.delegateYield(pump( /*#__PURE__*/regeneratorRuntime.mark(function _callee(it) {
	                        var r;
	                        return regeneratorRuntime.wrap(function _callee$(_context2) {
	                            while (1) {
	                                switch (_context2.prev = _context2.next) {
	                                    case 0:
	                                        r = null;

	                                    case 1:
	                                        _context2.t0 = it;
	                                        _context2.next = 4;
	                                        return toArrayBufferView(ArrayCtor, r);

	                                    case 4:
	                                        _context2.t1 = _context2.sent;
	                                        r = _context2.t0.next.call(_context2.t0, _context2.t1);

	                                    case 6:
	                                        if (!r.done) {
	                                            _context2.next = 1;
	                                            break;
	                                        }

	                                    case 7:
	                                    case "end":
	                                        return _context2.stop();
	                                }
	                            }
	                        }, _callee, this);
	                    })(buffers[Symbol.iterator]())), "t0", 3);

	                case 3:
	                case "end":
	                    return _context3.stop();
	            }
	        }
	    }, _marked, this);
	}
	exports.toArrayBufferViewIterator = toArrayBufferViewIterator;
	/** @ignore */exports.toInt8ArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Int8Array, input);
	};
	/** @ignore */exports.toInt16ArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Int16Array, input);
	};
	/** @ignore */exports.toInt32ArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Int32Array, input);
	};
	/** @ignore */exports.toUint8ArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Uint8Array, input);
	};
	/** @ignore */exports.toUint16ArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Uint16Array, input);
	};
	/** @ignore */exports.toUint32ArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Uint32Array, input);
	};
	/** @ignore */exports.toFloat32ArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Float32Array, input);
	};
	/** @ignore */exports.toFloat64ArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Float64Array, input);
	};
	/** @ignore */exports.toUint8ClampedArrayIterator = function (input) {
	    return toArrayBufferViewIterator(Uint8ClampedArray, input);
	};
	exports.toArrayBufferViewAsyncIterator = toArrayBufferViewAsyncIterator;
	/** @ignore */exports.toInt8ArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Int8Array, input);
	};
	/** @ignore */exports.toInt16ArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Int16Array, input);
	};
	/** @ignore */exports.toInt32ArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Int32Array, input);
	};
	/** @ignore */exports.toUint8ArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Uint8Array, input);
	};
	/** @ignore */exports.toUint16ArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Uint16Array, input);
	};
	/** @ignore */exports.toUint32ArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Uint32Array, input);
	};
	/** @ignore */exports.toFloat32ArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Float32Array, input);
	};
	/** @ignore */exports.toFloat64ArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Float64Array, input);
	};
	/** @ignore */exports.toUint8ClampedArrayAsyncIterator = function (input) {
	    return toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);
	};
	/** @ignore */
	function rebaseValueOffsets(offset, length, valueOffsets) {
	    // If we have a non-zero offset, create a new offsets array with the values
	    // shifted by the start offset, such that the new start offset is 0
	    if (offset !== 0) {
	        valueOffsets = valueOffsets.slice(0, length + 1);
	        for (var i = -1; ++i <= length;) {
	            valueOffsets[i] += offset;
	        }
	    }
	    return valueOffsets;
	}
	exports.rebaseValueOffsets = rebaseValueOffsets;
	/** @ignore */
	function compareArrayLike(a, b) {
	    var i = 0,
	        n = a.length;
	    if (n !== b.length) {
	        return false;
	    }
	    if (n > 0) {
	        do {
	            if (a[i] !== b[i]) {
	                return false;
	            }
	        } while (++i < n);
	    }
	    return true;
	}
	exports.compareArrayLike = compareArrayLike;

	//# sourceMappingURL=buffer.js.map

/***/ }),
/* 61 */
/***/ (function(module, exports) {

	/// @file
	/// @addtogroup flatbuffers_javascript_api
	/// @{
	/// @cond FLATBUFFERS_INTERNAL

	/**
	 * @fileoverview
	 *
	 * Need to suppress 'global this' error so the Node.js export line doesn't cause
	 * closure compile to error out.
	 * @suppress {globalThis}
	 */

	/**
	 * @const
	 * @namespace
	 */
	var flatbuffers = {};

	/**
	 * @typedef {number}
	 */
	flatbuffers.Offset;

	/**
	 * @typedef {{
	 *   bb: flatbuffers.ByteBuffer,
	 *   bb_pos: number
	 * }}
	 */
	flatbuffers.Table;

	/**
	 * @type {number}
	 * @const
	 */
	flatbuffers.SIZEOF_SHORT = 2;

	/**
	 * @type {number}
	 * @const
	 */
	flatbuffers.SIZEOF_INT = 4;

	/**
	 * @type {number}
	 * @const
	 */
	flatbuffers.FILE_IDENTIFIER_LENGTH = 4;

	/**
	 * @enum {number}
	 */
	flatbuffers.Encoding = {
	  UTF8_BYTES: 1,
	  UTF16_STRING: 2
	};

	/**
	 * @type {Int32Array}
	 * @const
	 */
	flatbuffers.int32 = new Int32Array(2);

	/**
	 * @type {Float32Array}
	 * @const
	 */
	flatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);

	/**
	 * @type {Float64Array}
	 * @const
	 */
	flatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);

	/**
	 * @type {boolean}
	 * @const
	 */
	flatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;

	////////////////////////////////////////////////////////////////////////////////

	/**
	 * @constructor
	 * @param {number} low
	 * @param {number} high
	 */
	flatbuffers.Long = function(low, high) {
	  /**
	   * @type {number}
	   * @const
	   */
	  this.low = low | 0;

	  /**
	   * @type {number}
	   * @const
	   */
	  this.high = high | 0;
	};

	/**
	 * @param {number} low
	 * @param {number} high
	 * @returns {flatbuffers.Long}
	 */
	flatbuffers.Long.create = function(low, high) {
	  // Special-case zero to avoid GC overhead for default values
	  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);
	};

	/**
	 * @returns {number}
	 */
	flatbuffers.Long.prototype.toFloat64 = function() {
	  return (this.low >>> 0) + this.high * 0x100000000;
	};

	/**
	 * @param {flatbuffers.Long} other
	 * @returns {boolean}
	 */
	flatbuffers.Long.prototype.equals = function(other) {
	  return this.low == other.low && this.high == other.high;
	};

	/**
	 * @type {flatbuffers.Long}
	 * @const
	 */
	flatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);

	/// @endcond
	////////////////////////////////////////////////////////////////////////////////
	/**
	 * Create a FlatBufferBuilder.
	 *
	 * @constructor
	 * @param {number=} opt_initial_size
	 */
	flatbuffers.Builder = function(opt_initial_size) {
	  if (!opt_initial_size) {
	    var initial_size = 1024;
	  } else {
	    var initial_size = opt_initial_size;
	  }

	  /**
	   * @type {flatbuffers.ByteBuffer}
	   * @private
	   */
	  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);

	  /**
	   * Remaining space in the ByteBuffer.
	   *
	   * @type {number}
	   * @private
	   */
	  this.space = initial_size;

	  /**
	   * Minimum alignment encountered so far.
	   *
	   * @type {number}
	   * @private
	   */
	  this.minalign = 1;

	  /**
	   * The vtable for the current table.
	   *
	   * @type {Array.<number>}
	   * @private
	   */
	  this.vtable = null;

	  /**
	   * The amount of fields we're actually using.
	   *
	   * @type {number}
	   * @private
	   */
	  this.vtable_in_use = 0;

	  /**
	   * Whether we are currently serializing a table.
	   *
	   * @type {boolean}
	   * @private
	   */
	  this.isNested = false;

	  /**
	   * Starting offset of the current struct/table.
	   *
	   * @type {number}
	   * @private
	   */
	  this.object_start = 0;

	  /**
	   * List of offsets of all vtables.
	   *
	   * @type {Array.<number>}
	   * @private
	   */
	  this.vtables = [];

	  /**
	   * For the current vector being built.
	   *
	   * @type {number}
	   * @private
	   */
	  this.vector_num_elems = 0;

	  /**
	   * False omits default values from the serialized data
	   *
	   * @type {boolean}
	   * @private
	   */
	  this.force_defaults = false;
	};

	flatbuffers.Builder.prototype.clear = function() {
	  this.bb.clear();
	  this.space = this.bb.capacity();
	  this.minalign = 1;
	  this.vtable = null;
	  this.vtable_in_use = 0;
	  this.isNested = false;
	  this.object_start = 0;
	  this.vtables = [];
	  this.vector_num_elems = 0;
	  this.force_defaults = false;
	};

	/**
	 * In order to save space, fields that are set to their default value
	 * don't get serialized into the buffer. Forcing defaults provides a
	 * way to manually disable this optimization.
	 *
	 * @param {boolean} forceDefaults true always serializes default values
	 */
	flatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {
	  this.force_defaults = forceDefaults;
	};

	/**
	 * Get the ByteBuffer representing the FlatBuffer. Only call this after you've
	 * called finish(). The actual data starts at the ByteBuffer's current position,
	 * not necessarily at 0.
	 *
	 * @returns {flatbuffers.ByteBuffer}
	 */
	flatbuffers.Builder.prototype.dataBuffer = function() {
	  return this.bb;
	};

	/**
	 * Get the bytes representing the FlatBuffer. Only call this after you've
	 * called finish().
	 *
	 * @returns {Uint8Array}
	 */
	flatbuffers.Builder.prototype.asUint8Array = function() {
	  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
	};

	/// @cond FLATBUFFERS_INTERNAL
	/**
	 * Prepare to write an element of `size` after `additional_bytes` have been
	 * written, e.g. if you write a string, you need to align such the int length
	 * field is aligned to 4 bytes, and the string data follows it directly. If all
	 * you need to do is alignment, `additional_bytes` will be 0.
	 *
	 * @param {number} size This is the of the new element to write
	 * @param {number} additional_bytes The padding size
	 */
	flatbuffers.Builder.prototype.prep = function(size, additional_bytes) {
	  // Track the biggest thing we've ever aligned to.
	  if (size > this.minalign) {
	    this.minalign = size;
	  }

	  // Find the amount of alignment needed such that `size` is properly
	  // aligned after `additional_bytes`
	  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);

	  // Reallocate the buffer if needed.
	  while (this.space < align_size + size + additional_bytes) {
	    var old_buf_size = this.bb.capacity();
	    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);
	    this.space += this.bb.capacity() - old_buf_size;
	  }

	  this.pad(align_size);
	};

	/**
	 * @param {number} byte_size
	 */
	flatbuffers.Builder.prototype.pad = function(byte_size) {
	  for (var i = 0; i < byte_size; i++) {
	    this.bb.writeInt8(--this.space, 0);
	  }
	};

	/**
	 * @param {number} value
	 */
	flatbuffers.Builder.prototype.writeInt8 = function(value) {
	  this.bb.writeInt8(this.space -= 1, value);
	};

	/**
	 * @param {number} value
	 */
	flatbuffers.Builder.prototype.writeInt16 = function(value) {
	  this.bb.writeInt16(this.space -= 2, value);
	};

	/**
	 * @param {number} value
	 */
	flatbuffers.Builder.prototype.writeInt32 = function(value) {
	  this.bb.writeInt32(this.space -= 4, value);
	};

	/**
	 * @param {flatbuffers.Long} value
	 */
	flatbuffers.Builder.prototype.writeInt64 = function(value) {
	  this.bb.writeInt64(this.space -= 8, value);
	};

	/**
	 * @param {number} value
	 */
	flatbuffers.Builder.prototype.writeFloat32 = function(value) {
	  this.bb.writeFloat32(this.space -= 4, value);
	};

	/**
	 * @param {number} value
	 */
	flatbuffers.Builder.prototype.writeFloat64 = function(value) {
	  this.bb.writeFloat64(this.space -= 8, value);
	};
	/// @endcond

	/**
	 * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).
	 * @param {number} value The `int8` to add the the buffer.
	 */
	flatbuffers.Builder.prototype.addInt8 = function(value) {
	  this.prep(1, 0);
	  this.writeInt8(value);
	};

	/**
	 * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).
	 * @param {number} value The `int16` to add the the buffer.
	 */
	flatbuffers.Builder.prototype.addInt16 = function(value) {
	  this.prep(2, 0);
	  this.writeInt16(value);
	};

	/**
	 * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).
	 * @param {number} value The `int32` to add the the buffer.
	 */
	flatbuffers.Builder.prototype.addInt32 = function(value) {
	  this.prep(4, 0);
	  this.writeInt32(value);
	};

	/**
	 * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).
	 * @param {flatbuffers.Long} value The `int64` to add the the buffer.
	 */
	flatbuffers.Builder.prototype.addInt64 = function(value) {
	  this.prep(8, 0);
	  this.writeInt64(value);
	};

	/**
	 * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).
	 * @param {number} value The `float32` to add the the buffer.
	 */
	flatbuffers.Builder.prototype.addFloat32 = function(value) {
	  this.prep(4, 0);
	  this.writeFloat32(value);
	};

	/**
	 * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).
	 * @param {number} value The `float64` to add the the buffer.
	 */
	flatbuffers.Builder.prototype.addFloat64 = function(value) {
	  this.prep(8, 0);
	  this.writeFloat64(value);
	};

	/// @cond FLATBUFFERS_INTERNAL
	/**
	 * @param {number} voffset
	 * @param {number} value
	 * @param {number} defaultValue
	 */
	flatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {
	  if (this.force_defaults || value != defaultValue) {
	    this.addInt8(value);
	    this.slot(voffset);
	  }
	};

	/**
	 * @param {number} voffset
	 * @param {number} value
	 * @param {number} defaultValue
	 */
	flatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {
	  if (this.force_defaults || value != defaultValue) {
	    this.addInt16(value);
	    this.slot(voffset);
	  }
	};

	/**
	 * @param {number} voffset
	 * @param {number} value
	 * @param {number} defaultValue
	 */
	flatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {
	  if (this.force_defaults || value != defaultValue) {
	    this.addInt32(value);
	    this.slot(voffset);
	  }
	};

	/**
	 * @param {number} voffset
	 * @param {flatbuffers.Long} value
	 * @param {flatbuffers.Long} defaultValue
	 */
	flatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {
	  if (this.force_defaults || !value.equals(defaultValue)) {
	    this.addInt64(value);
	    this.slot(voffset);
	  }
	};

	/**
	 * @param {number} voffset
	 * @param {number} value
	 * @param {number} defaultValue
	 */
	flatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {
	  if (this.force_defaults || value != defaultValue) {
	    this.addFloat32(value);
	    this.slot(voffset);
	  }
	};

	/**
	 * @param {number} voffset
	 * @param {number} value
	 * @param {number} defaultValue
	 */
	flatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {
	  if (this.force_defaults || value != defaultValue) {
	    this.addFloat64(value);
	    this.slot(voffset);
	  }
	};

	/**
	 * @param {number} voffset
	 * @param {flatbuffers.Offset} value
	 * @param {flatbuffers.Offset} defaultValue
	 */
	flatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {
	  if (this.force_defaults || value != defaultValue) {
	    this.addOffset(value);
	    this.slot(voffset);
	  }
	};

	/**
	 * Structs are stored inline, so nothing additional is being added. `d` is always 0.
	 *
	 * @param {number} voffset
	 * @param {flatbuffers.Offset} value
	 * @param {flatbuffers.Offset} defaultValue
	 */
	flatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {
	  if (value != defaultValue) {
	    this.nested(value);
	    this.slot(voffset);
	  }
	};

	/**
	 * Structures are always stored inline, they need to be created right
	 * where they're used.  You'll get this assertion failure if you
	 * created it elsewhere.
	 *
	 * @param {flatbuffers.Offset} obj The offset of the created object
	 */
	flatbuffers.Builder.prototype.nested = function(obj) {
	  if (obj != this.offset()) {
	    throw new Error('FlatBuffers: struct must be serialized inline.');
	  }
	};

	/**
	 * Should not be creating any other object, string or vector
	 * while an object is being constructed
	 */
	flatbuffers.Builder.prototype.notNested = function() {
	  if (this.isNested) {
	    throw new Error('FlatBuffers: object serialization must not be nested.');
	  }
	};

	/**
	 * Set the current vtable at `voffset` to the current location in the buffer.
	 *
	 * @param {number} voffset
	 */
	flatbuffers.Builder.prototype.slot = function(voffset) {
	  this.vtable[voffset] = this.offset();
	};

	/**
	 * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.
	 */
	flatbuffers.Builder.prototype.offset = function() {
	  return this.bb.capacity() - this.space;
	};

	/**
	 * Doubles the size of the backing ByteBuffer and copies the old data towards
	 * the end of the new buffer (since we build the buffer backwards).
	 *
	 * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data
	 * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied
	 * to it. The data is located at the end of the buffer.
	 *
	 * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass
	 * it a uint8Array we need to suppress the type check:
	 * @suppress {checkTypes}
	 */
	flatbuffers.Builder.growByteBuffer = function(bb) {
	  var old_buf_size = bb.capacity();

	  // Ensure we don't grow beyond what fits in an int.
	  if (old_buf_size & 0xC0000000) {
	    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');
	  }

	  var new_buf_size = old_buf_size << 1;
	  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);
	  nbb.setPosition(new_buf_size - old_buf_size);
	  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);
	  return nbb;
	};
	/// @endcond

	/**
	 * Adds on offset, relative to where it will be written.
	 *
	 * @param {flatbuffers.Offset} offset The offset to add.
	 */
	flatbuffers.Builder.prototype.addOffset = function(offset) {
	  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.
	  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);
	};

	/// @cond FLATBUFFERS_INTERNAL
	/**
	 * Start encoding a new object in the buffer.  Users will not usually need to
	 * call this directly. The FlatBuffers compiler will generate helper methods
	 * that call this method internally.
	 *
	 * @param {number} numfields
	 */
	flatbuffers.Builder.prototype.startObject = function(numfields) {
	  this.notNested();
	  if (this.vtable == null) {
	    this.vtable = [];
	  }
	  this.vtable_in_use = numfields;
	  for (var i = 0; i < numfields; i++) {
	    this.vtable[i] = 0; // This will push additional elements as needed
	  }
	  this.isNested = true;
	  this.object_start = this.offset();
	};

	/**
	 * Finish off writing the object that is under construction.
	 *
	 * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`
	 */
	flatbuffers.Builder.prototype.endObject = function() {
	  if (this.vtable == null || !this.isNested) {
	    throw new Error('FlatBuffers: endObject called without startObject');
	  }

	  this.addInt32(0);
	  var vtableloc = this.offset();

	  // Trim trailing zeroes.
	  var i = this.vtable_in_use - 1;
	  for (; i >= 0 && this.vtable[i] == 0; i--) {}
	  var trimmed_size = i + 1;

	  // Write out the current vtable.
	  for (; i >= 0; i--) {
	    // Offset relative to the start of the table.
	    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);
	  }

	  var standard_fields = 2; // The fields below:
	  this.addInt16(vtableloc - this.object_start);
	  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;
	  this.addInt16(len);

	  // Search for an existing vtable that matches the current one.
	  var existing_vtable = 0;
	  var vt1 = this.space;
	outer_loop:
	  for (i = 0; i < this.vtables.length; i++) {
	    var vt2 = this.bb.capacity() - this.vtables[i];
	    if (len == this.bb.readInt16(vt2)) {
	      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {
	        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {
	          continue outer_loop;
	        }
	      }
	      existing_vtable = this.vtables[i];
	      break;
	    }
	  }

	  if (existing_vtable) {
	    // Found a match:
	    // Remove the current vtable.
	    this.space = this.bb.capacity() - vtableloc;

	    // Point table to existing vtable.
	    this.bb.writeInt32(this.space, existing_vtable - vtableloc);
	  } else {
	    // No match:
	    // Add the location of the current vtable to the list of vtables.
	    this.vtables.push(this.offset());

	    // Point table to current vtable.
	    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
	  }

	  this.isNested = false;
	  return vtableloc;
	};
	/// @endcond

	/**
	 * Finalize a buffer, poiting to the given `root_table`.
	 *
	 * @param {flatbuffers.Offset} root_table
	 * @param {string=} opt_file_identifier
	 */
	flatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {
	  if (opt_file_identifier) {
	    var file_identifier = opt_file_identifier;
	    this.prep(this.minalign, flatbuffers.SIZEOF_INT +
	      flatbuffers.FILE_IDENTIFIER_LENGTH);
	    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
	      throw new Error('FlatBuffers: file identifier must be length ' +
	        flatbuffers.FILE_IDENTIFIER_LENGTH);
	    }
	    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {
	      this.writeInt8(file_identifier.charCodeAt(i));
	    }
	  }
	  this.prep(this.minalign, flatbuffers.SIZEOF_INT);
	  this.addOffset(root_table);
	  this.bb.setPosition(this.space);
	};

	/// @cond FLATBUFFERS_INTERNAL
	/**
	 * This checks a required field has been set in a given table that has
	 * just been constructed.
	 *
	 * @param {flatbuffers.Offset} table
	 * @param {number} field
	 */
	flatbuffers.Builder.prototype.requiredField = function(table, field) {
	  var table_start = this.bb.capacity() - table;
	  var vtable_start = table_start - this.bb.readInt32(table_start);
	  var ok = this.bb.readInt16(vtable_start + field) != 0;

	  // If this fails, the caller will show what field needs to be set.
	  if (!ok) {
	    throw new Error('FlatBuffers: field ' + field + ' must be set');
	  }
	};

	/**
	 * Start a new array/vector of objects.  Users usually will not call
	 * this directly. The FlatBuffers compiler will create a start/end
	 * method for vector types in generated code.
	 *
	 * @param {number} elem_size The size of each element in the array
	 * @param {number} num_elems The number of elements in the array
	 * @param {number} alignment The alignment of the array
	 */
	flatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {
	  this.notNested();
	  this.vector_num_elems = num_elems;
	  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);
	  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.
	};

	/**
	 * Finish off the creation of an array and all its elements. The array must be
	 * created with `startVector`.
	 *
	 * @returns {flatbuffers.Offset} The offset at which the newly created array
	 * starts.
	 */
	flatbuffers.Builder.prototype.endVector = function() {
	  this.writeInt32(this.vector_num_elems);
	  return this.offset();
	};
	/// @endcond

	/**
	 * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed
	 * instead of a string, it is assumed to contain valid UTF-8 encoded data.
	 *
	 * @param {string|Uint8Array} s The string to encode
	 * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts
	 */
	flatbuffers.Builder.prototype.createString = function(s) {
	  if (s instanceof Uint8Array) {
	    var utf8 = s;
	  } else {
	    var utf8 = [];
	    var i = 0;

	    while (i < s.length) {
	      var codePoint;

	      // Decode UTF-16
	      var a = s.charCodeAt(i++);
	      if (a < 0xD800 || a >= 0xDC00) {
	        codePoint = a;
	      } else {
	        var b = s.charCodeAt(i++);
	        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);
	      }

	      // Encode UTF-8
	      if (codePoint < 0x80) {
	        utf8.push(codePoint);
	      } else {
	        if (codePoint < 0x800) {
	          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);
	        } else {
	          if (codePoint < 0x10000) {
	            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);
	          } else {
	            utf8.push(
	              ((codePoint >> 18) & 0x07) | 0xF0,
	              ((codePoint >> 12) & 0x3F) | 0x80);
	          }
	          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);
	        }
	        utf8.push((codePoint & 0x3F) | 0x80);
	      }
	    }
	  }

	  this.addInt8(0);
	  this.startVector(1, utf8.length, 1);
	  this.bb.setPosition(this.space -= utf8.length);
	  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {
	    bytes[offset++] = utf8[i];
	  }
	  return this.endVector();
	};

	/**
	 * A helper function to avoid generated code depending on this file directly.
	 *
	 * @param {number} low
	 * @param {number} high
	 * @returns {flatbuffers.Long}
	 */
	flatbuffers.Builder.prototype.createLong = function(low, high) {
	  return flatbuffers.Long.create(low, high);
	};
	////////////////////////////////////////////////////////////////////////////////
	/// @cond FLATBUFFERS_INTERNAL
	/**
	 * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).
	 *
	 * @constructor
	 * @param {Uint8Array} bytes
	 */
	flatbuffers.ByteBuffer = function(bytes) {
	  /**
	   * @type {Uint8Array}
	   * @private
	   */
	  this.bytes_ = bytes;

	  /**
	   * @type {number}
	   * @private
	   */
	  this.position_ = 0;
	};

	/**
	 * Create and allocate a new ByteBuffer with a given size.
	 *
	 * @param {number} byte_size
	 * @returns {flatbuffers.ByteBuffer}
	 */
	flatbuffers.ByteBuffer.allocate = function(byte_size) {
	  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));
	};

	flatbuffers.ByteBuffer.prototype.clear = function() {
	  this.position_ = 0;
	};

	/**
	 * Get the underlying `Uint8Array`.
	 *
	 * @returns {Uint8Array}
	 */
	flatbuffers.ByteBuffer.prototype.bytes = function() {
	  return this.bytes_;
	};

	/**
	 * Get the buffer's position.
	 *
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.position = function() {
	  return this.position_;
	};

	/**
	 * Set the buffer's position.
	 *
	 * @param {number} position
	 */
	flatbuffers.ByteBuffer.prototype.setPosition = function(position) {
	  this.position_ = position;
	};

	/**
	 * Get the buffer's capacity.
	 *
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.capacity = function() {
	  return this.bytes_.length;
	};

	/**
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {
	  return this.readUint8(offset) << 24 >> 24;
	};

	/**
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {
	  return this.bytes_[offset];
	};

	/**
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {
	  return this.readUint16(offset) << 16 >> 16;
	};

	/**
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {
	  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;
	};

	/**
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {
	  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;
	};

	/**
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {
	  return this.readInt32(offset) >>> 0;
	};

	/**
	 * @param {number} offset
	 * @returns {flatbuffers.Long}
	 */
	flatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {
	  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));
	};

	/**
	 * @param {number} offset
	 * @returns {flatbuffers.Long}
	 */
	flatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {
	  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));
	};

	/**
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {
	  flatbuffers.int32[0] = this.readInt32(offset);
	  return flatbuffers.float32[0];
	};

	/**
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {
	  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);
	  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);
	  return flatbuffers.float64[0];
	};

	/**
	 * @param {number} offset
	 * @param {number|boolean} value
	 */
	flatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {
	  this.bytes_[offset] = /** @type {number} */(value);
	};

	/**
	 * @param {number} offset
	 * @param {number} value
	 */
	flatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {
	  this.bytes_[offset] = value;
	};

	/**
	 * @param {number} offset
	 * @param {number} value
	 */
	flatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {
	  this.bytes_[offset] = value;
	  this.bytes_[offset + 1] = value >> 8;
	};

	/**
	 * @param {number} offset
	 * @param {number} value
	 */
	flatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {
	    this.bytes_[offset] = value;
	    this.bytes_[offset + 1] = value >> 8;
	};

	/**
	 * @param {number} offset
	 * @param {number} value
	 */
	flatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {
	  this.bytes_[offset] = value;
	  this.bytes_[offset + 1] = value >> 8;
	  this.bytes_[offset + 2] = value >> 16;
	  this.bytes_[offset + 3] = value >> 24;
	};

	/**
	 * @param {number} offset
	 * @param {number} value
	 */
	flatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {
	    this.bytes_[offset] = value;
	    this.bytes_[offset + 1] = value >> 8;
	    this.bytes_[offset + 2] = value >> 16;
	    this.bytes_[offset + 3] = value >> 24;
	};

	/**
	 * @param {number} offset
	 * @param {flatbuffers.Long} value
	 */
	flatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {
	  this.writeInt32(offset, value.low);
	  this.writeInt32(offset + 4, value.high);
	};

	/**
	 * @param {number} offset
	 * @param {flatbuffers.Long} value
	 */
	flatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {
	    this.writeUint32(offset, value.low);
	    this.writeUint32(offset + 4, value.high);
	};

	/**
	 * @param {number} offset
	 * @param {number} value
	 */
	flatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {
	  flatbuffers.float32[0] = value;
	  this.writeInt32(offset, flatbuffers.int32[0]);
	};

	/**
	 * @param {number} offset
	 * @param {number} value
	 */
	flatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {
	  flatbuffers.float64[0] = value;
	  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);
	  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);
	};

	/**
	 * Return the file identifier.   Behavior is undefined for FlatBuffers whose
	 * schema does not include a file_identifier (likely points at padding or the
	 * start of a the root vtable).
	 * @returns {string}
	 */
	flatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {
	  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +
	      flatbuffers.FILE_IDENTIFIER_LENGTH) {
	    throw new Error(
	        'FlatBuffers: ByteBuffer is too short to contain an identifier.');
	  }
	  var result = "";
	  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
	    result += String.fromCharCode(
	        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));
	  }
	  return result;
	};

	/**
	 * Look up a field in the vtable, return an offset into the object, or 0 if the
	 * field is not present.
	 *
	 * @param {number} bb_pos
	 * @param {number} vtable_offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {
	  var vtable = bb_pos - this.readInt32(bb_pos);
	  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
	};

	/**
	 * Initialize any Table-derived type to point to the union at the given offset.
	 *
	 * @param {flatbuffers.Table} t
	 * @param {number} offset
	 * @returns {flatbuffers.Table}
	 */
	flatbuffers.ByteBuffer.prototype.__union = function(t, offset) {
	  t.bb_pos = offset + this.readInt32(offset);
	  t.bb = this;
	  return t;
	};

	/**
	 * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.
	 * This allocates a new string and converts to wide chars upon each access.
	 *
	 * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as
	 * the "optionalEncoding" argument. This is useful for avoiding conversion to
	 * and from UTF-16 when the data will just be packaged back up in another
	 * FlatBuffer later on.
	 *
	 * @param {number} offset
	 * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING
	 * @returns {string|Uint8Array}
	 */
	flatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {
	  offset += this.readInt32(offset);

	  var length = this.readInt32(offset);
	  var result = '';
	  var i = 0;

	  offset += flatbuffers.SIZEOF_INT;

	  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {
	    return this.bytes_.subarray(offset, offset + length);
	  }

	  while (i < length) {
	    var codePoint;

	    // Decode UTF-8
	    var a = this.readUint8(offset + i++);
	    if (a < 0xC0) {
	      codePoint = a;
	    } else {
	      var b = this.readUint8(offset + i++);
	      if (a < 0xE0) {
	        codePoint =
	          ((a & 0x1F) << 6) |
	          (b & 0x3F);
	      } else {
	        var c = this.readUint8(offset + i++);
	        if (a < 0xF0) {
	          codePoint =
	            ((a & 0x0F) << 12) |
	            ((b & 0x3F) << 6) |
	            (c & 0x3F);
	        } else {
	          var d = this.readUint8(offset + i++);
	          codePoint =
	            ((a & 0x07) << 18) |
	            ((b & 0x3F) << 12) |
	            ((c & 0x3F) << 6) |
	            (d & 0x3F);
	        }
	      }
	    }

	    // Encode UTF-16
	    if (codePoint < 0x10000) {
	      result += String.fromCharCode(codePoint);
	    } else {
	      codePoint -= 0x10000;
	      result += String.fromCharCode(
	        (codePoint >> 10) + 0xD800,
	        (codePoint & ((1 << 10) - 1)) + 0xDC00);
	    }
	  }

	  return result;
	};

	/**
	 * Retrieve the relative offset stored at "offset"
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.__indirect = function(offset) {
	  return offset + this.readInt32(offset);
	};

	/**
	 * Get the start of data of a vector whose offset is stored at "offset" in this object.
	 *
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.__vector = function(offset) {
	  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length
	};

	/**
	 * Get the length of a vector whose offset is stored at "offset" in this object.
	 *
	 * @param {number} offset
	 * @returns {number}
	 */
	flatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {
	  return this.readInt32(offset + this.readInt32(offset));
	};

	/**
	 * @param {string} ident
	 * @returns {boolean}
	 */
	flatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {
	  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
	    throw new Error('FlatBuffers: file identifier must be length ' +
	                    flatbuffers.FILE_IDENTIFIER_LENGTH);
	  }
	  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
	    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {
	      return false;
	    }
	  }
	  return true;
	};

	/**
	 * A helper function to avoid generated code depending on this file directly.
	 *
	 * @param {number} low
	 * @param {number} high
	 * @returns {flatbuffers.Long}
	 */
	flatbuffers.ByteBuffer.prototype.createLong = function(low, high) {
	  return flatbuffers.Long.create(low, high);
	};

	// Exports for Node.js and RequireJS
	this.flatbuffers = flatbuffers;

	/// @endcond
	/// @}


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	Object.defineProperty(exports, "__esModule", { value: true });
	var buffer_1 = __webpack_require__(60);
	var text_encoding_utf_8_1 = __webpack_require__(63);
	/** @ignore @suppress {missingRequire} */
	var _Buffer = typeof Buffer === 'function' ? Buffer : null;
	/** @ignore */
	var useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';
	/** @ignore */
	exports.decodeUtf8 = function (TextDecoder) {
	    if (useNativeEncoders || !_Buffer) {
	        var decoder = new TextDecoder('utf-8');
	        return function (buffer) {
	            return decoder.decode(buffer);
	        };
	    }
	    return function (input) {
	        var _buffer_1$toUint8Arra = buffer_1.toUint8Array(input),
	            buffer = _buffer_1$toUint8Arra.buffer,
	            byteOffset = _buffer_1$toUint8Arra.byteOffset,
	            length = _buffer_1$toUint8Arra.length;

	        return _Buffer.from(buffer, byteOffset, length).toString();
	    };
	}(typeof TextDecoder !== 'undefined' ? TextDecoder : text_encoding_utf_8_1.TextDecoder);
	/** @ignore */
	exports.encodeUtf8 = function (TextEncoder) {
	    if (useNativeEncoders || !_Buffer) {
	        var encoder = new TextEncoder();
	        return function (value) {
	            return encoder.encode(value);
	        };
	    }
	    return function () {
	        var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	        return buffer_1.toUint8Array(_Buffer.from(input, 'utf8'));
	    };
	}(typeof TextEncoder !== 'undefined' ? TextEncoder : text_encoding_utf_8_1.TextEncoder);

	//# sourceMappingURL=utf8.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30).Buffer))

/***/ }),
/* 63 */
/***/ (function(module, exports) {

	'use strict';

	// This is free and unencumbered software released into the public domain.
	// See LICENSE.md for more information.

	//
	// Utilities
	//

	/**
	 * @param {number} a The number to test.
	 * @param {number} min The minimum value in the range, inclusive.
	 * @param {number} max The maximum value in the range, inclusive.
	 * @return {boolean} True if a >= min and a <= max.
	 */
	function inRange(a, min, max) {
	  return min <= a && a <= max;
	}

	/**
	 * @param {*} o
	 * @return {Object}
	 */
	function ToDictionary(o) {
	  if (o === undefined) return {};
	  if (o === Object(o)) return o;
	  throw TypeError('Could not convert argument to dictionary');
	}

	/**
	 * @param {string} string Input string of UTF-16 code units.
	 * @return {!Array.<number>} Code points.
	 */
	function stringToCodePoints(string) {
	  // https://heycam.github.io/webidl/#dfn-obtain-unicode

	  // 1. Let S be the DOMString value.
	  var s = String(string);

	  // 2. Let n be the length of S.
	  var n = s.length;

	  // 3. Initialize i to 0.
	  var i = 0;

	  // 4. Initialize U to be an empty sequence of Unicode characters.
	  var u = [];

	  // 5. While i < n:
	  while (i < n) {

	    // 1. Let c be the code unit in S at index i.
	    var c = s.charCodeAt(i);

	    // 2. Depending on the value of c:

	    // c < 0xD800 or c > 0xDFFF
	    if (c < 0xD800 || c > 0xDFFF) {
	      // Append to U the Unicode character with code point c.
	      u.push(c);
	    }

	    // 0xDC00 ≤ c ≤ 0xDFFF
	    else if (0xDC00 <= c && c <= 0xDFFF) {
	      // Append to U a U+FFFD REPLACEMENT CHARACTER.
	      u.push(0xFFFD);
	    }

	    // 0xD800 ≤ c ≤ 0xDBFF
	    else if (0xD800 <= c && c <= 0xDBFF) {
	      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
	      // CHARACTER.
	      if (i === n - 1) {
	        u.push(0xFFFD);
	      }
	      // 2. Otherwise, i < n−1:
	      else {
	        // 1. Let d be the code unit in S at index i+1.
	        var d = string.charCodeAt(i + 1);

	        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
	        if (0xDC00 <= d && d <= 0xDFFF) {
	          // 1. Let a be c & 0x3FF.
	          var a = c & 0x3FF;

	          // 2. Let b be d & 0x3FF.
	          var b = d & 0x3FF;

	          // 3. Append to U the Unicode character with code point
	          // 2^16+2^10*a+b.
	          u.push(0x10000 + (a << 10) + b);

	          // 4. Set i to i+1.
	          i += 1;
	        }

	        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
	        // U+FFFD REPLACEMENT CHARACTER.
	        else  {
	          u.push(0xFFFD);
	        }
	      }
	    }

	    // 3. Set i to i+1.
	    i += 1;
	  }

	  // 6. Return U.
	  return u;
	}

	/**
	 * @param {!Array.<number>} code_points Array of code points.
	 * @return {string} string String of UTF-16 code units.
	 */
	function codePointsToString(code_points) {
	  var s = '';
	  for (var i = 0; i < code_points.length; ++i) {
	    var cp = code_points[i];
	    if (cp <= 0xFFFF) {
	      s += String.fromCharCode(cp);
	    } else {
	      cp -= 0x10000;
	      s += String.fromCharCode((cp >> 10) + 0xD800,
	                               (cp & 0x3FF) + 0xDC00);
	    }
	  }
	  return s;
	}


	//
	// Implementation of Encoding specification
	// https://encoding.spec.whatwg.org/
	//

	//
	// 3. Terminology
	//

	/**
	 * End-of-stream is a special token that signifies no more tokens
	 * are in the stream.
	 * @const
	 */ var end_of_stream = -1;

	/**
	 * A stream represents an ordered sequence of tokens.
	 *
	 * @constructor
	 * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
	 * stream.
	 */
	function Stream(tokens) {
	  /** @type {!Array.<number>} */
	  this.tokens = [].slice.call(tokens);
	}

	Stream.prototype = {
	  /**
	   * @return {boolean} True if end-of-stream has been hit.
	   */
	  endOfStream: function() {
	    return !this.tokens.length;
	  },

	  /**
	   * When a token is read from a stream, the first token in the
	   * stream must be returned and subsequently removed, and
	   * end-of-stream must be returned otherwise.
	   *
	   * @return {number} Get the next token from the stream, or
	   * end_of_stream.
	   */
	   read: function() {
	    if (!this.tokens.length)
	      return end_of_stream;
	     return this.tokens.shift();
	   },

	  /**
	   * When one or more tokens are prepended to a stream, those tokens
	   * must be inserted, in given order, before the first token in the
	   * stream.
	   *
	   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
	   */
	  prepend: function(token) {
	    if (Array.isArray(token)) {
	      var tokens = /**@type {!Array.<number>}*/(token);
	      while (tokens.length)
	        this.tokens.unshift(tokens.pop());
	    } else {
	      this.tokens.unshift(token);
	    }
	  },

	  /**
	   * When one or more tokens are pushed to a stream, those tokens
	   * must be inserted, in given order, after the last token in the
	   * stream.
	   *
	   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
	   */
	  push: function(token) {
	    if (Array.isArray(token)) {
	      var tokens = /**@type {!Array.<number>}*/(token);
	      while (tokens.length)
	        this.tokens.push(tokens.shift());
	    } else {
	      this.tokens.push(token);
	    }
	  }
	};

	//
	// 4. Encodings
	//

	// 4.1 Encoders and decoders

	/** @const */
	var finished = -1;

	/**
	 * @param {boolean} fatal If true, decoding errors raise an exception.
	 * @param {number=} opt_code_point Override the standard fallback code point.
	 * @return {number} The code point to insert on a decoding error.
	 */
	function decoderError(fatal, opt_code_point) {
	  if (fatal)
	    throw TypeError('Decoder error');
	  return opt_code_point || 0xFFFD;
	}

	//
	// 7. API
	//

	/** @const */ var DEFAULT_ENCODING = 'utf-8';

	// 7.1 Interface TextDecoder

	/**
	 * @constructor
	 * @param {string=} encoding The label of the encoding;
	 *     defaults to 'utf-8'.
	 * @param {Object=} options
	 */
	function TextDecoder(encoding, options) {
	  if (!(this instanceof TextDecoder)) {
	    return new TextDecoder(encoding, options);
	  }
	  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
	  if (encoding !== DEFAULT_ENCODING) {
	    throw new Error('Encoding not supported. Only utf-8 is supported');
	  }
	  options = ToDictionary(options);

	  /** @private @type {boolean} */
	  this._streaming = false;
	  /** @private @type {boolean} */
	  this._BOMseen = false;
	  /** @private @type {?Decoder} */
	  this._decoder = null;
	  /** @private @type {boolean} */
	  this._fatal = Boolean(options['fatal']);
	  /** @private @type {boolean} */
	  this._ignoreBOM = Boolean(options['ignoreBOM']);

	  Object.defineProperty(this, 'encoding', {value: 'utf-8'});
	  Object.defineProperty(this, 'fatal', {value: this._fatal});
	  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});
	}

	TextDecoder.prototype = {
	  /**
	   * @param {ArrayBufferView=} input The buffer of bytes to decode.
	   * @param {Object=} options
	   * @return {string} The decoded string.
	   */
	  decode: function decode(input, options) {
	    var bytes;
	    if (typeof input === 'object' && input instanceof ArrayBuffer) {
	      bytes = new Uint8Array(input);
	    } else if (typeof input === 'object' && 'buffer' in input &&
	               input.buffer instanceof ArrayBuffer) {
	      bytes = new Uint8Array(input.buffer,
	                             input.byteOffset,
	                             input.byteLength);
	    } else {
	      bytes = new Uint8Array(0);
	    }

	    options = ToDictionary(options);

	    if (!this._streaming) {
	      this._decoder = new UTF8Decoder({fatal: this._fatal});
	      this._BOMseen = false;
	    }
	    this._streaming = Boolean(options['stream']);

	    var input_stream = new Stream(bytes);

	    var code_points = [];

	    /** @type {?(number|!Array.<number>)} */
	    var result;

	    while (!input_stream.endOfStream()) {
	      result = this._decoder.handler(input_stream, input_stream.read());
	      if (result === finished)
	        break;
	      if (result === null)
	        continue;
	      if (Array.isArray(result))
	        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
	      else
	        code_points.push(result);
	    }
	    if (!this._streaming) {
	      do {
	        result = this._decoder.handler(input_stream, input_stream.read());
	        if (result === finished)
	          break;
	        if (result === null)
	          continue;
	        if (Array.isArray(result))
	          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
	        else
	          code_points.push(result);
	      } while (!input_stream.endOfStream());
	      this._decoder = null;
	    }

	    if (code_points.length) {
	      // If encoding is one of utf-8, utf-16be, and utf-16le, and
	      // ignore BOM flag and BOM seen flag are unset, run these
	      // subsubsteps:
	      if (['utf-8'].indexOf(this.encoding) !== -1 &&
	          !this._ignoreBOM && !this._BOMseen) {
	        // If token is U+FEFF, set BOM seen flag.
	        if (code_points[0] === 0xFEFF) {
	          this._BOMseen = true;
	          code_points.shift();
	        } else {
	          // Otherwise, if token is not end-of-stream, set BOM seen
	          // flag and append token to output.
	          this._BOMseen = true;
	        }
	      }
	    }

	    return codePointsToString(code_points);
	  }
	};

	// 7.2 Interface TextEncoder

	/**
	 * @constructor
	 * @param {string=} encoding The label of the encoding;
	 *     defaults to 'utf-8'.
	 * @param {Object=} options
	 */
	function TextEncoder(encoding, options) {
	  if (!(this instanceof TextEncoder))
	    return new TextEncoder(encoding, options);
	  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
	  if (encoding !== DEFAULT_ENCODING) {
	    throw new Error('Encoding not supported. Only utf-8 is supported');
	  }
	  options = ToDictionary(options);

	  /** @private @type {boolean} */
	  this._streaming = false;
	  /** @private @type {?Encoder} */
	  this._encoder = null;
	  /** @private @type {{fatal: boolean}} */
	  this._options = {fatal: Boolean(options['fatal'])};

	  Object.defineProperty(this, 'encoding', {value: 'utf-8'});
	}

	TextEncoder.prototype = {
	  /**
	   * @param {string=} opt_string The string to encode.
	   * @param {Object=} options
	   * @return {Uint8Array} Encoded bytes, as a Uint8Array.
	   */
	  encode: function encode(opt_string, options) {
	    opt_string = opt_string ? String(opt_string) : '';
	    options = ToDictionary(options);

	    // NOTE: This option is nonstandard. None of the encodings
	    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
	    // so streaming is not necessary.
	    if (!this._streaming)
	      this._encoder = new UTF8Encoder(this._options);
	    this._streaming = Boolean(options['stream']);

	    var bytes = [];
	    var input_stream = new Stream(stringToCodePoints(opt_string));
	    /** @type {?(number|!Array.<number>)} */
	    var result;
	    while (!input_stream.endOfStream()) {
	      result = this._encoder.handler(input_stream, input_stream.read());
	      if (result === finished)
	        break;
	      if (Array.isArray(result))
	        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
	      else
	        bytes.push(result);
	    }
	    if (!this._streaming) {
	      while (true) {
	        result = this._encoder.handler(input_stream, input_stream.read());
	        if (result === finished)
	          break;
	        if (Array.isArray(result))
	          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
	        else
	          bytes.push(result);
	      }
	      this._encoder = null;
	    }
	    return new Uint8Array(bytes);
	  }
	};

	//
	// 8. The encoding
	//

	// 8.1 utf-8

	/**
	 * @constructor
	 * @implements {Decoder}
	 * @param {{fatal: boolean}} options
	 */
	function UTF8Decoder(options) {
	  var fatal = options.fatal;

	  // utf-8's decoder's has an associated utf-8 code point, utf-8
	  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
	  // lower boundary (initially 0x80), and a utf-8 upper boundary
	  // (initially 0xBF).
	  var /** @type {number} */ utf8_code_point = 0,
	      /** @type {number} */ utf8_bytes_seen = 0,
	      /** @type {number} */ utf8_bytes_needed = 0,
	      /** @type {number} */ utf8_lower_boundary = 0x80,
	      /** @type {number} */ utf8_upper_boundary = 0xBF;

	  /**
	   * @param {Stream} stream The stream of bytes being decoded.
	   * @param {number} bite The next byte read from the stream.
	   * @return {?(number|!Array.<number>)} The next code point(s)
	   *     decoded, or null if not enough data exists in the input
	   *     stream to decode a complete code point.
	   */
	  this.handler = function(stream, bite) {
	    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
	    // set utf-8 bytes needed to 0 and return error.
	    if (bite === end_of_stream && utf8_bytes_needed !== 0) {
	      utf8_bytes_needed = 0;
	      return decoderError(fatal);
	    }

	    // 2. If byte is end-of-stream, return finished.
	    if (bite === end_of_stream)
	      return finished;

	    // 3. If utf-8 bytes needed is 0, based on byte:
	    if (utf8_bytes_needed === 0) {

	      // 0x00 to 0x7F
	      if (inRange(bite, 0x00, 0x7F)) {
	        // Return a code point whose value is byte.
	        return bite;
	      }

	      // 0xC2 to 0xDF
	      if (inRange(bite, 0xC2, 0xDF)) {
	        // Set utf-8 bytes needed to 1 and utf-8 code point to byte
	        // − 0xC0.
	        utf8_bytes_needed = 1;
	        utf8_code_point = bite - 0xC0;
	      }

	      // 0xE0 to 0xEF
	      else if (inRange(bite, 0xE0, 0xEF)) {
	        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
	        if (bite === 0xE0)
	          utf8_lower_boundary = 0xA0;
	        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
	        if (bite === 0xED)
	          utf8_upper_boundary = 0x9F;
	        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
	        // byte − 0xE0.
	        utf8_bytes_needed = 2;
	        utf8_code_point = bite - 0xE0;
	      }

	      // 0xF0 to 0xF4
	      else if (inRange(bite, 0xF0, 0xF4)) {
	        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
	        if (bite === 0xF0)
	          utf8_lower_boundary = 0x90;
	        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
	        if (bite === 0xF4)
	          utf8_upper_boundary = 0x8F;
	        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
	        // byte − 0xF0.
	        utf8_bytes_needed = 3;
	        utf8_code_point = bite - 0xF0;
	      }

	      // Otherwise
	      else {
	        // Return error.
	        return decoderError(fatal);
	      }

	      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
	      // point to utf-8 code point << (6 × utf-8 bytes needed) and
	      // return continue.
	      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);
	      return null;
	    }

	    // 4. If byte is not in the range utf-8 lower boundary to utf-8
	    // upper boundary, run these substeps:
	    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

	      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
	      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
	      // utf-8 upper boundary to 0xBF.
	      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
	      utf8_lower_boundary = 0x80;
	      utf8_upper_boundary = 0xBF;

	      // 2. Prepend byte to stream.
	      stream.prepend(bite);

	      // 3. Return error.
	      return decoderError(fatal);
	    }

	    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
	    // to 0xBF.
	    utf8_lower_boundary = 0x80;
	    utf8_upper_boundary = 0xBF;

	    // 6. Increase utf-8 bytes seen by one and set utf-8 code point
	    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
	    // needed − utf-8 bytes seen)).
	    utf8_bytes_seen += 1;
	    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));

	    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
	    // continue.
	    if (utf8_bytes_seen !== utf8_bytes_needed)
	      return null;

	    // 8. Let code point be utf-8 code point.
	    var code_point = utf8_code_point;

	    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
	    // seen to 0.
	    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

	    // 10. Return a code point whose value is code point.
	    return code_point;
	  };
	}

	/**
	 * @constructor
	 * @implements {Encoder}
	 * @param {{fatal: boolean}} options
	 */
	function UTF8Encoder(options) {
	  var fatal = options.fatal;
	  /**
	   * @param {Stream} stream Input stream.
	   * @param {number} code_point Next code point read from the stream.
	   * @return {(number|!Array.<number>)} Byte(s) to emit.
	   */
	  this.handler = function(stream, code_point) {
	    // 1. If code point is end-of-stream, return finished.
	    if (code_point === end_of_stream)
	      return finished;

	    // 2. If code point is in the range U+0000 to U+007F, return a
	    // byte whose value is code point.
	    if (inRange(code_point, 0x0000, 0x007f))
	      return code_point;

	    // 3. Set count and offset based on the range code point is in:
	    var count, offset;
	    // U+0080 to U+07FF:    1 and 0xC0
	    if (inRange(code_point, 0x0080, 0x07FF)) {
	      count = 1;
	      offset = 0xC0;
	    }
	    // U+0800 to U+FFFF:    2 and 0xE0
	    else if (inRange(code_point, 0x0800, 0xFFFF)) {
	      count = 2;
	      offset = 0xE0;
	    }
	    // U+10000 to U+10FFFF: 3 and 0xF0
	    else if (inRange(code_point, 0x10000, 0x10FFFF)) {
	      count = 3;
	      offset = 0xF0;
	    }

	    // 4.Let bytes be a byte sequence whose first byte is (code
	    // point >> (6 × count)) + offset.
	    var bytes = [(code_point >> (6 * count)) + offset];

	    // 5. Run these substeps while count is greater than 0:
	    while (count > 0) {

	      // 1. Set temp to code point >> (6 × (count − 1)).
	      var temp = code_point >> (6 * (count - 1));

	      // 2. Append to bytes 0x80 | (temp & 0x3F).
	      bytes.push(0x80 | (temp & 0x3F));

	      // 3. Decrease count by one.
	      count -= 1;
	    }

	    // 6. Return bytes bytes, in order.
	    return bytes;
	  };
	}

	exports.TextEncoder = TextEncoder;
	exports.TextDecoder = TextDecoder;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var interfaces_1 = __webpack_require__(65);
	/** @ignore */

	var _ref = function () {
	    var BigIntUnavailableError = function BigIntUnavailableError() {
	        throw new Error('BigInt is not available in this environment');
	    };
	    function BigIntUnavailable() {
	        throw BigIntUnavailableError();
	    }
	    BigIntUnavailable.asIntN = function () {
	        throw BigIntUnavailableError();
	    };
	    BigIntUnavailable.asUintN = function () {
	        throw BigIntUnavailableError();
	    };
	    return typeof BigInt !== 'undefined' ? [BigInt, true] : [BigIntUnavailable, false];
	}(),
	    _ref2 = _slicedToArray(_ref, 2),
	    BigIntCtor = _ref2[0],
	    BigIntAvailable = _ref2[1];

	exports.BigInt = BigIntCtor;
	exports.BigIntAvailable = BigIntAvailable;
	/** @ignore */

	var _ref3 = function () {
	    var BigInt64ArrayUnavailableError = function BigInt64ArrayUnavailableError() {
	        throw new Error('BigInt64Array is not available in this environment');
	    };

	    var BigInt64ArrayUnavailable = function () {
	        _createClass(BigInt64ArrayUnavailable, null, [{
	            key: "of",
	            value: function of() {
	                throw BigInt64ArrayUnavailableError();
	            }
	        }, {
	            key: "from",
	            value: function from() {
	                throw BigInt64ArrayUnavailableError();
	            }
	        }, {
	            key: "BYTES_PER_ELEMENT",
	            get: function get() {
	                return 8;
	            }
	        }]);

	        function BigInt64ArrayUnavailable() {
	            _classCallCheck(this, BigInt64ArrayUnavailable);

	            throw BigInt64ArrayUnavailableError();
	        }

	        return BigInt64ArrayUnavailable;
	    }();

	    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [BigInt64ArrayUnavailable, false];
	}(),
	    _ref4 = _slicedToArray(_ref3, 2),
	    BigInt64ArrayCtor = _ref4[0],
	    BigInt64ArrayAvailable = _ref4[1];

	exports.BigInt64Array = BigInt64ArrayCtor;
	exports.BigInt64ArrayAvailable = BigInt64ArrayAvailable;
	/** @ignore */

	var _ref5 = function () {
	    var BigUint64ArrayUnavailableError = function BigUint64ArrayUnavailableError() {
	        throw new Error('BigUint64Array is not available in this environment');
	    };

	    var BigUint64ArrayUnavailable = function () {
	        _createClass(BigUint64ArrayUnavailable, null, [{
	            key: "of",
	            value: function of() {
	                throw BigUint64ArrayUnavailableError();
	            }
	        }, {
	            key: "from",
	            value: function from() {
	                throw BigUint64ArrayUnavailableError();
	            }
	        }, {
	            key: "BYTES_PER_ELEMENT",
	            get: function get() {
	                return 8;
	            }
	        }]);

	        function BigUint64ArrayUnavailable() {
	            _classCallCheck(this, BigUint64ArrayUnavailable);

	            throw BigUint64ArrayUnavailableError();
	        }

	        return BigUint64ArrayUnavailable;
	    }();

	    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [BigUint64ArrayUnavailable, false];
	}(),
	    _ref6 = _slicedToArray(_ref5, 2),
	    BigUint64ArrayCtor = _ref6[0],
	    BigUint64ArrayAvailable = _ref6[1];

	exports.BigUint64Array = BigUint64ArrayCtor;
	exports.BigUint64ArrayAvailable = BigUint64ArrayAvailable;
	/** @ignore */var isNumber = function isNumber(x) {
	    return typeof x === 'number';
	};
	/** @ignore */var isBoolean = function isBoolean(x) {
	    return typeof x === 'boolean';
	};
	/** @ignore */var isFunction = function isFunction(x) {
	    return typeof x === 'function';
	};
	/** @ignore */
	exports.isObject = function (x) {
	    return x != null && Object(x) === x;
	};
	/** @ignore */
	exports.isPromise = function (x) {
	    return exports.isObject(x) && isFunction(x.then);
	};
	/** @ignore */
	exports.isObservable = function (x) {
	    return exports.isObject(x) && isFunction(x.subscribe);
	};
	/** @ignore */
	exports.isIterable = function (x) {
	    return exports.isObject(x) && isFunction(x[Symbol.iterator]);
	};
	/** @ignore */
	exports.isAsyncIterable = function (x) {
	    return exports.isObject(x) && isFunction(x[Symbol.asyncIterator]);
	};
	/** @ignore */
	exports.isArrowJSON = function (x) {
	    return exports.isObject(x) && exports.isObject(x['schema']);
	};
	/** @ignore */
	exports.isArrayLike = function (x) {
	    return exports.isObject(x) && isNumber(x['length']);
	};
	/** @ignore */
	exports.isIteratorResult = function (x) {
	    return exports.isObject(x) && 'done' in x && 'value' in x;
	};
	/** @ignore */
	exports.isUnderlyingSink = function (x) {
	    return exports.isObject(x) && isFunction(x['abort']) && isFunction(x['close']) && isFunction(x['start']) && isFunction(x['write']);
	};
	/** @ignore */
	exports.isFileHandle = function (x) {
	    return exports.isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);
	};
	/** @ignore */
	exports.isFSReadStream = function (x) {
	    return exports.isReadableNodeStream(x) && isNumber(x['bytesRead']);
	};
	/** @ignore */
	exports.isFetchResponse = function (x) {
	    return exports.isObject(x) && exports.isReadableDOMStream(x['body']);
	};
	/** @ignore */
	exports.isWritableDOMStream = function (x) {
	    return exports.isObject(x) && isFunction(x['abort']) && isFunction(x['getWriter']) && !(x instanceof interfaces_1.ReadableInterop);
	};
	/** @ignore */
	exports.isReadableDOMStream = function (x) {
	    return exports.isObject(x) && isFunction(x['cancel']) && isFunction(x['getReader']) && !(x instanceof interfaces_1.ReadableInterop);
	};
	/** @ignore */
	exports.isWritableNodeStream = function (x) {
	    return exports.isObject(x) && isFunction(x['end']) && isFunction(x['write']) && isBoolean(x['writable']) && !(x instanceof interfaces_1.ReadableInterop);
	};
	/** @ignore */
	exports.isReadableNodeStream = function (x) {
	    return exports.isObject(x) && isFunction(x['read']) && isFunction(x['pipe']) && isBoolean(x['readable']) && !(x instanceof interfaces_1.ReadableInterop);
	};

	//# sourceMappingURL=compat.js.map

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var adapters_1 = __webpack_require__(59);
	/** @ignore */
	exports.ITERATOR_DONE = Object.freeze({ done: true, value: void 0 });
	/** @ignore */

	var ArrowJSON = function () {
	    // @ts-ignore
	    function ArrowJSON(_json) {
	        _classCallCheck(this, ArrowJSON);

	        this._json = _json;
	    }

	    _createClass(ArrowJSON, [{
	        key: "schema",
	        get: function get() {
	            return this._json['schema'];
	        }
	    }, {
	        key: "batches",
	        get: function get() {
	            return this._json['batches'] || [];
	        }
	    }, {
	        key: "dictionaries",
	        get: function get() {
	            return this._json['dictionaries'] || [];
	        }
	    }]);

	    return ArrowJSON;
	}();

	exports.ArrowJSON = ArrowJSON;
	/** @ignore */

	var ReadableInterop = function () {
	    function ReadableInterop() {
	        _classCallCheck(this, ReadableInterop);
	    }

	    _createClass(ReadableInterop, [{
	        key: "tee",
	        value: function tee() {
	            return this._getDOMStream().tee();
	        }
	    }, {
	        key: "pipe",
	        value: function pipe(writable, options) {
	            return this._getNodeStream().pipe(writable, options);
	        }
	    }, {
	        key: "pipeTo",
	        value: function pipeTo(writable, options) {
	            return this._getDOMStream().pipeTo(writable, options);
	        }
	    }, {
	        key: "pipeThrough",
	        value: function pipeThrough(duplex, options) {
	            return this._getDOMStream().pipeThrough(duplex, options);
	        }
	    }, {
	        key: "_getDOMStream",
	        value: function _getDOMStream() {
	            return this._DOMStream || (this._DOMStream = this.toDOMStream());
	        }
	    }, {
	        key: "_getNodeStream",
	        value: function _getNodeStream() {
	            return this._nodeStream || (this._nodeStream = this.toNodeStream());
	        }
	    }]);

	    return ReadableInterop;
	}();

	exports.ReadableInterop = ReadableInterop;
	/** @ignore */

	var AsyncQueue = function (_ReadableInterop) {
	    _inherits(AsyncQueue, _ReadableInterop);

	    function AsyncQueue() {
	        _classCallCheck(this, AsyncQueue);

	        var _this = _possibleConstructorReturn(this, (AsyncQueue.__proto__ || Object.getPrototypeOf(AsyncQueue)).call(this));

	        _this._values = [];
	        _this.resolvers = [];
	        _this._closedPromise = new Promise(function (r) {
	            return _this._closedPromiseResolve = r;
	        });
	        return _this;
	    }

	    _createClass(AsyncQueue, [{
	        key: "cancel",
	        value: function () {
	            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(reason) {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return this.return(reason);

	                            case 2:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));

	            function cancel(_x) {
	                return _ref.apply(this, arguments);
	            }

	            return cancel;
	        }()
	    }, {
	        key: "write",
	        value: function write(value) {
	            if (this._ensureOpen()) {
	                this.resolvers.length <= 0 ? this._values.push(value) : this.resolvers.shift().resolve({ done: false, value: value });
	            }
	        }
	    }, {
	        key: "abort",
	        value: function abort(value) {
	            if (this._closedPromiseResolve) {
	                this.resolvers.length <= 0 ? this._error = { error: value } : this.resolvers.shift().reject({ done: true, value: value });
	            }
	        }
	    }, {
	        key: "close",
	        value: function close() {
	            if (this._closedPromiseResolve) {
	                var resolvers = this.resolvers;

	                while (resolvers.length > 0) {
	                    resolvers.shift().resolve(exports.ITERATOR_DONE);
	                }
	                this._closedPromiseResolve();
	                this._closedPromiseResolve = undefined;
	            }
	        }
	    }, {
	        key: Symbol.asyncIterator,
	        value: function value() {
	            return this;
	        }
	    }, {
	        key: "toDOMStream",
	        value: function toDOMStream(options) {
	            return adapters_1.default.toDOMStream(this._closedPromiseResolve || this._error ? this : this._values, options);
	        }
	    }, {
	        key: "toNodeStream",
	        value: function toNodeStream(options) {
	            return adapters_1.default.toNodeStream(this._closedPromiseResolve || this._error ? this : this._values, options);
	        }
	    }, {
	        key: "throw",
	        value: function () {
	            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_) {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return this.abort(_);

	                            case 2:
	                                return _context2.abrupt("return", exports.ITERATOR_DONE);

	                            case 3:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));

	            function _throw(_x2) {
	                return _ref2.apply(this, arguments);
	            }

	            return _throw;
	        }()
	    }, {
	        key: "return",
	        value: function () {
	            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_) {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.next = 2;
	                                return this.close();

	                            case 2:
	                                return _context3.abrupt("return", exports.ITERATOR_DONE);

	                            case 3:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));

	            function _return(_x3) {
	                return _ref3.apply(this, arguments);
	            }

	            return _return;
	        }()
	    }, {
	        key: "read",
	        value: function () {
	            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(size) {
	                return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                _context4.next = 2;
	                                return this.next(size, 'read');

	                            case 2:
	                                return _context4.abrupt("return", _context4.sent.value);

	                            case 3:
	                            case "end":
	                                return _context4.stop();
	                        }
	                    }
	                }, _callee4, this);
	            }));

	            function read(_x4) {
	                return _ref4.apply(this, arguments);
	            }

	            return read;
	        }()
	    }, {
	        key: "peek",
	        value: function () {
	            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(size) {
	                return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                _context5.next = 2;
	                                return this.next(size, 'peek');

	                            case 2:
	                                return _context5.abrupt("return", _context5.sent.value);

	                            case 3:
	                            case "end":
	                                return _context5.stop();
	                        }
	                    }
	                }, _callee5, this);
	            }));

	            function peek(_x5) {
	                return _ref5.apply(this, arguments);
	            }

	            return peek;
	        }()
	    }, {
	        key: "next",
	        value: function next() {
	            var _this2 = this;

	            if (this._values.length > 0) {
	                return Promise.resolve({ done: false, value: this._values.shift() });
	            } else if (this._error) {
	                return Promise.reject({ done: true, value: this._error.error });
	            } else if (!this._closedPromiseResolve) {
	                return Promise.resolve(exports.ITERATOR_DONE);
	            } else {
	                return new Promise(function (resolve, reject) {
	                    _this2.resolvers.push({ resolve: resolve, reject: reject });
	                });
	            }
	        }
	    }, {
	        key: "_ensureOpen",
	        value: function _ensureOpen() {
	            if (this._closedPromiseResolve) {
	                return true;
	            }
	            throw new Error(this + " is closed");
	        }
	    }, {
	        key: "closed",
	        get: function get() {
	            return this._closedPromise;
	        }
	    }]);

	    return AsyncQueue;
	}(ReadableInterop);

	exports.AsyncQueue = AsyncQueue;

	//# sourceMappingURL=interfaces.js.map

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	Object.defineProperty(exports, "__esModule", { value: true });
	/** @ignore */
	var builder_1 = __webpack_require__(67);
	exports.Builder = builder_1.Builder;
	var bool_1 = __webpack_require__(80);
	exports.BoolBuilder = bool_1.BoolBuilder;
	var null_1 = __webpack_require__(81);
	exports.NullBuilder = null_1.NullBuilder;
	var date_1 = __webpack_require__(82);
	exports.DateBuilder = date_1.DateBuilder;
	exports.DateDayBuilder = date_1.DateDayBuilder;
	exports.DateMillisecondBuilder = date_1.DateMillisecondBuilder;
	var decimal_1 = __webpack_require__(83);
	exports.DecimalBuilder = decimal_1.DecimalBuilder;
	var dictionary_1 = __webpack_require__(84);
	exports.DictionaryBuilder = dictionary_1.DictionaryBuilder;
	var fixedsizebinary_1 = __webpack_require__(85);
	exports.FixedSizeBinaryBuilder = fixedsizebinary_1.FixedSizeBinaryBuilder;
	var float_1 = __webpack_require__(86);
	exports.FloatBuilder = float_1.FloatBuilder;
	exports.Float16Builder = float_1.Float16Builder;
	exports.Float32Builder = float_1.Float32Builder;
	exports.Float64Builder = float_1.Float64Builder;
	var int_1 = __webpack_require__(88);
	exports.IntBuilder = int_1.IntBuilder;
	exports.Int8Builder = int_1.Int8Builder;
	exports.Int16Builder = int_1.Int16Builder;
	exports.Int32Builder = int_1.Int32Builder;
	exports.Int64Builder = int_1.Int64Builder;
	exports.Uint8Builder = int_1.Uint8Builder;
	exports.Uint16Builder = int_1.Uint16Builder;
	exports.Uint32Builder = int_1.Uint32Builder;
	exports.Uint64Builder = int_1.Uint64Builder;
	var time_1 = __webpack_require__(90);
	exports.TimeBuilder = time_1.TimeBuilder;
	exports.TimeSecondBuilder = time_1.TimeSecondBuilder;
	exports.TimeMillisecondBuilder = time_1.TimeMillisecondBuilder;
	exports.TimeMicrosecondBuilder = time_1.TimeMicrosecondBuilder;
	exports.TimeNanosecondBuilder = time_1.TimeNanosecondBuilder;
	var timestamp_1 = __webpack_require__(91);
	exports.TimestampBuilder = timestamp_1.TimestampBuilder;
	exports.TimestampSecondBuilder = timestamp_1.TimestampSecondBuilder;
	exports.TimestampMillisecondBuilder = timestamp_1.TimestampMillisecondBuilder;
	exports.TimestampMicrosecondBuilder = timestamp_1.TimestampMicrosecondBuilder;
	exports.TimestampNanosecondBuilder = timestamp_1.TimestampNanosecondBuilder;
	var interval_1 = __webpack_require__(92);
	exports.IntervalBuilder = interval_1.IntervalBuilder;
	exports.IntervalDayTimeBuilder = interval_1.IntervalDayTimeBuilder;
	exports.IntervalYearMonthBuilder = interval_1.IntervalYearMonthBuilder;
	var utf8_1 = __webpack_require__(93);
	exports.Utf8Builder = utf8_1.Utf8Builder;
	var binary_1 = __webpack_require__(94);
	exports.BinaryBuilder = binary_1.BinaryBuilder;
	var list_1 = __webpack_require__(95);
	exports.ListBuilder = list_1.ListBuilder;
	var fixedsizelist_1 = __webpack_require__(103);
	exports.FixedSizeListBuilder = fixedsizelist_1.FixedSizeListBuilder;
	var map_1 = __webpack_require__(104);
	exports.MapBuilder = map_1.MapBuilder;
	var struct_1 = __webpack_require__(105);
	exports.StructBuilder = struct_1.StructBuilder;
	var union_1 = __webpack_require__(106);
	exports.UnionBuilder = union_1.UnionBuilder;
	exports.SparseUnionBuilder = union_1.SparseUnionBuilder;
	exports.DenseUnionBuilder = union_1.DenseUnionBuilder;
	var enum_1 = __webpack_require__(69);
	var utf8_2 = __webpack_require__(93);
	var builder_2 = __webpack_require__(67);
	var set_1 = __webpack_require__(107);
	var builderctor_1 = __webpack_require__(108);
	/** @nocollapse */
	builder_2.Builder.new = newBuilder;
	function newBuilder(options) {
	    var type = options.type;
	    var builder = new (builderctor_1.instance.getVisitFn(type)())(options);
	    if (type.children && type.children.length > 0) {
	        var children = options['children'] || [];
	        var defaultOptions = { 'nullValues': options['nullValues'] };
	        var getChildOptions = Array.isArray(children) ? function (_, i) {
	            return children[i] || defaultOptions;
	        } : function (_ref) {
	            var name = _ref.name;
	            return children[name] || defaultOptions;
	        };
	        type.children.forEach(function (field, index) {
	            var type = field.type;

	            var opts = getChildOptions(field, index);
	            builder.children.push(newBuilder(_extends({}, opts, { type: type })));
	        });
	    }
	    return builder;
	}
	Object.keys(enum_1.Type).map(function (T) {
	    return enum_1.Type[T];
	}).filter(function (T) {
	    return typeof T === 'number' && T !== enum_1.Type.NONE;
	}).forEach(function (typeId) {
	    var BuilderCtor = builderctor_1.instance.visit(typeId);
	    BuilderCtor.prototype._setValue = set_1.instance.getVisitFn(typeId);
	});
	utf8_2.Utf8Builder.prototype._setValue = set_1.instance.visitBinary;

	//# sourceMappingURL=index.js.map

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _asyncGenerator = function () { function AwaitValue(value) { this.value = value; } function AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; if (value instanceof AwaitValue) { Promise.resolve(value.value).then(function (arg) { resume("next", arg); }, function (arg) { resume("throw", arg); }); } else { settle(result.done ? "return" : "normal", result.value); } } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } } if (typeof Symbol === "function" && Symbol.asyncIterator) { AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; } AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); }; AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); }; AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); }; return { wrap: function wrap(fn) { return function () { return new AsyncGenerator(fn.apply(this, arguments)); }; }, await: function _await(value) { return new AwaitValue(value); } }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _asyncIterator(iterable) { if (typeof Symbol === "function") { if (Symbol.asyncIterator) { var method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { return iterable[Symbol.iterator](); } } throw new TypeError("Object is not async iterable"); }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(68);
	var enum_1 = __webpack_require__(69);
	var data_1 = __webpack_require__(72);
	var valid_1 = __webpack_require__(77);
	var buffer_1 = __webpack_require__(79);
	var type_1 = __webpack_require__(74);
	/**
	 * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.
	 *
	 * A `Builder` is responsible for writing arbitrary JavaScript values
	 * to ArrayBuffers and/or child Builders according to the Arrow specification
	 * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.
	 *
	 * The `Builder` for each Arrow `DataType` handles converting and appending
	 * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience
	 * method creates the specific `Builder` subclass for the supplied `DataType`.
	 *
	 * Once created, `Builder` instances support both appending values to the end
	 * of the `Builder`, and random-access writes to specific indices
	 * (`Builder.prototype.append(value)` is a convenience method for
	 * `builder.set(builder.length, value)`). Appending or setting values beyond the
	 * Builder's current length may cause the builder to grow its underlying buffers
	 * or child Builders (if applicable) to accommodate the new values.
	 *
	 * After enough values have been written to a `Builder`, `Builder.prototype.flush()`
	 * will commit the values to the underlying ArrayBuffers (or child Builders). The
	 * internal Builder state will be reset, and an instance of `Data<T>` is returned.
	 * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return
	 * an instance of `Vector<T>` instead.
	 *
	 * When there are no more values to write, use `Builder.prototype.finish()` to
	 * finalize the `Builder`. This does not reset the internal state, so it is
	 * necessary to call `Builder.prototype.flush()` or `toVector()` one last time
	 * if there are still values queued to be flushed.
	 *
	 * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,
	 * because this is when it flushes the values that have been enqueued in its internal
	 * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.
	 *
	 * ```ts
	 * import { Builder, Utf8 } from 'apache-arrow';
	 *
	 * const utf8Builder = Builder.new({
	 *     type: new Utf8(),
	 *     nullValues: [null, 'n/a']
	 * });
	 *
	 * utf8Builder
	 *     .append('hello')
	 *     .append('n/a')
	 *     .append('world')
	 *     .append(null);
	 *
	 * const utf8Vector = utf8Builder.finish().toVector();
	 *
	 * console.log(utf8Vector.toJSON());
	 * // > ["hello", null, "world", null]
	 * ```
	 *
	 * @typeparam T The `DataType` of this `Builder`.
	 * @typeparam TNull The type(s) of values which will be considered null-value sentinels.
	 */

	var Builder = function () {
	    /**
	     * Construct a builder with the given Arrow DataType with optional null values,
	     * which will be interpreted as "null" when set or appended to the `Builder`.
	     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.
	     */
	    function Builder(_ref) {
	        var type = _ref['type'],
	            nulls = _ref['nullValues'];

	        _classCallCheck(this, Builder);

	        /**
	         * The number of values written to the `Builder` that haven't been flushed yet.
	         * @readonly
	         */
	        this.length = 0;
	        /**
	         * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.
	         * @readonly
	         */
	        this.finished = false;
	        this.type = type;
	        this.children = [];
	        this.nullValues = nulls;
	        this.stride = type_1.strideForType(type);
	        this._nulls = new buffer_1.BitmapBufferBuilder();
	        if (nulls && nulls.length > 0) {
	            this._isValid = valid_1.createIsValidFunction(nulls);
	        }
	    }
	    /**
	     * Create a `Builder` instance based on the `type` property of the supplied `options` object.
	     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance
	     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.
	     *
	     * @typeparam T The `DataType` of the `Builder` to create.
	     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.
	     * @nocollapse
	     */
	    // @ts-ignore


	    _createClass(Builder, [{
	        key: "toVector",

	        /**
	         * Flush the `Builder` and return a `Vector<T>`.
	         * @returns {Vector<T>} A `Vector<T>` of the flushed values.
	         */
	        value: function toVector() {
	            return vector_1.Vector.new(this.flush());
	        }
	    }, {
	        key: "append",

	        /**
	         * Appends a value (or null) to this `Builder`.
	         * This is equivalent to `builder.set(builder.length, value)`.
	         * @param {T['TValue'] | TNull } value The value to append.
	         */
	        value: function append(value) {
	            return this.set(this.length, value);
	        }
	        /**
	         * Validates whether a value is valid (true), or null (false)
	         * @param {T['TValue'] | TNull } value The value to compare against null the value representations
	         */
	        // @ts-ignore

	    }, {
	        key: "isValid",
	        value: function isValid(value) {
	            return this._isValid(value);
	        }
	        /**
	         * Write a value (or null-value sentinel) at the supplied index.
	         * If the value matches one of the null-value representations, a 1-bit is
	         * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to
	         * the null `BitmapBufferBuilder`, and the value is passed to
	         * `Builder.prototype.setValue()`.
	         * @param {number} index The index of the value to write.
	         * @param {T['TValue'] | TNull } value The value to write at the supplied index.
	         * @returns {this} The updated `Builder` instance.
	         */

	    }, {
	        key: "set",
	        value: function set(index, value) {
	            if (this.setValid(index, this.isValid(value))) {
	                this.setValue(index, value);
	            }
	            return this;
	        }
	        /**
	         * Write a value to the underlying buffers at the supplied index, bypassing
	         * the null-value check. This is a low-level method that
	         * @param {number} index
	         * @param {T['TValue'] | TNull } value
	         */
	        // @ts-ignore

	    }, {
	        key: "setValue",
	        value: function setValue(index, value) {
	            this._setValue(this, index, value);
	        }
	    }, {
	        key: "setValid",
	        value: function setValid(index, valid) {
	            this.length = this._nulls.set(index, +valid).length;
	            return valid;
	        }
	        // @ts-ignore

	    }, {
	        key: "addChild",
	        value: function addChild(child) {
	            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "" + this.numChildren;

	            throw new Error("Cannot append children to non-nested type \"" + this.type + "\"");
	        }
	        /**
	         * Retrieve the child `Builder` at the supplied `index`, or null if no child
	         * exists at that index.
	         * @param {number} index The index of the child `Builder` to retrieve.
	         * @returns {Builder | null} The child Builder at the supplied index or null.
	         */

	    }, {
	        key: "getChildAt",
	        value: function getChildAt(index) {
	            return this.children[index] || null;
	        }
	        /**
	         * Commit all the values that have been written to their underlying
	         * ArrayBuffers, including any child Builders if applicable, and reset
	         * the internal `Builder` state.
	         * @returns A `Data<T>` of the buffers and childData representing the values written.
	         */

	    }, {
	        key: "flush",
	        value: function flush() {
	            var buffers = [];
	            var values = this._values;
	            var offsets = this._offsets;
	            var typeIds = this._typeIds;
	            var length = this.length,
	                nullCount = this.nullCount;

	            if (typeIds) {
	                /* Unions */
	                buffers[enum_1.BufferType.TYPE] = typeIds.flush(length);
	                // DenseUnions
	                offsets && (buffers[enum_1.BufferType.OFFSET] = offsets.flush(length));
	            } else if (offsets) {
	                /* Variable-width primitives (Binary, Utf8) and Lists */
	                // Binary, Utf8
	                values && (buffers[enum_1.BufferType.DATA] = values.flush(offsets.last()));
	                buffers[enum_1.BufferType.OFFSET] = offsets.flush(length);
	            } else if (values) {
	                /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */
	                buffers[enum_1.BufferType.DATA] = values.flush(length);
	            }
	            nullCount > 0 && (buffers[enum_1.BufferType.VALIDITY] = this._nulls.flush(length));
	            var data = data_1.Data.new(this.type, 0, length, nullCount, buffers, this.children.map(function (child) {
	                return child.flush();
	            }));
	            this.clear();
	            return data;
	        }
	        /**
	         * Finalize this `Builder`, and child builders if applicable.
	         * @returns {this} The finalized `Builder` instance.
	         */

	    }, {
	        key: "finish",
	        value: function finish() {
	            this.finished = true;
	            this.children.forEach(function (child) {
	                return child.finish();
	            });
	            return this;
	        }
	        /**
	         * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.
	         * @returns {this} The cleared `Builder` instance.
	         */

	    }, {
	        key: "clear",
	        value: function clear() {
	            this.length = 0;
	            this._offsets && this._offsets.clear();
	            this._values && this._values.clear();
	            this._nulls && this._nulls.clear();
	            this._typeIds && this._typeIds.clear();
	            this.children.forEach(function (child) {
	                return child.clear();
	            });
	            return this;
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            return this.type.ArrayType;
	        }
	    }, {
	        key: "nullCount",
	        get: function get() {
	            return this._nulls.numInvalid;
	        }
	    }, {
	        key: "numChildren",
	        get: function get() {
	            return this.children.length;
	        }
	        /**
	         * @returns The aggregate length (in bytes) of the values that have been written.
	         */

	    }, {
	        key: "byteLength",
	        get: function get() {
	            var size = 0;
	            this._offsets && (size += this._offsets.byteLength);
	            this._values && (size += this._values.byteLength);
	            this._nulls && (size += this._nulls.byteLength);
	            this._typeIds && (size += this._typeIds.byteLength);
	            return this.children.reduce(function (size, child) {
	                return size + child.byteLength;
	            }, size);
	        }
	        /**
	         * @returns The aggregate number of rows that have been reserved to write new values.
	         */

	    }, {
	        key: "reservedLength",
	        get: function get() {
	            return this._nulls.reservedLength;
	        }
	        /**
	         * @returns The aggregate length (in bytes) that has been reserved to write new values.
	         */

	    }, {
	        key: "reservedByteLength",
	        get: function get() {
	            var size = 0;
	            this._offsets && (size += this._offsets.reservedByteLength);
	            this._values && (size += this._values.reservedByteLength);
	            this._nulls && (size += this._nulls.reservedByteLength);
	            this._typeIds && (size += this._typeIds.reservedByteLength);
	            return this.children.reduce(function (size, child) {
	                return size + child.reservedByteLength;
	            }, size);
	        }
	    }, {
	        key: "valueOffsets",
	        get: function get() {
	            return this._offsets ? this._offsets.buffer : null;
	        }
	    }, {
	        key: "values",
	        get: function get() {
	            return this._values ? this._values.buffer : null;
	        }
	    }, {
	        key: "nullBitmap",
	        get: function get() {
	            return this._nulls ? this._nulls.buffer : null;
	        }
	    }, {
	        key: "typeIds",
	        get: function get() {
	            return this._typeIds ? this._typeIds.buffer : null;
	        }
	    }], [{
	        key: "new",
	        value: function _new(options) {}
	        /** @nocollapse */
	        // @ts-ignore

	    }, {
	        key: "throughNode",
	        value: function throughNode(options) {
	            throw new Error("\"throughNode\" not available in this environment");
	        }
	        /** @nocollapse */
	        // @ts-ignore

	    }, {
	        key: "throughDOM",
	        value: function throughDOM(options) {
	            throw new Error("\"throughDOM\" not available in this environment");
	        }
	        /**
	         * Transform a synchronous `Iterable` of arbitrary JavaScript values into a
	         * sequence of Arrow Vector<T> following the chunking semantics defined in
	         * the supplied `options` argument.
	         *
	         * This function returns a function that accepts an `Iterable` of values to
	         * transform. When called, this function returns an Iterator of `Vector<T>`.
	         *
	         * The resulting `Iterator<Vector<T>>` yields Vectors based on the
	         * `queueingStrategy` and `highWaterMark` specified in the `options` argument.
	         *
	         * * If `queueingStrategy` is `"count"` (or omitted), The `Iterator<Vector<T>>`
	         *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the
	         *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.
	         * * If `queueingStrategy` is `"bytes"`, the `Iterator<Vector<T>>` will flush
	         *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`
	         *   reaches or exceeds the supplied `highWaterMark`.
	         *
	         * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.
	         * @returns A function which accepts a JavaScript `Iterable` of values to
	         *          write, and returns an `Iterator` that yields Vectors according
	         *          to the chunking semantics defined in the `options` argument.
	         * @nocollapse
	         */

	    }, {
	        key: "throughIterable",
	        value: function throughIterable(options) {
	            return _throughIterable(options);
	        }
	        /**
	         * Transform an `AsyncIterable` of arbitrary JavaScript values into a
	         * sequence of Arrow Vector<T> following the chunking semantics defined in
	         * the supplied `options` argument.
	         *
	         * This function returns a function that accepts an `AsyncIterable` of values to
	         * transform. When called, this function returns an AsyncIterator of `Vector<T>`.
	         *
	         * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the
	         * `queueingStrategy` and `highWaterMark` specified in the `options` argument.
	         *
	         * * If `queueingStrategy` is `"count"` (or omitted), The `AsyncIterator<Vector<T>>`
	         *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the
	         *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.
	         * * If `queueingStrategy` is `"bytes"`, the `AsyncIterator<Vector<T>>` will flush
	         *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`
	         *   reaches or exceeds the supplied `highWaterMark`.
	         *
	         * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.
	         * @returns A function which accepts a JavaScript `AsyncIterable` of values
	         *          to write, and returns an `AsyncIterator` that yields Vectors
	         *          according to the chunking semantics defined in the `options`
	         *          argument.
	         * @nocollapse
	         */

	    }, {
	        key: "throughAsyncIterable",
	        value: function throughAsyncIterable(options) {
	            return _throughAsyncIterable(options);
	        }
	    }]);

	    return Builder;
	}();

	exports.Builder = Builder;
	Builder.prototype.length = 1;
	Builder.prototype.stride = 1;
	Builder.prototype.children = null;
	Builder.prototype.finished = false;
	Builder.prototype.nullValues = null;
	Builder.prototype._isValid = function () {
	    return true;
	};
	/** @ignore */

	var FixedWidthBuilder = function (_Builder) {
	    _inherits(FixedWidthBuilder, _Builder);

	    function FixedWidthBuilder(opts) {
	        _classCallCheck(this, FixedWidthBuilder);

	        var _this = _possibleConstructorReturn(this, (FixedWidthBuilder.__proto__ || Object.getPrototypeOf(FixedWidthBuilder)).call(this, opts));

	        _this._values = new buffer_1.DataBufferBuilder(new _this.ArrayType(0), _this.stride);
	        return _this;
	    }

	    _createClass(FixedWidthBuilder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            var values = this._values;
	            values.reserve(index - values.length + 1);
	            return _get(FixedWidthBuilder.prototype.__proto__ || Object.getPrototypeOf(FixedWidthBuilder.prototype), "setValue", this).call(this, index, value);
	        }
	    }]);

	    return FixedWidthBuilder;
	}(Builder);

	exports.FixedWidthBuilder = FixedWidthBuilder;
	/** @ignore */

	var VariableWidthBuilder = function (_Builder2) {
	    _inherits(VariableWidthBuilder, _Builder2);

	    function VariableWidthBuilder(opts) {
	        _classCallCheck(this, VariableWidthBuilder);

	        var _this2 = _possibleConstructorReturn(this, (VariableWidthBuilder.__proto__ || Object.getPrototypeOf(VariableWidthBuilder)).call(this, opts));

	        _this2._pendingLength = 0;
	        _this2._offsets = new buffer_1.OffsetsBufferBuilder();
	        return _this2;
	    }

	    _createClass(VariableWidthBuilder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            var pending = this._pending || (this._pending = new Map());
	            var current = pending.get(index);
	            current && (this._pendingLength -= current.length);
	            this._pendingLength += value.length;
	            pending.set(index, value);
	        }
	    }, {
	        key: "setValid",
	        value: function setValid(index, isValid) {
	            if (!_get(VariableWidthBuilder.prototype.__proto__ || Object.getPrototypeOf(VariableWidthBuilder.prototype), "setValid", this).call(this, index, isValid)) {
	                (this._pending || (this._pending = new Map())).set(index, undefined);
	                return false;
	            }
	            return true;
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this._pendingLength = 0;
	            this._pending = undefined;
	            return _get(VariableWidthBuilder.prototype.__proto__ || Object.getPrototypeOf(VariableWidthBuilder.prototype), "clear", this).call(this);
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            this._flush();
	            return _get(VariableWidthBuilder.prototype.__proto__ || Object.getPrototypeOf(VariableWidthBuilder.prototype), "flush", this).call(this);
	        }
	    }, {
	        key: "finish",
	        value: function finish() {
	            this._flush();
	            return _get(VariableWidthBuilder.prototype.__proto__ || Object.getPrototypeOf(VariableWidthBuilder.prototype), "finish", this).call(this);
	        }
	    }, {
	        key: "_flush",
	        value: function _flush() {
	            var pending = this._pending;
	            var pendingLength = this._pendingLength;
	            this._pendingLength = 0;
	            this._pending = undefined;
	            if (pending && pending.size > 0) {
	                this._flushPending(pending, pendingLength);
	            }
	            return this;
	        }
	    }]);

	    return VariableWidthBuilder;
	}(Builder);

	exports.VariableWidthBuilder = VariableWidthBuilder;
	/** @ignore */
	function _throughIterable(options) {
	    var _options$queueingStra = options['queueingStrategy'],
	        queueingStrategy = _options$queueingStra === undefined ? 'count' : _options$queueingStra;
	    var _options$highWaterMar = options['highWaterMark'],
	        highWaterMark = _options$highWaterMar === undefined ? queueingStrategy !== 'bytes' ? 1000 : Math.pow(2, 14) : _options$highWaterMar;

	    var sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';
	    return (/*#__PURE__*/regeneratorRuntime.mark(function _callee(source) {
	            var numChunks, builder, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, value;

	            return regeneratorRuntime.wrap(function _callee$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            numChunks = 0;
	                            builder = Builder.new(options);
	                            _iteratorNormalCompletion = true;
	                            _didIteratorError = false;
	                            _iteratorError = undefined;
	                            _context.prev = 5;
	                            _iterator = source[Symbol.iterator]();

	                        case 7:
	                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	                                _context.next = 17;
	                                break;
	                            }

	                            value = _step.value;

	                            if (!(builder.append(value)[sizeProperty] >= highWaterMark)) {
	                                _context.next = 14;
	                                break;
	                            }

	                            _context.t0 = ++numChunks;

	                            if (!_context.t0) {
	                                _context.next = 14;
	                                break;
	                            }

	                            _context.next = 14;
	                            return builder.toVector();

	                        case 14:
	                            _iteratorNormalCompletion = true;
	                            _context.next = 7;
	                            break;

	                        case 17:
	                            _context.next = 23;
	                            break;

	                        case 19:
	                            _context.prev = 19;
	                            _context.t1 = _context["catch"](5);
	                            _didIteratorError = true;
	                            _iteratorError = _context.t1;

	                        case 23:
	                            _context.prev = 23;
	                            _context.prev = 24;

	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }

	                        case 26:
	                            _context.prev = 26;

	                            if (!_didIteratorError) {
	                                _context.next = 29;
	                                break;
	                            }

	                            throw _iteratorError;

	                        case 29:
	                            return _context.finish(26);

	                        case 30:
	                            return _context.finish(23);

	                        case 31:
	                            if (!(builder.finish().length > 0 || numChunks === 0)) {
	                                _context.next = 34;
	                                break;
	                            }

	                            _context.next = 34;
	                            return builder.toVector();

	                        case 34:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, _callee, this, [[5, 19, 23, 31], [24,, 26, 30]]);
	        })
	    );
	}
	/** @ignore */
	function _throughAsyncIterable(options) {
	    var _options$queueingStra2 = options['queueingStrategy'],
	        queueingStrategy = _options$queueingStra2 === undefined ? 'count' : _options$queueingStra2;
	    var _options$highWaterMar2 = options['highWaterMark'],
	        highWaterMark = _options$highWaterMar2 === undefined ? queueingStrategy !== 'bytes' ? 1000 : Math.pow(2, 14) : _options$highWaterMar2;

	    var sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';
	    return function () {
	        var _ref2 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(source) {
	            var numChunks, builder, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value, value;

	            return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            numChunks = 0;
	                            builder = Builder.new(options);
	                            _iteratorNormalCompletion2 = true;
	                            _didIteratorError2 = false;
	                            _iteratorError2 = undefined;
	                            _context2.prev = 5;
	                            _iterator2 = _asyncIterator(source);

	                        case 7:
	                            _context2.next = 9;
	                            return _asyncGenerator.await(_iterator2.next());

	                        case 9:
	                            _step2 = _context2.sent;
	                            _iteratorNormalCompletion2 = _step2.done;
	                            _context2.next = 13;
	                            return _asyncGenerator.await(_step2.value);

	                        case 13:
	                            _value = _context2.sent;

	                            if (_iteratorNormalCompletion2) {
	                                _context2.next = 24;
	                                break;
	                            }

	                            value = _value;

	                            if (!(builder.append(value)[sizeProperty] >= highWaterMark)) {
	                                _context2.next = 21;
	                                break;
	                            }

	                            _context2.t0 = ++numChunks;

	                            if (!_context2.t0) {
	                                _context2.next = 21;
	                                break;
	                            }

	                            _context2.next = 21;
	                            return builder.toVector();

	                        case 21:
	                            _iteratorNormalCompletion2 = true;
	                            _context2.next = 7;
	                            break;

	                        case 24:
	                            _context2.next = 30;
	                            break;

	                        case 26:
	                            _context2.prev = 26;
	                            _context2.t1 = _context2["catch"](5);
	                            _didIteratorError2 = true;
	                            _iteratorError2 = _context2.t1;

	                        case 30:
	                            _context2.prev = 30;
	                            _context2.prev = 31;

	                            if (!(!_iteratorNormalCompletion2 && _iterator2.return)) {
	                                _context2.next = 35;
	                                break;
	                            }

	                            _context2.next = 35;
	                            return _asyncGenerator.await(_iterator2.return());

	                        case 35:
	                            _context2.prev = 35;

	                            if (!_didIteratorError2) {
	                                _context2.next = 38;
	                                break;
	                            }

	                            throw _iteratorError2;

	                        case 38:
	                            return _context2.finish(35);

	                        case 39:
	                            return _context2.finish(30);

	                        case 40:
	                            if (!(builder.finish().length > 0 || numChunks === 0)) {
	                                _context2.next = 43;
	                                break;
	                            }

	                            _context2.next = 43;
	                            return builder.toVector();

	                        case 43:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, _callee2, this, [[5, 26, 30, 40], [31,, 35, 39]]);
	        }));

	        return function (_x2) {
	            return _ref2.apply(this, arguments);
	        };
	    }();
	}

	//# sourceMappingURL=builder.js.map

/***/ }),
/* 68 */
/***/ (function(module, exports) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });

	var AbstractVector = function AbstractVector() {
	  _classCallCheck(this, AbstractVector);
	};

	exports.AbstractVector = AbstractVector;
	exports.Vector = AbstractVector;

	//# sourceMappingURL=vector.js.map

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	Object.defineProperty(exports, "__esModule", { value: true });
	var Schema_ = __webpack_require__(70);
	var Message_ = __webpack_require__(71);
	exports.ArrowType = Schema_.org.apache.arrow.flatbuf.Type;
	exports.DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;
	exports.TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;
	exports.Precision = Schema_.org.apache.arrow.flatbuf.Precision;
	exports.UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;
	exports.IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;
	exports.MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;
	exports.MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;
	/**
	 * Main data type enumeration.
	 *
	 * Data types in this library are all *logical*. They can be expressed as
	 * either a primitive physical type (bytes or bits of some fixed size), a
	 * nested type consisting of other data types, or another data type (e.g. a
	 * timestamp encoded as an int64).
	 *
	 * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow
	 * IPC payload.
	 *
	 * The rest of the values are specified here so TypeScript can narrow the type
	 * signatures further beyond the base Arrow Types. The Arrow DataTypes include
	 * metadata like `bitWidth` that impact the type signatures of the values we
	 * accept and return.
	 *
	 * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an
	 * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`
	 * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the
	 * underlying `Int32Array`.
	 *
	 * Library consumers benefit by knowing the narrowest type, since we can ensure
	 * the types across all public methods are propagated, and never bail to `any`.
	 * These values are _never_ used at runtime, and they will _never_ be written
	 * to the flatbuffers metadata of serialized Arrow IPC payloads.
	 */
	var Type;
	(function (Type) {
	  /** The default placeholder type */
	  Type[Type["NONE"] = 0] = "NONE";
	  /** A NULL type having no physical storage */
	  Type[Type["Null"] = 1] = "Null";
	  /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */
	  Type[Type["Int"] = 2] = "Int";
	  /** 2, 4, or 8-byte floating point value */
	  Type[Type["Float"] = 3] = "Float";
	  /** Variable-length bytes (no guarantee of UTF8-ness) */
	  Type[Type["Binary"] = 4] = "Binary";
	  /** UTF8 variable-length string as List<Char> */
	  Type[Type["Utf8"] = 5] = "Utf8";
	  /** Boolean as 1 bit, LSB bit-packed ordering */
	  Type[Type["Bool"] = 6] = "Bool";
	  /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */
	  Type[Type["Decimal"] = 7] = "Decimal";
	  /** int32_t days or int64_t milliseconds since the UNIX epoch */
	  Type[Type["Date"] = 8] = "Date";
	  /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */
	  Type[Type["Time"] = 9] = "Time";
	  /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */
	  Type[Type["Timestamp"] = 10] = "Timestamp";
	  /** YEAR_MONTH or DAY_TIME interval in SQL style */
	  Type[Type["Interval"] = 11] = "Interval";
	  /** A list of some logical data type */
	  Type[Type["List"] = 12] = "List";
	  /** Struct of logical types */
	  Type[Type["Struct"] = 13] = "Struct";
	  /** Union of logical types */
	  Type[Type["Union"] = 14] = "Union";
	  /** Fixed-size binary. Each value occupies the same number of bytes */
	  Type[Type["FixedSizeBinary"] = 15] = "FixedSizeBinary";
	  /** Fixed-size list. Each value occupies the same number of bytes */
	  Type[Type["FixedSizeList"] = 16] = "FixedSizeList";
	  /** Map of named logical types */
	  Type[Type["Map"] = 17] = "Map";
	  /** Dictionary aka Category type */
	  Type[Type["Dictionary"] = -1] = "Dictionary";
	  Type[Type["Int8"] = -2] = "Int8";
	  Type[Type["Int16"] = -3] = "Int16";
	  Type[Type["Int32"] = -4] = "Int32";
	  Type[Type["Int64"] = -5] = "Int64";
	  Type[Type["Uint8"] = -6] = "Uint8";
	  Type[Type["Uint16"] = -7] = "Uint16";
	  Type[Type["Uint32"] = -8] = "Uint32";
	  Type[Type["Uint64"] = -9] = "Uint64";
	  Type[Type["Float16"] = -10] = "Float16";
	  Type[Type["Float32"] = -11] = "Float32";
	  Type[Type["Float64"] = -12] = "Float64";
	  Type[Type["DateDay"] = -13] = "DateDay";
	  Type[Type["DateMillisecond"] = -14] = "DateMillisecond";
	  Type[Type["TimestampSecond"] = -15] = "TimestampSecond";
	  Type[Type["TimestampMillisecond"] = -16] = "TimestampMillisecond";
	  Type[Type["TimestampMicrosecond"] = -17] = "TimestampMicrosecond";
	  Type[Type["TimestampNanosecond"] = -18] = "TimestampNanosecond";
	  Type[Type["TimeSecond"] = -19] = "TimeSecond";
	  Type[Type["TimeMillisecond"] = -20] = "TimeMillisecond";
	  Type[Type["TimeMicrosecond"] = -21] = "TimeMicrosecond";
	  Type[Type["TimeNanosecond"] = -22] = "TimeNanosecond";
	  Type[Type["DenseUnion"] = -23] = "DenseUnion";
	  Type[Type["SparseUnion"] = -24] = "SparseUnion";
	  Type[Type["IntervalDayTime"] = -25] = "IntervalDayTime";
	  Type[Type["IntervalYearMonth"] = -26] = "IntervalYearMonth";
	})(Type = exports.Type || (exports.Type = {}));
	var BufferType;
	(function (BufferType) {
	  /**
	   * used in List type, Dense Union and variable length primitive types (String, Binary)
	   */
	  BufferType[BufferType["OFFSET"] = 0] = "OFFSET";
	  /**
	   * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector
	   */
	  BufferType[BufferType["DATA"] = 1] = "DATA";
	  /**
	   * Bit vector indicating if each value is null
	   */
	  BufferType[BufferType["VALIDITY"] = 2] = "VALIDITY";
	  /**
	   * Type vector used in Union type
	   */
	  BufferType[BufferType["TYPE"] = 3] = "TYPE";
	})(BufferType = exports.BufferType || (exports.BufferType = {}));

	//# sourceMappingURL=enum.js.map

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	"use strict";
	/* tslint:disable:class-name */

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * @enum {number}
	 */
	var org;
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var MetadataVersion = void 0;
	                (function (MetadataVersion) {
	                    /**
	                     * 0.1.0
	                     */
	                    MetadataVersion[MetadataVersion["V1"] = 0] = "V1";
	                    /**
	                     * 0.2.0
	                     */
	                    MetadataVersion[MetadataVersion["V2"] = 1] = "V2";
	                    /**
	                     * 0.3.0 -> 0.7.1
	                     */
	                    MetadataVersion[MetadataVersion["V3"] = 2] = "V3";
	                    /**
	                     * >= 0.8.0
	                     */
	                    MetadataVersion[MetadataVersion["V4"] = 3] = "V4";
	                })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @enum {number}
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var UnionMode = void 0;
	                (function (UnionMode) {
	                    UnionMode[UnionMode["Sparse"] = 0] = "Sparse";
	                    UnionMode[UnionMode["Dense"] = 1] = "Dense";
	                })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @enum {number}
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Precision = void 0;
	                (function (Precision) {
	                    Precision[Precision["HALF"] = 0] = "HALF";
	                    Precision[Precision["SINGLE"] = 1] = "SINGLE";
	                    Precision[Precision["DOUBLE"] = 2] = "DOUBLE";
	                })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @enum {number}
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var DateUnit = void 0;
	                (function (DateUnit) {
	                    DateUnit[DateUnit["DAY"] = 0] = "DAY";
	                    DateUnit[DateUnit["MILLISECOND"] = 1] = "MILLISECOND";
	                })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @enum {number}
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var TimeUnit = void 0;
	                (function (TimeUnit) {
	                    TimeUnit[TimeUnit["SECOND"] = 0] = "SECOND";
	                    TimeUnit[TimeUnit["MILLISECOND"] = 1] = "MILLISECOND";
	                    TimeUnit[TimeUnit["MICROSECOND"] = 2] = "MICROSECOND";
	                    TimeUnit[TimeUnit["NANOSECOND"] = 3] = "NANOSECOND";
	                })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @enum {number}
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var IntervalUnit = void 0;
	                (function (IntervalUnit) {
	                    IntervalUnit[IntervalUnit["YEAR_MONTH"] = 0] = "YEAR_MONTH";
	                    IntervalUnit[IntervalUnit["DAY_TIME"] = 1] = "DAY_TIME";
	                })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * Top-level Type value, enabling extensible type-specific metadata. We can
	 * add new logical types to Type without breaking backwards compatibility
	 *
	 * @enum {number}
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Type = void 0;
	                (function (Type) {
	                    Type[Type["NONE"] = 0] = "NONE";
	                    Type[Type["Null"] = 1] = "Null";
	                    Type[Type["Int"] = 2] = "Int";
	                    Type[Type["FloatingPoint"] = 3] = "FloatingPoint";
	                    Type[Type["Binary"] = 4] = "Binary";
	                    Type[Type["Utf8"] = 5] = "Utf8";
	                    Type[Type["Bool"] = 6] = "Bool";
	                    Type[Type["Decimal"] = 7] = "Decimal";
	                    Type[Type["Date"] = 8] = "Date";
	                    Type[Type["Time"] = 9] = "Time";
	                    Type[Type["Timestamp"] = 10] = "Timestamp";
	                    Type[Type["Interval"] = 11] = "Interval";
	                    Type[Type["List"] = 12] = "List";
	                    Type[Type["Struct_"] = 13] = "Struct_";
	                    Type[Type["Union"] = 14] = "Union";
	                    Type[Type["FixedSizeBinary"] = 15] = "FixedSizeBinary";
	                    Type[Type["FixedSizeList"] = 16] = "FixedSizeList";
	                    Type[Type["Map"] = 17] = "Map";
	                    Type[Type["Duration"] = 18] = "Duration";
	                    Type[Type["LargeBinary"] = 19] = "LargeBinary";
	                    Type[Type["LargeUtf8"] = 20] = "LargeUtf8";
	                    Type[Type["LargeList"] = 21] = "LargeList";
	                })(Type = flatbuf.Type || (flatbuf.Type = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * Endianness of the platform producing the data
	 *
	 * @enum {number}
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Endianness = void 0;
	                (function (Endianness) {
	                    Endianness[Endianness["Little"] = 0] = "Little";
	                    Endianness[Endianness["Big"] = 1] = "Big";
	                })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * These are stored in the flatbuffer in the Type union below
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Null = function () {
	                    function Null() {
	                        _classCallCheck(this, Null);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Null
	                     */


	                    _createClass(Null, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Null= obj
	                         * @returns Null
	                         */

	                    }], [{
	                        key: "getRootAsNull",
	                        value: function getRootAsNull(bb, obj) {
	                            return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startNull",
	                        value: function startNull(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endNull",
	                        value: function endNull(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createNull",
	                        value: function createNull(builder) {
	                            Null.startNull(builder);
	                            return Null.endNull(builder);
	                        }
	                    }]);

	                    return Null;
	                }();

	                flatbuf.Null = Null;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct
	 * (according to the physical memory layout). We used Struct_ here as
	 * Struct is a reserved word in Flatbuffers
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Struct_ = function () {
	                    function Struct_() {
	                        _classCallCheck(this, Struct_);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Struct_
	                     */


	                    _createClass(Struct_, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Struct_= obj
	                         * @returns Struct_
	                         */

	                    }], [{
	                        key: "getRootAsStruct_",
	                        value: function getRootAsStruct_(bb, obj) {
	                            return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startStruct_",
	                        value: function startStruct_(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endStruct_",
	                        value: function endStruct_(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createStruct_",
	                        value: function createStruct_(builder) {
	                            Struct_.startStruct_(builder);
	                            return Struct_.endStruct_(builder);
	                        }
	                    }]);

	                    return Struct_;
	                }();

	                flatbuf.Struct_ = Struct_;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var List = function () {
	                    function List() {
	                        _classCallCheck(this, List);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns List
	                     */


	                    _createClass(List, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param List= obj
	                         * @returns List
	                         */

	                    }], [{
	                        key: "getRootAsList",
	                        value: function getRootAsList(bb, obj) {
	                            return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startList",
	                        value: function startList(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endList",
	                        value: function endList(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createList",
	                        value: function createList(builder) {
	                            List.startList(builder);
	                            return List.endList(builder);
	                        }
	                    }]);

	                    return List;
	                }();

	                flatbuf.List = List;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * Same as List, but with 64-bit offsets, allowing to represent
	 * extremely large data values.
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var LargeList = function () {
	                    function LargeList() {
	                        _classCallCheck(this, LargeList);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns LargeList
	                     */


	                    _createClass(LargeList, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param LargeList= obj
	                         * @returns LargeList
	                         */

	                    }], [{
	                        key: "getRootAsLargeList",
	                        value: function getRootAsLargeList(bb, obj) {
	                            return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startLargeList",
	                        value: function startLargeList(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endLargeList",
	                        value: function endLargeList(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createLargeList",
	                        value: function createLargeList(builder) {
	                            LargeList.startLargeList(builder);
	                            return LargeList.endLargeList(builder);
	                        }
	                    }]);

	                    return LargeList;
	                }();

	                flatbuf.LargeList = LargeList;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var FixedSizeList = function () {
	                    function FixedSizeList() {
	                        _classCallCheck(this, FixedSizeList);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns FixedSizeList
	                     */


	                    _createClass(FixedSizeList, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param FixedSizeList= obj
	                         * @returns FixedSizeList
	                         */

	                    }, {
	                        key: "listSize",

	                        /**
	                         * Number of list items per value
	                         *
	                         * @returns number
	                         */
	                        value: function listSize() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsFixedSizeList",
	                        value: function getRootAsFixedSizeList(bb, obj) {
	                            return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startFixedSizeList",
	                        value: function startFixedSizeList(builder) {
	                            builder.startObject(1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number listSize
	                         */

	                    }, {
	                        key: "addListSize",
	                        value: function addListSize(builder, listSize) {
	                            builder.addFieldInt32(0, listSize, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endFixedSizeList",
	                        value: function endFixedSizeList(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createFixedSizeList",
	                        value: function createFixedSizeList(builder, listSize) {
	                            FixedSizeList.startFixedSizeList(builder);
	                            FixedSizeList.addListSize(builder, listSize);
	                            return FixedSizeList.endFixedSizeList(builder);
	                        }
	                    }]);

	                    return FixedSizeList;
	                }();

	                flatbuf.FixedSizeList = FixedSizeList;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * A Map is a logical nested type that is represented as
	 *
	 * List<entry: Struct<key: K, value: V>>
	 *
	 * In this layout, the keys and values are each respectively contiguous. We do
	 * not constrain the key and value types, so the application is responsible
	 * for ensuring that the keys are hashable and unique. Whether the keys are sorted
	 * may be set in the metadata for this field
	 *
	 * In a Field with Map type, the Field has a child Struct field, which then
	 * has two children: key type and the second the value type. The names of the
	 * child fields may be respectively "entry", "key", and "value", but this is
	 * not enforced
	 *
	 * Map
	 *   - child[0] entry: Struct
	 *     - child[0] key: K
	 *     - child[1] value: V
	 *
	 * Neither the "entry" field nor the "key" field may be nullable.
	 *
	 * The metadata is structured so that Arrow systems without special handling
	 * for Map can make Map an alias for List. The "layout" attribute for the Map
	 * field must have the same contents as a List.
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Map = function () {
	                    function Map() {
	                        _classCallCheck(this, Map);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Map
	                     */


	                    _createClass(Map, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Map= obj
	                         * @returns Map
	                         */

	                    }, {
	                        key: "keysSorted",

	                        /**
	                         * Set to true if the keys within each value are sorted
	                         *
	                         * @returns boolean
	                         */
	                        value: function keysSorted() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsMap",
	                        value: function getRootAsMap(bb, obj) {
	                            return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startMap",
	                        value: function startMap(builder) {
	                            builder.startObject(1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param boolean keysSorted
	                         */

	                    }, {
	                        key: "addKeysSorted",
	                        value: function addKeysSorted(builder, keysSorted) {
	                            builder.addFieldInt8(0, +keysSorted, +false);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endMap",
	                        value: function endMap(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createMap",
	                        value: function createMap(builder, keysSorted) {
	                            Map.startMap(builder);
	                            Map.addKeysSorted(builder, keysSorted);
	                            return Map.endMap(builder);
	                        }
	                    }]);

	                    return Map;
	                }();

	                flatbuf.Map = Map;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * A union is a complex type with children in Field
	 * By default ids in the type vector refer to the offsets in the children
	 * optionally typeIds provides an indirection between the child offset and the type id
	 * for each child typeIds[offset] is the id used in the type vector
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Union = function () {
	                    function Union() {
	                        _classCallCheck(this, Union);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Union
	                     */


	                    _createClass(Union, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Union= obj
	                         * @returns Union
	                         */

	                    }, {
	                        key: "mode",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.UnionMode
	                         */
	                        value: function mode() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.UnionMode.Sparse;
	                        }
	                        /**
	                         * @param number index
	                         * @returns number
	                         */

	                    }, {
	                        key: "typeIds",
	                        value: function typeIds(index) {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "typeIdsLength",
	                        value: function typeIdsLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @returns Int32Array
	                         */

	                    }, {
	                        key: "typeIdsArray",
	                        value: function typeIdsArray() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsUnion",
	                        value: function getRootAsUnion(bb, obj) {
	                            return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startUnion",
	                        value: function startUnion(builder) {
	                            builder.startObject(2);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.UnionMode mode
	                         */

	                    }, {
	                        key: "addMode",
	                        value: function addMode(builder, mode) {
	                            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset typeIdsOffset
	                         */

	                    }, {
	                        key: "addTypeIds",
	                        value: function addTypeIds(builder, typeIdsOffset) {
	                            builder.addFieldOffset(1, typeIdsOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param Array.<number> data
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "createTypeIdsVector",
	                        value: function createTypeIdsVector(builder, data) {
	                            builder.startVector(4, data.length, 4);
	                            for (var i = data.length - 1; i >= 0; i--) {
	                                builder.addInt32(data[i]);
	                            }
	                            return builder.endVector();
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startTypeIdsVector",
	                        value: function startTypeIdsVector(builder, numElems) {
	                            builder.startVector(4, numElems, 4);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endUnion",
	                        value: function endUnion(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createUnion",
	                        value: function createUnion(builder, mode, typeIdsOffset) {
	                            Union.startUnion(builder);
	                            Union.addMode(builder, mode);
	                            Union.addTypeIds(builder, typeIdsOffset);
	                            return Union.endUnion(builder);
	                        }
	                    }]);

	                    return Union;
	                }();

	                flatbuf.Union = Union;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Int = function () {
	                    function Int() {
	                        _classCallCheck(this, Int);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Int
	                     */


	                    _createClass(Int, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Int= obj
	                         * @returns Int
	                         */

	                    }, {
	                        key: "bitWidth",

	                        /**
	                         * @returns number
	                         */
	                        value: function bitWidth() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @returns boolean
	                         */

	                    }, {
	                        key: "isSigned",
	                        value: function isSigned() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsInt",
	                        value: function getRootAsInt(bb, obj) {
	                            return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startInt",
	                        value: function startInt(builder) {
	                            builder.startObject(2);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number bitWidth
	                         */

	                    }, {
	                        key: "addBitWidth",
	                        value: function addBitWidth(builder, bitWidth) {
	                            builder.addFieldInt32(0, bitWidth, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param boolean isSigned
	                         */

	                    }, {
	                        key: "addIsSigned",
	                        value: function addIsSigned(builder, isSigned) {
	                            builder.addFieldInt8(1, +isSigned, +false);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endInt",
	                        value: function endInt(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createInt",
	                        value: function createInt(builder, bitWidth, isSigned) {
	                            Int.startInt(builder);
	                            Int.addBitWidth(builder, bitWidth);
	                            Int.addIsSigned(builder, isSigned);
	                            return Int.endInt(builder);
	                        }
	                    }]);

	                    return Int;
	                }();

	                flatbuf.Int = Int;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var FloatingPoint = function () {
	                    function FloatingPoint() {
	                        _classCallCheck(this, FloatingPoint);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns FloatingPoint
	                     */


	                    _createClass(FloatingPoint, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param FloatingPoint= obj
	                         * @returns FloatingPoint
	                         */

	                    }, {
	                        key: "precision",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.Precision
	                         */
	                        value: function precision() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Precision.HALF;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsFloatingPoint",
	                        value: function getRootAsFloatingPoint(bb, obj) {
	                            return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startFloatingPoint",
	                        value: function startFloatingPoint(builder) {
	                            builder.startObject(1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.Precision precision
	                         */

	                    }, {
	                        key: "addPrecision",
	                        value: function addPrecision(builder, precision) {
	                            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endFloatingPoint",
	                        value: function endFloatingPoint(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createFloatingPoint",
	                        value: function createFloatingPoint(builder, precision) {
	                            FloatingPoint.startFloatingPoint(builder);
	                            FloatingPoint.addPrecision(builder, precision);
	                            return FloatingPoint.endFloatingPoint(builder);
	                        }
	                    }]);

	                    return FloatingPoint;
	                }();

	                flatbuf.FloatingPoint = FloatingPoint;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * Unicode with UTF-8 encoding
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Utf8 = function () {
	                    function Utf8() {
	                        _classCallCheck(this, Utf8);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Utf8
	                     */


	                    _createClass(Utf8, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Utf8= obj
	                         * @returns Utf8
	                         */

	                    }], [{
	                        key: "getRootAsUtf8",
	                        value: function getRootAsUtf8(bb, obj) {
	                            return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startUtf8",
	                        value: function startUtf8(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endUtf8",
	                        value: function endUtf8(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createUtf8",
	                        value: function createUtf8(builder) {
	                            Utf8.startUtf8(builder);
	                            return Utf8.endUtf8(builder);
	                        }
	                    }]);

	                    return Utf8;
	                }();

	                flatbuf.Utf8 = Utf8;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * Opaque binary data
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Binary = function () {
	                    function Binary() {
	                        _classCallCheck(this, Binary);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Binary
	                     */


	                    _createClass(Binary, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Binary= obj
	                         * @returns Binary
	                         */

	                    }], [{
	                        key: "getRootAsBinary",
	                        value: function getRootAsBinary(bb, obj) {
	                            return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startBinary",
	                        value: function startBinary(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endBinary",
	                        value: function endBinary(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createBinary",
	                        value: function createBinary(builder) {
	                            Binary.startBinary(builder);
	                            return Binary.endBinary(builder);
	                        }
	                    }]);

	                    return Binary;
	                }();

	                flatbuf.Binary = Binary;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * Same as Utf8, but with 64-bit offsets, allowing to represent
	 * extremely large data values.
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var LargeUtf8 = function () {
	                    function LargeUtf8() {
	                        _classCallCheck(this, LargeUtf8);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns LargeUtf8
	                     */


	                    _createClass(LargeUtf8, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param LargeUtf8= obj
	                         * @returns LargeUtf8
	                         */

	                    }], [{
	                        key: "getRootAsLargeUtf8",
	                        value: function getRootAsLargeUtf8(bb, obj) {
	                            return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startLargeUtf8",
	                        value: function startLargeUtf8(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endLargeUtf8",
	                        value: function endLargeUtf8(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createLargeUtf8",
	                        value: function createLargeUtf8(builder) {
	                            LargeUtf8.startLargeUtf8(builder);
	                            return LargeUtf8.endLargeUtf8(builder);
	                        }
	                    }]);

	                    return LargeUtf8;
	                }();

	                flatbuf.LargeUtf8 = LargeUtf8;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * Same as Binary, but with 64-bit offsets, allowing to represent
	 * extremely large data values.
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var LargeBinary = function () {
	                    function LargeBinary() {
	                        _classCallCheck(this, LargeBinary);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns LargeBinary
	                     */


	                    _createClass(LargeBinary, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param LargeBinary= obj
	                         * @returns LargeBinary
	                         */

	                    }], [{
	                        key: "getRootAsLargeBinary",
	                        value: function getRootAsLargeBinary(bb, obj) {
	                            return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startLargeBinary",
	                        value: function startLargeBinary(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endLargeBinary",
	                        value: function endLargeBinary(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createLargeBinary",
	                        value: function createLargeBinary(builder) {
	                            LargeBinary.startLargeBinary(builder);
	                            return LargeBinary.endLargeBinary(builder);
	                        }
	                    }]);

	                    return LargeBinary;
	                }();

	                flatbuf.LargeBinary = LargeBinary;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var FixedSizeBinary = function () {
	                    function FixedSizeBinary() {
	                        _classCallCheck(this, FixedSizeBinary);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns FixedSizeBinary
	                     */


	                    _createClass(FixedSizeBinary, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param FixedSizeBinary= obj
	                         * @returns FixedSizeBinary
	                         */

	                    }, {
	                        key: "byteWidth",

	                        /**
	                         * Number of bytes per value
	                         *
	                         * @returns number
	                         */
	                        value: function byteWidth() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsFixedSizeBinary",
	                        value: function getRootAsFixedSizeBinary(bb, obj) {
	                            return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startFixedSizeBinary",
	                        value: function startFixedSizeBinary(builder) {
	                            builder.startObject(1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number byteWidth
	                         */

	                    }, {
	                        key: "addByteWidth",
	                        value: function addByteWidth(builder, byteWidth) {
	                            builder.addFieldInt32(0, byteWidth, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endFixedSizeBinary",
	                        value: function endFixedSizeBinary(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createFixedSizeBinary",
	                        value: function createFixedSizeBinary(builder, byteWidth) {
	                            FixedSizeBinary.startFixedSizeBinary(builder);
	                            FixedSizeBinary.addByteWidth(builder, byteWidth);
	                            return FixedSizeBinary.endFixedSizeBinary(builder);
	                        }
	                    }]);

	                    return FixedSizeBinary;
	                }();

	                flatbuf.FixedSizeBinary = FixedSizeBinary;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Bool = function () {
	                    function Bool() {
	                        _classCallCheck(this, Bool);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Bool
	                     */


	                    _createClass(Bool, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Bool= obj
	                         * @returns Bool
	                         */

	                    }], [{
	                        key: "getRootAsBool",
	                        value: function getRootAsBool(bb, obj) {
	                            return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }, {
	                        key: "startBool",
	                        value: function startBool(builder) {
	                            builder.startObject(0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endBool",
	                        value: function endBool(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createBool",
	                        value: function createBool(builder) {
	                            Bool.startBool(builder);
	                            return Bool.endBool(builder);
	                        }
	                    }]);

	                    return Bool;
	                }();

	                flatbuf.Bool = Bool;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Decimal = function () {
	                    function Decimal() {
	                        _classCallCheck(this, Decimal);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Decimal
	                     */


	                    _createClass(Decimal, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Decimal= obj
	                         * @returns Decimal
	                         */

	                    }, {
	                        key: "precision",

	                        /**
	                         * Total number of decimal digits
	                         *
	                         * @returns number
	                         */
	                        value: function precision() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * Number of digits after the decimal point "."
	                         *
	                         * @returns number
	                         */

	                    }, {
	                        key: "scale",
	                        value: function scale() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsDecimal",
	                        value: function getRootAsDecimal(bb, obj) {
	                            return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startDecimal",
	                        value: function startDecimal(builder) {
	                            builder.startObject(2);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number precision
	                         */

	                    }, {
	                        key: "addPrecision",
	                        value: function addPrecision(builder, precision) {
	                            builder.addFieldInt32(0, precision, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number scale
	                         */

	                    }, {
	                        key: "addScale",
	                        value: function addScale(builder, scale) {
	                            builder.addFieldInt32(1, scale, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endDecimal",
	                        value: function endDecimal(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createDecimal",
	                        value: function createDecimal(builder, precision, scale) {
	                            Decimal.startDecimal(builder);
	                            Decimal.addPrecision(builder, precision);
	                            Decimal.addScale(builder, scale);
	                            return Decimal.endDecimal(builder);
	                        }
	                    }]);

	                    return Decimal;
	                }();

	                flatbuf.Decimal = Decimal;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX
	 * epoch (1970-01-01), stored in either of two units:
	 *
	 * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no
	 *   leap seconds), where the values are evenly divisible by 86400000
	 * * Days (32 bits) since the UNIX epoch
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Date = function () {
	                    function Date() {
	                        _classCallCheck(this, Date);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Date
	                     */


	                    _createClass(Date, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Date= obj
	                         * @returns Date
	                         */

	                    }, {
	                        key: "unit",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.DateUnit
	                         */
	                        value: function unit() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsDate",
	                        value: function getRootAsDate(bb, obj) {
	                            return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startDate",
	                        value: function startDate(builder) {
	                            builder.startObject(1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.DateUnit unit
	                         */

	                    }, {
	                        key: "addUnit",
	                        value: function addUnit(builder, unit) {
	                            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endDate",
	                        value: function endDate(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createDate",
	                        value: function createDate(builder, unit) {
	                            Date.startDate(builder);
	                            Date.addUnit(builder, unit);
	                            return Date.endDate(builder);
	                        }
	                    }]);

	                    return Date;
	                }();

	                flatbuf.Date = Date;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * Time type. The physical storage type depends on the unit
	 * - SECOND and MILLISECOND: 32 bits
	 * - MICROSECOND and NANOSECOND: 64 bits
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Time = function () {
	                    function Time() {
	                        _classCallCheck(this, Time);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Time
	                     */


	                    _createClass(Time, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Time= obj
	                         * @returns Time
	                         */

	                    }, {
	                        key: "unit",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.TimeUnit
	                         */
	                        value: function unit() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "bitWidth",
	                        value: function bitWidth() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsTime",
	                        value: function getRootAsTime(bb, obj) {
	                            return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startTime",
	                        value: function startTime(builder) {
	                            builder.startObject(2);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.TimeUnit unit
	                         */

	                    }, {
	                        key: "addUnit",
	                        value: function addUnit(builder, unit) {
	                            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number bitWidth
	                         */

	                    }, {
	                        key: "addBitWidth",
	                        value: function addBitWidth(builder, bitWidth) {
	                            builder.addFieldInt32(1, bitWidth, 32);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endTime",
	                        value: function endTime(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createTime",
	                        value: function createTime(builder, unit, bitWidth) {
	                            Time.startTime(builder);
	                            Time.addUnit(builder, unit);
	                            Time.addBitWidth(builder, bitWidth);
	                            return Time.endTime(builder);
	                        }
	                    }]);

	                    return Time;
	                }();

	                flatbuf.Time = Time;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding
	 * leap seconds, as a 64-bit integer. Note that UNIX time does not include
	 * leap seconds.
	 *
	 * The Timestamp metadata supports both "time zone naive" and "time zone
	 * aware" timestamps. Read about the timezone attribute for more detail
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Timestamp = function () {
	                    function Timestamp() {
	                        _classCallCheck(this, Timestamp);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Timestamp
	                     */


	                    _createClass(Timestamp, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Timestamp= obj
	                         * @returns Timestamp
	                         */

	                    }, {
	                        key: "unit",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.TimeUnit
	                         */
	                        value: function unit() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.SECOND;
	                        }
	                    }, {
	                        key: "timezone",
	                        value: function timezone(optionalEncoding) {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsTimestamp",
	                        value: function getRootAsTimestamp(bb, obj) {
	                            return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startTimestamp",
	                        value: function startTimestamp(builder) {
	                            builder.startObject(2);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.TimeUnit unit
	                         */

	                    }, {
	                        key: "addUnit",
	                        value: function addUnit(builder, unit) {
	                            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset timezoneOffset
	                         */

	                    }, {
	                        key: "addTimezone",
	                        value: function addTimezone(builder, timezoneOffset) {
	                            builder.addFieldOffset(1, timezoneOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endTimestamp",
	                        value: function endTimestamp(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createTimestamp",
	                        value: function createTimestamp(builder, unit, timezoneOffset) {
	                            Timestamp.startTimestamp(builder);
	                            Timestamp.addUnit(builder, unit);
	                            Timestamp.addTimezone(builder, timezoneOffset);
	                            return Timestamp.endTimestamp(builder);
	                        }
	                    }]);

	                    return Timestamp;
	                }();

	                flatbuf.Timestamp = Timestamp;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Interval = function () {
	                    function Interval() {
	                        _classCallCheck(this, Interval);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Interval
	                     */


	                    _createClass(Interval, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Interval= obj
	                         * @returns Interval
	                         */

	                    }, {
	                        key: "unit",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.IntervalUnit
	                         */
	                        value: function unit() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsInterval",
	                        value: function getRootAsInterval(bb, obj) {
	                            return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startInterval",
	                        value: function startInterval(builder) {
	                            builder.startObject(1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.IntervalUnit unit
	                         */

	                    }, {
	                        key: "addUnit",
	                        value: function addUnit(builder, unit) {
	                            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endInterval",
	                        value: function endInterval(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createInterval",
	                        value: function createInterval(builder, unit) {
	                            Interval.startInterval(builder);
	                            Interval.addUnit(builder, unit);
	                            return Interval.endInterval(builder);
	                        }
	                    }]);

	                    return Interval;
	                }();

	                flatbuf.Interval = Interval;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Duration = function () {
	                    function Duration() {
	                        _classCallCheck(this, Duration);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Duration
	                     */


	                    _createClass(Duration, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Duration= obj
	                         * @returns Duration
	                         */

	                    }, {
	                        key: "unit",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.TimeUnit
	                         */
	                        value: function unit() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsDuration",
	                        value: function getRootAsDuration(bb, obj) {
	                            return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startDuration",
	                        value: function startDuration(builder) {
	                            builder.startObject(1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.TimeUnit unit
	                         */

	                    }, {
	                        key: "addUnit",
	                        value: function addUnit(builder, unit) {
	                            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endDuration",
	                        value: function endDuration(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createDuration",
	                        value: function createDuration(builder, unit) {
	                            Duration.startDuration(builder);
	                            Duration.addUnit(builder, unit);
	                            return Duration.endDuration(builder);
	                        }
	                    }]);

	                    return Duration;
	                }();

	                flatbuf.Duration = Duration;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * user defined key value pairs to add custom metadata to arrow
	 * key namespacing is the responsibility of the user
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var KeyValue = function () {
	                    function KeyValue() {
	                        _classCallCheck(this, KeyValue);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns KeyValue
	                     */


	                    _createClass(KeyValue, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param KeyValue= obj
	                         * @returns KeyValue
	                         */

	                    }, {
	                        key: "key",
	                        value: function key(optionalEncoding) {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
	                        }
	                    }, {
	                        key: "value",
	                        value: function value(optionalEncoding) {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsKeyValue",
	                        value: function getRootAsKeyValue(bb, obj) {
	                            return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startKeyValue",
	                        value: function startKeyValue(builder) {
	                            builder.startObject(2);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset keyOffset
	                         */

	                    }, {
	                        key: "addKey",
	                        value: function addKey(builder, keyOffset) {
	                            builder.addFieldOffset(0, keyOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset valueOffset
	                         */

	                    }, {
	                        key: "addValue",
	                        value: function addValue(builder, valueOffset) {
	                            builder.addFieldOffset(1, valueOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endKeyValue",
	                        value: function endKeyValue(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createKeyValue",
	                        value: function createKeyValue(builder, keyOffset, valueOffset) {
	                            KeyValue.startKeyValue(builder);
	                            KeyValue.addKey(builder, keyOffset);
	                            KeyValue.addValue(builder, valueOffset);
	                            return KeyValue.endKeyValue(builder);
	                        }
	                    }]);

	                    return KeyValue;
	                }();

	                flatbuf.KeyValue = KeyValue;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * Dictionary encoding metadata
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var DictionaryEncoding = function () {
	                    function DictionaryEncoding() {
	                        _classCallCheck(this, DictionaryEncoding);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns DictionaryEncoding
	                     */


	                    _createClass(DictionaryEncoding, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param DictionaryEncoding= obj
	                         * @returns DictionaryEncoding
	                         */

	                    }, {
	                        key: "id",

	                        /**
	                         * The known dictionary id in the application where this data is used. In
	                         * the file or streaming formats, the dictionary ids are found in the
	                         * DictionaryBatch messages
	                         *
	                         * @returns flatbuffers.Long
	                         */
	                        value: function id() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
	                        }
	                        /**
	                         * The dictionary indices are constrained to be positive integers. If this
	                         * field is null, the indices must be signed int32
	                         *
	                         * @param org.apache.arrow.flatbuf.Int= obj
	                         * @returns org.apache.arrow.flatbuf.Int|null
	                         */

	                    }, {
	                        key: "indexType",
	                        value: function indexType(obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
	                        }
	                        /**
	                         * By default, dictionaries are not ordered, or the order does not have
	                         * semantic meaning. In some statistical, applications, dictionary-encoding
	                         * is used to represent ordered categorical data, and we provide a way to
	                         * preserve that metadata here
	                         *
	                         * @returns boolean
	                         */

	                    }, {
	                        key: "isOrdered",
	                        value: function isOrdered() {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsDictionaryEncoding",
	                        value: function getRootAsDictionaryEncoding(bb, obj) {
	                            return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startDictionaryEncoding",
	                        value: function startDictionaryEncoding(builder) {
	                            builder.startObject(3);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Long id
	                         */

	                    }, {
	                        key: "addId",
	                        value: function addId(builder, id) {
	                            builder.addFieldInt64(0, id, builder.createLong(0, 0));
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset indexTypeOffset
	                         */

	                    }, {
	                        key: "addIndexType",
	                        value: function addIndexType(builder, indexTypeOffset) {
	                            builder.addFieldOffset(1, indexTypeOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param boolean isOrdered
	                         */

	                    }, {
	                        key: "addIsOrdered",
	                        value: function addIsOrdered(builder, isOrdered) {
	                            builder.addFieldInt8(2, +isOrdered, +false);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endDictionaryEncoding",
	                        value: function endDictionaryEncoding(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createDictionaryEncoding",
	                        value: function createDictionaryEncoding(builder, id, indexTypeOffset, isOrdered) {
	                            DictionaryEncoding.startDictionaryEncoding(builder);
	                            DictionaryEncoding.addId(builder, id);
	                            DictionaryEncoding.addIndexType(builder, indexTypeOffset);
	                            DictionaryEncoding.addIsOrdered(builder, isOrdered);
	                            return DictionaryEncoding.endDictionaryEncoding(builder);
	                        }
	                    }]);

	                    return DictionaryEncoding;
	                }();

	                flatbuf.DictionaryEncoding = DictionaryEncoding;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * A field represents a named column in a record / row batch or child of a
	 * nested type.
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Field = function () {
	                    function Field() {
	                        _classCallCheck(this, Field);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Field
	                     */


	                    _createClass(Field, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Field= obj
	                         * @returns Field
	                         */

	                    }, {
	                        key: "name",
	                        value: function name(optionalEncoding) {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
	                        }
	                        /**
	                         * Whether or not this field can contain nulls. Should be true in general.
	                         *
	                         * @returns boolean
	                         */

	                    }, {
	                        key: "nullable",
	                        value: function nullable() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
	                        }
	                        /**
	                         * @returns org.apache.arrow.flatbuf.Type
	                         */

	                    }, {
	                        key: "typeType",
	                        value: function typeType() {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? /**  */this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.Type.NONE;
	                        }
	                        /**
	                         * This is the type of the decoded value if the field is dictionary encoded.
	                         *
	                         * @param flatbuffers.Table obj
	                         * @returns ?flatbuffers.Table
	                         */

	                    }, {
	                        key: "type",
	                        value: function type(obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 10);
	                            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
	                        }
	                        /**
	                         * Present only if the field is dictionary encoded.
	                         *
	                         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj
	                         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null
	                         */

	                    }, {
	                        key: "dictionary",
	                        value: function dictionary(obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 12);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
	                        }
	                        /**
	                         * children apply only to nested data types like Struct, List and Union. For
	                         * primitive types children will have length 0.
	                         *
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.Field= obj
	                         * @returns org.apache.arrow.flatbuf.Field
	                         */

	                    }, {
	                        key: "children",
	                        value: function children(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 14);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "childrenLength",
	                        value: function childrenLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 14);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * User-defined metadata
	                         *
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.KeyValue= obj
	                         * @returns org.apache.arrow.flatbuf.KeyValue
	                         */

	                    }, {
	                        key: "customMetadata",
	                        value: function customMetadata(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 16);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "customMetadataLength",
	                        value: function customMetadataLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 16);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsField",
	                        value: function getRootAsField(bb, obj) {
	                            return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startField",
	                        value: function startField(builder) {
	                            builder.startObject(7);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset nameOffset
	                         */

	                    }, {
	                        key: "addName",
	                        value: function addName(builder, nameOffset) {
	                            builder.addFieldOffset(0, nameOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param boolean nullable
	                         */

	                    }, {
	                        key: "addNullable",
	                        value: function addNullable(builder, nullable) {
	                            builder.addFieldInt8(1, +nullable, +false);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.Type typeType
	                         */

	                    }, {
	                        key: "addTypeType",
	                        value: function addTypeType(builder, typeType) {
	                            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset typeOffset
	                         */

	                    }, {
	                        key: "addType",
	                        value: function addType(builder, typeOffset) {
	                            builder.addFieldOffset(3, typeOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset dictionaryOffset
	                         */

	                    }, {
	                        key: "addDictionary",
	                        value: function addDictionary(builder, dictionaryOffset) {
	                            builder.addFieldOffset(4, dictionaryOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset childrenOffset
	                         */

	                    }, {
	                        key: "addChildren",
	                        value: function addChildren(builder, childrenOffset) {
	                            builder.addFieldOffset(5, childrenOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param Array.<flatbuffers.Offset> data
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "createChildrenVector",
	                        value: function createChildrenVector(builder, data) {
	                            builder.startVector(4, data.length, 4);
	                            for (var i = data.length - 1; i >= 0; i--) {
	                                builder.addOffset(data[i]);
	                            }
	                            return builder.endVector();
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startChildrenVector",
	                        value: function startChildrenVector(builder, numElems) {
	                            builder.startVector(4, numElems, 4);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset customMetadataOffset
	                         */

	                    }, {
	                        key: "addCustomMetadata",
	                        value: function addCustomMetadata(builder, customMetadataOffset) {
	                            builder.addFieldOffset(6, customMetadataOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param Array.<flatbuffers.Offset> data
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "createCustomMetadataVector",
	                        value: function createCustomMetadataVector(builder, data) {
	                            builder.startVector(4, data.length, 4);
	                            for (var i = data.length - 1; i >= 0; i--) {
	                                builder.addOffset(data[i]);
	                            }
	                            return builder.endVector();
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startCustomMetadataVector",
	                        value: function startCustomMetadataVector(builder, numElems) {
	                            builder.startVector(4, numElems, 4);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endField",
	                        value: function endField(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createField",
	                        value: function createField(builder, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {
	                            Field.startField(builder);
	                            Field.addName(builder, nameOffset);
	                            Field.addNullable(builder, nullable);
	                            Field.addTypeType(builder, typeType);
	                            Field.addType(builder, typeOffset);
	                            Field.addDictionary(builder, dictionaryOffset);
	                            Field.addChildren(builder, childrenOffset);
	                            Field.addCustomMetadata(builder, customMetadataOffset);
	                            return Field.endField(builder);
	                        }
	                    }]);

	                    return Field;
	                }();

	                flatbuf.Field = Field;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * A Buffer represents a single contiguous memory segment
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Buffer = function () {
	                    function Buffer() {
	                        _classCallCheck(this, Buffer);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Buffer
	                     */


	                    _createClass(Buffer, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * The relative offset into the shared memory page where the bytes for this
	                         * buffer starts
	                         *
	                         * @returns flatbuffers.Long
	                         */

	                    }, {
	                        key: "offset",
	                        value: function offset() {
	                            return this.bb.readInt64(this.bb_pos);
	                        }
	                        /**
	                         * The absolute length (in bytes) of the memory buffer. The memory is found
	                         * from offset (inclusive) to offset + length (non-inclusive).
	                         *
	                         * @returns flatbuffers.Long
	                         */

	                    }, {
	                        key: "length",
	                        value: function length() {
	                            return this.bb.readInt64(this.bb_pos + 8);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Long offset
	                         * @param flatbuffers.Long length
	                         * @returns flatbuffers.Offset
	                         */

	                    }], [{
	                        key: "createBuffer",
	                        value: function createBuffer(builder, offset, length) {
	                            builder.prep(8, 16);
	                            builder.writeInt64(length);
	                            builder.writeInt64(offset);
	                            return builder.offset();
	                        }
	                    }]);

	                    return Buffer;
	                }();

	                flatbuf.Buffer = Buffer;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * A Schema describes the columns in a row batch
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Schema = function () {
	                    function Schema() {
	                        _classCallCheck(this, Schema);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Schema
	                     */


	                    _createClass(Schema, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Schema= obj
	                         * @returns Schema
	                         */

	                    }, {
	                        key: "endianness",

	                        /**
	                         * endianness of the buffer
	                         * it is Little Endian by default
	                         * if endianness doesn't match the underlying system then the vectors need to be converted
	                         *
	                         * @returns org.apache.arrow.flatbuf.Endianness
	                         */
	                        value: function endianness() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Endianness.Little;
	                        }
	                        /**
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.Field= obj
	                         * @returns org.apache.arrow.flatbuf.Field
	                         */

	                    }, {
	                        key: "fields",
	                        value: function fields(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "fieldsLength",
	                        value: function fieldsLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.KeyValue= obj
	                         * @returns org.apache.arrow.flatbuf.KeyValue
	                         */

	                    }, {
	                        key: "customMetadata",
	                        value: function customMetadata(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "customMetadataLength",
	                        value: function customMetadataLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsSchema",
	                        value: function getRootAsSchema(bb, obj) {
	                            return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startSchema",
	                        value: function startSchema(builder) {
	                            builder.startObject(3);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.Endianness endianness
	                         */

	                    }, {
	                        key: "addEndianness",
	                        value: function addEndianness(builder, endianness) {
	                            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset fieldsOffset
	                         */

	                    }, {
	                        key: "addFields",
	                        value: function addFields(builder, fieldsOffset) {
	                            builder.addFieldOffset(1, fieldsOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param Array.<flatbuffers.Offset> data
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "createFieldsVector",
	                        value: function createFieldsVector(builder, data) {
	                            builder.startVector(4, data.length, 4);
	                            for (var i = data.length - 1; i >= 0; i--) {
	                                builder.addOffset(data[i]);
	                            }
	                            return builder.endVector();
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startFieldsVector",
	                        value: function startFieldsVector(builder, numElems) {
	                            builder.startVector(4, numElems, 4);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset customMetadataOffset
	                         */

	                    }, {
	                        key: "addCustomMetadata",
	                        value: function addCustomMetadata(builder, customMetadataOffset) {
	                            builder.addFieldOffset(2, customMetadataOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param Array.<flatbuffers.Offset> data
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "createCustomMetadataVector",
	                        value: function createCustomMetadataVector(builder, data) {
	                            builder.startVector(4, data.length, 4);
	                            for (var i = data.length - 1; i >= 0; i--) {
	                                builder.addOffset(data[i]);
	                            }
	                            return builder.endVector();
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startCustomMetadataVector",
	                        value: function startCustomMetadataVector(builder, numElems) {
	                            builder.startVector(4, numElems, 4);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endSchema",
	                        value: function endSchema(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset offset
	                         */

	                    }, {
	                        key: "finishSchemaBuffer",
	                        value: function finishSchemaBuffer(builder, offset) {
	                            builder.finish(offset);
	                        }
	                    }, {
	                        key: "createSchema",
	                        value: function createSchema(builder, endianness, fieldsOffset, customMetadataOffset) {
	                            Schema.startSchema(builder);
	                            Schema.addEndianness(builder, endianness);
	                            Schema.addFields(builder, fieldsOffset);
	                            Schema.addCustomMetadata(builder, customMetadataOffset);
	                            return Schema.endSchema(builder);
	                        }
	                    }]);

	                    return Schema;
	                }();

	                flatbuf.Schema = Schema;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));

	//# sourceMappingURL=Schema.js.map

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// automatically generated by the FlatBuffers compiler, do not modify

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var NS7624605610262437867 = __webpack_require__(70);
	var org;
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                flatbuf.Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * The root Message type
	 * This union enables us to easily send different message types without
	 * redundant storage, and in the future we can easily add new message types.
	 *
	 * Arrow implementations do not need to implement all of the message types,
	 * which may include experimental metadata types. For maximum compatibility,
	 * it is best to send data using RecordBatch
	 *
	 * @enum {number}
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var MessageHeader = void 0;
	                (function (MessageHeader) {
	                    MessageHeader[MessageHeader["NONE"] = 0] = "NONE";
	                    MessageHeader[MessageHeader["Schema"] = 1] = "Schema";
	                    MessageHeader[MessageHeader["DictionaryBatch"] = 2] = "DictionaryBatch";
	                    MessageHeader[MessageHeader["RecordBatch"] = 3] = "RecordBatch";
	                    MessageHeader[MessageHeader["Tensor"] = 4] = "Tensor";
	                    MessageHeader[MessageHeader["SparseTensor"] = 5] = "SparseTensor";
	                })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * ----------------------------------------------------------------------
	 * Data structures for describing a table row batch (a collection of
	 * equal-length Arrow arrays)
	 * Metadata about a field at some level of a nested type tree (but not
	 * its children).
	 *
	 * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]
	 * would have {length: 5, null_count: 2} for its List node, and {length: 6,
	 * null_count: 0} for its Int16 node, as separate FieldNode structs
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var FieldNode = function () {
	                    function FieldNode() {
	                        _classCallCheck(this, FieldNode);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns FieldNode
	                     */


	                    _createClass(FieldNode, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * The number of value slots in the Arrow array at this level of a nested
	                         * tree
	                         *
	                         * @returns flatbuffers.Long
	                         */

	                    }, {
	                        key: "length",
	                        value: function length() {
	                            return this.bb.readInt64(this.bb_pos);
	                        }
	                        /**
	                         * The number of observed nulls. Fields with null_count == 0 may choose not
	                         * to write their physical validity bitmap out as a materialized buffer,
	                         * instead setting the length of the bitmap buffer to 0.
	                         *
	                         * @returns flatbuffers.Long
	                         */

	                    }, {
	                        key: "nullCount",
	                        value: function nullCount() {
	                            return this.bb.readInt64(this.bb_pos + 8);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Long length
	                         * @param flatbuffers.Long null_count
	                         * @returns flatbuffers.Offset
	                         */

	                    }], [{
	                        key: "createFieldNode",
	                        value: function createFieldNode(builder, length, null_count) {
	                            builder.prep(8, 16);
	                            builder.writeInt64(null_count);
	                            builder.writeInt64(length);
	                            return builder.offset();
	                        }
	                    }]);

	                    return FieldNode;
	                }();

	                flatbuf.FieldNode = FieldNode;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * A data header describing the shared memory layout of a "record" or "row"
	 * batch. Some systems call this a "row batch" internally and others a "record
	 * batch".
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var RecordBatch = function () {
	                    function RecordBatch() {
	                        _classCallCheck(this, RecordBatch);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns RecordBatch
	                     */


	                    _createClass(RecordBatch, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param RecordBatch= obj
	                         * @returns RecordBatch
	                         */

	                    }, {
	                        key: "length",

	                        /**
	                         * number of records / rows. The arrays in the batch should all have this
	                         * length
	                         *
	                         * @returns flatbuffers.Long
	                         */
	                        value: function length() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
	                        }
	                        /**
	                         * Nodes correspond to the pre-ordered flattened logical schema
	                         *
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.FieldNode= obj
	                         * @returns org.apache.arrow.flatbuf.FieldNode
	                         */

	                    }, {
	                        key: "nodes",
	                        value: function nodes(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "nodesLength",
	                        value: function nodesLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * Buffers correspond to the pre-ordered flattened buffer tree
	                         *
	                         * The number of buffers appended to this list depends on the schema. For
	                         * example, most primitive arrays will have 2 buffers, 1 for the validity
	                         * bitmap and 1 for the values. For struct arrays, there will only be a
	                         * single buffer for the validity (nulls) bitmap
	                         *
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.Buffer= obj
	                         * @returns org.apache.arrow.flatbuf.Buffer
	                         */

	                    }, {
	                        key: "buffers",
	                        value: function buffers(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "buffersLength",
	                        value: function buffersLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsRecordBatch",
	                        value: function getRootAsRecordBatch(bb, obj) {
	                            return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startRecordBatch",
	                        value: function startRecordBatch(builder) {
	                            builder.startObject(3);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Long length
	                         */

	                    }, {
	                        key: "addLength",
	                        value: function addLength(builder, length) {
	                            builder.addFieldInt64(0, length, builder.createLong(0, 0));
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset nodesOffset
	                         */

	                    }, {
	                        key: "addNodes",
	                        value: function addNodes(builder, nodesOffset) {
	                            builder.addFieldOffset(1, nodesOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startNodesVector",
	                        value: function startNodesVector(builder, numElems) {
	                            builder.startVector(16, numElems, 8);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset buffersOffset
	                         */

	                    }, {
	                        key: "addBuffers",
	                        value: function addBuffers(builder, buffersOffset) {
	                            builder.addFieldOffset(2, buffersOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startBuffersVector",
	                        value: function startBuffersVector(builder, numElems) {
	                            builder.startVector(16, numElems, 8);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endRecordBatch",
	                        value: function endRecordBatch(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createRecordBatch",
	                        value: function createRecordBatch(builder, length, nodesOffset, buffersOffset) {
	                            RecordBatch.startRecordBatch(builder);
	                            RecordBatch.addLength(builder, length);
	                            RecordBatch.addNodes(builder, nodesOffset);
	                            RecordBatch.addBuffers(builder, buffersOffset);
	                            return RecordBatch.endRecordBatch(builder);
	                        }
	                    }]);

	                    return RecordBatch;
	                }();

	                flatbuf.RecordBatch = RecordBatch;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * For sending dictionary encoding information. Any Field can be
	 * dictionary-encoded, but in this case none of its children may be
	 * dictionary-encoded.
	 * There is one vector / column per dictionary, but that vector / column
	 * may be spread across multiple dictionary batches by using the isDelta
	 * flag
	 *
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var DictionaryBatch = function () {
	                    function DictionaryBatch() {
	                        _classCallCheck(this, DictionaryBatch);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns DictionaryBatch
	                     */


	                    _createClass(DictionaryBatch, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param DictionaryBatch= obj
	                         * @returns DictionaryBatch
	                         */

	                    }, {
	                        key: "id",

	                        /**
	                         * @returns flatbuffers.Long
	                         */
	                        value: function id() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
	                        }
	                        /**
	                         * @param org.apache.arrow.flatbuf.RecordBatch= obj
	                         * @returns org.apache.arrow.flatbuf.RecordBatch|null
	                         */

	                    }, {
	                        key: "data",
	                        value: function data(obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
	                        }
	                        /**
	                         * If isDelta is true the values in the dictionary are to be appended to a
	                         * dictionary with the indicated id
	                         *
	                         * @returns boolean
	                         */

	                    }, {
	                        key: "isDelta",
	                        value: function isDelta() {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsDictionaryBatch",
	                        value: function getRootAsDictionaryBatch(bb, obj) {
	                            return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startDictionaryBatch",
	                        value: function startDictionaryBatch(builder) {
	                            builder.startObject(3);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Long id
	                         */

	                    }, {
	                        key: "addId",
	                        value: function addId(builder, id) {
	                            builder.addFieldInt64(0, id, builder.createLong(0, 0));
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset dataOffset
	                         */

	                    }, {
	                        key: "addData",
	                        value: function addData(builder, dataOffset) {
	                            builder.addFieldOffset(1, dataOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param boolean isDelta
	                         */

	                    }, {
	                        key: "addIsDelta",
	                        value: function addIsDelta(builder, isDelta) {
	                            builder.addFieldInt8(2, +isDelta, +false);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endDictionaryBatch",
	                        value: function endDictionaryBatch(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                    }, {
	                        key: "createDictionaryBatch",
	                        value: function createDictionaryBatch(builder, id, dataOffset, isDelta) {
	                            DictionaryBatch.startDictionaryBatch(builder);
	                            DictionaryBatch.addId(builder, id);
	                            DictionaryBatch.addData(builder, dataOffset);
	                            DictionaryBatch.addIsDelta(builder, isDelta);
	                            return DictionaryBatch.endDictionaryBatch(builder);
	                        }
	                    }]);

	                    return DictionaryBatch;
	                }();

	                flatbuf.DictionaryBatch = DictionaryBatch;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Message = function () {
	                    function Message() {
	                        _classCallCheck(this, Message);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Message
	                     */


	                    _createClass(Message, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Message= obj
	                         * @returns Message
	                         */

	                    }, {
	                        key: "version",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.MetadataVersion
	                         */
	                        value: function version() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;
	                        }
	                        /**
	                         * @returns org.apache.arrow.flatbuf.MessageHeader
	                         */

	                    }, {
	                        key: "headerType",
	                        value: function headerType() {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? /**  */this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.MessageHeader.NONE;
	                        }
	                        /**
	                         * @param flatbuffers.Table obj
	                         * @returns ?flatbuffers.Table
	                         */

	                    }, {
	                        key: "header",
	                        value: function header(obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
	                        }
	                        /**
	                         * @returns flatbuffers.Long
	                         */

	                    }, {
	                        key: "bodyLength",
	                        value: function bodyLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 10);
	                            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
	                        }
	                        /**
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.KeyValue= obj
	                         * @returns org.apache.arrow.flatbuf.KeyValue
	                         */

	                    }, {
	                        key: "customMetadata",
	                        value: function customMetadata(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 12);
	                            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "customMetadataLength",
	                        value: function customMetadataLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 12);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsMessage",
	                        value: function getRootAsMessage(bb, obj) {
	                            return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startMessage",
	                        value: function startMessage(builder) {
	                            builder.startObject(5);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.MetadataVersion version
	                         */

	                    }, {
	                        key: "addVersion",
	                        value: function addVersion(builder, version) {
	                            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.MessageHeader headerType
	                         */

	                    }, {
	                        key: "addHeaderType",
	                        value: function addHeaderType(builder, headerType) {
	                            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset headerOffset
	                         */

	                    }, {
	                        key: "addHeader",
	                        value: function addHeader(builder, headerOffset) {
	                            builder.addFieldOffset(2, headerOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Long bodyLength
	                         */

	                    }, {
	                        key: "addBodyLength",
	                        value: function addBodyLength(builder, bodyLength) {
	                            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset customMetadataOffset
	                         */

	                    }, {
	                        key: "addCustomMetadata",
	                        value: function addCustomMetadata(builder, customMetadataOffset) {
	                            builder.addFieldOffset(4, customMetadataOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param Array.<flatbuffers.Offset> data
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "createCustomMetadataVector",
	                        value: function createCustomMetadataVector(builder, data) {
	                            builder.startVector(4, data.length, 4);
	                            for (var i = data.length - 1; i >= 0; i--) {
	                                builder.addOffset(data[i]);
	                            }
	                            return builder.endVector();
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startCustomMetadataVector",
	                        value: function startCustomMetadataVector(builder, numElems) {
	                            builder.startVector(4, numElems, 4);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endMessage",
	                        value: function endMessage(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset offset
	                         */

	                    }, {
	                        key: "finishMessageBuffer",
	                        value: function finishMessageBuffer(builder, offset) {
	                            builder.finish(offset);
	                        }
	                    }, {
	                        key: "createMessage",
	                        value: function createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {
	                            Message.startMessage(builder);
	                            Message.addVersion(builder, version);
	                            Message.addHeaderType(builder, headerType);
	                            Message.addHeader(builder, headerOffset);
	                            Message.addBodyLength(builder, bodyLength);
	                            Message.addCustomMetadata(builder, customMetadataOffset);
	                            return Message.endMessage(builder);
	                        }
	                    }]);

	                    return Message;
	                }();

	                flatbuf.Message = Message;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));

	//# sourceMappingURL=Message.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var bit_1 = __webpack_require__(73);
	var bit_2 = __webpack_require__(73);
	var enum_1 = __webpack_require__(69);
	var type_1 = __webpack_require__(74);
	var buffer_1 = __webpack_require__(60);
	/** @ignore */exports.kUnknownNullCount = -1;
	/** @ignore */

	var Data = function () {
	    function Data(type, offset, length, nullCount, buffers, childData, dictionary) {
	        _classCallCheck(this, Data);

	        this.type = type;
	        this.dictionary = dictionary;
	        this.offset = Math.floor(Math.max(offset || 0, 0));
	        this.length = Math.floor(Math.max(length || 0, 0));
	        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
	        this.childData = (childData || []).map(function (x) {
	            return x instanceof Data ? x : x.data;
	        });
	        var buffer = void 0;
	        if (buffers instanceof Data) {
	            this.stride = buffers.stride;
	            this.values = buffers.values;
	            this.typeIds = buffers.typeIds;
	            this.nullBitmap = buffers.nullBitmap;
	            this.valueOffsets = buffers.valueOffsets;
	        } else {
	            this.stride = type_1.strideForType(type);
	            if (buffers) {
	                (buffer = buffers[0]) && (this.valueOffsets = buffer);
	                (buffer = buffers[1]) && (this.values = buffer);
	                (buffer = buffers[2]) && (this.nullBitmap = buffer);
	                (buffer = buffers[3]) && (this.typeIds = buffer);
	            }
	        }
	    }

	    _createClass(Data, [{
	        key: "clone",
	        value: function clone(type) {
	            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
	            var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.length;
	            var nullCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._nullCount;
	            var buffers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this;
	            var childData = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.childData;

	            return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);
	        }
	    }, {
	        key: "slice",
	        value: function slice(offset, length) {
	            var stride = this.stride,
	                typeId = this.typeId,
	                childData = this.childData;
	            // +true === 1, +false === 0, so this means
	            // we keep nullCount at 0 if it's already 0,
	            // otherwise set to the invalidated flag -1

	            var nullCount = +(this._nullCount === 0) - 1;
	            var childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;
	            var buffers = this._sliceBuffers(offset, length, stride, typeId);
	            return this.clone(this.type, this.offset + offset, length, nullCount, buffers,
	            // Don't slice children if we have value offsets (the variable-width types)
	            !childData.length || this.valueOffsets ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));
	        }
	    }, {
	        key: "_changeLengthAndBackfillNullBitmap",
	        value: function _changeLengthAndBackfillNullBitmap(newLength) {
	            if (this.typeId === enum_1.Type.Null) {
	                return this.clone(this.type, 0, newLength, 0);
	            }
	            var length = this.length,
	                nullCount = this.nullCount;
	            // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)

	            var bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length >> 3);
	            // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)
	            bitmap[length >> 3] = (1 << length - (length & ~7)) - 1;
	            // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s
	            if (nullCount > 0) {
	                bitmap.set(bit_1.truncateBitmap(this.offset, length, this.nullBitmap), 0);
	            }
	            var buffers = this.buffers;
	            buffers[enum_1.BufferType.VALIDITY] = bitmap;
	            return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);
	        }
	    }, {
	        key: "_sliceBuffers",
	        value: function _sliceBuffers(offset, length, stride, typeId) {
	            var arr = void 0,
	                buffers = this.buffers;
	            // If typeIds exist, slice the typeIds buffer
	            (arr = buffers[enum_1.BufferType.TYPE]) && (buffers[enum_1.BufferType.TYPE] = arr.subarray(offset, offset + length));
	            // If offsets exist, only slice the offsets buffer
	            (arr = buffers[enum_1.BufferType.OFFSET]) && (buffers[enum_1.BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||
	            // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes
	            (arr = buffers[enum_1.BufferType.DATA]) && (buffers[enum_1.BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));
	            return buffers;
	        }
	    }, {
	        key: "_sliceChildren",
	        value: function _sliceChildren(childData, offset, length) {
	            return childData.map(function (child) {
	                return child.slice(offset, length);
	            });
	        }
	        //
	        // Convenience methods for creating Data instances for each of the Arrow Vector types
	        //
	        /** @nocollapse */

	    }, {
	        key: "typeId",
	        get: function get() {
	            return this.type.typeId;
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            return this.type.ArrayType;
	        }
	    }, {
	        key: "buffers",
	        get: function get() {
	            return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];
	        }
	    }, {
	        key: "byteLength",
	        get: function get() {
	            var byteLength = 0;
	            var valueOffsets = this.valueOffsets,
	                values = this.values,
	                nullBitmap = this.nullBitmap,
	                typeIds = this.typeIds;

	            valueOffsets && (byteLength += valueOffsets.byteLength);
	            values && (byteLength += values.byteLength);
	            nullBitmap && (byteLength += nullBitmap.byteLength);
	            typeIds && (byteLength += typeIds.byteLength);
	            return this.childData.reduce(function (byteLength, child) {
	                return byteLength + child.byteLength;
	            }, byteLength);
	        }
	    }, {
	        key: "nullCount",
	        get: function get() {
	            var nullCount = this._nullCount;
	            var nullBitmap = void 0;
	            if (nullCount <= exports.kUnknownNullCount && (nullBitmap = this.nullBitmap)) {
	                this._nullCount = nullCount = this.length - bit_2.popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);
	            }
	            return nullCount;
	        }
	    }], [{
	        key: "new",
	        value: function _new(type, offset, length, nullCount, buffers, childData, dictionary) {
	            if (buffers instanceof Data) {
	                buffers = buffers.buffers;
	            } else if (!buffers) {
	                buffers = [];
	            }
	            switch (type.typeId) {
	                case enum_1.Type.Null:
	                    return Data.Null(type, offset, length);
	                case enum_1.Type.Int:
	                    return Data.Int(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Dictionary:
	                    return Data.Dictionary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || [], dictionary);
	                case enum_1.Type.Float:
	                    return Data.Float(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Bool:
	                    return Data.Bool(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Decimal:
	                    return Data.Decimal(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Date:
	                    return Data.Date(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Time:
	                    return Data.Time(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Timestamp:
	                    return Data.Timestamp(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Interval:
	                    return Data.Interval(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.FixedSizeBinary:
	                    return Data.FixedSizeBinary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Binary:
	                    return Data.Binary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.Utf8:
	                    return Data.Utf8(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], buffers[enum_1.BufferType.DATA] || []);
	                case enum_1.Type.List:
	                    return Data.List(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], (childData || [])[0]);
	                case enum_1.Type.FixedSizeList:
	                    return Data.FixedSizeList(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], (childData || [])[0]);
	                case enum_1.Type.Struct:
	                    return Data.Struct(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], childData || []);
	                case enum_1.Type.Map:
	                    return Data.Map(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], (childData || [])[0]);
	                case enum_1.Type.Union:
	                    return Data.Union(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.TYPE] || [], buffers[enum_1.BufferType.OFFSET] || childData, childData);
	            }
	            throw new Error("Unrecognized typeId " + type.typeId);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Null",
	        value: function Null(type, offset, length) {
	            return new Data(type, offset, length, 0);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Int",
	        value: function Int(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Dictionary",
	        value: function Dictionary(type, offset, length, nullCount, nullBitmap, data, dictionary) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.indices.ArrayType, data), buffer_1.toUint8Array(nullBitmap)], [], dictionary);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Float",
	        value: function Float(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Bool",
	        value: function Bool(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Decimal",
	        value: function Decimal(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Date",
	        value: function Date(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Time",
	        value: function Time(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Timestamp",
	        value: function Timestamp(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Interval",
	        value: function Interval(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "FixedSizeBinary",
	        value: function FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {
	            return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Binary",
	        value: function Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {
	            return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), buffer_1.toUint8Array(data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Utf8",
	        value: function Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {
	            return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), buffer_1.toUint8Array(data), buffer_1.toUint8Array(nullBitmap)]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "List",
	        value: function List(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {
	            return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), undefined, buffer_1.toUint8Array(nullBitmap)], [child]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "FixedSizeList",
	        value: function FixedSizeList(type, offset, length, nullCount, nullBitmap, child) {
	            return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], [child]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Struct",
	        value: function Struct(type, offset, length, nullCount, nullBitmap, children) {
	            return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], children);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Map",
	        value: function Map(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {
	            return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), undefined, buffer_1.toUint8Array(nullBitmap)], [child]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "Union",
	        value: function Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children) {
	            var buffers = [undefined, undefined, buffer_1.toUint8Array(nullBitmap), buffer_1.toArrayBufferView(type.ArrayType, typeIds)];
	            if (type.mode === enum_1.UnionMode.Sparse) {
	                return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren);
	            }
	            buffers[enum_1.BufferType.OFFSET] = buffer_1.toInt32Array(valueOffsetsOrChildren);
	            return new Data(type, offset, length, nullCount, buffers, children);
	        }
	    }]);

	    return Data;
	}();

	exports.Data = Data;
	Data.prototype.childData = Object.freeze([]);

	//# sourceMappingURL=data.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _marked = /*#__PURE__*/regeneratorRuntime.mark(iterateBits);

	Object.defineProperty(exports, "__esModule", { value: true });
	/** @ignore */
	function getBool(_data, _index, byte, bit) {
	    return (byte & 1 << bit) !== 0;
	}
	exports.getBool = getBool;
	/** @ignore */
	function getBit(_data, _index, byte, bit) {
	    return (byte & 1 << bit) >> bit;
	}
	exports.getBit = getBit;
	/** @ignore */
	function setBool(bytes, index, value) {
	    return value ? !!(bytes[index >> 3] |= 1 << index % 8) || true : !(bytes[index >> 3] &= ~(1 << index % 8)) && false;
	}
	exports.setBool = setBool;
	/** @ignore */
	function truncateBitmap(offset, length, bitmap) {
	    var alignedSize = bitmap.byteLength + 7 & ~7;
	    if (offset > 0 || bitmap.byteLength < alignedSize) {
	        var bytes = new Uint8Array(alignedSize);
	        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap
	        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :
	        // Otherwise iterate each bit from the offset and return a new one
	        packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));
	        return bytes;
	    }
	    return bitmap;
	}
	exports.truncateBitmap = truncateBitmap;
	/** @ignore */
	function packBools(values) {
	    var xs = [];
	    var i = 0,
	        bit = 0,
	        byte = 0;
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var value = _step.value;

	            value && (byte |= 1 << bit);
	            if (++bit === 8) {
	                xs[i++] = byte;
	                byte = bit = 0;
	            }
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }

	    if (i === 0 || bit > 0) {
	        xs[i++] = byte;
	    }
	    var b = new Uint8Array(xs.length + 7 & ~7);
	    b.set(xs);
	    return b;
	}
	exports.packBools = packBools;
	/** @ignore */
	function iterateBits(bytes, begin, length, context, get) {
	    var bit, byteIndex, index, remaining, byte;
	    return regeneratorRuntime.wrap(function iterateBits$(_context) {
	        while (1) {
	            switch (_context.prev = _context.next) {
	                case 0:
	                    bit = begin % 8;
	                    byteIndex = begin >> 3;
	                    index = 0, remaining = length;

	                case 3:
	                    if (!(remaining > 0)) {
	                        _context.next = 11;
	                        break;
	                    }

	                    byte = bytes[byteIndex++];

	                case 5:
	                    _context.next = 7;
	                    return get(context, index++, byte, bit);

	                case 7:
	                    if (--remaining > 0 && ++bit < 8) {
	                        _context.next = 5;
	                        break;
	                    }

	                case 8:
	                    bit = 0;
	                    _context.next = 3;
	                    break;

	                case 11:
	                case "end":
	                    return _context.stop();
	            }
	        }
	    }, _marked, this);
	}
	exports.iterateBits = iterateBits;
	/**
	 * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.
	 * @param vector The Uint8Array of bits for which to compute the population count.
	 * @param lhs The range's left-hand side (or start) bit
	 * @param rhs The range's right-hand side (or end) bit
	 */
	/** @ignore */
	function popcnt_bit_range(data, lhs, rhs) {
	    if (rhs - lhs <= 0) {
	        return 0;
	    }
	    // If the bit range is less than one byte, sum the 1 bits in the bit range
	    if (rhs - lhs < 8) {
	        var sum = 0;
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	            for (var _iterator2 = iterateBits(data, lhs, rhs - lhs, data, getBit)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var bit = _step2.value;

	                sum += bit;
	            }
	        } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                }
	            } finally {
	                if (_didIteratorError2) {
	                    throw _iteratorError2;
	                }
	            }
	        }

	        return sum;
	    }
	    // Get the next lowest multiple of 8 from the right hand side
	    var rhsInside = rhs >> 3 << 3;
	    // Get the next highest multiple of 8 from the left hand side
	    var lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);
	    return (
	        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8
	        popcnt_bit_range(data, lhs, lhsInside) +
	        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8
	        popcnt_bit_range(data, rhsInside, rhs) +
	        // Get the popcnt of all bits between the left and right hand sides' multiples of 8
	        popcnt_array(data, lhsInside >> 3, rhsInside - lhsInside >> 3)
	    );
	}
	exports.popcnt_bit_range = popcnt_bit_range;
	/** @ignore */
	function popcnt_array(arr, byteOffset, byteLength) {
	    var cnt = 0,
	        pos = byteOffset | 0;
	    var view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
	    var len = byteLength === void 0 ? arr.byteLength : pos + byteLength;
	    while (len - pos >= 4) {
	        cnt += popcnt_uint32(view.getUint32(pos));
	        pos += 4;
	    }
	    while (len - pos >= 2) {
	        cnt += popcnt_uint32(view.getUint16(pos));
	        pos += 2;
	    }
	    while (len - pos >= 1) {
	        cnt += popcnt_uint32(view.getUint8(pos));
	        pos += 1;
	    }
	    return cnt;
	}
	exports.popcnt_array = popcnt_array;
	/** @ignore */
	function popcnt_uint32(uint32) {
	    var i = uint32 | 0;
	    i = i - (i >>> 1 & 0x55555555);
	    i = (i & 0x33333333) + (i >>> 2 & 0x33333333);
	    return (i + (i >>> 4) & 0x0F0F0F0F) * 0x01010101 >>> 24;
	}
	exports.popcnt_uint32 = popcnt_uint32;

	//# sourceMappingURL=bit.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var typecomparator_1 = __webpack_require__(75);
	var enum_1 = __webpack_require__(69);
	/**
	 * An abstract base class for classes that encapsulate metadata about each of
	 * the logical types that Arrow can represent.
	 */

	var DataType = function () {
	    function DataType() {
	        _classCallCheck(this, DataType);
	    }

	    _createClass(DataType, [{
	        key: "compareTo",
	        value: function compareTo(other) {
	            return typecomparator_1.instance.visit(this, other);
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.NONE;
	        }
	    }], [{
	        key: "isNull",

	        /** @nocollapse */value: function isNull(x) {
	            return x && x.typeId === enum_1.Type.Null;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isInt",
	        value: function isInt(x) {
	            return x && x.typeId === enum_1.Type.Int;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isFloat",
	        value: function isFloat(x) {
	            return x && x.typeId === enum_1.Type.Float;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isBinary",
	        value: function isBinary(x) {
	            return x && x.typeId === enum_1.Type.Binary;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isUtf8",
	        value: function isUtf8(x) {
	            return x && x.typeId === enum_1.Type.Utf8;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isBool",
	        value: function isBool(x) {
	            return x && x.typeId === enum_1.Type.Bool;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isDecimal",
	        value: function isDecimal(x) {
	            return x && x.typeId === enum_1.Type.Decimal;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isDate",
	        value: function isDate(x) {
	            return x && x.typeId === enum_1.Type.Date;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isTime",
	        value: function isTime(x) {
	            return x && x.typeId === enum_1.Type.Time;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isTimestamp",
	        value: function isTimestamp(x) {
	            return x && x.typeId === enum_1.Type.Timestamp;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isInterval",
	        value: function isInterval(x) {
	            return x && x.typeId === enum_1.Type.Interval;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isList",
	        value: function isList(x) {
	            return x && x.typeId === enum_1.Type.List;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isStruct",
	        value: function isStruct(x) {
	            return x && x.typeId === enum_1.Type.Struct;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isUnion",
	        value: function isUnion(x) {
	            return x && x.typeId === enum_1.Type.Union;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isFixedSizeBinary",
	        value: function isFixedSizeBinary(x) {
	            return x && x.typeId === enum_1.Type.FixedSizeBinary;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isFixedSizeList",
	        value: function isFixedSizeList(x) {
	            return x && x.typeId === enum_1.Type.FixedSizeList;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isMap",
	        value: function isMap(x) {
	            return x && x.typeId === enum_1.Type.Map;
	        }
	        /** @nocollapse */
	    }, {
	        key: "isDictionary",
	        value: function isDictionary(x) {
	            return x && x.typeId === enum_1.Type.Dictionary;
	        }
	    }]);

	    return DataType;
	}();

	DataType[Symbol.toStringTag] = function (proto) {
	    proto.children = null;
	    proto.ArrayType = Array;
	    return proto[Symbol.toStringTag] = 'DataType';
	}(DataType.prototype);
	exports.DataType = DataType;
	/** @ignore */

	var Null = function (_DataType) {
	    _inherits(Null, _DataType);

	    function Null() {
	        _classCallCheck(this, Null);

	        return _possibleConstructorReturn(this, (Null.__proto__ || Object.getPrototypeOf(Null)).apply(this, arguments));
	    }

	    _createClass(Null, [{
	        key: "toString",
	        value: function toString() {
	            return "Null";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Null;
	        }
	    }]);

	    return Null;
	}(DataType);

	Null[Symbol.toStringTag] = function (proto) {
	    return proto[Symbol.toStringTag] = 'Null';
	}(Null.prototype);
	exports.Null = Null;
	/** @ignore */

	var Int_ = function (_DataType2) {
	    _inherits(Int_, _DataType2);

	    function Int_(isSigned, bitWidth) {
	        _classCallCheck(this, Int_);

	        var _this2 = _possibleConstructorReturn(this, (Int_.__proto__ || Object.getPrototypeOf(Int_)).call(this));

	        _this2.isSigned = isSigned;
	        _this2.bitWidth = bitWidth;
	        return _this2;
	    }

	    _createClass(Int_, [{
	        key: "toString",
	        value: function toString() {
	            return (this.isSigned ? "I" : "Ui") + "nt" + this.bitWidth;
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Int;
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            switch (this.bitWidth) {
	                case 8:
	                    return this.isSigned ? Int8Array : Uint8Array;
	                case 16:
	                    return this.isSigned ? Int16Array : Uint16Array;
	                case 32:
	                    return this.isSigned ? Int32Array : Uint32Array;
	                case 64:
	                    return this.isSigned ? Int32Array : Uint32Array;
	            }
	            throw new Error("Unrecognized " + this[Symbol.toStringTag] + " type");
	        }
	    }]);

	    return Int_;
	}(DataType);

	Int_[Symbol.toStringTag] = function (proto) {
	    proto.isSigned = null;
	    proto.bitWidth = null;
	    return proto[Symbol.toStringTag] = 'Int';
	}(Int_.prototype);
	exports.Int = Int_;
	/** @ignore */

	var Int8 = function (_Int_) {
	    _inherits(Int8, _Int_);

	    function Int8() {
	        _classCallCheck(this, Int8);

	        return _possibleConstructorReturn(this, (Int8.__proto__ || Object.getPrototypeOf(Int8)).call(this, true, 8));
	    }

	    return Int8;
	}(Int_);

	exports.Int8 = Int8;
	/** @ignore */

	var Int16 = function (_Int_2) {
	    _inherits(Int16, _Int_2);

	    function Int16() {
	        _classCallCheck(this, Int16);

	        return _possibleConstructorReturn(this, (Int16.__proto__ || Object.getPrototypeOf(Int16)).call(this, true, 16));
	    }

	    return Int16;
	}(Int_);

	exports.Int16 = Int16;
	/** @ignore */

	var Int32 = function (_Int_3) {
	    _inherits(Int32, _Int_3);

	    function Int32() {
	        _classCallCheck(this, Int32);

	        return _possibleConstructorReturn(this, (Int32.__proto__ || Object.getPrototypeOf(Int32)).call(this, true, 32));
	    }

	    return Int32;
	}(Int_);

	exports.Int32 = Int32;
	/** @ignore */

	var Int64 = function (_Int_4) {
	    _inherits(Int64, _Int_4);

	    function Int64() {
	        _classCallCheck(this, Int64);

	        return _possibleConstructorReturn(this, (Int64.__proto__ || Object.getPrototypeOf(Int64)).call(this, true, 64));
	    }

	    return Int64;
	}(Int_);

	exports.Int64 = Int64;
	/** @ignore */

	var Uint8 = function (_Int_5) {
	    _inherits(Uint8, _Int_5);

	    function Uint8() {
	        _classCallCheck(this, Uint8);

	        return _possibleConstructorReturn(this, (Uint8.__proto__ || Object.getPrototypeOf(Uint8)).call(this, false, 8));
	    }

	    return Uint8;
	}(Int_);

	exports.Uint8 = Uint8;
	/** @ignore */

	var Uint16 = function (_Int_6) {
	    _inherits(Uint16, _Int_6);

	    function Uint16() {
	        _classCallCheck(this, Uint16);

	        return _possibleConstructorReturn(this, (Uint16.__proto__ || Object.getPrototypeOf(Uint16)).call(this, false, 16));
	    }

	    return Uint16;
	}(Int_);

	exports.Uint16 = Uint16;
	/** @ignore */

	var Uint32 = function (_Int_7) {
	    _inherits(Uint32, _Int_7);

	    function Uint32() {
	        _classCallCheck(this, Uint32);

	        return _possibleConstructorReturn(this, (Uint32.__proto__ || Object.getPrototypeOf(Uint32)).call(this, false, 32));
	    }

	    return Uint32;
	}(Int_);

	exports.Uint32 = Uint32;
	/** @ignore */

	var Uint64 = function (_Int_8) {
	    _inherits(Uint64, _Int_8);

	    function Uint64() {
	        _classCallCheck(this, Uint64);

	        return _possibleConstructorReturn(this, (Uint64.__proto__ || Object.getPrototypeOf(Uint64)).call(this, false, 64));
	    }

	    return Uint64;
	}(Int_);

	exports.Uint64 = Uint64;
	Object.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });
	Object.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });
	Object.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });
	Object.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });
	Object.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });
	Object.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });
	Object.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });
	Object.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });
	/** @ignore */

	var Float = function (_DataType3) {
	    _inherits(Float, _DataType3);

	    function Float(precision) {
	        _classCallCheck(this, Float);

	        var _this11 = _possibleConstructorReturn(this, (Float.__proto__ || Object.getPrototypeOf(Float)).call(this));

	        _this11.precision = precision;
	        return _this11;
	    }

	    _createClass(Float, [{
	        key: "toString",
	        value: function toString() {
	            return "Float" + (this.precision << 5 || 16);
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Float;
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            switch (this.precision) {
	                case enum_1.Precision.HALF:
	                    return Uint16Array;
	                case enum_1.Precision.SINGLE:
	                    return Float32Array;
	                case enum_1.Precision.DOUBLE:
	                    return Float64Array;
	            }
	            throw new Error("Unrecognized " + this[Symbol.toStringTag] + " type");
	        }
	    }]);

	    return Float;
	}(DataType);

	Float[Symbol.toStringTag] = function (proto) {
	    proto.precision = null;
	    return proto[Symbol.toStringTag] = 'Float';
	}(Float.prototype);
	exports.Float = Float;
	/** @ignore */

	var Float16 = function (_Float) {
	    _inherits(Float16, _Float);

	    function Float16() {
	        _classCallCheck(this, Float16);

	        return _possibleConstructorReturn(this, (Float16.__proto__ || Object.getPrototypeOf(Float16)).call(this, enum_1.Precision.HALF));
	    }

	    return Float16;
	}(Float);

	exports.Float16 = Float16;
	/** @ignore */

	var Float32 = function (_Float2) {
	    _inherits(Float32, _Float2);

	    function Float32() {
	        _classCallCheck(this, Float32);

	        return _possibleConstructorReturn(this, (Float32.__proto__ || Object.getPrototypeOf(Float32)).call(this, enum_1.Precision.SINGLE));
	    }

	    return Float32;
	}(Float);

	exports.Float32 = Float32;
	/** @ignore */

	var Float64 = function (_Float3) {
	    _inherits(Float64, _Float3);

	    function Float64() {
	        _classCallCheck(this, Float64);

	        return _possibleConstructorReturn(this, (Float64.__proto__ || Object.getPrototypeOf(Float64)).call(this, enum_1.Precision.DOUBLE));
	    }

	    return Float64;
	}(Float);

	exports.Float64 = Float64;
	Object.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });
	Object.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });
	Object.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });
	/** @ignore */

	var Binary = function (_DataType4) {
	    _inherits(Binary, _DataType4);

	    function Binary() {
	        _classCallCheck(this, Binary);

	        return _possibleConstructorReturn(this, (Binary.__proto__ || Object.getPrototypeOf(Binary)).call(this));
	    }

	    _createClass(Binary, [{
	        key: "toString",
	        value: function toString() {
	            return "Binary";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Binary;
	        }
	    }]);

	    return Binary;
	}(DataType);

	Binary[Symbol.toStringTag] = function (proto) {
	    proto.ArrayType = Uint8Array;
	    return proto[Symbol.toStringTag] = 'Binary';
	}(Binary.prototype);
	exports.Binary = Binary;
	/** @ignore */

	var Utf8 = function (_DataType5) {
	    _inherits(Utf8, _DataType5);

	    function Utf8() {
	        _classCallCheck(this, Utf8);

	        return _possibleConstructorReturn(this, (Utf8.__proto__ || Object.getPrototypeOf(Utf8)).call(this));
	    }

	    _createClass(Utf8, [{
	        key: "toString",
	        value: function toString() {
	            return "Utf8";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Utf8;
	        }
	    }]);

	    return Utf8;
	}(DataType);

	Utf8[Symbol.toStringTag] = function (proto) {
	    proto.ArrayType = Uint8Array;
	    return proto[Symbol.toStringTag] = 'Utf8';
	}(Utf8.prototype);
	exports.Utf8 = Utf8;
	/** @ignore */

	var Bool = function (_DataType6) {
	    _inherits(Bool, _DataType6);

	    function Bool() {
	        _classCallCheck(this, Bool);

	        return _possibleConstructorReturn(this, (Bool.__proto__ || Object.getPrototypeOf(Bool)).call(this));
	    }

	    _createClass(Bool, [{
	        key: "toString",
	        value: function toString() {
	            return "Bool";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Bool;
	        }
	    }]);

	    return Bool;
	}(DataType);

	Bool[Symbol.toStringTag] = function (proto) {
	    proto.ArrayType = Uint8Array;
	    return proto[Symbol.toStringTag] = 'Bool';
	}(Bool.prototype);
	exports.Bool = Bool;
	/** @ignore */

	var Decimal = function (_DataType7) {
	    _inherits(Decimal, _DataType7);

	    function Decimal(scale, precision) {
	        _classCallCheck(this, Decimal);

	        var _this18 = _possibleConstructorReturn(this, (Decimal.__proto__ || Object.getPrototypeOf(Decimal)).call(this));

	        _this18.scale = scale;
	        _this18.precision = precision;
	        return _this18;
	    }

	    _createClass(Decimal, [{
	        key: "toString",
	        value: function toString() {
	            return "Decimal[" + this.precision + "e" + (this.scale > 0 ? "+" : "") + this.scale + "]";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Decimal;
	        }
	    }]);

	    return Decimal;
	}(DataType);

	Decimal[Symbol.toStringTag] = function (proto) {
	    proto.scale = null;
	    proto.precision = null;
	    proto.ArrayType = Uint32Array;
	    return proto[Symbol.toStringTag] = 'Decimal';
	}(Decimal.prototype);
	exports.Decimal = Decimal;
	/** @ignore */

	var Date_ = function (_DataType8) {
	    _inherits(Date_, _DataType8);

	    function Date_(unit) {
	        _classCallCheck(this, Date_);

	        var _this19 = _possibleConstructorReturn(this, (Date_.__proto__ || Object.getPrototypeOf(Date_)).call(this));

	        _this19.unit = unit;
	        return _this19;
	    }

	    _createClass(Date_, [{
	        key: "toString",
	        value: function toString() {
	            return "Date" + (this.unit + 1) * 32 + "<" + enum_1.DateUnit[this.unit] + ">";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Date;
	        }
	    }]);

	    return Date_;
	}(DataType);

	Date_[Symbol.toStringTag] = function (proto) {
	    proto.unit = null;
	    proto.ArrayType = Int32Array;
	    return proto[Symbol.toStringTag] = 'Date';
	}(Date_.prototype);
	exports.Date_ = Date_;
	/** @ignore */

	var DateDay = function (_Date_) {
	    _inherits(DateDay, _Date_);

	    function DateDay() {
	        _classCallCheck(this, DateDay);

	        return _possibleConstructorReturn(this, (DateDay.__proto__ || Object.getPrototypeOf(DateDay)).call(this, enum_1.DateUnit.DAY));
	    }

	    return DateDay;
	}(Date_);

	exports.DateDay = DateDay;
	/** @ignore */

	var DateMillisecond = function (_Date_2) {
	    _inherits(DateMillisecond, _Date_2);

	    function DateMillisecond() {
	        _classCallCheck(this, DateMillisecond);

	        return _possibleConstructorReturn(this, (DateMillisecond.__proto__ || Object.getPrototypeOf(DateMillisecond)).call(this, enum_1.DateUnit.MILLISECOND));
	    }

	    return DateMillisecond;
	}(Date_);

	exports.DateMillisecond = DateMillisecond;
	/** @ignore */

	var Time_ = function (_DataType9) {
	    _inherits(Time_, _DataType9);

	    function Time_(unit, bitWidth) {
	        _classCallCheck(this, Time_);

	        var _this22 = _possibleConstructorReturn(this, (Time_.__proto__ || Object.getPrototypeOf(Time_)).call(this));

	        _this22.unit = unit;
	        _this22.bitWidth = bitWidth;
	        return _this22;
	    }

	    _createClass(Time_, [{
	        key: "toString",
	        value: function toString() {
	            return "Time" + this.bitWidth + "<" + enum_1.TimeUnit[this.unit] + ">";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Time;
	        }
	    }]);

	    return Time_;
	}(DataType);

	Time_[Symbol.toStringTag] = function (proto) {
	    proto.unit = null;
	    proto.bitWidth = null;
	    proto.ArrayType = Int32Array;
	    return proto[Symbol.toStringTag] = 'Time';
	}(Time_.prototype);
	exports.Time = Time_;
	/** @ignore */

	var TimeSecond = function (_Time_) {
	    _inherits(TimeSecond, _Time_);

	    function TimeSecond() {
	        _classCallCheck(this, TimeSecond);

	        return _possibleConstructorReturn(this, (TimeSecond.__proto__ || Object.getPrototypeOf(TimeSecond)).call(this, enum_1.TimeUnit.SECOND, 32));
	    }

	    return TimeSecond;
	}(Time_);

	exports.TimeSecond = TimeSecond;
	/** @ignore */

	var TimeMillisecond = function (_Time_2) {
	    _inherits(TimeMillisecond, _Time_2);

	    function TimeMillisecond() {
	        _classCallCheck(this, TimeMillisecond);

	        return _possibleConstructorReturn(this, (TimeMillisecond.__proto__ || Object.getPrototypeOf(TimeMillisecond)).call(this, enum_1.TimeUnit.MILLISECOND, 32));
	    }

	    return TimeMillisecond;
	}(Time_);

	exports.TimeMillisecond = TimeMillisecond;
	/** @ignore */

	var TimeMicrosecond = function (_Time_3) {
	    _inherits(TimeMicrosecond, _Time_3);

	    function TimeMicrosecond() {
	        _classCallCheck(this, TimeMicrosecond);

	        return _possibleConstructorReturn(this, (TimeMicrosecond.__proto__ || Object.getPrototypeOf(TimeMicrosecond)).call(this, enum_1.TimeUnit.MICROSECOND, 64));
	    }

	    return TimeMicrosecond;
	}(Time_);

	exports.TimeMicrosecond = TimeMicrosecond;
	/** @ignore */

	var TimeNanosecond = function (_Time_4) {
	    _inherits(TimeNanosecond, _Time_4);

	    function TimeNanosecond() {
	        _classCallCheck(this, TimeNanosecond);

	        return _possibleConstructorReturn(this, (TimeNanosecond.__proto__ || Object.getPrototypeOf(TimeNanosecond)).call(this, enum_1.TimeUnit.NANOSECOND, 64));
	    }

	    return TimeNanosecond;
	}(Time_);

	exports.TimeNanosecond = TimeNanosecond;
	/** @ignore */

	var Timestamp_ = function (_DataType10) {
	    _inherits(Timestamp_, _DataType10);

	    function Timestamp_(unit, timezone) {
	        _classCallCheck(this, Timestamp_);

	        var _this27 = _possibleConstructorReturn(this, (Timestamp_.__proto__ || Object.getPrototypeOf(Timestamp_)).call(this));

	        _this27.unit = unit;
	        _this27.timezone = timezone;
	        return _this27;
	    }

	    _createClass(Timestamp_, [{
	        key: "toString",
	        value: function toString() {
	            return "Timestamp<" + enum_1.TimeUnit[this.unit] + (this.timezone ? ", " + this.timezone : "") + ">";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Timestamp;
	        }
	    }]);

	    return Timestamp_;
	}(DataType);

	Timestamp_[Symbol.toStringTag] = function (proto) {
	    proto.unit = null;
	    proto.timezone = null;
	    proto.ArrayType = Int32Array;
	    return proto[Symbol.toStringTag] = 'Timestamp';
	}(Timestamp_.prototype);
	exports.Timestamp = Timestamp_;
	/** @ignore */

	var TimestampSecond = function (_Timestamp_) {
	    _inherits(TimestampSecond, _Timestamp_);

	    function TimestampSecond(timezone) {
	        _classCallCheck(this, TimestampSecond);

	        return _possibleConstructorReturn(this, (TimestampSecond.__proto__ || Object.getPrototypeOf(TimestampSecond)).call(this, enum_1.TimeUnit.SECOND, timezone));
	    }

	    return TimestampSecond;
	}(Timestamp_);

	exports.TimestampSecond = TimestampSecond;
	/** @ignore */

	var TimestampMillisecond = function (_Timestamp_2) {
	    _inherits(TimestampMillisecond, _Timestamp_2);

	    function TimestampMillisecond(timezone) {
	        _classCallCheck(this, TimestampMillisecond);

	        return _possibleConstructorReturn(this, (TimestampMillisecond.__proto__ || Object.getPrototypeOf(TimestampMillisecond)).call(this, enum_1.TimeUnit.MILLISECOND, timezone));
	    }

	    return TimestampMillisecond;
	}(Timestamp_);

	exports.TimestampMillisecond = TimestampMillisecond;
	/** @ignore */

	var TimestampMicrosecond = function (_Timestamp_3) {
	    _inherits(TimestampMicrosecond, _Timestamp_3);

	    function TimestampMicrosecond(timezone) {
	        _classCallCheck(this, TimestampMicrosecond);

	        return _possibleConstructorReturn(this, (TimestampMicrosecond.__proto__ || Object.getPrototypeOf(TimestampMicrosecond)).call(this, enum_1.TimeUnit.MICROSECOND, timezone));
	    }

	    return TimestampMicrosecond;
	}(Timestamp_);

	exports.TimestampMicrosecond = TimestampMicrosecond;
	/** @ignore */

	var TimestampNanosecond = function (_Timestamp_4) {
	    _inherits(TimestampNanosecond, _Timestamp_4);

	    function TimestampNanosecond(timezone) {
	        _classCallCheck(this, TimestampNanosecond);

	        return _possibleConstructorReturn(this, (TimestampNanosecond.__proto__ || Object.getPrototypeOf(TimestampNanosecond)).call(this, enum_1.TimeUnit.NANOSECOND, timezone));
	    }

	    return TimestampNanosecond;
	}(Timestamp_);

	exports.TimestampNanosecond = TimestampNanosecond;
	/** @ignore */

	var Interval_ = function (_DataType11) {
	    _inherits(Interval_, _DataType11);

	    function Interval_(unit) {
	        _classCallCheck(this, Interval_);

	        var _this32 = _possibleConstructorReturn(this, (Interval_.__proto__ || Object.getPrototypeOf(Interval_)).call(this));

	        _this32.unit = unit;
	        return _this32;
	    }

	    _createClass(Interval_, [{
	        key: "toString",
	        value: function toString() {
	            return "Interval<" + enum_1.IntervalUnit[this.unit] + ">";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Interval;
	        }
	    }]);

	    return Interval_;
	}(DataType);

	Interval_[Symbol.toStringTag] = function (proto) {
	    proto.unit = null;
	    proto.ArrayType = Int32Array;
	    return proto[Symbol.toStringTag] = 'Interval';
	}(Interval_.prototype);
	exports.Interval = Interval_;
	/** @ignore */

	var IntervalDayTime = function (_Interval_) {
	    _inherits(IntervalDayTime, _Interval_);

	    function IntervalDayTime() {
	        _classCallCheck(this, IntervalDayTime);

	        return _possibleConstructorReturn(this, (IntervalDayTime.__proto__ || Object.getPrototypeOf(IntervalDayTime)).call(this, enum_1.IntervalUnit.DAY_TIME));
	    }

	    return IntervalDayTime;
	}(Interval_);

	exports.IntervalDayTime = IntervalDayTime;
	/** @ignore */

	var IntervalYearMonth = function (_Interval_2) {
	    _inherits(IntervalYearMonth, _Interval_2);

	    function IntervalYearMonth() {
	        _classCallCheck(this, IntervalYearMonth);

	        return _possibleConstructorReturn(this, (IntervalYearMonth.__proto__ || Object.getPrototypeOf(IntervalYearMonth)).call(this, enum_1.IntervalUnit.YEAR_MONTH));
	    }

	    return IntervalYearMonth;
	}(Interval_);

	exports.IntervalYearMonth = IntervalYearMonth;
	/** @ignore */

	var List = function (_DataType12) {
	    _inherits(List, _DataType12);

	    function List(child) {
	        _classCallCheck(this, List);

	        var _this35 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this));

	        _this35.children = [child];
	        return _this35;
	    }

	    _createClass(List, [{
	        key: "toString",
	        value: function toString() {
	            return "List<" + this.valueType + ">";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.List;
	        }
	    }, {
	        key: "valueType",
	        get: function get() {
	            return this.children[0].type;
	        }
	    }, {
	        key: "valueField",
	        get: function get() {
	            return this.children[0];
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            return this.valueType.ArrayType;
	        }
	    }]);

	    return List;
	}(DataType);

	List[Symbol.toStringTag] = function (proto) {
	    proto.children = null;
	    return proto[Symbol.toStringTag] = 'List';
	}(List.prototype);
	exports.List = List;
	/** @ignore */

	var Struct = function (_DataType13) {
	    _inherits(Struct, _DataType13);

	    function Struct(children) {
	        _classCallCheck(this, Struct);

	        var _this36 = _possibleConstructorReturn(this, (Struct.__proto__ || Object.getPrototypeOf(Struct)).call(this));

	        _this36.children = children;
	        return _this36;
	    }

	    _createClass(Struct, [{
	        key: "toString",
	        value: function toString() {
	            return "Struct<{" + this.children.map(function (f) {
	                return f.name + ":" + f.type;
	            }).join(", ") + "}>";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Struct;
	        }
	    }]);

	    return Struct;
	}(DataType);

	Struct[Symbol.toStringTag] = function (proto) {
	    proto.children = null;
	    return proto[Symbol.toStringTag] = 'Struct';
	}(Struct.prototype);
	exports.Struct = Struct;
	/** @ignore */

	var Union_ = function (_DataType14) {
	    _inherits(Union_, _DataType14);

	    function Union_(mode, typeIds, children) {
	        _classCallCheck(this, Union_);

	        var _this37 = _possibleConstructorReturn(this, (Union_.__proto__ || Object.getPrototypeOf(Union_)).call(this));

	        _this37.mode = mode;
	        _this37.children = children;
	        _this37.typeIds = typeIds = Int32Array.from(typeIds);
	        _this37.typeIdToChildIndex = typeIds.reduce(function (typeIdToChildIndex, typeId, idx) {
	            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;
	        }, Object.create(null));
	        return _this37;
	    }

	    _createClass(Union_, [{
	        key: "toString",
	        value: function toString() {
	            return this[Symbol.toStringTag] + "<" + this.children.map(function (x) {
	                return "" + x.type;
	            }).join(" | ") + ">";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Union;
	        }
	    }]);

	    return Union_;
	}(DataType);

	Union_[Symbol.toStringTag] = function (proto) {
	    proto.mode = null;
	    proto.typeIds = null;
	    proto.children = null;
	    proto.typeIdToChildIndex = null;
	    proto.ArrayType = Int8Array;
	    return proto[Symbol.toStringTag] = 'Union';
	}(Union_.prototype);
	exports.Union = Union_;
	/** @ignore */

	var DenseUnion = function (_Union_) {
	    _inherits(DenseUnion, _Union_);

	    function DenseUnion(typeIds, children) {
	        _classCallCheck(this, DenseUnion);

	        return _possibleConstructorReturn(this, (DenseUnion.__proto__ || Object.getPrototypeOf(DenseUnion)).call(this, enum_1.UnionMode.Dense, typeIds, children));
	    }

	    return DenseUnion;
	}(Union_);

	exports.DenseUnion = DenseUnion;
	/** @ignore */

	var SparseUnion = function (_Union_2) {
	    _inherits(SparseUnion, _Union_2);

	    function SparseUnion(typeIds, children) {
	        _classCallCheck(this, SparseUnion);

	        return _possibleConstructorReturn(this, (SparseUnion.__proto__ || Object.getPrototypeOf(SparseUnion)).call(this, enum_1.UnionMode.Sparse, typeIds, children));
	    }

	    return SparseUnion;
	}(Union_);

	exports.SparseUnion = SparseUnion;
	/** @ignore */

	var FixedSizeBinary = function (_DataType15) {
	    _inherits(FixedSizeBinary, _DataType15);

	    function FixedSizeBinary(byteWidth) {
	        _classCallCheck(this, FixedSizeBinary);

	        var _this40 = _possibleConstructorReturn(this, (FixedSizeBinary.__proto__ || Object.getPrototypeOf(FixedSizeBinary)).call(this));

	        _this40.byteWidth = byteWidth;
	        return _this40;
	    }

	    _createClass(FixedSizeBinary, [{
	        key: "toString",
	        value: function toString() {
	            return "FixedSizeBinary[" + this.byteWidth + "]";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.FixedSizeBinary;
	        }
	    }]);

	    return FixedSizeBinary;
	}(DataType);

	FixedSizeBinary[Symbol.toStringTag] = function (proto) {
	    proto.byteWidth = null;
	    proto.ArrayType = Uint8Array;
	    return proto[Symbol.toStringTag] = 'FixedSizeBinary';
	}(FixedSizeBinary.prototype);
	exports.FixedSizeBinary = FixedSizeBinary;
	/** @ignore */

	var FixedSizeList = function (_DataType16) {
	    _inherits(FixedSizeList, _DataType16);

	    function FixedSizeList(listSize, child) {
	        _classCallCheck(this, FixedSizeList);

	        var _this41 = _possibleConstructorReturn(this, (FixedSizeList.__proto__ || Object.getPrototypeOf(FixedSizeList)).call(this));

	        _this41.listSize = listSize;
	        _this41.children = [child];
	        return _this41;
	    }

	    _createClass(FixedSizeList, [{
	        key: "toString",
	        value: function toString() {
	            return "FixedSizeList[" + this.listSize + "]<" + this.valueType + ">";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.FixedSizeList;
	        }
	    }, {
	        key: "valueType",
	        get: function get() {
	            return this.children[0].type;
	        }
	    }, {
	        key: "valueField",
	        get: function get() {
	            return this.children[0];
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            return this.valueType.ArrayType;
	        }
	    }]);

	    return FixedSizeList;
	}(DataType);

	FixedSizeList[Symbol.toStringTag] = function (proto) {
	    proto.children = null;
	    proto.listSize = null;
	    return proto[Symbol.toStringTag] = 'FixedSizeList';
	}(FixedSizeList.prototype);
	exports.FixedSizeList = FixedSizeList;
	/** @ignore */

	var Map_ = function (_DataType17) {
	    _inherits(Map_, _DataType17);

	    function Map_(child) {
	        var keysSorted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        _classCallCheck(this, Map_);

	        var _this42 = _possibleConstructorReturn(this, (Map_.__proto__ || Object.getPrototypeOf(Map_)).call(this));

	        _this42.children = [child];
	        _this42.keysSorted = keysSorted;
	        return _this42;
	    }

	    _createClass(Map_, [{
	        key: "toString",
	        value: function toString() {
	            return "Map<{" + this.children[0].type.children.map(function (f) {
	                return f.name + ":" + f.type;
	            }).join(", ") + "}>";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Map;
	        }
	    }, {
	        key: "keyType",
	        get: function get() {
	            return this.children[0].type.children[0].type;
	        }
	    }, {
	        key: "valueType",
	        get: function get() {
	            return this.children[0].type.children[1].type;
	        }
	    }]);

	    return Map_;
	}(DataType);

	Map_[Symbol.toStringTag] = function (proto) {
	    proto.children = null;
	    proto.keysSorted = null;
	    return proto[Symbol.toStringTag] = 'Map_';
	}(Map_.prototype);
	exports.Map_ = Map_;
	/** @ignore */
	var getId = function (atomicDictionaryId) {
	    return function () {
	        return ++atomicDictionaryId;
	    };
	}(-1);
	/** @ignore */

	var Dictionary = function (_DataType18) {
	    _inherits(Dictionary, _DataType18);

	    function Dictionary(dictionary, indices, id, isOrdered) {
	        _classCallCheck(this, Dictionary);

	        var _this43 = _possibleConstructorReturn(this, (Dictionary.__proto__ || Object.getPrototypeOf(Dictionary)).call(this));

	        _this43.indices = indices;
	        _this43.dictionary = dictionary;
	        _this43.isOrdered = isOrdered || false;
	        _this43.id = id == null ? getId() : typeof id === 'number' ? id : id.low;
	        return _this43;
	    }

	    _createClass(Dictionary, [{
	        key: "toString",
	        value: function toString() {
	            return "Dictionary<" + this.indices + ", " + this.dictionary + ">";
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return enum_1.Type.Dictionary;
	        }
	    }, {
	        key: "children",
	        get: function get() {
	            return this.dictionary.children;
	        }
	    }, {
	        key: "valueType",
	        get: function get() {
	            return this.dictionary;
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            return this.dictionary.ArrayType;
	        }
	    }]);

	    return Dictionary;
	}(DataType);

	Dictionary[Symbol.toStringTag] = function (proto) {
	    proto.id = null;
	    proto.indices = null;
	    proto.isOrdered = null;
	    proto.dictionary = null;
	    return proto[Symbol.toStringTag] = 'Dictionary';
	}(Dictionary.prototype);
	exports.Dictionary = Dictionary;
	/** @ignore */
	function strideForType(type) {
	    var t = type;
	    switch (type.typeId) {
	        case enum_1.Type.Decimal:
	            return 4;
	        case enum_1.Type.Timestamp:
	            return 2;
	        case enum_1.Type.Date:
	            return 1 + t.unit;
	        case enum_1.Type.Interval:
	            return 1 + t.unit;
	        case enum_1.Type.Int:
	            return 1 + +(t.bitWidth > 32);
	        case enum_1.Type.Time:
	            return 1 + +(t.bitWidth > 32);
	        case enum_1.Type.FixedSizeList:
	            return t.listSize;
	        case enum_1.Type.FixedSizeBinary:
	            return t.byteWidth;
	        default:
	            return 1;
	    }
	}
	exports.strideForType = strideForType;

	//# sourceMappingURL=type.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var visitor_1 = __webpack_require__(76);
	/** @ignore */

	var TypeComparator = function (_visitor_1$Visitor) {
	    _inherits(TypeComparator, _visitor_1$Visitor);

	    function TypeComparator() {
	        _classCallCheck(this, TypeComparator);

	        return _possibleConstructorReturn(this, (TypeComparator.__proto__ || Object.getPrototypeOf(TypeComparator)).apply(this, arguments));
	    }

	    _createClass(TypeComparator, [{
	        key: "compareSchemas",
	        value: function compareSchemas(schema, other) {
	            return schema === other || other instanceof schema.constructor && exports.instance.compareFields(schema.fields, other.fields);
	        }
	    }, {
	        key: "compareFields",
	        value: function compareFields(fields, others) {
	            return fields === others || Array.isArray(fields) && Array.isArray(others) && fields.length === others.length && fields.every(function (f, i) {
	                return exports.instance.compareField(f, others[i]);
	            });
	        }
	    }, {
	        key: "compareField",
	        value: function compareField(field, other) {
	            return field === other || other instanceof field.constructor && field.name === other.name && field.nullable === other.nullable && exports.instance.visit(field.type, other.type);
	        }
	    }]);

	    return TypeComparator;
	}(visitor_1.Visitor);

	exports.TypeComparator = TypeComparator;
	function compareConstructor(type, other) {
	    return other instanceof type.constructor;
	}
	function compareAny(type, other) {
	    return type === other || compareConstructor(type, other);
	}
	function compareInt(type, other) {
	    return type === other || compareConstructor(type, other) && type.bitWidth === other.bitWidth && type.isSigned === other.isSigned;
	}
	function compareFloat(type, other) {
	    return type === other || compareConstructor(type, other) && type.precision === other.precision;
	}
	function compareFixedSizeBinary(type, other) {
	    return type === other || compareConstructor(type, other) && type.byteWidth === other.byteWidth;
	}
	function compareDate(type, other) {
	    return type === other || compareConstructor(type, other) && type.unit === other.unit;
	}
	function compareTimestamp(type, other) {
	    return type === other || compareConstructor(type, other) && type.unit === other.unit && type.timezone === other.timezone;
	}
	function compareTime(type, other) {
	    return type === other || compareConstructor(type, other) && type.unit === other.unit && type.bitWidth === other.bitWidth;
	}
	function compareList(type, other) {
	    return type === other || compareConstructor(type, other) && type.children.length === other.children.length && exports.instance.compareFields(type.children, other.children);
	}
	function compareStruct(type, other) {
	    return type === other || compareConstructor(type, other) && type.children.length === other.children.length && exports.instance.compareFields(type.children, other.children);
	}
	function compareUnion(type, other) {
	    return type === other || compareConstructor(type, other) && type.mode === other.mode && type.typeIds.every(function (x, i) {
	        return x === other.typeIds[i];
	    }) && exports.instance.compareFields(type.children, other.children);
	}
	function compareDictionary(type, other) {
	    return type === other || compareConstructor(type, other) && type.id === other.id && type.isOrdered === other.isOrdered && exports.instance.visit(type.indices, other.indices) && exports.instance.visit(type.dictionary, other.dictionary);
	}
	function compareInterval(type, other) {
	    return type === other || compareConstructor(type, other) && type.unit === other.unit;
	}
	function compareFixedSizeList(type, other) {
	    return type === other || compareConstructor(type, other) && type.listSize === other.listSize && type.children.length === other.children.length && exports.instance.compareFields(type.children, other.children);
	}
	function compareMap(type, other) {
	    return type === other || compareConstructor(type, other) && type.keysSorted === other.keysSorted && type.children.length === other.children.length && exports.instance.compareFields(type.children, other.children);
	}
	TypeComparator.prototype.visitNull = compareAny;
	TypeComparator.prototype.visitBool = compareAny;
	TypeComparator.prototype.visitInt = compareInt;
	TypeComparator.prototype.visitInt8 = compareInt;
	TypeComparator.prototype.visitInt16 = compareInt;
	TypeComparator.prototype.visitInt32 = compareInt;
	TypeComparator.prototype.visitInt64 = compareInt;
	TypeComparator.prototype.visitUint8 = compareInt;
	TypeComparator.prototype.visitUint16 = compareInt;
	TypeComparator.prototype.visitUint32 = compareInt;
	TypeComparator.prototype.visitUint64 = compareInt;
	TypeComparator.prototype.visitFloat = compareFloat;
	TypeComparator.prototype.visitFloat16 = compareFloat;
	TypeComparator.prototype.visitFloat32 = compareFloat;
	TypeComparator.prototype.visitFloat64 = compareFloat;
	TypeComparator.prototype.visitUtf8 = compareAny;
	TypeComparator.prototype.visitBinary = compareAny;
	TypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;
	TypeComparator.prototype.visitDate = compareDate;
	TypeComparator.prototype.visitDateDay = compareDate;
	TypeComparator.prototype.visitDateMillisecond = compareDate;
	TypeComparator.prototype.visitTimestamp = compareTimestamp;
	TypeComparator.prototype.visitTimestampSecond = compareTimestamp;
	TypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;
	TypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;
	TypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;
	TypeComparator.prototype.visitTime = compareTime;
	TypeComparator.prototype.visitTimeSecond = compareTime;
	TypeComparator.prototype.visitTimeMillisecond = compareTime;
	TypeComparator.prototype.visitTimeMicrosecond = compareTime;
	TypeComparator.prototype.visitTimeNanosecond = compareTime;
	TypeComparator.prototype.visitDecimal = compareAny;
	TypeComparator.prototype.visitList = compareList;
	TypeComparator.prototype.visitStruct = compareStruct;
	TypeComparator.prototype.visitUnion = compareUnion;
	TypeComparator.prototype.visitDenseUnion = compareUnion;
	TypeComparator.prototype.visitSparseUnion = compareUnion;
	TypeComparator.prototype.visitDictionary = compareDictionary;
	TypeComparator.prototype.visitInterval = compareInterval;
	TypeComparator.prototype.visitIntervalDayTime = compareInterval;
	TypeComparator.prototype.visitIntervalYearMonth = compareInterval;
	TypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;
	TypeComparator.prototype.visitMap = compareMap;
	/** @ignore */
	exports.instance = new TypeComparator();

	//# sourceMappingURL=typecomparator.js.map

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(72);
	var vector_1 = __webpack_require__(68);
	var enum_1 = __webpack_require__(69);
	var type_1 = __webpack_require__(74);

	var Visitor = function () {
	    function Visitor() {
	        _classCallCheck(this, Visitor);
	    }

	    _createClass(Visitor, [{
	        key: "visitMany",
	        value: function visitMany(nodes) {
	            var _this = this;

	            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                args[_key - 1] = arguments[_key];
	            }

	            return nodes.map(function (node, i) {
	                return _this.visit.apply(_this, [node].concat(_toConsumableArray(args.map(function (x) {
	                    return x[i];
	                }))));
	            });
	        }
	    }, {
	        key: "visit",
	        value: function visit() {
	            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                args[_key2] = arguments[_key2];
	            }

	            return this.getVisitFn(args[0], false).apply(this, args);
	        }
	    }, {
	        key: "getVisitFn",
	        value: function getVisitFn(node) {
	            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            return _getVisitFn(this, node, throwIfNotFound);
	        }
	    }, {
	        key: "visitNull",
	        value: function visitNull(_node) {
	            return null;
	        }
	    }, {
	        key: "visitBool",
	        value: function visitBool(_node) {
	            return null;
	        }
	    }, {
	        key: "visitInt",
	        value: function visitInt(_node) {
	            return null;
	        }
	    }, {
	        key: "visitFloat",
	        value: function visitFloat(_node) {
	            return null;
	        }
	    }, {
	        key: "visitUtf8",
	        value: function visitUtf8(_node) {
	            return null;
	        }
	    }, {
	        key: "visitBinary",
	        value: function visitBinary(_node) {
	            return null;
	        }
	    }, {
	        key: "visitFixedSizeBinary",
	        value: function visitFixedSizeBinary(_node) {
	            return null;
	        }
	    }, {
	        key: "visitDate",
	        value: function visitDate(_node) {
	            return null;
	        }
	    }, {
	        key: "visitTimestamp",
	        value: function visitTimestamp(_node) {
	            return null;
	        }
	    }, {
	        key: "visitTime",
	        value: function visitTime(_node) {
	            return null;
	        }
	    }, {
	        key: "visitDecimal",
	        value: function visitDecimal(_node) {
	            return null;
	        }
	    }, {
	        key: "visitList",
	        value: function visitList(_node) {
	            return null;
	        }
	    }, {
	        key: "visitStruct",
	        value: function visitStruct(_node) {
	            return null;
	        }
	    }, {
	        key: "visitUnion",
	        value: function visitUnion(_node) {
	            return null;
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary(_node) {
	            return null;
	        }
	    }, {
	        key: "visitInterval",
	        value: function visitInterval(_node) {
	            return null;
	        }
	    }, {
	        key: "visitFixedSizeList",
	        value: function visitFixedSizeList(_node) {
	            return null;
	        }
	    }, {
	        key: "visitMap",
	        value: function visitMap(_node) {
	            return null;
	        }
	    }]);

	    return Visitor;
	}();

	exports.Visitor = Visitor;
	/** @ignore */
	function _getVisitFn(visitor, node) {
	    var throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	    var fn = null;
	    var dtype = enum_1.Type.NONE;
	    // tslint:disable
	    if (node instanceof data_1.Data) {
	        dtype = inferDType(node.type);
	    } else if (node instanceof vector_1.Vector) {
	        dtype = inferDType(node.type);
	    } else if (node instanceof type_1.DataType) {
	        dtype = inferDType(node);
	    } else if (typeof (dtype = node) !== 'number') {
	        dtype = enum_1.Type[node];
	    }
	    switch (dtype) {
	        case enum_1.Type.Null:
	            fn = visitor.visitNull;
	            break;
	        case enum_1.Type.Bool:
	            fn = visitor.visitBool;
	            break;
	        case enum_1.Type.Int:
	            fn = visitor.visitInt;
	            break;
	        case enum_1.Type.Int8:
	            fn = visitor.visitInt8 || visitor.visitInt;
	            break;
	        case enum_1.Type.Int16:
	            fn = visitor.visitInt16 || visitor.visitInt;
	            break;
	        case enum_1.Type.Int32:
	            fn = visitor.visitInt32 || visitor.visitInt;
	            break;
	        case enum_1.Type.Int64:
	            fn = visitor.visitInt64 || visitor.visitInt;
	            break;
	        case enum_1.Type.Uint8:
	            fn = visitor.visitUint8 || visitor.visitInt;
	            break;
	        case enum_1.Type.Uint16:
	            fn = visitor.visitUint16 || visitor.visitInt;
	            break;
	        case enum_1.Type.Uint32:
	            fn = visitor.visitUint32 || visitor.visitInt;
	            break;
	        case enum_1.Type.Uint64:
	            fn = visitor.visitUint64 || visitor.visitInt;
	            break;
	        case enum_1.Type.Float:
	            fn = visitor.visitFloat;
	            break;
	        case enum_1.Type.Float16:
	            fn = visitor.visitFloat16 || visitor.visitFloat;
	            break;
	        case enum_1.Type.Float32:
	            fn = visitor.visitFloat32 || visitor.visitFloat;
	            break;
	        case enum_1.Type.Float64:
	            fn = visitor.visitFloat64 || visitor.visitFloat;
	            break;
	        case enum_1.Type.Utf8:
	            fn = visitor.visitUtf8;
	            break;
	        case enum_1.Type.Binary:
	            fn = visitor.visitBinary;
	            break;
	        case enum_1.Type.FixedSizeBinary:
	            fn = visitor.visitFixedSizeBinary;
	            break;
	        case enum_1.Type.Date:
	            fn = visitor.visitDate;
	            break;
	        case enum_1.Type.DateDay:
	            fn = visitor.visitDateDay || visitor.visitDate;
	            break;
	        case enum_1.Type.DateMillisecond:
	            fn = visitor.visitDateMillisecond || visitor.visitDate;
	            break;
	        case enum_1.Type.Timestamp:
	            fn = visitor.visitTimestamp;
	            break;
	        case enum_1.Type.TimestampSecond:
	            fn = visitor.visitTimestampSecond || visitor.visitTimestamp;
	            break;
	        case enum_1.Type.TimestampMillisecond:
	            fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;
	            break;
	        case enum_1.Type.TimestampMicrosecond:
	            fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;
	            break;
	        case enum_1.Type.TimestampNanosecond:
	            fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;
	            break;
	        case enum_1.Type.Time:
	            fn = visitor.visitTime;
	            break;
	        case enum_1.Type.TimeSecond:
	            fn = visitor.visitTimeSecond || visitor.visitTime;
	            break;
	        case enum_1.Type.TimeMillisecond:
	            fn = visitor.visitTimeMillisecond || visitor.visitTime;
	            break;
	        case enum_1.Type.TimeMicrosecond:
	            fn = visitor.visitTimeMicrosecond || visitor.visitTime;
	            break;
	        case enum_1.Type.TimeNanosecond:
	            fn = visitor.visitTimeNanosecond || visitor.visitTime;
	            break;
	        case enum_1.Type.Decimal:
	            fn = visitor.visitDecimal;
	            break;
	        case enum_1.Type.List:
	            fn = visitor.visitList;
	            break;
	        case enum_1.Type.Struct:
	            fn = visitor.visitStruct;
	            break;
	        case enum_1.Type.Union:
	            fn = visitor.visitUnion;
	            break;
	        case enum_1.Type.DenseUnion:
	            fn = visitor.visitDenseUnion || visitor.visitUnion;
	            break;
	        case enum_1.Type.SparseUnion:
	            fn = visitor.visitSparseUnion || visitor.visitUnion;
	            break;
	        case enum_1.Type.Dictionary:
	            fn = visitor.visitDictionary;
	            break;
	        case enum_1.Type.Interval:
	            fn = visitor.visitInterval;
	            break;
	        case enum_1.Type.IntervalDayTime:
	            fn = visitor.visitIntervalDayTime || visitor.visitInterval;
	            break;
	        case enum_1.Type.IntervalYearMonth:
	            fn = visitor.visitIntervalYearMonth || visitor.visitInterval;
	            break;
	        case enum_1.Type.FixedSizeList:
	            fn = visitor.visitFixedSizeList;
	            break;
	        case enum_1.Type.Map:
	            fn = visitor.visitMap;
	            break;
	    }
	    if (typeof fn === 'function') return fn;
	    if (!throwIfNotFound) return function () {
	        return null;
	    };
	    throw new Error("Unrecognized type '" + enum_1.Type[dtype] + "'");
	}
	/** @ignore */
	function inferDType(type) {
	    switch (type.typeId) {
	        case enum_1.Type.Null:
	            return enum_1.Type.Null;
	        case enum_1.Type.Int:
	            var bitWidth = type.bitWidth,
	                isSigned = type.isSigned;

	            switch (bitWidth) {
	                case 8:
	                    return isSigned ? enum_1.Type.Int8 : enum_1.Type.Uint8;
	                case 16:
	                    return isSigned ? enum_1.Type.Int16 : enum_1.Type.Uint16;
	                case 32:
	                    return isSigned ? enum_1.Type.Int32 : enum_1.Type.Uint32;
	                case 64:
	                    return isSigned ? enum_1.Type.Int64 : enum_1.Type.Uint64;
	            }
	            return enum_1.Type.Int;
	        case enum_1.Type.Float:
	            switch (type.precision) {
	                case enum_1.Precision.HALF:
	                    return enum_1.Type.Float16;
	                case enum_1.Precision.SINGLE:
	                    return enum_1.Type.Float32;
	                case enum_1.Precision.DOUBLE:
	                    return enum_1.Type.Float64;
	            }
	            return enum_1.Type.Float;
	        case enum_1.Type.Binary:
	            return enum_1.Type.Binary;
	        case enum_1.Type.Utf8:
	            return enum_1.Type.Utf8;
	        case enum_1.Type.Bool:
	            return enum_1.Type.Bool;
	        case enum_1.Type.Decimal:
	            return enum_1.Type.Decimal;
	        case enum_1.Type.Time:
	            switch (type.unit) {
	                case enum_1.TimeUnit.SECOND:
	                    return enum_1.Type.TimeSecond;
	                case enum_1.TimeUnit.MILLISECOND:
	                    return enum_1.Type.TimeMillisecond;
	                case enum_1.TimeUnit.MICROSECOND:
	                    return enum_1.Type.TimeMicrosecond;
	                case enum_1.TimeUnit.NANOSECOND:
	                    return enum_1.Type.TimeNanosecond;
	            }
	            return enum_1.Type.Time;
	        case enum_1.Type.Timestamp:
	            switch (type.unit) {
	                case enum_1.TimeUnit.SECOND:
	                    return enum_1.Type.TimestampSecond;
	                case enum_1.TimeUnit.MILLISECOND:
	                    return enum_1.Type.TimestampMillisecond;
	                case enum_1.TimeUnit.MICROSECOND:
	                    return enum_1.Type.TimestampMicrosecond;
	                case enum_1.TimeUnit.NANOSECOND:
	                    return enum_1.Type.TimestampNanosecond;
	            }
	            return enum_1.Type.Timestamp;
	        case enum_1.Type.Date:
	            switch (type.unit) {
	                case enum_1.DateUnit.DAY:
	                    return enum_1.Type.DateDay;
	                case enum_1.DateUnit.MILLISECOND:
	                    return enum_1.Type.DateMillisecond;
	            }
	            return enum_1.Type.Date;
	        case enum_1.Type.Interval:
	            switch (type.unit) {
	                case enum_1.IntervalUnit.DAY_TIME:
	                    return enum_1.Type.IntervalDayTime;
	                case enum_1.IntervalUnit.YEAR_MONTH:
	                    return enum_1.Type.IntervalYearMonth;
	            }
	            return enum_1.Type.Interval;
	        case enum_1.Type.Map:
	            return enum_1.Type.Map;
	        case enum_1.Type.List:
	            return enum_1.Type.List;
	        case enum_1.Type.Struct:
	            return enum_1.Type.Struct;
	        case enum_1.Type.Union:
	            switch (type.mode) {
	                case enum_1.UnionMode.Dense:
	                    return enum_1.Type.DenseUnion;
	                case enum_1.UnionMode.Sparse:
	                    return enum_1.Type.SparseUnion;
	            }
	            return enum_1.Type.Union;
	        case enum_1.Type.FixedSizeBinary:
	            return enum_1.Type.FixedSizeBinary;
	        case enum_1.Type.FixedSizeList:
	            return enum_1.Type.FixedSizeList;
	        case enum_1.Type.Dictionary:
	            return enum_1.Type.Dictionary;
	    }
	    throw new Error("Unrecognized type '" + enum_1.Type[type.typeId] + "'");
	}
	// Add these here so they're picked up by the externs creator
	// in the build, and closure-compiler doesn't minify them away
	Visitor.prototype.visitInt8 = null;
	Visitor.prototype.visitInt16 = null;
	Visitor.prototype.visitInt32 = null;
	Visitor.prototype.visitInt64 = null;
	Visitor.prototype.visitUint8 = null;
	Visitor.prototype.visitUint16 = null;
	Visitor.prototype.visitUint32 = null;
	Visitor.prototype.visitUint64 = null;
	Visitor.prototype.visitFloat16 = null;
	Visitor.prototype.visitFloat32 = null;
	Visitor.prototype.visitFloat64 = null;
	Visitor.prototype.visitDateDay = null;
	Visitor.prototype.visitDateMillisecond = null;
	Visitor.prototype.visitTimestampSecond = null;
	Visitor.prototype.visitTimestampMillisecond = null;
	Visitor.prototype.visitTimestampMicrosecond = null;
	Visitor.prototype.visitTimestampNanosecond = null;
	Visitor.prototype.visitTimeSecond = null;
	Visitor.prototype.visitTimeMillisecond = null;
	Visitor.prototype.visitTimeMicrosecond = null;
	Visitor.prototype.visitTimeNanosecond = null;
	Visitor.prototype.visitDenseUnion = null;
	Visitor.prototype.visitSparseUnion = null;
	Visitor.prototype.visitIntervalDayTime = null;
	Visitor.prototype.visitIntervalYearMonth = null;

	//# sourceMappingURL=visitor.js.map

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	Object.defineProperty(exports, "__esModule", { value: true });
	var pretty_1 = __webpack_require__(78);
	var compat_1 = __webpack_require__(64);
	/**
	 * Dynamically compile the null values into an `isValid()` function whose
	 * implementation is a switch statement. Microbenchmarks in v8 indicate
	 * this approach is 25% faster than using an ES6 Map.
	 *
	 * @example
	 * console.log(createIsValidFunction([null, 'N/A', NaN]));
	 * `function (x) {
	 *     if (x !== x) return false;
	 *     switch (x) {
	 *         case null:
	 *         case "N/A":
	 *             return false;
	 *     }
	 *     return true;
	 * }`
	 *
	 * @ignore
	 * @param nullValues
	 */
	function createIsValidFunction(nullValues) {
	    if (!nullValues || nullValues.length <= 0) {
	        // @ts-ignore
	        return function isValid(value) {
	            return true;
	        };
	    }
	    var fnBody = '';
	    var noNaNs = nullValues.filter(function (x) {
	        return x === x;
	    });
	    if (noNaNs.length > 0) {
	        fnBody = "\n    switch (x) {" + noNaNs.map(function (x) {
	            return "\n        case " + valueToCase(x) + ":";
	        }).join('') + "\n            return false;\n    }";
	    }
	    // NaN doesn't equal anything including itself, so it doesn't work as a
	    // switch case. Instead we must explicitly check for NaN before the switch.
	    if (nullValues.length !== noNaNs.length) {
	        fnBody = "if (x !== x) return false;\n" + fnBody;
	    }
	    return new Function("x", fnBody + "\nreturn true;");
	}
	exports.createIsValidFunction = createIsValidFunction;
	/** @ignore */
	function valueToCase(x) {
	    if (typeof x !== 'bigint') {
	        return pretty_1.valueToString(x);
	    } else if (compat_1.BigIntAvailable) {
	        return pretty_1.valueToString(x) + "n";
	    }
	    return "\"" + pretty_1.valueToString(x) + "\"";
	}

	//# sourceMappingURL=valid.js.map

/***/ }),
/* 78 */
/***/ (function(module, exports) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", { value: true });
	/** @ignore */var undf = void 0;
	/** @ignore */
	function valueToString(x) {
	    if (x === null) {
	        return 'null';
	    }
	    if (x === undf) {
	        return 'undefined';
	    }
	    switch (typeof x === "undefined" ? "undefined" : _typeof(x)) {
	        case 'number':
	            return "" + x;
	        case 'bigint':
	            return "" + x;
	        case 'string':
	            return "\"" + x + "\"";
	    }
	    // If [Symbol.toPrimitive] is implemented (like in BN)
	    // use it instead of JSON.stringify(). This ensures we
	    // print BigInts, Decimals, and Binary in their native
	    // representation
	    if (typeof x[Symbol.toPrimitive] === 'function') {
	        return x[Symbol.toPrimitive]('string');
	    }
	    return ArrayBuffer.isView(x) ? "[" + x + "]" : JSON.stringify(x);
	}
	exports.valueToString = valueToString;

	//# sourceMappingURL=pretty.js.map

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var buffer_1 = __webpack_require__(60);
	var compat_1 = __webpack_require__(64);
	/** @ignore */
	var roundLengthUpToNearest64Bytes = function roundLengthUpToNearest64Bytes(len, BPE) {
	    return (len * BPE + 63 & ~63 || 64) / BPE;
	};
	/** @ignore */
	var sliceOrExtendArray = function sliceOrExtendArray(arr) {
	    var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    return arr.length >= len ? arr.subarray(0, len) : buffer_1.memcpy(new arr.constructor(len), arr, 0);
	};
	/** @ignore */

	var BufferBuilder = function () {
	    function BufferBuilder(buffer) {
	        var stride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

	        _classCallCheck(this, BufferBuilder);

	        this.buffer = buffer;
	        this.stride = stride;
	        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;
	        this.ArrayType = buffer.constructor;
	        this._resize(this.length = buffer.length / stride | 0);
	    }

	    _createClass(BufferBuilder, [{
	        key: "set",

	        // @ts-ignore
	        value: function set(index, value) {
	            return this;
	        }
	    }, {
	        key: "append",
	        value: function append(value) {
	            return this.set(this.length, value);
	        }
	    }, {
	        key: "reserve",
	        value: function reserve(extra) {
	            if (extra > 0) {
	                this.length += extra;
	                var stride = this.stride;
	                var length = this.length * stride;
	                var reserved = this.buffer.length;
	                if (length >= reserved) {
	                    this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));
	                }
	            }
	            return this;
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;

	            length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);
	            var array = sliceOrExtendArray(this.buffer, length);
	            this.clear();
	            return array;
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this.length = 0;
	            this._resize(0);
	            return this;
	        }
	    }, {
	        key: "_resize",
	        value: function _resize(newLength) {
	            return this.buffer = buffer_1.memcpy(new this.ArrayType(newLength), this.buffer);
	        }
	    }, {
	        key: "byteLength",
	        get: function get() {
	            return this.length * this.stride * this.BYTES_PER_ELEMENT | 0;
	        }
	    }, {
	        key: "reservedLength",
	        get: function get() {
	            return this.buffer.length / this.stride;
	        }
	    }, {
	        key: "reservedByteLength",
	        get: function get() {
	            return this.buffer.byteLength;
	        }
	    }]);

	    return BufferBuilder;
	}();

	exports.BufferBuilder = BufferBuilder;
	BufferBuilder.prototype.offset = 0;
	/** @ignore */

	var DataBufferBuilder = function (_BufferBuilder) {
	    _inherits(DataBufferBuilder, _BufferBuilder);

	    function DataBufferBuilder() {
	        _classCallCheck(this, DataBufferBuilder);

	        return _possibleConstructorReturn(this, (DataBufferBuilder.__proto__ || Object.getPrototypeOf(DataBufferBuilder)).apply(this, arguments));
	    }

	    _createClass(DataBufferBuilder, [{
	        key: "last",
	        value: function last() {
	            return this.get(this.length - 1);
	        }
	    }, {
	        key: "get",
	        value: function get(index) {
	            return this.buffer[index];
	        }
	    }, {
	        key: "set",
	        value: function set(index, value) {
	            this.reserve(index - this.length + 1);
	            this.buffer[index * this.stride] = value;
	            return this;
	        }
	    }]);

	    return DataBufferBuilder;
	}(BufferBuilder);

	exports.DataBufferBuilder = DataBufferBuilder;
	/** @ignore */

	var BitmapBufferBuilder = function (_DataBufferBuilder) {
	    _inherits(BitmapBufferBuilder, _DataBufferBuilder);

	    function BitmapBufferBuilder() {
	        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array(0);

	        _classCallCheck(this, BitmapBufferBuilder);

	        var _this2 = _possibleConstructorReturn(this, (BitmapBufferBuilder.__proto__ || Object.getPrototypeOf(BitmapBufferBuilder)).call(this, data, 1 / 8));

	        _this2.numValid = 0;
	        return _this2;
	    }

	    _createClass(BitmapBufferBuilder, [{
	        key: "get",
	        value: function get(idx) {
	            return this.buffer[idx >> 3] >> idx % 8 & 1;
	        }
	    }, {
	        key: "set",
	        value: function set(idx, val) {
	            var _reserve = this.reserve(idx - this.length + 1),
	                buffer = _reserve.buffer;

	            var byte = idx >> 3,
	                bit = idx % 8,
	                cur = buffer[byte] >> bit & 1;
	            // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.
	            // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.
	            val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);
	            return this;
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this.numValid = 0;
	            return _get(BitmapBufferBuilder.prototype.__proto__ || Object.getPrototypeOf(BitmapBufferBuilder.prototype), "clear", this).call(this);
	        }
	    }, {
	        key: "numInvalid",
	        get: function get() {
	            return this.length - this.numValid;
	        }
	    }]);

	    return BitmapBufferBuilder;
	}(DataBufferBuilder);

	exports.BitmapBufferBuilder = BitmapBufferBuilder;
	/** @ignore */

	var OffsetsBufferBuilder = function (_DataBufferBuilder2) {
	    _inherits(OffsetsBufferBuilder, _DataBufferBuilder2);

	    function OffsetsBufferBuilder() {
	        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Int32Array(1);

	        _classCallCheck(this, OffsetsBufferBuilder);

	        return _possibleConstructorReturn(this, (OffsetsBufferBuilder.__proto__ || Object.getPrototypeOf(OffsetsBufferBuilder)).call(this, data, 1));
	    }

	    _createClass(OffsetsBufferBuilder, [{
	        key: "append",
	        value: function append(value) {
	            return this.set(this.length - 1, value);
	        }
	    }, {
	        key: "set",
	        value: function set(index, value) {
	            var offset = this.length - 1;
	            var buffer = this.reserve(index - offset + 1).buffer;
	            if (offset < index++) {
	                buffer.fill(buffer[offset], offset, index);
	            }
	            buffer[index] = buffer[index - 1] + value;
	            return this;
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length - 1;

	            if (length > this.length) {
	                this.set(length - 1, 0);
	            }
	            return _get(OffsetsBufferBuilder.prototype.__proto__ || Object.getPrototypeOf(OffsetsBufferBuilder.prototype), "flush", this).call(this, length + 1);
	        }
	    }]);

	    return OffsetsBufferBuilder;
	}(DataBufferBuilder);

	exports.OffsetsBufferBuilder = OffsetsBufferBuilder;
	/** @ignore */

	var WideBufferBuilder = function (_BufferBuilder2) {
	    _inherits(WideBufferBuilder, _BufferBuilder2);

	    function WideBufferBuilder() {
	        _classCallCheck(this, WideBufferBuilder);

	        return _possibleConstructorReturn(this, (WideBufferBuilder.__proto__ || Object.getPrototypeOf(WideBufferBuilder)).apply(this, arguments));
	    }

	    _createClass(WideBufferBuilder, [{
	        key: "set",
	        value: function set(index, value) {
	            this.reserve(index - this.length + 1);
	            switch (typeof value === "undefined" ? "undefined" : _typeof(value)) {
	                case 'bigint':
	                    this.buffer64[index] = value;
	                    break;
	                case 'number':
	                    this.buffer[index * this.stride] = value;
	                    break;
	                default:
	                    this.buffer.set(value, index * this.stride);
	            }
	            return this;
	        }
	    }, {
	        key: "_resize",
	        value: function _resize(newLength) {
	            var data = _get(WideBufferBuilder.prototype.__proto__ || Object.getPrototypeOf(WideBufferBuilder.prototype), "_resize", this).call(this, newLength);
	            var length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);
	            if (compat_1.BigIntAvailable) {
	                this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);
	            }
	            return data;
	        }
	    }, {
	        key: "ArrayType64",
	        get: function get() {
	            return this._ArrayType64 || (this._ArrayType64 = this.buffer instanceof Int32Array ? compat_1.BigInt64Array : compat_1.BigUint64Array);
	        }
	    }]);

	    return WideBufferBuilder;
	}(BufferBuilder);

	exports.WideBufferBuilder = WideBufferBuilder;

	//# sourceMappingURL=buffer.js.map

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var buffer_1 = __webpack_require__(79);
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var BoolBuilder = function (_builder_1$Builder) {
	    _inherits(BoolBuilder, _builder_1$Builder);

	    function BoolBuilder(options) {
	        _classCallCheck(this, BoolBuilder);

	        var _this = _possibleConstructorReturn(this, (BoolBuilder.__proto__ || Object.getPrototypeOf(BoolBuilder)).call(this, options));

	        _this._values = new buffer_1.BitmapBufferBuilder();
	        return _this;
	    }

	    _createClass(BoolBuilder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            this._values.set(index, +value);
	        }
	    }]);

	    return BoolBuilder;
	}(builder_1.Builder);

	exports.BoolBuilder = BoolBuilder;

	//# sourceMappingURL=bool.js.map

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var NullBuilder = function (_builder_1$Builder) {
	    _inherits(NullBuilder, _builder_1$Builder);

	    function NullBuilder() {
	        _classCallCheck(this, NullBuilder);

	        return _possibleConstructorReturn(this, (NullBuilder.__proto__ || Object.getPrototypeOf(NullBuilder)).apply(this, arguments));
	    }

	    _createClass(NullBuilder, [{
	        key: "setValue",

	        // @ts-ignore
	        value: function setValue(index, value) {}
	    }, {
	        key: "setValid",
	        value: function setValid(index, valid) {
	            this.length = Math.max(index + 1, this.length);
	            return valid;
	        }
	    }]);

	    return NullBuilder;
	}(builder_1.Builder);

	exports.NullBuilder = NullBuilder;

	//# sourceMappingURL=null.js.map

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var DateBuilder = function (_builder_1$FixedWidth) {
	  _inherits(DateBuilder, _builder_1$FixedWidth);

	  function DateBuilder() {
	    _classCallCheck(this, DateBuilder);

	    return _possibleConstructorReturn(this, (DateBuilder.__proto__ || Object.getPrototypeOf(DateBuilder)).apply(this, arguments));
	  }

	  return DateBuilder;
	}(builder_1.FixedWidthBuilder);

	exports.DateBuilder = DateBuilder;
	/** @ignore */

	var DateDayBuilder = function (_DateBuilder) {
	  _inherits(DateDayBuilder, _DateBuilder);

	  function DateDayBuilder() {
	    _classCallCheck(this, DateDayBuilder);

	    return _possibleConstructorReturn(this, (DateDayBuilder.__proto__ || Object.getPrototypeOf(DateDayBuilder)).apply(this, arguments));
	  }

	  return DateDayBuilder;
	}(DateBuilder);

	exports.DateDayBuilder = DateDayBuilder;
	/** @ignore */

	var DateMillisecondBuilder = function (_DateBuilder2) {
	  _inherits(DateMillisecondBuilder, _DateBuilder2);

	  function DateMillisecondBuilder() {
	    _classCallCheck(this, DateMillisecondBuilder);

	    return _possibleConstructorReturn(this, (DateMillisecondBuilder.__proto__ || Object.getPrototypeOf(DateMillisecondBuilder)).apply(this, arguments));
	  }

	  return DateMillisecondBuilder;
	}(DateBuilder);

	exports.DateMillisecondBuilder = DateMillisecondBuilder;

	//# sourceMappingURL=date.js.map

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var DecimalBuilder = function (_builder_1$FixedWidth) {
	  _inherits(DecimalBuilder, _builder_1$FixedWidth);

	  function DecimalBuilder() {
	    _classCallCheck(this, DecimalBuilder);

	    return _possibleConstructorReturn(this, (DecimalBuilder.__proto__ || Object.getPrototypeOf(DecimalBuilder)).apply(this, arguments));
	  }

	  return DecimalBuilder;
	}(builder_1.FixedWidthBuilder);

	exports.DecimalBuilder = DecimalBuilder;

	//# sourceMappingURL=decimal.js.map

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var type_1 = __webpack_require__(74);
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var DictionaryBuilder = function (_builder_1$Builder) {
	    _inherits(DictionaryBuilder, _builder_1$Builder);

	    function DictionaryBuilder(_ref) {
	        var type = _ref['type'],
	            nulls = _ref['nullValues'],
	            hashFn = _ref['dictionaryHashFunction'];

	        _classCallCheck(this, DictionaryBuilder);

	        var _this = _possibleConstructorReturn(this, (DictionaryBuilder.__proto__ || Object.getPrototypeOf(DictionaryBuilder)).call(this, { type: new type_1.Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) }));

	        _this._nulls = null;
	        _this._dictionaryOffset = 0;
	        _this._keysToIndices = Object.create(null);
	        _this.indices = builder_1.Builder.new({ 'type': _this.type.indices, 'nullValues': nulls });
	        _this.dictionary = builder_1.Builder.new({ 'type': _this.type.dictionary, 'nullValues': null });
	        if (typeof hashFn === 'function') {
	            _this.valueToKey = hashFn;
	        }
	        return _this;
	    }

	    _createClass(DictionaryBuilder, [{
	        key: "isValid",
	        value: function isValid(value) {
	            return this.indices.isValid(value);
	        }
	    }, {
	        key: "setValid",
	        value: function setValid(index, valid) {
	            var indices = this.indices;
	            valid = indices.setValid(index, valid);
	            this.length = indices.length;
	            return valid;
	        }
	    }, {
	        key: "setValue",
	        value: function setValue(index, value) {
	            var keysToIndices = this._keysToIndices;
	            var key = this.valueToKey(value);
	            var idx = keysToIndices[key];
	            if (idx === undefined) {
	                keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;
	            }
	            return this.indices.setValue(index, idx);
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            var type = this.type;
	            var prev = this._dictionary;
	            var curr = this.dictionary.toVector();
	            var data = this.indices.flush().clone(type);
	            data.dictionary = prev ? prev.concat(curr) : curr;
	            this.finished || (this._dictionaryOffset += curr.length);
	            this._dictionary = data.dictionary;
	            this.clear();
	            return data;
	        }
	    }, {
	        key: "finish",
	        value: function finish() {
	            this.indices.finish();
	            this.dictionary.finish();
	            this._dictionaryOffset = 0;
	            this._keysToIndices = Object.create(null);
	            return _get(DictionaryBuilder.prototype.__proto__ || Object.getPrototypeOf(DictionaryBuilder.prototype), "finish", this).call(this);
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this.indices.clear();
	            this.dictionary.clear();
	            return _get(DictionaryBuilder.prototype.__proto__ || Object.getPrototypeOf(DictionaryBuilder.prototype), "clear", this).call(this);
	        }
	    }, {
	        key: "valueToKey",
	        value: function valueToKey(val) {
	            return typeof val === 'string' ? val : "" + val;
	        }
	    }, {
	        key: "values",
	        get: function get() {
	            return this.indices.values;
	        }
	    }, {
	        key: "nullCount",
	        get: function get() {
	            return this.indices.nullCount;
	        }
	    }, {
	        key: "nullBitmap",
	        get: function get() {
	            return this.indices.nullBitmap;
	        }
	    }, {
	        key: "byteLength",
	        get: function get() {
	            return this.indices.byteLength + this.dictionary.byteLength;
	        }
	    }, {
	        key: "reservedLength",
	        get: function get() {
	            return this.indices.reservedLength + this.dictionary.reservedLength;
	        }
	    }, {
	        key: "reservedByteLength",
	        get: function get() {
	            return this.indices.reservedByteLength + this.dictionary.reservedByteLength;
	        }
	    }]);

	    return DictionaryBuilder;
	}(builder_1.Builder);

	exports.DictionaryBuilder = DictionaryBuilder;

	//# sourceMappingURL=dictionary.js.map

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var FixedSizeBinaryBuilder = function (_builder_1$FixedWidth) {
	  _inherits(FixedSizeBinaryBuilder, _builder_1$FixedWidth);

	  function FixedSizeBinaryBuilder() {
	    _classCallCheck(this, FixedSizeBinaryBuilder);

	    return _possibleConstructorReturn(this, (FixedSizeBinaryBuilder.__proto__ || Object.getPrototypeOf(FixedSizeBinaryBuilder)).apply(this, arguments));
	  }

	  return FixedSizeBinaryBuilder;
	}(builder_1.FixedWidthBuilder);

	exports.FixedSizeBinaryBuilder = FixedSizeBinaryBuilder;

	//# sourceMappingURL=fixedsizebinary.js.map

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var math_1 = __webpack_require__(87);
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var FloatBuilder = function (_builder_1$FixedWidth) {
	    _inherits(FloatBuilder, _builder_1$FixedWidth);

	    function FloatBuilder() {
	        _classCallCheck(this, FloatBuilder);

	        return _possibleConstructorReturn(this, (FloatBuilder.__proto__ || Object.getPrototypeOf(FloatBuilder)).apply(this, arguments));
	    }

	    return FloatBuilder;
	}(builder_1.FixedWidthBuilder);

	exports.FloatBuilder = FloatBuilder;
	/** @ignore */

	var Float16Builder = function (_FloatBuilder) {
	    _inherits(Float16Builder, _FloatBuilder);

	    function Float16Builder() {
	        _classCallCheck(this, Float16Builder);

	        return _possibleConstructorReturn(this, (Float16Builder.__proto__ || Object.getPrototypeOf(Float16Builder)).apply(this, arguments));
	    }

	    _createClass(Float16Builder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            // convert JS float64 to a uint16
	            this._values.set(index, math_1.float64ToUint16(value));
	        }
	    }]);

	    return Float16Builder;
	}(FloatBuilder);

	exports.Float16Builder = Float16Builder;
	/** @ignore */

	var Float32Builder = function (_FloatBuilder2) {
	    _inherits(Float32Builder, _FloatBuilder2);

	    function Float32Builder() {
	        _classCallCheck(this, Float32Builder);

	        return _possibleConstructorReturn(this, (Float32Builder.__proto__ || Object.getPrototypeOf(Float32Builder)).apply(this, arguments));
	    }

	    _createClass(Float32Builder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            this._values.set(index, value);
	        }
	    }]);

	    return Float32Builder;
	}(FloatBuilder);

	exports.Float32Builder = Float32Builder;
	/** @ignore */

	var Float64Builder = function (_FloatBuilder3) {
	    _inherits(Float64Builder, _FloatBuilder3);

	    function Float64Builder() {
	        _classCallCheck(this, Float64Builder);

	        return _possibleConstructorReturn(this, (Float64Builder.__proto__ || Object.getPrototypeOf(Float64Builder)).apply(this, arguments));
	    }

	    _createClass(Float64Builder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            this._values.set(index, value);
	        }
	    }]);

	    return Float64Builder;
	}(FloatBuilder);

	exports.Float64Builder = Float64Builder;

	//# sourceMappingURL=float.js.map

/***/ }),
/* 87 */
/***/ (function(module, exports) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	Object.defineProperty(exports, "__esModule", { value: true });
	var f64 = new Float64Array(1);
	var u32 = new Uint32Array(f64.buffer);
	/**
	 * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:
	 * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29
	 * @param h {number} the uint16 to convert
	 * @private
	 * @ignore
	 */
	function uint16ToFloat64(h) {
	    var expo = (h & 0x7C00) >> 10;
	    var sigf = (h & 0x03FF) / 1024;
	    var sign = Math.pow(-1, (h & 0x8000) >> 15);
	    switch (expo) {
	        case 0x1F:
	            return sign * (sigf ? NaN : 1 / 0);
	        case 0x00:
	            return sign * (sigf ? 6.103515625e-5 * sigf : 0);
	    }
	    return sign * Math.pow(2, expo - 15) * (1 + sigf);
	}
	exports.uint16ToFloat64 = uint16ToFloat64;
	/**
	 * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:
	 * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43
	 * @param d {number} The float64 to convert
	 * @private
	 * @ignore
	 */
	function float64ToUint16(d) {
	    if (d !== d) {
	        return 0x7E00;
	    } // NaN
	    f64[0] = d;
	    // Magic numbers:
	    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit
	    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits
	    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit
	    var sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;
	    var expo = u32[1] & 0x7ff00000,
	        sigf = 0x0000;
	    if (expo >= 0x40f00000) {
	        //
	        // If exponent overflowed, the float16 is either NaN or Infinity.
	        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity
	        //
	        // Magic numbers:
	        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow
	        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits
	        //
	        // returns:
	        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary
	        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary
	        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary
	        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary
	        //
	        // If mantissa is greater than 23 bits, set to +Infinity like numpy
	        if (u32[0] > 0) {
	            expo = 0x7C00;
	        } else {
	            expo = (expo & 0x7C000000) >> 16;
	            sigf = (u32[1] & 0x000fffff) >> 10;
	        }
	    } else if (expo <= 0x3f000000) {
	        //
	        // If exponent underflowed, the float is either signed zero or subnormal.
	        //
	        // Magic numbers:
	        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow
	        //
	        sigf = 0x100000 + (u32[1] & 0x000fffff);
	        sigf = 0x100000 + (sigf << (expo >> 20) - 998) >> 21;
	        expo = 0;
	    } else {
	        //
	        // No overflow or underflow, rebase the exponent and round the mantissa
	        // Magic numbers:
	        // 0x200 = 00000010 00000000 -- masks off the 10th bit
	        //
	        // Ensure the first mantissa bit (the 10th one) is 1 and round
	        expo = expo - 0x3f000000 >> 10;
	        sigf = (u32[1] & 0x000fffff) + 0x200 >> 10;
	    }
	    return sign | expo | sigf & 0xFFFF;
	}
	exports.float64ToUint16 = float64ToUint16;

	//# sourceMappingURL=math.js.map

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var bn_1 = __webpack_require__(89);
	var buffer_1 = __webpack_require__(79);
	var compat_1 = __webpack_require__(64);
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var IntBuilder = function (_builder_1$FixedWidth) {
	    _inherits(IntBuilder, _builder_1$FixedWidth);

	    function IntBuilder() {
	        _classCallCheck(this, IntBuilder);

	        return _possibleConstructorReturn(this, (IntBuilder.__proto__ || Object.getPrototypeOf(IntBuilder)).apply(this, arguments));
	    }

	    _createClass(IntBuilder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            this._values.set(index, value);
	        }
	    }]);

	    return IntBuilder;
	}(builder_1.FixedWidthBuilder);

	exports.IntBuilder = IntBuilder;
	/** @ignore */

	var Int8Builder = function (_IntBuilder) {
	    _inherits(Int8Builder, _IntBuilder);

	    function Int8Builder() {
	        _classCallCheck(this, Int8Builder);

	        return _possibleConstructorReturn(this, (Int8Builder.__proto__ || Object.getPrototypeOf(Int8Builder)).apply(this, arguments));
	    }

	    return Int8Builder;
	}(IntBuilder);

	exports.Int8Builder = Int8Builder;
	/** @ignore */

	var Int16Builder = function (_IntBuilder2) {
	    _inherits(Int16Builder, _IntBuilder2);

	    function Int16Builder() {
	        _classCallCheck(this, Int16Builder);

	        return _possibleConstructorReturn(this, (Int16Builder.__proto__ || Object.getPrototypeOf(Int16Builder)).apply(this, arguments));
	    }

	    return Int16Builder;
	}(IntBuilder);

	exports.Int16Builder = Int16Builder;
	/** @ignore */

	var Int32Builder = function (_IntBuilder3) {
	    _inherits(Int32Builder, _IntBuilder3);

	    function Int32Builder() {
	        _classCallCheck(this, Int32Builder);

	        return _possibleConstructorReturn(this, (Int32Builder.__proto__ || Object.getPrototypeOf(Int32Builder)).apply(this, arguments));
	    }

	    return Int32Builder;
	}(IntBuilder);

	exports.Int32Builder = Int32Builder;
	/** @ignore */

	var Int64Builder = function (_IntBuilder4) {
	    _inherits(Int64Builder, _IntBuilder4);

	    function Int64Builder(options) {
	        _classCallCheck(this, Int64Builder);

	        if (options['nullValues']) {
	            options['nullValues'] = options['nullValues'].map(toBigInt);
	        }

	        var _this5 = _possibleConstructorReturn(this, (Int64Builder.__proto__ || Object.getPrototypeOf(Int64Builder)).call(this, options));

	        _this5._values = new buffer_1.WideBufferBuilder(new Int32Array(0), 2);
	        return _this5;
	    }

	    _createClass(Int64Builder, [{
	        key: "isValid",
	        value: function isValid(value) {
	            return _get(Int64Builder.prototype.__proto__ || Object.getPrototypeOf(Int64Builder.prototype), "isValid", this).call(this, toBigInt(value));
	        }
	    }, {
	        key: "values64",
	        get: function get() {
	            return this._values.buffer64;
	        }
	    }]);

	    return Int64Builder;
	}(IntBuilder);

	exports.Int64Builder = Int64Builder;
	/** @ignore */

	var Uint8Builder = function (_IntBuilder5) {
	    _inherits(Uint8Builder, _IntBuilder5);

	    function Uint8Builder() {
	        _classCallCheck(this, Uint8Builder);

	        return _possibleConstructorReturn(this, (Uint8Builder.__proto__ || Object.getPrototypeOf(Uint8Builder)).apply(this, arguments));
	    }

	    return Uint8Builder;
	}(IntBuilder);

	exports.Uint8Builder = Uint8Builder;
	/** @ignore */

	var Uint16Builder = function (_IntBuilder6) {
	    _inherits(Uint16Builder, _IntBuilder6);

	    function Uint16Builder() {
	        _classCallCheck(this, Uint16Builder);

	        return _possibleConstructorReturn(this, (Uint16Builder.__proto__ || Object.getPrototypeOf(Uint16Builder)).apply(this, arguments));
	    }

	    return Uint16Builder;
	}(IntBuilder);

	exports.Uint16Builder = Uint16Builder;
	/** @ignore */

	var Uint32Builder = function (_IntBuilder7) {
	    _inherits(Uint32Builder, _IntBuilder7);

	    function Uint32Builder() {
	        _classCallCheck(this, Uint32Builder);

	        return _possibleConstructorReturn(this, (Uint32Builder.__proto__ || Object.getPrototypeOf(Uint32Builder)).apply(this, arguments));
	    }

	    return Uint32Builder;
	}(IntBuilder);

	exports.Uint32Builder = Uint32Builder;
	/** @ignore */

	var Uint64Builder = function (_IntBuilder8) {
	    _inherits(Uint64Builder, _IntBuilder8);

	    function Uint64Builder(options) {
	        _classCallCheck(this, Uint64Builder);

	        if (options['nullValues']) {
	            options['nullValues'] = options['nullValues'].map(toBigInt);
	        }

	        var _this9 = _possibleConstructorReturn(this, (Uint64Builder.__proto__ || Object.getPrototypeOf(Uint64Builder)).call(this, options));

	        _this9._values = new buffer_1.WideBufferBuilder(new Uint32Array(0), 2);
	        return _this9;
	    }

	    _createClass(Uint64Builder, [{
	        key: "isValid",
	        value: function isValid(value) {
	            return _get(Uint64Builder.prototype.__proto__ || Object.getPrototypeOf(Uint64Builder.prototype), "isValid", this).call(this, toBigInt(value));
	        }
	    }, {
	        key: "values64",
	        get: function get() {
	            return this._values.buffer64;
	        }
	    }]);

	    return Uint64Builder;
	}(IntBuilder);

	exports.Uint64Builder = Uint64Builder;
	var toBigInt = function (memo) {
	    return function (value) {
	        if (ArrayBuffer.isView(value)) {
	            memo.buffer = value.buffer;
	            memo.byteOffset = value.byteOffset;
	            memo.byteLength = value.byteLength;
	            value = bn_1.bignumToBigInt(memo);
	            memo.buffer = null;
	        }
	        return value;
	    };
	}({ 'BigIntArray': compat_1.BigInt64Array });

	//# sourceMappingURL=int.js.map

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var buffer_1 = __webpack_require__(60);
	var compat_1 = __webpack_require__(64);
	/** @ignore */
	exports.isArrowBigNumSymbol = Symbol.for('isArrowBigNum');
	/** @ignore */
	function BigNum(x) {
	    for (var _len = arguments.length, xs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        xs[_key - 1] = arguments[_key];
	    }

	    if (xs.length === 0) {
	        return Object.setPrototypeOf(buffer_1.toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);
	    }
	    return Object.setPrototypeOf(new (Function.prototype.bind.apply(this['TypedArray'], [null].concat([x], xs)))(), this.constructor.prototype);
	}
	BigNum.prototype[exports.isArrowBigNumSymbol] = true;
	BigNum.prototype.toJSON = function () {
	    return "\"" + exports.bignumToString(this) + "\"";
	};
	BigNum.prototype.valueOf = function () {
	    return bignumToNumber(this);
	};
	BigNum.prototype.toString = function () {
	    return exports.bignumToString(this);
	};
	BigNum.prototype[Symbol.toPrimitive] = function () {
	    var hint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

	    switch (hint) {
	        case 'number':
	            return bignumToNumber(this);
	        case 'string':
	            return exports.bignumToString(this);
	        case 'default':
	            return exports.bignumToBigInt(this);
	    }
	    return exports.bignumToString(this);
	};
	/** @ignore */
	function SignedBigNum() {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	    }

	    return BigNum.apply(this, args);
	}
	/** @ignore */
	function UnsignedBigNum() {
	    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	    }

	    return BigNum.apply(this, args);
	}
	/** @ignore */
	function DecimalBigNum() {
	    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	    }

	    return BigNum.apply(this, args);
	}
	Object.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));
	Object.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));
	Object.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));
	Object.assign(SignedBigNum.prototype, BigNum.prototype, { 'constructor': SignedBigNum, 'signed': true, 'TypedArray': Int32Array, 'BigIntArray': compat_1.BigInt64Array });
	Object.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': compat_1.BigUint64Array });
	Object.assign(DecimalBigNum.prototype, BigNum.prototype, { 'constructor': DecimalBigNum, 'signed': true, 'TypedArray': Uint32Array, 'BigIntArray': compat_1.BigUint64Array });
	/** @ignore */
	function bignumToNumber(bn) {
	    var buffer = bn.buffer,
	        byteOffset = bn.byteOffset,
	        length = bn.length,
	        signed = bn['signed'];

	    var words = new Int32Array(buffer, byteOffset, length);
	    var number = 0,
	        i = 0,
	        n = words.length,
	        hi = void 0,
	        lo = void 0;
	    while (i < n) {
	        lo = words[i++];
	        hi = words[i++];
	        signed || (hi = hi >>> 0);
	        number += (lo >>> 0) + hi * Math.pow(i, 32);
	    }
	    return number;
	}
	if (!compat_1.BigIntAvailable) {
	    exports.bignumToString = decimalToString;
	    exports.bignumToBigInt = exports.bignumToString;
	} else {
	    exports.bignumToBigInt = function (a) {
	        return a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a);
	    };
	    exports.bignumToString = function (a) {
	        return a.byteLength === 8 ? "" + new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a);
	    };
	}
	/** @ignore */
	function decimalToString(a) {
	    var digits = '';
	    var base64 = new Uint32Array(2);
	    var base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);
	    var checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);
	    var i = -1,
	        n = base32.length - 1;
	    do {
	        for (base64[0] = base32[i = 0]; i < n;) {
	            base32[i++] = base64[1] = base64[0] / 10;
	            base64[0] = (base64[0] - base64[1] * 10 << 16) + base32[i];
	        }
	        base32[i] = base64[1] = base64[0] / 10;
	        base64[0] = base64[0] - base64[1] * 10;
	        digits = "" + base64[0] + digits;
	    } while (checks[0] || checks[1] || checks[2] || checks[3]);
	    return digits ? digits : "0";
	}
	/** @ignore */

	var BN = function () {
	    function BN(num, isSigned) {
	        _classCallCheck(this, BN);

	        return BN.new(num, isSigned);
	    }
	    /** @nocollapse */


	    _createClass(BN, null, [{
	        key: "new",
	        value: function _new(num, isSigned) {
	            switch (isSigned) {
	                case true:
	                    return new SignedBigNum(num);
	                case false:
	                    return new UnsignedBigNum(num);
	            }
	            switch (num.constructor) {
	                case Int8Array:
	                case Int16Array:
	                case Int32Array:
	                case compat_1.BigInt64Array:
	                    return new SignedBigNum(num);
	            }
	            if (num.byteLength === 16) {
	                return new DecimalBigNum(num);
	            }
	            return new UnsignedBigNum(num);
	        }
	        /** @nocollapse */

	    }, {
	        key: "signed",
	        value: function signed(num) {
	            return new SignedBigNum(num);
	        }
	        /** @nocollapse */

	    }, {
	        key: "unsigned",
	        value: function unsigned(num) {
	            return new UnsignedBigNum(num);
	        }
	        /** @nocollapse */

	    }, {
	        key: "decimal",
	        value: function decimal(num) {
	            return new DecimalBigNum(num);
	        }
	    }]);

	    return BN;
	}();

	exports.BN = BN;

	//# sourceMappingURL=bn.js.map

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var TimeBuilder = function (_builder_1$FixedWidth) {
	  _inherits(TimeBuilder, _builder_1$FixedWidth);

	  function TimeBuilder() {
	    _classCallCheck(this, TimeBuilder);

	    return _possibleConstructorReturn(this, (TimeBuilder.__proto__ || Object.getPrototypeOf(TimeBuilder)).apply(this, arguments));
	  }

	  return TimeBuilder;
	}(builder_1.FixedWidthBuilder);

	exports.TimeBuilder = TimeBuilder;
	/** @ignore */

	var TimeSecondBuilder = function (_TimeBuilder) {
	  _inherits(TimeSecondBuilder, _TimeBuilder);

	  function TimeSecondBuilder() {
	    _classCallCheck(this, TimeSecondBuilder);

	    return _possibleConstructorReturn(this, (TimeSecondBuilder.__proto__ || Object.getPrototypeOf(TimeSecondBuilder)).apply(this, arguments));
	  }

	  return TimeSecondBuilder;
	}(TimeBuilder);

	exports.TimeSecondBuilder = TimeSecondBuilder;
	/** @ignore */

	var TimeMillisecondBuilder = function (_TimeBuilder2) {
	  _inherits(TimeMillisecondBuilder, _TimeBuilder2);

	  function TimeMillisecondBuilder() {
	    _classCallCheck(this, TimeMillisecondBuilder);

	    return _possibleConstructorReturn(this, (TimeMillisecondBuilder.__proto__ || Object.getPrototypeOf(TimeMillisecondBuilder)).apply(this, arguments));
	  }

	  return TimeMillisecondBuilder;
	}(TimeBuilder);

	exports.TimeMillisecondBuilder = TimeMillisecondBuilder;
	/** @ignore */

	var TimeMicrosecondBuilder = function (_TimeBuilder3) {
	  _inherits(TimeMicrosecondBuilder, _TimeBuilder3);

	  function TimeMicrosecondBuilder() {
	    _classCallCheck(this, TimeMicrosecondBuilder);

	    return _possibleConstructorReturn(this, (TimeMicrosecondBuilder.__proto__ || Object.getPrototypeOf(TimeMicrosecondBuilder)).apply(this, arguments));
	  }

	  return TimeMicrosecondBuilder;
	}(TimeBuilder);

	exports.TimeMicrosecondBuilder = TimeMicrosecondBuilder;
	/** @ignore */

	var TimeNanosecondBuilder = function (_TimeBuilder4) {
	  _inherits(TimeNanosecondBuilder, _TimeBuilder4);

	  function TimeNanosecondBuilder() {
	    _classCallCheck(this, TimeNanosecondBuilder);

	    return _possibleConstructorReturn(this, (TimeNanosecondBuilder.__proto__ || Object.getPrototypeOf(TimeNanosecondBuilder)).apply(this, arguments));
	  }

	  return TimeNanosecondBuilder;
	}(TimeBuilder);

	exports.TimeNanosecondBuilder = TimeNanosecondBuilder;

	//# sourceMappingURL=time.js.map

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var TimestampBuilder = function (_builder_1$FixedWidth) {
	  _inherits(TimestampBuilder, _builder_1$FixedWidth);

	  function TimestampBuilder() {
	    _classCallCheck(this, TimestampBuilder);

	    return _possibleConstructorReturn(this, (TimestampBuilder.__proto__ || Object.getPrototypeOf(TimestampBuilder)).apply(this, arguments));
	  }

	  return TimestampBuilder;
	}(builder_1.FixedWidthBuilder);

	exports.TimestampBuilder = TimestampBuilder;
	/** @ignore */

	var TimestampSecondBuilder = function (_TimestampBuilder) {
	  _inherits(TimestampSecondBuilder, _TimestampBuilder);

	  function TimestampSecondBuilder() {
	    _classCallCheck(this, TimestampSecondBuilder);

	    return _possibleConstructorReturn(this, (TimestampSecondBuilder.__proto__ || Object.getPrototypeOf(TimestampSecondBuilder)).apply(this, arguments));
	  }

	  return TimestampSecondBuilder;
	}(TimestampBuilder);

	exports.TimestampSecondBuilder = TimestampSecondBuilder;
	/** @ignore */

	var TimestampMillisecondBuilder = function (_TimestampBuilder2) {
	  _inherits(TimestampMillisecondBuilder, _TimestampBuilder2);

	  function TimestampMillisecondBuilder() {
	    _classCallCheck(this, TimestampMillisecondBuilder);

	    return _possibleConstructorReturn(this, (TimestampMillisecondBuilder.__proto__ || Object.getPrototypeOf(TimestampMillisecondBuilder)).apply(this, arguments));
	  }

	  return TimestampMillisecondBuilder;
	}(TimestampBuilder);

	exports.TimestampMillisecondBuilder = TimestampMillisecondBuilder;
	/** @ignore */

	var TimestampMicrosecondBuilder = function (_TimestampBuilder3) {
	  _inherits(TimestampMicrosecondBuilder, _TimestampBuilder3);

	  function TimestampMicrosecondBuilder() {
	    _classCallCheck(this, TimestampMicrosecondBuilder);

	    return _possibleConstructorReturn(this, (TimestampMicrosecondBuilder.__proto__ || Object.getPrototypeOf(TimestampMicrosecondBuilder)).apply(this, arguments));
	  }

	  return TimestampMicrosecondBuilder;
	}(TimestampBuilder);

	exports.TimestampMicrosecondBuilder = TimestampMicrosecondBuilder;
	/** @ignore */

	var TimestampNanosecondBuilder = function (_TimestampBuilder4) {
	  _inherits(TimestampNanosecondBuilder, _TimestampBuilder4);

	  function TimestampNanosecondBuilder() {
	    _classCallCheck(this, TimestampNanosecondBuilder);

	    return _possibleConstructorReturn(this, (TimestampNanosecondBuilder.__proto__ || Object.getPrototypeOf(TimestampNanosecondBuilder)).apply(this, arguments));
	  }

	  return TimestampNanosecondBuilder;
	}(TimestampBuilder);

	exports.TimestampNanosecondBuilder = TimestampNanosecondBuilder;

	//# sourceMappingURL=timestamp.js.map

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var IntervalBuilder = function (_builder_1$FixedWidth) {
	  _inherits(IntervalBuilder, _builder_1$FixedWidth);

	  function IntervalBuilder() {
	    _classCallCheck(this, IntervalBuilder);

	    return _possibleConstructorReturn(this, (IntervalBuilder.__proto__ || Object.getPrototypeOf(IntervalBuilder)).apply(this, arguments));
	  }

	  return IntervalBuilder;
	}(builder_1.FixedWidthBuilder);

	exports.IntervalBuilder = IntervalBuilder;
	/** @ignore */

	var IntervalDayTimeBuilder = function (_IntervalBuilder) {
	  _inherits(IntervalDayTimeBuilder, _IntervalBuilder);

	  function IntervalDayTimeBuilder() {
	    _classCallCheck(this, IntervalDayTimeBuilder);

	    return _possibleConstructorReturn(this, (IntervalDayTimeBuilder.__proto__ || Object.getPrototypeOf(IntervalDayTimeBuilder)).apply(this, arguments));
	  }

	  return IntervalDayTimeBuilder;
	}(IntervalBuilder);

	exports.IntervalDayTimeBuilder = IntervalDayTimeBuilder;
	/** @ignore */

	var IntervalYearMonthBuilder = function (_IntervalBuilder2) {
	  _inherits(IntervalYearMonthBuilder, _IntervalBuilder2);

	  function IntervalYearMonthBuilder() {
	    _classCallCheck(this, IntervalYearMonthBuilder);

	    return _possibleConstructorReturn(this, (IntervalYearMonthBuilder.__proto__ || Object.getPrototypeOf(IntervalYearMonthBuilder)).apply(this, arguments));
	  }

	  return IntervalYearMonthBuilder;
	}(IntervalBuilder);

	exports.IntervalYearMonthBuilder = IntervalYearMonthBuilder;

	//# sourceMappingURL=interval.js.map

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var utf8_1 = __webpack_require__(62);
	var binary_1 = __webpack_require__(94);
	var buffer_1 = __webpack_require__(79);
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var Utf8Builder = function (_builder_1$VariableWi) {
	    _inherits(Utf8Builder, _builder_1$VariableWi);

	    function Utf8Builder(opts) {
	        _classCallCheck(this, Utf8Builder);

	        var _this = _possibleConstructorReturn(this, (Utf8Builder.__proto__ || Object.getPrototypeOf(Utf8Builder)).call(this, opts));

	        _this._values = new buffer_1.BufferBuilder(new Uint8Array(0));
	        return _this;
	    }

	    _createClass(Utf8Builder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            return _get(Utf8Builder.prototype.__proto__ || Object.getPrototypeOf(Utf8Builder.prototype), "setValue", this).call(this, index, utf8_1.encodeUtf8(value));
	        }
	        // @ts-ignore

	    }, {
	        key: "_flushPending",
	        value: function _flushPending(pending, pendingLength) {}
	    }, {
	        key: "byteLength",
	        get: function get() {
	            var size = this._pendingLength + this.length * 4;
	            this._offsets && (size += this._offsets.byteLength);
	            this._values && (size += this._values.byteLength);
	            this._nulls && (size += this._nulls.byteLength);
	            return size;
	        }
	    }]);

	    return Utf8Builder;
	}(builder_1.VariableWidthBuilder);

	exports.Utf8Builder = Utf8Builder;
	Utf8Builder.prototype._flushPending = binary_1.BinaryBuilder.prototype._flushPending;

	//# sourceMappingURL=utf8.js.map

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var buffer_1 = __webpack_require__(60);
	var buffer_2 = __webpack_require__(79);
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var BinaryBuilder = function (_builder_1$VariableWi) {
	    _inherits(BinaryBuilder, _builder_1$VariableWi);

	    function BinaryBuilder(opts) {
	        _classCallCheck(this, BinaryBuilder);

	        var _this = _possibleConstructorReturn(this, (BinaryBuilder.__proto__ || Object.getPrototypeOf(BinaryBuilder)).call(this, opts));

	        _this._values = new buffer_2.BufferBuilder(new Uint8Array(0));
	        return _this;
	    }

	    _createClass(BinaryBuilder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            return _get(BinaryBuilder.prototype.__proto__ || Object.getPrototypeOf(BinaryBuilder.prototype), "setValue", this).call(this, index, buffer_1.toUint8Array(value));
	        }
	    }, {
	        key: "_flushPending",
	        value: function _flushPending(pending, pendingLength) {
	            var offsets = this._offsets;
	            var data = this._values.reserve(pendingLength).buffer;
	            var index = 0,
	                length = 0,
	                offset = 0,
	                value = void 0;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = pending[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var _step$value = _slicedToArray(_step.value, 2);

	                    index = _step$value[0];
	                    value = _step$value[1];

	                    if (value === undefined) {
	                        offsets.set(index, 0);
	                    } else {
	                        length = value.length;
	                        data.set(value, offset);
	                        offsets.set(index, length);
	                        offset += length;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: "byteLength",
	        get: function get() {
	            var size = this._pendingLength + this.length * 4;
	            this._offsets && (size += this._offsets.byteLength);
	            this._values && (size += this._values.byteLength);
	            this._nulls && (size += this._nulls.byteLength);
	            return size;
	        }
	    }]);

	    return BinaryBuilder;
	}(builder_1.VariableWidthBuilder);

	exports.BinaryBuilder = BinaryBuilder;

	//# sourceMappingURL=binary.js.map

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var run_1 = __webpack_require__(96);
	var schema_1 = __webpack_require__(97);
	var type_1 = __webpack_require__(74);
	var buffer_1 = __webpack_require__(79);
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var ListBuilder = function (_builder_1$VariableWi) {
	    _inherits(ListBuilder, _builder_1$VariableWi);

	    function ListBuilder(opts) {
	        _classCallCheck(this, ListBuilder);

	        var _this = _possibleConstructorReturn(this, (ListBuilder.__proto__ || Object.getPrototypeOf(ListBuilder)).call(this, opts));

	        _this._run = new run_1.Run();
	        _this._offsets = new buffer_1.OffsetsBufferBuilder();
	        return _this;
	    }

	    _createClass(ListBuilder, [{
	        key: "addChild",
	        value: function addChild(child) {
	            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';

	            if (this.numChildren > 0) {
	                throw new Error('ListBuilder can only have one child.');
	            }
	            this.children[this.numChildren] = child;
	            this.type = new type_1.List(new schema_1.Field(name, child.type, true));
	            return this.numChildren - 1;
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this._run.clear();
	            return _get(ListBuilder.prototype.__proto__ || Object.getPrototypeOf(ListBuilder.prototype), "clear", this).call(this);
	        }
	    }, {
	        key: "_flushPending",
	        value: function _flushPending(pending) {
	            var run = this._run;
	            var offsets = this._offsets;
	            var setValue = this._setValue;
	            var index = 0,
	                value = void 0;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = pending[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var _step$value = _slicedToArray(_step.value, 2);

	                    index = _step$value[0];
	                    value = _step$value[1];

	                    if (value === undefined) {
	                        offsets.set(index, 0);
	                    } else {
	                        offsets.set(index, value.length);
	                        setValue(this, index, run.bind(value));
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }]);

	    return ListBuilder;
	}(builder_1.VariableWidthBuilder);

	exports.ListBuilder = ListBuilder;

	//# sourceMappingURL=list.js.map

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(68);
	/** @ignore */

	var Run = function () {
	    function Run() {
	        _classCallCheck(this, Run);
	    }

	    _createClass(Run, [{
	        key: "get",
	        value: function get(index) {
	            return this._values[index];
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this._values = null;return this;
	        }
	    }, {
	        key: "bind",
	        value: function bind(values) {
	            if (values instanceof vector_1.Vector) {
	                return values;
	            }
	            this._values = values;
	            return this;
	        }
	    }, {
	        key: "length",
	        get: function get() {
	            return this._values.length;
	        }
	    }]);

	    return Run;
	}();

	exports.Run = Run;

	//# sourceMappingURL=run.js.map

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var type_1 = __webpack_require__(74);
	var args_1 = __webpack_require__(98);
	var args_2 = __webpack_require__(98);
	var typecomparator_1 = __webpack_require__(75);

	var Schema = function () {
	    function Schema() {
	        var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	        var metadata = arguments[1];
	        var dictionaries = arguments[2];

	        _classCallCheck(this, Schema);

	        this.fields = fields || [];
	        this.metadata = metadata || new Map();
	        if (!dictionaries) {
	            dictionaries = generateDictionaryMap(fields);
	        }
	        this.dictionaries = dictionaries;
	    }
	    /** @nocollapse */


	    _createClass(Schema, [{
	        key: "toString",
	        value: function toString() {
	            return "Schema<{ " + this.fields.map(function (f, i) {
	                return i + ": " + f;
	            }).join(', ') + " }>";
	        }
	    }, {
	        key: "compareTo",
	        value: function compareTo(other) {
	            return typecomparator_1.instance.compareSchemas(this, other);
	        }
	    }, {
	        key: "select",
	        value: function select() {
	            for (var _len = arguments.length, columnNames = Array(_len), _key = 0; _key < _len; _key++) {
	                columnNames[_key] = arguments[_key];
	            }

	            var names = columnNames.reduce(function (xs, x) {
	                return (xs[x] = true) && xs;
	            }, Object.create(null));
	            return new Schema(this.fields.filter(function (f) {
	                return names[f.name];
	            }), this.metadata);
	        }
	    }, {
	        key: "selectAt",
	        value: function selectAt() {
	            var _this = this;

	            for (var _len2 = arguments.length, columnIndices = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                columnIndices[_key2] = arguments[_key2];
	            }

	            return new Schema(columnIndices.map(function (i) {
	                return _this.fields[i];
	            }).filter(Boolean), this.metadata);
	        }
	    }, {
	        key: "assign",
	        value: function assign() {
	            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                args[_key3] = arguments[_key3];
	            }

	            var other = args[0] instanceof Schema ? args[0] : new Schema(args_1.selectArgs(Field, args));
	            var curFields = [].concat(_toConsumableArray(this.fields));
	            var metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);
	            var newFields = other.fields.filter(function (f2) {
	                var i = curFields.findIndex(function (f) {
	                    return f.name === f2.name;
	                });
	                return ~i ? (curFields[i] = f2.clone({
	                    metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)
	                })) && false : true;
	            });
	            var newDictionaries = generateDictionaryMap(newFields, new Map());
	            return new Schema([].concat(_toConsumableArray(curFields), _toConsumableArray(newFields)), metadata, new Map([].concat(_toConsumableArray(this.dictionaries), _toConsumableArray(newDictionaries))));
	        }
	    }, {
	        key: Symbol.toStringTag,
	        get: function get() {
	            return 'Schema';
	        }
	    }], [{
	        key: "from",
	        value: function from() {
	            return Schema.new(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
	        }
	        /** @nocollapse */

	    }, {
	        key: "new",
	        value: function _new() {
	            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	                args[_key4] = arguments[_key4];
	            }

	            return new Schema(args_2.selectFieldArgs(args)[0]);
	        }
	    }]);

	    return Schema;
	}();

	exports.Schema = Schema;

	var Field = function () {
	    function Field(name, type) {
	        var nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	        var metadata = arguments[3];

	        _classCallCheck(this, Field);

	        this.name = name;
	        this.type = type;
	        this.nullable = nullable;
	        this.metadata = metadata || new Map();
	    }
	    /** @nocollapse */


	    _createClass(Field, [{
	        key: "toString",
	        value: function toString() {
	            return this.name + ": " + this.type;
	        }
	    }, {
	        key: "compareTo",
	        value: function compareTo(other) {
	            return typecomparator_1.instance.compareField(this, other);
	        }
	    }, {
	        key: "clone",
	        value: function clone() {
	            var _args, _args2, _args2$, _args2$2, _args2$3, _args2$4, _args$, _args$$name, _args$$type, _args$$nullable, _args$$metadata;

	            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	                args[_key5] = arguments[_key5];
	            }

	            var name = args[0],
	                type = args[1],
	                nullable = args[2],
	                metadata = args[3];

	            !args[0] || _typeof(args[0]) !== 'object' ? (_args = args, _args2 = _slicedToArray(_args, 4), _args2$ = _args2[0], name = _args2$ === undefined ? this.name : _args2$, _args2$2 = _args2[1], type = _args2$2 === undefined ? this.type : _args2$2, _args2$3 = _args2[2], nullable = _args2$3 === undefined ? this.nullable : _args2$3, _args2$4 = _args2[3], metadata = _args2$4 === undefined ? this.metadata : _args2$4, _args) : (_args$ = args[0], _args$$name = _args$.name, name = _args$$name === undefined ? this.name : _args$$name, _args$$type = _args$.type, type = _args$$type === undefined ? this.type : _args$$type, _args$$nullable = _args$.nullable, nullable = _args$$nullable === undefined ? this.nullable : _args$$nullable, _args$$metadata = _args$.metadata, metadata = _args$$metadata === undefined ? this.metadata : _args$$metadata, _args$);
	            return Field.new(name, type, nullable, metadata);
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return this.type.typeId;
	        }
	    }, {
	        key: Symbol.toStringTag,
	        get: function get() {
	            return 'Field';
	        }
	    }], [{
	        key: "new",
	        value: function _new() {
	            for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	                args[_key6] = arguments[_key6];
	            }

	            var name = args[0],
	                type = args[1],
	                nullable = args[2],
	                metadata = args[3];

	            if (args[0] && _typeof(args[0]) === 'object') {
	                name = args[0].name;

	                type === undefined && (type = args[0].type);
	                nullable === undefined && (nullable = args[0].nullable);
	                metadata === undefined && (metadata = args[0].metadata);
	            }
	            return new Field("" + name, type, nullable, metadata);
	        }
	    }]);

	    return Field;
	}();

	exports.Field = Field;
	/** @ignore */
	function mergeMaps(m1, m2) {
	    return new Map([].concat(_toConsumableArray(m1 || new Map()), _toConsumableArray(m2 || new Map())));
	}
	/** @ignore */
	function generateDictionaryMap(fields) {
	    var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();

	    for (var i = -1, n = fields.length; ++i < n;) {
	        var field = fields[i];
	        var type = field.type;
	        if (type_1.DataType.isDictionary(type)) {
	            if (!dictionaries.has(type.id)) {
	                dictionaries.set(type.id, type.dictionary);
	            } else if (dictionaries.get(type.id) !== type.dictionary) {
	                throw new Error("Cannot create Schema containing two different dictionaries with the same Id");
	            }
	        }
	        if (type.children && type.children.length > 0) {
	            generateDictionaryMap(type.children, dictionaries);
	        }
	    }
	    return dictionaries;
	}
	// Add these here so they're picked up by the externs creator
	// in the build, and closure-compiler doesn't minify them away
	Schema.prototype.fields = null;
	Schema.prototype.metadata = null;
	Schema.prototype.dictionaries = null;
	Field.prototype.type = null;
	Field.prototype.name = null;
	Field.prototype.nullable = null;
	Field.prototype.metadata = null;

	//# sourceMappingURL=schema.js.map

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(72);
	var schema_1 = __webpack_require__(97);
	var column_1 = __webpack_require__(99);
	var vector_1 = __webpack_require__(68);
	var type_1 = __webpack_require__(74);
	var chunked_1 = __webpack_require__(100);
	var isArray = Array.isArray;
	/** @ignore */
	exports.selectArgs = function (Ctor, vals) {
	    return _selectArgs(Ctor, vals, [], 0);
	};
	/** @ignore */
	exports.selectColumnArgs = function (args) {
	    var _selectFieldArgs2 = _selectFieldArgs(args, [[], []]),
	        _selectFieldArgs3 = _slicedToArray(_selectFieldArgs2, 2),
	        fields = _selectFieldArgs3[0],
	        values = _selectFieldArgs3[1];

	    return values.map(function (x, i) {
	        return x instanceof column_1.Column ? column_1.Column.new(x.field.clone(fields[i]), x) : x instanceof vector_1.Vector ? column_1.Column.new(fields[i], x) : column_1.Column.new(fields[i], []);
	    });
	};
	/** @ignore */
	exports.selectFieldArgs = function (args) {
	    return _selectFieldArgs(args, [[], []]);
	};
	/** @ignore */
	exports.selectChunkArgs = function (Ctor, vals) {
	    return _selectChunkArgs(Ctor, vals, [], 0);
	};
	/** @ignore */
	exports.selectVectorChildrenArgs = function (Ctor, vals) {
	    return _selectVectorChildrenArgs(Ctor, vals, [], 0);
	};
	/** @ignore */
	exports.selectColumnChildrenArgs = function (Ctor, vals) {
	    return _selectColumnChildrenArgs(Ctor, vals, [], 0);
	};
	/** @ignore */
	function _selectArgs(Ctor, vals, res, idx) {
	    var value = void 0,
	        j = idx;
	    var i = -1,
	        n = vals.length;
	    while (++i < n) {
	        if (isArray(value = vals[i])) {
	            j = _selectArgs(Ctor, value, res, j).length;
	        } else if (value instanceof Ctor) {
	            res[j++] = value;
	        }
	    }
	    return res;
	}
	/** @ignore */
	function _selectChunkArgs(Ctor, vals, res, idx) {
	    var value = void 0,
	        j = idx;
	    var i = -1,
	        n = vals.length;
	    while (++i < n) {
	        if (isArray(value = vals[i])) {
	            j = _selectChunkArgs(Ctor, value, res, j).length;
	        } else if (value instanceof chunked_1.Chunked) {
	            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;
	        } else if (value instanceof Ctor) {
	            res[j++] = value;
	        }
	    }
	    return res;
	}
	/** @ignore */
	function _selectVectorChildrenArgs(Ctor, vals, res, idx) {
	    var value = void 0,
	        j = idx;
	    var i = -1,
	        n = vals.length;
	    while (++i < n) {
	        if (isArray(value = vals[i])) {
	            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;
	        } else if (value instanceof Ctor) {
	            j = _selectArgs(vector_1.Vector, value.schema.fields.map(function (_, i) {
	                return value.getChildAt(i);
	            }), res, j).length;
	        } else if (value instanceof vector_1.Vector) {
	            res[j++] = value;
	        }
	    }
	    return res;
	}
	/** @ignore */
	function _selectColumnChildrenArgs(Ctor, vals, res, idx) {
	    var value = void 0,
	        j = idx;
	    var i = -1,
	        n = vals.length;
	    while (++i < n) {
	        if (isArray(value = vals[i])) {
	            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;
	        } else if (value instanceof Ctor) {
	            j = _selectArgs(column_1.Column, value.schema.fields.map(function (f, i) {
	                return column_1.Column.new(f, value.getChildAt(i));
	            }), res, j).length;
	        } else if (value instanceof column_1.Column) {
	            res[j++] = value;
	        }
	    }
	    return res;
	}
	/** @ignore */
	var toKeysAndValues = function toKeysAndValues(xs, _ref, i) {
	    var _ref2 = _slicedToArray(_ref, 2),
	        k = _ref2[0],
	        v = _ref2[1];

	    return xs[0][i] = k, xs[1][i] = v, xs;
	};
	/** @ignore */
	function _selectFieldArgs(vals, ret) {
	    var keys = void 0,
	        n = void 0;
	    switch (n = vals.length) {
	        case 0:
	            return ret;
	        case 1:
	            keys = ret[0];
	            if (!vals[0]) {
	                return ret;
	            }
	            if (isArray(vals[0])) {
	                return _selectFieldArgs(vals[0], ret);
	            }
	            if (!(vals[0] instanceof data_1.Data || vals[0] instanceof vector_1.Vector || vals[0] instanceof type_1.DataType)) {
	                var _Object$entries$reduc = Object.entries(vals[0]).reduce(toKeysAndValues, ret);

	                var _Object$entries$reduc2 = _slicedToArray(_Object$entries$reduc, 2);

	                keys = _Object$entries$reduc2[0];
	                vals = _Object$entries$reduc2[1];
	            }
	            break;
	        default:
	            !isArray(keys = vals[n - 1]) ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = []) : vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1);
	    }
	    var fieldIndex = -1;
	    var valueIndex = -1;
	    var idx = -1,
	        len = vals.length;
	    var field = void 0;
	    var val = void 0;

	    var _ret = _slicedToArray(ret, 2),
	        fields = _ret[0],
	        values = _ret[1];

	    while (++idx < len) {
	        val = vals[idx];
	        if (val instanceof column_1.Column && (values[++valueIndex] = val)) {
	            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);
	        } else {
	            var _keys = keys;
	            var _keys$idx = _keys[idx];
	            field = _keys$idx === undefined ? idx : _keys$idx;

	            if (val instanceof type_1.DataType && (values[++valueIndex] = val)) {
	                fields[++fieldIndex] = schema_1.Field.new(field, val, true);
	            } else if (val && val.type && (values[++valueIndex] = val)) {
	                val instanceof data_1.Data && (values[valueIndex] = val = vector_1.Vector.new(val));
	                fields[++fieldIndex] = schema_1.Field.new(field, val.type, true);
	            }
	        }
	    }
	    return ret;
	}

	//# sourceMappingURL=args.js.map

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var schema_1 = __webpack_require__(97);
	var vector_1 = __webpack_require__(68);
	var chunked_1 = __webpack_require__(100);

	var Column = function (_chunked_1$Chunked) {
	    _inherits(Column, _chunked_1$Chunked);

	    function Column(field) {
	        var _chunked_1$Chunked2;

	        var vectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	        var offsets = arguments[2];

	        _classCallCheck(this, Column);

	        vectors = (_chunked_1$Chunked2 = chunked_1.Chunked).flatten.apply(_chunked_1$Chunked2, _toConsumableArray(vectors));

	        var _this = _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).call(this, field.type, vectors, offsets));

	        _this._field = field;
	        if (vectors.length === 1 && !(_this instanceof SingleChunkColumn)) {
	            var _ret;

	            return _ret = new SingleChunkColumn(field, vectors[0], _this._chunkOffsets), _possibleConstructorReturn(_this, _ret);
	        }
	        return _this;
	    }
	    /** @nocollapse */


	    _createClass(Column, [{
	        key: "clone",
	        value: function clone() {
	            var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;

	            return new Column(this._field, chunks);
	        }
	    }, {
	        key: "getChildAt",
	        value: function getChildAt(index) {
	            if (index < 0 || index >= this.numChildren) {
	                return null;
	            }
	            var columns = this._children || (this._children = []);
	            var column = void 0,
	                field = void 0,
	                chunks = void 0;
	            if (column = columns[index]) {
	                return column;
	            }
	            if (field = (this.type.children || [])[index]) {
	                chunks = this._chunks.map(function (vector) {
	                    return vector.getChildAt(index);
	                }).filter(function (vec) {
	                    return vec != null;
	                });
	                if (chunks.length > 0) {
	                    return columns[index] = new Column(field, chunks);
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "field",
	        get: function get() {
	            return this._field;
	        }
	    }, {
	        key: "name",
	        get: function get() {
	            return this._field.name;
	        }
	    }, {
	        key: "nullable",
	        get: function get() {
	            return this._field.nullable;
	        }
	    }, {
	        key: "metadata",
	        get: function get() {
	            return this._field.metadata;
	        }
	    }], [{
	        key: "new",
	        value: function _new(field, data) {
	            var _vector_1$Vector;

	            for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	                rest[_key - 2] = arguments[_key];
	            }

	            var chunks = chunked_1.Chunked.flatten(Array.isArray(data) ? [].concat(_toConsumableArray(data), rest) : data instanceof vector_1.Vector ? [data].concat(rest) : [(_vector_1$Vector = vector_1.Vector).new.apply(_vector_1$Vector, [data].concat(rest))]);
	            if (typeof field === 'string') {
	                var type = chunks[0].data.type;
	                field = new schema_1.Field(field, type, true);
	            } else if (!field.nullable && chunks.some(function (_ref) {
	                var nullCount = _ref.nullCount;
	                return nullCount > 0;
	            })) {
	                field = field.clone({ nullable: true });
	            }
	            return new Column(field, chunks);
	        }
	    }]);

	    return Column;
	}(chunked_1.Chunked);

	exports.Column = Column;
	/** @ignore */

	var SingleChunkColumn = function (_Column) {
	    _inherits(SingleChunkColumn, _Column);

	    function SingleChunkColumn(field, vector, offsets) {
	        _classCallCheck(this, SingleChunkColumn);

	        var _this2 = _possibleConstructorReturn(this, (SingleChunkColumn.__proto__ || Object.getPrototypeOf(SingleChunkColumn)).call(this, field, [vector], offsets));

	        _this2._chunk = vector;
	        return _this2;
	    }

	    _createClass(SingleChunkColumn, [{
	        key: "search",
	        value: function search(index, then) {
	            return then ? then(this, 0, index) : [0, index];
	        }
	    }, {
	        key: "isValid",
	        value: function isValid(index) {
	            return this._chunk.isValid(index);
	        }
	    }, {
	        key: "get",
	        value: function get(index) {
	            return this._chunk.get(index);
	        }
	    }, {
	        key: "set",
	        value: function set(index, value) {
	            this._chunk.set(index, value);
	        }
	    }, {
	        key: "indexOf",
	        value: function indexOf(element, offset) {
	            return this._chunk.indexOf(element, offset);
	        }
	    }]);

	    return SingleChunkColumn;
	}(Column);

	//# sourceMappingURL=column.js.map

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(101);
	var type_1 = __webpack_require__(74);
	var args_1 = __webpack_require__(98);
	var vector_2 = __webpack_require__(68);
	/** @ignore */

	var Chunked = function (_vector_2$AbstractVec) {
	    _inherits(Chunked, _vector_2$AbstractVec);

	    function Chunked(type) {
	        var chunks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	        var offsets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : calculateOffsets(chunks);

	        _classCallCheck(this, Chunked);

	        var _this = _possibleConstructorReturn(this, (Chunked.__proto__ || Object.getPrototypeOf(Chunked)).call(this));

	        _this._nullCount = -1;
	        _this._type = type;
	        _this._chunks = chunks;
	        _this._chunkOffsets = offsets;
	        _this._length = offsets[offsets.length - 1];
	        _this._numChildren = (_this._type.children || []).length;
	        return _this;
	    }
	    /** @nocollapse */


	    _createClass(Chunked, [{
	        key: Symbol.iterator,
	        value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
	            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;

	            return regeneratorRuntime.wrap(function value$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            _iteratorNormalCompletion = true;
	                            _didIteratorError = false;
	                            _iteratorError = undefined;
	                            _context.prev = 3;
	                            _iterator = this._chunks[Symbol.iterator]();

	                        case 5:
	                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	                                _context.next = 11;
	                                break;
	                            }

	                            chunk = _step.value;
	                            return _context.delegateYield(chunk, "t0", 8);

	                        case 8:
	                            _iteratorNormalCompletion = true;
	                            _context.next = 5;
	                            break;

	                        case 11:
	                            _context.next = 17;
	                            break;

	                        case 13:
	                            _context.prev = 13;
	                            _context.t1 = _context["catch"](3);
	                            _didIteratorError = true;
	                            _iteratorError = _context.t1;

	                        case 17:
	                            _context.prev = 17;
	                            _context.prev = 18;

	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }

	                        case 20:
	                            _context.prev = 20;

	                            if (!_didIteratorError) {
	                                _context.next = 23;
	                                break;
	                            }

	                            throw _iteratorError;

	                        case 23:
	                            return _context.finish(20);

	                        case 24:
	                            return _context.finish(17);

	                        case 25:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, value, this, [[3, 13, 17, 25], [18,, 20, 24]]);
	        })
	    }, {
	        key: "clone",
	        value: function clone() {
	            var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;

	            return new Chunked(this._type, chunks);
	        }
	    }, {
	        key: "concat",
	        value: function concat() {
	            for (var _len = arguments.length, others = Array(_len), _key = 0; _key < _len; _key++) {
	                others[_key] = arguments[_key];
	            }

	            return this.clone(Chunked.flatten.apply(Chunked, [this].concat(others)));
	        }
	    }, {
	        key: "slice",
	        value: function slice(begin, end) {
	            return vector_1.clampRange(this, begin, end, this._sliceInternal);
	        }
	    }, {
	        key: "getChildAt",
	        value: function getChildAt(index) {
	            if (index < 0 || index >= this._numChildren) {
	                return null;
	            }
	            var columns = this._children || (this._children = []);
	            var child = void 0,
	                field = void 0,
	                chunks = void 0;
	            if (child = columns[index]) {
	                return child;
	            }
	            if (field = (this._type.children || [])[index]) {
	                chunks = this._chunks.map(function (vector) {
	                    return vector.getChildAt(index);
	                }).filter(function (vec) {
	                    return vec != null;
	                });
	                if (chunks.length > 0) {
	                    return columns[index] = new Chunked(field.type, chunks);
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "search",
	        value: function search(index, then) {
	            var idx = index;
	            // binary search to find the child vector and value indices
	            var offsets = this._chunkOffsets,
	                rhs = offsets.length - 1;
	            // return early if out of bounds, or if there's just one child
	            if (idx < 0) {
	                return null;
	            }
	            if (idx >= offsets[rhs]) {
	                return null;
	            }
	            if (rhs <= 1) {
	                return then ? then(this, 0, idx) : [0, idx];
	            }
	            var lhs = 0,
	                pos = 0,
	                mid = 0;
	            do {
	                if (lhs + 1 === rhs) {
	                    return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];
	                }
	                mid = lhs + (rhs - lhs) / 2 | 0;
	                idx >= offsets[mid] ? lhs = mid : rhs = mid;
	            } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));
	            return null;
	        }
	    }, {
	        key: "isValid",
	        value: function isValid(index) {
	            return !!this.search(index, this.isValidInternal);
	        }
	    }, {
	        key: "get",
	        value: function get(index) {
	            return this.search(index, this.getInternal);
	        }
	    }, {
	        key: "set",
	        value: function set(index, value) {
	            this.search(index, function (_ref, i, j) {
	                var chunks = _ref.chunks;
	                return chunks[i].set(j, value);
	            });
	        }
	    }, {
	        key: "indexOf",
	        value: function indexOf(element, offset) {
	            var _this2 = this;

	            if (offset && typeof offset === 'number') {
	                return this.search(offset, function (self, i, j) {
	                    return _this2.indexOfInternal(self, i, j, element);
	                });
	            }
	            return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);
	        }
	    }, {
	        key: "toArray",
	        value: function toArray() {
	            var chunks = this.chunks;

	            var n = chunks.length;
	            var ArrayType = this._type.ArrayType;
	            if (n <= 0) {
	                return new ArrayType(0);
	            }
	            if (n <= 1) {
	                return chunks[0].toArray();
	            }
	            var len = 0,
	                src = new Array(n);
	            for (var i = -1; ++i < n;) {
	                len += (src[i] = chunks[i].toArray()).length;
	            }
	            if (ArrayType !== src[0].constructor) {
	                ArrayType = src[0].constructor;
	            }
	            var dst = new ArrayType(len);
	            var set = ArrayType === Array ? arraySet : typedSet;
	            for (var _i = -1, idx = 0; ++_i < n;) {
	                idx = set(src[_i], dst, idx);
	            }
	            return dst;
	        }
	    }, {
	        key: "getInternal",
	        value: function getInternal(_ref2, i, j) {
	            var _chunks = _ref2._chunks;
	            return _chunks[i].get(j);
	        }
	    }, {
	        key: "isValidInternal",
	        value: function isValidInternal(_ref3, i, j) {
	            var _chunks = _ref3._chunks;
	            return _chunks[i].isValid(j);
	        }
	    }, {
	        key: "indexOfInternal",
	        value: function indexOfInternal(_ref4, chunkIndex, fromIndex, element) {
	            var _chunks = _ref4._chunks;

	            var i = chunkIndex - 1,
	                n = _chunks.length;
	            var start = fromIndex,
	                offset = 0,
	                found = -1;
	            while (++i < n) {
	                if (~(found = _chunks[i].indexOf(element, start))) {
	                    return offset + found;
	                }
	                start = 0;
	                offset += _chunks[i].length;
	            }
	            return -1;
	        }
	    }, {
	        key: "_sliceInternal",
	        value: function _sliceInternal(self, begin, end) {
	            var slices = [];
	            var chunks = self.chunks,
	                chunkOffsets = self._chunkOffsets;

	            for (var i = -1, n = chunks.length; ++i < n;) {
	                var chunk = chunks[i];
	                var chunkLength = chunk.length;
	                var chunkOffset = chunkOffsets[i];
	                // If the child is to the right of the slice boundary, we can stop
	                if (chunkOffset >= end) {
	                    break;
	                }
	                // If the child is to the left of of the slice boundary, exclude
	                if (begin >= chunkOffset + chunkLength) {
	                    continue;
	                }
	                // If the child is between both left and right boundaries, include w/o slicing
	                if (chunkOffset >= begin && chunkOffset + chunkLength <= end) {
	                    slices.push(chunk);
	                    continue;
	                }
	                // If the child overlaps one of the slice boundaries, include that slice
	                var from = Math.max(0, begin - chunkOffset);
	                var to = Math.min(end - chunkOffset, chunkLength);
	                slices.push(chunk.slice(from, to));
	            }
	            return self.clone(slices);
	        }
	    }, {
	        key: "type",
	        get: function get() {
	            return this._type;
	        }
	    }, {
	        key: "length",
	        get: function get() {
	            return this._length;
	        }
	    }, {
	        key: "chunks",
	        get: function get() {
	            return this._chunks;
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return this._type.typeId;
	        }
	    }, {
	        key: "VectorName",
	        get: function get() {
	            return "Chunked<" + this._type + ">";
	        }
	    }, {
	        key: "data",
	        get: function get() {
	            return this._chunks[0] ? this._chunks[0].data : null;
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            return this._type.ArrayType;
	        }
	    }, {
	        key: "numChildren",
	        get: function get() {
	            return this._numChildren;
	        }
	    }, {
	        key: "stride",
	        get: function get() {
	            return this._chunks[0] ? this._chunks[0].stride : 1;
	        }
	    }, {
	        key: "byteLength",
	        get: function get() {
	            return this._chunks.reduce(function (byteLength, chunk) {
	                return byteLength + chunk.byteLength;
	            }, 0);
	        }
	    }, {
	        key: "nullCount",
	        get: function get() {
	            var nullCount = this._nullCount;
	            if (nullCount < 0) {
	                this._nullCount = nullCount = this._chunks.reduce(function (x, _ref5) {
	                    var nullCount = _ref5.nullCount;
	                    return x + nullCount;
	                }, 0);
	            }
	            return nullCount;
	        }
	    }, {
	        key: "indices",
	        get: function get() {
	            if (type_1.DataType.isDictionary(this._type)) {
	                if (!this._indices) {
	                    var chunks = this._chunks;
	                    this._indices = chunks.length === 1 ? chunks[0].indices : Chunked.concat.apply(Chunked, _toConsumableArray(chunks.map(function (x) {
	                        return x.indices;
	                    })));
	                }
	                return this._indices;
	            }
	            return null;
	        }
	    }, {
	        key: "dictionary",
	        get: function get() {
	            if (type_1.DataType.isDictionary(this._type)) {
	                return this._chunks[this._chunks.length - 1].data.dictionary;
	            }
	            return null;
	        }
	    }], [{
	        key: "flatten",
	        value: function flatten() {
	            for (var _len2 = arguments.length, vectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                vectors[_key2] = arguments[_key2];
	            }

	            return args_1.selectChunkArgs(vector_2.Vector, vectors);
	        }
	        /** @nocollapse */

	    }, {
	        key: "concat",
	        value: function concat() {
	            var chunks = Chunked.flatten.apply(Chunked, arguments);
	            return new Chunked(chunks[0].type, chunks);
	        }
	    }]);

	    return Chunked;
	}(vector_2.AbstractVector);

	exports.Chunked = Chunked;
	/** @ignore */
	function calculateOffsets(vectors) {
	    var offsets = new Uint32Array((vectors || []).length + 1);
	    var offset = offsets[0] = 0,
	        length = offsets.length;
	    for (var index = 0; ++index < length;) {
	        offsets[index] = offset += vectors[index - 1].length;
	    }
	    return offsets;
	}
	/** @ignore */
	var typedSet = function typedSet(src, dst, offset) {
	    dst.set(src, offset);
	    return offset + src.length;
	};
	/** @ignore */
	var arraySet = function arraySet(src, dst, offset) {
	    var idx = offset;
	    for (var i = -1, n = src.length; ++i < n;) {
	        dst[idx++] = src[i];
	    }
	    return idx;
	};

	//# sourceMappingURL=chunked.js.map

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(68);
	var row_1 = __webpack_require__(102);
	var buffer_1 = __webpack_require__(60);
	var compat_1 = __webpack_require__(64);
	/** @ignore */
	function clampIndex(source, index, then) {
	    var length = source.length;
	    var adjust = index > -1 ? index : length + index % length;
	    return then ? then(source, adjust) : adjust;
	}
	exports.clampIndex = clampIndex;
	/** @ignore */
	var tmp = void 0;
	/** @ignore */
	function clampRange(source, begin, end, then) {
	    // Adjust args similar to Array.prototype.slice. Normalize begin/end to
	    // clamp between 0 and length, and wrap around on negative indices, e.g.
	    // slice(-1, 5) or slice(5, -1)
	    var _source$length = source.length,
	        len = _source$length === undefined ? 0 : _source$length;

	    var lhs = typeof begin !== 'number' ? 0 : begin;
	    var rhs = typeof end !== 'number' ? len : end;
	    // wrap around on negative start/end positions
	    lhs < 0 && (lhs = (lhs % len + len) % len);
	    rhs < 0 && (rhs = (rhs % len + len) % len);
	    // ensure lhs <= rhs
	    rhs < lhs && (tmp = lhs, lhs = rhs, rhs = tmp);
	    // ensure rhs <= length
	    rhs > len && (rhs = len);
	    return then ? then(source, lhs, rhs) : [lhs, rhs];
	}
	exports.clampRange = clampRange;
	var big0 = compat_1.BigIntAvailable ? compat_1.BigInt(0) : 0;
	var isNaNFast = function isNaNFast(value) {
	    return value !== value;
	};
	/** @ignore */
	function createElementComparator(search) {
	    var typeofSearch = typeof search === "undefined" ? "undefined" : _typeof(search);
	    // Compare primitives
	    if (typeofSearch !== 'object' || search === null) {
	        // Compare NaN
	        if (isNaNFast(search)) {
	            return isNaNFast;
	        }
	        return typeofSearch !== 'bigint' ? function (value) {
	            return value === search;
	        } : function (value) {
	            return big0 + value === search;
	        };
	    }
	    // Compare Dates
	    if (search instanceof Date) {
	        var valueOfSearch = search.valueOf();
	        return function (value) {
	            return value instanceof Date ? value.valueOf() === valueOfSearch : false;
	        };
	    }
	    // Compare TypedArrays
	    if (ArrayBuffer.isView(search)) {
	        return function (value) {
	            return value ? buffer_1.compareArrayLike(search, value) : false;
	        };
	    }
	    // Compare Maps and Rows
	    if (search instanceof Map) {
	        return creatMapComparator(search);
	    }
	    // Compare Array-likes
	    if (Array.isArray(search)) {
	        return createArrayLikeComparator(search);
	    }
	    // Compare Vectors
	    if (search instanceof vector_1.Vector) {
	        return createVectorComparator(search);
	    }
	    // Compare non-empty Objects
	    return createObjectComparator(search);
	}
	exports.createElementComparator = createElementComparator;
	/** @ignore */
	function createArrayLikeComparator(lhs) {
	    var comparators = [];
	    for (var i = -1, n = lhs.length; ++i < n;) {
	        comparators[i] = createElementComparator(lhs[i]);
	    }
	    return createSubElementsComparator(comparators);
	}
	/** @ignore */
	function creatMapComparator(lhs) {
	    var i = -1;
	    var comparators = [];
	    lhs.forEach(function (v) {
	        return comparators[++i] = createElementComparator(v);
	    });
	    return createSubElementsComparator(comparators);
	}
	/** @ignore */
	function createVectorComparator(lhs) {
	    var comparators = [];
	    for (var i = -1, n = lhs.length; ++i < n;) {
	        comparators[i] = createElementComparator(lhs.get(i));
	    }
	    return createSubElementsComparator(comparators);
	}
	/** @ignore */
	function createObjectComparator(lhs) {
	    var keys = Object.keys(lhs);
	    // Only compare non-empty Objects
	    if (keys.length === 0) {
	        return function () {
	            return false;
	        };
	    }
	    var comparators = [];
	    for (var i = -1, n = keys.length; ++i < n;) {
	        comparators[i] = createElementComparator(lhs[keys[i]]);
	    }
	    return createSubElementsComparator(comparators, keys);
	}
	function createSubElementsComparator(comparators, keys) {
	    return function (rhs) {
	        if (!rhs || (typeof rhs === "undefined" ? "undefined" : _typeof(rhs)) !== 'object') {
	            return false;
	        }
	        switch (rhs.constructor) {
	            case Array:
	                return compareArray(comparators, rhs);
	            case Map:
	            case row_1.MapRow:
	            case row_1.StructRow:
	                return compareObject(comparators, rhs, rhs.keys());
	            case Object:
	            case undefined:
	                // support `Object.create(null)` objects
	                return compareObject(comparators, rhs, keys || Object.keys(rhs));
	        }
	        return rhs instanceof vector_1.Vector ? compareVector(comparators, rhs) : false;
	    };
	}
	function compareArray(comparators, arr) {
	    var n = comparators.length;
	    if (arr.length !== n) {
	        return false;
	    }
	    for (var i = -1; ++i < n;) {
	        if (!comparators[i](arr[i])) {
	            return false;
	        }
	    }
	    return true;
	}
	function compareVector(comparators, vec) {
	    var n = comparators.length;
	    if (vec.length !== n) {
	        return false;
	    }
	    for (var i = -1; ++i < n;) {
	        if (!comparators[i](vec.get(i))) {
	            return false;
	        }
	    }
	    return true;
	}
	function compareObject(comparators, obj, keys) {
	    var lKeyItr = keys[Symbol.iterator]();
	    var rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();
	    var rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();
	    var i = 0;
	    var n = comparators.length;
	    var rVal = rValItr.next();
	    var lKey = lKeyItr.next();
	    var rKey = rKeyItr.next();
	    for (; i < n && !lKey.done && !rKey.done && !rVal.done; ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {
	        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {
	            break;
	        }
	    }
	    if (i === n && lKey.done && rKey.done && rVal.done) {
	        return true;
	    }
	    lKeyItr.return && lKeyItr.return();
	    rKeyItr.return && rKeyItr.return();
	    rValItr.return && rValItr.return();
	    return false;
	}

	//# sourceMappingURL=vector.js.map

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var pretty_1 = __webpack_require__(78);
	/** @ignore */var kParent = Symbol.for('parent');
	/** @ignore */var kRowIndex = Symbol.for('rowIndex');
	/** @ignore */var kKeyToIdx = Symbol.for('keyToIdx');
	/** @ignore */var kIdxToVal = Symbol.for('idxToVal');
	/** @ignore */var kCustomInspect = Symbol.for('nodejs.util.inspect.custom');

	var Row = function () {
	    function Row(parent, numKeys) {
	        _classCallCheck(this, Row);

	        this[kParent] = parent;
	        this.size = numKeys;
	    }

	    _createClass(Row, [{
	        key: "entries",
	        value: function entries() {
	            return this[Symbol.iterator]();
	        }
	    }, {
	        key: "has",
	        value: function has(key) {
	            return this.get(key) !== undefined;
	        }
	    }, {
	        key: "get",
	        value: function get(key) {
	            var val = undefined;
	            if (key !== null && key !== undefined) {
	                var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
	                var idx = ktoi.get(key);
	                if (idx !== undefined) {
	                    var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
	                    (val = itov[idx]) !== undefined || (itov[idx] = val = this.getValue(idx));
	                } else if ((idx = this.getIndex(key)) > -1) {
	                    ktoi.set(key, idx);
	                    var _itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
	                    (val = _itov[idx]) !== undefined || (_itov[idx] = val = this.getValue(idx));
	                }
	            }
	            return val;
	        }
	    }, {
	        key: "set",
	        value: function set(key, val) {
	            if (key !== null && key !== undefined) {
	                var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
	                var idx = ktoi.get(key);
	                if (idx === undefined) {
	                    ktoi.set(key, idx = this.getIndex(key));
	                }
	                if (idx > -1) {
	                    var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
	                    itov[idx] = this.setValue(idx, val);
	                }
	            }
	            return this;
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            throw new Error("Clearing " + this[Symbol.toStringTag] + " not supported.");
	        }
	    }, {
	        key: "delete",
	        value: function _delete(_) {
	            throw new Error("Deleting " + this[Symbol.toStringTag] + " values not supported.");
	        }
	    }, {
	        key: Symbol.iterator,
	        value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
	            var ki, vi, ktoi, itov, k, v, i, kr, vr;
	            return regeneratorRuntime.wrap(function value$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            ki = this.keys();
	                            vi = this.values();
	                            ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
	                            itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
	                            i = 0;

	                        case 5:
	                            if ((kr = ki.next()).done || (vr = vi.next()).done) {
	                                _context.next = 15;
	                                break;
	                            }

	                            k = kr.value;
	                            v = vr.value;
	                            itov[i] = v;
	                            ktoi.has(k) || ktoi.set(k, i);
	                            _context.next = 12;
	                            return [k, v];

	                        case 12:
	                            ++i;
	                            _context.next = 5;
	                            break;

	                        case 15:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, value, this);
	        })
	    }, {
	        key: "forEach",
	        value: function forEach(callbackfn, thisArg) {
	            var ki = this.keys();
	            var vi = this.values();
	            var callback = thisArg === undefined ? callbackfn : function (v, k, m) {
	                return callbackfn.call(thisArg, v, k, m);
	            };
	            var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
	            var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
	            for (var k, v, i = 0, kr, vr; !((kr = ki.next()).done || (vr = vi.next()).done); ++i) {
	                k = kr.value;
	                v = vr.value;
	                itov[i] = v;
	                ktoi.has(k) || ktoi.set(k, i);
	                callback(v, k, this);
	            }
	        }
	    }, {
	        key: "toArray",
	        value: function toArray() {
	            return [].concat(_toConsumableArray(this.values()));
	        }
	    }, {
	        key: "toJSON",
	        value: function toJSON() {
	            var obj = {};
	            this.forEach(function (val, key) {
	                return obj[key] = val;
	            });
	            return obj;
	        }
	    }, {
	        key: "inspect",
	        value: function inspect() {
	            return this.toString();
	        }
	    }, {
	        key: kCustomInspect,
	        value: function value() {
	            return this.toString();
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            var str = [];
	            this.forEach(function (val, key) {
	                key = pretty_1.valueToString(key);
	                val = pretty_1.valueToString(val);
	                str.push(key + ": " + val);
	            });
	            return "{ " + str.join(', ') + " }";
	        }
	    }]);

	    return Row;
	}();

	Row[Symbol.toStringTag] = function (proto) {
	    var _Object$definePropert;

	    Object.defineProperties(proto, (_Object$definePropert = {
	        'size': { writable: true, enumerable: false, configurable: false, value: 0 }
	    }, _defineProperty(_Object$definePropert, kParent, { writable: true, enumerable: false, configurable: false, value: null }), _defineProperty(_Object$definePropert, kRowIndex, { writable: true, enumerable: false, configurable: false, value: -1 }), _Object$definePropert));
	    return proto[Symbol.toStringTag] = 'Row';
	}(Row.prototype);

	var MapRow = function (_Row) {
	    _inherits(MapRow, _Row);

	    function MapRow(slice) {
	        var _ret;

	        _classCallCheck(this, MapRow);

	        var _this = _possibleConstructorReturn(this, (MapRow.__proto__ || Object.getPrototypeOf(MapRow)).call(this, slice, slice.length));

	        return _ret = createRowProxy(_this), _possibleConstructorReturn(_this, _ret);
	    }

	    _createClass(MapRow, [{
	        key: "keys",
	        value: function keys() {
	            return this[kParent].getChildAt(0)[Symbol.iterator]();
	        }
	    }, {
	        key: "values",
	        value: function values() {
	            return this[kParent].getChildAt(1)[Symbol.iterator]();
	        }
	    }, {
	        key: "getKey",
	        value: function getKey(idx) {
	            return this[kParent].getChildAt(0).get(idx);
	        }
	    }, {
	        key: "getIndex",
	        value: function getIndex(key) {
	            return this[kParent].getChildAt(0).indexOf(key);
	        }
	    }, {
	        key: "getValue",
	        value: function getValue(index) {
	            return this[kParent].getChildAt(1).get(index);
	        }
	    }, {
	        key: "setValue",
	        value: function setValue(index, value) {
	            this[kParent].getChildAt(1).set(index, value);
	        }
	    }]);

	    return MapRow;
	}(Row);

	exports.MapRow = MapRow;

	var StructRow = function (_Row2) {
	    _inherits(StructRow, _Row2);

	    function StructRow(parent) {
	        var _ret2;

	        _classCallCheck(this, StructRow);

	        var _this2 = _possibleConstructorReturn(this, (StructRow.__proto__ || Object.getPrototypeOf(StructRow)).call(this, parent, parent.type.children.length));

	        return _ret2 = defineRowProxyProperties(_this2), _possibleConstructorReturn(_this2, _ret2);
	    }

	    _createClass(StructRow, [{
	        key: "keys",
	        value: /*#__PURE__*/regeneratorRuntime.mark(function keys() {
	            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, field;

	            return regeneratorRuntime.wrap(function keys$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            _iteratorNormalCompletion = true;
	                            _didIteratorError = false;
	                            _iteratorError = undefined;
	                            _context2.prev = 3;
	                            _iterator = this[kParent].type.children[Symbol.iterator]();

	                        case 5:
	                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	                                _context2.next = 12;
	                                break;
	                            }

	                            field = _step.value;
	                            _context2.next = 9;
	                            return field.name;

	                        case 9:
	                            _iteratorNormalCompletion = true;
	                            _context2.next = 5;
	                            break;

	                        case 12:
	                            _context2.next = 18;
	                            break;

	                        case 14:
	                            _context2.prev = 14;
	                            _context2.t0 = _context2["catch"](3);
	                            _didIteratorError = true;
	                            _iteratorError = _context2.t0;

	                        case 18:
	                            _context2.prev = 18;
	                            _context2.prev = 19;

	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }

	                        case 21:
	                            _context2.prev = 21;

	                            if (!_didIteratorError) {
	                                _context2.next = 24;
	                                break;
	                            }

	                            throw _iteratorError;

	                        case 24:
	                            return _context2.finish(21);

	                        case 25:
	                            return _context2.finish(18);

	                        case 26:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);
	        })
	    }, {
	        key: "values",
	        value: /*#__PURE__*/regeneratorRuntime.mark(function values() {
	            var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, field;

	            return regeneratorRuntime.wrap(function values$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            _iteratorNormalCompletion2 = true;
	                            _didIteratorError2 = false;
	                            _iteratorError2 = undefined;
	                            _context3.prev = 3;
	                            _iterator2 = this[kParent].type.children[Symbol.iterator]();

	                        case 5:
	                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
	                                _context3.next = 12;
	                                break;
	                            }

	                            field = _step2.value;
	                            _context3.next = 9;
	                            return this[field.name];

	                        case 9:
	                            _iteratorNormalCompletion2 = true;
	                            _context3.next = 5;
	                            break;

	                        case 12:
	                            _context3.next = 18;
	                            break;

	                        case 14:
	                            _context3.prev = 14;
	                            _context3.t0 = _context3["catch"](3);
	                            _didIteratorError2 = true;
	                            _iteratorError2 = _context3.t0;

	                        case 18:
	                            _context3.prev = 18;
	                            _context3.prev = 19;

	                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                _iterator2.return();
	                            }

	                        case 21:
	                            _context3.prev = 21;

	                            if (!_didIteratorError2) {
	                                _context3.next = 24;
	                                break;
	                            }

	                            throw _iteratorError2;

	                        case 24:
	                            return _context3.finish(21);

	                        case 25:
	                            return _context3.finish(18);

	                        case 26:
	                        case "end":
	                            return _context3.stop();
	                    }
	                }
	            }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);
	        })
	    }, {
	        key: "getKey",
	        value: function getKey(idx) {
	            return this[kParent].type.children[idx].name;
	        }
	    }, {
	        key: "getIndex",
	        value: function getIndex(key) {
	            return this[kParent].type.children.findIndex(function (f) {
	                return f.name === key;
	            });
	        }
	    }, {
	        key: "getValue",
	        value: function getValue(index) {
	            return this[kParent].getChildAt(index).get(this[kRowIndex]);
	        }
	    }, {
	        key: "setValue",
	        value: function setValue(index, value) {
	            return this[kParent].getChildAt(index).set(this[kRowIndex], value);
	        }
	    }]);

	    return StructRow;
	}(Row);

	exports.StructRow = StructRow;
	Object.setPrototypeOf(Row.prototype, Map.prototype);
	/** @ignore */
	var defineRowProxyProperties = function () {
	    var desc = { enumerable: true, configurable: false, get: null, set: null };
	    return function (row) {
	        var idx = -1,
	            ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());
	        var getter = function getter(key) {
	            return function () {
	                return this.get(key);
	            };
	        };
	        var setter = function setter(key) {
	            return function (val) {
	                return this.set(key, val);
	            };
	        };
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	            for (var _iterator3 = row.keys()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                var key = _step3.value;

	                ktoi.set(key, ++idx);
	                desc.get = getter(key);
	                desc.set = setter(key);
	                row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));
	                row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));
	            }
	        } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                    _iterator3.return();
	                }
	            } finally {
	                if (_didIteratorError3) {
	                    throw _iteratorError3;
	                }
	            }
	        }

	        desc.get = desc.set = null;
	        return row;
	    };
	}();
	/** @ignore */
	var createRowProxy = function () {
	    if (typeof Proxy === 'undefined') {
	        return defineRowProxyProperties;
	    }
	    var has = Row.prototype.has;
	    var _get = Row.prototype.get;
	    var _set = Row.prototype.set;
	    var getKey = Row.prototype.getKey;
	    var RowProxyHandler = {
	        isExtensible: function isExtensible() {
	            return false;
	        },
	        deleteProperty: function deleteProperty() {
	            return false;
	        },
	        preventExtensions: function preventExtensions() {
	            return true;
	        },
	        ownKeys: function ownKeys(row) {
	            return [].concat(_toConsumableArray(row.keys())).map(function (x) {
	                return "" + x;
	            });
	        },
	        has: function has(row, key) {
	            switch (key) {
	                case 'getKey':
	                case 'getIndex':
	                case 'getValue':
	                case 'setValue':
	                case 'toArray':
	                case 'toJSON':
	                case 'inspect':
	                case 'constructor':
	                case 'isPrototypeOf':
	                case 'propertyIsEnumerable':
	                case 'toString':
	                case 'toLocaleString':
	                case 'valueOf':
	                case 'size':
	                case 'has':
	                case 'get':
	                case 'set':
	                case 'clear':
	                case 'delete':
	                case 'keys':
	                case 'values':
	                case 'entries':
	                case 'forEach':
	                case '__proto__':
	                case '__defineGetter__':
	                case '__defineSetter__':
	                case 'hasOwnProperty':
	                case '__lookupGetter__':
	                case '__lookupSetter__':
	                case Symbol.iterator:
	                case Symbol.toStringTag:
	                case kParent:
	                case kRowIndex:
	                case kIdxToVal:
	                case kKeyToIdx:
	                case kCustomInspect:
	                    return true;
	            }
	            if (typeof key === 'number' && !row.has(key)) {
	                key = row.getKey(key);
	            }
	            return row.has(key);
	        },
	        get: function get(row, key, receiver) {
	            switch (key) {
	                case 'getKey':
	                case 'getIndex':
	                case 'getValue':
	                case 'setValue':
	                case 'toArray':
	                case 'toJSON':
	                case 'inspect':
	                case 'constructor':
	                case 'isPrototypeOf':
	                case 'propertyIsEnumerable':
	                case 'toString':
	                case 'toLocaleString':
	                case 'valueOf':
	                case 'size':
	                case 'has':
	                case 'get':
	                case 'set':
	                case 'clear':
	                case 'delete':
	                case 'keys':
	                case 'values':
	                case 'entries':
	                case 'forEach':
	                case '__proto__':
	                case '__defineGetter__':
	                case '__defineSetter__':
	                case 'hasOwnProperty':
	                case '__lookupGetter__':
	                case '__lookupSetter__':
	                case Symbol.iterator:
	                case Symbol.toStringTag:
	                case kParent:
	                case kRowIndex:
	                case kIdxToVal:
	                case kKeyToIdx:
	                case kCustomInspect:
	                    return Reflect.get(row, key, receiver);
	            }
	            if (typeof key === 'number' && !has.call(receiver, key)) {
	                key = getKey.call(receiver, key);
	            }
	            return _get.call(receiver, key);
	        },
	        set: function set(row, key, val, receiver) {
	            switch (key) {
	                case kParent:
	                case kRowIndex:
	                case kIdxToVal:
	                case kKeyToIdx:
	                    return Reflect.set(row, key, val, receiver);
	                case 'getKey':
	                case 'getIndex':
	                case 'getValue':
	                case 'setValue':
	                case 'toArray':
	                case 'toJSON':
	                case 'inspect':
	                case 'constructor':
	                case 'isPrototypeOf':
	                case 'propertyIsEnumerable':
	                case 'toString':
	                case 'toLocaleString':
	                case 'valueOf':
	                case 'size':
	                case 'has':
	                case 'get':
	                case 'set':
	                case 'clear':
	                case 'delete':
	                case 'keys':
	                case 'values':
	                case 'entries':
	                case 'forEach':
	                case '__proto__':
	                case '__defineGetter__':
	                case '__defineSetter__':
	                case 'hasOwnProperty':
	                case '__lookupGetter__':
	                case '__lookupSetter__':
	                case Symbol.iterator:
	                case Symbol.toStringTag:
	                    return false;
	            }
	            if (typeof key === 'number' && !has.call(receiver, key)) {
	                key = getKey.call(receiver, key);
	            }
	            return has.call(receiver, key) ? !!_set.call(receiver, key, val) : false;
	        }
	    };
	    return function (row) {
	        return new Proxy(row, RowProxyHandler);
	    };
	}();

	//# sourceMappingURL=row.js.map

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var run_1 = __webpack_require__(96);
	var schema_1 = __webpack_require__(97);
	var builder_1 = __webpack_require__(67);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var FixedSizeListBuilder = function (_builder_1$Builder) {
	    _inherits(FixedSizeListBuilder, _builder_1$Builder);

	    function FixedSizeListBuilder() {
	        _classCallCheck(this, FixedSizeListBuilder);

	        var _this = _possibleConstructorReturn(this, (FixedSizeListBuilder.__proto__ || Object.getPrototypeOf(FixedSizeListBuilder)).apply(this, arguments));

	        _this._run = new run_1.Run();
	        return _this;
	    }

	    _createClass(FixedSizeListBuilder, [{
	        key: "setValue",
	        value: function setValue(index, value) {
	            _get(FixedSizeListBuilder.prototype.__proto__ || Object.getPrototypeOf(FixedSizeListBuilder.prototype), "setValue", this).call(this, index, this._run.bind(value));
	        }
	    }, {
	        key: "addChild",
	        value: function addChild(child) {
	            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';

	            if (this.numChildren > 0) {
	                throw new Error('FixedSizeListBuilder can only have one child.');
	            }
	            var childIndex = this.children.push(child);
	            this.type = new type_1.FixedSizeList(this.type.listSize, new schema_1.Field(name, child.type, true));
	            return childIndex;
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this._run.clear();
	            return _get(FixedSizeListBuilder.prototype.__proto__ || Object.getPrototypeOf(FixedSizeListBuilder.prototype), "clear", this).call(this);
	        }
	    }]);

	    return FixedSizeListBuilder;
	}(builder_1.Builder);

	exports.FixedSizeListBuilder = FixedSizeListBuilder;

	//# sourceMappingURL=fixedsizelist.js.map

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var schema_1 = __webpack_require__(97);
	var type_1 = __webpack_require__(74);
	var builder_1 = __webpack_require__(67);
	/** @ignore */

	var MapBuilder = function (_builder_1$VariableWi) {
	    _inherits(MapBuilder, _builder_1$VariableWi);

	    function MapBuilder() {
	        _classCallCheck(this, MapBuilder);

	        return _possibleConstructorReturn(this, (MapBuilder.__proto__ || Object.getPrototypeOf(MapBuilder)).apply(this, arguments));
	    }

	    _createClass(MapBuilder, [{
	        key: "set",
	        value: function set(index, value) {
	            return _get(MapBuilder.prototype.__proto__ || Object.getPrototypeOf(MapBuilder.prototype), "set", this).call(this, index, value);
	        }
	    }, {
	        key: "setValue",
	        value: function setValue(index, value) {
	            value = value instanceof Map ? value : new Map(Object.entries(value));
	            var pending = this._pending || (this._pending = new Map());
	            var current = pending.get(index);
	            current && (this._pendingLength -= current.size);
	            this._pendingLength += value.size;
	            pending.set(index, value);
	        }
	    }, {
	        key: "addChild",
	        value: function addChild(child) {
	            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "" + this.numChildren;

	            if (this.numChildren > 0) {
	                throw new Error('ListBuilder can only have one child.');
	            }
	            this.children[this.numChildren] = child;
	            this.type = new type_1.Map_(new schema_1.Field(name, child.type, true), this.type.keysSorted);
	            return this.numChildren - 1;
	        }
	    }, {
	        key: "_flushPending",
	        value: function _flushPending(pending) {
	            var _this2 = this;

	            var offsets = this._offsets;
	            var setValue = this._setValue;
	            pending.forEach(function (value, index) {
	                if (value === undefined) {
	                    offsets.set(index, 0);
	                } else {
	                    offsets.set(index, value.size);
	                    setValue(_this2, index, value);
	                }
	            });
	        }
	    }]);

	    return MapBuilder;
	}(builder_1.VariableWidthBuilder);

	exports.MapBuilder = MapBuilder;

	//# sourceMappingURL=map.js.map

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var schema_1 = __webpack_require__(97);
	var builder_1 = __webpack_require__(67);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var StructBuilder = function (_builder_1$Builder) {
	    _inherits(StructBuilder, _builder_1$Builder);

	    function StructBuilder() {
	        _classCallCheck(this, StructBuilder);

	        return _possibleConstructorReturn(this, (StructBuilder.__proto__ || Object.getPrototypeOf(StructBuilder)).apply(this, arguments));
	    }

	    _createClass(StructBuilder, [{
	        key: "addChild",
	        value: function addChild(child) {
	            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "" + this.numChildren;

	            var childIndex = this.children.push(child);
	            this.type = new type_1.Struct([].concat(_toConsumableArray(this.type.children), [new schema_1.Field(name, child.type, true)]));
	            return childIndex;
	        }
	    }]);

	    return StructBuilder;
	}(builder_1.Builder);

	exports.StructBuilder = StructBuilder;

	//# sourceMappingURL=struct.js.map

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var schema_1 = __webpack_require__(97);
	var buffer_1 = __webpack_require__(79);
	var builder_1 = __webpack_require__(67);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var UnionBuilder = function (_builder_1$Builder) {
	    _inherits(UnionBuilder, _builder_1$Builder);

	    function UnionBuilder(options) {
	        _classCallCheck(this, UnionBuilder);

	        var _this = _possibleConstructorReturn(this, (UnionBuilder.__proto__ || Object.getPrototypeOf(UnionBuilder)).call(this, options));

	        _this._typeIds = new buffer_1.DataBufferBuilder(new Int8Array(0), 1);
	        if (typeof options['valueToChildTypeId'] === 'function') {
	            _this._valueToChildTypeId = options['valueToChildTypeId'];
	        }
	        return _this;
	    }

	    _createClass(UnionBuilder, [{
	        key: "append",
	        value: function append(value, childTypeId) {
	            return this.set(this.length, value, childTypeId);
	        }
	    }, {
	        key: "set",
	        value: function set(index, value, childTypeId) {
	            if (childTypeId === undefined) {
	                childTypeId = this._valueToChildTypeId(this, value, index);
	            }
	            if (this.setValid(index, this.isValid(value))) {
	                this.setValue(index, value, childTypeId);
	            }
	            return this;
	        }
	        // @ts-ignore

	    }, {
	        key: "setValue",
	        value: function setValue(index, value, childTypeId) {
	            this._typeIds.set(index, childTypeId);
	            _get(UnionBuilder.prototype.__proto__ || Object.getPrototypeOf(UnionBuilder.prototype), "setValue", this).call(this, index, value);
	        }
	        // @ts-ignore

	    }, {
	        key: "addChild",
	        value: function addChild(child) {
	            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "" + this.children.length;

	            var childTypeId = this.children.push(child);
	            var _type = this.type,
	                children = _type.children,
	                mode = _type.mode,
	                typeIds = _type.typeIds;

	            var fields = [].concat(_toConsumableArray(children), [new schema_1.Field(name, child.type)]);
	            this.type = new type_1.Union(mode, [].concat(_toConsumableArray(typeIds), [childTypeId]), fields);
	            return childTypeId;
	        }
	        /** @ignore */
	        // @ts-ignore

	    }, {
	        key: "_valueToChildTypeId",
	        value: function _valueToChildTypeId(builder, value, offset) {
	            throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.");
	        }
	    }, {
	        key: "typeIdToChildIndex",
	        get: function get() {
	            return this.type.typeIdToChildIndex;
	        }
	    }]);

	    return UnionBuilder;
	}(builder_1.Builder);

	exports.UnionBuilder = UnionBuilder;
	/** @ignore */

	var SparseUnionBuilder = function (_UnionBuilder) {
	    _inherits(SparseUnionBuilder, _UnionBuilder);

	    function SparseUnionBuilder() {
	        _classCallCheck(this, SparseUnionBuilder);

	        return _possibleConstructorReturn(this, (SparseUnionBuilder.__proto__ || Object.getPrototypeOf(SparseUnionBuilder)).apply(this, arguments));
	    }

	    return SparseUnionBuilder;
	}(UnionBuilder);

	exports.SparseUnionBuilder = SparseUnionBuilder;
	/** @ignore */

	var DenseUnionBuilder = function (_UnionBuilder2) {
	    _inherits(DenseUnionBuilder, _UnionBuilder2);

	    function DenseUnionBuilder(options) {
	        _classCallCheck(this, DenseUnionBuilder);

	        var _this3 = _possibleConstructorReturn(this, (DenseUnionBuilder.__proto__ || Object.getPrototypeOf(DenseUnionBuilder)).call(this, options));

	        _this3._offsets = new buffer_1.DataBufferBuilder(new Int32Array(0));
	        return _this3;
	    }
	    /** @ignore */


	    _createClass(DenseUnionBuilder, [{
	        key: "setValue",
	        value: function setValue(index, value, childTypeId) {
	            var childIndex = this.type.typeIdToChildIndex[childTypeId];
	            this._offsets.set(index, this.getChildAt(childIndex).length);
	            return _get(DenseUnionBuilder.prototype.__proto__ || Object.getPrototypeOf(DenseUnionBuilder.prototype), "setValue", this).call(this, index, value, childTypeId);
	        }
	    }]);

	    return DenseUnionBuilder;
	}(UnionBuilder);

	exports.DenseUnionBuilder = DenseUnionBuilder;

	//# sourceMappingURL=union.js.map

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(68);
	var visitor_1 = __webpack_require__(76);
	var utf8_1 = __webpack_require__(62);
	var math_1 = __webpack_require__(87);
	var buffer_1 = __webpack_require__(60);
	var enum_1 = __webpack_require__(69);
	/** @ignore */

	var SetVisitor = function (_visitor_1$Visitor) {
	    _inherits(SetVisitor, _visitor_1$Visitor);

	    function SetVisitor() {
	        _classCallCheck(this, SetVisitor);

	        return _possibleConstructorReturn(this, (SetVisitor.__proto__ || Object.getPrototypeOf(SetVisitor)).apply(this, arguments));
	    }

	    return SetVisitor;
	}(visitor_1.Visitor);

	exports.SetVisitor = SetVisitor;
	/** @ignore */
	var setEpochMsToDays = function setEpochMsToDays(data, index, epochMs) {
	    data[index] = epochMs / 86400000 | 0;
	};
	/** @ignore */
	var setEpochMsToMillisecondsLong = function setEpochMsToMillisecondsLong(data, index, epochMs) {
	    data[index] = epochMs % 4294967296 | 0;
	    data[index + 1] = epochMs / 4294967296 | 0;
	};
	/** @ignore */
	var setEpochMsToMicrosecondsLong = function setEpochMsToMicrosecondsLong(data, index, epochMs) {
	    data[index] = epochMs * 1000 % 4294967296 | 0;
	    data[index + 1] = epochMs * 1000 / 4294967296 | 0;
	};
	/** @ignore */
	var setEpochMsToNanosecondsLong = function setEpochMsToNanosecondsLong(data, index, epochMs) {
	    data[index] = epochMs * 1000000 % 4294967296 | 0;
	    data[index + 1] = epochMs * 1000000 / 4294967296 | 0;
	};
	/** @ignore */
	var setVariableWidthBytes = function setVariableWidthBytes(values, valueOffsets, index, value) {
	    var x = valueOffsets[index],
	        y = valueOffsets[index + 1];

	    if (x != null && y != null) {
	        values.set(value.subarray(0, y - x), x);
	    }
	};
	/** @ignore */
	var setBool = function setBool(_ref, index, val) {
	    var offset = _ref.offset,
	        values = _ref.values;

	    var idx = offset + index;
	    val ? values[idx >> 3] |= 1 << idx % 8 : // true
	    values[idx >> 3] &= ~(1 << idx % 8); // false
	};
	/** @ignore */
	var setDateDay = function setDateDay(_ref2, index, value) {
	    var values = _ref2.values;
	    setEpochMsToDays(values, index, value.valueOf());
	};
	/** @ignore */
	var setDateMillisecond = function setDateMillisecond(_ref3, index, value) {
	    var values = _ref3.values;
	    setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());
	};
	/** @ignore */
	var setNumeric = function setNumeric(_ref4, index, value) {
	    var stride = _ref4.stride,
	        values = _ref4.values;
	    values[stride * index] = value;
	};
	/** @ignore */
	var setFloat16 = function setFloat16(_ref5, index, value) {
	    var stride = _ref5.stride,
	        values = _ref5.values;
	    values[stride * index] = math_1.float64ToUint16(value);
	};
	/** @ignore */
	var setNumericX2 = function setNumericX2(vector, index, value) {
	    switch (typeof value === "undefined" ? "undefined" : _typeof(value)) {
	        case 'bigint':
	            vector.values64[index] = value;
	            break;
	        case 'number':
	            vector.values[index * vector.stride] = value;
	            break;
	        default:
	            var val = value;
	            var stride = vector.stride,
	                ArrayType = vector.ArrayType;

	            var long = buffer_1.toArrayBufferView(ArrayType, val);
	            vector.values.set(long.subarray(0, stride), stride * index);
	    }
	};
	/** @ignore */
	var setFixedSizeBinary = function setFixedSizeBinary(_ref6, index, value) {
	    var stride = _ref6.stride,
	        values = _ref6.values;
	    values.set(value.subarray(0, stride), stride * index);
	};
	/** @ignore */
	var setBinary = function setBinary(_ref7, index, value) {
	    var values = _ref7.values,
	        valueOffsets = _ref7.valueOffsets;
	    return setVariableWidthBytes(values, valueOffsets, index, value);
	};
	/** @ignore */
	var setUtf8 = function setUtf8(_ref8, index, value) {
	    var values = _ref8.values,
	        valueOffsets = _ref8.valueOffsets;

	    setVariableWidthBytes(values, valueOffsets, index, utf8_1.encodeUtf8(value));
	};
	/* istanbul ignore next */
	/** @ignore */
	var setInt = function setInt(vector, index, value) {
	    vector.type.bitWidth < 64 ? setNumeric(vector, index, value) : setNumericX2(vector, index, value);
	};
	/* istanbul ignore next */
	/** @ignore */
	var setFloat = function setFloat(vector, index, value) {
	    vector.type.precision !== enum_1.Precision.HALF ? setNumeric(vector, index, value) : setFloat16(vector, index, value);
	};
	/* istanbul ignore next */
	var setDate = function setDate(vector, index, value) {
	    vector.type.unit === enum_1.DateUnit.DAY ? setDateDay(vector, index, value) : setDateMillisecond(vector, index, value);
	};
	/** @ignore */
	var setTimestampSecond = function setTimestampSecond(_ref9, index, value) {
	    var values = _ref9.values;
	    return setEpochMsToMillisecondsLong(values, index * 2, value / 1000);
	};
	/** @ignore */
	var setTimestampMillisecond = function setTimestampMillisecond(_ref10, index, value) {
	    var values = _ref10.values;
	    return setEpochMsToMillisecondsLong(values, index * 2, value);
	};
	/** @ignore */
	var setTimestampMicrosecond = function setTimestampMicrosecond(_ref11, index, value) {
	    var values = _ref11.values;
	    return setEpochMsToMicrosecondsLong(values, index * 2, value);
	};
	/** @ignore */
	var setTimestampNanosecond = function setTimestampNanosecond(_ref12, index, value) {
	    var values = _ref12.values;
	    return setEpochMsToNanosecondsLong(values, index * 2, value);
	};
	/* istanbul ignore next */
	/** @ignore */
	var setTimestamp = function setTimestamp(vector, index, value) {
	    switch (vector.type.unit) {
	        case enum_1.TimeUnit.SECOND:
	            return setTimestampSecond(vector, index, value);
	        case enum_1.TimeUnit.MILLISECOND:
	            return setTimestampMillisecond(vector, index, value);
	        case enum_1.TimeUnit.MICROSECOND:
	            return setTimestampMicrosecond(vector, index, value);
	        case enum_1.TimeUnit.NANOSECOND:
	            return setTimestampNanosecond(vector, index, value);
	    }
	};
	/** @ignore */
	var setTimeSecond = function setTimeSecond(_ref13, index, value) {
	    var values = _ref13.values,
	        stride = _ref13.stride;
	    values[stride * index] = value;
	};
	/** @ignore */
	var setTimeMillisecond = function setTimeMillisecond(_ref14, index, value) {
	    var values = _ref14.values,
	        stride = _ref14.stride;
	    values[stride * index] = value;
	};
	/** @ignore */
	var setTimeMicrosecond = function setTimeMicrosecond(_ref15, index, value) {
	    var values = _ref15.values;
	    values.set(value.subarray(0, 2), 2 * index);
	};
	/** @ignore */
	var setTimeNanosecond = function setTimeNanosecond(_ref16, index, value) {
	    var values = _ref16.values;
	    values.set(value.subarray(0, 2), 2 * index);
	};
	/* istanbul ignore next */
	/** @ignore */
	var setTime = function setTime(vector, index, value) {
	    switch (vector.type.unit) {
	        case enum_1.TimeUnit.SECOND:
	            return setTimeSecond(vector, index, value);
	        case enum_1.TimeUnit.MILLISECOND:
	            return setTimeMillisecond(vector, index, value);
	        case enum_1.TimeUnit.MICROSECOND:
	            return setTimeMicrosecond(vector, index, value);
	        case enum_1.TimeUnit.NANOSECOND:
	            return setTimeNanosecond(vector, index, value);
	    }
	};
	/** @ignore */
	var setDecimal = function setDecimal(_ref17, index, value) {
	    var values = _ref17.values;
	    values.set(value.subarray(0, 4), 4 * index);
	};
	/** @ignore */
	var setList = function setList(vector, index, value) {
	    var values = vector.getChildAt(0),
	        valueOffsets = vector.valueOffsets;
	    for (var idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {
	        values.set(itr++, value.get(++idx));
	    }
	};
	/** @ignore */
	var setMap = function setMap(vector, index, value) {
	    var values = vector.getChildAt(0),
	        valueOffsets = vector.valueOffsets;
	    var entries = value instanceof Map ? [].concat(_toConsumableArray(value)) : Object.entries(value);
	    for (var idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {
	        values.set(itr++, entries[++idx]);
	    }
	};
	/** @ignore */var _setStructArrayValue = function _setStructArrayValue(o, v) {
	    return function (c, _, i) {
	        return c && c.set(o, v[i]);
	    };
	};
	/** @ignore */var _setStructVectorValue = function _setStructVectorValue(o, v) {
	    return function (c, _, i) {
	        return c && c.set(o, v.get(i));
	    };
	};
	/** @ignore */var _setStructMapValue = function _setStructMapValue(o, v) {
	    return function (c, f, _) {
	        return c && c.set(o, v.get(f.name));
	    };
	};
	/** @ignore */var _setStructObjectValue = function _setStructObjectValue(o, v) {
	    return function (c, f, _) {
	        return c && c.set(o, v[f.name]);
	    };
	};
	/** @ignore */
	var setStruct = function setStruct(vector, index, value) {
	    var setValue = value instanceof Map ? _setStructMapValue(index, value) : value instanceof vector_1.Vector ? _setStructVectorValue(index, value) : Array.isArray(value) ? _setStructArrayValue(index, value) : _setStructObjectValue(index, value);
	    vector.type.children.forEach(function (f, i) {
	        return setValue(vector.getChildAt(i), f, i);
	    });
	};
	/* istanbul ignore next */
	/** @ignore */
	var setUnion = function setUnion(vector, index, value) {
	    vector.type.mode === enum_1.UnionMode.Dense ? setDenseUnion(vector, index, value) : setSparseUnion(vector, index, value);
	};
	/** @ignore */
	var setDenseUnion = function setDenseUnion(vector, index, value) {
	    var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];
	    var child = vector.getChildAt(childIndex);
	    child && child.set(vector.valueOffsets[index], value);
	};
	/** @ignore */
	var setSparseUnion = function setSparseUnion(vector, index, value) {
	    var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];
	    var child = vector.getChildAt(childIndex);
	    child && child.set(index, value);
	};
	/** @ignore */
	var setDictionary = function setDictionary(vector, index, value) {
	    var key = vector.getKey(index);
	    if (key !== null) {
	        vector.setValue(key, value);
	    }
	};
	/* istanbul ignore next */
	/** @ignore */
	var setIntervalValue = function setIntervalValue(vector, index, value) {
	    vector.type.unit === enum_1.IntervalUnit.DAY_TIME ? setIntervalDayTime(vector, index, value) : setIntervalYearMonth(vector, index, value);
	};
	/** @ignore */
	var setIntervalDayTime = function setIntervalDayTime(_ref18, index, value) {
	    var values = _ref18.values;
	    values.set(value.subarray(0, 2), 2 * index);
	};
	/** @ignore */
	var setIntervalYearMonth = function setIntervalYearMonth(_ref19, index, value) {
	    var values = _ref19.values;
	    values[index] = value[0] * 12 + value[1] % 12;
	};
	/** @ignore */
	var setFixedSizeList = function setFixedSizeList(vector, index, value) {
	    var child = vector.getChildAt(0),
	        stride = vector.stride;
	    for (var idx = -1, offset = index * stride; ++idx < stride;) {
	        child.set(offset + idx, value.get(idx));
	    }
	};
	SetVisitor.prototype.visitBool = setBool;
	SetVisitor.prototype.visitInt = setInt;
	SetVisitor.prototype.visitInt8 = setNumeric;
	SetVisitor.prototype.visitInt16 = setNumeric;
	SetVisitor.prototype.visitInt32 = setNumeric;
	SetVisitor.prototype.visitInt64 = setNumericX2;
	SetVisitor.prototype.visitUint8 = setNumeric;
	SetVisitor.prototype.visitUint16 = setNumeric;
	SetVisitor.prototype.visitUint32 = setNumeric;
	SetVisitor.prototype.visitUint64 = setNumericX2;
	SetVisitor.prototype.visitFloat = setFloat;
	SetVisitor.prototype.visitFloat16 = setFloat16;
	SetVisitor.prototype.visitFloat32 = setNumeric;
	SetVisitor.prototype.visitFloat64 = setNumeric;
	SetVisitor.prototype.visitUtf8 = setUtf8;
	SetVisitor.prototype.visitBinary = setBinary;
	SetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;
	SetVisitor.prototype.visitDate = setDate;
	SetVisitor.prototype.visitDateDay = setDateDay;
	SetVisitor.prototype.visitDateMillisecond = setDateMillisecond;
	SetVisitor.prototype.visitTimestamp = setTimestamp;
	SetVisitor.prototype.visitTimestampSecond = setTimestampSecond;
	SetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;
	SetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;
	SetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;
	SetVisitor.prototype.visitTime = setTime;
	SetVisitor.prototype.visitTimeSecond = setTimeSecond;
	SetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;
	SetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;
	SetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;
	SetVisitor.prototype.visitDecimal = setDecimal;
	SetVisitor.prototype.visitList = setList;
	SetVisitor.prototype.visitStruct = setStruct;
	SetVisitor.prototype.visitUnion = setUnion;
	SetVisitor.prototype.visitDenseUnion = setDenseUnion;
	SetVisitor.prototype.visitSparseUnion = setSparseUnion;
	SetVisitor.prototype.visitDictionary = setDictionary;
	SetVisitor.prototype.visitInterval = setIntervalValue;
	SetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;
	SetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;
	SetVisitor.prototype.visitFixedSizeList = setFixedSizeList;
	SetVisitor.prototype.visitMap = setMap;
	/** @ignore */
	exports.instance = new SetVisitor();

	//# sourceMappingURL=set.js.map

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var visitor_1 = __webpack_require__(76);
	var binary_1 = __webpack_require__(94);
	var bool_1 = __webpack_require__(80);
	var date_1 = __webpack_require__(82);
	var decimal_1 = __webpack_require__(83);
	var dictionary_1 = __webpack_require__(84);
	var fixedsizebinary_1 = __webpack_require__(85);
	var fixedsizelist_1 = __webpack_require__(103);
	var float_1 = __webpack_require__(86);
	var interval_1 = __webpack_require__(92);
	var int_1 = __webpack_require__(88);
	var list_1 = __webpack_require__(95);
	var map_1 = __webpack_require__(104);
	var null_1 = __webpack_require__(81);
	var struct_1 = __webpack_require__(105);
	var timestamp_1 = __webpack_require__(91);
	var time_1 = __webpack_require__(90);
	var union_1 = __webpack_require__(106);
	var utf8_1 = __webpack_require__(93);
	/** @ignore */

	var GetBuilderCtor = function (_visitor_1$Visitor) {
	    _inherits(GetBuilderCtor, _visitor_1$Visitor);

	    function GetBuilderCtor() {
	        _classCallCheck(this, GetBuilderCtor);

	        return _possibleConstructorReturn(this, (GetBuilderCtor.__proto__ || Object.getPrototypeOf(GetBuilderCtor)).apply(this, arguments));
	    }

	    _createClass(GetBuilderCtor, [{
	        key: "visitNull",
	        value: function visitNull() {
	            return null_1.NullBuilder;
	        }
	    }, {
	        key: "visitBool",
	        value: function visitBool() {
	            return bool_1.BoolBuilder;
	        }
	    }, {
	        key: "visitInt",
	        value: function visitInt() {
	            return int_1.IntBuilder;
	        }
	    }, {
	        key: "visitInt8",
	        value: function visitInt8() {
	            return int_1.Int8Builder;
	        }
	    }, {
	        key: "visitInt16",
	        value: function visitInt16() {
	            return int_1.Int16Builder;
	        }
	    }, {
	        key: "visitInt32",
	        value: function visitInt32() {
	            return int_1.Int32Builder;
	        }
	    }, {
	        key: "visitInt64",
	        value: function visitInt64() {
	            return int_1.Int64Builder;
	        }
	    }, {
	        key: "visitUint8",
	        value: function visitUint8() {
	            return int_1.Uint8Builder;
	        }
	    }, {
	        key: "visitUint16",
	        value: function visitUint16() {
	            return int_1.Uint16Builder;
	        }
	    }, {
	        key: "visitUint32",
	        value: function visitUint32() {
	            return int_1.Uint32Builder;
	        }
	    }, {
	        key: "visitUint64",
	        value: function visitUint64() {
	            return int_1.Uint64Builder;
	        }
	    }, {
	        key: "visitFloat",
	        value: function visitFloat() {
	            return float_1.FloatBuilder;
	        }
	    }, {
	        key: "visitFloat16",
	        value: function visitFloat16() {
	            return float_1.Float16Builder;
	        }
	    }, {
	        key: "visitFloat32",
	        value: function visitFloat32() {
	            return float_1.Float32Builder;
	        }
	    }, {
	        key: "visitFloat64",
	        value: function visitFloat64() {
	            return float_1.Float64Builder;
	        }
	    }, {
	        key: "visitUtf8",
	        value: function visitUtf8() {
	            return utf8_1.Utf8Builder;
	        }
	    }, {
	        key: "visitBinary",
	        value: function visitBinary() {
	            return binary_1.BinaryBuilder;
	        }
	    }, {
	        key: "visitFixedSizeBinary",
	        value: function visitFixedSizeBinary() {
	            return fixedsizebinary_1.FixedSizeBinaryBuilder;
	        }
	    }, {
	        key: "visitDate",
	        value: function visitDate() {
	            return date_1.DateBuilder;
	        }
	    }, {
	        key: "visitDateDay",
	        value: function visitDateDay() {
	            return date_1.DateDayBuilder;
	        }
	    }, {
	        key: "visitDateMillisecond",
	        value: function visitDateMillisecond() {
	            return date_1.DateMillisecondBuilder;
	        }
	    }, {
	        key: "visitTimestamp",
	        value: function visitTimestamp() {
	            return timestamp_1.TimestampBuilder;
	        }
	    }, {
	        key: "visitTimestampSecond",
	        value: function visitTimestampSecond() {
	            return timestamp_1.TimestampSecondBuilder;
	        }
	    }, {
	        key: "visitTimestampMillisecond",
	        value: function visitTimestampMillisecond() {
	            return timestamp_1.TimestampMillisecondBuilder;
	        }
	    }, {
	        key: "visitTimestampMicrosecond",
	        value: function visitTimestampMicrosecond() {
	            return timestamp_1.TimestampMicrosecondBuilder;
	        }
	    }, {
	        key: "visitTimestampNanosecond",
	        value: function visitTimestampNanosecond() {
	            return timestamp_1.TimestampNanosecondBuilder;
	        }
	    }, {
	        key: "visitTime",
	        value: function visitTime() {
	            return time_1.TimeBuilder;
	        }
	    }, {
	        key: "visitTimeSecond",
	        value: function visitTimeSecond() {
	            return time_1.TimeSecondBuilder;
	        }
	    }, {
	        key: "visitTimeMillisecond",
	        value: function visitTimeMillisecond() {
	            return time_1.TimeMillisecondBuilder;
	        }
	    }, {
	        key: "visitTimeMicrosecond",
	        value: function visitTimeMicrosecond() {
	            return time_1.TimeMicrosecondBuilder;
	        }
	    }, {
	        key: "visitTimeNanosecond",
	        value: function visitTimeNanosecond() {
	            return time_1.TimeNanosecondBuilder;
	        }
	    }, {
	        key: "visitDecimal",
	        value: function visitDecimal() {
	            return decimal_1.DecimalBuilder;
	        }
	    }, {
	        key: "visitList",
	        value: function visitList() {
	            return list_1.ListBuilder;
	        }
	    }, {
	        key: "visitStruct",
	        value: function visitStruct() {
	            return struct_1.StructBuilder;
	        }
	    }, {
	        key: "visitUnion",
	        value: function visitUnion() {
	            return union_1.UnionBuilder;
	        }
	    }, {
	        key: "visitDenseUnion",
	        value: function visitDenseUnion() {
	            return union_1.DenseUnionBuilder;
	        }
	    }, {
	        key: "visitSparseUnion",
	        value: function visitSparseUnion() {
	            return union_1.SparseUnionBuilder;
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary() {
	            return dictionary_1.DictionaryBuilder;
	        }
	    }, {
	        key: "visitInterval",
	        value: function visitInterval() {
	            return interval_1.IntervalBuilder;
	        }
	    }, {
	        key: "visitIntervalDayTime",
	        value: function visitIntervalDayTime() {
	            return interval_1.IntervalDayTimeBuilder;
	        }
	    }, {
	        key: "visitIntervalYearMonth",
	        value: function visitIntervalYearMonth() {
	            return interval_1.IntervalYearMonthBuilder;
	        }
	    }, {
	        key: "visitFixedSizeList",
	        value: function visitFixedSizeList() {
	            return fixedsizelist_1.FixedSizeListBuilder;
	        }
	    }, {
	        key: "visitMap",
	        value: function visitMap() {
	            return map_1.MapBuilder;
	        }
	    }]);

	    return GetBuilderCtor;
	}(visitor_1.Visitor);

	exports.GetBuilderCtor = GetBuilderCtor;
	/** @ignore */
	exports.instance = new GetBuilderCtor();

	//# sourceMappingURL=builderctor.js.map

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _asyncGenerator = function () { function AwaitValue(value) { this.value = value; } function AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; if (value instanceof AwaitValue) { Promise.resolve(value.value).then(function (arg) { resume("next", arg); }, function (arg) { resume("throw", arg); }); } else { settle(result.done ? "return" : "normal", result.value); } } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } } if (typeof Symbol === "function" && Symbol.asyncIterator) { AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; } AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); }; AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); }; AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); }; return { wrap: function wrap(fn) { return function () { return new AsyncGenerator(fn.apply(this, arguments)); }; }, await: function _await(value) { return new AwaitValue(value); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	/** @ignore */
	var readAllAsync = function () {
	    var _ref18 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(source) {
	        var reader;
	        return regeneratorRuntime.wrap(function _callee14$(_context15) {
	            while (1) {
	                switch (_context15.prev = _context15.next) {
	                    case 0:
	                        _context15.next = 2;
	                        return _asyncGenerator.await(RecordBatchReader.from(source));

	                    case 2:
	                        reader = _context15.sent;
	                        _context15.prev = 3;
	                        _context15.next = 6;
	                        return _asyncGenerator.await(reader.open({ autoDestroy: false }));

	                    case 6:
	                        if (_context15.sent.closed) {
	                            _context15.next = 12;
	                            break;
	                        }

	                    case 7:
	                        _context15.next = 9;
	                        return reader;

	                    case 9:
	                        _context15.next = 11;
	                        return _asyncGenerator.await(reader.reset().open());

	                    case 11:
	                        if (!_context15.sent.closed) {
	                            _context15.next = 7;
	                            break;
	                        }

	                    case 12:
	                        _context15.prev = 12;
	                        _context15.next = 15;
	                        return _asyncGenerator.await(reader.cancel());

	                    case 15:
	                        return _context15.finish(12);

	                    case 16:
	                    case "end":
	                        return _context15.stop();
	                }
	            }
	        }, _callee14, this, [[3,, 12, 16]]);
	    }));

	    return function readAllAsync(_x10) {
	        return _ref18.apply(this, arguments);
	    };
	}();
	/** @ignore */


	/** @ignore */
	var fromAsyncByteStream = function () {
	    var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(source) {
	        var bytes;
	        return regeneratorRuntime.wrap(function _callee17$(_context18) {
	            while (1) {
	                switch (_context18.prev = _context18.next) {
	                    case 0:
	                        _context18.next = 2;
	                        return source.peek(message_1.magicLength + 7 & ~7);

	                    case 2:
	                        bytes = _context18.sent;

	                        if (!(bytes && bytes.byteLength >= 4)) {
	                            _context18.next = 18;
	                            break;
	                        }

	                        if (message_1.checkForMagicArrowString(bytes)) {
	                            _context18.next = 8;
	                            break;
	                        }

	                        _context18.t1 = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source));
	                        _context18.next = 15;
	                        break;

	                    case 8:
	                        _context18.t2 = RecordBatchFileReader;
	                        _context18.t3 = RecordBatchFileReaderImpl;
	                        _context18.next = 12;
	                        return source.read();

	                    case 12:
	                        _context18.t4 = _context18.sent;
	                        _context18.t5 = new _context18.t3(_context18.t4);
	                        _context18.t1 = new _context18.t2(_context18.t5);

	                    case 15:
	                        _context18.t0 = _context18.t1;
	                        _context18.next = 19;
	                        break;

	                    case 18:
	                        _context18.t0 = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(_asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
	                            return regeneratorRuntime.wrap(function _callee16$(_context17) {
	                                while (1) {
	                                    switch (_context17.prev = _context17.next) {
	                                        case 0:
	                                        case "end":
	                                            return _context17.stop();
	                                    }
	                                }
	                            }, _callee16, this);
	                        }))()));

	                    case 19:
	                        return _context18.abrupt("return", _context18.t0);

	                    case 20:
	                    case "end":
	                        return _context18.stop();
	                }
	            }
	        }, _callee17, this);
	    }));

	    return function fromAsyncByteStream(_x11) {
	        return _ref19.apply(this, arguments);
	    };
	}();
	/** @ignore */


	var fromFileHandle = function () {
	    var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(source) {
	        var _ref22, size, file;

	        return regeneratorRuntime.wrap(function _callee18$(_context19) {
	            while (1) {
	                switch (_context19.prev = _context19.next) {
	                    case 0:
	                        _context19.next = 2;
	                        return source.stat();

	                    case 2:
	                        _ref22 = _context19.sent;
	                        size = _ref22.size;
	                        file = new file_2.AsyncRandomAccessFile(source, size);

	                        if (!(size >= message_1.magicX2AndPadding)) {
	                            _context19.next = 12;
	                            break;
	                        }

	                        _context19.t0 = message_1;
	                        _context19.next = 9;
	                        return file.readAt(0, message_1.magicLength + 7 & ~7);

	                    case 9:
	                        _context19.t1 = _context19.sent;

	                        if (!_context19.t0.checkForMagicArrowString.call(_context19.t0, _context19.t1)) {
	                            _context19.next = 12;
	                            break;
	                        }

	                        return _context19.abrupt("return", new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file)));

	                    case 12:
	                        return _context19.abrupt("return", new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file)));

	                    case 13:
	                    case "end":
	                        return _context19.stop();
	                }
	            }
	        }, _callee18, this);
	    }));

	    return function fromFileHandle(_x12) {
	        return _ref21.apply(this, arguments);
	    };
	}();

	//# sourceMappingURL=reader.js.map


	var _marked = /*#__PURE__*/regeneratorRuntime.mark(readAllSync);

	function _asyncIterator(iterable) { if (typeof Symbol === "function") { if (Symbol.asyncIterator) { var method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { return iterable[Symbol.iterator](); } } throw new TypeError("Object is not async iterable"); }

	function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { return pump("return", value); }; } return iter; }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(68);
	var enum_1 = __webpack_require__(69);
	var file_1 = __webpack_require__(110);
	var adapters_1 = __webpack_require__(59);
	var stream_1 = __webpack_require__(112);
	var file_2 = __webpack_require__(113);
	var vectorloader_1 = __webpack_require__(114);
	var recordbatch_1 = __webpack_require__(116);
	var interfaces_1 = __webpack_require__(65);
	var message_1 = __webpack_require__(119);
	var compat_1 = __webpack_require__(64);

	var RecordBatchReader = function (_interfaces_1$Readabl) {
	    _inherits(RecordBatchReader, _interfaces_1$Readabl);

	    function RecordBatchReader(impl) {
	        _classCallCheck(this, RecordBatchReader);

	        var _this = _possibleConstructorReturn(this, (RecordBatchReader.__proto__ || Object.getPrototypeOf(RecordBatchReader)).call(this));

	        _this._impl = impl;
	        return _this;
	    }

	    _createClass(RecordBatchReader, [{
	        key: "isSync",
	        value: function isSync() {
	            return this._impl.isSync();
	        }
	    }, {
	        key: "isAsync",
	        value: function isAsync() {
	            return this._impl.isAsync();
	        }
	    }, {
	        key: "isFile",
	        value: function isFile() {
	            return this._impl.isFile();
	        }
	    }, {
	        key: "isStream",
	        value: function isStream() {
	            return this._impl.isStream();
	        }
	    }, {
	        key: "next",
	        value: function next() {
	            return this._impl.next();
	        }
	    }, {
	        key: "throw",
	        value: function _throw(value) {
	            return this._impl.throw(value);
	        }
	    }, {
	        key: "return",
	        value: function _return(value) {
	            return this._impl.return(value);
	        }
	    }, {
	        key: "cancel",
	        value: function cancel() {
	            return this._impl.cancel();
	        }
	    }, {
	        key: "reset",
	        value: function reset(schema) {
	            this._impl.reset(schema);
	            this._DOMStream = undefined;
	            this._nodeStream = undefined;
	            return this;
	        }
	    }, {
	        key: "open",
	        value: function open(options) {
	            var _this2 = this;

	            var opening = this._impl.open(options);
	            return compat_1.isPromise(opening) ? opening.then(function () {
	                return _this2;
	            }) : this;
	        }
	    }, {
	        key: "readRecordBatch",
	        value: function readRecordBatch(index) {
	            return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;
	        }
	    }, {
	        key: Symbol.iterator,
	        value: function value() {
	            return this._impl[Symbol.iterator]();
	        }
	    }, {
	        key: Symbol.asyncIterator,
	        value: function value() {
	            return this._impl[Symbol.asyncIterator]();
	        }
	    }, {
	        key: "toDOMStream",
	        value: function toDOMStream() {
	            var _this3 = this;

	            return adapters_1.default.toDOMStream(this.isSync() ? _defineProperty({}, Symbol.iterator, function () {
	                return _this3;
	            }) : _defineProperty({}, Symbol.asyncIterator, function () {
	                return _this3;
	            }));
	        }
	    }, {
	        key: "toNodeStream",
	        value: function toNodeStream() {
	            var _this4 = this;

	            return adapters_1.default.toNodeStream(this.isSync() ? _defineProperty({}, Symbol.iterator, function () {
	                return _this4;
	            }) : _defineProperty({}, Symbol.asyncIterator, function () {
	                return _this4;
	            }), { objectMode: true });
	        }
	        /** @nocollapse */
	        // @ts-ignore

	    }, {
	        key: "closed",
	        get: function get() {
	            return this._impl.closed;
	        }
	    }, {
	        key: "schema",
	        get: function get() {
	            return this._impl.schema;
	        }
	    }, {
	        key: "autoDestroy",
	        get: function get() {
	            return this._impl.autoDestroy;
	        }
	    }, {
	        key: "dictionaries",
	        get: function get() {
	            return this._impl.dictionaries;
	        }
	    }, {
	        key: "numDictionaries",
	        get: function get() {
	            return this._impl.numDictionaries;
	        }
	    }, {
	        key: "numRecordBatches",
	        get: function get() {
	            return this._impl.numRecordBatches;
	        }
	    }, {
	        key: "footer",
	        get: function get() {
	            return this._impl.isFile() ? this._impl.footer : null;
	        }
	    }], [{
	        key: "throughNode",
	        value: function throughNode(options) {
	            throw new Error("\"throughNode\" not available in this environment");
	        }
	        /** @nocollapse */

	    }, {
	        key: "throughDOM",
	        value: function throughDOM(
	        // @ts-ignore
	        writableStrategy,
	        // @ts-ignore
	        readableStrategy) {
	            throw new Error("\"throughDOM\" not available in this environment");
	        }
	        /** @nocollapse */

	    }, {
	        key: "from",
	        value: function from(source) {
	            var _this5 = this;

	            if (source instanceof RecordBatchReader) {
	                return source;
	            } else if (compat_1.isArrowJSON(source)) {
	                return fromArrowJSON(source);
	            } else if (compat_1.isFileHandle(source)) {
	                return fromFileHandle(source);
	            } else if (compat_1.isPromise(source)) {
	                return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                    return regeneratorRuntime.wrap(function _callee$(_context) {
	                        while (1) {
	                            switch (_context.prev = _context.next) {
	                                case 0:
	                                    _context.t0 = RecordBatchReader;
	                                    _context.next = 3;
	                                    return source;

	                                case 3:
	                                    _context.t1 = _context.sent;
	                                    _context.next = 6;
	                                    return _context.t0.from.call(_context.t0, _context.t1);

	                                case 6:
	                                    return _context.abrupt("return", _context.sent);

	                                case 7:
	                                case "end":
	                                    return _context.stop();
	                            }
	                        }
	                    }, _callee, _this5);
	                }))();
	            } else if (compat_1.isFetchResponse(source) || compat_1.isReadableDOMStream(source) || compat_1.isReadableNodeStream(source) || compat_1.isAsyncIterable(source)) {
	                return fromAsyncByteStream(new stream_1.AsyncByteStream(source));
	            }
	            return fromByteStream(new stream_1.ByteStream(source));
	        }
	        /** @nocollapse */

	    }, {
	        key: "readAll",
	        value: function readAll(source) {
	            if (source instanceof RecordBatchReader) {
	                return source.isSync() ? readAllSync(source) : readAllAsync(source);
	            } else if (compat_1.isArrowJSON(source) || ArrayBuffer.isView(source) || compat_1.isIterable(source) || compat_1.isIteratorResult(source)) {
	                return readAllSync(source);
	            }
	            return readAllAsync(source);
	        }
	    }]);

	    return RecordBatchReader;
	}(interfaces_1.ReadableInterop);

	exports.RecordBatchReader = RecordBatchReader;
	//
	// Since TS is a structural type system, we define the following subclass stubs
	// so that concrete types exist to associate with with the interfaces below.
	//
	// The implementation for each RecordBatchReader is hidden away in the set of
	// `RecordBatchReaderImpl` classes in the second half of this file. This allows
	// us to export a single RecordBatchReader class, and swap out the impl based
	// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.
	//
	// Async/await makes our job a bit harder, since it forces everything to be
	// either fully sync or fully async. This is why the logic for the reader impls
	// has been duplicated into both sync and async variants. Since the RBR
	// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for
	// example will return async/await-friendly Promises, but one with a (sync)
	// RecordBatchStreamReaderImpl will always return values. Nothing should be
	// different about their logic, aside from the async handling. This is also why
	// this code looks highly structured, as it should be nearly identical and easy
	// to follow.
	//
	/** @ignore */

	var RecordBatchStreamReader = function (_RecordBatchReader) {
	    _inherits(RecordBatchStreamReader, _RecordBatchReader);

	    function RecordBatchStreamReader(_impl) {
	        _classCallCheck(this, RecordBatchStreamReader);

	        var _this6 = _possibleConstructorReturn(this, (RecordBatchStreamReader.__proto__ || Object.getPrototypeOf(RecordBatchStreamReader)).call(this, _impl));

	        _this6._impl = _impl;
	        return _this6;
	    }

	    _createClass(RecordBatchStreamReader, [{
	        key: Symbol.iterator,
	        value: function value() {
	            return this._impl[Symbol.iterator]();
	        }
	    }, {
	        key: Symbol.asyncIterator,
	        value: function () {
	            var _ref6 = _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(this[Symbol.iterator]()), _asyncGenerator.await), "t0", 1);

	                            case 1:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));

	            function value() {
	                return _ref6.apply(this, arguments);
	            }

	            return value;
	        }()
	    }]);

	    return RecordBatchStreamReader;
	}(RecordBatchReader);

	exports.RecordBatchStreamReader = RecordBatchStreamReader;
	/** @ignore */

	var AsyncRecordBatchStreamReader = function (_RecordBatchReader2) {
	    _inherits(AsyncRecordBatchStreamReader, _RecordBatchReader2);

	    function AsyncRecordBatchStreamReader(_impl) {
	        _classCallCheck(this, AsyncRecordBatchStreamReader);

	        var _this7 = _possibleConstructorReturn(this, (AsyncRecordBatchStreamReader.__proto__ || Object.getPrototypeOf(AsyncRecordBatchStreamReader)).call(this, _impl));

	        _this7._impl = _impl;
	        return _this7;
	    }

	    _createClass(AsyncRecordBatchStreamReader, [{
	        key: Symbol.iterator,
	        value: function value() {
	            throw new Error("AsyncRecordBatchStreamReader is not Iterable");
	        }
	    }, {
	        key: Symbol.asyncIterator,
	        value: function value() {
	            return this._impl[Symbol.asyncIterator]();
	        }
	    }]);

	    return AsyncRecordBatchStreamReader;
	}(RecordBatchReader);

	exports.AsyncRecordBatchStreamReader = AsyncRecordBatchStreamReader;
	/** @ignore */

	var RecordBatchFileReader = function (_RecordBatchStreamRea) {
	    _inherits(RecordBatchFileReader, _RecordBatchStreamRea);

	    function RecordBatchFileReader(_impl) {
	        _classCallCheck(this, RecordBatchFileReader);

	        var _this8 = _possibleConstructorReturn(this, (RecordBatchFileReader.__proto__ || Object.getPrototypeOf(RecordBatchFileReader)).call(this, _impl));

	        _this8._impl = _impl;
	        return _this8;
	    }

	    return RecordBatchFileReader;
	}(RecordBatchStreamReader);

	exports.RecordBatchFileReader = RecordBatchFileReader;
	/** @ignore */

	var AsyncRecordBatchFileReader = function (_AsyncRecordBatchStre) {
	    _inherits(AsyncRecordBatchFileReader, _AsyncRecordBatchStre);

	    function AsyncRecordBatchFileReader(_impl) {
	        _classCallCheck(this, AsyncRecordBatchFileReader);

	        var _this9 = _possibleConstructorReturn(this, (AsyncRecordBatchFileReader.__proto__ || Object.getPrototypeOf(AsyncRecordBatchFileReader)).call(this, _impl));

	        _this9._impl = _impl;
	        return _this9;
	    }

	    return AsyncRecordBatchFileReader;
	}(AsyncRecordBatchStreamReader);

	exports.AsyncRecordBatchFileReader = AsyncRecordBatchFileReader;
	/** @ignore */

	var RecordBatchReaderImpl = function () {
	    function RecordBatchReaderImpl() {
	        var dictionaries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();

	        _classCallCheck(this, RecordBatchReaderImpl);

	        this.closed = false;
	        this.autoDestroy = true;
	        this._dictionaryIndex = 0;
	        this._recordBatchIndex = 0;
	        this.dictionaries = dictionaries;
	    }

	    _createClass(RecordBatchReaderImpl, [{
	        key: "isSync",
	        value: function isSync() {
	            return false;
	        }
	    }, {
	        key: "isAsync",
	        value: function isAsync() {
	            return false;
	        }
	    }, {
	        key: "isFile",
	        value: function isFile() {
	            return false;
	        }
	    }, {
	        key: "isStream",
	        value: function isStream() {
	            return false;
	        }
	    }, {
	        key: "reset",
	        value: function reset(schema) {
	            this._dictionaryIndex = 0;
	            this._recordBatchIndex = 0;
	            this.schema = schema;
	            this.dictionaries = new Map();
	            return this;
	        }
	    }, {
	        key: "_loadRecordBatch",
	        value: function _loadRecordBatch(header, body) {
	            return new recordbatch_1.RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));
	        }
	    }, {
	        key: "_loadDictionaryBatch",
	        value: function _loadDictionaryBatch(header, body) {
	            var id = header.id,
	                isDelta = header.isDelta,
	                data = header.data;
	            var dictionaries = this.dictionaries,
	                schema = this.schema;

	            var dictionary = dictionaries.get(id);
	            if (isDelta || !dictionary) {
	                var type = schema.dictionaries.get(id);
	                return dictionary && isDelta ? dictionary.concat(vector_1.Vector.new(this._loadVectors(data, body, [type])[0])) : vector_1.Vector.new(this._loadVectors(data, body, [type])[0]);
	            }
	            return dictionary;
	        }
	    }, {
	        key: "_loadVectors",
	        value: function _loadVectors(header, body, types) {
	            return new vectorloader_1.VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
	        }
	    }, {
	        key: "numDictionaries",
	        get: function get() {
	            return this._dictionaryIndex;
	        }
	    }, {
	        key: "numRecordBatches",
	        get: function get() {
	            return this._recordBatchIndex;
	        }
	    }]);

	    return RecordBatchReaderImpl;
	}();
	/** @ignore */


	var RecordBatchStreamReaderImpl = function (_RecordBatchReaderImp) {
	    _inherits(RecordBatchStreamReaderImpl, _RecordBatchReaderImp);

	    function RecordBatchStreamReaderImpl(source, dictionaries) {
	        _classCallCheck(this, RecordBatchStreamReaderImpl);

	        var _this10 = _possibleConstructorReturn(this, (RecordBatchStreamReaderImpl.__proto__ || Object.getPrototypeOf(RecordBatchStreamReaderImpl)).call(this, dictionaries));

	        _this10._reader = !compat_1.isArrowJSON(source) ? new message_1.MessageReader(_this10._handle = source) : new message_1.JSONMessageReader(_this10._handle = source);
	        return _this10;
	    }

	    _createClass(RecordBatchStreamReaderImpl, [{
	        key: "isSync",
	        value: function isSync() {
	            return true;
	        }
	    }, {
	        key: "isStream",
	        value: function isStream() {
	            return true;
	        }
	    }, {
	        key: Symbol.iterator,
	        value: function value() {
	            return this;
	        }
	    }, {
	        key: "cancel",
	        value: function cancel() {
	            if (!this.closed && (this.closed = true)) {
	                this.reset()._reader.return();
	                this._reader = null;
	                this.dictionaries = null;
	            }
	        }
	    }, {
	        key: "open",
	        value: function open(options) {
	            if (!this.closed) {
	                this.autoDestroy = shouldAutoDestroy(this, options);
	                if (!(this.schema || (this.schema = this._reader.readSchema()))) {
	                    this.cancel();
	                }
	            }
	            return this;
	        }
	    }, {
	        key: "throw",
	        value: function _throw(value) {
	            if (!this.closed && this.autoDestroy && (this.closed = true)) {
	                return this.reset()._reader.throw(value);
	            }
	            return interfaces_1.ITERATOR_DONE;
	        }
	    }, {
	        key: "return",
	        value: function _return(value) {
	            if (!this.closed && this.autoDestroy && (this.closed = true)) {
	                return this.reset()._reader.return(value);
	            }
	            return interfaces_1.ITERATOR_DONE;
	        }
	    }, {
	        key: "next",
	        value: function next() {
	            if (this.closed) {
	                return interfaces_1.ITERATOR_DONE;
	            }
	            var message = void 0,
	                reader = this._reader;
	            while (message = this._readNextMessageAndValidate()) {
	                if (message.isSchema()) {
	                    this.reset(message.header());
	                } else if (message.isRecordBatch()) {
	                    this._recordBatchIndex++;
	                    var header = message.header();
	                    var buffer = reader.readMessageBody(message.bodyLength);
	                    var recordBatch = this._loadRecordBatch(header, buffer);
	                    return { done: false, value: recordBatch };
	                } else if (message.isDictionaryBatch()) {
	                    this._dictionaryIndex++;
	                    var _header = message.header();
	                    var _buffer = reader.readMessageBody(message.bodyLength);
	                    var vector = this._loadDictionaryBatch(_header, _buffer);
	                    this.dictionaries.set(_header.id, vector);
	                }
	            }
	            if (this.schema && this._recordBatchIndex === 0) {
	                this._recordBatchIndex++;
	                return { done: false, value: new recordbatch_1._InternalEmptyPlaceholderRecordBatch(this.schema) };
	            }
	            return this.return();
	        }
	    }, {
	        key: "_readNextMessageAndValidate",
	        value: function _readNextMessageAndValidate(type) {
	            return this._reader.readMessage(type);
	        }
	    }]);

	    return RecordBatchStreamReaderImpl;
	}(RecordBatchReaderImpl);
	/** @ignore */


	var AsyncRecordBatchStreamReaderImpl = function (_RecordBatchReaderImp2) {
	    _inherits(AsyncRecordBatchStreamReaderImpl, _RecordBatchReaderImp2);

	    function AsyncRecordBatchStreamReaderImpl(source, dictionaries) {
	        _classCallCheck(this, AsyncRecordBatchStreamReaderImpl);

	        var _this11 = _possibleConstructorReturn(this, (AsyncRecordBatchStreamReaderImpl.__proto__ || Object.getPrototypeOf(AsyncRecordBatchStreamReaderImpl)).call(this, dictionaries));

	        _this11._reader = new message_1.AsyncMessageReader(_this11._handle = source);
	        return _this11;
	    }

	    _createClass(AsyncRecordBatchStreamReaderImpl, [{
	        key: "isAsync",
	        value: function isAsync() {
	            return true;
	        }
	    }, {
	        key: "isStream",
	        value: function isStream() {
	            return true;
	        }
	    }, {
	        key: Symbol.asyncIterator,
	        value: function value() {
	            return this;
	        }
	    }, {
	        key: "cancel",
	        value: function () {
	            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                if (!(!this.closed && (this.closed = true))) {
	                                    _context3.next = 5;
	                                    break;
	                                }

	                                _context3.next = 3;
	                                return this.reset()._reader.return();

	                            case 3:
	                                this._reader = null;
	                                this.dictionaries = null;

	                            case 5:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));

	            function cancel() {
	                return _ref7.apply(this, arguments);
	            }

	            return cancel;
	        }()
	    }, {
	        key: "open",
	        value: function () {
	            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(options) {
	                return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                if (this.closed) {
	                                    _context4.next = 10;
	                                    break;
	                                }

	                                this.autoDestroy = shouldAutoDestroy(this, options);
	                                _context4.t0 = this.schema;

	                                if (_context4.t0) {
	                                    _context4.next = 7;
	                                    break;
	                                }

	                                _context4.next = 6;
	                                return this._reader.readSchema();

	                            case 6:
	                                _context4.t0 = this.schema = _context4.sent;

	                            case 7:
	                                if (_context4.t0) {
	                                    _context4.next = 10;
	                                    break;
	                                }

	                                _context4.next = 10;
	                                return this.cancel();

	                            case 10:
	                                return _context4.abrupt("return", this);

	                            case 11:
	                            case "end":
	                                return _context4.stop();
	                        }
	                    }
	                }, _callee4, this);
	            }));

	            function open(_x2) {
	                return _ref8.apply(this, arguments);
	            }

	            return open;
	        }()
	    }, {
	        key: "throw",
	        value: function () {
	            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(value) {
	                return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                if (!(!this.closed && this.autoDestroy && (this.closed = true))) {
	                                    _context5.next = 4;
	                                    break;
	                                }

	                                _context5.next = 3;
	                                return this.reset()._reader.throw(value);

	                            case 3:
	                                return _context5.abrupt("return", _context5.sent);

	                            case 4:
	                                return _context5.abrupt("return", interfaces_1.ITERATOR_DONE);

	                            case 5:
	                            case "end":
	                                return _context5.stop();
	                        }
	                    }
	                }, _callee5, this);
	            }));

	            function _throw(_x3) {
	                return _ref9.apply(this, arguments);
	            }

	            return _throw;
	        }()
	    }, {
	        key: "return",
	        value: function () {
	            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(value) {
	                return regeneratorRuntime.wrap(function _callee6$(_context6) {
	                    while (1) {
	                        switch (_context6.prev = _context6.next) {
	                            case 0:
	                                if (!(!this.closed && this.autoDestroy && (this.closed = true))) {
	                                    _context6.next = 4;
	                                    break;
	                                }

	                                _context6.next = 3;
	                                return this.reset()._reader.return(value);

	                            case 3:
	                                return _context6.abrupt("return", _context6.sent);

	                            case 4:
	                                return _context6.abrupt("return", interfaces_1.ITERATOR_DONE);

	                            case 5:
	                            case "end":
	                                return _context6.stop();
	                        }
	                    }
	                }, _callee6, this);
	            }));

	            function _return(_x4) {
	                return _ref10.apply(this, arguments);
	            }

	            return _return;
	        }()
	    }, {
	        key: "next",
	        value: function () {
	            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
	                var message, reader, header, buffer, recordBatch, _header2, _buffer2, vector;

	                return regeneratorRuntime.wrap(function _callee7$(_context7) {
	                    while (1) {
	                        switch (_context7.prev = _context7.next) {
	                            case 0:
	                                if (!this.closed) {
	                                    _context7.next = 2;
	                                    break;
	                                }

	                                return _context7.abrupt("return", interfaces_1.ITERATOR_DONE);

	                            case 2:
	                                message = void 0, reader = this._reader;

	                            case 3:
	                                _context7.next = 5;
	                                return this._readNextMessageAndValidate();

	                            case 5:
	                                if (!(message = _context7.sent)) {
	                                    _context7.next = 31;
	                                    break;
	                                }

	                                if (!message.isSchema()) {
	                                    _context7.next = 11;
	                                    break;
	                                }

	                                _context7.next = 9;
	                                return this.reset(message.header());

	                            case 9:
	                                _context7.next = 29;
	                                break;

	                            case 11:
	                                if (!message.isRecordBatch()) {
	                                    _context7.next = 21;
	                                    break;
	                                }

	                                this._recordBatchIndex++;
	                                header = message.header();
	                                _context7.next = 16;
	                                return reader.readMessageBody(message.bodyLength);

	                            case 16:
	                                buffer = _context7.sent;
	                                recordBatch = this._loadRecordBatch(header, buffer);
	                                return _context7.abrupt("return", { done: false, value: recordBatch });

	                            case 21:
	                                if (!message.isDictionaryBatch()) {
	                                    _context7.next = 29;
	                                    break;
	                                }

	                                this._dictionaryIndex++;
	                                _header2 = message.header();
	                                _context7.next = 26;
	                                return reader.readMessageBody(message.bodyLength);

	                            case 26:
	                                _buffer2 = _context7.sent;
	                                vector = this._loadDictionaryBatch(_header2, _buffer2);

	                                this.dictionaries.set(_header2.id, vector);

	                            case 29:
	                                _context7.next = 3;
	                                break;

	                            case 31:
	                                if (!(this.schema && this._recordBatchIndex === 0)) {
	                                    _context7.next = 34;
	                                    break;
	                                }

	                                this._recordBatchIndex++;
	                                return _context7.abrupt("return", { done: false, value: new recordbatch_1._InternalEmptyPlaceholderRecordBatch(this.schema) });

	                            case 34:
	                                _context7.next = 36;
	                                return this.return();

	                            case 36:
	                                return _context7.abrupt("return", _context7.sent);

	                            case 37:
	                            case "end":
	                                return _context7.stop();
	                        }
	                    }
	                }, _callee7, this);
	            }));

	            function next() {
	                return _ref11.apply(this, arguments);
	            }

	            return next;
	        }()
	    }, {
	        key: "_readNextMessageAndValidate",
	        value: function () {
	            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(type) {
	                return regeneratorRuntime.wrap(function _callee8$(_context8) {
	                    while (1) {
	                        switch (_context8.prev = _context8.next) {
	                            case 0:
	                                _context8.next = 2;
	                                return this._reader.readMessage(type);

	                            case 2:
	                                return _context8.abrupt("return", _context8.sent);

	                            case 3:
	                            case "end":
	                                return _context8.stop();
	                        }
	                    }
	                }, _callee8, this);
	            }));

	            function _readNextMessageAndValidate(_x5) {
	                return _ref12.apply(this, arguments);
	            }

	            return _readNextMessageAndValidate;
	        }()
	    }]);

	    return AsyncRecordBatchStreamReaderImpl;
	}(RecordBatchReaderImpl);
	/** @ignore */


	var RecordBatchFileReaderImpl = function (_RecordBatchStreamRea2) {
	    _inherits(RecordBatchFileReaderImpl, _RecordBatchStreamRea2);

	    function RecordBatchFileReaderImpl(source, dictionaries) {
	        _classCallCheck(this, RecordBatchFileReaderImpl);

	        return _possibleConstructorReturn(this, (RecordBatchFileReaderImpl.__proto__ || Object.getPrototypeOf(RecordBatchFileReaderImpl)).call(this, source instanceof file_2.RandomAccessFile ? source : new file_2.RandomAccessFile(source), dictionaries));
	    }

	    _createClass(RecordBatchFileReaderImpl, [{
	        key: "isSync",
	        value: function isSync() {
	            return true;
	        }
	    }, {
	        key: "isFile",
	        value: function isFile() {
	            return true;
	        }
	    }, {
	        key: "open",
	        value: function open(options) {
	            if (!this.closed && !this._footer) {
	                this.schema = (this._footer = this._readFooter()).schema;
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = this._footer.dictionaryBatches()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var block = _step.value;

	                        block && this._readDictionaryBatch(this._dictionaryIndex++);
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	            return _get(RecordBatchFileReaderImpl.prototype.__proto__ || Object.getPrototypeOf(RecordBatchFileReaderImpl.prototype), "open", this).call(this, options);
	        }
	    }, {
	        key: "readRecordBatch",
	        value: function readRecordBatch(index) {
	            if (this.closed) {
	                return null;
	            }
	            if (!this._footer) {
	                this.open();
	            }
	            var block = this._footer && this._footer.getRecordBatch(index);
	            if (block && this._handle.seek(block.offset)) {
	                var message = this._reader.readMessage(enum_1.MessageHeader.RecordBatch);
	                if (message && message.isRecordBatch()) {
	                    var header = message.header();
	                    var buffer = this._reader.readMessageBody(message.bodyLength);
	                    var recordBatch = this._loadRecordBatch(header, buffer);
	                    return recordBatch;
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "_readDictionaryBatch",
	        value: function _readDictionaryBatch(index) {
	            var block = this._footer && this._footer.getDictionaryBatch(index);
	            if (block && this._handle.seek(block.offset)) {
	                var message = this._reader.readMessage(enum_1.MessageHeader.DictionaryBatch);
	                if (message && message.isDictionaryBatch()) {
	                    var header = message.header();
	                    var buffer = this._reader.readMessageBody(message.bodyLength);
	                    var vector = this._loadDictionaryBatch(header, buffer);
	                    this.dictionaries.set(header.id, vector);
	                }
	            }
	        }
	    }, {
	        key: "_readFooter",
	        value: function _readFooter() {
	            var _handle = this._handle;

	            var offset = _handle.size - message_1.magicAndPadding;
	            var length = _handle.readInt32(offset);
	            var buffer = _handle.readAt(offset - length, length);
	            return file_1.Footer.decode(buffer);
	        }
	    }, {
	        key: "_readNextMessageAndValidate",
	        value: function _readNextMessageAndValidate(type) {
	            if (!this._footer) {
	                this.open();
	            }
	            if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
	                var block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);
	                if (block && this._handle.seek(block.offset)) {
	                    return this._reader.readMessage(type);
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "footer",
	        get: function get() {
	            return this._footer;
	        }
	    }, {
	        key: "numDictionaries",
	        get: function get() {
	            return this._footer ? this._footer.numDictionaries : 0;
	        }
	    }, {
	        key: "numRecordBatches",
	        get: function get() {
	            return this._footer ? this._footer.numRecordBatches : 0;
	        }
	    }]);

	    return RecordBatchFileReaderImpl;
	}(RecordBatchStreamReaderImpl);
	/** @ignore */


	var AsyncRecordBatchFileReaderImpl = function (_AsyncRecordBatchStre2) {
	    _inherits(AsyncRecordBatchFileReaderImpl, _AsyncRecordBatchStre2);

	    function AsyncRecordBatchFileReaderImpl(source) {
	        _classCallCheck(this, AsyncRecordBatchFileReaderImpl);

	        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            rest[_key - 1] = arguments[_key];
	        }

	        var byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;
	        var dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;
	        return _possibleConstructorReturn(this, (AsyncRecordBatchFileReaderImpl.__proto__ || Object.getPrototypeOf(AsyncRecordBatchFileReaderImpl)).call(this, source instanceof file_2.AsyncRandomAccessFile ? source : new file_2.AsyncRandomAccessFile(source, byteLength), dictionaries));
	    }

	    _createClass(AsyncRecordBatchFileReaderImpl, [{
	        key: "isFile",
	        value: function isFile() {
	            return true;
	        }
	    }, {
	        key: "isAsync",
	        value: function isAsync() {
	            return true;
	        }
	    }, {
	        key: "open",
	        value: function () {
	            var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(options) {
	                var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, block;

	                return regeneratorRuntime.wrap(function _callee9$(_context9) {
	                    while (1) {
	                        switch (_context9.prev = _context9.next) {
	                            case 0:
	                                if (!(!this.closed && !this._footer)) {
	                                    _context9.next = 32;
	                                    break;
	                                }

	                                _context9.next = 3;
	                                return this._readFooter();

	                            case 3:
	                                this.schema = (this._footer = _context9.sent).schema;
	                                _iteratorNormalCompletion2 = true;
	                                _didIteratorError2 = false;
	                                _iteratorError2 = undefined;
	                                _context9.prev = 7;
	                                _iterator2 = this._footer.dictionaryBatches()[Symbol.iterator]();

	                            case 9:
	                                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
	                                    _context9.next = 18;
	                                    break;
	                                }

	                                block = _step2.value;
	                                _context9.t0 = block;

	                                if (!_context9.t0) {
	                                    _context9.next = 15;
	                                    break;
	                                }

	                                _context9.next = 15;
	                                return this._readDictionaryBatch(this._dictionaryIndex++);

	                            case 15:
	                                _iteratorNormalCompletion2 = true;
	                                _context9.next = 9;
	                                break;

	                            case 18:
	                                _context9.next = 24;
	                                break;

	                            case 20:
	                                _context9.prev = 20;
	                                _context9.t1 = _context9["catch"](7);
	                                _didIteratorError2 = true;
	                                _iteratorError2 = _context9.t1;

	                            case 24:
	                                _context9.prev = 24;
	                                _context9.prev = 25;

	                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                    _iterator2.return();
	                                }

	                            case 27:
	                                _context9.prev = 27;

	                                if (!_didIteratorError2) {
	                                    _context9.next = 30;
	                                    break;
	                                }

	                                throw _iteratorError2;

	                            case 30:
	                                return _context9.finish(27);

	                            case 31:
	                                return _context9.finish(24);

	                            case 32:
	                                _context9.next = 34;
	                                return _get(AsyncRecordBatchFileReaderImpl.prototype.__proto__ || Object.getPrototypeOf(AsyncRecordBatchFileReaderImpl.prototype), "open", this).call(this, options);

	                            case 34:
	                                return _context9.abrupt("return", _context9.sent);

	                            case 35:
	                            case "end":
	                                return _context9.stop();
	                        }
	                    }
	                }, _callee9, this, [[7, 20, 24, 32], [25,, 27, 31]]);
	            }));

	            function open(_x6) {
	                return _ref13.apply(this, arguments);
	            }

	            return open;
	        }()
	    }, {
	        key: "readRecordBatch",
	        value: function () {
	            var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(index) {
	                var block, message, header, buffer, recordBatch;
	                return regeneratorRuntime.wrap(function _callee10$(_context10) {
	                    while (1) {
	                        switch (_context10.prev = _context10.next) {
	                            case 0:
	                                if (!this.closed) {
	                                    _context10.next = 2;
	                                    break;
	                                }

	                                return _context10.abrupt("return", null);

	                            case 2:
	                                if (this._footer) {
	                                    _context10.next = 5;
	                                    break;
	                                }

	                                _context10.next = 5;
	                                return this.open();

	                            case 5:
	                                block = this._footer && this._footer.getRecordBatch(index);
	                                _context10.t0 = block;

	                                if (!_context10.t0) {
	                                    _context10.next = 11;
	                                    break;
	                                }

	                                _context10.next = 10;
	                                return this._handle.seek(block.offset);

	                            case 10:
	                                _context10.t0 = _context10.sent;

	                            case 11:
	                                if (!_context10.t0) {
	                                    _context10.next = 22;
	                                    break;
	                                }

	                                _context10.next = 14;
	                                return this._reader.readMessage(enum_1.MessageHeader.RecordBatch);

	                            case 14:
	                                message = _context10.sent;

	                                if (!(message && message.isRecordBatch())) {
	                                    _context10.next = 22;
	                                    break;
	                                }

	                                header = message.header();
	                                _context10.next = 19;
	                                return this._reader.readMessageBody(message.bodyLength);

	                            case 19:
	                                buffer = _context10.sent;
	                                recordBatch = this._loadRecordBatch(header, buffer);
	                                return _context10.abrupt("return", recordBatch);

	                            case 22:
	                                return _context10.abrupt("return", null);

	                            case 23:
	                            case "end":
	                                return _context10.stop();
	                        }
	                    }
	                }, _callee10, this);
	            }));

	            function readRecordBatch(_x7) {
	                return _ref14.apply(this, arguments);
	            }

	            return readRecordBatch;
	        }()
	    }, {
	        key: "_readDictionaryBatch",
	        value: function () {
	            var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(index) {
	                var block, message, header, buffer, vector;
	                return regeneratorRuntime.wrap(function _callee11$(_context11) {
	                    while (1) {
	                        switch (_context11.prev = _context11.next) {
	                            case 0:
	                                block = this._footer && this._footer.getDictionaryBatch(index);
	                                _context11.t0 = block;

	                                if (!_context11.t0) {
	                                    _context11.next = 6;
	                                    break;
	                                }

	                                _context11.next = 5;
	                                return this._handle.seek(block.offset);

	                            case 5:
	                                _context11.t0 = _context11.sent;

	                            case 6:
	                                if (!_context11.t0) {
	                                    _context11.next = 17;
	                                    break;
	                                }

	                                _context11.next = 9;
	                                return this._reader.readMessage(enum_1.MessageHeader.DictionaryBatch);

	                            case 9:
	                                message = _context11.sent;

	                                if (!(message && message.isDictionaryBatch())) {
	                                    _context11.next = 17;
	                                    break;
	                                }

	                                header = message.header();
	                                _context11.next = 14;
	                                return this._reader.readMessageBody(message.bodyLength);

	                            case 14:
	                                buffer = _context11.sent;
	                                vector = this._loadDictionaryBatch(header, buffer);

	                                this.dictionaries.set(header.id, vector);

	                            case 17:
	                            case "end":
	                                return _context11.stop();
	                        }
	                    }
	                }, _callee11, this);
	            }));

	            function _readDictionaryBatch(_x8) {
	                return _ref15.apply(this, arguments);
	            }

	            return _readDictionaryBatch;
	        }()
	    }, {
	        key: "_readFooter",
	        value: function () {
	            var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
	                var _handle, offset, length, buffer;

	                return regeneratorRuntime.wrap(function _callee12$(_context12) {
	                    while (1) {
	                        switch (_context12.prev = _context12.next) {
	                            case 0:
	                                _handle = this._handle;
	                                _context12.t0 = _handle._pending;

	                                if (!_context12.t0) {
	                                    _context12.next = 5;
	                                    break;
	                                }

	                                _context12.next = 5;
	                                return _handle._pending;

	                            case 5:
	                                offset = _handle.size - message_1.magicAndPadding;
	                                _context12.next = 8;
	                                return _handle.readInt32(offset);

	                            case 8:
	                                length = _context12.sent;
	                                _context12.next = 11;
	                                return _handle.readAt(offset - length, length);

	                            case 11:
	                                buffer = _context12.sent;
	                                return _context12.abrupt("return", file_1.Footer.decode(buffer));

	                            case 13:
	                            case "end":
	                                return _context12.stop();
	                        }
	                    }
	                }, _callee12, this);
	            }));

	            function _readFooter() {
	                return _ref16.apply(this, arguments);
	            }

	            return _readFooter;
	        }()
	    }, {
	        key: "_readNextMessageAndValidate",
	        value: function () {
	            var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(type) {
	                var block;
	                return regeneratorRuntime.wrap(function _callee13$(_context13) {
	                    while (1) {
	                        switch (_context13.prev = _context13.next) {
	                            case 0:
	                                if (this._footer) {
	                                    _context13.next = 3;
	                                    break;
	                                }

	                                _context13.next = 3;
	                                return this.open();

	                            case 3:
	                                if (!(this._footer && this._recordBatchIndex < this.numRecordBatches)) {
	                                    _context13.next = 14;
	                                    break;
	                                }

	                                block = this._footer.getRecordBatch(this._recordBatchIndex);
	                                _context13.t0 = block;

	                                if (!_context13.t0) {
	                                    _context13.next = 10;
	                                    break;
	                                }

	                                _context13.next = 9;
	                                return this._handle.seek(block.offset);

	                            case 9:
	                                _context13.t0 = _context13.sent;

	                            case 10:
	                                if (!_context13.t0) {
	                                    _context13.next = 14;
	                                    break;
	                                }

	                                _context13.next = 13;
	                                return this._reader.readMessage(type);

	                            case 13:
	                                return _context13.abrupt("return", _context13.sent);

	                            case 14:
	                                return _context13.abrupt("return", null);

	                            case 15:
	                            case "end":
	                                return _context13.stop();
	                        }
	                    }
	                }, _callee13, this);
	            }));

	            function _readNextMessageAndValidate(_x9) {
	                return _ref17.apply(this, arguments);
	            }

	            return _readNextMessageAndValidate;
	        }()
	    }, {
	        key: "footer",
	        get: function get() {
	            return this._footer;
	        }
	    }, {
	        key: "numDictionaries",
	        get: function get() {
	            return this._footer ? this._footer.numDictionaries : 0;
	        }
	    }, {
	        key: "numRecordBatches",
	        get: function get() {
	            return this._footer ? this._footer.numRecordBatches : 0;
	        }
	    }]);

	    return AsyncRecordBatchFileReaderImpl;
	}(AsyncRecordBatchStreamReaderImpl);
	/** @ignore */


	var RecordBatchJSONReaderImpl = function (_RecordBatchStreamRea3) {
	    _inherits(RecordBatchJSONReaderImpl, _RecordBatchStreamRea3);

	    function RecordBatchJSONReaderImpl(source, dictionaries) {
	        _classCallCheck(this, RecordBatchJSONReaderImpl);

	        return _possibleConstructorReturn(this, (RecordBatchJSONReaderImpl.__proto__ || Object.getPrototypeOf(RecordBatchJSONReaderImpl)).call(this, source, dictionaries));
	    }

	    _createClass(RecordBatchJSONReaderImpl, [{
	        key: "_loadVectors",
	        value: function _loadVectors(header, body, types) {
	            return new vectorloader_1.JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
	        }
	    }]);

	    return RecordBatchJSONReaderImpl;
	}(RecordBatchStreamReaderImpl);
	//
	// Define some helper functions and static implementations down here. There's
	// a bit of branching in the static methods that can lead to the same routines
	// being executed, so we've broken those out here for readability.
	//
	/** @ignore */


	function shouldAutoDestroy(self, options) {
	    return options && typeof options['autoDestroy'] === 'boolean' ? options['autoDestroy'] : self['autoDestroy'];
	}
	/** @ignore */
	function readAllSync(source) {
	    var reader;
	    return regeneratorRuntime.wrap(function readAllSync$(_context14) {
	        while (1) {
	            switch (_context14.prev = _context14.next) {
	                case 0:
	                    reader = RecordBatchReader.from(source);
	                    _context14.prev = 1;

	                    if (reader.open({ autoDestroy: false }).closed) {
	                        _context14.next = 6;
	                        break;
	                    }

	                case 3:
	                    _context14.next = 5;
	                    return reader;

	                case 5:
	                    if (!reader.reset().open().closed) {
	                        _context14.next = 3;
	                        break;
	                    }

	                case 6:
	                    _context14.prev = 6;

	                    reader.cancel();
	                    return _context14.finish(6);

	                case 9:
	                case "end":
	                    return _context14.stop();
	            }
	        }
	    }, _marked, this, [[1,, 6, 9]]);
	}function fromArrowJSON(source) {
	    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));
	}
	/** @ignore */
	function fromByteStream(source) {
	    var bytes = source.peek(message_1.magicLength + 7 & ~7);
	    return bytes && bytes.byteLength >= 4 ? !message_1.checkForMagicArrowString(bytes) ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read())) : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
	        return regeneratorRuntime.wrap(function _callee15$(_context16) {
	            while (1) {
	                switch (_context16.prev = _context16.next) {
	                    case 0:
	                    case "end":
	                        return _context16.stop();
	                }
	            }
	        }, _callee15, this);
	    })()));
	}

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	/* tslint:disable:class-name */
	var File_ = __webpack_require__(111);
	var flatbuffers_1 = __webpack_require__(61);
	var Long = flatbuffers_1.flatbuffers.Long;
	var Builder = flatbuffers_1.flatbuffers.Builder;
	var ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;
	var _Block = File_.org.apache.arrow.flatbuf.Block;
	var _Footer = File_.org.apache.arrow.flatbuf.Footer;
	var schema_1 = __webpack_require__(97);
	var enum_1 = __webpack_require__(69);
	var buffer_1 = __webpack_require__(60);
	/** @ignore */

	var Footer_ = function () {
	    function Footer_(schema) {
	        var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : enum_1.MetadataVersion.V4;
	        var recordBatches = arguments[2];
	        var dictionaryBatches = arguments[3];

	        _classCallCheck(this, Footer_);

	        this.schema = schema;
	        this.version = version;
	        recordBatches && (this._recordBatches = recordBatches);
	        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);
	    }
	    /** @nocollapse */


	    _createClass(Footer_, [{
	        key: "recordBatches",
	        value: /*#__PURE__*/regeneratorRuntime.mark(function recordBatches() {
	            var block, i, n;
	            return regeneratorRuntime.wrap(function recordBatches$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            i = -1, n = this.numRecordBatches;

	                        case 1:
	                            if (!(++i < n)) {
	                                _context.next = 7;
	                                break;
	                            }

	                            if (!(block = this.getRecordBatch(i))) {
	                                _context.next = 5;
	                                break;
	                            }

	                            _context.next = 5;
	                            return block;

	                        case 5:
	                            _context.next = 1;
	                            break;

	                        case 7:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, recordBatches, this);
	        })
	    }, {
	        key: "dictionaryBatches",
	        value: /*#__PURE__*/regeneratorRuntime.mark(function dictionaryBatches() {
	            var block, i, n;
	            return regeneratorRuntime.wrap(function dictionaryBatches$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            i = -1, n = this.numDictionaries;

	                        case 1:
	                            if (!(++i < n)) {
	                                _context2.next = 7;
	                                break;
	                            }

	                            if (!(block = this.getDictionaryBatch(i))) {
	                                _context2.next = 5;
	                                break;
	                            }

	                            _context2.next = 5;
	                            return block;

	                        case 5:
	                            _context2.next = 1;
	                            break;

	                        case 7:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, dictionaryBatches, this);
	        })
	    }, {
	        key: "getRecordBatch",
	        value: function getRecordBatch(index) {
	            return index >= 0 && index < this.numRecordBatches && this._recordBatches[index] || null;
	        }
	    }, {
	        key: "getDictionaryBatch",
	        value: function getDictionaryBatch(index) {
	            return index >= 0 && index < this.numDictionaries && this._dictionaryBatches[index] || null;
	        }
	    }, {
	        key: "numRecordBatches",
	        get: function get() {
	            return this._recordBatches.length;
	        }
	    }, {
	        key: "numDictionaries",
	        get: function get() {
	            return this._dictionaryBatches.length;
	        }
	    }], [{
	        key: "decode",
	        value: function decode(buf) {
	            buf = new ByteBuffer(buffer_1.toUint8Array(buf));
	            var footer = _Footer.getRootAsFooter(buf);
	            var schema = schema_1.Schema.decode(footer.schema());
	            return new OffHeapFooter(schema, footer);
	        }
	        /** @nocollapse */

	    }, {
	        key: "encode",
	        value: function encode(footer) {
	            var b = new Builder();
	            var schemaOffset = schema_1.Schema.encode(b, footer.schema);
	            _Footer.startRecordBatchesVector(b, footer.numRecordBatches);
	            [].concat(_toConsumableArray(footer.recordBatches())).slice().reverse().forEach(function (rb) {
	                return FileBlock.encode(b, rb);
	            });
	            var recordBatchesOffset = b.endVector();
	            _Footer.startDictionariesVector(b, footer.numDictionaries);
	            [].concat(_toConsumableArray(footer.dictionaryBatches())).slice().reverse().forEach(function (db) {
	                return FileBlock.encode(b, db);
	            });
	            var dictionaryBatchesOffset = b.endVector();
	            _Footer.startFooter(b);
	            _Footer.addSchema(b, schemaOffset);
	            _Footer.addVersion(b, enum_1.MetadataVersion.V4);
	            _Footer.addRecordBatches(b, recordBatchesOffset);
	            _Footer.addDictionaries(b, dictionaryBatchesOffset);
	            _Footer.finishFooterBuffer(b, _Footer.endFooter(b));
	            return b.asUint8Array();
	        }
	    }]);

	    return Footer_;
	}();

	exports.Footer = Footer_;
	/** @ignore */

	var OffHeapFooter = function (_Footer_) {
	    _inherits(OffHeapFooter, _Footer_);

	    function OffHeapFooter(schema, _footer) {
	        _classCallCheck(this, OffHeapFooter);

	        var _this = _possibleConstructorReturn(this, (OffHeapFooter.__proto__ || Object.getPrototypeOf(OffHeapFooter)).call(this, schema, _footer.version()));

	        _this._footer = _footer;
	        return _this;
	    }

	    _createClass(OffHeapFooter, [{
	        key: "getRecordBatch",
	        value: function getRecordBatch(index) {
	            if (index >= 0 && index < this.numRecordBatches) {
	                var fileBlock = this._footer.recordBatches(index);
	                if (fileBlock) {
	                    return FileBlock.decode(fileBlock);
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "getDictionaryBatch",
	        value: function getDictionaryBatch(index) {
	            if (index >= 0 && index < this.numDictionaries) {
	                var fileBlock = this._footer.dictionaries(index);
	                if (fileBlock) {
	                    return FileBlock.decode(fileBlock);
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "numRecordBatches",
	        get: function get() {
	            return this._footer.recordBatchesLength();
	        }
	    }, {
	        key: "numDictionaries",
	        get: function get() {
	            return this._footer.dictionariesLength();
	        }
	    }]);

	    return OffHeapFooter;
	}(Footer_);
	/** @ignore */


	var FileBlock = function () {
	    _createClass(FileBlock, null, [{
	        key: "decode",

	        /** @nocollapse */
	        value: function decode(block) {
	            return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());
	        }
	        /** @nocollapse */

	    }, {
	        key: "encode",
	        value: function encode(b, fileBlock) {
	            var metaDataLength = fileBlock.metaDataLength;

	            var offset = new Long(fileBlock.offset, 0);
	            var bodyLength = new Long(fileBlock.bodyLength, 0);
	            return _Block.createBlock(b, offset, metaDataLength, bodyLength);
	        }
	    }]);

	    function FileBlock(metaDataLength, bodyLength, offset) {
	        _classCallCheck(this, FileBlock);

	        this.metaDataLength = metaDataLength;
	        this.offset = typeof offset === 'number' ? offset : offset.low;
	        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
	    }

	    return FileBlock;
	}();

	exports.FileBlock = FileBlock;

	//# sourceMappingURL=file.js.map

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// automatically generated by the FlatBuffers compiler, do not modify

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var NS7624605610262437867 = __webpack_require__(70);
	/**
	 * ----------------------------------------------------------------------
	 * Arrow File metadata
	 *
	 *
	 * @constructor
	 */
	var org;
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Footer = function () {
	                    function Footer() {
	                        _classCallCheck(this, Footer);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Footer
	                     */


	                    _createClass(Footer, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * @param flatbuffers.ByteBuffer bb
	                         * @param Footer= obj
	                         * @returns Footer
	                         */

	                    }, {
	                        key: "version",

	                        /**
	                         * @returns org.apache.arrow.flatbuf.MetadataVersion
	                         */
	                        value: function version() {
	                            var offset = this.bb.__offset(this.bb_pos, 4);
	                            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;
	                        }
	                        /**
	                         * @param org.apache.arrow.flatbuf.Schema= obj
	                         * @returns org.apache.arrow.flatbuf.Schema|null
	                         */

	                    }, {
	                        key: "schema",
	                        value: function schema(obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 6);
	                            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
	                        }
	                        /**
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.Block= obj
	                         * @returns org.apache.arrow.flatbuf.Block
	                         */

	                    }, {
	                        key: "dictionaries",
	                        value: function dictionaries(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "dictionariesLength",
	                        value: function dictionariesLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 8);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param number index
	                         * @param org.apache.arrow.flatbuf.Block= obj
	                         * @returns org.apache.arrow.flatbuf.Block
	                         */

	                    }, {
	                        key: "recordBatches",
	                        value: function recordBatches(index, obj) {
	                            var offset = this.bb.__offset(this.bb_pos, 10);
	                            return offset ? (obj || new org.apache.arrow.flatbuf.Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
	                        }
	                        /**
	                         * @returns number
	                         */

	                    }, {
	                        key: "recordBatchesLength",
	                        value: function recordBatchesLength() {
	                            var offset = this.bb.__offset(this.bb_pos, 10);
	                            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         */

	                    }], [{
	                        key: "getRootAsFooter",
	                        value: function getRootAsFooter(bb, obj) {
	                            return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	                        }
	                    }, {
	                        key: "startFooter",
	                        value: function startFooter(builder) {
	                            builder.startObject(4);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param org.apache.arrow.flatbuf.MetadataVersion version
	                         */

	                    }, {
	                        key: "addVersion",
	                        value: function addVersion(builder, version) {
	                            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset schemaOffset
	                         */

	                    }, {
	                        key: "addSchema",
	                        value: function addSchema(builder, schemaOffset) {
	                            builder.addFieldOffset(1, schemaOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset dictionariesOffset
	                         */

	                    }, {
	                        key: "addDictionaries",
	                        value: function addDictionaries(builder, dictionariesOffset) {
	                            builder.addFieldOffset(2, dictionariesOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startDictionariesVector",
	                        value: function startDictionariesVector(builder, numElems) {
	                            builder.startVector(24, numElems, 8);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset recordBatchesOffset
	                         */

	                    }, {
	                        key: "addRecordBatches",
	                        value: function addRecordBatches(builder, recordBatchesOffset) {
	                            builder.addFieldOffset(3, recordBatchesOffset, 0);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param number numElems
	                         */

	                    }, {
	                        key: "startRecordBatchesVector",
	                        value: function startRecordBatchesVector(builder, numElems) {
	                            builder.startVector(24, numElems, 8);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @returns flatbuffers.Offset
	                         */

	                    }, {
	                        key: "endFooter",
	                        value: function endFooter(builder) {
	                            var offset = builder.endObject();
	                            return offset;
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Offset offset
	                         */

	                    }, {
	                        key: "finishFooterBuffer",
	                        value: function finishFooterBuffer(builder, offset) {
	                            builder.finish(offset);
	                        }
	                    }, {
	                        key: "createFooter",
	                        value: function createFooter(builder, version, schemaOffset, dictionariesOffset, recordBatchesOffset) {
	                            Footer.startFooter(builder);
	                            Footer.addVersion(builder, version);
	                            Footer.addSchema(builder, schemaOffset);
	                            Footer.addDictionaries(builder, dictionariesOffset);
	                            Footer.addRecordBatches(builder, recordBatchesOffset);
	                            return Footer.endFooter(builder);
	                        }
	                    }]);

	                    return Footer;
	                }();

	                flatbuf.Footer = Footer;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));
	/**
	 * @constructor
	 */
	(function (org) {
	    var apache;
	    (function (apache) {
	        var arrow;
	        (function (arrow) {
	            var flatbuf;
	            (function (flatbuf) {
	                var Block = function () {
	                    function Block() {
	                        _classCallCheck(this, Block);

	                        this.bb = null;
	                        this.bb_pos = 0;
	                    }
	                    /**
	                     * @param number i
	                     * @param flatbuffers.ByteBuffer bb
	                     * @returns Block
	                     */


	                    _createClass(Block, [{
	                        key: "__init",
	                        value: function __init(i, bb) {
	                            this.bb_pos = i;
	                            this.bb = bb;
	                            return this;
	                        }
	                        /**
	                         * Index to the start of the RecordBlock (note this is past the Message header)
	                         *
	                         * @returns flatbuffers.Long
	                         */

	                    }, {
	                        key: "offset",
	                        value: function offset() {
	                            return this.bb.readInt64(this.bb_pos);
	                        }
	                        /**
	                         * Length of the metadata
	                         *
	                         * @returns number
	                         */

	                    }, {
	                        key: "metaDataLength",
	                        value: function metaDataLength() {
	                            return this.bb.readInt32(this.bb_pos + 8);
	                        }
	                        /**
	                         * Length of the data (this is aligned so there can be a gap between this and
	                         * the metatdata).
	                         *
	                         * @returns flatbuffers.Long
	                         */

	                    }, {
	                        key: "bodyLength",
	                        value: function bodyLength() {
	                            return this.bb.readInt64(this.bb_pos + 16);
	                        }
	                        /**
	                         * @param flatbuffers.Builder builder
	                         * @param flatbuffers.Long offset
	                         * @param number metaDataLength
	                         * @param flatbuffers.Long bodyLength
	                         * @returns flatbuffers.Offset
	                         */

	                    }], [{
	                        key: "createBlock",
	                        value: function createBlock(builder, offset, metaDataLength, bodyLength) {
	                            builder.prep(8, 24);
	                            builder.writeInt64(bodyLength);
	                            builder.pad(4);
	                            builder.writeInt32(metaDataLength);
	                            builder.writeInt64(offset);
	                            return builder.offset();
	                        }
	                    }]);

	                    return Block;
	                }();

	                flatbuf.Block = Block;
	            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
	        })(arrow = apache.arrow || (apache.arrow = {}));
	    })(apache = org.apache || (org.apache = {}));
	})(org = exports.org || (exports.org = {}));

	//# sourceMappingURL=File.js.map

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _asyncIterator(iterable) { if (typeof Symbol === "function") { if (Symbol.asyncIterator) { var method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { return iterable[Symbol.iterator](); } } throw new TypeError("Object is not async iterable"); }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var adapters_1 = __webpack_require__(59);
	var utf8_1 = __webpack_require__(62);
	var interfaces_1 = __webpack_require__(65);
	var buffer_1 = __webpack_require__(60);
	var compat_1 = __webpack_require__(64);
	/** @ignore */

	var AsyncByteQueue = function (_interfaces_1$AsyncQu) {
	    _inherits(AsyncByteQueue, _interfaces_1$AsyncQu);

	    function AsyncByteQueue() {
	        _classCallCheck(this, AsyncByteQueue);

	        return _possibleConstructorReturn(this, (AsyncByteQueue.__proto__ || Object.getPrototypeOf(AsyncByteQueue)).apply(this, arguments));
	    }

	    _createClass(AsyncByteQueue, [{
	        key: "write",
	        value: function write(value) {
	            if ((value = buffer_1.toUint8Array(value)).byteLength > 0) {
	                return _get(AsyncByteQueue.prototype.__proto__ || Object.getPrototypeOf(AsyncByteQueue.prototype), "write", this).call(this, value);
	            }
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            return sync ? utf8_1.decodeUtf8(this.toUint8Array(true)) : this.toUint8Array(false).then(utf8_1.decodeUtf8);
	        }
	    }, {
	        key: "toUint8Array",
	        value: function toUint8Array() {
	            var _this2 = this;

	            var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            return sync ? buffer_1.joinUint8Arrays(this._values)[0] : _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                var buffers, byteLength, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;

	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                buffers = [], byteLength = 0;
	                                _iteratorNormalCompletion = true;
	                                _didIteratorError = false;
	                                _iteratorError = undefined;
	                                _context.prev = 4;
	                                _iterator = _asyncIterator(_this2);

	                            case 6:
	                                _context.next = 8;
	                                return _iterator.next();

	                            case 8:
	                                _step = _context.sent;
	                                _iteratorNormalCompletion = _step.done;
	                                _context.next = 12;
	                                return _step.value;

	                            case 12:
	                                _value = _context.sent;

	                                if (_iteratorNormalCompletion) {
	                                    _context.next = 20;
	                                    break;
	                                }

	                                chunk = _value;

	                                buffers.push(chunk);
	                                byteLength += chunk.byteLength;

	                            case 17:
	                                _iteratorNormalCompletion = true;
	                                _context.next = 6;
	                                break;

	                            case 20:
	                                _context.next = 26;
	                                break;

	                            case 22:
	                                _context.prev = 22;
	                                _context.t0 = _context["catch"](4);
	                                _didIteratorError = true;
	                                _iteratorError = _context.t0;

	                            case 26:
	                                _context.prev = 26;
	                                _context.prev = 27;

	                                if (!(!_iteratorNormalCompletion && _iterator.return)) {
	                                    _context.next = 31;
	                                    break;
	                                }

	                                _context.next = 31;
	                                return _iterator.return();

	                            case 31:
	                                _context.prev = 31;

	                                if (!_didIteratorError) {
	                                    _context.next = 34;
	                                    break;
	                                }

	                                throw _iteratorError;

	                            case 34:
	                                return _context.finish(31);

	                            case 35:
	                                return _context.finish(26);

	                            case 36:
	                                return _context.abrupt("return", buffer_1.joinUint8Arrays(buffers, byteLength)[0]);

	                            case 37:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, _this2, [[4, 22, 26, 36], [27,, 31, 35]]);
	            }))();
	        }
	    }]);

	    return AsyncByteQueue;
	}(interfaces_1.AsyncQueue);

	exports.AsyncByteQueue = AsyncByteQueue;
	/** @ignore */

	var ByteStream = function () {
	    function ByteStream(source) {
	        _classCallCheck(this, ByteStream);

	        if (source) {
	            this.source = new ByteStreamSource(adapters_1.default.fromIterable(source));
	        }
	    }

	    _createClass(ByteStream, [{
	        key: Symbol.iterator,
	        value: function value() {
	            return this;
	        }
	    }, {
	        key: "next",
	        value: function next(value) {
	            return this.source.next(value);
	        }
	    }, {
	        key: "throw",
	        value: function _throw(value) {
	            return this.source.throw(value);
	        }
	    }, {
	        key: "return",
	        value: function _return(value) {
	            return this.source.return(value);
	        }
	    }, {
	        key: "peek",
	        value: function peek(size) {
	            return this.source.peek(size);
	        }
	    }, {
	        key: "read",
	        value: function read(size) {
	            return this.source.read(size);
	        }
	    }]);

	    return ByteStream;
	}();

	exports.ByteStream = ByteStream;
	/** @ignore */

	var AsyncByteStream = function () {
	    function AsyncByteStream(source) {
	        _classCallCheck(this, AsyncByteStream);

	        if (source instanceof AsyncByteStream) {
	            this.source = source.source;
	        } else if (source instanceof AsyncByteQueue) {
	            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));
	        } else if (compat_1.isReadableNodeStream(source)) {
	            this.source = new AsyncByteStreamSource(adapters_1.default.fromNodeStream(source));
	        } else if (compat_1.isReadableDOMStream(source)) {
	            this.source = new AsyncByteStreamSource(adapters_1.default.fromDOMStream(source));
	        } else if (compat_1.isFetchResponse(source)) {
	            this.source = new AsyncByteStreamSource(adapters_1.default.fromDOMStream(source.body));
	        } else if (compat_1.isIterable(source)) {
	            this.source = new AsyncByteStreamSource(adapters_1.default.fromIterable(source));
	        } else if (compat_1.isPromise(source)) {
	            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));
	        } else if (compat_1.isAsyncIterable(source)) {
	            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));
	        }
	    }

	    _createClass(AsyncByteStream, [{
	        key: Symbol.asyncIterator,
	        value: function value() {
	            return this;
	        }
	    }, {
	        key: "next",
	        value: function next(value) {
	            return this.source.next(value);
	        }
	    }, {
	        key: "throw",
	        value: function _throw(value) {
	            return this.source.throw(value);
	        }
	    }, {
	        key: "return",
	        value: function _return(value) {
	            return this.source.return(value);
	        }
	    }, {
	        key: "cancel",
	        value: function cancel(reason) {
	            return this.source.cancel(reason);
	        }
	    }, {
	        key: "peek",
	        value: function peek(size) {
	            return this.source.peek(size);
	        }
	    }, {
	        key: "read",
	        value: function read(size) {
	            return this.source.read(size);
	        }
	    }, {
	        key: "closed",
	        get: function get() {
	            return this.source.closed;
	        }
	    }]);

	    return AsyncByteStream;
	}();

	exports.AsyncByteStream = AsyncByteStream;
	/** @ignore */

	var ByteStreamSource = function () {
	    function ByteStreamSource(source) {
	        _classCallCheck(this, ByteStreamSource);

	        this.source = source;
	    }

	    _createClass(ByteStreamSource, [{
	        key: "cancel",
	        value: function cancel(reason) {
	            this.return(reason);
	        }
	    }, {
	        key: "peek",
	        value: function peek(size) {
	            return this.next(size, 'peek').value;
	        }
	    }, {
	        key: "read",
	        value: function read(size) {
	            return this.next(size, 'read').value;
	        }
	    }, {
	        key: "next",
	        value: function next(size) {
	            var cmd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'read';
	            return this.source.next({ cmd: cmd, size: size });
	        }
	    }, {
	        key: "throw",
	        value: function _throw(value) {
	            return Object.create(this.source.throw && this.source.throw(value) || interfaces_1.ITERATOR_DONE);
	        }
	    }, {
	        key: "return",
	        value: function _return(value) {
	            return Object.create(this.source.return && this.source.return(value) || interfaces_1.ITERATOR_DONE);
	        }
	    }]);

	    return ByteStreamSource;
	}();
	/** @ignore */


	var AsyncByteStreamSource = function () {
	    function AsyncByteStreamSource(source) {
	        var _this3 = this;

	        _classCallCheck(this, AsyncByteStreamSource);

	        this.source = source;
	        this._closedPromise = new Promise(function (r) {
	            return _this3._closedPromiseResolve = r;
	        });
	    }

	    _createClass(AsyncByteStreamSource, [{
	        key: "cancel",
	        value: function () {
	            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(reason) {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return this.return(reason);

	                            case 2:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));

	            function cancel(_x4) {
	                return _ref2.apply(this, arguments);
	            }

	            return cancel;
	        }()
	    }, {
	        key: "read",
	        value: function () {
	            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(size) {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.next = 2;
	                                return this.next(size, 'read');

	                            case 2:
	                                return _context3.abrupt("return", _context3.sent.value);

	                            case 3:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));

	            function read(_x5) {
	                return _ref3.apply(this, arguments);
	            }

	            return read;
	        }()
	    }, {
	        key: "peek",
	        value: function () {
	            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(size) {
	                return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                _context4.next = 2;
	                                return this.next(size, 'peek');

	                            case 2:
	                                return _context4.abrupt("return", _context4.sent.value);

	                            case 3:
	                            case "end":
	                                return _context4.stop();
	                        }
	                    }
	                }, _callee4, this);
	            }));

	            function peek(_x6) {
	                return _ref4.apply(this, arguments);
	            }

	            return peek;
	        }()
	    }, {
	        key: "next",
	        value: function () {
	            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(size) {
	                var cmd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'read';
	                return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                _context5.next = 2;
	                                return this.source.next({ cmd: cmd, size: size });

	                            case 2:
	                                return _context5.abrupt("return", _context5.sent);

	                            case 3:
	                            case "end":
	                                return _context5.stop();
	                        }
	                    }
	                }, _callee5, this);
	            }));

	            function next(_x7) {
	                return _ref5.apply(this, arguments);
	            }

	            return next;
	        }()
	    }, {
	        key: "throw",
	        value: function () {
	            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(value) {
	                var result;
	                return regeneratorRuntime.wrap(function _callee6$(_context6) {
	                    while (1) {
	                        switch (_context6.prev = _context6.next) {
	                            case 0:
	                                _context6.t1 = this.source.throw;

	                                if (!_context6.t1) {
	                                    _context6.next = 5;
	                                    break;
	                                }

	                                _context6.next = 4;
	                                return this.source.throw(value);

	                            case 4:
	                                _context6.t1 = _context6.sent;

	                            case 5:
	                                _context6.t0 = _context6.t1;

	                                if (_context6.t0) {
	                                    _context6.next = 8;
	                                    break;
	                                }

	                                _context6.t0 = interfaces_1.ITERATOR_DONE;

	                            case 8:
	                                result = _context6.t0;

	                                this._closedPromiseResolve && this._closedPromiseResolve();
	                                this._closedPromiseResolve = undefined;
	                                return _context6.abrupt("return", Object.create(result));

	                            case 12:
	                            case "end":
	                                return _context6.stop();
	                        }
	                    }
	                }, _callee6, this);
	            }));

	            function _throw(_x9) {
	                return _ref6.apply(this, arguments);
	            }

	            return _throw;
	        }()
	    }, {
	        key: "return",
	        value: function () {
	            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(value) {
	                var result;
	                return regeneratorRuntime.wrap(function _callee7$(_context7) {
	                    while (1) {
	                        switch (_context7.prev = _context7.next) {
	                            case 0:
	                                _context7.t1 = this.source.return;

	                                if (!_context7.t1) {
	                                    _context7.next = 5;
	                                    break;
	                                }

	                                _context7.next = 4;
	                                return this.source.return(value);

	                            case 4:
	                                _context7.t1 = _context7.sent;

	                            case 5:
	                                _context7.t0 = _context7.t1;

	                                if (_context7.t0) {
	                                    _context7.next = 8;
	                                    break;
	                                }

	                                _context7.t0 = interfaces_1.ITERATOR_DONE;

	                            case 8:
	                                result = _context7.t0;

	                                this._closedPromiseResolve && this._closedPromiseResolve();
	                                this._closedPromiseResolve = undefined;
	                                return _context7.abrupt("return", Object.create(result));

	                            case 12:
	                            case "end":
	                                return _context7.stop();
	                        }
	                    }
	                }, _callee7, this);
	            }));

	            function _return(_x10) {
	                return _ref7.apply(this, arguments);
	            }

	            return _return;
	        }()
	    }, {
	        key: "closed",
	        get: function get() {
	            return this._closedPromise;
	        }
	    }]);

	    return AsyncByteStreamSource;
	}();

	//# sourceMappingURL=stream.js.map

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var stream_1 = __webpack_require__(112);
	var buffer_1 = __webpack_require__(60);
	/** @ignore */

	var RandomAccessFile = function (_stream_1$ByteStream) {
	    _inherits(RandomAccessFile, _stream_1$ByteStream);

	    function RandomAccessFile(buffer, byteLength) {
	        _classCallCheck(this, RandomAccessFile);

	        var _this = _possibleConstructorReturn(this, (RandomAccessFile.__proto__ || Object.getPrototypeOf(RandomAccessFile)).call(this));

	        _this.position = 0;
	        _this.buffer = buffer_1.toUint8Array(buffer);
	        _this.size = typeof byteLength === 'undefined' ? _this.buffer.byteLength : byteLength;
	        return _this;
	    }

	    _createClass(RandomAccessFile, [{
	        key: "readInt32",
	        value: function readInt32(position) {
	            var _readAt = this.readAt(position, 4),
	                buffer = _readAt.buffer,
	                byteOffset = _readAt.byteOffset;

	            return new DataView(buffer, byteOffset).getInt32(0, true);
	        }
	    }, {
	        key: "seek",
	        value: function seek(position) {
	            this.position = Math.min(position, this.size);
	            return position < this.size;
	        }
	    }, {
	        key: "read",
	        value: function read(nBytes) {
	            var buffer = this.buffer,
	                size = this.size,
	                position = this.position;

	            if (buffer && position < size) {
	                if (typeof nBytes !== 'number') {
	                    nBytes = Infinity;
	                }
	                this.position = Math.min(size, position + Math.min(size - position, nBytes));
	                return buffer.subarray(position, this.position);
	            }
	            return null;
	        }
	    }, {
	        key: "readAt",
	        value: function readAt(position, nBytes) {
	            var buf = this.buffer;
	            var end = Math.min(this.size, position + nBytes);
	            return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);
	        }
	    }, {
	        key: "close",
	        value: function close() {
	            this.buffer && (this.buffer = null);
	        }
	    }, {
	        key: "throw",
	        value: function _throw(value) {
	            this.close();return { done: true, value: value };
	        }
	    }, {
	        key: "return",
	        value: function _return(value) {
	            this.close();return { done: true, value: value };
	        }
	    }]);

	    return RandomAccessFile;
	}(stream_1.ByteStream);

	exports.RandomAccessFile = RandomAccessFile;
	/** @ignore */

	var AsyncRandomAccessFile = function (_stream_1$AsyncByteSt) {
	    _inherits(AsyncRandomAccessFile, _stream_1$AsyncByteSt);

	    function AsyncRandomAccessFile(file, byteLength) {
	        var _this3 = this;

	        _classCallCheck(this, AsyncRandomAccessFile);

	        var _this2 = _possibleConstructorReturn(this, (AsyncRandomAccessFile.__proto__ || Object.getPrototypeOf(AsyncRandomAccessFile)).call(this));

	        _this2.position = 0;
	        _this2._handle = file;
	        if (typeof byteLength === 'number') {
	            _this2.size = byteLength;
	        } else {
	            _this2._pending = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return file.stat();

	                            case 2:
	                                _this2.size = _context.sent.size;

	                                delete _this2._pending;

	                            case 4:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, _this3);
	            }))();
	        }
	        return _this2;
	    }

	    _createClass(AsyncRandomAccessFile, [{
	        key: "readInt32",
	        value: function () {
	            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(position) {
	                var _ref3, buffer, byteOffset;

	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return this.readAt(position, 4);

	                            case 2:
	                                _ref3 = _context2.sent;
	                                buffer = _ref3.buffer;
	                                byteOffset = _ref3.byteOffset;
	                                return _context2.abrupt("return", new DataView(buffer, byteOffset).getInt32(0, true));

	                            case 6:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));

	            function readInt32(_x) {
	                return _ref2.apply(this, arguments);
	            }

	            return readInt32;
	        }()
	    }, {
	        key: "seek",
	        value: function () {
	            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(position) {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.t0 = this._pending;

	                                if (!_context3.t0) {
	                                    _context3.next = 4;
	                                    break;
	                                }

	                                _context3.next = 4;
	                                return this._pending;

	                            case 4:
	                                this.position = Math.min(position, this.size);
	                                return _context3.abrupt("return", position < this.size);

	                            case 6:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));

	            function seek(_x2) {
	                return _ref4.apply(this, arguments);
	            }

	            return seek;
	        }()
	    }, {
	        key: "read",
	        value: function () {
	            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(nBytes) {
	                var file, size, position, pos, offset, bytesRead, end, buffer, _ref6;

	                return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                _context4.t0 = this._pending;

	                                if (!_context4.t0) {
	                                    _context4.next = 4;
	                                    break;
	                                }

	                                _context4.next = 4;
	                                return this._pending;

	                            case 4:
	                                file = this._handle, size = this.size, position = this.position;

	                                if (!(file && position < size)) {
	                                    _context4.next = 18;
	                                    break;
	                                }

	                                if (typeof nBytes !== 'number') {
	                                    nBytes = Infinity;
	                                }
	                                pos = position, offset = 0, bytesRead = 0;
	                                end = Math.min(size, pos + Math.min(size - pos, nBytes));
	                                buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));

	                            case 10:
	                                if (!((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength)) {
	                                    _context4.next = 17;
	                                    break;
	                                }

	                                _context4.next = 13;
	                                return file.read(buffer, offset, buffer.byteLength - offset, pos);

	                            case 13:
	                                _ref6 = _context4.sent;
	                                bytesRead = _ref6.bytesRead;
	                                _context4.next = 10;
	                                break;

	                            case 17:
	                                return _context4.abrupt("return", buffer);

	                            case 18:
	                                return _context4.abrupt("return", null);

	                            case 19:
	                            case "end":
	                                return _context4.stop();
	                        }
	                    }
	                }, _callee4, this);
	            }));

	            function read(_x3) {
	                return _ref5.apply(this, arguments);
	            }

	            return read;
	        }()
	    }, {
	        key: "readAt",
	        value: function () {
	            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(position, nBytes) {
	                var file, size, end, buffer;
	                return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                _context5.t0 = this._pending;

	                                if (!_context5.t0) {
	                                    _context5.next = 4;
	                                    break;
	                                }

	                                _context5.next = 4;
	                                return this._pending;

	                            case 4:
	                                file = this._handle, size = this.size;

	                                if (!(file && position + nBytes < size)) {
	                                    _context5.next = 11;
	                                    break;
	                                }

	                                end = Math.min(size, position + nBytes);
	                                buffer = new Uint8Array(end - position);
	                                _context5.next = 10;
	                                return file.read(buffer, 0, nBytes, position);

	                            case 10:
	                                return _context5.abrupt("return", _context5.sent.buffer);

	                            case 11:
	                                return _context5.abrupt("return", new Uint8Array(nBytes));

	                            case 12:
	                            case "end":
	                                return _context5.stop();
	                        }
	                    }
	                }, _callee5, this);
	            }));

	            function readAt(_x4, _x5) {
	                return _ref7.apply(this, arguments);
	            }

	            return readAt;
	        }()
	    }, {
	        key: "close",
	        value: function () {
	            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	                var f;
	                return regeneratorRuntime.wrap(function _callee6$(_context6) {
	                    while (1) {
	                        switch (_context6.prev = _context6.next) {
	                            case 0:
	                                f = this._handle;
	                                this._handle = null;_context6.t0 = f;

	                                if (!_context6.t0) {
	                                    _context6.next = 6;
	                                    break;
	                                }

	                                _context6.next = 6;
	                                return f.close();

	                            case 6:
	                            case "end":
	                                return _context6.stop();
	                        }
	                    }
	                }, _callee6, this);
	            }));

	            function close() {
	                return _ref8.apply(this, arguments);
	            }

	            return close;
	        }()
	    }, {
	        key: "throw",
	        value: function () {
	            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(value) {
	                return regeneratorRuntime.wrap(function _callee7$(_context7) {
	                    while (1) {
	                        switch (_context7.prev = _context7.next) {
	                            case 0:
	                                _context7.next = 2;
	                                return this.close();

	                            case 2:
	                                return _context7.abrupt("return", { done: true, value: value });

	                            case 3:
	                            case "end":
	                                return _context7.stop();
	                        }
	                    }
	                }, _callee7, this);
	            }));

	            function _throw(_x6) {
	                return _ref9.apply(this, arguments);
	            }

	            return _throw;
	        }()
	    }, {
	        key: "return",
	        value: function () {
	            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(value) {
	                return regeneratorRuntime.wrap(function _callee8$(_context8) {
	                    while (1) {
	                        switch (_context8.prev = _context8.next) {
	                            case 0:
	                                _context8.next = 2;
	                                return this.close();

	                            case 2:
	                                return _context8.abrupt("return", { done: true, value: value });

	                            case 3:
	                            case "end":
	                                return _context8.stop();
	                        }
	                    }
	                }, _callee8, this);
	            }));

	            function _return(_x7) {
	                return _ref10.apply(this, arguments);
	            }

	            return _return;
	        }()
	    }]);

	    return AsyncRandomAccessFile;
	}(stream_1.AsyncByteStream);

	exports.AsyncRandomAccessFile = AsyncRandomAccessFile;

	//# sourceMappingURL=file.js.map

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(72);
	var schema_1 = __webpack_require__(97);
	var type_1 = __webpack_require__(74);
	var visitor_1 = __webpack_require__(76);
	var bit_1 = __webpack_require__(73);
	var utf8_1 = __webpack_require__(62);
	var int_1 = __webpack_require__(115);
	var enum_1 = __webpack_require__(69);
	var buffer_1 = __webpack_require__(60);
	/** @ignore */

	var VectorLoader = function (_visitor_1$Visitor) {
	    _inherits(VectorLoader, _visitor_1$Visitor);

	    function VectorLoader(bytes, nodes, buffers, dictionaries) {
	        _classCallCheck(this, VectorLoader);

	        var _this = _possibleConstructorReturn(this, (VectorLoader.__proto__ || Object.getPrototypeOf(VectorLoader)).call(this));

	        _this.nodesIndex = -1;
	        _this.buffersIndex = -1;
	        _this.bytes = bytes;
	        _this.nodes = nodes;
	        _this.buffers = buffers;
	        _this.dictionaries = dictionaries;
	        return _this;
	    }

	    _createClass(VectorLoader, [{
	        key: "visit",
	        value: function visit(node) {
	            return _get(VectorLoader.prototype.__proto__ || Object.getPrototypeOf(VectorLoader.prototype), "visit", this).call(this, node instanceof schema_1.Field ? node.type : node);
	        }
	    }, {
	        key: "visitNull",
	        value: function visitNull(type) {
	            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref.length;

	            return data_1.Data.Null(type, 0, length);
	        }
	    }, {
	        key: "visitBool",
	        value: function visitBool(type) {
	            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref2.length,
	                nullCount = _ref2.nullCount;

	            return data_1.Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitInt",
	        value: function visitInt(type) {
	            var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref3.length,
	                nullCount = _ref3.nullCount;

	            return data_1.Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitFloat",
	        value: function visitFloat(type) {
	            var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref4.length,
	                nullCount = _ref4.nullCount;

	            return data_1.Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitUtf8",
	        value: function visitUtf8(type) {
	            var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref5.length,
	                nullCount = _ref5.nullCount;

	            return data_1.Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));
	        }
	    }, {
	        key: "visitBinary",
	        value: function visitBinary(type) {
	            var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref6.length,
	                nullCount = _ref6.nullCount;

	            return data_1.Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));
	        }
	    }, {
	        key: "visitFixedSizeBinary",
	        value: function visitFixedSizeBinary(type) {
	            var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref7.length,
	                nullCount = _ref7.nullCount;

	            return data_1.Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitDate",
	        value: function visitDate(type) {
	            var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref8.length,
	                nullCount = _ref8.nullCount;

	            return data_1.Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitTimestamp",
	        value: function visitTimestamp(type) {
	            var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref9.length,
	                nullCount = _ref9.nullCount;

	            return data_1.Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitTime",
	        value: function visitTime(type) {
	            var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref10.length,
	                nullCount = _ref10.nullCount;

	            return data_1.Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitDecimal",
	        value: function visitDecimal(type) {
	            var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref11.length,
	                nullCount = _ref11.nullCount;

	            return data_1.Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitList",
	        value: function visitList(type) {
	            var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref12.length,
	                nullCount = _ref12.nullCount;

	            return data_1.Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));
	        }
	    }, {
	        key: "visitStruct",
	        value: function visitStruct(type) {
	            var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref13.length,
	                nullCount = _ref13.nullCount;

	            return data_1.Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));
	        }
	    }, {
	        key: "visitUnion",
	        value: function visitUnion(type) {
	            return type.mode === enum_1.UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);
	        }
	    }, {
	        key: "visitDenseUnion",
	        value: function visitDenseUnion(type) {
	            var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref14.length,
	                nullCount = _ref14.nullCount;

	            return data_1.Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));
	        }
	    }, {
	        key: "visitSparseUnion",
	        value: function visitSparseUnion(type) {
	            var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref15.length,
	                nullCount = _ref15.nullCount;

	            return data_1.Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary(type) {
	            var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref16.length,
	                nullCount = _ref16.nullCount;

	            return data_1.Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));
	        }
	    }, {
	        key: "visitInterval",
	        value: function visitInterval(type) {
	            var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref17.length,
	                nullCount = _ref17.nullCount;

	            return data_1.Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
	        }
	    }, {
	        key: "visitFixedSizeList",
	        value: function visitFixedSizeList(type) {
	            var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref18.length,
	                nullCount = _ref18.nullCount;

	            return data_1.Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));
	        }
	    }, {
	        key: "visitMap",
	        value: function visitMap(type) {
	            var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),
	                length = _ref19.length,
	                nullCount = _ref19.nullCount;

	            return data_1.Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));
	        }
	    }, {
	        key: "nextFieldNode",
	        value: function nextFieldNode() {
	            return this.nodes[++this.nodesIndex];
	        }
	    }, {
	        key: "nextBufferRange",
	        value: function nextBufferRange() {
	            return this.buffers[++this.buffersIndex];
	        }
	    }, {
	        key: "readNullBitmap",
	        value: function readNullBitmap(type, nullCount) {
	            var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();

	            return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);
	        }
	    }, {
	        key: "readOffsets",
	        value: function readOffsets(type, buffer) {
	            return this.readData(type, buffer);
	        }
	    }, {
	        key: "readTypeIds",
	        value: function readTypeIds(type, buffer) {
	            return this.readData(type, buffer);
	        }
	    }, {
	        key: "readData",
	        value: function readData(_type) {
	            var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),
	                length = _ref20.length,
	                offset = _ref20.offset;

	            return this.bytes.subarray(offset, offset + length);
	        }
	    }, {
	        key: "readDictionary",
	        value: function readDictionary(type) {
	            return this.dictionaries.get(type.id);
	        }
	    }]);

	    return VectorLoader;
	}(visitor_1.Visitor);

	exports.VectorLoader = VectorLoader;
	/** @ignore */

	var JSONVectorLoader = function (_VectorLoader) {
	    _inherits(JSONVectorLoader, _VectorLoader);

	    function JSONVectorLoader(sources, nodes, buffers, dictionaries) {
	        _classCallCheck(this, JSONVectorLoader);

	        var _this2 = _possibleConstructorReturn(this, (JSONVectorLoader.__proto__ || Object.getPrototypeOf(JSONVectorLoader)).call(this, new Uint8Array(0), nodes, buffers, dictionaries));

	        _this2.sources = sources;
	        return _this2;
	    }

	    _createClass(JSONVectorLoader, [{
	        key: "readNullBitmap",
	        value: function readNullBitmap(_type, nullCount) {
	            var _ref21 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange(),
	                offset = _ref21.offset;

	            return nullCount <= 0 ? new Uint8Array(0) : bit_1.packBools(this.sources[offset]);
	        }
	    }, {
	        key: "readOffsets",
	        value: function readOffsets(_type) {
	            var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),
	                offset = _ref22.offset;

	            return buffer_1.toArrayBufferView(Uint8Array, buffer_1.toArrayBufferView(Int32Array, this.sources[offset]));
	        }
	    }, {
	        key: "readTypeIds",
	        value: function readTypeIds(type) {
	            var _ref23 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),
	                offset = _ref23.offset;

	            return buffer_1.toArrayBufferView(Uint8Array, buffer_1.toArrayBufferView(type.ArrayType, this.sources[offset]));
	        }
	    }, {
	        key: "readData",
	        value: function readData(type) {
	            var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),
	                offset = _ref24.offset;

	            var sources = this.sources;

	            if (type_1.DataType.isTimestamp(type)) {
	                return buffer_1.toArrayBufferView(Uint8Array, int_1.Int64.convertArray(sources[offset]));
	            } else if ((type_1.DataType.isInt(type) || type_1.DataType.isTime(type)) && type.bitWidth === 64) {
	                return buffer_1.toArrayBufferView(Uint8Array, int_1.Int64.convertArray(sources[offset]));
	            } else if (type_1.DataType.isDate(type) && type.unit === enum_1.DateUnit.MILLISECOND) {
	                return buffer_1.toArrayBufferView(Uint8Array, int_1.Int64.convertArray(sources[offset]));
	            } else if (type_1.DataType.isDecimal(type)) {
	                return buffer_1.toArrayBufferView(Uint8Array, int_1.Int128.convertArray(sources[offset]));
	            } else if (type_1.DataType.isBinary(type) || type_1.DataType.isFixedSizeBinary(type)) {
	                return binaryDataFromJSON(sources[offset]);
	            } else if (type_1.DataType.isBool(type)) {
	                return bit_1.packBools(sources[offset]);
	            } else if (type_1.DataType.isUtf8(type)) {
	                return utf8_1.encodeUtf8(sources[offset].join(''));
	            }
	            return buffer_1.toArrayBufferView(Uint8Array, buffer_1.toArrayBufferView(type.ArrayType, sources[offset].map(function (x) {
	                return +x;
	            })));
	        }
	    }]);

	    return JSONVectorLoader;
	}(VectorLoader);

	exports.JSONVectorLoader = JSONVectorLoader;
	/** @ignore */
	function binaryDataFromJSON(values) {
	    // "DATA": ["49BC7D5B6C47D2","3F5FB6D9322026"]
	    // There are definitely more efficient ways to do this... but it gets the
	    // job done.
	    var joined = values.join('');
	    var data = new Uint8Array(joined.length / 2);
	    for (var i = 0; i < joined.length; i += 2) {
	        data[i >> 1] = parseInt(joined.substr(i, 2), 16);
	    }
	    return data;
	}

	//# sourceMappingURL=vectorloader.js.map

/***/ }),
/* 115 */
/***/ (function(module, exports) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	/** @ignore */
	var carryBit16 = 1 << 16;
	/** @ignore */
	function intAsHex(value) {
	    if (value < 0) {
	        value = 0xFFFFFFFF + value + 1;
	    }
	    return "0x" + value.toString(16);
	}
	/** @ignore */
	var kInt32DecimalDigits = 8;
	/** @ignore */
	var kPowersOfTen = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];
	/** @ignore */

	var BaseInt64 = function () {
	    function BaseInt64(buffer) {
	        _classCallCheck(this, BaseInt64);

	        this.buffer = buffer;
	    }

	    _createClass(BaseInt64, [{
	        key: "high",
	        value: function high() {
	            return this.buffer[1];
	        }
	    }, {
	        key: "low",
	        value: function low() {
	            return this.buffer[0];
	        }
	    }, {
	        key: "_times",
	        value: function _times(other) {
	            // Break the left and right numbers into 16 bit chunks
	            // so that we can multiply them without overflow.
	            var L = new Uint32Array([this.buffer[1] >>> 16, this.buffer[1] & 0xFFFF, this.buffer[0] >>> 16, this.buffer[0] & 0xFFFF]);
	            var R = new Uint32Array([other.buffer[1] >>> 16, other.buffer[1] & 0xFFFF, other.buffer[0] >>> 16, other.buffer[0] & 0xFFFF]);
	            var product = L[3] * R[3];
	            this.buffer[0] = product & 0xFFFF;
	            var sum = product >>> 16;
	            product = L[2] * R[3];
	            sum += product;
	            product = L[3] * R[2] >>> 0;
	            sum += product;
	            this.buffer[0] += sum << 16;
	            this.buffer[1] = sum >>> 0 < product ? carryBit16 : 0;
	            this.buffer[1] += sum >>> 16;
	            this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];
	            this.buffer[1] += L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0] << 16;
	            return this;
	        }
	    }, {
	        key: "_plus",
	        value: function _plus(other) {
	            var sum = this.buffer[0] + other.buffer[0] >>> 0;
	            this.buffer[1] += other.buffer[1];
	            if (sum < this.buffer[0] >>> 0) {
	                ++this.buffer[1];
	            }
	            this.buffer[0] = sum;
	        }
	    }, {
	        key: "lessThan",
	        value: function lessThan(other) {
	            return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];
	        }
	    }, {
	        key: "equals",
	        value: function equals(other) {
	            return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];
	        }
	    }, {
	        key: "greaterThan",
	        value: function greaterThan(other) {
	            return other.lessThan(this);
	        }
	    }, {
	        key: "hex",
	        value: function hex() {
	            return intAsHex(this.buffer[1]) + " " + intAsHex(this.buffer[0]);
	        }
	    }]);

	    return BaseInt64;
	}();

	exports.BaseInt64 = BaseInt64;
	/** @ignore */

	var Uint64 = function (_BaseInt) {
	    _inherits(Uint64, _BaseInt);

	    function Uint64() {
	        _classCallCheck(this, Uint64);

	        return _possibleConstructorReturn(this, (Uint64.__proto__ || Object.getPrototypeOf(Uint64)).apply(this, arguments));
	    }

	    _createClass(Uint64, [{
	        key: "times",
	        value: function times(other) {
	            this._times(other);
	            return this;
	        }
	    }, {
	        key: "plus",
	        value: function plus(other) {
	            this._plus(other);
	            return this;
	        }
	        /** @nocollapse */

	    }], [{
	        key: "from",
	        value: function from(val) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);

	            return Uint64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);
	        }
	        /** @nocollapse */

	    }, {
	        key: "fromNumber",
	        value: function fromNumber(num) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);

	            // Always parse numbers as strings - pulling out high and low bits
	            // directly seems to lose precision sometimes
	            // For example:
	            //     > -4613034156400212000 >>> 0
	            //     721782784
	            // The correct lower 32-bits are 721782752
	            return Uint64.fromString(num.toString(), out_buffer);
	        }
	        /** @nocollapse */

	    }, {
	        key: "fromString",
	        value: function fromString(str) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);

	            var length = str.length;
	            var out = new Uint64(out_buffer);
	            for (var posn = 0; posn < length;) {
	                var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;
	                var chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));
	                var multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));
	                out.times(multiple);
	                out.plus(chunk);
	                posn += group;
	            }
	            return out;
	        }
	        /** @nocollapse */

	    }, {
	        key: "convertArray",
	        value: function convertArray(values) {
	            var data = new Uint32Array(values.length * 2);
	            for (var i = -1, n = values.length; ++i < n;) {
	                Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
	            }
	            return data;
	        }
	        /** @nocollapse */

	    }, {
	        key: "multiply",
	        value: function multiply(left, right) {
	            var rtrn = new Uint64(new Uint32Array(left.buffer));
	            return rtrn.times(right);
	        }
	        /** @nocollapse */

	    }, {
	        key: "add",
	        value: function add(left, right) {
	            var rtrn = new Uint64(new Uint32Array(left.buffer));
	            return rtrn.plus(right);
	        }
	    }]);

	    return Uint64;
	}(BaseInt64);

	exports.Uint64 = Uint64;
	/** @ignore */

	var Int64 = function (_BaseInt2) {
	    _inherits(Int64, _BaseInt2);

	    function Int64() {
	        _classCallCheck(this, Int64);

	        return _possibleConstructorReturn(this, (Int64.__proto__ || Object.getPrototypeOf(Int64)).apply(this, arguments));
	    }

	    _createClass(Int64, [{
	        key: "negate",
	        value: function negate() {
	            this.buffer[0] = ~this.buffer[0] + 1;
	            this.buffer[1] = ~this.buffer[1];
	            if (this.buffer[0] == 0) {
	                ++this.buffer[1];
	            }
	            return this;
	        }
	    }, {
	        key: "times",
	        value: function times(other) {
	            this._times(other);
	            return this;
	        }
	    }, {
	        key: "plus",
	        value: function plus(other) {
	            this._plus(other);
	            return this;
	        }
	    }, {
	        key: "lessThan",
	        value: function lessThan(other) {
	            // force high bytes to be signed
	            var this_high = this.buffer[1] << 0;
	            var other_high = other.buffer[1] << 0;
	            return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];
	        }
	        /** @nocollapse */

	    }], [{
	        key: "from",
	        value: function from(val) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);

	            return Int64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);
	        }
	        /** @nocollapse */

	    }, {
	        key: "fromNumber",
	        value: function fromNumber(num) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);

	            // Always parse numbers as strings - pulling out high and low bits
	            // directly seems to lose precision sometimes
	            // For example:
	            //     > -4613034156400212000 >>> 0
	            //     721782784
	            // The correct lower 32-bits are 721782752
	            return Int64.fromString(num.toString(), out_buffer);
	        }
	        /** @nocollapse */

	    }, {
	        key: "fromString",
	        value: function fromString(str) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);

	            // TODO: Assert that out_buffer is 0 and length = 2
	            var negate = str.startsWith('-');
	            var length = str.length;
	            var out = new Int64(out_buffer);
	            for (var posn = negate ? 1 : 0; posn < length;) {
	                var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;
	                var chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));
	                var multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));
	                out.times(multiple);
	                out.plus(chunk);
	                posn += group;
	            }
	            return negate ? out.negate() : out;
	        }
	        /** @nocollapse */

	    }, {
	        key: "convertArray",
	        value: function convertArray(values) {
	            var data = new Uint32Array(values.length * 2);
	            for (var i = -1, n = values.length; ++i < n;) {
	                Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
	            }
	            return data;
	        }
	        /** @nocollapse */

	    }, {
	        key: "multiply",
	        value: function multiply(left, right) {
	            var rtrn = new Int64(new Uint32Array(left.buffer));
	            return rtrn.times(right);
	        }
	        /** @nocollapse */

	    }, {
	        key: "add",
	        value: function add(left, right) {
	            var rtrn = new Int64(new Uint32Array(left.buffer));
	            return rtrn.plus(right);
	        }
	    }]);

	    return Int64;
	}(BaseInt64);

	exports.Int64 = Int64;
	/** @ignore */

	var Int128 = function () {
	    function Int128(buffer) {
	        _classCallCheck(this, Int128);

	        this.buffer = buffer;
	        // buffer[3] MSB (high)
	        // buffer[2]
	        // buffer[1]
	        // buffer[0] LSB (low)
	    }

	    _createClass(Int128, [{
	        key: "high",
	        value: function high() {
	            return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
	        }
	    }, {
	        key: "low",
	        value: function low() {
	            return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));
	        }
	    }, {
	        key: "negate",
	        value: function negate() {
	            this.buffer[0] = ~this.buffer[0] + 1;
	            this.buffer[1] = ~this.buffer[1];
	            this.buffer[2] = ~this.buffer[2];
	            this.buffer[3] = ~this.buffer[3];
	            if (this.buffer[0] == 0) {
	                ++this.buffer[1];
	            }
	            if (this.buffer[1] == 0) {
	                ++this.buffer[2];
	            }
	            if (this.buffer[2] == 0) {
	                ++this.buffer[3];
	            }
	            return this;
	        }
	    }, {
	        key: "times",
	        value: function times(other) {
	            // Break the left and right numbers into 32 bit chunks
	            // so that we can multiply them without overflow.
	            var L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));
	            var L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));
	            var L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));
	            var L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));
	            var R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));
	            var R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));
	            var R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));
	            var R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));
	            var product = Uint64.multiply(L3, R3);
	            this.buffer[0] = product.low();
	            var sum = new Uint64(new Uint32Array([product.high(), 0]));
	            product = Uint64.multiply(L2, R3);
	            sum.plus(product);
	            product = Uint64.multiply(L3, R2);
	            sum.plus(product);
	            this.buffer[1] = sum.low();
	            this.buffer[3] = sum.lessThan(product) ? 1 : 0;
	            this.buffer[2] = sum.high();
	            var high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
	            high.plus(Uint64.multiply(L1, R3)).plus(Uint64.multiply(L2, R2)).plus(Uint64.multiply(L3, R1));
	            this.buffer[3] += Uint64.multiply(L0, R3).plus(Uint64.multiply(L1, R2)).plus(Uint64.multiply(L2, R1)).plus(Uint64.multiply(L3, R0)).low();
	            return this;
	        }
	    }, {
	        key: "plus",
	        value: function plus(other) {
	            var sums = new Uint32Array(4);
	            sums[3] = this.buffer[3] + other.buffer[3] >>> 0;
	            sums[2] = this.buffer[2] + other.buffer[2] >>> 0;
	            sums[1] = this.buffer[1] + other.buffer[1] >>> 0;
	            sums[0] = this.buffer[0] + other.buffer[0] >>> 0;
	            if (sums[0] < this.buffer[0] >>> 0) {
	                ++sums[1];
	            }
	            if (sums[1] < this.buffer[1] >>> 0) {
	                ++sums[2];
	            }
	            if (sums[2] < this.buffer[2] >>> 0) {
	                ++sums[3];
	            }
	            this.buffer[3] = sums[3];
	            this.buffer[2] = sums[2];
	            this.buffer[1] = sums[1];
	            this.buffer[0] = sums[0];
	            return this;
	        }
	    }, {
	        key: "hex",
	        value: function hex() {
	            return intAsHex(this.buffer[3]) + " " + intAsHex(this.buffer[2]) + " " + intAsHex(this.buffer[1]) + " " + intAsHex(this.buffer[0]);
	        }
	        /** @nocollapse */

	    }], [{
	        key: "multiply",
	        value: function multiply(left, right) {
	            var rtrn = new Int128(new Uint32Array(left.buffer));
	            return rtrn.times(right);
	        }
	        /** @nocollapse */

	    }, {
	        key: "add",
	        value: function add(left, right) {
	            var rtrn = new Int128(new Uint32Array(left.buffer));
	            return rtrn.plus(right);
	        }
	        /** @nocollapse */

	    }, {
	        key: "from",
	        value: function from(val) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);

	            return Int128.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);
	        }
	        /** @nocollapse */

	    }, {
	        key: "fromNumber",
	        value: function fromNumber(num) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);

	            // Always parse numbers as strings - pulling out high and low bits
	            // directly seems to lose precision sometimes
	            // For example:
	            //     > -4613034156400212000 >>> 0
	            //     721782784
	            // The correct lower 32-bits are 721782752
	            return Int128.fromString(num.toString(), out_buffer);
	        }
	        /** @nocollapse */

	    }, {
	        key: "fromString",
	        value: function fromString(str) {
	            var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);

	            // TODO: Assert that out_buffer is 0 and length = 4
	            var negate = str.startsWith('-');
	            var length = str.length;
	            var out = new Int128(out_buffer);
	            for (var posn = negate ? 1 : 0; posn < length;) {
	                var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;
	                var chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));
	                var multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));
	                out.times(multiple);
	                out.plus(chunk);
	                posn += group;
	            }
	            return negate ? out.negate() : out;
	        }
	        /** @nocollapse */

	    }, {
	        key: "convertArray",
	        value: function convertArray(values) {
	            // TODO: Distinguish between string and number at compile-time
	            var data = new Uint32Array(values.length * 4);
	            for (var i = -1, n = values.length; ++i < n;) {
	                Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));
	            }
	            return data;
	        }
	    }]);

	    return Int128;
	}();

	exports.Int128 = Int128;

	//# sourceMappingURL=int.js.map

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(72);
	var table_1 = __webpack_require__(117);
	var vector_1 = __webpack_require__(68);
	var visitor_1 = __webpack_require__(76);
	var schema_1 = __webpack_require__(97);
	var compat_1 = __webpack_require__(64);
	var chunked_1 = __webpack_require__(100);
	var args_1 = __webpack_require__(98);
	var type_1 = __webpack_require__(74);
	var recordbatch_1 = __webpack_require__(126);
	var index_1 = __webpack_require__(127);

	var RecordBatch = function (_index_1$StructVector) {
	    _inherits(RecordBatch, _index_1$StructVector);

	    function RecordBatch() {
	        _classCallCheck(this, RecordBatch);

	        var data = void 0;

	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }

	        var schema = args[0];
	        var children = void 0;
	        if (args[1] instanceof data_1.Data) {
	            data = args[1];
	            children = args[2];
	        } else {
	            var fields = schema.fields;
	            var length = args[1],
	                childData = args[2];

	            data = data_1.Data.Struct(new type_1.Struct(fields), 0, length, 0, null, childData);
	        }

	        var _this = _possibleConstructorReturn(this, (RecordBatch.__proto__ || Object.getPrototypeOf(RecordBatch)).call(this, data, children));

	        _this._schema = schema;
	        return _this;
	    }
	    /** @nocollapse */


	    _createClass(RecordBatch, [{
	        key: "clone",
	        value: function clone(data) {
	            var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;

	            return new RecordBatch(this._schema, data, children);
	        }
	    }, {
	        key: "concat",
	        value: function concat() {
	            var _chunked_1$Chunked;

	            for (var _len2 = arguments.length, others = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                others[_key2] = arguments[_key2];
	            }

	            var schema = this._schema,
	                chunks = (_chunked_1$Chunked = chunked_1.Chunked).flatten.apply(_chunked_1$Chunked, [this].concat(others));
	            return new table_1.Table(schema, chunks.map(function (_ref) {
	                var data = _ref.data;
	                return new RecordBatch(schema, data);
	            }));
	        }
	    }, {
	        key: "select",
	        value: function select() {
	            var nameToIndex = this._schema.fields.reduce(function (m, f, i) {
	                return m.set(f.name, i);
	            }, new Map());

	            for (var _len3 = arguments.length, columnNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                columnNames[_key3] = arguments[_key3];
	            }

	            return this.selectAt.apply(this, _toConsumableArray(columnNames.map(function (columnName) {
	                return nameToIndex.get(columnName);
	            }).filter(function (x) {
	                return x > -1;
	            })));
	        }
	    }, {
	        key: "selectAt",
	        value: function selectAt() {
	            var _schema,
	                _this2 = this;

	            for (var _len4 = arguments.length, columnIndices = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	                columnIndices[_key4] = arguments[_key4];
	            }

	            var schema = (_schema = this._schema).selectAt.apply(_schema, columnIndices);
	            var childData = columnIndices.map(function (i) {
	                return _this2.data.childData[i];
	            }).filter(Boolean);
	            return new RecordBatch(schema, this.length, childData);
	        }
	    }, {
	        key: "schema",
	        get: function get() {
	            return this._schema;
	        }
	    }, {
	        key: "numCols",
	        get: function get() {
	            return this._schema.fields.length;
	        }
	    }, {
	        key: "dictionaries",
	        get: function get() {
	            return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));
	        }
	    }], [{
	        key: "from",
	        value: function from(options) {
	            if (compat_1.isIterable(options['values'])) {
	                return table_1.Table.from(options);
	            }
	            return table_1.Table.from(options);
	        }
	        /** @nocollapse */

	    }, {
	        key: "new",
	        value: function _new() {
	            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	                args[_key5] = arguments[_key5];
	            }

	            var _args_1$selectFieldAr = args_1.selectFieldArgs(args),
	                _args_1$selectFieldAr2 = _slicedToArray(_args_1$selectFieldAr, 2),
	                fs = _args_1$selectFieldAr2[0],
	                xs = _args_1$selectFieldAr2[1];

	            var vs = xs.filter(function (x) {
	                return x instanceof vector_1.Vector;
	            });
	            return new (Function.prototype.bind.apply(RecordBatch, [null].concat(_toConsumableArray(recordbatch_1.ensureSameLengthData(new schema_1.Schema(fs), vs.map(function (x) {
	                return x.data;
	            }))))))();
	        }
	    }]);

	    return RecordBatch;
	}(index_1.StructVector);

	exports.RecordBatch = RecordBatch;
	/**
	 * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`
	 * implementations to differentiate between a stream with valid zero-length
	 * RecordBatches, and a stream with a Schema message, but no RecordBatches.
	 * @see https://github.com/apache/arrow/pull/4373
	 * @ignore
	 * @private
	 */
	/* tslint:disable:class-name */

	var _InternalEmptyPlaceholderRecordBatch = function (_RecordBatch) {
	    _inherits(_InternalEmptyPlaceholderRecordBatch, _RecordBatch);

	    function _InternalEmptyPlaceholderRecordBatch(schema) {
	        _classCallCheck(this, _InternalEmptyPlaceholderRecordBatch);

	        return _possibleConstructorReturn(this, (_InternalEmptyPlaceholderRecordBatch.__proto__ || Object.getPrototypeOf(_InternalEmptyPlaceholderRecordBatch)).call(this, schema, 0, schema.fields.map(function (f) {
	            return data_1.Data.new(f.type, 0, 0, 0);
	        })));
	    }

	    return _InternalEmptyPlaceholderRecordBatch;
	}(RecordBatch);

	exports._InternalEmptyPlaceholderRecordBatch = _InternalEmptyPlaceholderRecordBatch;
	/** @ignore */

	var DictionaryCollector = function (_visitor_1$Visitor) {
	    _inherits(DictionaryCollector, _visitor_1$Visitor);

	    function DictionaryCollector() {
	        _classCallCheck(this, DictionaryCollector);

	        var _this4 = _possibleConstructorReturn(this, (DictionaryCollector.__proto__ || Object.getPrototypeOf(DictionaryCollector)).apply(this, arguments));

	        _this4.dictionaries = new Map();
	        return _this4;
	    }

	    _createClass(DictionaryCollector, [{
	        key: "visit",
	        value: function visit(data, type) {
	            var _this5 = this;

	            if (type_1.DataType.isDictionary(type)) {
	                return this.visitDictionary(data, type);
	            } else {
	                data.childData.forEach(function (child, i) {
	                    return _this5.visit(child, type.children[i].type);
	                });
	            }
	            return this;
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary(data, type) {
	            var dictionary = data.dictionary;
	            if (dictionary && dictionary.length > 0) {
	                this.dictionaries.set(type.id, dictionary);
	            }
	            return this;
	        }
	    }], [{
	        key: "collect",
	        value: function collect(batch) {
	            return new DictionaryCollector().visit(batch.data, new type_1.Struct(batch.schema.fields)).dictionaries;
	        }
	    }]);

	    return DictionaryCollector;
	}(visitor_1.Visitor);

	//# sourceMappingURL=recordbatch.js.map

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _asyncIterator(iterable) { if (typeof Symbol === "function") { if (Symbol.asyncIterator) { var method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { return iterable[Symbol.iterator](); } } throw new TypeError("Object is not async iterable"); }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var column_1 = __webpack_require__(99);
	var schema_1 = __webpack_require__(97);
	var recordbatch_1 = __webpack_require__(116);
	var reader_1 = __webpack_require__(109);
	var type_1 = __webpack_require__(74);
	var args_1 = __webpack_require__(98);
	var compat_1 = __webpack_require__(64);
	var writer_1 = __webpack_require__(118);
	var recordbatch_2 = __webpack_require__(126);
	var index_1 = __webpack_require__(127);

	var Table = function (_index_1$Chunked) {
	    _inherits(Table, _index_1$Chunked);

	    function Table() {
	        _classCallCheck(this, Table);

	        var schema = null;

	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }

	        if (args[0] instanceof schema_1.Schema) {
	            schema = args.shift();
	        }
	        var chunks = args_1.selectArgs(recordbatch_1.RecordBatch, args);
	        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {
	            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');
	        }
	        chunks[0] || (chunks[0] = new recordbatch_1._InternalEmptyPlaceholderRecordBatch(schema));

	        var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, new type_1.Struct(schema.fields), chunks));

	        _this._schema = schema;
	        _this._chunks = chunks;
	        return _this;
	    }
	    /** @nocollapse */


	    _createClass(Table, [{
	        key: "clone",
	        value: function clone() {
	            var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;

	            return new Table(this._schema, chunks);
	        }
	    }, {
	        key: "getColumn",
	        value: function getColumn(name) {
	            return this.getColumnAt(this.getColumnIndex(name));
	        }
	    }, {
	        key: "getColumnAt",
	        value: function getColumnAt(index) {
	            return this.getChildAt(index);
	        }
	    }, {
	        key: "getColumnIndex",
	        value: function getColumnIndex(name) {
	            return this._schema.fields.findIndex(function (f) {
	                return f.name === name;
	            });
	        }
	    }, {
	        key: "getChildAt",
	        value: function getChildAt(index) {
	            if (index < 0 || index >= this.numChildren) {
	                return null;
	            }
	            var field = void 0,
	                child = void 0;
	            var fields = this._schema.fields;
	            var columns = this._children || (this._children = []);
	            if (child = columns[index]) {
	                return child;
	            }
	            if (field = fields[index]) {
	                var chunks = this._chunks.map(function (chunk) {
	                    return chunk.getChildAt(index);
	                }).filter(function (vec) {
	                    return vec != null;
	                });
	                if (chunks.length > 0) {
	                    return columns[index] = new column_1.Column(field, chunks);
	                }
	            }
	            return null;
	        }
	        // @ts-ignore

	    }, {
	        key: "serialize",
	        value: function serialize() {
	            var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'binary';
	            var stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            var Writer = !stream ? writer_1.RecordBatchFileWriter : writer_1.RecordBatchStreamWriter;
	            return Writer.writeAll(this).toUint8Array(true);
	        }
	    }, {
	        key: "count",
	        value: function count() {
	            return this._length;
	        }
	    }, {
	        key: "select",
	        value: function select() {
	            var nameToIndex = this._schema.fields.reduce(function (m, f, i) {
	                return m.set(f.name, i);
	            }, new Map());

	            for (var _len2 = arguments.length, columnNames = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                columnNames[_key2] = arguments[_key2];
	            }

	            return this.selectAt.apply(this, _toConsumableArray(columnNames.map(function (columnName) {
	                return nameToIndex.get(columnName);
	            }).filter(function (x) {
	                return x > -1;
	            })));
	        }
	    }, {
	        key: "selectAt",
	        value: function selectAt() {
	            var _schema;

	            for (var _len3 = arguments.length, columnIndices = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                columnIndices[_key3] = arguments[_key3];
	            }

	            var schema = (_schema = this._schema).selectAt.apply(_schema, columnIndices);
	            return new Table(schema, this._chunks.map(function (_ref) {
	                var length = _ref.length,
	                    childData = _ref.data.childData;

	                return new recordbatch_1.RecordBatch(schema, length, columnIndices.map(function (i) {
	                    return childData[i];
	                }).filter(Boolean));
	            }));
	        }
	    }, {
	        key: "assign",
	        value: function assign(other) {
	            var _this2 = this;

	            var fields = this._schema.fields;

	            var _other$schema$fields$ = other.schema.fields.reduce(function (memo, f2, newIdx) {
	                var _memo = _slicedToArray(memo, 2),
	                    indices = _memo[0],
	                    oldToNew = _memo[1];

	                var i = fields.findIndex(function (f) {
	                    return f.name === f2.name;
	                });
	                ~i ? oldToNew[i] = newIdx : indices.push(newIdx);
	                return memo;
	            }, [[], []]),
	                _other$schema$fields$2 = _slicedToArray(_other$schema$fields$, 2),
	                indices = _other$schema$fields$2[0],
	                oldToNew = _other$schema$fields$2[1];

	            var schema = this._schema.assign(other.schema);
	            var columns = [].concat(_toConsumableArray(fields.map(function (_f, i, _fs) {
	                var j = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : oldToNew[i];
	                return j === undefined ? _this2.getColumnAt(i) : other.getColumnAt(j);
	            })), _toConsumableArray(indices.map(function (i) {
	                return other.getColumnAt(i);
	            }))).filter(Boolean);
	            return new (Function.prototype.bind.apply(Table, [null].concat(_toConsumableArray(recordbatch_2.distributeVectorsIntoRecordBatches(schema, columns)))))();
	        }
	    }, {
	        key: "schema",
	        get: function get() {
	            return this._schema;
	        }
	    }, {
	        key: "length",
	        get: function get() {
	            return this._length;
	        }
	    }, {
	        key: "chunks",
	        get: function get() {
	            return this._chunks;
	        }
	    }, {
	        key: "numCols",
	        get: function get() {
	            return this._numChildren;
	        }
	    }], [{
	        key: "empty",
	        value: function empty() {
	            var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new schema_1.Schema([]);
	            return new Table(schema, []);
	        }
	        /** @nocollapse */

	    }, {
	        key: "from",
	        value: function from(input) {
	            var _this3 = this;

	            if (!input) {
	                return Table.empty();
	            }
	            if ((typeof input === "undefined" ? "undefined" : _typeof(input)) === 'object') {
	                var table = compat_1.isIterable(input['values']) ? tableFromIterable(input) : compat_1.isAsyncIterable(input['values']) ? tableFromAsyncIterable(input) : null;
	                if (table !== null) {
	                    return table;
	                }
	            }
	            var reader = reader_1.RecordBatchReader.from(input);
	            if (compat_1.isPromise(reader)) {
	                return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                    return regeneratorRuntime.wrap(function _callee$(_context) {
	                        while (1) {
	                            switch (_context.prev = _context.next) {
	                                case 0:
	                                    _context.t0 = Table;
	                                    _context.next = 3;
	                                    return reader;

	                                case 3:
	                                    _context.t1 = _context.sent;
	                                    _context.next = 6;
	                                    return _context.t0.from.call(_context.t0, _context.t1);

	                                case 6:
	                                    return _context.abrupt("return", _context.sent);

	                                case 7:
	                                case "end":
	                                    return _context.stop();
	                            }
	                        }
	                    }, _callee, _this3);
	                }))();
	            }
	            if (reader.isSync() && (reader = reader.open())) {
	                return !reader.schema ? Table.empty() : new Table(reader.schema, [].concat(_toConsumableArray(reader)));
	            }
	            return function () {
	                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(opening) {
	                    var reader, schema, batches, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, batch;

	                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                        while (1) {
	                            switch (_context2.prev = _context2.next) {
	                                case 0:
	                                    _context2.next = 2;
	                                    return opening;

	                                case 2:
	                                    reader = _context2.sent;
	                                    schema = reader.schema;
	                                    batches = [];

	                                    if (!schema) {
	                                        _context2.next = 41;
	                                        break;
	                                    }

	                                    _iteratorNormalCompletion = true;
	                                    _didIteratorError = false;
	                                    _iteratorError = undefined;
	                                    _context2.prev = 9;
	                                    _iterator = _asyncIterator(reader);

	                                case 11:
	                                    _context2.next = 13;
	                                    return _iterator.next();

	                                case 13:
	                                    _step = _context2.sent;
	                                    _iteratorNormalCompletion = _step.done;
	                                    _context2.next = 17;
	                                    return _step.value;

	                                case 17:
	                                    _value = _context2.sent;

	                                    if (_iteratorNormalCompletion) {
	                                        _context2.next = 24;
	                                        break;
	                                    }

	                                    batch = _value;

	                                    batches.push(batch);

	                                case 21:
	                                    _iteratorNormalCompletion = true;
	                                    _context2.next = 11;
	                                    break;

	                                case 24:
	                                    _context2.next = 30;
	                                    break;

	                                case 26:
	                                    _context2.prev = 26;
	                                    _context2.t0 = _context2["catch"](9);
	                                    _didIteratorError = true;
	                                    _iteratorError = _context2.t0;

	                                case 30:
	                                    _context2.prev = 30;
	                                    _context2.prev = 31;

	                                    if (!(!_iteratorNormalCompletion && _iterator.return)) {
	                                        _context2.next = 35;
	                                        break;
	                                    }

	                                    _context2.next = 35;
	                                    return _iterator.return();

	                                case 35:
	                                    _context2.prev = 35;

	                                    if (!_didIteratorError) {
	                                        _context2.next = 38;
	                                        break;
	                                    }

	                                    throw _iteratorError;

	                                case 38:
	                                    return _context2.finish(35);

	                                case 39:
	                                    return _context2.finish(30);

	                                case 40:
	                                    return _context2.abrupt("return", new Table(schema, batches));

	                                case 41:
	                                    return _context2.abrupt("return", Table.empty());

	                                case 42:
	                                case "end":
	                                    return _context2.stop();
	                            }
	                        }
	                    }, _callee2, _this3, [[9, 26, 30, 40], [31,, 35, 39]]);
	                }));

	                return function (_x6) {
	                    return _ref3.apply(this, arguments);
	                };
	            }()(reader.open());
	        }
	        /** @nocollapse */

	    }, {
	        key: "fromAsync",
	        value: function () {
	            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(source) {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.next = 2;
	                                return Table.from(source);

	                            case 2:
	                                return _context3.abrupt("return", _context3.sent);

	                            case 3:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));

	            function fromAsync(_x7) {
	                return _ref4.apply(this, arguments);
	            }

	            return fromAsync;
	        }()
	        /** @nocollapse */

	    }, {
	        key: "fromStruct",
	        value: function fromStruct(vector) {
	            return Table.new(vector.data.childData, vector.type.children);
	        }
	        /** @nocollapse */

	    }, {
	        key: "new",
	        value: function _new() {
	            for (var _len4 = arguments.length, cols = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	                cols[_key4] = arguments[_key4];
	            }

	            return new (Function.prototype.bind.apply(Table, [null].concat(_toConsumableArray(recordbatch_2.distributeColumnsIntoRecordBatches(args_1.selectColumnArgs(cols))))))();
	        }
	    }]);

	    return Table;
	}(index_1.Chunked);

	exports.Table = Table;
	function tableFromIterable(input) {
	    var type = input.type;

	    if (type instanceof type_1.Struct) {
	        return Table.fromStruct(index_1.StructVector.from(input));
	    }
	    return null;
	}
	function tableFromAsyncIterable(input) {
	    var type = input.type;

	    if (type instanceof type_1.Struct) {
	        return index_1.StructVector.from(input).then(function (vector) {
	            return Table.fromStruct(vector);
	        });
	    }
	    return null;
	}

	//# sourceMappingURL=table.js.map

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	/** @ignore */
	var writeAllAsync = function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(writer, batches) {
	        var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _value, batch;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	            while (1) {
	                switch (_context.prev = _context.next) {
	                    case 0:
	                        _iteratorNormalCompletion5 = true;
	                        _didIteratorError5 = false;
	                        _iteratorError5 = undefined;
	                        _context.prev = 3;
	                        _iterator5 = _asyncIterator(batches);

	                    case 5:
	                        _context.next = 7;
	                        return _iterator5.next();

	                    case 7:
	                        _step5 = _context.sent;
	                        _iteratorNormalCompletion5 = _step5.done;
	                        _context.next = 11;
	                        return _step5.value;

	                    case 11:
	                        _value = _context.sent;

	                        if (_iteratorNormalCompletion5) {
	                            _context.next = 18;
	                            break;
	                        }

	                        batch = _value;

	                        writer.write(batch);

	                    case 15:
	                        _iteratorNormalCompletion5 = true;
	                        _context.next = 5;
	                        break;

	                    case 18:
	                        _context.next = 24;
	                        break;

	                    case 20:
	                        _context.prev = 20;
	                        _context.t0 = _context["catch"](3);
	                        _didIteratorError5 = true;
	                        _iteratorError5 = _context.t0;

	                    case 24:
	                        _context.prev = 24;
	                        _context.prev = 25;

	                        if (!(!_iteratorNormalCompletion5 && _iterator5.return)) {
	                            _context.next = 29;
	                            break;
	                        }

	                        _context.next = 29;
	                        return _iterator5.return();

	                    case 29:
	                        _context.prev = 29;

	                        if (!_didIteratorError5) {
	                            _context.next = 32;
	                            break;
	                        }

	                        throw _iteratorError5;

	                    case 32:
	                        return _context.finish(29);

	                    case 33:
	                        return _context.finish(24);

	                    case 34:
	                        return _context.abrupt("return", writer.finish());

	                    case 35:
	                    case "end":
	                        return _context.stop();
	                }
	            }
	        }, _callee, this, [[3, 20, 24, 34], [25,, 29, 33]]);
	    }));

	    return function writeAllAsync(_x8, _x9) {
	        return _ref.apply(this, arguments);
	    };
	}();
	/** @ignore */


	function _asyncIterator(iterable) { if (typeof Symbol === "function") { if (Symbol.asyncIterator) { var method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { return iterable[Symbol.iterator](); } } throw new TypeError("Object is not async iterable"); }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var table_1 = __webpack_require__(117);
	var message_1 = __webpack_require__(119);
	var column_1 = __webpack_require__(99);
	var type_1 = __webpack_require__(74);
	var schema_1 = __webpack_require__(97);
	var message_2 = __webpack_require__(120);
	var metadata = __webpack_require__(120);
	var file_1 = __webpack_require__(110);
	var enum_1 = __webpack_require__(69);
	var stream_1 = __webpack_require__(112);
	var vectorassembler_1 = __webpack_require__(123);
	var jsontypeassembler_1 = __webpack_require__(124);
	var jsonvectorassembler_1 = __webpack_require__(125);
	var buffer_1 = __webpack_require__(60);
	var recordbatch_1 = __webpack_require__(116);
	var interfaces_1 = __webpack_require__(65);
	var compat_1 = __webpack_require__(64);

	var RecordBatchWriter = function (_interfaces_1$Readabl) {
	    _inherits(RecordBatchWriter, _interfaces_1$Readabl);

	    function RecordBatchWriter(options) {
	        _classCallCheck(this, RecordBatchWriter);

	        var _this = _possibleConstructorReturn(this, (RecordBatchWriter.__proto__ || Object.getPrototypeOf(RecordBatchWriter)).call(this));

	        _this._position = 0;
	        _this._started = false;
	        // @ts-ignore
	        _this._sink = new stream_1.AsyncByteQueue();
	        _this._schema = null;
	        _this._dictionaryBlocks = [];
	        _this._recordBatchBlocks = [];
	        _this._dictionaryDeltaOffsets = new Map();
	        compat_1.isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });
	        _this._autoDestroy = typeof options.autoDestroy === 'boolean' ? options.autoDestroy : true;
	        _this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === 'boolean' ? options.writeLegacyIpcFormat : false;
	        return _this;
	    }
	    /** @nocollapse */
	    // @ts-ignore


	    _createClass(RecordBatchWriter, [{
	        key: "toString",
	        value: function toString() {
	            var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            return this._sink.toString(sync);
	        }
	    }, {
	        key: "toUint8Array",
	        value: function toUint8Array() {
	            var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            return this._sink.toUint8Array(sync);
	        }
	    }, {
	        key: "writeAll",
	        value: function writeAll(input) {
	            var _this2 = this;

	            if (compat_1.isPromise(input)) {
	                return input.then(function (x) {
	                    return _this2.writeAll(x);
	                });
	            } else if (compat_1.isAsyncIterable(input)) {
	                return writeAllAsync(this, input);
	            }
	            return _writeAll(this, input);
	        }
	    }, {
	        key: Symbol.asyncIterator,
	        value: function value() {
	            return this._sink[Symbol.asyncIterator]();
	        }
	    }, {
	        key: "toDOMStream",
	        value: function toDOMStream(options) {
	            return this._sink.toDOMStream(options);
	        }
	    }, {
	        key: "toNodeStream",
	        value: function toNodeStream(options) {
	            return this._sink.toNodeStream(options);
	        }
	    }, {
	        key: "close",
	        value: function close() {
	            return this.reset()._sink.close();
	        }
	    }, {
	        key: "abort",
	        value: function abort(reason) {
	            return this.reset()._sink.abort(reason);
	        }
	    }, {
	        key: "finish",
	        value: function finish() {
	            this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);
	            return this;
	        }
	    }, {
	        key: "reset",
	        value: function reset() {
	            var sink = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._sink;
	            var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	            if (sink === this._sink || sink instanceof stream_1.AsyncByteQueue) {
	                this._sink = sink;
	            } else {
	                this._sink = new stream_1.AsyncByteQueue();
	                if (sink && compat_1.isWritableDOMStream(sink)) {
	                    this.toDOMStream({ type: 'bytes' }).pipeTo(sink);
	                } else if (sink && compat_1.isWritableNodeStream(sink)) {
	                    this.toNodeStream({ objectMode: false }).pipe(sink);
	                }
	            }
	            if (this._started && this._schema) {
	                this._writeFooter(this._schema);
	            }
	            this._started = false;
	            this._dictionaryBlocks = [];
	            this._recordBatchBlocks = [];
	            this._dictionaryDeltaOffsets = new Map();
	            if (!schema || !schema.compareTo(this._schema)) {
	                if (schema === null) {
	                    this._position = 0;
	                    this._schema = null;
	                } else {
	                    this._started = true;
	                    this._schema = schema;
	                    this._writeSchema(schema);
	                }
	            }
	            return this;
	        }
	    }, {
	        key: "write",
	        value: function write(payload) {
	            var schema = null;
	            if (!this._sink) {
	                throw new Error("RecordBatchWriter is closed");
	            } else if (payload === null || payload === undefined) {
	                return this.finish() && undefined;
	            } else if (payload instanceof table_1.Table && !(schema = payload.schema)) {
	                return this.finish() && undefined;
	            } else if (payload instanceof recordbatch_1.RecordBatch && !(schema = payload.schema)) {
	                return this.finish() && undefined;
	            }
	            if (schema && !schema.compareTo(this._schema)) {
	                if (this._started && this._autoDestroy) {
	                    return this.close();
	                }
	                this.reset(this._sink, schema);
	            }
	            if (payload instanceof recordbatch_1.RecordBatch) {
	                if (!(payload instanceof recordbatch_1._InternalEmptyPlaceholderRecordBatch)) {
	                    this._writeRecordBatch(payload);
	                }
	            } else if (payload instanceof table_1.Table) {
	                this.writeAll(payload.chunks);
	            } else if (compat_1.isIterable(payload)) {
	                this.writeAll(payload);
	            }
	        }
	    }, {
	        key: "_writeMessage",
	        value: function _writeMessage(message) {
	            var alignment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

	            var a = alignment - 1;
	            var buffer = message_2.Message.encode(message);
	            var flatbufferSize = buffer.byteLength;
	            var prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;
	            var alignedSize = flatbufferSize + prefixSize + a & ~a;
	            var nPaddingBytes = alignedSize - flatbufferSize - prefixSize;
	            if (message.headerType === enum_1.MessageHeader.RecordBatch) {
	                this._recordBatchBlocks.push(new file_1.FileBlock(alignedSize, message.bodyLength, this._position));
	            } else if (message.headerType === enum_1.MessageHeader.DictionaryBatch) {
	                this._dictionaryBlocks.push(new file_1.FileBlock(alignedSize, message.bodyLength, this._position));
	            }
	            // If not in legacy pre-0.15.0 mode, write the stream continuation indicator
	            if (!this._writeLegacyIpcFormat) {
	                this._write(Int32Array.of(-1));
	            }
	            // Write the flatbuffer size prefix including padding
	            this._write(Int32Array.of(alignedSize - prefixSize));
	            // Write the flatbuffer
	            if (flatbufferSize > 0) {
	                this._write(buffer);
	            }
	            // Write any padding
	            return this._writePadding(nPaddingBytes);
	        }
	    }, {
	        key: "_write",
	        value: function _write(chunk) {
	            if (this._started) {
	                var buffer = buffer_1.toUint8Array(chunk);
	                if (buffer && buffer.byteLength > 0) {
	                    this._sink.write(buffer);
	                    this._position += buffer.byteLength;
	                }
	            }
	            return this;
	        }
	    }, {
	        key: "_writeSchema",
	        value: function _writeSchema(schema) {
	            return this._writeMessage(message_2.Message.from(schema));
	        }
	        // @ts-ignore

	    }, {
	        key: "_writeFooter",
	        value: function _writeFooter(schema) {
	            // eos bytes
	            return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));
	        }
	    }, {
	        key: "_writeMagic",
	        value: function _writeMagic() {
	            return this._write(message_1.MAGIC);
	        }
	    }, {
	        key: "_writePadding",
	        value: function _writePadding(nBytes) {
	            return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;
	        }
	    }, {
	        key: "_writeRecordBatch",
	        value: function _writeRecordBatch(batch) {
	            var _vectorassembler_1$Ve = vectorassembler_1.VectorAssembler.assemble(batch),
	                byteLength = _vectorassembler_1$Ve.byteLength,
	                nodes = _vectorassembler_1$Ve.nodes,
	                bufferRegions = _vectorassembler_1$Ve.bufferRegions,
	                buffers = _vectorassembler_1$Ve.buffers;

	            var recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);
	            var message = message_2.Message.from(recordBatch, byteLength);
	            return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);
	        }
	    }, {
	        key: "_writeDictionaryBatch",
	        value: function _writeDictionaryBatch(dictionary, id) {
	            var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	            this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));

	            var _vectorassembler_1$Ve2 = vectorassembler_1.VectorAssembler.assemble(dictionary),
	                byteLength = _vectorassembler_1$Ve2.byteLength,
	                nodes = _vectorassembler_1$Ve2.nodes,
	                bufferRegions = _vectorassembler_1$Ve2.bufferRegions,
	                buffers = _vectorassembler_1$Ve2.buffers;

	            var recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);
	            var dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);
	            var message = message_2.Message.from(dictionaryBatch, byteLength);
	            return this._writeMessage(message)._writeBodyBuffers(buffers);
	        }
	    }, {
	        key: "_writeBodyBuffers",
	        value: function _writeBodyBuffers(buffers) {
	            var buffer = void 0;
	            var size = void 0,
	                padding = void 0;
	            for (var i = -1, n = buffers.length; ++i < n;) {
	                if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {
	                    this._write(buffer);
	                    if ((padding = (size + 7 & ~7) - size) > 0) {
	                        this._writePadding(padding);
	                    }
	                }
	            }
	            return this;
	        }
	    }, {
	        key: "_writeDictionaries",
	        value: function _writeDictionaries(batch) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = batch.dictionaries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var _step$value = _slicedToArray(_step.value, 2),
	                        id = _step$value[0],
	                        dictionary = _step$value[1];

	                    var offset = this._dictionaryDeltaOffsets.get(id) || 0;
	                    if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {
	                        var chunks = 'chunks' in dictionary ? dictionary.chunks : [dictionary];
	                        var _iteratorNormalCompletion2 = true;
	                        var _didIteratorError2 = false;
	                        var _iteratorError2 = undefined;

	                        try {
	                            for (var _iterator2 = chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                                var chunk = _step2.value;

	                                this._writeDictionaryBatch(chunk, id, offset > 0);
	                                offset += chunk.length;
	                            }
	                        } catch (err) {
	                            _didIteratorError2 = true;
	                            _iteratorError2 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                    _iterator2.return();
	                                }
	                            } finally {
	                                if (_didIteratorError2) {
	                                    throw _iteratorError2;
	                                }
	                            }
	                        }
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return this;
	        }
	    }, {
	        key: "closed",
	        get: function get() {
	            return this._sink.closed;
	        }
	    }], [{
	        key: "throughNode",
	        value: function throughNode(options) {
	            throw new Error("\"throughNode\" not available in this environment");
	        }
	        /** @nocollapse */

	    }, {
	        key: "throughDOM",
	        value: function throughDOM(
	        // @ts-ignore
	        writableStrategy,
	        // @ts-ignore
	        readableStrategy) {
	            throw new Error("\"throughDOM\" not available in this environment");
	        }
	    }]);

	    return RecordBatchWriter;
	}(interfaces_1.ReadableInterop);

	exports.RecordBatchWriter = RecordBatchWriter;
	/** @ignore */

	var RecordBatchStreamWriter = function (_RecordBatchWriter) {
	    _inherits(RecordBatchStreamWriter, _RecordBatchWriter);

	    function RecordBatchStreamWriter() {
	        _classCallCheck(this, RecordBatchStreamWriter);

	        return _possibleConstructorReturn(this, (RecordBatchStreamWriter.__proto__ || Object.getPrototypeOf(RecordBatchStreamWriter)).apply(this, arguments));
	    }

	    _createClass(RecordBatchStreamWriter, null, [{
	        key: "writeAll",

	        /** @nocollapse */
	        value: function writeAll(input, options) {
	            var writer = new RecordBatchStreamWriter(options);
	            if (compat_1.isPromise(input)) {
	                return input.then(function (x) {
	                    return writer.writeAll(x);
	                });
	            } else if (compat_1.isAsyncIterable(input)) {
	                return writeAllAsync(writer, input);
	            }
	            return _writeAll(writer, input);
	        }
	    }]);

	    return RecordBatchStreamWriter;
	}(RecordBatchWriter);

	exports.RecordBatchStreamWriter = RecordBatchStreamWriter;
	/** @ignore */

	var RecordBatchFileWriter = function (_RecordBatchWriter2) {
	    _inherits(RecordBatchFileWriter, _RecordBatchWriter2);

	    function RecordBatchFileWriter() {
	        _classCallCheck(this, RecordBatchFileWriter);

	        var _this4 = _possibleConstructorReturn(this, (RecordBatchFileWriter.__proto__ || Object.getPrototypeOf(RecordBatchFileWriter)).call(this));

	        _this4._autoDestroy = true;
	        return _this4;
	    }
	    /** @nocollapse */


	    _createClass(RecordBatchFileWriter, [{
	        key: "_writeSchema",

	        // @ts-ignore
	        value: function _writeSchema(schema) {
	            return this._writeMagic()._writePadding(2);
	        }
	    }, {
	        key: "_writeFooter",
	        value: function _writeFooter(schema) {
	            var buffer = file_1.Footer.encode(new file_1.Footer(schema, enum_1.MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));
	            return _get(RecordBatchFileWriter.prototype.__proto__ || Object.getPrototypeOf(RecordBatchFileWriter.prototype), "_writeFooter", this).call(this, schema) // EOS bytes for sequential readers
	            ._write(buffer) // Write the flatbuffer
	            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix
	            ._writeMagic(); // then the magic suffix
	        }
	    }], [{
	        key: "writeAll",
	        value: function writeAll(input) {
	            var writer = new RecordBatchFileWriter();
	            if (compat_1.isPromise(input)) {
	                return input.then(function (x) {
	                    return writer.writeAll(x);
	                });
	            } else if (compat_1.isAsyncIterable(input)) {
	                return writeAllAsync(writer, input);
	            }
	            return _writeAll(writer, input);
	        }
	    }]);

	    return RecordBatchFileWriter;
	}(RecordBatchWriter);

	exports.RecordBatchFileWriter = RecordBatchFileWriter;
	/** @ignore */

	var RecordBatchJSONWriter = function (_RecordBatchWriter3) {
	    _inherits(RecordBatchJSONWriter, _RecordBatchWriter3);

	    function RecordBatchJSONWriter() {
	        _classCallCheck(this, RecordBatchJSONWriter);

	        var _this5 = _possibleConstructorReturn(this, (RecordBatchJSONWriter.__proto__ || Object.getPrototypeOf(RecordBatchJSONWriter)).call(this));

	        _this5._autoDestroy = true;
	        _this5._recordBatches = [];
	        _this5._dictionaries = [];
	        return _this5;
	    }
	    /** @nocollapse */


	    _createClass(RecordBatchJSONWriter, [{
	        key: "_writeMessage",
	        value: function _writeMessage() {
	            return this;
	        }
	        // @ts-ignore

	    }, {
	        key: "_writeFooter",
	        value: function _writeFooter(schema) {
	            return this;
	        }
	    }, {
	        key: "_writeSchema",
	        value: function _writeSchema(schema) {
	            return this._write("{\n  \"schema\": " + JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2));
	        }
	    }, {
	        key: "_writeDictionaries",
	        value: function _writeDictionaries(batch) {
	            if (batch.dictionaries.size > 0) {
	                this._dictionaries.push(batch);
	            }
	            return this;
	        }
	    }, {
	        key: "_writeDictionaryBatch",
	        value: function _writeDictionaryBatch(dictionary, id) {
	            var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	            this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));
	            this._write(this._dictionaryBlocks.length === 0 ? "    " : ",\n    ");
	            this._write("" + dictionaryBatchToJSON(dictionary, id, isDelta));
	            this._dictionaryBlocks.push(new file_1.FileBlock(0, 0, 0));
	            return this;
	        }
	    }, {
	        key: "_writeRecordBatch",
	        value: function _writeRecordBatch(batch) {
	            this._writeDictionaries(batch);
	            this._recordBatches.push(batch);
	            return this;
	        }
	    }, {
	        key: "close",
	        value: function close() {
	            if (this._dictionaries.length > 0) {
	                this._write(",\n  \"dictionaries\": [\n");
	                var _iteratorNormalCompletion3 = true;
	                var _didIteratorError3 = false;
	                var _iteratorError3 = undefined;

	                try {
	                    for (var _iterator3 = this._dictionaries[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                        var batch = _step3.value;

	                        _get(RecordBatchJSONWriter.prototype.__proto__ || Object.getPrototypeOf(RecordBatchJSONWriter.prototype), "_writeDictionaries", this).call(this, batch);
	                    }
	                } catch (err) {
	                    _didIteratorError3 = true;
	                    _iteratorError3 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                            _iterator3.return();
	                        }
	                    } finally {
	                        if (_didIteratorError3) {
	                            throw _iteratorError3;
	                        }
	                    }
	                }

	                this._write("\n  ]");
	            }
	            if (this._recordBatches.length > 0) {
	                for (var i = -1, n = this._recordBatches.length; ++i < n;) {
	                    this._write(i === 0 ? ",\n  \"batches\": [\n    " : ",\n    ");
	                    this._write("" + recordBatchToJSON(this._recordBatches[i]));
	                    this._recordBatchBlocks.push(new file_1.FileBlock(0, 0, 0));
	                }
	                this._write("\n  ]");
	            }
	            if (this._schema) {
	                this._write("\n}");
	            }
	            this._dictionaries = [];
	            this._recordBatches = [];
	            return _get(RecordBatchJSONWriter.prototype.__proto__ || Object.getPrototypeOf(RecordBatchJSONWriter.prototype), "close", this).call(this);
	        }
	    }], [{
	        key: "writeAll",
	        value: function writeAll(input) {
	            return new RecordBatchJSONWriter().writeAll(input);
	        }
	    }]);

	    return RecordBatchJSONWriter;
	}(RecordBatchWriter);

	exports.RecordBatchJSONWriter = RecordBatchJSONWriter;
	/** @ignore */
	function _writeAll(writer, input) {
	    var chunks = input;
	    if (input instanceof table_1.Table) {
	        chunks = input.chunks;
	        writer.reset(undefined, input.schema);
	    }
	    var _iteratorNormalCompletion4 = true;
	    var _didIteratorError4 = false;
	    var _iteratorError4 = undefined;

	    try {
	        for (var _iterator4 = chunks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	            var batch = _step4.value;

	            writer.write(batch);
	        }
	    } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                _iterator4.return();
	            }
	        } finally {
	            if (_didIteratorError4) {
	                throw _iteratorError4;
	            }
	        }
	    }

	    return writer.finish();
	}function fieldToJSON(_ref2) {
	    var name = _ref2.name,
	        type = _ref2.type,
	        nullable = _ref2.nullable;

	    var assembler = new jsontypeassembler_1.JSONTypeAssembler();
	    return {
	        'name': name, 'nullable': nullable,
	        'type': assembler.visit(type),
	        'children': (type.children || []).map(fieldToJSON),
	        'dictionary': !type_1.DataType.isDictionary(type) ? undefined : {
	            'id': type.id,
	            'isOrdered': type.isOrdered,
	            'indexType': assembler.visit(type.indices)
	        }
	    };
	}
	/** @ignore */
	function dictionaryBatchToJSON(dictionary, id) {
	    var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    var field = new schema_1.Field("" + id, dictionary.type, dictionary.nullCount > 0);
	    var columns = jsonvectorassembler_1.JSONVectorAssembler.assemble(new column_1.Column(field, [dictionary]));
	    return JSON.stringify({
	        'id': id,
	        'isDelta': isDelta,
	        'data': {
	            'count': dictionary.length,
	            'columns': columns
	        }
	    }, null, 2);
	}
	/** @ignore */
	function recordBatchToJSON(records) {
	    return JSON.stringify({
	        'count': records.length,
	        'columns': jsonvectorassembler_1.JSONVectorAssembler.assemble(records)
	    }, null, 2);
	}

	//# sourceMappingURL=writer.js.map

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var enum_1 = __webpack_require__(69);
	var flatbuffers_1 = __webpack_require__(61);
	var ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;
	var message_1 = __webpack_require__(120);
	var compat_1 = __webpack_require__(64);
	var file_1 = __webpack_require__(113);
	var buffer_1 = __webpack_require__(60);
	var stream_1 = __webpack_require__(112);
	var interfaces_1 = __webpack_require__(65);
	/** @ignore */var invalidMessageType = function invalidMessageType(type) {
	    return "Expected " + enum_1.MessageHeader[type] + " Message in stream, but was null or length 0.";
	};
	/** @ignore */var nullMessage = function nullMessage(type) {
	    return "Header pointer of flatbuffer-encoded " + enum_1.MessageHeader[type] + " Message is null or length 0.";
	};
	/** @ignore */var invalidMessageMetadata = function invalidMessageMetadata(expected, actual) {
	    return "Expected to read " + expected + " metadata bytes, but only read " + actual + ".";
	};
	/** @ignore */var invalidMessageBodyLength = function invalidMessageBodyLength(expected, actual) {
	    return "Expected to read " + expected + " bytes for message body, but only read " + actual + ".";
	};
	/** @ignore */

	var MessageReader = function () {
	    function MessageReader(source) {
	        _classCallCheck(this, MessageReader);

	        this.source = source instanceof stream_1.ByteStream ? source : new stream_1.ByteStream(source);
	    }

	    _createClass(MessageReader, [{
	        key: Symbol.iterator,
	        value: function value() {
	            return this;
	        }
	    }, {
	        key: "next",
	        value: function next() {
	            var r = void 0;
	            if ((r = this.readMetadataLength()).done) {
	                return interfaces_1.ITERATOR_DONE;
	            }
	            // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read
	            // the next 4 for the 32-bit metadata length. Otherwise, assume this is a
	            // pre-v0.15 message, where the first 4 bytes are the metadata length.
	            if (r.value === -1 && (r = this.readMetadataLength()).done) {
	                return interfaces_1.ITERATOR_DONE;
	            }
	            if ((r = this.readMetadata(r.value)).done) {
	                return interfaces_1.ITERATOR_DONE;
	            }
	            return r;
	        }
	    }, {
	        key: "throw",
	        value: function _throw(value) {
	            return this.source.throw(value);
	        }
	    }, {
	        key: "return",
	        value: function _return(value) {
	            return this.source.return(value);
	        }
	    }, {
	        key: "readMessage",
	        value: function readMessage(type) {
	            var r = void 0;
	            if ((r = this.next()).done) {
	                return null;
	            }
	            if (type != null && r.value.headerType !== type) {
	                throw new Error(invalidMessageType(type));
	            }
	            return r.value;
	        }
	    }, {
	        key: "readMessageBody",
	        value: function readMessageBody(bodyLength) {
	            if (bodyLength <= 0) {
	                return new Uint8Array(0);
	            }
	            var buf = buffer_1.toUint8Array(this.source.read(bodyLength));
	            if (buf.byteLength < bodyLength) {
	                throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
	            }
	            // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817
	            // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126
	            return (/* 1. */buf.byteOffset % 8 === 0 &&
	                /* 2. */buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()
	            );
	        }
	    }, {
	        key: "readSchema",
	        value: function readSchema() {
	            var throwIfNull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            var type = enum_1.MessageHeader.Schema;
	            var message = this.readMessage(type);
	            var schema = message && message.header();
	            if (throwIfNull && !schema) {
	                throw new Error(nullMessage(type));
	            }
	            return schema;
	        }
	    }, {
	        key: "readMetadataLength",
	        value: function readMetadataLength() {
	            var buf = this.source.read(exports.PADDING);
	            var bb = buf && new ByteBuffer(buf);
	            var len = bb && bb.readInt32(0) || 0;
	            return { done: len === 0, value: len };
	        }
	    }, {
	        key: "readMetadata",
	        value: function readMetadata(metadataLength) {
	            var buf = this.source.read(metadataLength);
	            if (!buf) {
	                return interfaces_1.ITERATOR_DONE;
	            }
	            if (buf.byteLength < metadataLength) {
	                throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
	            }
	            return { done: false, value: message_1.Message.decode(buf) };
	        }
	    }]);

	    return MessageReader;
	}();

	exports.MessageReader = MessageReader;
	/** @ignore */

	var AsyncMessageReader = function () {
	    function AsyncMessageReader(source, byteLength) {
	        _classCallCheck(this, AsyncMessageReader);

	        this.source = source instanceof stream_1.AsyncByteStream ? source : compat_1.isFileHandle(source) ? new file_1.AsyncRandomAccessFile(source, byteLength) : new stream_1.AsyncByteStream(source);
	    }

	    _createClass(AsyncMessageReader, [{
	        key: Symbol.asyncIterator,
	        value: function value() {
	            return this;
	        }
	    }, {
	        key: "next",
	        value: function () {
	            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                var r;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                r = void 0;
	                                _context.next = 3;
	                                return this.readMetadataLength();

	                            case 3:
	                                if (!(r = _context.sent).done) {
	                                    _context.next = 5;
	                                    break;
	                                }

	                                return _context.abrupt("return", interfaces_1.ITERATOR_DONE);

	                            case 5:
	                                _context.t0 = r.value === -1;

	                                if (!_context.t0) {
	                                    _context.next = 10;
	                                    break;
	                                }

	                                _context.next = 9;
	                                return this.readMetadataLength();

	                            case 9:
	                                _context.t0 = (r = _context.sent).done;

	                            case 10:
	                                if (!_context.t0) {
	                                    _context.next = 12;
	                                    break;
	                                }

	                                return _context.abrupt("return", interfaces_1.ITERATOR_DONE);

	                            case 12:
	                                _context.next = 14;
	                                return this.readMetadata(r.value);

	                            case 14:
	                                if (!(r = _context.sent).done) {
	                                    _context.next = 16;
	                                    break;
	                                }

	                                return _context.abrupt("return", interfaces_1.ITERATOR_DONE);

	                            case 16:
	                                return _context.abrupt("return", r);

	                            case 17:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));

	            function next() {
	                return _ref.apply(this, arguments);
	            }

	            return next;
	        }()
	    }, {
	        key: "throw",
	        value: function () {
	            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(value) {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return this.source.throw(value);

	                            case 2:
	                                return _context2.abrupt("return", _context2.sent);

	                            case 3:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));

	            function _throw(_x2) {
	                return _ref2.apply(this, arguments);
	            }

	            return _throw;
	        }()
	    }, {
	        key: "return",
	        value: function () {
	            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(value) {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.next = 2;
	                                return this.source.return(value);

	                            case 2:
	                                return _context3.abrupt("return", _context3.sent);

	                            case 3:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));

	            function _return(_x3) {
	                return _ref3.apply(this, arguments);
	            }

	            return _return;
	        }()
	    }, {
	        key: "readMessage",
	        value: function () {
	            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(type) {
	                var r;
	                return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                r = void 0;
	                                _context4.next = 3;
	                                return this.next();

	                            case 3:
	                                if (!(r = _context4.sent).done) {
	                                    _context4.next = 5;
	                                    break;
	                                }

	                                return _context4.abrupt("return", null);

	                            case 5:
	                                if (!(type != null && r.value.headerType !== type)) {
	                                    _context4.next = 7;
	                                    break;
	                                }

	                                throw new Error(invalidMessageType(type));

	                            case 7:
	                                return _context4.abrupt("return", r.value);

	                            case 8:
	                            case "end":
	                                return _context4.stop();
	                        }
	                    }
	                }, _callee4, this);
	            }));

	            function readMessage(_x4) {
	                return _ref4.apply(this, arguments);
	            }

	            return readMessage;
	        }()
	    }, {
	        key: "readMessageBody",
	        value: function () {
	            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(bodyLength) {
	                var buf;
	                return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                if (!(bodyLength <= 0)) {
	                                    _context5.next = 2;
	                                    break;
	                                }

	                                return _context5.abrupt("return", new Uint8Array(0));

	                            case 2:
	                                _context5.t0 = buffer_1;
	                                _context5.next = 5;
	                                return this.source.read(bodyLength);

	                            case 5:
	                                _context5.t1 = _context5.sent;
	                                buf = _context5.t0.toUint8Array.call(_context5.t0, _context5.t1);

	                                if (!(buf.byteLength < bodyLength)) {
	                                    _context5.next = 9;
	                                    break;
	                                }

	                                throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));

	                            case 9:
	                                return _context5.abrupt("return", /* 1. */buf.byteOffset % 8 === 0 &&
	                                /* 2. */buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice());

	                            case 10:
	                            case "end":
	                                return _context5.stop();
	                        }
	                    }
	                }, _callee5, this);
	            }));

	            function readMessageBody(_x5) {
	                return _ref5.apply(this, arguments);
	            }

	            return readMessageBody;
	        }()
	    }, {
	        key: "readSchema",
	        value: function () {
	            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	                var throwIfNull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	                var type, message, schema;
	                return regeneratorRuntime.wrap(function _callee6$(_context6) {
	                    while (1) {
	                        switch (_context6.prev = _context6.next) {
	                            case 0:
	                                type = enum_1.MessageHeader.Schema;
	                                _context6.next = 3;
	                                return this.readMessage(type);

	                            case 3:
	                                message = _context6.sent;
	                                schema = message && message.header();

	                                if (!(throwIfNull && !schema)) {
	                                    _context6.next = 7;
	                                    break;
	                                }

	                                throw new Error(nullMessage(type));

	                            case 7:
	                                return _context6.abrupt("return", schema);

	                            case 8:
	                            case "end":
	                                return _context6.stop();
	                        }
	                    }
	                }, _callee6, this);
	            }));

	            function readSchema() {
	                return _ref6.apply(this, arguments);
	            }

	            return readSchema;
	        }()
	    }, {
	        key: "readMetadataLength",
	        value: function () {
	            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
	                var buf, bb, len;
	                return regeneratorRuntime.wrap(function _callee7$(_context7) {
	                    while (1) {
	                        switch (_context7.prev = _context7.next) {
	                            case 0:
	                                _context7.next = 2;
	                                return this.source.read(exports.PADDING);

	                            case 2:
	                                buf = _context7.sent;
	                                bb = buf && new ByteBuffer(buf);
	                                len = bb && bb.readInt32(0) || 0;
	                                return _context7.abrupt("return", { done: len === 0, value: len });

	                            case 6:
	                            case "end":
	                                return _context7.stop();
	                        }
	                    }
	                }, _callee7, this);
	            }));

	            function readMetadataLength() {
	                return _ref7.apply(this, arguments);
	            }

	            return readMetadataLength;
	        }()
	    }, {
	        key: "readMetadata",
	        value: function () {
	            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(metadataLength) {
	                var buf;
	                return regeneratorRuntime.wrap(function _callee8$(_context8) {
	                    while (1) {
	                        switch (_context8.prev = _context8.next) {
	                            case 0:
	                                _context8.next = 2;
	                                return this.source.read(metadataLength);

	                            case 2:
	                                buf = _context8.sent;

	                                if (buf) {
	                                    _context8.next = 5;
	                                    break;
	                                }

	                                return _context8.abrupt("return", interfaces_1.ITERATOR_DONE);

	                            case 5:
	                                if (!(buf.byteLength < metadataLength)) {
	                                    _context8.next = 7;
	                                    break;
	                                }

	                                throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));

	                            case 7:
	                                return _context8.abrupt("return", { done: false, value: message_1.Message.decode(buf) });

	                            case 8:
	                            case "end":
	                                return _context8.stop();
	                        }
	                    }
	                }, _callee8, this);
	            }));

	            function readMetadata(_x7) {
	                return _ref8.apply(this, arguments);
	            }

	            return readMetadata;
	        }()
	    }]);

	    return AsyncMessageReader;
	}();

	exports.AsyncMessageReader = AsyncMessageReader;
	/** @ignore */

	var JSONMessageReader = function (_MessageReader) {
	    _inherits(JSONMessageReader, _MessageReader);

	    function JSONMessageReader(source) {
	        _classCallCheck(this, JSONMessageReader);

	        var _this = _possibleConstructorReturn(this, (JSONMessageReader.__proto__ || Object.getPrototypeOf(JSONMessageReader)).call(this, new Uint8Array(0)));

	        _this._schema = false;
	        _this._body = [];
	        _this._batchIndex = 0;
	        _this._dictionaryIndex = 0;
	        _this._json = source instanceof interfaces_1.ArrowJSON ? source : new interfaces_1.ArrowJSON(source);
	        return _this;
	    }

	    _createClass(JSONMessageReader, [{
	        key: "next",
	        value: function next() {
	            var _json = this._json;

	            if (!this._schema) {
	                this._schema = true;
	                var message = message_1.Message.fromJSON(_json.schema, enum_1.MessageHeader.Schema);
	                return { done: false, value: message };
	            }
	            if (this._dictionaryIndex < _json.dictionaries.length) {
	                var batch = _json.dictionaries[this._dictionaryIndex++];
	                this._body = batch['data']['columns'];
	                var _message = message_1.Message.fromJSON(batch, enum_1.MessageHeader.DictionaryBatch);
	                return { done: false, value: _message };
	            }
	            if (this._batchIndex < _json.batches.length) {
	                var _batch = _json.batches[this._batchIndex++];
	                this._body = _batch['columns'];
	                var _message2 = message_1.Message.fromJSON(_batch, enum_1.MessageHeader.RecordBatch);
	                return { done: false, value: _message2 };
	            }
	            this._body = [];
	            return interfaces_1.ITERATOR_DONE;
	        }
	    }, {
	        key: "readMessageBody",
	        value: function readMessageBody(_bodyLength) {
	            return flattenDataSources(this._body);
	            function flattenDataSources(xs) {
	                return (xs || []).reduce(function (buffers, column) {
	                    return [].concat(_toConsumableArray(buffers), _toConsumableArray(column['VALIDITY'] && [column['VALIDITY']] || []), _toConsumableArray(column['TYPE'] && [column['TYPE']] || []), _toConsumableArray(column['OFFSET'] && [column['OFFSET']] || []), _toConsumableArray(column['DATA'] && [column['DATA']] || []), _toConsumableArray(flattenDataSources(column['children'])));
	                }, []);
	            }
	        }
	    }, {
	        key: "readMessage",
	        value: function readMessage(type) {
	            var r = void 0;
	            if ((r = this.next()).done) {
	                return null;
	            }
	            if (type != null && r.value.headerType !== type) {
	                throw new Error(invalidMessageType(type));
	            }
	            return r.value;
	        }
	    }, {
	        key: "readSchema",
	        value: function readSchema() {
	            var type = enum_1.MessageHeader.Schema;
	            var message = this.readMessage(type);
	            var schema = message && message.header();
	            if (!message || !schema) {
	                throw new Error(nullMessage(type));
	            }
	            return schema;
	        }
	    }]);

	    return JSONMessageReader;
	}(MessageReader);

	exports.JSONMessageReader = JSONMessageReader;
	/** @ignore */
	exports.PADDING = 4;
	/** @ignore */
	exports.MAGIC_STR = 'ARROW1';
	/** @ignore */
	exports.MAGIC = new Uint8Array(exports.MAGIC_STR.length);
	for (var i = 0; i < exports.MAGIC_STR.length; i += 1 | 0) {
	    exports.MAGIC[i] = exports.MAGIC_STR.charCodeAt(i);
	}
	/** @ignore */
	function checkForMagicArrowString(buffer) {
	    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	    for (var _i = -1, n = exports.MAGIC.length; ++_i < n;) {
	        if (exports.MAGIC[_i] !== buffer[index + _i]) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.checkForMagicArrowString = checkForMagicArrowString;
	/** @ignore */
	exports.magicLength = exports.MAGIC.length;
	/** @ignore */
	exports.magicAndPadding = exports.magicLength + exports.PADDING;
	/** @ignore */
	exports.magicX2AndPadding = exports.magicLength * 2 + exports.PADDING;

	//# sourceMappingURL=message.js.map

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var flatbuffers_1 = __webpack_require__(61);
	var Schema_ = __webpack_require__(70);
	var Message_ = __webpack_require__(71);
	var schema_1 = __webpack_require__(97);
	var buffer_1 = __webpack_require__(60);
	var enum_1 = __webpack_require__(69);
	var typeassembler_1 = __webpack_require__(121);
	var json_1 = __webpack_require__(122);
	var Long = flatbuffers_1.flatbuffers.Long;
	var Builder = flatbuffers_1.flatbuffers.Builder;
	var ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;
	var Type = Schema_.org.apache.arrow.flatbuf.Type;
	var _Field = Schema_.org.apache.arrow.flatbuf.Field;
	var _Schema = Schema_.org.apache.arrow.flatbuf.Schema;
	var _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;
	var _Message = Message_.org.apache.arrow.flatbuf.Message;
	var _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;
	var _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;
	var _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;
	var _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;
	var _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;
	var type_1 = __webpack_require__(74);
	/**
	 * @ignore
	 * @private
	 **/

	var Message = function () {
	    function Message(bodyLength, version, headerType, header) {
	        _classCallCheck(this, Message);

	        this._version = version;
	        this._headerType = headerType;
	        this.body = new Uint8Array(0);
	        header && (this._createHeader = function () {
	            return header;
	        });
	        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
	    }
	    /** @nocollapse */


	    _createClass(Message, [{
	        key: "header",
	        value: function header() {
	            return this._createHeader();
	        }
	    }, {
	        key: "isSchema",
	        value: function isSchema() {
	            return this.headerType === enum_1.MessageHeader.Schema;
	        }
	    }, {
	        key: "isRecordBatch",
	        value: function isRecordBatch() {
	            return this.headerType === enum_1.MessageHeader.RecordBatch;
	        }
	    }, {
	        key: "isDictionaryBatch",
	        value: function isDictionaryBatch() {
	            return this.headerType === enum_1.MessageHeader.DictionaryBatch;
	        }
	    }, {
	        key: "type",
	        get: function get() {
	            return this.headerType;
	        }
	    }, {
	        key: "version",
	        get: function get() {
	            return this._version;
	        }
	    }, {
	        key: "headerType",
	        get: function get() {
	            return this._headerType;
	        }
	    }, {
	        key: "bodyLength",
	        get: function get() {
	            return this._bodyLength;
	        }
	    }], [{
	        key: "fromJSON",
	        value: function fromJSON(msg, headerType) {
	            var message = new Message(0, enum_1.MetadataVersion.V4, headerType);
	            message._createHeader = messageHeaderFromJSON(msg, headerType);
	            return message;
	        }
	        /** @nocollapse */

	    }, {
	        key: "decode",
	        value: function decode(buf) {
	            buf = new ByteBuffer(buffer_1.toUint8Array(buf));
	            var _message = _Message.getRootAsMessage(buf);
	            var bodyLength = _message.bodyLength();
	            var version = _message.version();
	            var headerType = _message.headerType();
	            var message = new Message(bodyLength, version, headerType);
	            message._createHeader = decodeMessageHeader(_message, headerType);
	            return message;
	        }
	        /** @nocollapse */

	    }, {
	        key: "encode",
	        value: function encode(message) {
	            var b = new Builder(),
	                headerOffset = -1;
	            if (message.isSchema()) {
	                headerOffset = schema_1.Schema.encode(b, message.header());
	            } else if (message.isRecordBatch()) {
	                headerOffset = RecordBatch.encode(b, message.header());
	            } else if (message.isDictionaryBatch()) {
	                headerOffset = DictionaryBatch.encode(b, message.header());
	            }
	            _Message.startMessage(b);
	            _Message.addVersion(b, enum_1.MetadataVersion.V4);
	            _Message.addHeader(b, headerOffset);
	            _Message.addHeaderType(b, message.headerType);
	            _Message.addBodyLength(b, new Long(message.bodyLength, 0));
	            _Message.finishMessageBuffer(b, _Message.endMessage(b));
	            return b.asUint8Array();
	        }
	        /** @nocollapse */

	    }, {
	        key: "from",
	        value: function from(header) {
	            var bodyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	            if (header instanceof schema_1.Schema) {
	                return new Message(0, enum_1.MetadataVersion.V4, enum_1.MessageHeader.Schema, header);
	            }
	            if (header instanceof RecordBatch) {
	                return new Message(bodyLength, enum_1.MetadataVersion.V4, enum_1.MessageHeader.RecordBatch, header);
	            }
	            if (header instanceof DictionaryBatch) {
	                return new Message(bodyLength, enum_1.MetadataVersion.V4, enum_1.MessageHeader.DictionaryBatch, header);
	            }
	            throw new Error("Unrecognized Message header: " + header);
	        }
	    }]);

	    return Message;
	}();

	exports.Message = Message;
	/**
	 * @ignore
	 * @private
	 **/

	var RecordBatch = function () {
	    _createClass(RecordBatch, [{
	        key: "nodes",
	        get: function get() {
	            return this._nodes;
	        }
	    }, {
	        key: "length",
	        get: function get() {
	            return this._length;
	        }
	    }, {
	        key: "buffers",
	        get: function get() {
	            return this._buffers;
	        }
	    }]);

	    function RecordBatch(length, nodes, buffers) {
	        _classCallCheck(this, RecordBatch);

	        this._nodes = nodes;
	        this._buffers = buffers;
	        this._length = typeof length === 'number' ? length : length.low;
	    }

	    return RecordBatch;
	}();

	exports.RecordBatch = RecordBatch;
	/**
	 * @ignore
	 * @private
	 **/

	var DictionaryBatch = function () {
	    _createClass(DictionaryBatch, [{
	        key: "id",
	        get: function get() {
	            return this._id;
	        }
	    }, {
	        key: "data",
	        get: function get() {
	            return this._data;
	        }
	    }, {
	        key: "isDelta",
	        get: function get() {
	            return this._isDelta;
	        }
	    }, {
	        key: "length",
	        get: function get() {
	            return this.data.length;
	        }
	    }, {
	        key: "nodes",
	        get: function get() {
	            return this.data.nodes;
	        }
	    }, {
	        key: "buffers",
	        get: function get() {
	            return this.data.buffers;
	        }
	    }]);

	    function DictionaryBatch(data, id) {
	        var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	        _classCallCheck(this, DictionaryBatch);

	        this._data = data;
	        this._isDelta = isDelta;
	        this._id = typeof id === 'number' ? id : id.low;
	    }

	    return DictionaryBatch;
	}();

	exports.DictionaryBatch = DictionaryBatch;
	/**
	 * @ignore
	 * @private
	 **/

	var BufferRegion = function BufferRegion(offset, length) {
	    _classCallCheck(this, BufferRegion);

	    this.offset = typeof offset === 'number' ? offset : offset.low;
	    this.length = typeof length === 'number' ? length : length.low;
	};

	exports.BufferRegion = BufferRegion;
	/**
	 * @ignore
	 * @private
	 **/

	var FieldNode = function FieldNode(length, nullCount) {
	    _classCallCheck(this, FieldNode);

	    this.length = typeof length === 'number' ? length : length.low;
	    this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;
	};

	exports.FieldNode = FieldNode;
	/** @ignore */
	function messageHeaderFromJSON(message, type) {
	    return function () {
	        switch (type) {
	            case enum_1.MessageHeader.Schema:
	                return schema_1.Schema.fromJSON(message);
	            case enum_1.MessageHeader.RecordBatch:
	                return RecordBatch.fromJSON(message);
	            case enum_1.MessageHeader.DictionaryBatch:
	                return DictionaryBatch.fromJSON(message);
	        }
	        throw new Error("Unrecognized Message type: { name: " + enum_1.MessageHeader[type] + ", type: " + type + " }");
	    };
	}
	/** @ignore */
	function decodeMessageHeader(message, type) {
	    return function () {
	        switch (type) {
	            case enum_1.MessageHeader.Schema:
	                return schema_1.Schema.decode(message.header(new _Schema()));
	            case enum_1.MessageHeader.RecordBatch:
	                return RecordBatch.decode(message.header(new _RecordBatch()), message.version());
	            case enum_1.MessageHeader.DictionaryBatch:
	                return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());
	        }
	        throw new Error("Unrecognized Message type: { name: " + enum_1.MessageHeader[type] + ", type: " + type + " }");
	    };
	}
	schema_1.Field['encode'] = encodeField;
	schema_1.Field['decode'] = decodeField;
	schema_1.Field['fromJSON'] = json_1.fieldFromJSON;
	schema_1.Schema['encode'] = encodeSchema;
	schema_1.Schema['decode'] = decodeSchema;
	schema_1.Schema['fromJSON'] = json_1.schemaFromJSON;
	RecordBatch['encode'] = encodeRecordBatch;
	RecordBatch['decode'] = decodeRecordBatch;
	RecordBatch['fromJSON'] = json_1.recordBatchFromJSON;
	DictionaryBatch['encode'] = encodeDictionaryBatch;
	DictionaryBatch['decode'] = decodeDictionaryBatch;
	DictionaryBatch['fromJSON'] = json_1.dictionaryBatchFromJSON;
	FieldNode['encode'] = encodeFieldNode;
	FieldNode['decode'] = decodeFieldNode;
	BufferRegion['encode'] = encodeBufferRegion;
	BufferRegion['decode'] = decodeBufferRegion;
	/** @ignore */
	function decodeSchema(_schema) {
	    var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();

	    var fields = decodeSchemaFields(_schema, dictionaries);
	    return new schema_1.Schema(fields, decodeCustomMetadata(_schema), dictionaries);
	}
	/** @ignore */
	function decodeRecordBatch(batch) {
	    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : enum_1.MetadataVersion.V4;

	    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));
	}
	/** @ignore */
	function decodeDictionaryBatch(batch) {
	    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : enum_1.MetadataVersion.V4;

	    return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());
	}
	/** @ignore */
	function decodeBufferRegion(b) {
	    return new BufferRegion(b.offset(), b.length());
	}
	/** @ignore */
	function decodeFieldNode(f) {
	    return new FieldNode(f.length(), f.nullCount());
	}
	/** @ignore */
	function decodeFieldNodes(batch) {
	    var nodes = [];
	    for (var f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {
	        if (f = batch.nodes(i)) {
	            nodes[++j] = FieldNode.decode(f);
	        }
	    }
	    return nodes;
	}
	/** @ignore */
	function decodeBuffers(batch, version) {
	    var bufferRegions = [];
	    for (var b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {
	        if (b = batch.buffers(i)) {
	            // If this Arrow buffer was written before version 4,
	            // advance the buffer's bb_pos 8 bytes to skip past
	            // the now-removed page_id field
	            if (version < enum_1.MetadataVersion.V4) {
	                b.bb_pos += 8 * (i + 1);
	            }
	            bufferRegions[++j] = BufferRegion.decode(b);
	        }
	    }
	    return bufferRegions;
	}
	/** @ignore */
	function decodeSchemaFields(schema, dictionaries) {
	    var fields = [];
	    for (var f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {
	        if (f = schema.fields(i)) {
	            fields[++j] = schema_1.Field.decode(f, dictionaries);
	        }
	    }
	    return fields;
	}
	/** @ignore */
	function decodeFieldChildren(field, dictionaries) {
	    var children = [];
	    for (var f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {
	        if (f = field.children(i)) {
	            children[++j] = schema_1.Field.decode(f, dictionaries);
	        }
	    }
	    return children;
	}
	/** @ignore */
	function decodeField(f, dictionaries) {
	    var id = void 0;
	    var field = void 0;
	    var type = void 0;
	    var keys = void 0;
	    var dictType = void 0;
	    var dictMeta = void 0;
	    // If no dictionary encoding
	    if (!dictionaries || !(dictMeta = f.dictionary())) {
	        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));
	        field = new schema_1.Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));
	    }
	    // tslint:disable
	    // If dictionary encoded and the first time we've seen this dictionary id, decode
	    // the data type and child fields, then wrap in a Dictionary type and insert the
	    // data type into the dictionary types map.
	    else if (!dictionaries.has(id = dictMeta.id().low)) {
	            // a dictionary index defaults to signed 32 bit int if unspecified
	            keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new type_1.Int32();
	            dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));
	            dictType = new type_1.Dictionary(type, keys, id, dictMeta.isOrdered());
	            field = new schema_1.Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));
	        }
	        // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the
	        // data type and wrap in a new Dictionary type and field.
	        else {
	                // a dictionary index defaults to signed 32 bit int if unspecified
	                keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new type_1.Int32();
	                dictType = new type_1.Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());
	                field = new schema_1.Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));
	            }
	    return field || null;
	}
	/** @ignore */
	function decodeCustomMetadata(parent) {
	    var data = new Map();
	    if (parent) {
	        for (var entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {
	            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {
	                data.set(key, entry.value());
	            }
	        }
	    }
	    return data;
	}
	/** @ignore */
	function decodeIndexType(_type) {
	    return new type_1.Int(_type.isSigned(), _type.bitWidth());
	}
	/** @ignore */
	function decodeFieldType(f, children) {
	    var typeId = f.typeType();
	    switch (typeId) {
	        case Type.NONE:
	            return new type_1.Null();
	        case Type.Null:
	            return new type_1.Null();
	        case Type.Binary:
	            return new type_1.Binary();
	        case Type.Utf8:
	            return new type_1.Utf8();
	        case Type.Bool:
	            return new type_1.Bool();
	        case Type.List:
	            return new type_1.List((children || [])[0]);
	        case Type.Struct_:
	            return new type_1.Struct(children || []);
	    }
	    switch (typeId) {
	        case Type.Int:
	            {
	                var t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());
	                return new type_1.Int(t.isSigned(), t.bitWidth());
	            }
	        case Type.FloatingPoint:
	            {
	                var _t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());
	                return new type_1.Float(_t.precision());
	            }
	        case Type.Decimal:
	            {
	                var _t2 = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());
	                return new type_1.Decimal(_t2.scale(), _t2.precision());
	            }
	        case Type.Date:
	            {
	                var _t3 = f.type(new Schema_.org.apache.arrow.flatbuf.Date());
	                return new type_1.Date_(_t3.unit());
	            }
	        case Type.Time:
	            {
	                var _t4 = f.type(new Schema_.org.apache.arrow.flatbuf.Time());
	                return new type_1.Time(_t4.unit(), _t4.bitWidth());
	            }
	        case Type.Timestamp:
	            {
	                var _t5 = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());
	                return new type_1.Timestamp(_t5.unit(), _t5.timezone());
	            }
	        case Type.Interval:
	            {
	                var _t6 = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());
	                return new type_1.Interval(_t6.unit());
	            }
	        case Type.Union:
	            {
	                var _t7 = f.type(new Schema_.org.apache.arrow.flatbuf.Union());
	                return new type_1.Union(_t7.mode(), _t7.typeIdsArray() || [], children || []);
	            }
	        case Type.FixedSizeBinary:
	            {
	                var _t8 = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());
	                return new type_1.FixedSizeBinary(_t8.byteWidth());
	            }
	        case Type.FixedSizeList:
	            {
	                var _t9 = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());
	                return new type_1.FixedSizeList(_t9.listSize(), (children || [])[0]);
	            }
	        case Type.Map:
	            {
	                var _t10 = f.type(new Schema_.org.apache.arrow.flatbuf.Map());
	                return new type_1.Map_((children || [])[0], _t10.keysSorted());
	            }
	    }
	    throw new Error("Unrecognized type: \"" + Type[typeId] + "\" (" + typeId + ")");
	}
	/** @ignore */
	function encodeSchema(b, schema) {
	    var fieldOffsets = schema.fields.map(function (f) {
	        return schema_1.Field.encode(b, f);
	    });
	    _Schema.startFieldsVector(b, fieldOffsets.length);
	    var fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);
	    var metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, [].concat(_toConsumableArray(schema.metadata)).map(function (_ref) {
	        var _ref2 = _slicedToArray(_ref, 2),
	            k = _ref2[0],
	            v = _ref2[1];

	        var key = b.createString("" + k);
	        var val = b.createString("" + v);
	        _KeyValue.startKeyValue(b);
	        _KeyValue.addKey(b, key);
	        _KeyValue.addValue(b, val);
	        return _KeyValue.endKeyValue(b);
	    }));
	    _Schema.startSchema(b);
	    _Schema.addFields(b, fieldsVectorOffset);
	    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);
	    if (metadataOffset !== -1) {
	        _Schema.addCustomMetadata(b, metadataOffset);
	    }
	    return _Schema.endSchema(b);
	}
	/** @ignore */
	function encodeField(b, field) {
	    var nameOffset = -1;
	    var typeOffset = -1;
	    var dictionaryOffset = -1;
	    var type = field.type;
	    var typeId = field.typeId;
	    if (!type_1.DataType.isDictionary(type)) {
	        typeOffset = typeassembler_1.instance.visit(type, b);
	    } else {
	        typeId = type.dictionary.typeId;
	        dictionaryOffset = typeassembler_1.instance.visit(type, b);
	        typeOffset = typeassembler_1.instance.visit(type.dictionary, b);
	    }
	    var childOffsets = (type.children || []).map(function (f) {
	        return schema_1.Field.encode(b, f);
	    });
	    var childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);
	    var metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, [].concat(_toConsumableArray(field.metadata)).map(function (_ref3) {
	        var _ref4 = _slicedToArray(_ref3, 2),
	            k = _ref4[0],
	            v = _ref4[1];

	        var key = b.createString("" + k);
	        var val = b.createString("" + v);
	        _KeyValue.startKeyValue(b);
	        _KeyValue.addKey(b, key);
	        _KeyValue.addValue(b, val);
	        return _KeyValue.endKeyValue(b);
	    }));
	    if (field.name) {
	        nameOffset = b.createString(field.name);
	    }
	    _Field.startField(b);
	    _Field.addType(b, typeOffset);
	    _Field.addTypeType(b, typeId);
	    _Field.addChildren(b, childrenVectorOffset);
	    _Field.addNullable(b, !!field.nullable);
	    if (nameOffset !== -1) {
	        _Field.addName(b, nameOffset);
	    }
	    if (dictionaryOffset !== -1) {
	        _Field.addDictionary(b, dictionaryOffset);
	    }
	    if (metadataOffset !== -1) {
	        _Field.addCustomMetadata(b, metadataOffset);
	    }
	    return _Field.endField(b);
	}
	/** @ignore */
	function encodeRecordBatch(b, recordBatch) {
	    var nodes = recordBatch.nodes || [];
	    var buffers = recordBatch.buffers || [];
	    _RecordBatch.startNodesVector(b, nodes.length);
	    nodes.slice().reverse().forEach(function (n) {
	        return FieldNode.encode(b, n);
	    });
	    var nodesVectorOffset = b.endVector();
	    _RecordBatch.startBuffersVector(b, buffers.length);
	    buffers.slice().reverse().forEach(function (b_) {
	        return BufferRegion.encode(b, b_);
	    });
	    var buffersVectorOffset = b.endVector();
	    _RecordBatch.startRecordBatch(b);
	    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));
	    _RecordBatch.addNodes(b, nodesVectorOffset);
	    _RecordBatch.addBuffers(b, buffersVectorOffset);
	    return _RecordBatch.endRecordBatch(b);
	}
	/** @ignore */
	function encodeDictionaryBatch(b, dictionaryBatch) {
	    var dataOffset = RecordBatch.encode(b, dictionaryBatch.data);
	    _DictionaryBatch.startDictionaryBatch(b);
	    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));
	    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);
	    _DictionaryBatch.addData(b, dataOffset);
	    return _DictionaryBatch.endDictionaryBatch(b);
	}
	/** @ignore */
	function encodeFieldNode(b, node) {
	    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));
	}
	/** @ignore */
	function encodeBufferRegion(b, node) {
	    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));
	}
	/** @ignore */
	var platformIsLittleEndian = function () {
	    var buffer = new ArrayBuffer(2);
	    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
	    // Int16Array uses the platform's endianness.
	    return new Int16Array(buffer)[0] === 256;
	}();

	//# sourceMappingURL=message.js.map

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var flatbuffers_1 = __webpack_require__(61);
	var Long = flatbuffers_1.flatbuffers.Long;
	var Schema_ = __webpack_require__(70);
	var visitor_1 = __webpack_require__(76);
	var Null = Schema_.org.apache.arrow.flatbuf.Null;
	var Int = Schema_.org.apache.arrow.flatbuf.Int;
	var FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;
	var Binary = Schema_.org.apache.arrow.flatbuf.Binary;
	var Bool = Schema_.org.apache.arrow.flatbuf.Bool;
	var Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;
	var Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;
	var Date = Schema_.org.apache.arrow.flatbuf.Date;
	var Time = Schema_.org.apache.arrow.flatbuf.Time;
	var Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;
	var Interval = Schema_.org.apache.arrow.flatbuf.Interval;
	var List = Schema_.org.apache.arrow.flatbuf.List;
	var Struct = Schema_.org.apache.arrow.flatbuf.Struct_;
	var Union = Schema_.org.apache.arrow.flatbuf.Union;
	var DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;
	var FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;
	var FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;
	var Map_ = Schema_.org.apache.arrow.flatbuf.Map;
	/** @ignore */

	var TypeAssembler = function (_visitor_1$Visitor) {
	    _inherits(TypeAssembler, _visitor_1$Visitor);

	    function TypeAssembler() {
	        _classCallCheck(this, TypeAssembler);

	        return _possibleConstructorReturn(this, (TypeAssembler.__proto__ || Object.getPrototypeOf(TypeAssembler)).apply(this, arguments));
	    }

	    _createClass(TypeAssembler, [{
	        key: "visit",
	        value: function visit(node, builder) {
	            return node == null || builder == null ? undefined : _get(TypeAssembler.prototype.__proto__ || Object.getPrototypeOf(TypeAssembler.prototype), "visit", this).call(this, node, builder);
	        }
	    }, {
	        key: "visitNull",
	        value: function visitNull(_node, b) {
	            Null.startNull(b);
	            return Null.endNull(b);
	        }
	    }, {
	        key: "visitInt",
	        value: function visitInt(node, b) {
	            Int.startInt(b);
	            Int.addBitWidth(b, node.bitWidth);
	            Int.addIsSigned(b, node.isSigned);
	            return Int.endInt(b);
	        }
	    }, {
	        key: "visitFloat",
	        value: function visitFloat(node, b) {
	            FloatingPoint.startFloatingPoint(b);
	            FloatingPoint.addPrecision(b, node.precision);
	            return FloatingPoint.endFloatingPoint(b);
	        }
	    }, {
	        key: "visitBinary",
	        value: function visitBinary(_node, b) {
	            Binary.startBinary(b);
	            return Binary.endBinary(b);
	        }
	    }, {
	        key: "visitBool",
	        value: function visitBool(_node, b) {
	            Bool.startBool(b);
	            return Bool.endBool(b);
	        }
	    }, {
	        key: "visitUtf8",
	        value: function visitUtf8(_node, b) {
	            Utf8.startUtf8(b);
	            return Utf8.endUtf8(b);
	        }
	    }, {
	        key: "visitDecimal",
	        value: function visitDecimal(node, b) {
	            Decimal.startDecimal(b);
	            Decimal.addScale(b, node.scale);
	            Decimal.addPrecision(b, node.precision);
	            return Decimal.endDecimal(b);
	        }
	    }, {
	        key: "visitDate",
	        value: function visitDate(node, b) {
	            Date.startDate(b);
	            Date.addUnit(b, node.unit);
	            return Date.endDate(b);
	        }
	    }, {
	        key: "visitTime",
	        value: function visitTime(node, b) {
	            Time.startTime(b);
	            Time.addUnit(b, node.unit);
	            Time.addBitWidth(b, node.bitWidth);
	            return Time.endTime(b);
	        }
	    }, {
	        key: "visitTimestamp",
	        value: function visitTimestamp(node, b) {
	            var timezone = node.timezone && b.createString(node.timezone) || undefined;
	            Timestamp.startTimestamp(b);
	            Timestamp.addUnit(b, node.unit);
	            if (timezone !== undefined) {
	                Timestamp.addTimezone(b, timezone);
	            }
	            return Timestamp.endTimestamp(b);
	        }
	    }, {
	        key: "visitInterval",
	        value: function visitInterval(node, b) {
	            Interval.startInterval(b);
	            Interval.addUnit(b, node.unit);
	            return Interval.endInterval(b);
	        }
	    }, {
	        key: "visitList",
	        value: function visitList(_node, b) {
	            List.startList(b);
	            return List.endList(b);
	        }
	    }, {
	        key: "visitStruct",
	        value: function visitStruct(_node, b) {
	            Struct.startStruct_(b);
	            return Struct.endStruct_(b);
	        }
	    }, {
	        key: "visitUnion",
	        value: function visitUnion(node, b) {
	            Union.startTypeIdsVector(b, node.typeIds.length);
	            var typeIds = Union.createTypeIdsVector(b, node.typeIds);
	            Union.startUnion(b);
	            Union.addMode(b, node.mode);
	            Union.addTypeIds(b, typeIds);
	            return Union.endUnion(b);
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary(node, b) {
	            var indexType = this.visit(node.indices, b);
	            DictionaryEncoding.startDictionaryEncoding(b);
	            DictionaryEncoding.addId(b, new Long(node.id, 0));
	            DictionaryEncoding.addIsOrdered(b, node.isOrdered);
	            if (indexType !== undefined) {
	                DictionaryEncoding.addIndexType(b, indexType);
	            }
	            return DictionaryEncoding.endDictionaryEncoding(b);
	        }
	    }, {
	        key: "visitFixedSizeBinary",
	        value: function visitFixedSizeBinary(node, b) {
	            FixedSizeBinary.startFixedSizeBinary(b);
	            FixedSizeBinary.addByteWidth(b, node.byteWidth);
	            return FixedSizeBinary.endFixedSizeBinary(b);
	        }
	    }, {
	        key: "visitFixedSizeList",
	        value: function visitFixedSizeList(node, b) {
	            FixedSizeList.startFixedSizeList(b);
	            FixedSizeList.addListSize(b, node.listSize);
	            return FixedSizeList.endFixedSizeList(b);
	        }
	    }, {
	        key: "visitMap",
	        value: function visitMap(node, b) {
	            Map_.startMap(b);
	            Map_.addKeysSorted(b, node.keysSorted);
	            return Map_.endMap(b);
	        }
	    }]);

	    return TypeAssembler;
	}(visitor_1.Visitor);

	exports.TypeAssembler = TypeAssembler;
	/** @ignore */
	exports.instance = new TypeAssembler();

	//# sourceMappingURL=typeassembler.js.map

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var schema_1 = __webpack_require__(97);
	var type_1 = __webpack_require__(74);
	var message_1 = __webpack_require__(120);
	var enum_1 = __webpack_require__(69);
	/** @ignore */
	function schemaFromJSON(_schema) {
	    var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();

	    return new schema_1.Schema(schemaFieldsFromJSON(_schema, dictionaries), customMetadataFromJSON(_schema['customMetadata']), dictionaries);
	}
	exports.schemaFromJSON = schemaFromJSON;
	/** @ignore */
	function recordBatchFromJSON(b) {
	    return new message_1.RecordBatch(b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));
	}
	exports.recordBatchFromJSON = recordBatchFromJSON;
	/** @ignore */
	function dictionaryBatchFromJSON(b) {
	    return new message_1.DictionaryBatch(recordBatchFromJSON(b['data']), b['id'], b['isDelta']);
	}
	exports.dictionaryBatchFromJSON = dictionaryBatchFromJSON;
	/** @ignore */
	function schemaFieldsFromJSON(_schema, dictionaries) {
	    return (_schema['fields'] || []).filter(Boolean).map(function (f) {
	        return schema_1.Field.fromJSON(f, dictionaries);
	    });
	}
	/** @ignore */
	function fieldChildrenFromJSON(_field, dictionaries) {
	    return (_field['children'] || []).filter(Boolean).map(function (f) {
	        return schema_1.Field.fromJSON(f, dictionaries);
	    });
	}
	/** @ignore */
	function fieldNodesFromJSON(xs) {
	    return (xs || []).reduce(function (fieldNodes, column) {
	        return [].concat(_toConsumableArray(fieldNodes), [new message_1.FieldNode(column['count'], nullCountFromJSON(column['VALIDITY']))], _toConsumableArray(fieldNodesFromJSON(column['children'])));
	    }, []);
	}
	/** @ignore */
	function buffersFromJSON(xs) {
	    var buffers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	    for (var i = -1, n = (xs || []).length; ++i < n;) {
	        var column = xs[i];
	        column['VALIDITY'] && buffers.push(new message_1.BufferRegion(buffers.length, column['VALIDITY'].length));
	        column['TYPE'] && buffers.push(new message_1.BufferRegion(buffers.length, column['TYPE'].length));
	        column['OFFSET'] && buffers.push(new message_1.BufferRegion(buffers.length, column['OFFSET'].length));
	        column['DATA'] && buffers.push(new message_1.BufferRegion(buffers.length, column['DATA'].length));
	        buffers = buffersFromJSON(column['children'], buffers);
	    }
	    return buffers;
	}
	/** @ignore */
	function nullCountFromJSON(validity) {
	    return (validity || []).reduce(function (sum, val) {
	        return sum + +(val === 0);
	    }, 0);
	}
	/** @ignore */
	function fieldFromJSON(_field, dictionaries) {
	    var id = void 0;
	    var keys = void 0;
	    var field = void 0;
	    var dictMeta = void 0;
	    var type = void 0;
	    var dictType = void 0;
	    // If no dictionary encoding
	    if (!dictionaries || !(dictMeta = _field['dictionary'])) {
	        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));
	        field = new schema_1.Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
	    }
	    // tslint:disable
	    // If dictionary encoded and the first time we've seen this dictionary id, decode
	    // the data type and child fields, then wrap in a Dictionary type and insert the
	    // data type into the dictionary types map.
	    else if (!dictionaries.has(id = dictMeta['id'])) {
	            // a dictionary index defaults to signed 32 bit int if unspecified
	            keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new type_1.Int32();
	            dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));
	            dictType = new type_1.Dictionary(type, keys, id, dictMeta['isOrdered']);
	            field = new schema_1.Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
	        }
	        // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the
	        // data type and wrap in a new Dictionary type and field.
	        else {
	                // a dictionary index defaults to signed 32 bit int if unspecified
	                keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new type_1.Int32();
	                dictType = new type_1.Dictionary(dictionaries.get(id), keys, id, dictMeta['isOrdered']);
	                field = new schema_1.Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
	            }
	    return field || null;
	}
	exports.fieldFromJSON = fieldFromJSON;
	/** @ignore */
	function customMetadataFromJSON(_metadata) {
	    return new Map(Object.entries(_metadata || {}));
	}
	/** @ignore */
	function indexTypeFromJSON(_type) {
	    return new type_1.Int(_type['isSigned'], _type['bitWidth']);
	}
	/** @ignore */
	function typeFromJSON(f, children) {
	    var typeId = f['type']['name'];
	    switch (typeId) {
	        case 'NONE':
	            return new type_1.Null();
	        case 'null':
	            return new type_1.Null();
	        case 'binary':
	            return new type_1.Binary();
	        case 'utf8':
	            return new type_1.Utf8();
	        case 'bool':
	            return new type_1.Bool();
	        case 'list':
	            return new type_1.List((children || [])[0]);
	        case 'struct':
	            return new type_1.Struct(children || []);
	        case 'struct_':
	            return new type_1.Struct(children || []);
	    }
	    switch (typeId) {
	        case 'int':
	            {
	                var t = f['type'];
	                return new type_1.Int(t['isSigned'], t['bitWidth']);
	            }
	        case 'floatingpoint':
	            {
	                var _t = f['type'];
	                return new type_1.Float(enum_1.Precision[_t['precision']]);
	            }
	        case 'decimal':
	            {
	                var _t2 = f['type'];
	                return new type_1.Decimal(_t2['scale'], _t2['precision']);
	            }
	        case 'date':
	            {
	                var _t3 = f['type'];
	                return new type_1.Date_(enum_1.DateUnit[_t3['unit']]);
	            }
	        case 'time':
	            {
	                var _t4 = f['type'];
	                return new type_1.Time(enum_1.TimeUnit[_t4['unit']], _t4['bitWidth']);
	            }
	        case 'timestamp':
	            {
	                var _t5 = f['type'];
	                return new type_1.Timestamp(enum_1.TimeUnit[_t5['unit']], _t5['timezone']);
	            }
	        case 'interval':
	            {
	                var _t6 = f['type'];
	                return new type_1.Interval(enum_1.IntervalUnit[_t6['unit']]);
	            }
	        case 'union':
	            {
	                var _t7 = f['type'];
	                return new type_1.Union(enum_1.UnionMode[_t7['mode']], _t7['typeIds'] || [], children || []);
	            }
	        case 'fixedsizebinary':
	            {
	                var _t8 = f['type'];
	                return new type_1.FixedSizeBinary(_t8['byteWidth']);
	            }
	        case 'fixedsizelist':
	            {
	                var _t9 = f['type'];
	                return new type_1.FixedSizeList(_t9['listSize'], (children || [])[0]);
	            }
	        case 'map':
	            {
	                var _t10 = f['type'];
	                return new type_1.Map_((children || [])[0], _t10['keysSorted']);
	            }
	    }
	    throw new Error("Unrecognized type: \"" + typeId + "\"");
	}

	//# sourceMappingURL=json.js.map

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var visitor_1 = __webpack_require__(76);
	var enum_1 = __webpack_require__(69);
	var recordbatch_1 = __webpack_require__(116);
	var buffer_1 = __webpack_require__(60);
	var bit_1 = __webpack_require__(73);
	var args_1 = __webpack_require__(98);
	var message_1 = __webpack_require__(120);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var VectorAssembler = function (_visitor_1$Visitor) {
	    _inherits(VectorAssembler, _visitor_1$Visitor);

	    function VectorAssembler() {
	        _classCallCheck(this, VectorAssembler);

	        var _this = _possibleConstructorReturn(this, (VectorAssembler.__proto__ || Object.getPrototypeOf(VectorAssembler)).call(this));

	        _this._byteLength = 0;
	        _this._nodes = [];
	        _this._buffers = [];
	        _this._bufferRegions = [];
	        return _this;
	    }
	    /** @nocollapse */


	    _createClass(VectorAssembler, [{
	        key: "visit",
	        value: function visit(vector) {
	            if (!type_1.DataType.isDictionary(vector.type)) {
	                var data = vector.data,
	                    length = vector.length,
	                    nullCount = vector.nullCount;

	                if (length > 2147483647) {
	                    /* istanbul ignore next */
	                    throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');
	                }
	                if (!type_1.DataType.isNull(vector.type)) {
	                    addBuffer.call(this, nullCount <= 0 ? new Uint8Array(0) // placeholder validity buffer
	                    : bit_1.truncateBitmap(data.offset, length, data.nullBitmap));
	                }
	                this.nodes.push(new message_1.FieldNode(length, nullCount));
	            }
	            return _get(VectorAssembler.prototype.__proto__ || Object.getPrototypeOf(VectorAssembler.prototype), "visit", this).call(this, vector);
	        }
	    }, {
	        key: "visitNull",
	        value: function visitNull(_nullV) {
	            return this;
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary(vector) {
	            // Assemble the indices here, Dictionary assembled separately.
	            return this.visit(vector.indices);
	        }
	    }, {
	        key: "nodes",
	        get: function get() {
	            return this._nodes;
	        }
	    }, {
	        key: "buffers",
	        get: function get() {
	            return this._buffers;
	        }
	    }, {
	        key: "byteLength",
	        get: function get() {
	            return this._byteLength;
	        }
	    }, {
	        key: "bufferRegions",
	        get: function get() {
	            return this._bufferRegions;
	        }
	    }], [{
	        key: "assemble",
	        value: function assemble() {
	            var assembler = new VectorAssembler();

	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }

	            var vectorChildren = args_1.selectVectorChildrenArgs(recordbatch_1.RecordBatch, args);

	            var _assembler$visitMany = assembler.visitMany(vectorChildren),
	                _assembler$visitMany2 = _slicedToArray(_assembler$visitMany, 1),
	                _assembler$visitMany3 = _assembler$visitMany2[0],
	                assembleResult = _assembler$visitMany3 === undefined ? assembler : _assembler$visitMany3;

	            return assembleResult;
	        }
	    }]);

	    return VectorAssembler;
	}(visitor_1.Visitor);

	exports.VectorAssembler = VectorAssembler;
	/** @ignore */
	function addBuffer(values) {
	    var byteLength = values.byteLength + 7 & ~7; // Round up to a multiple of 8
	    this.buffers.push(values);
	    this.bufferRegions.push(new message_1.BufferRegion(this._byteLength, byteLength));
	    this._byteLength += byteLength;
	    return this;
	}
	/** @ignore */
	function assembleUnion(vector) {
	    var type = vector.type,
	        length = vector.length,
	        typeIds = vector.typeIds,
	        valueOffsets = vector.valueOffsets;
	    // All Union Vectors have a typeIds buffer

	    addBuffer.call(this, typeIds);
	    // If this is a Sparse Union, treat it like all other Nested types
	    if (type.mode === enum_1.UnionMode.Sparse) {
	        return assembleNestedVector.call(this, vector);
	    } else if (type.mode === enum_1.UnionMode.Dense) {
	        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children
	        if (vector.offset <= 0) {
	            // If the Vector hasn't been sliced, write the existing valueOffsets
	            addBuffer.call(this, valueOffsets);
	            // We can treat this like all other Nested types
	            return assembleNestedVector.call(this, vector);
	        } else {
	            // A sliced Dense Union is an unpleasant case. Because the offsets are different for
	            // each child vector, we need to "rebase" the valueOffsets for each child
	            // Union typeIds are not necessary 0-indexed
	            var maxChildTypeId = typeIds.reduce(function (x, y) {
	                return Math.max(x, y);
	            }, typeIds[0]);
	            var childLengths = new Int32Array(maxChildTypeId + 1);
	            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet
	            var childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);
	            var shiftedOffsets = new Int32Array(length);
	            // If we have a non-zero offset, then the value offsets do not start at
	            // zero. We must a) create a new offsets array with shifted offsets and
	            // b) slice the values array accordingly
	            var unshiftedOffsets = buffer_1.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);
	            for (var typeId, shift, index = -1; ++index < length;) {
	                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {
	                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];
	                }
	                shiftedOffsets[index] = unshiftedOffsets[index] - shift;
	                ++childLengths[typeId];
	            }
	            addBuffer.call(this, shiftedOffsets);
	            // Slice and visit children accordingly
	            for (var child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {
	                if (child = vector.getChildAt(childIndex)) {
	                    var _typeId = type.typeIds[childIndex];
	                    var childLength = Math.min(length, childLengths[_typeId]);
	                    this.visit(child.slice(childOffsets[_typeId], childLength));
	                }
	            }
	        }
	    }
	    return this;
	}
	/** @ignore */
	function assembleBoolVector(vector) {
	    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed
	    var values = void 0;
	    if (vector.nullCount >= vector.length) {
	        // If all values are null, just insert a placeholder empty data buffer (fastest path)
	        return addBuffer.call(this, new Uint8Array(0));
	    } else if ((values = vector.values) instanceof Uint8Array) {
	        // If values is already a Uint8Array, slice the bitmap (fast path)
	        return addBuffer.call(this, bit_1.truncateBitmap(vector.offset, vector.length, values));
	    }
	    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the
	    // values as bools and re-pack them into a Uint8Array. This code isn't
	    // reachable unless you're trying to manipulate the Data internals,
	    // we we're only doing this for safety.
	    /* istanbul ignore next */
	    return addBuffer.call(this, bit_1.packBools(vector));
	}
	/** @ignore */
	function assembleFlatVector(vector) {
	    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));
	}
	/** @ignore */
	function assembleFlatListVector(vector) {
	    var length = vector.length,
	        values = vector.values,
	        valueOffsets = vector.valueOffsets;

	    var firstOffset = valueOffsets[0];
	    var lastOffset = valueOffsets[length];
	    var byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);
	    // Push in the order FlatList types read their buffers
	    addBuffer.call(this, buffer_1.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first
	    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second
	    return this;
	}
	/** @ignore */
	function assembleListVector(vector) {
	    var length = vector.length,
	        valueOffsets = vector.valueOffsets;
	    // If we have valueOffsets (MapVector, ListVector), push that buffer first

	    if (valueOffsets) {
	        addBuffer.call(this, buffer_1.rebaseValueOffsets(valueOffsets[0], length, valueOffsets));
	    }
	    // Then insert the List's values child
	    return this.visit(vector.getChildAt(0));
	}
	/** @ignore */
	function assembleNestedVector(vector) {
	    return this.visitMany(vector.type.children.map(function (_, i) {
	        return vector.getChildAt(i);
	    }).filter(Boolean))[0];
	}
	VectorAssembler.prototype.visitBool = assembleBoolVector;
	VectorAssembler.prototype.visitInt = assembleFlatVector;
	VectorAssembler.prototype.visitFloat = assembleFlatVector;
	VectorAssembler.prototype.visitUtf8 = assembleFlatListVector;
	VectorAssembler.prototype.visitBinary = assembleFlatListVector;
	VectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;
	VectorAssembler.prototype.visitDate = assembleFlatVector;
	VectorAssembler.prototype.visitTimestamp = assembleFlatVector;
	VectorAssembler.prototype.visitTime = assembleFlatVector;
	VectorAssembler.prototype.visitDecimal = assembleFlatVector;
	VectorAssembler.prototype.visitList = assembleListVector;
	VectorAssembler.prototype.visitStruct = assembleNestedVector;
	VectorAssembler.prototype.visitUnion = assembleUnion;
	VectorAssembler.prototype.visitInterval = assembleFlatVector;
	VectorAssembler.prototype.visitFixedSizeList = assembleListVector;
	VectorAssembler.prototype.visitMap = assembleListVector;

	//# sourceMappingURL=vectorassembler.js.map

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var visitor_1 = __webpack_require__(76);
	var enum_1 = __webpack_require__(69);
	/** @ignore */

	var JSONTypeAssembler = function (_visitor_1$Visitor) {
	    _inherits(JSONTypeAssembler, _visitor_1$Visitor);

	    function JSONTypeAssembler() {
	        _classCallCheck(this, JSONTypeAssembler);

	        return _possibleConstructorReturn(this, (JSONTypeAssembler.__proto__ || Object.getPrototypeOf(JSONTypeAssembler)).apply(this, arguments));
	    }

	    _createClass(JSONTypeAssembler, [{
	        key: "visit",
	        value: function visit(node) {
	            return node == null ? undefined : _get(JSONTypeAssembler.prototype.__proto__ || Object.getPrototypeOf(JSONTypeAssembler.prototype), "visit", this).call(this, node);
	        }
	    }, {
	        key: "visitNull",
	        value: function visitNull(_ref) {
	            var typeId = _ref.typeId;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase() };
	        }
	    }, {
	        key: "visitInt",
	        value: function visitInt(_ref2) {
	            var typeId = _ref2.typeId,
	                bitWidth = _ref2.bitWidth,
	                isSigned = _ref2.isSigned;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };
	        }
	    }, {
	        key: "visitFloat",
	        value: function visitFloat(_ref3) {
	            var typeId = _ref3.typeId,
	                precision = _ref3.precision;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'precision': enum_1.Precision[precision] };
	        }
	    }, {
	        key: "visitBinary",
	        value: function visitBinary(_ref4) {
	            var typeId = _ref4.typeId;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase() };
	        }
	    }, {
	        key: "visitBool",
	        value: function visitBool(_ref5) {
	            var typeId = _ref5.typeId;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase() };
	        }
	    }, {
	        key: "visitUtf8",
	        value: function visitUtf8(_ref6) {
	            var typeId = _ref6.typeId;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase() };
	        }
	    }, {
	        key: "visitDecimal",
	        value: function visitDecimal(_ref7) {
	            var typeId = _ref7.typeId,
	                scale = _ref7.scale,
	                precision = _ref7.precision;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };
	        }
	    }, {
	        key: "visitDate",
	        value: function visitDate(_ref8) {
	            var typeId = _ref8.typeId,
	                unit = _ref8.unit;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'unit': enum_1.DateUnit[unit] };
	        }
	    }, {
	        key: "visitTime",
	        value: function visitTime(_ref9) {
	            var typeId = _ref9.typeId,
	                unit = _ref9.unit,
	                bitWidth = _ref9.bitWidth;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'unit': enum_1.TimeUnit[unit], bitWidth: bitWidth };
	        }
	    }, {
	        key: "visitTimestamp",
	        value: function visitTimestamp(_ref10) {
	            var typeId = _ref10.typeId,
	                timezone = _ref10.timezone,
	                unit = _ref10.unit;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'unit': enum_1.TimeUnit[unit], timezone: timezone };
	        }
	    }, {
	        key: "visitInterval",
	        value: function visitInterval(_ref11) {
	            var typeId = _ref11.typeId,
	                unit = _ref11.unit;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'unit': enum_1.IntervalUnit[unit] };
	        }
	    }, {
	        key: "visitList",
	        value: function visitList(_ref12) {
	            var typeId = _ref12.typeId;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase() };
	        }
	    }, {
	        key: "visitStruct",
	        value: function visitStruct(_ref13) {
	            var typeId = _ref13.typeId;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase() };
	        }
	    }, {
	        key: "visitUnion",
	        value: function visitUnion(_ref14) {
	            var typeId = _ref14.typeId,
	                mode = _ref14.mode,
	                typeIds = _ref14.typeIds;

	            return {
	                'name': enum_1.ArrowType[typeId].toLowerCase(),
	                'mode': enum_1.UnionMode[mode],
	                'typeIds': [].concat(_toConsumableArray(typeIds))
	            };
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary(node) {
	            return this.visit(node.dictionary);
	        }
	    }, {
	        key: "visitFixedSizeBinary",
	        value: function visitFixedSizeBinary(_ref15) {
	            var typeId = _ref15.typeId,
	                byteWidth = _ref15.byteWidth;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };
	        }
	    }, {
	        key: "visitFixedSizeList",
	        value: function visitFixedSizeList(_ref16) {
	            var typeId = _ref16.typeId,
	                listSize = _ref16.listSize;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'listSize': listSize };
	        }
	    }, {
	        key: "visitMap",
	        value: function visitMap(_ref17) {
	            var typeId = _ref17.typeId,
	                keysSorted = _ref17.keysSorted;

	            return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };
	        }
	    }]);

	    return JSONTypeAssembler;
	}(visitor_1.Visitor);

	exports.JSONTypeAssembler = JSONTypeAssembler;

	//# sourceMappingURL=jsontypeassembler.js.map

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _marked = /*#__PURE__*/regeneratorRuntime.mark(binaryToString),
	    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(bigNumsToStrings);

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var bn_1 = __webpack_require__(89);
	var column_1 = __webpack_require__(99);
	var vector_1 = __webpack_require__(68);
	var visitor_1 = __webpack_require__(76);
	var enum_1 = __webpack_require__(69);
	var recordbatch_1 = __webpack_require__(116);
	var enum_2 = __webpack_require__(69);
	var bit_1 = __webpack_require__(73);
	var args_1 = __webpack_require__(98);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var JSONVectorAssembler = function (_visitor_1$Visitor) {
	    _inherits(JSONVectorAssembler, _visitor_1$Visitor);

	    function JSONVectorAssembler() {
	        _classCallCheck(this, JSONVectorAssembler);

	        return _possibleConstructorReturn(this, (JSONVectorAssembler.__proto__ || Object.getPrototypeOf(JSONVectorAssembler)).apply(this, arguments));
	    }

	    _createClass(JSONVectorAssembler, [{
	        key: "visit",
	        value: function visit(column) {
	            var data = column.data,
	                name = column.name,
	                length = column.length;
	            var offset = data.offset,
	                nullCount = data.nullCount,
	                nullBitmap = data.nullBitmap;

	            var type = type_1.DataType.isDictionary(column.type) ? column.type.indices : column.type;
	            var buffers = Object.assign([], data.buffers, _defineProperty({}, enum_1.BufferType.VALIDITY, undefined));
	            return _extends({
	                'name': name,
	                'count': length,
	                'VALIDITY': type_1.DataType.isNull(type) ? undefined : nullCount <= 0 ? Array.from({ length: length }, function () {
	                    return 1;
	                }) : [].concat(_toConsumableArray(bit_1.iterateBits(nullBitmap, offset, length, null, bit_1.getBit)))
	            }, _get(JSONVectorAssembler.prototype.__proto__ || Object.getPrototypeOf(JSONVectorAssembler.prototype), "visit", this).call(this, vector_1.Vector.new(data.clone(type, offset, length, 0, buffers))));
	        }
	    }, {
	        key: "visitNull",
	        value: function visitNull() {
	            return {};
	        }
	    }, {
	        key: "visitBool",
	        value: function visitBool(_ref) {
	            var values = _ref.values,
	                offset = _ref.offset,
	                length = _ref.length;

	            return { 'DATA': [].concat(_toConsumableArray(bit_1.iterateBits(values, offset, length, null, bit_1.getBool))) };
	        }
	    }, {
	        key: "visitInt",
	        value: function visitInt(vector) {
	            return {
	                'DATA': vector.type.bitWidth < 64 ? [].concat(_toConsumableArray(vector.values)) : [].concat(_toConsumableArray(bigNumsToStrings(vector.values, 2)))
	            };
	        }
	    }, {
	        key: "visitFloat",
	        value: function visitFloat(vector) {
	            return { 'DATA': [].concat(_toConsumableArray(vector.values)) };
	        }
	    }, {
	        key: "visitUtf8",
	        value: function visitUtf8(vector) {
	            return { 'DATA': [].concat(_toConsumableArray(vector)), 'OFFSET': [].concat(_toConsumableArray(vector.valueOffsets)) };
	        }
	    }, {
	        key: "visitBinary",
	        value: function visitBinary(vector) {
	            return { 'DATA': [].concat(_toConsumableArray(binaryToString(vector))), OFFSET: [].concat(_toConsumableArray(vector.valueOffsets)) };
	        }
	    }, {
	        key: "visitFixedSizeBinary",
	        value: function visitFixedSizeBinary(vector) {
	            return { 'DATA': [].concat(_toConsumableArray(binaryToString(vector))) };
	        }
	    }, {
	        key: "visitDate",
	        value: function visitDate(vector) {
	            return {
	                'DATA': vector.type.unit === enum_2.DateUnit.DAY ? [].concat(_toConsumableArray(vector.values)) : [].concat(_toConsumableArray(bigNumsToStrings(vector.values, 2)))
	            };
	        }
	    }, {
	        key: "visitTimestamp",
	        value: function visitTimestamp(vector) {
	            return { 'DATA': [].concat(_toConsumableArray(bigNumsToStrings(vector.values, 2))) };
	        }
	    }, {
	        key: "visitTime",
	        value: function visitTime(vector) {
	            return {
	                'DATA': vector.type.unit < enum_2.TimeUnit.MICROSECOND ? [].concat(_toConsumableArray(vector.values)) : [].concat(_toConsumableArray(bigNumsToStrings(vector.values, 2)))
	            };
	        }
	    }, {
	        key: "visitDecimal",
	        value: function visitDecimal(vector) {
	            return { 'DATA': [].concat(_toConsumableArray(bigNumsToStrings(vector.values, 4))) };
	        }
	    }, {
	        key: "visitList",
	        value: function visitList(vector) {
	            var _this2 = this;

	            return {
	                'OFFSET': [].concat(_toConsumableArray(vector.valueOffsets)),
	                'children': vector.type.children.map(function (f, i) {
	                    return _this2.visit(new column_1.Column(f, [vector.getChildAt(i)]));
	                })
	            };
	        }
	    }, {
	        key: "visitStruct",
	        value: function visitStruct(vector) {
	            var _this3 = this;

	            return {
	                'children': vector.type.children.map(function (f, i) {
	                    return _this3.visit(new column_1.Column(f, [vector.getChildAt(i)]));
	                })
	            };
	        }
	    }, {
	        key: "visitUnion",
	        value: function visitUnion(vector) {
	            var _this4 = this;

	            return {
	                'TYPE': [].concat(_toConsumableArray(vector.typeIds)),
	                'OFFSET': vector.type.mode === enum_2.UnionMode.Dense ? [].concat(_toConsumableArray(vector.valueOffsets)) : undefined,
	                'children': vector.type.children.map(function (f, i) {
	                    return _this4.visit(new column_1.Column(f, [vector.getChildAt(i)]));
	                })
	            };
	        }
	    }, {
	        key: "visitInterval",
	        value: function visitInterval(vector) {
	            return { 'DATA': [].concat(_toConsumableArray(vector.values)) };
	        }
	    }, {
	        key: "visitFixedSizeList",
	        value: function visitFixedSizeList(vector) {
	            var _this5 = this;

	            return {
	                'children': vector.type.children.map(function (f, i) {
	                    return _this5.visit(new column_1.Column(f, [vector.getChildAt(i)]));
	                })
	            };
	        }
	    }, {
	        key: "visitMap",
	        value: function visitMap(vector) {
	            var _this6 = this;

	            return {
	                'OFFSET': [].concat(_toConsumableArray(vector.valueOffsets)),
	                'children': vector.type.children.map(function (f, i) {
	                    return _this6.visit(new column_1.Column(f, [vector.getChildAt(i)]));
	                })
	            };
	        }
	    }], [{
	        key: "assemble",

	        /** @nocollapse */
	        value: function assemble() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }

	            return new JSONVectorAssembler().visitMany(args_1.selectColumnChildrenArgs(recordbatch_1.RecordBatch, args));
	        }
	    }]);

	    return JSONVectorAssembler;
	}(visitor_1.Visitor);

	exports.JSONVectorAssembler = JSONVectorAssembler;
	/** @ignore */
	function binaryToString(vector) {
	    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, octets;

	    return regeneratorRuntime.wrap(function binaryToString$(_context) {
	        while (1) {
	            switch (_context.prev = _context.next) {
	                case 0:
	                    _iteratorNormalCompletion = true;
	                    _didIteratorError = false;
	                    _iteratorError = undefined;
	                    _context.prev = 3;
	                    _iterator = vector[Symbol.iterator]();

	                case 5:
	                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	                        _context.next = 12;
	                        break;
	                    }

	                    octets = _step.value;
	                    _context.next = 9;
	                    return octets.reduce(function (str, byte) {
	                        return "" + str + ('0' + (byte & 0xFF).toString(16)).slice(-2);
	                    }, '').toUpperCase();

	                case 9:
	                    _iteratorNormalCompletion = true;
	                    _context.next = 5;
	                    break;

	                case 12:
	                    _context.next = 18;
	                    break;

	                case 14:
	                    _context.prev = 14;
	                    _context.t0 = _context["catch"](3);
	                    _didIteratorError = true;
	                    _iteratorError = _context.t0;

	                case 18:
	                    _context.prev = 18;
	                    _context.prev = 19;

	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }

	                case 21:
	                    _context.prev = 21;

	                    if (!_didIteratorError) {
	                        _context.next = 24;
	                        break;
	                    }

	                    throw _iteratorError;

	                case 24:
	                    return _context.finish(21);

	                case 25:
	                    return _context.finish(18);

	                case 26:
	                case "end":
	                    return _context.stop();
	            }
	        }
	    }, _marked, this, [[3, 14, 18, 26], [19,, 21, 25]]);
	}
	/** @ignore */
	function bigNumsToStrings(values, stride) {
	    var i, n;
	    return regeneratorRuntime.wrap(function bigNumsToStrings$(_context2) {
	        while (1) {
	            switch (_context2.prev = _context2.next) {
	                case 0:
	                    i = -1, n = values.length / stride;

	                case 1:
	                    if (!(++i < n)) {
	                        _context2.next = 6;
	                        break;
	                    }

	                    _context2.next = 4;
	                    return "" + bn_1.BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false);

	                case 4:
	                    _context2.next = 1;
	                    break;

	                case 6:
	                case "end":
	                    return _context2.stop();
	            }
	        }
	    }, _marked2, this);
	}

	//# sourceMappingURL=jsonvectorassembler.js.map

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(72);
	var schema_1 = __webpack_require__(97);
	var chunked_1 = __webpack_require__(100);
	var recordbatch_1 = __webpack_require__(116);
	var noopBuf = new Uint8Array(0);
	var nullBufs = function nullBufs(bitmapLength) {
	    return [noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf];
	};
	/** @ignore */
	function ensureSameLengthData(schema, chunks) {
	    var batchLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : chunks.reduce(function (l, c) {
	        return Math.max(l, c.length);
	    }, 0);

	    var data = void 0;
	    var field = void 0;
	    var i = -1,
	        n = chunks.length;
	    var fields = [].concat(_toConsumableArray(schema.fields));
	    var batchData = [];
	    var bitmapLength = (batchLength + 63 & ~63) >> 3;
	    while (++i < n) {
	        if ((data = chunks[i]) && data.length === batchLength) {
	            batchData[i] = data;
	        } else {
	            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }));
	            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength) : data_1.Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));
	        }
	    }
	    return [new schema_1.Schema(fields), batchLength, batchData];
	}
	exports.ensureSameLengthData = ensureSameLengthData;
	/** @ignore */
	function distributeColumnsIntoRecordBatches(columns) {
	    return distributeVectorsIntoRecordBatches(new schema_1.Schema(columns.map(function (_ref) {
	        var field = _ref.field;
	        return field;
	    })), columns);
	}
	exports.distributeColumnsIntoRecordBatches = distributeColumnsIntoRecordBatches;
	/** @ignore */
	function distributeVectorsIntoRecordBatches(schema, vecs) {
	    return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map(function (v) {
	        return v instanceof chunked_1.Chunked ? v.chunks.map(function (c) {
	            return c.data;
	        }) : [v.data];
	    }));
	}
	exports.distributeVectorsIntoRecordBatches = distributeVectorsIntoRecordBatches;
	/** @ignore */
	function uniformlyDistributeChunksAcrossRecordBatches(schema, columns) {
	    var fields = [].concat(_toConsumableArray(schema.fields));
	    var batchArgs = [];
	    var memo = { numBatches: columns.reduce(function (n, c) {
	            return Math.max(n, c.length);
	        }, 0) };
	    var numBatches = 0,
	        batchLength = 0;
	    var i = -1,
	        numColumns = columns.length;
	    var child = void 0,
	        childData = [];
	    while (memo.numBatches-- > 0) {
	        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {
	            childData[i] = child = columns[i].shift();
	            batchLength = Math.min(batchLength, child ? child.length : batchLength);
	        }
	        if (isFinite(batchLength)) {
	            childData = distributeChildData(fields, batchLength, childData, columns, memo);
	            if (batchLength > 0) {
	                batchArgs[numBatches++] = [batchLength, childData.slice()];
	            }
	        }
	    }
	    return [schema = new schema_1.Schema(fields, schema.metadata), batchArgs.map(function (xs) {
	        return new (Function.prototype.bind.apply(recordbatch_1.RecordBatch, [null].concat([schema], _toConsumableArray(xs))))();
	    })];
	}
	/** @ignore */
	function distributeChildData(fields, batchLength, childData, columns, memo) {
	    var data = void 0;
	    var field = void 0;
	    var length = 0,
	        i = -1,
	        n = columns.length;
	    var bitmapLength = (batchLength + 63 & ~63) >> 3;
	    while (++i < n) {
	        if ((data = childData[i]) && (length = data.length) >= batchLength) {
	            if (length === batchLength) {
	                childData[i] = data;
	            } else {
	                childData[i] = data.slice(0, batchLength);
	                data = data.slice(batchLength, length - batchLength);
	                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));
	            }
	        } else {
	            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }));
	            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength) : data_1.Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));
	        }
	    }
	    return childData;
	}

	//# sourceMappingURL=recordbatch.js.map

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _asyncIterator(iterable) { if (typeof Symbol === "function") { if (Symbol.asyncIterator) { var method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { return iterable[Symbol.iterator](); } } throw new TypeError("Object is not async iterable"); }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(68);
	exports.Vector = vector_1.Vector;
	var base_1 = __webpack_require__(128);
	exports.BaseVector = base_1.BaseVector;
	var binary_1 = __webpack_require__(129);
	exports.BinaryVector = binary_1.BinaryVector;
	var bool_1 = __webpack_require__(130);
	exports.BoolVector = bool_1.BoolVector;
	var chunked_1 = __webpack_require__(100);
	exports.Chunked = chunked_1.Chunked;
	var date_1 = __webpack_require__(131);
	exports.DateVector = date_1.DateVector;
	exports.DateDayVector = date_1.DateDayVector;
	exports.DateMillisecondVector = date_1.DateMillisecondVector;
	var decimal_1 = __webpack_require__(132);
	exports.DecimalVector = decimal_1.DecimalVector;
	var dictionary_1 = __webpack_require__(133);
	exports.DictionaryVector = dictionary_1.DictionaryVector;
	var fixedsizebinary_1 = __webpack_require__(134);
	exports.FixedSizeBinaryVector = fixedsizebinary_1.FixedSizeBinaryVector;
	var fixedsizelist_1 = __webpack_require__(135);
	exports.FixedSizeListVector = fixedsizelist_1.FixedSizeListVector;
	var float_1 = __webpack_require__(136);
	exports.FloatVector = float_1.FloatVector;
	exports.Float16Vector = float_1.Float16Vector;
	exports.Float32Vector = float_1.Float32Vector;
	exports.Float64Vector = float_1.Float64Vector;
	var interval_1 = __webpack_require__(137);
	exports.IntervalVector = interval_1.IntervalVector;
	exports.IntervalDayTimeVector = interval_1.IntervalDayTimeVector;
	exports.IntervalYearMonthVector = interval_1.IntervalYearMonthVector;
	var int_1 = __webpack_require__(138);
	exports.IntVector = int_1.IntVector;
	exports.Int8Vector = int_1.Int8Vector;
	exports.Int16Vector = int_1.Int16Vector;
	exports.Int32Vector = int_1.Int32Vector;
	exports.Int64Vector = int_1.Int64Vector;
	exports.Uint8Vector = int_1.Uint8Vector;
	exports.Uint16Vector = int_1.Uint16Vector;
	exports.Uint32Vector = int_1.Uint32Vector;
	exports.Uint64Vector = int_1.Uint64Vector;
	var list_1 = __webpack_require__(139);
	exports.ListVector = list_1.ListVector;
	var map_1 = __webpack_require__(140);
	exports.MapVector = map_1.MapVector;
	var null_1 = __webpack_require__(141);
	exports.NullVector = null_1.NullVector;
	var struct_1 = __webpack_require__(142);
	exports.StructVector = struct_1.StructVector;
	var timestamp_1 = __webpack_require__(143);
	exports.TimestampVector = timestamp_1.TimestampVector;
	exports.TimestampSecondVector = timestamp_1.TimestampSecondVector;
	exports.TimestampMillisecondVector = timestamp_1.TimestampMillisecondVector;
	exports.TimestampMicrosecondVector = timestamp_1.TimestampMicrosecondVector;
	exports.TimestampNanosecondVector = timestamp_1.TimestampNanosecondVector;
	var time_1 = __webpack_require__(144);
	exports.TimeVector = time_1.TimeVector;
	exports.TimeSecondVector = time_1.TimeSecondVector;
	exports.TimeMillisecondVector = time_1.TimeMillisecondVector;
	exports.TimeMicrosecondVector = time_1.TimeMicrosecondVector;
	exports.TimeNanosecondVector = time_1.TimeNanosecondVector;
	var union_1 = __webpack_require__(145);
	exports.UnionVector = union_1.UnionVector;
	exports.DenseUnionVector = union_1.DenseUnionVector;
	exports.SparseUnionVector = union_1.SparseUnionVector;
	var utf8_1 = __webpack_require__(146);
	exports.Utf8Vector = utf8_1.Utf8Vector;
	var row_1 = __webpack_require__(102);
	exports.MapRow = row_1.MapRow;
	exports.StructRow = row_1.StructRow;
	var fn = __webpack_require__(147);
	var enum_1 = __webpack_require__(69);
	var vector_2 = __webpack_require__(68);
	var chunked_2 = __webpack_require__(100);
	var base_2 = __webpack_require__(128);
	var bit_1 = __webpack_require__(73);
	var compat_1 = __webpack_require__(64);
	var builder_1 = __webpack_require__(67);
	var get_1 = __webpack_require__(148);
	var set_1 = __webpack_require__(107);
	var indexof_1 = __webpack_require__(149);
	var toarray_1 = __webpack_require__(150);
	var iterator_1 = __webpack_require__(151);
	var bytewidth_1 = __webpack_require__(152);
	var vectorctor_1 = __webpack_require__(153);
	/** @nocollapse */
	vector_2.Vector.new = newVector;
	/** @nocollapse */
	vector_2.Vector.from = vectorFrom;
	/** @ignore */
	function newVector(data) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	    }

	    return new (Function.prototype.bind.apply(vectorctor_1.instance.getVisitFn(data)(), [null].concat([data], args)))();
	}
	/** @ignore */
	function vectorFromValuesWithType(newDataType, input) {
	    if (compat_1.isIterable(input)) {
	        return vector_2.Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input });
	    } else if (compat_1.isAsyncIterable(input)) {
	        return vector_2.Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input });
	    }

	    var _input = _extends({}, input),
	        _input$values = _input['values'],
	        values = _input$values === undefined ? [] : _input$values,
	        _input$type = _input['type'],
	        type = _input$type === undefined ? newDataType() : _input$type,
	        _input$nullValues = _input['nullValues'],
	        nullValues = _input$nullValues === undefined ? [null, undefined] : _input$nullValues;

	    return compat_1.isIterable(values) ? vector_2.Vector.from(_extends({ nullValues: nullValues }, input, { type: type })) : vector_2.Vector.from(_extends({ nullValues: nullValues }, input, { type: type }));
	}
	exports.vectorFromValuesWithType = vectorFromValuesWithType;
	function vectorFrom(input) {
	    var _this = this;

	    var _nullValues$input = _extends({ 'nullValues': [null, undefined] }, input),
	        _nullValues$input$val = _nullValues$input['values'],
	        values = _nullValues$input$val === undefined ? [] : _nullValues$input$val,
	        options = _objectWithoutProperties(_nullValues$input, ['values']);

	    if (compat_1.isIterable(values)) {
	        var chunks = [].concat(_toConsumableArray(builder_1.Builder.throughIterable(options)(values)));
	        return chunks.length === 1 ? chunks[0] : chunked_2.Chunked.concat(chunks);
	    }
	    return function () {
	        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chunks) {
	            var transform, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;

	            return regeneratorRuntime.wrap(function _callee$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            transform = builder_1.Builder.throughAsyncIterable(options);
	                            _iteratorNormalCompletion = true;
	                            _didIteratorError = false;
	                            _iteratorError = undefined;
	                            _context.prev = 4;
	                            _iterator = _asyncIterator(transform(values));

	                        case 6:
	                            _context.next = 8;
	                            return _iterator.next();

	                        case 8:
	                            _step = _context.sent;
	                            _iteratorNormalCompletion = _step.done;
	                            _context.next = 12;
	                            return _step.value;

	                        case 12:
	                            _value = _context.sent;

	                            if (_iteratorNormalCompletion) {
	                                _context.next = 19;
	                                break;
	                            }

	                            chunk = _value;

	                            chunks.push(chunk);

	                        case 16:
	                            _iteratorNormalCompletion = true;
	                            _context.next = 6;
	                            break;

	                        case 19:
	                            _context.next = 25;
	                            break;

	                        case 21:
	                            _context.prev = 21;
	                            _context.t0 = _context["catch"](4);
	                            _didIteratorError = true;
	                            _iteratorError = _context.t0;

	                        case 25:
	                            _context.prev = 25;
	                            _context.prev = 26;

	                            if (!(!_iteratorNormalCompletion && _iterator.return)) {
	                                _context.next = 30;
	                                break;
	                            }

	                            _context.next = 30;
	                            return _iterator.return();

	                        case 30:
	                            _context.prev = 30;

	                            if (!_didIteratorError) {
	                                _context.next = 33;
	                                break;
	                            }

	                            throw _iteratorError;

	                        case 33:
	                            return _context.finish(30);

	                        case 34:
	                            return _context.finish(25);

	                        case 35:
	                            return _context.abrupt("return", chunks.length === 1 ? chunks[0] : chunked_2.Chunked.concat(chunks));

	                        case 36:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, _callee, _this, [[4, 21, 25, 35], [26,, 30, 34]]);
	        }));

	        return function (_x) {
	            return _ref.apply(this, arguments);
	        };
	    }()([]);
	}
	//
	// We provide the following method implementations for code navigability purposes only.
	// They're overridden at runtime below with the specific Visitor implementation for each type,
	// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.
	// This comment is here to remind you to not set breakpoints in these function bodies, or to inform
	// you why the breakpoints you have already set are not being triggered. Have a great day!
	//
	base_2.BaseVector.prototype.get = function baseVectorGet(index) {
	    return get_1.instance.visit(this, index);
	};
	base_2.BaseVector.prototype.set = function baseVectorSet(index, value) {
	    return set_1.instance.visit(this, index, value);
	};
	base_2.BaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {
	    return indexof_1.instance.visit(this, value, fromIndex);
	};
	base_2.BaseVector.prototype.toArray = function baseVectorToArray() {
	    return toarray_1.instance.visit(this);
	};
	base_2.BaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {
	    return bytewidth_1.instance.visit(this.type);
	};
	base_2.BaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {
	    return iterator_1.instance.visit(this);
	};
	base_2.BaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;
	// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type
	Object.keys(enum_1.Type).map(function (T) {
	    return enum_1.Type[T];
	}).filter(function (T) {
	    return typeof T === 'number';
	}).filter(function (typeId) {
	    return typeId !== enum_1.Type.NONE;
	}).forEach(function (typeId) {
	    var VectorCtor = vectorctor_1.instance.visit(typeId);
	    VectorCtor.prototype['get'] = fn.partial1(get_1.instance.getVisitFn(typeId));
	    VectorCtor.prototype['set'] = fn.partial2(set_1.instance.getVisitFn(typeId));
	    VectorCtor.prototype['indexOf'] = fn.partial2(indexof_1.instance.getVisitFn(typeId));
	    VectorCtor.prototype['toArray'] = fn.partial0(toarray_1.instance.getVisitFn(typeId));
	    VectorCtor.prototype['getByteWidth'] = partialType0(bytewidth_1.instance.getVisitFn(typeId));
	    VectorCtor.prototype[Symbol.iterator] = fn.partial0(iterator_1.instance.getVisitFn(typeId));
	});
	/** @ignore */
	function partialType0(visit) {
	    return function () {
	        return visit(this.type);
	    };
	}
	/** @ignore */
	function wrapNullableGet(fn) {
	    return function (i) {
	        return this.isValid(i) ? fn.call(this, i) : null;
	    };
	}
	/** @ignore */
	function wrapNullableSet(fn) {
	    return function (i, a) {
	        if (bit_1.setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {
	            fn.call(this, i, a);
	        }
	    };
	}
	/** @ignore */
	function bindBaseVectorDataAccessors() {
	    var nullBitmap = this.nullBitmap;
	    if (nullBitmap && nullBitmap.byteLength > 0) {
	        this.get = wrapNullableGet(this.get);
	        this.set = wrapNullableSet(this.set);
	    }
	}

	//# sourceMappingURL=index.js.map

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var enum_1 = __webpack_require__(69);
	var chunked_1 = __webpack_require__(100);
	var vector_1 = __webpack_require__(101);
	var vector_2 = __webpack_require__(68);
	/** @ignore */

	var BaseVector = function (_vector_2$AbstractVec) {
	    _inherits(BaseVector, _vector_2$AbstractVec);

	    function BaseVector(data, children) {
	        _classCallCheck(this, BaseVector);

	        var _this = _possibleConstructorReturn(this, (BaseVector.__proto__ || Object.getPrototypeOf(BaseVector)).call(this));

	        _this._children = children;
	        _this.numChildren = data.childData.length;
	        _this._bindDataAccessors(_this.data = data);
	        return _this;
	    }

	    _createClass(BaseVector, [{
	        key: "clone",
	        value: function clone(data) {
	            var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;

	            return vector_2.Vector.new(data, children);
	        }
	    }, {
	        key: "concat",
	        value: function concat() {
	            var _chunked_1$Chunked;

	            for (var _len = arguments.length, others = Array(_len), _key = 0; _key < _len; _key++) {
	                others[_key] = arguments[_key];
	            }

	            return (_chunked_1$Chunked = chunked_1.Chunked).concat.apply(_chunked_1$Chunked, [this].concat(others));
	        }
	    }, {
	        key: "slice",
	        value: function slice(begin, end) {
	            // Adjust args similar to Array.prototype.slice. Normalize begin/end to
	            // clamp between 0 and length, and wrap around on negative indices, e.g.
	            // slice(-1, 5) or slice(5, -1)
	            return vector_1.clampRange(this, begin, end, this._sliceInternal);
	        }
	    }, {
	        key: "isValid",
	        value: function isValid(index) {
	            if (this.nullCount > 0) {
	                var idx = this.offset + index;
	                var val = this.nullBitmap[idx >> 3];
	                var mask = val & 1 << idx % 8;
	                return mask !== 0;
	            }
	            return true;
	        }
	    }, {
	        key: "getChildAt",
	        value: function getChildAt(index) {
	            return index < 0 || index >= this.numChildren ? null : (this._children || (this._children = []))[index] || (this._children[index] = vector_2.Vector.new(this.data.childData[index]));
	        }
	    }, {
	        key: "toJSON",
	        value: function toJSON() {
	            return [].concat(_toConsumableArray(this));
	        }
	    }, {
	        key: "_sliceInternal",
	        value: function _sliceInternal(self, begin, end) {
	            return self.clone(self.data.slice(begin, end - begin), null);
	        }
	        // @ts-ignore

	    }, {
	        key: "_bindDataAccessors",
	        value: function _bindDataAccessors(data) {
	            // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans
	        }
	    }, {
	        key: "type",
	        get: function get() {
	            return this.data.type;
	        }
	    }, {
	        key: "typeId",
	        get: function get() {
	            return this.data.typeId;
	        }
	    }, {
	        key: "length",
	        get: function get() {
	            return this.data.length;
	        }
	    }, {
	        key: "offset",
	        get: function get() {
	            return this.data.offset;
	        }
	    }, {
	        key: "stride",
	        get: function get() {
	            return this.data.stride;
	        }
	    }, {
	        key: "nullCount",
	        get: function get() {
	            return this.data.nullCount;
	        }
	    }, {
	        key: "byteLength",
	        get: function get() {
	            return this.data.byteLength;
	        }
	    }, {
	        key: "VectorName",
	        get: function get() {
	            return enum_1.Type[this.typeId] + "Vector";
	        }
	    }, {
	        key: "ArrayType",
	        get: function get() {
	            return this.type.ArrayType;
	        }
	    }, {
	        key: "values",
	        get: function get() {
	            return this.data.values;
	        }
	    }, {
	        key: "typeIds",
	        get: function get() {
	            return this.data.typeIds;
	        }
	    }, {
	        key: "nullBitmap",
	        get: function get() {
	            return this.data.nullBitmap;
	        }
	    }, {
	        key: "valueOffsets",
	        get: function get() {
	            return this.data.valueOffsets;
	        }
	    }, {
	        key: Symbol.toStringTag,
	        get: function get() {
	            return this.VectorName + "<" + this.type[Symbol.toStringTag] + ">";
	        }
	    }]);

	    return BaseVector;
	}(vector_2.AbstractVector);

	exports.BaseVector = BaseVector;
	BaseVector.prototype[Symbol.isConcatSpreadable] = true;

	//# sourceMappingURL=base.js.map

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(68);
	var base_1 = __webpack_require__(128);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var BinaryVector = function (_base_1$BaseVector) {
	    _inherits(BinaryVector, _base_1$BaseVector);

	    function BinaryVector() {
	        _classCallCheck(this, BinaryVector);

	        return _possibleConstructorReturn(this, (BinaryVector.__proto__ || Object.getPrototypeOf(BinaryVector)).apply(this, arguments));
	    }

	    _createClass(BinaryVector, [{
	        key: "asUtf8",
	        value: function asUtf8() {
	            return vector_1.Vector.new(this.data.clone(new type_1.Utf8()));
	        }
	    }]);

	    return BinaryVector;
	}(base_1.BaseVector);

	exports.BinaryVector = BinaryVector;

	//# sourceMappingURL=binary.js.map

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var type_1 = __webpack_require__(74);
	var base_1 = __webpack_require__(128);
	var index_1 = __webpack_require__(127);
	/** @ignore */

	var BoolVector = function (_base_1$BaseVector) {
	    _inherits(BoolVector, _base_1$BaseVector);

	    function BoolVector() {
	        _classCallCheck(this, BoolVector);

	        return _possibleConstructorReturn(this, (BoolVector.__proto__ || Object.getPrototypeOf(BoolVector)).apply(this, arguments));
	    }

	    _createClass(BoolVector, null, [{
	        key: "from",

	        /** @nocollapse */
	        value: function from(input) {
	            return index_1.vectorFromValuesWithType(function () {
	                return new type_1.Bool();
	            }, input);
	        }
	    }]);

	    return BoolVector;
	}(base_1.BaseVector);

	exports.BoolVector = BoolVector;

	//# sourceMappingURL=bool.js.map

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var enum_1 = __webpack_require__(69);
	var base_1 = __webpack_require__(128);
	var index_1 = __webpack_require__(127);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var DateVector = function (_base_1$BaseVector) {
	    _inherits(DateVector, _base_1$BaseVector);

	    function DateVector() {
	        _classCallCheck(this, DateVector);

	        return _possibleConstructorReturn(this, (DateVector.__proto__ || Object.getPrototypeOf(DateVector)).apply(this, arguments));
	    }

	    _createClass(DateVector, null, [{
	        key: "from",

	        /** @nocollapse */
	        value: function from() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }

	            if (args.length === 2) {
	                return index_1.vectorFromValuesWithType(function () {
	                    return args[1] === enum_1.DateUnit.DAY ? new type_1.DateDay() : new type_1.DateMillisecond();
	                }, args[0]);
	            }
	            return index_1.vectorFromValuesWithType(function () {
	                return new type_1.DateMillisecond();
	            }, args[0]);
	        }
	    }]);

	    return DateVector;
	}(base_1.BaseVector);

	exports.DateVector = DateVector;
	/** @ignore */

	var DateDayVector = function (_DateVector) {
	    _inherits(DateDayVector, _DateVector);

	    function DateDayVector() {
	        _classCallCheck(this, DateDayVector);

	        return _possibleConstructorReturn(this, (DateDayVector.__proto__ || Object.getPrototypeOf(DateDayVector)).apply(this, arguments));
	    }

	    return DateDayVector;
	}(DateVector);

	exports.DateDayVector = DateDayVector;
	/** @ignore */

	var DateMillisecondVector = function (_DateVector2) {
	    _inherits(DateMillisecondVector, _DateVector2);

	    function DateMillisecondVector() {
	        _classCallCheck(this, DateMillisecondVector);

	        return _possibleConstructorReturn(this, (DateMillisecondVector.__proto__ || Object.getPrototypeOf(DateMillisecondVector)).apply(this, arguments));
	    }

	    return DateMillisecondVector;
	}(DateVector);

	exports.DateMillisecondVector = DateMillisecondVector;

	//# sourceMappingURL=date.js.map

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var DecimalVector = function (_base_1$BaseVector) {
	  _inherits(DecimalVector, _base_1$BaseVector);

	  function DecimalVector() {
	    _classCallCheck(this, DecimalVector);

	    return _possibleConstructorReturn(this, (DecimalVector.__proto__ || Object.getPrototypeOf(DecimalVector)).apply(this, arguments));
	  }

	  return DecimalVector;
	}(base_1.BaseVector);

	exports.DecimalVector = DecimalVector;

	//# sourceMappingURL=decimal.js.map

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(72);
	var vector_1 = __webpack_require__(68);
	var base_1 = __webpack_require__(128);
	var index_1 = __webpack_require__(127);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var DictionaryVector = function (_base_1$BaseVector) {
	    _inherits(DictionaryVector, _base_1$BaseVector);

	    function DictionaryVector(data) {
	        _classCallCheck(this, DictionaryVector);

	        var _this = _possibleConstructorReturn(this, (DictionaryVector.__proto__ || Object.getPrototypeOf(DictionaryVector)).call(this, data));

	        _this.indices = vector_1.Vector.new(data.clone(_this.type.indices));
	        return _this;
	    }
	    /** @nocollapse */


	    _createClass(DictionaryVector, [{
	        key: "reverseLookup",
	        value: function reverseLookup(value) {
	            return this.dictionary.indexOf(value);
	        }
	    }, {
	        key: "getKey",
	        value: function getKey(idx) {
	            return this.indices.get(idx);
	        }
	    }, {
	        key: "getValue",
	        value: function getValue(key) {
	            return this.dictionary.get(key);
	        }
	    }, {
	        key: "setKey",
	        value: function setKey(idx, key) {
	            return this.indices.set(idx, key);
	        }
	    }, {
	        key: "setValue",
	        value: function setValue(key, value) {
	            return this.dictionary.set(key, value);
	        }
	    }, {
	        key: "dictionary",
	        get: function get() {
	            return this.data.dictionary;
	        }
	    }], [{
	        key: "from",
	        value: function from() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }

	            if (args.length === 3) {
	                var values = args[0],
	                    indices = args[1],
	                    keys = args[2];

	                var type = new type_1.Dictionary(values.type, indices, null, null);
	                return vector_1.Vector.new(data_1.Data.Dictionary(type, 0, keys.length, 0, null, keys, values));
	            }
	            return index_1.vectorFromValuesWithType(function () {
	                return args[0].type;
	            }, args[0]);
	        }
	    }]);

	    return DictionaryVector;
	}(base_1.BaseVector);

	exports.DictionaryVector = DictionaryVector;
	DictionaryVector.prototype.indices = null;

	//# sourceMappingURL=dictionary.js.map

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var FixedSizeBinaryVector = function (_base_1$BaseVector) {
	  _inherits(FixedSizeBinaryVector, _base_1$BaseVector);

	  function FixedSizeBinaryVector() {
	    _classCallCheck(this, FixedSizeBinaryVector);

	    return _possibleConstructorReturn(this, (FixedSizeBinaryVector.__proto__ || Object.getPrototypeOf(FixedSizeBinaryVector)).apply(this, arguments));
	  }

	  return FixedSizeBinaryVector;
	}(base_1.BaseVector);

	exports.FixedSizeBinaryVector = FixedSizeBinaryVector;

	//# sourceMappingURL=fixedsizebinary.js.map

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var FixedSizeListVector = function (_base_1$BaseVector) {
	  _inherits(FixedSizeListVector, _base_1$BaseVector);

	  function FixedSizeListVector() {
	    _classCallCheck(this, FixedSizeListVector);

	    return _possibleConstructorReturn(this, (FixedSizeListVector.__proto__ || Object.getPrototypeOf(FixedSizeListVector)).apply(this, arguments));
	  }

	  return FixedSizeListVector;
	}(base_1.BaseVector);

	exports.FixedSizeListVector = FixedSizeListVector;

	//# sourceMappingURL=fixedsizelist.js.map

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(72);
	var vector_1 = __webpack_require__(68);
	var base_1 = __webpack_require__(128);
	var index_1 = __webpack_require__(127);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var FloatVector = function (_base_1$BaseVector) {
	    _inherits(FloatVector, _base_1$BaseVector);

	    function FloatVector() {
	        _classCallCheck(this, FloatVector);

	        return _possibleConstructorReturn(this, (FloatVector.__proto__ || Object.getPrototypeOf(FloatVector)).apply(this, arguments));
	    }

	    _createClass(FloatVector, null, [{
	        key: "from",

	        /** @nocollapse */
	        value: function from(input) {
	            var ArrowType = vectorTypeToDataType(this);
	            if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {
	                var InputType = arrayTypeToDataType(input.constructor) || ArrowType;
	                // Special case, infer the Arrow DataType from the input if calling the base
	                // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`
	                if (ArrowType === null) {
	                    ArrowType = InputType;
	                }
	                // If the DataType inferred from the Vector constructor matches the
	                // DataType inferred from the input arguments, return zero-copy view
	                if (ArrowType && ArrowType === InputType) {
	                    var type = new ArrowType();
	                    var length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;
	                    // If the ArrowType is Float16 but the input type isn't a Uint16Array,
	                    // let the Float16Builder handle casting the input values to Uint16s.
	                    if (!convertTo16Bit(ArrowType, input.constructor)) {
	                        return vector_1.Vector.new(data_1.Data.Float(type, 0, length, 0, null, input));
	                    }
	                }
	            }
	            if (ArrowType) {
	                // If the DataType inferred from the Vector constructor is different than
	                // the DataType inferred from the input TypedArray, or if input isn't a
	                // TypedArray, use the Builders to construct the result Vector
	                return index_1.vectorFromValuesWithType(function () {
	                    return new ArrowType();
	                }, input);
	            }
	            if (input instanceof DataView || input instanceof ArrayBuffer) {
	                throw new TypeError("Cannot infer float type from instance of " + input.constructor.name);
	            }
	            throw new TypeError('Unrecognized FloatVector input');
	        }
	    }]);

	    return FloatVector;
	}(base_1.BaseVector);

	exports.FloatVector = FloatVector;
	/** @ignore */

	var Float16Vector = function (_FloatVector) {
	    _inherits(Float16Vector, _FloatVector);

	    function Float16Vector() {
	        _classCallCheck(this, Float16Vector);

	        return _possibleConstructorReturn(this, (Float16Vector.__proto__ || Object.getPrototypeOf(Float16Vector)).apply(this, arguments));
	    }

	    _createClass(Float16Vector, [{
	        key: "toFloat32Array",

	        // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice
	        // of the underlying Uint16Array data. This behavior ensures we don't incur
	        // extra compute or copies if you're calling `toArray()` in order to create
	        // a buffer for something like WebGL. Buf if you're using JS and want typed
	        // arrays of 4-to-8-byte precision, these methods will enumerate the values
	        // and clamp to the desired byte lengths.
	        value: function toFloat32Array() {
	            return new Float32Array(this);
	        }
	    }, {
	        key: "toFloat64Array",
	        value: function toFloat64Array() {
	            return new Float64Array(this);
	        }
	    }]);

	    return Float16Vector;
	}(FloatVector);

	exports.Float16Vector = Float16Vector;
	/** @ignore */

	var Float32Vector = function (_FloatVector2) {
	    _inherits(Float32Vector, _FloatVector2);

	    function Float32Vector() {
	        _classCallCheck(this, Float32Vector);

	        return _possibleConstructorReturn(this, (Float32Vector.__proto__ || Object.getPrototypeOf(Float32Vector)).apply(this, arguments));
	    }

	    return Float32Vector;
	}(FloatVector);

	exports.Float32Vector = Float32Vector;
	/** @ignore */

	var Float64Vector = function (_FloatVector3) {
	    _inherits(Float64Vector, _FloatVector3);

	    function Float64Vector() {
	        _classCallCheck(this, Float64Vector);

	        return _possibleConstructorReturn(this, (Float64Vector.__proto__ || Object.getPrototypeOf(Float64Vector)).apply(this, arguments));
	    }

	    return Float64Vector;
	}(FloatVector);

	exports.Float64Vector = Float64Vector;
	var convertTo16Bit = function convertTo16Bit(typeCtor, dataCtor) {
	    return typeCtor === type_1.Float16 && dataCtor !== Uint16Array;
	};
	/** @ignore */
	var arrayTypeToDataType = function arrayTypeToDataType(ctor) {
	    switch (ctor) {
	        case Uint16Array:
	            return type_1.Float16;
	        case Float32Array:
	            return type_1.Float32;
	        case Float64Array:
	            return type_1.Float64;
	        default:
	            return null;
	    }
	};
	/** @ignore */
	var vectorTypeToDataType = function vectorTypeToDataType(ctor) {
	    switch (ctor) {
	        case Float16Vector:
	            return type_1.Float16;
	        case Float32Vector:
	            return type_1.Float32;
	        case Float64Vector:
	            return type_1.Float64;
	        default:
	            return null;
	    }
	};

	//# sourceMappingURL=float.js.map

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var IntervalVector = function (_base_1$BaseVector) {
	  _inherits(IntervalVector, _base_1$BaseVector);

	  function IntervalVector() {
	    _classCallCheck(this, IntervalVector);

	    return _possibleConstructorReturn(this, (IntervalVector.__proto__ || Object.getPrototypeOf(IntervalVector)).apply(this, arguments));
	  }

	  return IntervalVector;
	}(base_1.BaseVector);

	exports.IntervalVector = IntervalVector;
	/** @ignore */

	var IntervalDayTimeVector = function (_IntervalVector) {
	  _inherits(IntervalDayTimeVector, _IntervalVector);

	  function IntervalDayTimeVector() {
	    _classCallCheck(this, IntervalDayTimeVector);

	    return _possibleConstructorReturn(this, (IntervalDayTimeVector.__proto__ || Object.getPrototypeOf(IntervalDayTimeVector)).apply(this, arguments));
	  }

	  return IntervalDayTimeVector;
	}(IntervalVector);

	exports.IntervalDayTimeVector = IntervalDayTimeVector;
	/** @ignore */

	var IntervalYearMonthVector = function (_IntervalVector2) {
	  _inherits(IntervalYearMonthVector, _IntervalVector2);

	  function IntervalYearMonthVector() {
	    _classCallCheck(this, IntervalYearMonthVector);

	    return _possibleConstructorReturn(this, (IntervalYearMonthVector.__proto__ || Object.getPrototypeOf(IntervalYearMonthVector)).apply(this, arguments));
	  }

	  return IntervalYearMonthVector;
	}(IntervalVector);

	exports.IntervalYearMonthVector = IntervalYearMonthVector;

	//# sourceMappingURL=interval.js.map

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(72);
	var vector_1 = __webpack_require__(68);
	var base_1 = __webpack_require__(128);
	var index_1 = __webpack_require__(127);
	var compat_1 = __webpack_require__(64);
	var buffer_1 = __webpack_require__(60);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var IntVector = function (_base_1$BaseVector) {
	    _inherits(IntVector, _base_1$BaseVector);

	    function IntVector() {
	        _classCallCheck(this, IntVector);

	        return _possibleConstructorReturn(this, (IntVector.__proto__ || Object.getPrototypeOf(IntVector)).apply(this, arguments));
	    }

	    _createClass(IntVector, null, [{
	        key: "from",

	        /** @nocollapse */
	        value: function from() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }

	            var input = args[0],
	                _args$ = args[1],
	                is64bit = _args$ === undefined ? false : _args$;

	            var ArrowType = vectorTypeToDataType(this, is64bit);
	            if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {
	                var InputType = arrayTypeToDataType(input.constructor, is64bit) || ArrowType;
	                // Special case, infer the Arrow DataType from the input if calling the base
	                // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`
	                if (ArrowType === null) {
	                    ArrowType = InputType;
	                }
	                // If the DataType inferred from the Vector constructor matches the
	                // DataType inferred from the input arguments, return zero-copy view
	                if (ArrowType && ArrowType === InputType) {
	                    var type = new ArrowType();
	                    var length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;
	                    // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length
	                    if (convert32To64Bit(ArrowType, input.constructor)) {
	                        length *= 0.5;
	                    }
	                    return vector_1.Vector.new(data_1.Data.Int(type, 0, length, 0, null, input));
	                }
	            }
	            if (ArrowType) {
	                // If the DataType inferred from the Vector constructor is different than
	                // the DataType inferred from the input TypedArray, or if input isn't a
	                // TypedArray, use the Builders to construct the result Vector
	                return index_1.vectorFromValuesWithType(function () {
	                    return new ArrowType();
	                }, input);
	            }
	            if (input instanceof DataView || input instanceof ArrayBuffer) {
	                throw new TypeError("Cannot infer integer type from instance of " + input.constructor.name);
	            }
	            throw new TypeError('Unrecognized IntVector input');
	        }
	    }]);

	    return IntVector;
	}(base_1.BaseVector);

	exports.IntVector = IntVector;
	/** @ignore */

	var Int8Vector = function (_IntVector) {
	    _inherits(Int8Vector, _IntVector);

	    function Int8Vector() {
	        _classCallCheck(this, Int8Vector);

	        return _possibleConstructorReturn(this, (Int8Vector.__proto__ || Object.getPrototypeOf(Int8Vector)).apply(this, arguments));
	    }

	    return Int8Vector;
	}(IntVector);

	exports.Int8Vector = Int8Vector;
	/** @ignore */

	var Int16Vector = function (_IntVector2) {
	    _inherits(Int16Vector, _IntVector2);

	    function Int16Vector() {
	        _classCallCheck(this, Int16Vector);

	        return _possibleConstructorReturn(this, (Int16Vector.__proto__ || Object.getPrototypeOf(Int16Vector)).apply(this, arguments));
	    }

	    return Int16Vector;
	}(IntVector);

	exports.Int16Vector = Int16Vector;
	/** @ignore */

	var Int32Vector = function (_IntVector3) {
	    _inherits(Int32Vector, _IntVector3);

	    function Int32Vector() {
	        _classCallCheck(this, Int32Vector);

	        return _possibleConstructorReturn(this, (Int32Vector.__proto__ || Object.getPrototypeOf(Int32Vector)).apply(this, arguments));
	    }

	    return Int32Vector;
	}(IntVector);

	exports.Int32Vector = Int32Vector;
	/** @ignore */

	var Int64Vector = function (_IntVector4) {
	    _inherits(Int64Vector, _IntVector4);

	    function Int64Vector() {
	        _classCallCheck(this, Int64Vector);

	        return _possibleConstructorReturn(this, (Int64Vector.__proto__ || Object.getPrototypeOf(Int64Vector)).apply(this, arguments));
	    }

	    _createClass(Int64Vector, [{
	        key: "toBigInt64Array",
	        value: function toBigInt64Array() {
	            return buffer_1.toBigInt64Array(this.values);
	        }
	    }, {
	        key: "values64",
	        get: function get() {
	            return this._values64 || (this._values64 = this.toBigInt64Array());
	        }
	    }]);

	    return Int64Vector;
	}(IntVector);

	exports.Int64Vector = Int64Vector;
	/** @ignore */

	var Uint8Vector = function (_IntVector5) {
	    _inherits(Uint8Vector, _IntVector5);

	    function Uint8Vector() {
	        _classCallCheck(this, Uint8Vector);

	        return _possibleConstructorReturn(this, (Uint8Vector.__proto__ || Object.getPrototypeOf(Uint8Vector)).apply(this, arguments));
	    }

	    return Uint8Vector;
	}(IntVector);

	exports.Uint8Vector = Uint8Vector;
	/** @ignore */

	var Uint16Vector = function (_IntVector6) {
	    _inherits(Uint16Vector, _IntVector6);

	    function Uint16Vector() {
	        _classCallCheck(this, Uint16Vector);

	        return _possibleConstructorReturn(this, (Uint16Vector.__proto__ || Object.getPrototypeOf(Uint16Vector)).apply(this, arguments));
	    }

	    return Uint16Vector;
	}(IntVector);

	exports.Uint16Vector = Uint16Vector;
	/** @ignore */

	var Uint32Vector = function (_IntVector7) {
	    _inherits(Uint32Vector, _IntVector7);

	    function Uint32Vector() {
	        _classCallCheck(this, Uint32Vector);

	        return _possibleConstructorReturn(this, (Uint32Vector.__proto__ || Object.getPrototypeOf(Uint32Vector)).apply(this, arguments));
	    }

	    return Uint32Vector;
	}(IntVector);

	exports.Uint32Vector = Uint32Vector;
	/** @ignore */

	var Uint64Vector = function (_IntVector8) {
	    _inherits(Uint64Vector, _IntVector8);

	    function Uint64Vector() {
	        _classCallCheck(this, Uint64Vector);

	        return _possibleConstructorReturn(this, (Uint64Vector.__proto__ || Object.getPrototypeOf(Uint64Vector)).apply(this, arguments));
	    }

	    _createClass(Uint64Vector, [{
	        key: "toBigUint64Array",
	        value: function toBigUint64Array() {
	            return buffer_1.toBigUint64Array(this.values);
	        }
	    }, {
	        key: "values64",
	        get: function get() {
	            return this._values64 || (this._values64 = this.toBigUint64Array());
	        }
	    }]);

	    return Uint64Vector;
	}(IntVector);

	exports.Uint64Vector = Uint64Vector;
	var convert32To64Bit = function convert32To64Bit(typeCtor, dataCtor) {
	    return (typeCtor === type_1.Int64 || typeCtor === type_1.Uint64) && (dataCtor === Int32Array || dataCtor === Uint32Array);
	};
	/** @ignore */
	var arrayTypeToDataType = function arrayTypeToDataType(ctor, is64bit) {
	    switch (ctor) {
	        case Int8Array:
	            return type_1.Int8;
	        case Int16Array:
	            return type_1.Int16;
	        case Int32Array:
	            return is64bit ? type_1.Int64 : type_1.Int32;
	        case compat_1.BigInt64Array:
	            return type_1.Int64;
	        case Uint8Array:
	            return type_1.Uint8;
	        case Uint16Array:
	            return type_1.Uint16;
	        case Uint32Array:
	            return is64bit ? type_1.Uint64 : type_1.Uint32;
	        case compat_1.BigUint64Array:
	            return type_1.Uint64;
	        default:
	            return null;
	    }
	};
	/** @ignore */
	var vectorTypeToDataType = function vectorTypeToDataType(ctor, is64bit) {
	    switch (ctor) {
	        case Int8Vector:
	            return type_1.Int8;
	        case Int16Vector:
	            return type_1.Int16;
	        case Int32Vector:
	            return is64bit ? type_1.Int64 : type_1.Int32;
	        case Int64Vector:
	            return type_1.Int64;
	        case Uint8Vector:
	            return type_1.Uint8;
	        case Uint16Vector:
	            return type_1.Uint16;
	        case Uint32Vector:
	            return is64bit ? type_1.Uint64 : type_1.Uint32;
	        case Uint64Vector:
	            return type_1.Uint64;
	        default:
	            return null;
	    }
	};

	//# sourceMappingURL=int.js.map

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var ListVector = function (_base_1$BaseVector) {
	  _inherits(ListVector, _base_1$BaseVector);

	  function ListVector() {
	    _classCallCheck(this, ListVector);

	    return _possibleConstructorReturn(this, (ListVector.__proto__ || Object.getPrototypeOf(ListVector)).apply(this, arguments));
	  }

	  return ListVector;
	}(base_1.BaseVector);

	exports.ListVector = ListVector;

	//# sourceMappingURL=list.js.map

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var row_1 = __webpack_require__(102);
	var vector_1 = __webpack_require__(68);
	var base_1 = __webpack_require__(128);
	var type_1 = __webpack_require__(74);
	/** @ignore */

	var MapVector = function (_base_1$BaseVector) {
	    _inherits(MapVector, _base_1$BaseVector);

	    function MapVector() {
	        _classCallCheck(this, MapVector);

	        return _possibleConstructorReturn(this, (MapVector.__proto__ || Object.getPrototypeOf(MapVector)).apply(this, arguments));
	    }

	    _createClass(MapVector, [{
	        key: "asList",
	        value: function asList() {
	            var child = this.type.children[0];
	            return vector_1.Vector.new(this.data.clone(new type_1.List(child)));
	        }
	    }, {
	        key: "bind",
	        value: function bind(index) {
	            var child = this.getChildAt(0);
	            var _valueOffsets = this.valueOffsets,
	                begin = _valueOffsets[index],
	                end = _valueOffsets[index + 1];

	            return new row_1.MapRow(child.slice(begin, end));
	        }
	    }]);

	    return MapVector;
	}(base_1.BaseVector);

	exports.MapVector = MapVector;

	//# sourceMappingURL=map.js.map

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var NullVector = function (_base_1$BaseVector) {
	  _inherits(NullVector, _base_1$BaseVector);

	  function NullVector() {
	    _classCallCheck(this, NullVector);

	    return _possibleConstructorReturn(this, (NullVector.__proto__ || Object.getPrototypeOf(NullVector)).apply(this, arguments));
	  }

	  return NullVector;
	}(base_1.BaseVector);

	exports.NullVector = NullVector;

	//# sourceMappingURL=null.js.map

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var row_1 = __webpack_require__(102);
	var base_1 = __webpack_require__(128);
	/** @ignore */var kRowIndex = Symbol.for('rowIndex');
	/** @ignore */

	var StructVector = function (_base_1$BaseVector) {
	    _inherits(StructVector, _base_1$BaseVector);

	    function StructVector() {
	        _classCallCheck(this, StructVector);

	        return _possibleConstructorReturn(this, (StructVector.__proto__ || Object.getPrototypeOf(StructVector)).apply(this, arguments));
	    }

	    _createClass(StructVector, [{
	        key: "bind",
	        value: function bind(index) {
	            var proto = this._row || (this._row = new row_1.StructRow(this));
	            var bound = Object.create(proto);
	            bound[kRowIndex] = index;
	            return bound;
	        }
	    }]);

	    return StructVector;
	}(base_1.BaseVector);

	exports.StructVector = StructVector;

	//# sourceMappingURL=struct.js.map

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var TimestampVector = function (_base_1$BaseVector) {
	  _inherits(TimestampVector, _base_1$BaseVector);

	  function TimestampVector() {
	    _classCallCheck(this, TimestampVector);

	    return _possibleConstructorReturn(this, (TimestampVector.__proto__ || Object.getPrototypeOf(TimestampVector)).apply(this, arguments));
	  }

	  return TimestampVector;
	}(base_1.BaseVector);

	exports.TimestampVector = TimestampVector;
	/** @ignore */

	var TimestampSecondVector = function (_TimestampVector) {
	  _inherits(TimestampSecondVector, _TimestampVector);

	  function TimestampSecondVector() {
	    _classCallCheck(this, TimestampSecondVector);

	    return _possibleConstructorReturn(this, (TimestampSecondVector.__proto__ || Object.getPrototypeOf(TimestampSecondVector)).apply(this, arguments));
	  }

	  return TimestampSecondVector;
	}(TimestampVector);

	exports.TimestampSecondVector = TimestampSecondVector;
	/** @ignore */

	var TimestampMillisecondVector = function (_TimestampVector2) {
	  _inherits(TimestampMillisecondVector, _TimestampVector2);

	  function TimestampMillisecondVector() {
	    _classCallCheck(this, TimestampMillisecondVector);

	    return _possibleConstructorReturn(this, (TimestampMillisecondVector.__proto__ || Object.getPrototypeOf(TimestampMillisecondVector)).apply(this, arguments));
	  }

	  return TimestampMillisecondVector;
	}(TimestampVector);

	exports.TimestampMillisecondVector = TimestampMillisecondVector;
	/** @ignore */

	var TimestampMicrosecondVector = function (_TimestampVector3) {
	  _inherits(TimestampMicrosecondVector, _TimestampVector3);

	  function TimestampMicrosecondVector() {
	    _classCallCheck(this, TimestampMicrosecondVector);

	    return _possibleConstructorReturn(this, (TimestampMicrosecondVector.__proto__ || Object.getPrototypeOf(TimestampMicrosecondVector)).apply(this, arguments));
	  }

	  return TimestampMicrosecondVector;
	}(TimestampVector);

	exports.TimestampMicrosecondVector = TimestampMicrosecondVector;
	/** @ignore */

	var TimestampNanosecondVector = function (_TimestampVector4) {
	  _inherits(TimestampNanosecondVector, _TimestampVector4);

	  function TimestampNanosecondVector() {
	    _classCallCheck(this, TimestampNanosecondVector);

	    return _possibleConstructorReturn(this, (TimestampNanosecondVector.__proto__ || Object.getPrototypeOf(TimestampNanosecondVector)).apply(this, arguments));
	  }

	  return TimestampNanosecondVector;
	}(TimestampVector);

	exports.TimestampNanosecondVector = TimestampNanosecondVector;

	//# sourceMappingURL=timestamp.js.map

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var TimeVector = function (_base_1$BaseVector) {
	  _inherits(TimeVector, _base_1$BaseVector);

	  function TimeVector() {
	    _classCallCheck(this, TimeVector);

	    return _possibleConstructorReturn(this, (TimeVector.__proto__ || Object.getPrototypeOf(TimeVector)).apply(this, arguments));
	  }

	  return TimeVector;
	}(base_1.BaseVector);

	exports.TimeVector = TimeVector;
	/** @ignore */

	var TimeSecondVector = function (_TimeVector) {
	  _inherits(TimeSecondVector, _TimeVector);

	  function TimeSecondVector() {
	    _classCallCheck(this, TimeSecondVector);

	    return _possibleConstructorReturn(this, (TimeSecondVector.__proto__ || Object.getPrototypeOf(TimeSecondVector)).apply(this, arguments));
	  }

	  return TimeSecondVector;
	}(TimeVector);

	exports.TimeSecondVector = TimeSecondVector;
	/** @ignore */

	var TimeMillisecondVector = function (_TimeVector2) {
	  _inherits(TimeMillisecondVector, _TimeVector2);

	  function TimeMillisecondVector() {
	    _classCallCheck(this, TimeMillisecondVector);

	    return _possibleConstructorReturn(this, (TimeMillisecondVector.__proto__ || Object.getPrototypeOf(TimeMillisecondVector)).apply(this, arguments));
	  }

	  return TimeMillisecondVector;
	}(TimeVector);

	exports.TimeMillisecondVector = TimeMillisecondVector;
	/** @ignore */

	var TimeMicrosecondVector = function (_TimeVector3) {
	  _inherits(TimeMicrosecondVector, _TimeVector3);

	  function TimeMicrosecondVector() {
	    _classCallCheck(this, TimeMicrosecondVector);

	    return _possibleConstructorReturn(this, (TimeMicrosecondVector.__proto__ || Object.getPrototypeOf(TimeMicrosecondVector)).apply(this, arguments));
	  }

	  return TimeMicrosecondVector;
	}(TimeVector);

	exports.TimeMicrosecondVector = TimeMicrosecondVector;
	/** @ignore */

	var TimeNanosecondVector = function (_TimeVector4) {
	  _inherits(TimeNanosecondVector, _TimeVector4);

	  function TimeNanosecondVector() {
	    _classCallCheck(this, TimeNanosecondVector);

	    return _possibleConstructorReturn(this, (TimeNanosecondVector.__proto__ || Object.getPrototypeOf(TimeNanosecondVector)).apply(this, arguments));
	  }

	  return TimeNanosecondVector;
	}(TimeVector);

	exports.TimeNanosecondVector = TimeNanosecondVector;

	//# sourceMappingURL=time.js.map

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var base_1 = __webpack_require__(128);
	/** @ignore */

	var UnionVector = function (_base_1$BaseVector) {
	    _inherits(UnionVector, _base_1$BaseVector);

	    function UnionVector() {
	        _classCallCheck(this, UnionVector);

	        return _possibleConstructorReturn(this, (UnionVector.__proto__ || Object.getPrototypeOf(UnionVector)).apply(this, arguments));
	    }

	    _createClass(UnionVector, [{
	        key: "typeIdToChildIndex",
	        get: function get() {
	            return this.data.type.typeIdToChildIndex;
	        }
	    }]);

	    return UnionVector;
	}(base_1.BaseVector);

	exports.UnionVector = UnionVector;
	/** @ignore */

	var DenseUnionVector = function (_UnionVector) {
	    _inherits(DenseUnionVector, _UnionVector);

	    function DenseUnionVector() {
	        _classCallCheck(this, DenseUnionVector);

	        return _possibleConstructorReturn(this, (DenseUnionVector.__proto__ || Object.getPrototypeOf(DenseUnionVector)).apply(this, arguments));
	    }

	    _createClass(DenseUnionVector, [{
	        key: "valueOffsets",
	        get: function get() {
	            return this.data.valueOffsets;
	        }
	    }]);

	    return DenseUnionVector;
	}(UnionVector);

	exports.DenseUnionVector = DenseUnionVector;
	/** @ignore */

	var SparseUnionVector = function (_UnionVector2) {
	    _inherits(SparseUnionVector, _UnionVector2);

	    function SparseUnionVector() {
	        _classCallCheck(this, SparseUnionVector);

	        return _possibleConstructorReturn(this, (SparseUnionVector.__proto__ || Object.getPrototypeOf(SparseUnionVector)).apply(this, arguments));
	    }

	    return SparseUnionVector;
	}(UnionVector);

	exports.SparseUnionVector = SparseUnionVector;

	//# sourceMappingURL=union.js.map

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var vector_1 = __webpack_require__(68);
	var base_1 = __webpack_require__(128);
	var type_1 = __webpack_require__(74);
	var index_1 = __webpack_require__(127);
	/** @ignore */

	var Utf8Vector = function (_base_1$BaseVector) {
	    _inherits(Utf8Vector, _base_1$BaseVector);

	    function Utf8Vector() {
	        _classCallCheck(this, Utf8Vector);

	        return _possibleConstructorReturn(this, (Utf8Vector.__proto__ || Object.getPrototypeOf(Utf8Vector)).apply(this, arguments));
	    }

	    _createClass(Utf8Vector, [{
	        key: "asBinary",
	        value: function asBinary() {
	            return vector_1.Vector.new(this.data.clone(new type_1.Binary()));
	        }
	    }], [{
	        key: "from",

	        /** @nocollapse */
	        value: function from(input) {
	            return index_1.vectorFromValuesWithType(function () {
	                return new type_1.Utf8();
	            }, input);
	        }
	    }]);

	    return Utf8Vector;
	}(base_1.BaseVector);

	exports.Utf8Vector = Utf8Vector;

	//# sourceMappingURL=utf8.js.map

/***/ }),
/* 147 */
/***/ (function(module, exports) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	Object.defineProperty(exports, "__esModule", { value: true });
	/** @ignore */
	function partial0(visit) {
	    return function () {
	        return visit(this);
	    };
	}
	exports.partial0 = partial0;
	/** @ignore */
	function partial1(visit) {
	    return function (a) {
	        return visit(this, a);
	    };
	}
	exports.partial1 = partial1;
	/** @ignore */
	function partial2(visit) {
	    return function (a, b) {
	        return visit(this, a, b);
	    };
	}
	exports.partial2 = partial2;

	//# sourceMappingURL=fn.js.map

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var bn_1 = __webpack_require__(89);
	var visitor_1 = __webpack_require__(76);
	var utf8_1 = __webpack_require__(62);
	var math_1 = __webpack_require__(87);
	var enum_1 = __webpack_require__(69);
	/** @ignore */

	var GetVisitor = function (_visitor_1$Visitor) {
	    _inherits(GetVisitor, _visitor_1$Visitor);

	    function GetVisitor() {
	        _classCallCheck(this, GetVisitor);

	        return _possibleConstructorReturn(this, (GetVisitor.__proto__ || Object.getPrototypeOf(GetVisitor)).apply(this, arguments));
	    }

	    return GetVisitor;
	}(visitor_1.Visitor);

	exports.GetVisitor = GetVisitor;
	/** @ignore */var epochDaysToMs = function epochDaysToMs(data, index) {
	    return 86400000 * data[index];
	};
	/** @ignore */var epochMillisecondsLongToMs = function epochMillisecondsLongToMs(data, index) {
	    return 4294967296 * data[index + 1] + (data[index] >>> 0);
	};
	/** @ignore */var epochMicrosecondsLongToMs = function epochMicrosecondsLongToMs(data, index) {
	    return 4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;
	};
	/** @ignore */var epochNanosecondsLongToMs = function epochNanosecondsLongToMs(data, index) {
	    return 4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;
	};
	/** @ignore */var epochMillisecondsToDate = function epochMillisecondsToDate(epochMs) {
	    return new Date(epochMs);
	};
	/** @ignore */var epochDaysToDate = function epochDaysToDate(data, index) {
	    return epochMillisecondsToDate(epochDaysToMs(data, index));
	};
	/** @ignore */var epochMillisecondsLongToDate = function epochMillisecondsLongToDate(data, index) {
	    return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));
	};
	/** @ignore */
	var getNull = function getNull(_vector, _index) {
	    return null;
	};
	/** @ignore */
	var getVariableWidthBytes = function getVariableWidthBytes(values, valueOffsets, index) {
	    var x = valueOffsets[index],
	        y = valueOffsets[index + 1];

	    return x != null && y != null ? values.subarray(x, y) : null;
	};
	/** @ignore */
	var getBool = function getBool(_ref, index) {
	    var offset = _ref.offset,
	        values = _ref.values;

	    var idx = offset + index;
	    var byte = values[idx >> 3];
	    return (byte & 1 << idx % 8) !== 0;
	};
	/** @ignore */
	var getDateDay = function getDateDay(_ref2, index) {
	    var values = _ref2.values;
	    return epochDaysToDate(values, index);
	};
	/** @ignore */
	var getDateMillisecond = function getDateMillisecond(_ref3, index) {
	    var values = _ref3.values;
	    return epochMillisecondsLongToDate(values, index * 2);
	};
	/** @ignore */
	var getNumeric = function getNumeric(_ref4, index) {
	    var stride = _ref4.stride,
	        values = _ref4.values;
	    return values[stride * index];
	};
	/** @ignore */
	var getFloat16 = function getFloat16(_ref5, index) {
	    var stride = _ref5.stride,
	        values = _ref5.values;
	    return math_1.uint16ToFloat64(values[stride * index]);
	};
	/** @ignore */
	var getBigInts = function getBigInts(_ref6, index) {
	    var stride = _ref6.stride,
	        values = _ref6.values,
	        type = _ref6.type;
	    return bn_1.BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);
	};
	/** @ignore */
	var getFixedSizeBinary = function getFixedSizeBinary(_ref7, index) {
	    var stride = _ref7.stride,
	        values = _ref7.values;
	    return values.subarray(stride * index, stride * (index + 1));
	};
	/** @ignore */
	var getBinary = function getBinary(_ref8, index) {
	    var values = _ref8.values,
	        valueOffsets = _ref8.valueOffsets;
	    return getVariableWidthBytes(values, valueOffsets, index);
	};
	/** @ignore */
	var getUtf8 = function getUtf8(_ref9, index) {
	    var values = _ref9.values,
	        valueOffsets = _ref9.valueOffsets;

	    var bytes = getVariableWidthBytes(values, valueOffsets, index);
	    return bytes !== null ? utf8_1.decodeUtf8(bytes) : null;
	};
	/* istanbul ignore next */
	/** @ignore */
	var getInt = function getInt(vector, index) {
	    return vector.type.bitWidth < 64 ? getNumeric(vector, index) : getBigInts(vector, index);
	};
	/* istanbul ignore next */
	/** @ignore */
	var getFloat = function getFloat(vector, index) {
	    return vector.type.precision !== enum_1.Precision.HALF ? getNumeric(vector, index) : getFloat16(vector, index);
	};
	/* istanbul ignore next */
	/** @ignore */
	var getDate = function getDate(vector, index) {
	    return vector.type.unit === enum_1.DateUnit.DAY ? getDateDay(vector, index) : getDateMillisecond(vector, index);
	};
	/** @ignore */
	var getTimestampSecond = function getTimestampSecond(_ref10, index) {
	    var values = _ref10.values;
	    return 1000 * epochMillisecondsLongToMs(values, index * 2);
	};
	/** @ignore */
	var getTimestampMillisecond = function getTimestampMillisecond(_ref11, index) {
	    var values = _ref11.values;
	    return epochMillisecondsLongToMs(values, index * 2);
	};
	/** @ignore */
	var getTimestampMicrosecond = function getTimestampMicrosecond(_ref12, index) {
	    var values = _ref12.values;
	    return epochMicrosecondsLongToMs(values, index * 2);
	};
	/** @ignore */
	var getTimestampNanosecond = function getTimestampNanosecond(_ref13, index) {
	    var values = _ref13.values;
	    return epochNanosecondsLongToMs(values, index * 2);
	};
	/* istanbul ignore next */
	/** @ignore */
	var getTimestamp = function getTimestamp(vector, index) {
	    switch (vector.type.unit) {
	        case enum_1.TimeUnit.SECOND:
	            return getTimestampSecond(vector, index);
	        case enum_1.TimeUnit.MILLISECOND:
	            return getTimestampMillisecond(vector, index);
	        case enum_1.TimeUnit.MICROSECOND:
	            return getTimestampMicrosecond(vector, index);
	        case enum_1.TimeUnit.NANOSECOND:
	            return getTimestampNanosecond(vector, index);
	    }
	};
	/** @ignore */
	var getTimeSecond = function getTimeSecond(_ref14, index) {
	    var values = _ref14.values,
	        stride = _ref14.stride;
	    return values[stride * index];
	};
	/** @ignore */
	var getTimeMillisecond = function getTimeMillisecond(_ref15, index) {
	    var values = _ref15.values,
	        stride = _ref15.stride;
	    return values[stride * index];
	};
	/** @ignore */
	var getTimeMicrosecond = function getTimeMicrosecond(_ref16, index) {
	    var values = _ref16.values;
	    return bn_1.BN.signed(values.subarray(2 * index, 2 * (index + 1)));
	};
	/** @ignore */
	var getTimeNanosecond = function getTimeNanosecond(_ref17, index) {
	    var values = _ref17.values;
	    return bn_1.BN.signed(values.subarray(2 * index, 2 * (index + 1)));
	};
	/* istanbul ignore next */
	/** @ignore */
	var getTime = function getTime(vector, index) {
	    switch (vector.type.unit) {
	        case enum_1.TimeUnit.SECOND:
	            return getTimeSecond(vector, index);
	        case enum_1.TimeUnit.MILLISECOND:
	            return getTimeMillisecond(vector, index);
	        case enum_1.TimeUnit.MICROSECOND:
	            return getTimeMicrosecond(vector, index);
	        case enum_1.TimeUnit.NANOSECOND:
	            return getTimeNanosecond(vector, index);
	    }
	};
	/** @ignore */
	var getDecimal = function getDecimal(_ref18, index) {
	    var values = _ref18.values;
	    return bn_1.BN.decimal(values.subarray(4 * index, 4 * (index + 1)));
	};
	/** @ignore */
	var getList = function getList(vector, index) {
	    var child = vector.getChildAt(0),
	        valueOffsets = vector.valueOffsets,
	        stride = vector.stride;
	    return child.slice(valueOffsets[index * stride], valueOffsets[index * stride + 1]);
	};
	/** @ignore */
	var getMap = function getMap(vector, index) {
	    return vector.bind(index);
	};
	/** @ignore */
	var getStruct = function getStruct(vector, index) {
	    return vector.bind(index);
	};
	/* istanbul ignore next */
	/** @ignore */
	var getUnion = function getUnion(vector, index) {
	    return vector.type.mode === enum_1.UnionMode.Dense ? getDenseUnion(vector, index) : getSparseUnion(vector, index);
	};
	/** @ignore */
	var getDenseUnion = function getDenseUnion(vector, index) {
	    var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];
	    var child = vector.getChildAt(childIndex);
	    return child ? child.get(vector.valueOffsets[index]) : null;
	};
	/** @ignore */
	var getSparseUnion = function getSparseUnion(vector, index) {
	    var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];
	    var child = vector.getChildAt(childIndex);
	    return child ? child.get(index) : null;
	};
	/** @ignore */
	var getDictionary = function getDictionary(vector, index) {
	    return vector.getValue(vector.getKey(index));
	};
	/* istanbul ignore next */
	/** @ignore */
	var getInterval = function getInterval(vector, index) {
	    return vector.type.unit === enum_1.IntervalUnit.DAY_TIME ? getIntervalDayTime(vector, index) : getIntervalYearMonth(vector, index);
	};
	/** @ignore */
	var getIntervalDayTime = function getIntervalDayTime(_ref19, index) {
	    var values = _ref19.values;
	    return values.subarray(2 * index, 2 * (index + 1));
	};
	/** @ignore */
	var getIntervalYearMonth = function getIntervalYearMonth(_ref20, index) {
	    var values = _ref20.values;

	    var interval = values[index];
	    var int32s = new Int32Array(2);
	    int32s[0] = interval / 12 | 0; /* years */
	    int32s[1] = interval % 12 | 0; /* months */
	    return int32s;
	};
	/** @ignore */
	var getFixedSizeList = function getFixedSizeList(vector, index) {
	    var child = vector.getChildAt(0),
	        stride = vector.stride;
	    return child.slice(index * stride, (index + 1) * stride);
	};
	GetVisitor.prototype.visitNull = getNull;
	GetVisitor.prototype.visitBool = getBool;
	GetVisitor.prototype.visitInt = getInt;
	GetVisitor.prototype.visitInt8 = getNumeric;
	GetVisitor.prototype.visitInt16 = getNumeric;
	GetVisitor.prototype.visitInt32 = getNumeric;
	GetVisitor.prototype.visitInt64 = getBigInts;
	GetVisitor.prototype.visitUint8 = getNumeric;
	GetVisitor.prototype.visitUint16 = getNumeric;
	GetVisitor.prototype.visitUint32 = getNumeric;
	GetVisitor.prototype.visitUint64 = getBigInts;
	GetVisitor.prototype.visitFloat = getFloat;
	GetVisitor.prototype.visitFloat16 = getFloat16;
	GetVisitor.prototype.visitFloat32 = getNumeric;
	GetVisitor.prototype.visitFloat64 = getNumeric;
	GetVisitor.prototype.visitUtf8 = getUtf8;
	GetVisitor.prototype.visitBinary = getBinary;
	GetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;
	GetVisitor.prototype.visitDate = getDate;
	GetVisitor.prototype.visitDateDay = getDateDay;
	GetVisitor.prototype.visitDateMillisecond = getDateMillisecond;
	GetVisitor.prototype.visitTimestamp = getTimestamp;
	GetVisitor.prototype.visitTimestampSecond = getTimestampSecond;
	GetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;
	GetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;
	GetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;
	GetVisitor.prototype.visitTime = getTime;
	GetVisitor.prototype.visitTimeSecond = getTimeSecond;
	GetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;
	GetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;
	GetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;
	GetVisitor.prototype.visitDecimal = getDecimal;
	GetVisitor.prototype.visitList = getList;
	GetVisitor.prototype.visitStruct = getStruct;
	GetVisitor.prototype.visitUnion = getUnion;
	GetVisitor.prototype.visitDenseUnion = getDenseUnion;
	GetVisitor.prototype.visitSparseUnion = getSparseUnion;
	GetVisitor.prototype.visitDictionary = getDictionary;
	GetVisitor.prototype.visitInterval = getInterval;
	GetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;
	GetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;
	GetVisitor.prototype.visitFixedSizeList = getFixedSizeList;
	GetVisitor.prototype.visitMap = getMap;
	/** @ignore */
	exports.instance = new GetVisitor();

	//# sourceMappingURL=get.js.map

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var visitor_1 = __webpack_require__(76);
	var bit_1 = __webpack_require__(73);
	var vector_1 = __webpack_require__(101);
	/** @ignore */

	var IndexOfVisitor = function (_visitor_1$Visitor) {
	    _inherits(IndexOfVisitor, _visitor_1$Visitor);

	    function IndexOfVisitor() {
	        _classCallCheck(this, IndexOfVisitor);

	        return _possibleConstructorReturn(this, (IndexOfVisitor.__proto__ || Object.getPrototypeOf(IndexOfVisitor)).apply(this, arguments));
	    }

	    return IndexOfVisitor;
	}(visitor_1.Visitor);

	exports.IndexOfVisitor = IndexOfVisitor;
	/** @ignore */
	function nullIndexOf(vector, searchElement) {
	    // if you're looking for nulls and the vector isn't empty, we've got 'em!
	    return searchElement === null && vector.length > 0 ? 0 : -1;
	}
	/** @ignore */
	function indexOfNull(vector, fromIndex) {
	    var nullBitmap = vector.nullBitmap;

	    if (!nullBitmap || vector.nullCount <= 0) {
	        return -1;
	    }
	    var i = 0;
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	        for (var _iterator = bit_1.iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, bit_1.getBool)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var isValid = _step.value;

	            if (!isValid) {
	                return i;
	            }
	            ++i;
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }

	    return -1;
	}
	/** @ignore */
	function indexOfValue(vector, searchElement, fromIndex) {
	    if (searchElement === undefined) {
	        return -1;
	    }
	    if (searchElement === null) {
	        return indexOfNull(vector, fromIndex);
	    }
	    var compare = vector_1.createElementComparator(searchElement);
	    for (var i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {
	        if (compare(vector.get(i))) {
	            return i;
	        }
	    }
	    return -1;
	}
	/** @ignore */
	function indexOfUnion(vector, searchElement, fromIndex) {
	    // Unions are special -- they do have a nullBitmap, but so can their children.
	    // If the searchElement is null, we don't know whether it came from the Union's
	    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,
	    // since that will report the wrong index if a child has a null before the Union.
	    var compare = vector_1.createElementComparator(searchElement);
	    for (var i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {
	        if (compare(vector.get(i))) {
	            return i;
	        }
	    }
	    return -1;
	}
	IndexOfVisitor.prototype.visitNull = nullIndexOf;
	IndexOfVisitor.prototype.visitBool = indexOfValue;
	IndexOfVisitor.prototype.visitInt = indexOfValue;
	IndexOfVisitor.prototype.visitInt8 = indexOfValue;
	IndexOfVisitor.prototype.visitInt16 = indexOfValue;
	IndexOfVisitor.prototype.visitInt32 = indexOfValue;
	IndexOfVisitor.prototype.visitInt64 = indexOfValue;
	IndexOfVisitor.prototype.visitUint8 = indexOfValue;
	IndexOfVisitor.prototype.visitUint16 = indexOfValue;
	IndexOfVisitor.prototype.visitUint32 = indexOfValue;
	IndexOfVisitor.prototype.visitUint64 = indexOfValue;
	IndexOfVisitor.prototype.visitFloat = indexOfValue;
	IndexOfVisitor.prototype.visitFloat16 = indexOfValue;
	IndexOfVisitor.prototype.visitFloat32 = indexOfValue;
	IndexOfVisitor.prototype.visitFloat64 = indexOfValue;
	IndexOfVisitor.prototype.visitUtf8 = indexOfValue;
	IndexOfVisitor.prototype.visitBinary = indexOfValue;
	IndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;
	IndexOfVisitor.prototype.visitDate = indexOfValue;
	IndexOfVisitor.prototype.visitDateDay = indexOfValue;
	IndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;
	IndexOfVisitor.prototype.visitTimestamp = indexOfValue;
	IndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;
	IndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;
	IndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;
	IndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;
	IndexOfVisitor.prototype.visitTime = indexOfValue;
	IndexOfVisitor.prototype.visitTimeSecond = indexOfValue;
	IndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;
	IndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;
	IndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;
	IndexOfVisitor.prototype.visitDecimal = indexOfValue;
	IndexOfVisitor.prototype.visitList = indexOfValue;
	IndexOfVisitor.prototype.visitStruct = indexOfValue;
	IndexOfVisitor.prototype.visitUnion = indexOfValue;
	IndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;
	IndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;
	IndexOfVisitor.prototype.visitDictionary = indexOfValue;
	IndexOfVisitor.prototype.visitInterval = indexOfValue;
	IndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;
	IndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;
	IndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;
	IndexOfVisitor.prototype.visitMap = indexOfValue;
	/** @ignore */
	exports.instance = new IndexOfVisitor();

	//# sourceMappingURL=indexof.js.map

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var enum_1 = __webpack_require__(69);
	var visitor_1 = __webpack_require__(76);
	var iterator_1 = __webpack_require__(151);
	/** @ignore */

	var ToArrayVisitor = function (_visitor_1$Visitor) {
	    _inherits(ToArrayVisitor, _visitor_1$Visitor);

	    function ToArrayVisitor() {
	        _classCallCheck(this, ToArrayVisitor);

	        return _possibleConstructorReturn(this, (ToArrayVisitor.__proto__ || Object.getPrototypeOf(ToArrayVisitor)).apply(this, arguments));
	    }

	    return ToArrayVisitor;
	}(visitor_1.Visitor);

	exports.ToArrayVisitor = ToArrayVisitor;
	/** @ignore */
	function arrayOfVector(vector) {
	    var type = vector.type,
	        length = vector.length,
	        stride = vector.stride;
	    // Fast case, return subarray if possible

	    switch (type.typeId) {
	        case enum_1.Type.Int:
	        case enum_1.Type.Float:
	        case enum_1.Type.Decimal:
	        case enum_1.Type.Time:
	        case enum_1.Type.Timestamp:
	            return vector.values.subarray(0, length * stride);
	    }
	    // Otherwise if not primitive, slow copy
	    return [].concat(_toConsumableArray(iterator_1.instance.visit(vector)));
	}
	ToArrayVisitor.prototype.visitNull = arrayOfVector;
	ToArrayVisitor.prototype.visitBool = arrayOfVector;
	ToArrayVisitor.prototype.visitInt = arrayOfVector;
	ToArrayVisitor.prototype.visitInt8 = arrayOfVector;
	ToArrayVisitor.prototype.visitInt16 = arrayOfVector;
	ToArrayVisitor.prototype.visitInt32 = arrayOfVector;
	ToArrayVisitor.prototype.visitInt64 = arrayOfVector;
	ToArrayVisitor.prototype.visitUint8 = arrayOfVector;
	ToArrayVisitor.prototype.visitUint16 = arrayOfVector;
	ToArrayVisitor.prototype.visitUint32 = arrayOfVector;
	ToArrayVisitor.prototype.visitUint64 = arrayOfVector;
	ToArrayVisitor.prototype.visitFloat = arrayOfVector;
	ToArrayVisitor.prototype.visitFloat16 = arrayOfVector;
	ToArrayVisitor.prototype.visitFloat32 = arrayOfVector;
	ToArrayVisitor.prototype.visitFloat64 = arrayOfVector;
	ToArrayVisitor.prototype.visitUtf8 = arrayOfVector;
	ToArrayVisitor.prototype.visitBinary = arrayOfVector;
	ToArrayVisitor.prototype.visitFixedSizeBinary = arrayOfVector;
	ToArrayVisitor.prototype.visitDate = arrayOfVector;
	ToArrayVisitor.prototype.visitDateDay = arrayOfVector;
	ToArrayVisitor.prototype.visitDateMillisecond = arrayOfVector;
	ToArrayVisitor.prototype.visitTimestamp = arrayOfVector;
	ToArrayVisitor.prototype.visitTimestampSecond = arrayOfVector;
	ToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;
	ToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;
	ToArrayVisitor.prototype.visitTimestampNanosecond = arrayOfVector;
	ToArrayVisitor.prototype.visitTime = arrayOfVector;
	ToArrayVisitor.prototype.visitTimeSecond = arrayOfVector;
	ToArrayVisitor.prototype.visitTimeMillisecond = arrayOfVector;
	ToArrayVisitor.prototype.visitTimeMicrosecond = arrayOfVector;
	ToArrayVisitor.prototype.visitTimeNanosecond = arrayOfVector;
	ToArrayVisitor.prototype.visitDecimal = arrayOfVector;
	ToArrayVisitor.prototype.visitList = arrayOfVector;
	ToArrayVisitor.prototype.visitStruct = arrayOfVector;
	ToArrayVisitor.prototype.visitUnion = arrayOfVector;
	ToArrayVisitor.prototype.visitDenseUnion = arrayOfVector;
	ToArrayVisitor.prototype.visitSparseUnion = arrayOfVector;
	ToArrayVisitor.prototype.visitDictionary = arrayOfVector;
	ToArrayVisitor.prototype.visitInterval = arrayOfVector;
	ToArrayVisitor.prototype.visitIntervalDayTime = arrayOfVector;
	ToArrayVisitor.prototype.visitIntervalYearMonth = arrayOfVector;
	ToArrayVisitor.prototype.visitFixedSizeList = arrayOfVector;
	ToArrayVisitor.prototype.visitMap = arrayOfVector;
	/** @ignore */
	exports.instance = new ToArrayVisitor();

	//# sourceMappingURL=toarray.js.map

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var enum_1 = __webpack_require__(69);
	var visitor_1 = __webpack_require__(76);
	var bit_1 = __webpack_require__(73);
	var get_1 = __webpack_require__(148);
	/** @ignore */

	var IteratorVisitor = function (_visitor_1$Visitor) {
	    _inherits(IteratorVisitor, _visitor_1$Visitor);

	    function IteratorVisitor() {
	        _classCallCheck(this, IteratorVisitor);

	        return _possibleConstructorReturn(this, (IteratorVisitor.__proto__ || Object.getPrototypeOf(IteratorVisitor)).apply(this, arguments));
	    }

	    return IteratorVisitor;
	}(visitor_1.Visitor);

	exports.IteratorVisitor = IteratorVisitor;
	/** @ignore */
	function nullableIterator(vector) {
	    var getFn = get_1.instance.getVisitFn(vector);
	    return bit_1.iterateBits(vector.nullBitmap, vector.offset, vector.length, vector, function (vec, idx, nullByte, nullBit) {
	        return (nullByte & 1 << nullBit) !== 0 ? getFn(vec, idx) : null;
	    });
	}
	/** @ignore */
	function vectorIterator(vector) {
	    // If nullable, iterate manually
	    if (vector.nullCount > 0) {
	        return nullableIterator(vector);
	    }
	    var type = vector.type,
	        typeId = vector.typeId,
	        length = vector.length;
	    // Fast case, defer to native iterators if possible

	    if (vector.stride === 1 && (typeId === enum_1.Type.Timestamp || typeId === enum_1.Type.Int && type.bitWidth !== 64 || typeId === enum_1.Type.Time && type.bitWidth !== 64 || typeId === enum_1.Type.Float && type.precision > 0 /* Precision.HALF */)) {
	        return vector.values.subarray(0, length)[Symbol.iterator]();
	    }
	    // Otherwise, iterate manually
	    return (/*#__PURE__*/regeneratorRuntime.mark(function _callee(getFn) {
	            var index;
	            return regeneratorRuntime.wrap(function _callee$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            index = -1;

	                        case 1:
	                            if (!(++index < length)) {
	                                _context.next = 6;
	                                break;
	                            }

	                            _context.next = 4;
	                            return getFn(vector, index);

	                        case 4:
	                            _context.next = 1;
	                            break;

	                        case 6:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, _callee, this);
	        })(get_1.instance.getVisitFn(vector))
	    );
	}
	IteratorVisitor.prototype.visitNull = vectorIterator;
	IteratorVisitor.prototype.visitBool = vectorIterator;
	IteratorVisitor.prototype.visitInt = vectorIterator;
	IteratorVisitor.prototype.visitInt8 = vectorIterator;
	IteratorVisitor.prototype.visitInt16 = vectorIterator;
	IteratorVisitor.prototype.visitInt32 = vectorIterator;
	IteratorVisitor.prototype.visitInt64 = vectorIterator;
	IteratorVisitor.prototype.visitUint8 = vectorIterator;
	IteratorVisitor.prototype.visitUint16 = vectorIterator;
	IteratorVisitor.prototype.visitUint32 = vectorIterator;
	IteratorVisitor.prototype.visitUint64 = vectorIterator;
	IteratorVisitor.prototype.visitFloat = vectorIterator;
	IteratorVisitor.prototype.visitFloat16 = vectorIterator;
	IteratorVisitor.prototype.visitFloat32 = vectorIterator;
	IteratorVisitor.prototype.visitFloat64 = vectorIterator;
	IteratorVisitor.prototype.visitUtf8 = vectorIterator;
	IteratorVisitor.prototype.visitBinary = vectorIterator;
	IteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;
	IteratorVisitor.prototype.visitDate = vectorIterator;
	IteratorVisitor.prototype.visitDateDay = vectorIterator;
	IteratorVisitor.prototype.visitDateMillisecond = vectorIterator;
	IteratorVisitor.prototype.visitTimestamp = vectorIterator;
	IteratorVisitor.prototype.visitTimestampSecond = vectorIterator;
	IteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;
	IteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;
	IteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;
	IteratorVisitor.prototype.visitTime = vectorIterator;
	IteratorVisitor.prototype.visitTimeSecond = vectorIterator;
	IteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;
	IteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;
	IteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;
	IteratorVisitor.prototype.visitDecimal = vectorIterator;
	IteratorVisitor.prototype.visitList = vectorIterator;
	IteratorVisitor.prototype.visitStruct = vectorIterator;
	IteratorVisitor.prototype.visitUnion = vectorIterator;
	IteratorVisitor.prototype.visitDenseUnion = vectorIterator;
	IteratorVisitor.prototype.visitSparseUnion = vectorIterator;
	IteratorVisitor.prototype.visitDictionary = vectorIterator;
	IteratorVisitor.prototype.visitInterval = vectorIterator;
	IteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;
	IteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;
	IteratorVisitor.prototype.visitFixedSizeList = vectorIterator;
	IteratorVisitor.prototype.visitMap = vectorIterator;
	/** @ignore */
	exports.instance = new IteratorVisitor();

	//# sourceMappingURL=iterator.js.map

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/* istanbul ignore file */

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var visitor_1 = __webpack_require__(76);
	var enum_1 = __webpack_require__(69);
	/** @ignore */var sum = function sum(x, y) {
	    return x + y;
	};
	/** @ignore */var variableWidthColumnErrorMessage = function variableWidthColumnErrorMessage(type) {
	    return "Cannot compute the byte width of variable-width column " + type;
	};
	/** @ignore */

	var ByteWidthVisitor = function (_visitor_1$Visitor) {
	    _inherits(ByteWidthVisitor, _visitor_1$Visitor);

	    function ByteWidthVisitor() {
	        _classCallCheck(this, ByteWidthVisitor);

	        return _possibleConstructorReturn(this, (ByteWidthVisitor.__proto__ || Object.getPrototypeOf(ByteWidthVisitor)).apply(this, arguments));
	    }

	    _createClass(ByteWidthVisitor, [{
	        key: "visitNull",
	        value: function visitNull(____) {
	            return 0;
	        }
	    }, {
	        key: "visitInt",
	        value: function visitInt(type) {
	            return type.bitWidth / 8;
	        }
	    }, {
	        key: "visitFloat",
	        value: function visitFloat(type) {
	            return type.ArrayType.BYTES_PER_ELEMENT;
	        }
	    }, {
	        key: "visitBinary",
	        value: function visitBinary(type) {
	            throw new Error(variableWidthColumnErrorMessage(type));
	        }
	    }, {
	        key: "visitUtf8",
	        value: function visitUtf8(type) {
	            throw new Error(variableWidthColumnErrorMessage(type));
	        }
	    }, {
	        key: "visitBool",
	        value: function visitBool(____) {
	            return 1 / 8;
	        }
	    }, {
	        key: "visitDecimal",
	        value: function visitDecimal(____) {
	            return 16;
	        }
	    }, {
	        key: "visitDate",
	        value: function visitDate(type) {
	            return (type.unit + 1) * 4;
	        }
	    }, {
	        key: "visitTime",
	        value: function visitTime(type) {
	            return type.bitWidth / 8;
	        }
	    }, {
	        key: "visitTimestamp",
	        value: function visitTimestamp(type) {
	            return type.unit === enum_1.TimeUnit.SECOND ? 4 : 8;
	        }
	    }, {
	        key: "visitInterval",
	        value: function visitInterval(type) {
	            return (type.unit + 1) * 4;
	        }
	    }, {
	        key: "visitList",
	        value: function visitList(type) {
	            throw new Error(variableWidthColumnErrorMessage(type));
	        }
	    }, {
	        key: "visitStruct",
	        value: function visitStruct(type) {
	            return this.visitFields(type.children).reduce(sum, 0);
	        }
	    }, {
	        key: "visitUnion",
	        value: function visitUnion(type) {
	            return this.visitFields(type.children).reduce(sum, 0);
	        }
	    }, {
	        key: "visitFixedSizeBinary",
	        value: function visitFixedSizeBinary(type) {
	            return type.byteWidth;
	        }
	    }, {
	        key: "visitFixedSizeList",
	        value: function visitFixedSizeList(type) {
	            return type.listSize * this.visitFields(type.children).reduce(sum, 0);
	        }
	    }, {
	        key: "visitMap",
	        value: function visitMap(type) {
	            return this.visitFields(type.children).reduce(sum, 0);
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary(type) {
	            return this.visit(type.indices);
	        }
	    }, {
	        key: "visitFields",
	        value: function visitFields(fields) {
	            var _this2 = this;

	            return (fields || []).map(function (field) {
	                return _this2.visit(field.type);
	            });
	        }
	    }, {
	        key: "visitSchema",
	        value: function visitSchema(schema) {
	            return this.visitFields(schema.fields).reduce(sum, 0);
	        }
	    }]);

	    return ByteWidthVisitor;
	}(visitor_1.Visitor);

	exports.ByteWidthVisitor = ByteWidthVisitor;
	/** @ignore */
	exports.instance = new ByteWidthVisitor();

	//# sourceMappingURL=bytewidth.js.map

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var visitor_1 = __webpack_require__(76);
	var binary_1 = __webpack_require__(129);
	var bool_1 = __webpack_require__(130);
	var date_1 = __webpack_require__(131);
	var decimal_1 = __webpack_require__(132);
	var dictionary_1 = __webpack_require__(133);
	var fixedsizebinary_1 = __webpack_require__(134);
	var fixedsizelist_1 = __webpack_require__(135);
	var float_1 = __webpack_require__(136);
	var interval_1 = __webpack_require__(137);
	var int_1 = __webpack_require__(138);
	var list_1 = __webpack_require__(139);
	var map_1 = __webpack_require__(140);
	var null_1 = __webpack_require__(141);
	var struct_1 = __webpack_require__(142);
	var timestamp_1 = __webpack_require__(143);
	var time_1 = __webpack_require__(144);
	var union_1 = __webpack_require__(145);
	var utf8_1 = __webpack_require__(146);
	/** @ignore */

	var GetVectorConstructor = function (_visitor_1$Visitor) {
	    _inherits(GetVectorConstructor, _visitor_1$Visitor);

	    function GetVectorConstructor() {
	        _classCallCheck(this, GetVectorConstructor);

	        return _possibleConstructorReturn(this, (GetVectorConstructor.__proto__ || Object.getPrototypeOf(GetVectorConstructor)).apply(this, arguments));
	    }

	    _createClass(GetVectorConstructor, [{
	        key: "visitNull",
	        value: function visitNull() {
	            return null_1.NullVector;
	        }
	    }, {
	        key: "visitBool",
	        value: function visitBool() {
	            return bool_1.BoolVector;
	        }
	    }, {
	        key: "visitInt",
	        value: function visitInt() {
	            return int_1.IntVector;
	        }
	    }, {
	        key: "visitInt8",
	        value: function visitInt8() {
	            return int_1.Int8Vector;
	        }
	    }, {
	        key: "visitInt16",
	        value: function visitInt16() {
	            return int_1.Int16Vector;
	        }
	    }, {
	        key: "visitInt32",
	        value: function visitInt32() {
	            return int_1.Int32Vector;
	        }
	    }, {
	        key: "visitInt64",
	        value: function visitInt64() {
	            return int_1.Int64Vector;
	        }
	    }, {
	        key: "visitUint8",
	        value: function visitUint8() {
	            return int_1.Uint8Vector;
	        }
	    }, {
	        key: "visitUint16",
	        value: function visitUint16() {
	            return int_1.Uint16Vector;
	        }
	    }, {
	        key: "visitUint32",
	        value: function visitUint32() {
	            return int_1.Uint32Vector;
	        }
	    }, {
	        key: "visitUint64",
	        value: function visitUint64() {
	            return int_1.Uint64Vector;
	        }
	    }, {
	        key: "visitFloat",
	        value: function visitFloat() {
	            return float_1.FloatVector;
	        }
	    }, {
	        key: "visitFloat16",
	        value: function visitFloat16() {
	            return float_1.Float16Vector;
	        }
	    }, {
	        key: "visitFloat32",
	        value: function visitFloat32() {
	            return float_1.Float32Vector;
	        }
	    }, {
	        key: "visitFloat64",
	        value: function visitFloat64() {
	            return float_1.Float64Vector;
	        }
	    }, {
	        key: "visitUtf8",
	        value: function visitUtf8() {
	            return utf8_1.Utf8Vector;
	        }
	    }, {
	        key: "visitBinary",
	        value: function visitBinary() {
	            return binary_1.BinaryVector;
	        }
	    }, {
	        key: "visitFixedSizeBinary",
	        value: function visitFixedSizeBinary() {
	            return fixedsizebinary_1.FixedSizeBinaryVector;
	        }
	    }, {
	        key: "visitDate",
	        value: function visitDate() {
	            return date_1.DateVector;
	        }
	    }, {
	        key: "visitDateDay",
	        value: function visitDateDay() {
	            return date_1.DateDayVector;
	        }
	    }, {
	        key: "visitDateMillisecond",
	        value: function visitDateMillisecond() {
	            return date_1.DateMillisecondVector;
	        }
	    }, {
	        key: "visitTimestamp",
	        value: function visitTimestamp() {
	            return timestamp_1.TimestampVector;
	        }
	    }, {
	        key: "visitTimestampSecond",
	        value: function visitTimestampSecond() {
	            return timestamp_1.TimestampSecondVector;
	        }
	    }, {
	        key: "visitTimestampMillisecond",
	        value: function visitTimestampMillisecond() {
	            return timestamp_1.TimestampMillisecondVector;
	        }
	    }, {
	        key: "visitTimestampMicrosecond",
	        value: function visitTimestampMicrosecond() {
	            return timestamp_1.TimestampMicrosecondVector;
	        }
	    }, {
	        key: "visitTimestampNanosecond",
	        value: function visitTimestampNanosecond() {
	            return timestamp_1.TimestampNanosecondVector;
	        }
	    }, {
	        key: "visitTime",
	        value: function visitTime() {
	            return time_1.TimeVector;
	        }
	    }, {
	        key: "visitTimeSecond",
	        value: function visitTimeSecond() {
	            return time_1.TimeSecondVector;
	        }
	    }, {
	        key: "visitTimeMillisecond",
	        value: function visitTimeMillisecond() {
	            return time_1.TimeMillisecondVector;
	        }
	    }, {
	        key: "visitTimeMicrosecond",
	        value: function visitTimeMicrosecond() {
	            return time_1.TimeMicrosecondVector;
	        }
	    }, {
	        key: "visitTimeNanosecond",
	        value: function visitTimeNanosecond() {
	            return time_1.TimeNanosecondVector;
	        }
	    }, {
	        key: "visitDecimal",
	        value: function visitDecimal() {
	            return decimal_1.DecimalVector;
	        }
	    }, {
	        key: "visitList",
	        value: function visitList() {
	            return list_1.ListVector;
	        }
	    }, {
	        key: "visitStruct",
	        value: function visitStruct() {
	            return struct_1.StructVector;
	        }
	    }, {
	        key: "visitUnion",
	        value: function visitUnion() {
	            return union_1.UnionVector;
	        }
	    }, {
	        key: "visitDenseUnion",
	        value: function visitDenseUnion() {
	            return union_1.DenseUnionVector;
	        }
	    }, {
	        key: "visitSparseUnion",
	        value: function visitSparseUnion() {
	            return union_1.SparseUnionVector;
	        }
	    }, {
	        key: "visitDictionary",
	        value: function visitDictionary() {
	            return dictionary_1.DictionaryVector;
	        }
	    }, {
	        key: "visitInterval",
	        value: function visitInterval() {
	            return interval_1.IntervalVector;
	        }
	    }, {
	        key: "visitIntervalDayTime",
	        value: function visitIntervalDayTime() {
	            return interval_1.IntervalDayTimeVector;
	        }
	    }, {
	        key: "visitIntervalYearMonth",
	        value: function visitIntervalYearMonth() {
	            return interval_1.IntervalYearMonthVector;
	        }
	    }, {
	        key: "visitFixedSizeList",
	        value: function visitFixedSizeList() {
	            return fixedsizelist_1.FixedSizeListVector;
	        }
	    }, {
	        key: "visitMap",
	        value: function visitMap() {
	            return map_1.MapVector;
	        }
	    }]);

	    return GetVectorConstructor;
	}(visitor_1.Visitor);

	exports.GetVectorConstructor = GetVectorConstructor;
	/** @ignore */
	exports.instance = new GetVectorConstructor();

	//# sourceMappingURL=vectorctor.js.map

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var buffer_1 = __webpack_require__(60);
	var compat_1 = __webpack_require__(64);
	/** @ignore */
	function toDOMStream(source, options) {
	    if (compat_1.isAsyncIterable(source)) {
	        return asyncIterableAsReadableDOMStream(source, options);
	    }
	    if (compat_1.isIterable(source)) {
	        return iterableAsReadableDOMStream(source, options);
	    }
	    /* istanbul ignore next */
	    throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable");
	}
	exports.toDOMStream = toDOMStream;
	/** @ignore */
	function iterableAsReadableDOMStream(source, options) {
	    var it = null;
	    var bm = options && options.type === 'bytes' || false;
	    var hwm = options && options.highWaterMark || Math.pow(2, 24);
	    return new ReadableStream(_extends({}, options, {
	        start: function start(controller) {
	            next(controller, it || (it = source[Symbol.iterator]()));
	        },
	        pull: function pull(controller) {
	            it ? next(controller, it) : controller.close();
	        },
	        cancel: function cancel() {
	            (it && it.return && it.return() || true) && (it = null);
	        }
	    }), _extends({ highWaterMark: bm ? hwm : undefined }, options));
	    function next(controller, it) {
	        var buf = void 0;
	        var r = null;
	        var size = controller.desiredSize || null;
	        while (!(r = it.next(bm ? size : null)).done) {
	            if (ArrayBuffer.isView(r.value) && (buf = buffer_1.toUint8Array(r.value))) {
	                size != null && bm && (size = size - buf.byteLength + 1);
	                r.value = buf;
	            }
	            controller.enqueue(r.value);
	            if (size != null && --size <= 0) {
	                return;
	            }
	        }
	        controller.close();
	    }
	}
	/** @ignore */
	function asyncIterableAsReadableDOMStream(source, options) {
	    var next = function () {
	        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(controller, it) {
	            var buf, r, size;
	            return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            buf = void 0;
	                            r = null;
	                            size = controller.desiredSize || null;

	                        case 3:
	                            _context4.next = 5;
	                            return it.next(bm ? size : null);

	                        case 5:
	                            if ((r = _context4.sent).done) {
	                                _context4.next = 12;
	                                break;
	                            }

	                            if (ArrayBuffer.isView(r.value) && (buf = buffer_1.toUint8Array(r.value))) {
	                                size != null && bm && (size = size - buf.byteLength + 1);
	                                r.value = buf;
	                            }
	                            controller.enqueue(r.value);

	                            if (!(size != null && --size <= 0)) {
	                                _context4.next = 10;
	                                break;
	                            }

	                            return _context4.abrupt("return");

	                        case 10:
	                            _context4.next = 3;
	                            break;

	                        case 12:
	                            controller.close();

	                        case 13:
	                        case "end":
	                            return _context4.stop();
	                    }
	                }
	            }, _callee4, this);
	        }));

	        return function next(_x, _x2) {
	            return _ref.apply(this, arguments);
	        };
	    }();

	    var it = null;
	    var bm = options && options.type === 'bytes' || false;
	    var hwm = options && options.highWaterMark || Math.pow(2, 24);
	    return new ReadableStream(_extends({}, options, {
	        start: function start(controller) {
	            var _this = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return next(controller, it || (it = source[Symbol.asyncIterator]()));

	                            case 2:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, _this);
	            }))();
	        },
	        pull: function pull(controller) {
	            var _this2 = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                if (!it) {
	                                    _context2.next = 5;
	                                    break;
	                                }

	                                _context2.next = 3;
	                                return next(controller, it);

	                            case 3:
	                                _context2.next = 6;
	                                break;

	                            case 5:
	                                controller.close();

	                            case 6:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, _this2);
	            }))();
	        },
	        cancel: function cancel() {
	            var _this3 = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.t1 = it;

	                                if (!_context3.t1) {
	                                    _context3.next = 8;
	                                    break;
	                                }

	                                _context3.t2 = it.return;

	                                if (!_context3.t2) {
	                                    _context3.next = 7;
	                                    break;
	                                }

	                                _context3.next = 6;
	                                return it.return();

	                            case 6:
	                                _context3.t2 = _context3.sent;

	                            case 7:
	                                _context3.t1 = _context3.t2;

	                            case 8:
	                                _context3.t0 = _context3.t1;

	                                if (_context3.t0) {
	                                    _context3.next = 11;
	                                    break;
	                                }

	                                _context3.t0 = true;

	                            case 11:
	                                _context3.t3 = _context3.t0;

	                                if (!_context3.t3) {
	                                    _context3.next = 14;
	                                    break;
	                                }

	                                it = null;

	                            case 14:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, _this3);
	            }))();
	        }
	    }), _extends({ highWaterMark: bm ? hwm : undefined }, options));
	}

	//# sourceMappingURL=iterable.js.map

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var index_1 = __webpack_require__(66);
	/** @ignore */
	function builderThroughDOMStream(options) {
	    return new BuilderTransform(options);
	}
	exports.builderThroughDOMStream = builderThroughDOMStream;
	/** @ignore */

	var BuilderTransform = function () {
	    function BuilderTransform(options) {
	        var _this = this,
	            _ref,
	            _ref2;

	        _classCallCheck(this, BuilderTransform);

	        // Access properties by string indexers to defeat closure compiler
	        this._numChunks = 0;
	        this._finished = false;
	        this._bufferedSize = 0;

	        var readableStrategy = options['readableStrategy'],
	            writableStrategy = options['writableStrategy'],
	            _options$queueingStra = options['queueingStrategy'],
	            queueingStrategy = _options$queueingStra === undefined ? 'count' : _options$queueingStra,
	            builderOptions = _objectWithoutProperties(options, ['readableStrategy', 'writableStrategy', 'queueingStrategy']);

	        this._controller = null;
	        this._builder = index_1.Builder.new(builderOptions);
	        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;

	        var _readableStrategy = _extends({}, readableStrategy),
	            _readableStrategy$hig = _readableStrategy['highWaterMark'],
	            readableHighWaterMark = _readableStrategy$hig === undefined ? queueingStrategy === 'bytes' ? Math.pow(2, 14) : 1000 : _readableStrategy$hig;

	        var _writableStrategy = _extends({}, writableStrategy),
	            _writableStrategy$hig = _writableStrategy['highWaterMark'],
	            writableHighWaterMark = _writableStrategy$hig === undefined ? queueingStrategy === 'bytes' ? Math.pow(2, 14) : 1000 : _writableStrategy$hig;

	        this['readable'] = new ReadableStream((_ref = {}, _defineProperty(_ref, 'cancel', function cancel() {
	            _this._builder.clear();
	        }), _defineProperty(_ref, 'pull', function pull(c) {
	            _this._maybeFlush(_this._builder, _this._controller = c);
	        }), _defineProperty(_ref, 'start', function start(c) {
	            _this._maybeFlush(_this._builder, _this._controller = c);
	        }), _ref), {
	            'highWaterMark': readableHighWaterMark,
	            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength
	        });
	        this['writable'] = new WritableStream((_ref2 = {}, _defineProperty(_ref2, 'abort', function abort() {
	            _this._builder.clear();
	        }), _defineProperty(_ref2, 'write', function write() {
	            _this._maybeFlush(_this._builder, _this._controller);
	        }), _defineProperty(_ref2, 'close', function close() {
	            _this._maybeFlush(_this._builder.finish(), _this._controller);
	        }), _ref2), {
	            'highWaterMark': writableHighWaterMark,
	            'size': function size(value) {
	                return _this._writeValueAndReturnChunkSize(value);
	            }
	        });
	    }

	    _createClass(BuilderTransform, [{
	        key: "_writeValueAndReturnChunkSize",
	        value: function _writeValueAndReturnChunkSize(value) {
	            var bufferedSize = this._bufferedSize;
	            this._bufferedSize = this._getSize(this._builder.append(value));
	            return this._bufferedSize - bufferedSize;
	        }
	    }, {
	        key: "_maybeFlush",
	        value: function _maybeFlush(builder, controller) {
	            if (controller === null) {
	                return;
	            }
	            if (this._bufferedSize >= controller.desiredSize) {
	                ++this._numChunks && this._enqueue(controller, builder.toVector());
	            }
	            if (builder.finished) {
	                if (builder.length > 0 || this._numChunks === 0) {
	                    ++this._numChunks && this._enqueue(controller, builder.toVector());
	                }
	                if (!this._finished && (this._finished = true)) {
	                    this._enqueue(controller, null);
	                }
	            }
	        }
	    }, {
	        key: "_enqueue",
	        value: function _enqueue(controller, chunk) {
	            this._bufferedSize = 0;
	            this._controller = null;
	            chunk === null ? controller.close() : controller.enqueue(chunk);
	        }
	    }]);

	    return BuilderTransform;
	}();

	exports.BuilderTransform = BuilderTransform;
	/** @ignore */var chunkLength = function chunkLength(chunk) {
	    return chunk.length;
	};
	/** @ignore */var chunkByteLength = function chunkByteLength(chunk) {
	    return chunk.byteLength;
	};

	//# sourceMappingURL=builder.js.map

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var stream_1 = __webpack_require__(112);
	var reader_1 = __webpack_require__(109);
	/** @ignore */
	function recordBatchReaderThroughDOMStream(writableStrategy, readableStrategy) {
	    var open = function () {
	        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
	            return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            _context4.next = 2;
	                            return reader_1.RecordBatchReader.from(queue);

	                        case 2:
	                            _context4.t0 = readableStrategy;
	                            _context4.next = 5;
	                            return _context4.sent.open(_context4.t0);

	                        case 5:
	                            return _context4.abrupt("return", _context4.sent);

	                        case 6:
	                        case "end":
	                            return _context4.stop();
	                    }
	                }
	            }, _callee4, this);
	        }));

	        return function open() {
	            return _ref.apply(this, arguments);
	        };
	    }();

	    var next = function () {
	        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(controller, reader) {
	            var size, r;
	            return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                while (1) {
	                    switch (_context5.prev = _context5.next) {
	                        case 0:
	                            size = controller.desiredSize;
	                            r = null;

	                        case 2:
	                            _context5.next = 4;
	                            return reader.next();

	                        case 4:
	                            if ((r = _context5.sent).done) {
	                                _context5.next = 10;
	                                break;
	                            }

	                            controller.enqueue(r.value);

	                            if (!(size != null && --size <= 0)) {
	                                _context5.next = 8;
	                                break;
	                            }

	                            return _context5.abrupt("return");

	                        case 8:
	                            _context5.next = 2;
	                            break;

	                        case 10:
	                            controller.close();

	                        case 11:
	                        case "end":
	                            return _context5.stop();
	                    }
	                }
	            }, _callee5, this);
	        }));

	        return function next(_x, _x2) {
	            return _ref2.apply(this, arguments);
	        };
	    }();

	    var queue = new stream_1.AsyncByteQueue();
	    var reader = null;
	    var readable = new ReadableStream({
	        cancel: function cancel() {
	            var _this = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return queue.close();

	                            case 2:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, _this);
	            }))();
	        },
	        start: function start(controller) {
	            var _this2 = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.t0 = next;
	                                _context2.t1 = controller;
	                                _context2.t2 = reader;

	                                if (_context2.t2) {
	                                    _context2.next = 7;
	                                    break;
	                                }

	                                _context2.next = 6;
	                                return open();

	                            case 6:
	                                _context2.t2 = reader = _context2.sent;

	                            case 7:
	                                _context2.t3 = _context2.t2;
	                                _context2.next = 10;
	                                return (0, _context2.t0)(_context2.t1, _context2.t3);

	                            case 10:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, _this2);
	            }))();
	        },
	        pull: function pull(controller) {
	            var _this3 = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                if (!reader) {
	                                    _context3.next = 5;
	                                    break;
	                                }

	                                _context3.next = 3;
	                                return next(controller, reader);

	                            case 3:
	                                _context3.next = 6;
	                                break;

	                            case 5:
	                                controller.close();

	                            case 6:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, _this3);
	            }))();
	        }
	    });
	    return { writable: new WritableStream(queue, _extends({ 'highWaterMark': Math.pow(2, 14) }, writableStrategy)), readable: readable };
	}
	exports.recordBatchReaderThroughDOMStream = recordBatchReaderThroughDOMStream;

	//# sourceMappingURL=reader.js.map

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var stream_1 = __webpack_require__(112);
	/** @ignore */
	function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {
	    var next = function () {
	        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(controller) {
	            var buf, size;
	            return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            buf = null;
	                            size = controller.desiredSize;

	                        case 2:
	                            _context4.next = 4;
	                            return reader.read(size || null);

	                        case 4:
	                            if (!(buf = _context4.sent)) {
	                                _context4.next = 10;
	                                break;
	                            }

	                            controller.enqueue(buf);

	                            if (!(size != null && (size -= buf.byteLength) <= 0)) {
	                                _context4.next = 8;
	                                break;
	                            }

	                            return _context4.abrupt("return");

	                        case 8:
	                            _context4.next = 2;
	                            break;

	                        case 10:
	                            controller.close();

	                        case 11:
	                        case "end":
	                            return _context4.stop();
	                    }
	                }
	            }, _callee4, this);
	        }));

	        return function next(_x) {
	            return _ref.apply(this, arguments);
	        };
	    }();

	    var writer = new this(writableStrategy);
	    var reader = new stream_1.AsyncByteStream(writer);
	    var readable = new ReadableStream({
	        type: 'bytes',
	        cancel: function cancel() {
	            var _this = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return reader.cancel();

	                            case 2:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, _this);
	            }))();
	        },
	        pull: function pull(controller) {
	            var _this2 = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return next(controller);

	                            case 2:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, _this2);
	            }))();
	        },
	        start: function start(controller) {
	            var _this3 = this;

	            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.next = 2;
	                                return next(controller);

	                            case 2:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, _this3);
	            }))();
	        }
	    }, _extends({ 'highWaterMark': Math.pow(2, 14) }, readableStrategy));
	    return { writable: new WritableStream(writer, writableStrategy), readable: readable };
	}
	exports.recordBatchWriterThroughDOMStream = recordBatchWriterThroughDOMStream;

	//# sourceMappingURL=writer.js.map

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	Object.defineProperty(exports, "__esModule", { value: true });
	var enum_1 = __webpack_require__(69);
	exports.ArrowType = enum_1.ArrowType;
	exports.DateUnit = enum_1.DateUnit;
	exports.IntervalUnit = enum_1.IntervalUnit;
	exports.MessageHeader = enum_1.MessageHeader;
	exports.MetadataVersion = enum_1.MetadataVersion;
	exports.Precision = enum_1.Precision;
	exports.TimeUnit = enum_1.TimeUnit;
	exports.Type = enum_1.Type;
	exports.UnionMode = enum_1.UnionMode;
	exports.BufferType = enum_1.BufferType;
	var data_1 = __webpack_require__(72);
	exports.Data = data_1.Data;
	var type_1 = __webpack_require__(74);
	exports.DataType = type_1.DataType;
	exports.Null = type_1.Null;
	exports.Bool = type_1.Bool;
	exports.Int = type_1.Int;
	exports.Int8 = type_1.Int8;
	exports.Int16 = type_1.Int16;
	exports.Int32 = type_1.Int32;
	exports.Int64 = type_1.Int64;
	exports.Uint8 = type_1.Uint8;
	exports.Uint16 = type_1.Uint16;
	exports.Uint32 = type_1.Uint32;
	exports.Uint64 = type_1.Uint64;
	exports.Float = type_1.Float;
	exports.Float16 = type_1.Float16;
	exports.Float32 = type_1.Float32;
	exports.Float64 = type_1.Float64;
	exports.Utf8 = type_1.Utf8;
	exports.Binary = type_1.Binary;
	exports.FixedSizeBinary = type_1.FixedSizeBinary;
	exports.Date_ = type_1.Date_;
	exports.DateDay = type_1.DateDay;
	exports.DateMillisecond = type_1.DateMillisecond;
	exports.Timestamp = type_1.Timestamp;
	exports.TimestampSecond = type_1.TimestampSecond;
	exports.TimestampMillisecond = type_1.TimestampMillisecond;
	exports.TimestampMicrosecond = type_1.TimestampMicrosecond;
	exports.TimestampNanosecond = type_1.TimestampNanosecond;
	exports.Time = type_1.Time;
	exports.TimeSecond = type_1.TimeSecond;
	exports.TimeMillisecond = type_1.TimeMillisecond;
	exports.TimeMicrosecond = type_1.TimeMicrosecond;
	exports.TimeNanosecond = type_1.TimeNanosecond;
	exports.Decimal = type_1.Decimal;
	exports.List = type_1.List;
	exports.Struct = type_1.Struct;
	exports.Union = type_1.Union;
	exports.DenseUnion = type_1.DenseUnion;
	exports.SparseUnion = type_1.SparseUnion;
	exports.Dictionary = type_1.Dictionary;
	exports.Interval = type_1.Interval;
	exports.IntervalDayTime = type_1.IntervalDayTime;
	exports.IntervalYearMonth = type_1.IntervalYearMonth;
	exports.FixedSizeList = type_1.FixedSizeList;
	exports.Map_ = type_1.Map_;
	var table_1 = __webpack_require__(117);
	exports.Table = table_1.Table;
	var column_1 = __webpack_require__(99);
	exports.Column = column_1.Column;
	var visitor_1 = __webpack_require__(76);
	exports.Visitor = visitor_1.Visitor;
	var schema_1 = __webpack_require__(97);
	exports.Schema = schema_1.Schema;
	exports.Field = schema_1.Field;
	var index_1 = __webpack_require__(127);
	exports.Vector = index_1.Vector;
	exports.BaseVector = index_1.BaseVector;
	exports.BinaryVector = index_1.BinaryVector;
	exports.BoolVector = index_1.BoolVector;
	exports.Chunked = index_1.Chunked;
	exports.DateVector = index_1.DateVector;
	exports.DateDayVector = index_1.DateDayVector;
	exports.DateMillisecondVector = index_1.DateMillisecondVector;
	exports.DecimalVector = index_1.DecimalVector;
	exports.DictionaryVector = index_1.DictionaryVector;
	exports.FixedSizeBinaryVector = index_1.FixedSizeBinaryVector;
	exports.FixedSizeListVector = index_1.FixedSizeListVector;
	exports.FloatVector = index_1.FloatVector;
	exports.Float16Vector = index_1.Float16Vector;
	exports.Float32Vector = index_1.Float32Vector;
	exports.Float64Vector = index_1.Float64Vector;
	exports.IntervalVector = index_1.IntervalVector;
	exports.IntervalDayTimeVector = index_1.IntervalDayTimeVector;
	exports.IntervalYearMonthVector = index_1.IntervalYearMonthVector;
	exports.IntVector = index_1.IntVector;
	exports.Int8Vector = index_1.Int8Vector;
	exports.Int16Vector = index_1.Int16Vector;
	exports.Int32Vector = index_1.Int32Vector;
	exports.Int64Vector = index_1.Int64Vector;
	exports.Uint8Vector = index_1.Uint8Vector;
	exports.Uint16Vector = index_1.Uint16Vector;
	exports.Uint32Vector = index_1.Uint32Vector;
	exports.Uint64Vector = index_1.Uint64Vector;
	exports.ListVector = index_1.ListVector;
	exports.MapVector = index_1.MapVector;
	exports.NullVector = index_1.NullVector;
	exports.StructVector = index_1.StructVector;
	exports.TimestampVector = index_1.TimestampVector;
	exports.TimestampSecondVector = index_1.TimestampSecondVector;
	exports.TimestampMillisecondVector = index_1.TimestampMillisecondVector;
	exports.TimestampMicrosecondVector = index_1.TimestampMicrosecondVector;
	exports.TimestampNanosecondVector = index_1.TimestampNanosecondVector;
	exports.TimeVector = index_1.TimeVector;
	exports.TimeSecondVector = index_1.TimeSecondVector;
	exports.TimeMillisecondVector = index_1.TimeMillisecondVector;
	exports.TimeMicrosecondVector = index_1.TimeMicrosecondVector;
	exports.TimeNanosecondVector = index_1.TimeNanosecondVector;
	exports.UnionVector = index_1.UnionVector;
	exports.DenseUnionVector = index_1.DenseUnionVector;
	exports.SparseUnionVector = index_1.SparseUnionVector;
	exports.Utf8Vector = index_1.Utf8Vector;
	var index_2 = __webpack_require__(66);
	exports.Builder = index_2.Builder;
	exports.BinaryBuilder = index_2.BinaryBuilder;
	exports.BoolBuilder = index_2.BoolBuilder;
	exports.DateBuilder = index_2.DateBuilder;
	exports.DateDayBuilder = index_2.DateDayBuilder;
	exports.DateMillisecondBuilder = index_2.DateMillisecondBuilder;
	exports.DecimalBuilder = index_2.DecimalBuilder;
	exports.DictionaryBuilder = index_2.DictionaryBuilder;
	exports.FixedSizeBinaryBuilder = index_2.FixedSizeBinaryBuilder;
	exports.FixedSizeListBuilder = index_2.FixedSizeListBuilder;
	exports.FloatBuilder = index_2.FloatBuilder;
	exports.Float16Builder = index_2.Float16Builder;
	exports.Float32Builder = index_2.Float32Builder;
	exports.Float64Builder = index_2.Float64Builder;
	exports.IntervalBuilder = index_2.IntervalBuilder;
	exports.IntervalDayTimeBuilder = index_2.IntervalDayTimeBuilder;
	exports.IntervalYearMonthBuilder = index_2.IntervalYearMonthBuilder;
	exports.IntBuilder = index_2.IntBuilder;
	exports.Int8Builder = index_2.Int8Builder;
	exports.Int16Builder = index_2.Int16Builder;
	exports.Int32Builder = index_2.Int32Builder;
	exports.Int64Builder = index_2.Int64Builder;
	exports.Uint8Builder = index_2.Uint8Builder;
	exports.Uint16Builder = index_2.Uint16Builder;
	exports.Uint32Builder = index_2.Uint32Builder;
	exports.Uint64Builder = index_2.Uint64Builder;
	exports.ListBuilder = index_2.ListBuilder;
	exports.MapBuilder = index_2.MapBuilder;
	exports.NullBuilder = index_2.NullBuilder;
	exports.StructBuilder = index_2.StructBuilder;
	exports.TimestampBuilder = index_2.TimestampBuilder;
	exports.TimestampSecondBuilder = index_2.TimestampSecondBuilder;
	exports.TimestampMillisecondBuilder = index_2.TimestampMillisecondBuilder;
	exports.TimestampMicrosecondBuilder = index_2.TimestampMicrosecondBuilder;
	exports.TimestampNanosecondBuilder = index_2.TimestampNanosecondBuilder;
	exports.TimeBuilder = index_2.TimeBuilder;
	exports.TimeSecondBuilder = index_2.TimeSecondBuilder;
	exports.TimeMillisecondBuilder = index_2.TimeMillisecondBuilder;
	exports.TimeMicrosecondBuilder = index_2.TimeMicrosecondBuilder;
	exports.TimeNanosecondBuilder = index_2.TimeNanosecondBuilder;
	exports.UnionBuilder = index_2.UnionBuilder;
	exports.DenseUnionBuilder = index_2.DenseUnionBuilder;
	exports.SparseUnionBuilder = index_2.SparseUnionBuilder;
	exports.Utf8Builder = index_2.Utf8Builder;
	var stream_1 = __webpack_require__(112);
	exports.ByteStream = stream_1.ByteStream;
	exports.AsyncByteStream = stream_1.AsyncByteStream;
	exports.AsyncByteQueue = stream_1.AsyncByteQueue;
	var reader_1 = __webpack_require__(109);
	exports.RecordBatchReader = reader_1.RecordBatchReader;
	exports.RecordBatchFileReader = reader_1.RecordBatchFileReader;
	exports.RecordBatchStreamReader = reader_1.RecordBatchStreamReader;
	exports.AsyncRecordBatchFileReader = reader_1.AsyncRecordBatchFileReader;
	exports.AsyncRecordBatchStreamReader = reader_1.AsyncRecordBatchStreamReader;
	var writer_1 = __webpack_require__(118);
	exports.RecordBatchWriter = writer_1.RecordBatchWriter;
	exports.RecordBatchFileWriter = writer_1.RecordBatchFileWriter;
	exports.RecordBatchStreamWriter = writer_1.RecordBatchStreamWriter;
	exports.RecordBatchJSONWriter = writer_1.RecordBatchJSONWriter;
	var message_1 = __webpack_require__(119);
	exports.MessageReader = message_1.MessageReader;
	exports.AsyncMessageReader = message_1.AsyncMessageReader;
	exports.JSONMessageReader = message_1.JSONMessageReader;
	var message_2 = __webpack_require__(120);
	exports.Message = message_2.Message;
	var recordbatch_1 = __webpack_require__(116);
	exports.RecordBatch = recordbatch_1.RecordBatch;
	var dataframe_1 = __webpack_require__(159);
	exports.DataFrame = dataframe_1.DataFrame;
	exports.FilteredDataFrame = dataframe_1.FilteredDataFrame;
	exports.CountByResult = dataframe_1.CountByResult;
	var util_bn_ = __webpack_require__(89);
	var util_int_ = __webpack_require__(115);
	var util_bit_ = __webpack_require__(73);
	var util_math_ = __webpack_require__(87);
	var util_buffer_ = __webpack_require__(60);
	var util_vector_ = __webpack_require__(101);
	var predicate = __webpack_require__(160);
	exports.predicate = predicate;
	/** @ignore */
	exports.util = _extends({}, util_bn_, util_int_, util_bit_, util_math_, util_buffer_, util_vector_);

	//# sourceMappingURL=Arrow.js.map

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	Object.defineProperty(exports, "__esModule", { value: true });
	var table_1 = __webpack_require__(117);
	var int_1 = __webpack_require__(138);
	var schema_1 = __webpack_require__(97);
	var predicate_1 = __webpack_require__(160);
	var recordbatch_1 = __webpack_require__(116);
	var type_1 = __webpack_require__(74);
	table_1.Table.prototype.countBy = function (name) {
	    return new DataFrame(this.chunks).countBy(name);
	};
	table_1.Table.prototype.scan = function (next, bind) {
	    return new DataFrame(this.chunks).scan(next, bind);
	};
	table_1.Table.prototype.scanReverse = function (next, bind) {
	    return new DataFrame(this.chunks).scanReverse(next, bind);
	};
	table_1.Table.prototype.filter = function (predicate) {
	    return new DataFrame(this.chunks).filter(predicate);
	};

	var DataFrame = function (_table_1$Table) {
	    _inherits(DataFrame, _table_1$Table);

	    function DataFrame() {
	        _classCallCheck(this, DataFrame);

	        return _possibleConstructorReturn(this, (DataFrame.__proto__ || Object.getPrototypeOf(DataFrame)).apply(this, arguments));
	    }

	    _createClass(DataFrame, [{
	        key: "filter",
	        value: function filter(predicate) {
	            return new FilteredDataFrame(this.chunks, predicate);
	        }
	    }, {
	        key: "scan",
	        value: function scan(next, bind) {
	            var batches = this.chunks,
	                numBatches = batches.length;
	            for (var batchIndex = -1; ++batchIndex < numBatches;) {
	                // load batches
	                var batch = batches[batchIndex];
	                if (bind) {
	                    bind(batch);
	                }
	                // yield all indices
	                for (var index = -1, numRows = batch.length; ++index < numRows;) {
	                    next(index, batch);
	                }
	            }
	        }
	    }, {
	        key: "scanReverse",
	        value: function scanReverse(next, bind) {
	            var batches = this.chunks,
	                numBatches = batches.length;
	            for (var batchIndex = numBatches; --batchIndex >= 0;) {
	                // load batches
	                var batch = batches[batchIndex];
	                if (bind) {
	                    bind(batch);
	                }
	                // yield all indices
	                for (var index = batch.length; --index >= 0;) {
	                    next(index, batch);
	                }
	            }
	        }
	    }, {
	        key: "countBy",
	        value: function countBy(name) {
	            var batches = this.chunks,
	                numBatches = batches.length;
	            var count_by = typeof name === 'string' ? new predicate_1.Col(name) : name;
	            // Assume that all dictionary batches are deltas, which means that the
	            // last record batch has the most complete dictionary
	            count_by.bind(batches[numBatches - 1]);
	            var vector = count_by.vector;
	            if (!type_1.DataType.isDictionary(vector.type)) {
	                throw new Error('countBy currently only supports dictionary-encoded columns');
	            }
	            var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));
	            var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;
	            var counts = new CountsArrayType(vector.dictionary.length);
	            for (var batchIndex = -1; ++batchIndex < numBatches;) {
	                // load batches
	                var batch = batches[batchIndex];
	                // rebind the countBy Col
	                count_by.bind(batch);
	                var keys = count_by.vector.indices;
	                // yield all indices
	                for (var index = -1, numRows = batch.length; ++index < numRows;) {
	                    var key = keys.get(index);
	                    if (key !== null) {
	                        counts[key]++;
	                    }
	                }
	            }
	            return new CountByResult(vector.dictionary, int_1.IntVector.from(counts));
	        }
	    }]);

	    return DataFrame;
	}(table_1.Table);

	exports.DataFrame = DataFrame;
	/** @ignore */

	var CountByResult = function (_table_1$Table2) {
	    _inherits(CountByResult, _table_1$Table2);

	    function CountByResult(values, counts) {
	        _classCallCheck(this, CountByResult);

	        var schema = new schema_1.Schema([new schema_1.Field('values', values.type), new schema_1.Field('counts', counts.type)]);
	        return _possibleConstructorReturn(this, (CountByResult.__proto__ || Object.getPrototypeOf(CountByResult)).call(this, new recordbatch_1.RecordBatch(schema, counts.length, [values, counts])));
	    }

	    _createClass(CountByResult, [{
	        key: "toJSON",
	        value: function toJSON() {
	            var values = this.getColumnAt(0);
	            var counts = this.getColumnAt(1);
	            var result = {};
	            for (var i = -1; ++i < this.length;) {
	                result[values.get(i)] = counts.get(i);
	            }
	            return result;
	        }
	    }]);

	    return CountByResult;
	}(table_1.Table);

	exports.CountByResult = CountByResult;
	/** @ignore */

	var FilteredDataFrame = function (_DataFrame) {
	    _inherits(FilteredDataFrame, _DataFrame);

	    function FilteredDataFrame(batches, predicate) {
	        _classCallCheck(this, FilteredDataFrame);

	        var _this3 = _possibleConstructorReturn(this, (FilteredDataFrame.__proto__ || Object.getPrototypeOf(FilteredDataFrame)).call(this, batches));

	        _this3._predicate = predicate;
	        return _this3;
	    }

	    _createClass(FilteredDataFrame, [{
	        key: "scan",
	        value: function scan(next, bind) {
	            // inlined version of this:
	            // this.parent.scan((idx, columns) => {
	            //     if (this.predicate(idx, columns)) next(idx, columns);
	            // });
	            var batches = this._chunks;
	            var numBatches = batches.length;
	            for (var batchIndex = -1; ++batchIndex < numBatches;) {
	                // load batches
	                var batch = batches[batchIndex];
	                var predicate = this._predicate.bind(batch);
	                var isBound = false;
	                // yield all indices
	                for (var index = -1, numRows = batch.length; ++index < numRows;) {
	                    if (predicate(index, batch)) {
	                        // bind batches lazily - if predicate doesn't match anything
	                        // in the batch we don't need to call bind on the batch
	                        if (bind && !isBound) {
	                            bind(batch);
	                            isBound = true;
	                        }
	                        next(index, batch);
	                    }
	                }
	            }
	        }
	    }, {
	        key: "scanReverse",
	        value: function scanReverse(next, bind) {
	            var batches = this._chunks;
	            var numBatches = batches.length;
	            for (var batchIndex = numBatches; --batchIndex >= 0;) {
	                // load batches
	                var batch = batches[batchIndex];
	                var predicate = this._predicate.bind(batch);
	                var isBound = false;
	                // yield all indices
	                for (var index = batch.length; --index >= 0;) {
	                    if (predicate(index, batch)) {
	                        // bind batches lazily - if predicate doesn't match anything
	                        // in the batch we don't need to call bind on the batch
	                        if (bind && !isBound) {
	                            bind(batch);
	                            isBound = true;
	                        }
	                        next(index, batch);
	                    }
	                }
	            }
	        }
	    }, {
	        key: "count",
	        value: function count() {
	            // inlined version of this:
	            // let sum = 0;
	            // this.parent.scan((idx, columns) => {
	            //     if (this.predicate(idx, columns)) ++sum;
	            // });
	            // return sum;
	            var sum = 0;
	            var batches = this._chunks;
	            var numBatches = batches.length;
	            for (var batchIndex = -1; ++batchIndex < numBatches;) {
	                // load batches
	                var batch = batches[batchIndex];
	                var predicate = this._predicate.bind(batch);
	                // yield all indices
	                for (var index = -1, numRows = batch.length; ++index < numRows;) {
	                    if (predicate(index, batch)) {
	                        ++sum;
	                    }
	                }
	            }
	            return sum;
	        }
	    }, {
	        key: Symbol.iterator,
	        value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
	            var batches, numBatches, batchIndex, batch, predicate, index, numRows;
	            return regeneratorRuntime.wrap(function value$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            // inlined version of this:
	                            // this.parent.scan((idx, columns) => {
	                            //     if (this.predicate(idx, columns)) next(idx, columns);
	                            // });
	                            batches = this._chunks;
	                            numBatches = batches.length;
	                            batchIndex = -1;

	                        case 3:
	                            if (!(++batchIndex < numBatches)) {
	                                _context.next = 15;
	                                break;
	                            }

	                            // load batches
	                            batch = batches[batchIndex];
	                            // TODO: bind batches lazily
	                            // If predicate doesn't match anything in the batch we don't need
	                            // to bind the callback

	                            predicate = this._predicate.bind(batch);
	                            // yield all indices

	                            index = -1, numRows = batch.length;

	                        case 7:
	                            if (!(++index < numRows)) {
	                                _context.next = 13;
	                                break;
	                            }

	                            if (!predicate(index, batch)) {
	                                _context.next = 11;
	                                break;
	                            }

	                            _context.next = 11;
	                            return batch.get(index);

	                        case 11:
	                            _context.next = 7;
	                            break;

	                        case 13:
	                            _context.next = 3;
	                            break;

	                        case 15:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, value, this);
	        })
	    }, {
	        key: "filter",
	        value: function filter(predicate) {
	            return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));
	        }
	    }, {
	        key: "countBy",
	        value: function countBy(name) {
	            var batches = this._chunks,
	                numBatches = batches.length;
	            var count_by = typeof name === 'string' ? new predicate_1.Col(name) : name;
	            // Assume that all dictionary batches are deltas, which means that the
	            // last record batch has the most complete dictionary
	            count_by.bind(batches[numBatches - 1]);
	            var vector = count_by.vector;
	            if (!type_1.DataType.isDictionary(vector.type)) {
	                throw new Error('countBy currently only supports dictionary-encoded columns');
	            }
	            var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));
	            var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;
	            var counts = new CountsArrayType(vector.dictionary.length);
	            for (var batchIndex = -1; ++batchIndex < numBatches;) {
	                // load batches
	                var batch = batches[batchIndex];
	                var predicate = this._predicate.bind(batch);
	                // rebind the countBy Col
	                count_by.bind(batch);
	                var keys = count_by.vector.indices;
	                // yield all indices
	                for (var index = -1, numRows = batch.length; ++index < numRows;) {
	                    var key = keys.get(index);
	                    if (key !== null && predicate(index, batch)) {
	                        counts[key]++;
	                    }
	                }
	            }
	            return new CountByResult(vector.dictionary, int_1.IntVector.from(counts));
	        }
	    }]);

	    return FilteredDataFrame;
	}(DataFrame);

	exports.FilteredDataFrame = FilteredDataFrame;

	//# sourceMappingURL=dataframe.js.map

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	Object.defineProperty(exports, "__esModule", { value: true });
	var dictionary_1 = __webpack_require__(133);
	/** @ignore */

	var Value = function () {
	    function Value() {
	        _classCallCheck(this, Value);
	    }

	    _createClass(Value, [{
	        key: "eq",
	        value: function eq(other) {
	            if (!(other instanceof Value)) {
	                other = new Literal(other);
	            }
	            return new Equals(this, other);
	        }
	    }, {
	        key: "le",
	        value: function le(other) {
	            if (!(other instanceof Value)) {
	                other = new Literal(other);
	            }
	            return new LTeq(this, other);
	        }
	    }, {
	        key: "ge",
	        value: function ge(other) {
	            if (!(other instanceof Value)) {
	                other = new Literal(other);
	            }
	            return new GTeq(this, other);
	        }
	    }, {
	        key: "lt",
	        value: function lt(other) {
	            return new Not(this.ge(other));
	        }
	    }, {
	        key: "gt",
	        value: function gt(other) {
	            return new Not(this.le(other));
	        }
	    }, {
	        key: "ne",
	        value: function ne(other) {
	            return new Not(this.eq(other));
	        }
	    }]);

	    return Value;
	}();

	exports.Value = Value;
	/** @ignore */

	var Literal = function (_Value) {
	    _inherits(Literal, _Value);

	    function Literal(v) {
	        _classCallCheck(this, Literal);

	        var _this = _possibleConstructorReturn(this, (Literal.__proto__ || Object.getPrototypeOf(Literal)).call(this));

	        _this.v = v;
	        return _this;
	    }

	    return Literal;
	}(Value);

	exports.Literal = Literal;
	/** @ignore */

	var Col = function (_Value2) {
	    _inherits(Col, _Value2);

	    function Col(name) {
	        _classCallCheck(this, Col);

	        var _this2 = _possibleConstructorReturn(this, (Col.__proto__ || Object.getPrototypeOf(Col)).call(this));

	        _this2.name = name;
	        return _this2;
	    }

	    _createClass(Col, [{
	        key: "bind",
	        value: function bind(batch) {
	            if (!this.colidx) {
	                // Assume column index doesn't change between calls to bind
	                //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);
	                this.colidx = -1;
	                var fields = batch.schema.fields;
	                for (var idx = -1; ++idx < fields.length;) {
	                    if (fields[idx].name === this.name) {
	                        this.colidx = idx;
	                        break;
	                    }
	                }
	                if (this.colidx < 0) {
	                    throw new Error("Failed to bind Col \"" + this.name + "\"");
	                }
	            }
	            var vec = this.vector = batch.getChildAt(this.colidx);
	            return function (idx) {
	                return vec.get(idx);
	            };
	        }
	    }]);

	    return Col;
	}(Value);

	exports.Col = Col;
	/** @ignore */

	var Predicate = function () {
	    function Predicate() {
	        _classCallCheck(this, Predicate);
	    }

	    _createClass(Predicate, [{
	        key: "and",
	        value: function and() {
	            for (var _len = arguments.length, expr = Array(_len), _key = 0; _key < _len; _key++) {
	                expr[_key] = arguments[_key];
	            }

	            return new (Function.prototype.bind.apply(And, [null].concat([this], expr)))();
	        }
	    }, {
	        key: "or",
	        value: function or() {
	            for (var _len2 = arguments.length, expr = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                expr[_key2] = arguments[_key2];
	            }

	            return new (Function.prototype.bind.apply(Or, [null].concat([this], expr)))();
	        }
	    }, {
	        key: "not",
	        value: function not() {
	            return new Not(this);
	        }
	    }]);

	    return Predicate;
	}();

	exports.Predicate = Predicate;
	/** @ignore */

	var ComparisonPredicate = function (_Predicate) {
	    _inherits(ComparisonPredicate, _Predicate);

	    function ComparisonPredicate(left, right) {
	        _classCallCheck(this, ComparisonPredicate);

	        var _this3 = _possibleConstructorReturn(this, (ComparisonPredicate.__proto__ || Object.getPrototypeOf(ComparisonPredicate)).call(this));

	        _this3.left = left;
	        _this3.right = right;
	        return _this3;
	    }

	    _createClass(ComparisonPredicate, [{
	        key: "bind",
	        value: function bind(batch) {
	            if (this.left instanceof Literal) {
	                if (this.right instanceof Literal) {
	                    return this._bindLitLit(batch, this.left, this.right);
	                } else {
	                    // right is a Col
	                    return this._bindLitCol(batch, this.left, this.right);
	                }
	            } else {
	                // left is a Col
	                if (this.right instanceof Literal) {
	                    return this._bindColLit(batch, this.left, this.right);
	                } else {
	                    // right is a Col
	                    return this._bindColCol(batch, this.left, this.right);
	                }
	            }
	        }
	    }]);

	    return ComparisonPredicate;
	}(Predicate);

	exports.ComparisonPredicate = ComparisonPredicate;
	/** @ignore */

	var CombinationPredicate = function (_Predicate2) {
	    _inherits(CombinationPredicate, _Predicate2);

	    function CombinationPredicate() {
	        _classCallCheck(this, CombinationPredicate);

	        var _this4 = _possibleConstructorReturn(this, (CombinationPredicate.__proto__ || Object.getPrototypeOf(CombinationPredicate)).call(this));

	        for (var _len3 = arguments.length, children = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	            children[_key3] = arguments[_key3];
	        }

	        _this4.children = children;
	        return _this4;
	    }

	    return CombinationPredicate;
	}(Predicate);

	exports.CombinationPredicate = CombinationPredicate;
	// add children to prototype so it doesn't get mangled in es2015/umd
	CombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety
	/** @ignore */

	var And = function (_CombinationPredicate) {
	    _inherits(And, _CombinationPredicate);

	    function And() {
	        var _ref;

	        for (var _len4 = arguments.length, children = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	            children[_key4] = arguments[_key4];
	        }

	        _classCallCheck(this, And);

	        // Flatten any Ands
	        children = children.reduce(function (accum, p) {
	            return accum.concat(p instanceof And ? p.children : p);
	        }, []);
	        return _possibleConstructorReturn(this, (_ref = And.__proto__ || Object.getPrototypeOf(And)).call.apply(_ref, [this].concat(_toConsumableArray(children))));
	    }

	    _createClass(And, [{
	        key: "bind",
	        value: function bind(batch) {
	            var bound = this.children.map(function (p) {
	                return p.bind(batch);
	            });
	            return function (idx, batch) {
	                return bound.every(function (p) {
	                    return p(idx, batch);
	                });
	            };
	        }
	    }]);

	    return And;
	}(CombinationPredicate);

	exports.And = And;
	/** @ignore */

	var Or = function (_CombinationPredicate2) {
	    _inherits(Or, _CombinationPredicate2);

	    function Or() {
	        var _ref2;

	        for (var _len5 = arguments.length, children = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	            children[_key5] = arguments[_key5];
	        }

	        _classCallCheck(this, Or);

	        // Flatten any Ors
	        children = children.reduce(function (accum, p) {
	            return accum.concat(p instanceof Or ? p.children : p);
	        }, []);
	        return _possibleConstructorReturn(this, (_ref2 = Or.__proto__ || Object.getPrototypeOf(Or)).call.apply(_ref2, [this].concat(_toConsumableArray(children))));
	    }

	    _createClass(Or, [{
	        key: "bind",
	        value: function bind(batch) {
	            var bound = this.children.map(function (p) {
	                return p.bind(batch);
	            });
	            return function (idx, batch) {
	                return bound.some(function (p) {
	                    return p(idx, batch);
	                });
	            };
	        }
	    }]);

	    return Or;
	}(CombinationPredicate);

	exports.Or = Or;
	/** @ignore */

	var Equals = function (_ComparisonPredicate) {
	    _inherits(Equals, _ComparisonPredicate);

	    function Equals() {
	        _classCallCheck(this, Equals);

	        return _possibleConstructorReturn(this, (Equals.__proto__ || Object.getPrototypeOf(Equals)).apply(this, arguments));
	    }

	    _createClass(Equals, [{
	        key: "_bindLitLit",
	        value: function _bindLitLit(_batch, left, right) {
	            var rtrn = left.v == right.v;
	            return function () {
	                return rtrn;
	            };
	        }
	    }, {
	        key: "_bindColCol",
	        value: function _bindColCol(batch, left, right) {
	            var left_func = left.bind(batch);
	            var right_func = right.bind(batch);
	            return function (idx, batch) {
	                return left_func(idx, batch) == right_func(idx, batch);
	            };
	        }
	    }, {
	        key: "_bindColLit",
	        value: function _bindColLit(batch, col, lit) {
	            var col_func = col.bind(batch);
	            if (col.vector instanceof dictionary_1.DictionaryVector) {
	                var key = void 0;
	                var vector = col.vector;
	                if (vector.dictionary !== this.lastDictionary) {
	                    key = vector.reverseLookup(lit.v);
	                    this.lastDictionary = vector.dictionary;
	                    this.lastKey = key;
	                } else {
	                    key = this.lastKey;
	                }
	                if (key === -1) {
	                    // the value doesn't exist in the dictionary - always return
	                    // false
	                    // TODO: special-case of PredicateFunc that encapsulates this
	                    // "always false" behavior. That way filtering operations don't
	                    // have to bother checking
	                    return function () {
	                        return false;
	                    };
	                } else {
	                    return function (idx) {
	                        return vector.getKey(idx) === key;
	                    };
	                }
	            } else {
	                return function (idx, cols) {
	                    return col_func(idx, cols) == lit.v;
	                };
	            }
	        }
	    }, {
	        key: "_bindLitCol",
	        value: function _bindLitCol(batch, lit, col) {
	            // Equals is commutative
	            return this._bindColLit(batch, col, lit);
	        }
	    }]);

	    return Equals;
	}(ComparisonPredicate);

	exports.Equals = Equals;
	/** @ignore */

	var LTeq = function (_ComparisonPredicate2) {
	    _inherits(LTeq, _ComparisonPredicate2);

	    function LTeq() {
	        _classCallCheck(this, LTeq);

	        return _possibleConstructorReturn(this, (LTeq.__proto__ || Object.getPrototypeOf(LTeq)).apply(this, arguments));
	    }

	    _createClass(LTeq, [{
	        key: "_bindLitLit",
	        value: function _bindLitLit(_batch, left, right) {
	            var rtrn = left.v <= right.v;
	            return function () {
	                return rtrn;
	            };
	        }
	    }, {
	        key: "_bindColCol",
	        value: function _bindColCol(batch, left, right) {
	            var left_func = left.bind(batch);
	            var right_func = right.bind(batch);
	            return function (idx, cols) {
	                return left_func(idx, cols) <= right_func(idx, cols);
	            };
	        }
	    }, {
	        key: "_bindColLit",
	        value: function _bindColLit(batch, col, lit) {
	            var col_func = col.bind(batch);
	            return function (idx, cols) {
	                return col_func(idx, cols) <= lit.v;
	            };
	        }
	    }, {
	        key: "_bindLitCol",
	        value: function _bindLitCol(batch, lit, col) {
	            var col_func = col.bind(batch);
	            return function (idx, cols) {
	                return lit.v <= col_func(idx, cols);
	            };
	        }
	    }]);

	    return LTeq;
	}(ComparisonPredicate);

	exports.LTeq = LTeq;
	/** @ignore */

	var GTeq = function (_ComparisonPredicate3) {
	    _inherits(GTeq, _ComparisonPredicate3);

	    function GTeq() {
	        _classCallCheck(this, GTeq);

	        return _possibleConstructorReturn(this, (GTeq.__proto__ || Object.getPrototypeOf(GTeq)).apply(this, arguments));
	    }

	    _createClass(GTeq, [{
	        key: "_bindLitLit",
	        value: function _bindLitLit(_batch, left, right) {
	            var rtrn = left.v >= right.v;
	            return function () {
	                return rtrn;
	            };
	        }
	    }, {
	        key: "_bindColCol",
	        value: function _bindColCol(batch, left, right) {
	            var left_func = left.bind(batch);
	            var right_func = right.bind(batch);
	            return function (idx, cols) {
	                return left_func(idx, cols) >= right_func(idx, cols);
	            };
	        }
	    }, {
	        key: "_bindColLit",
	        value: function _bindColLit(batch, col, lit) {
	            var col_func = col.bind(batch);
	            return function (idx, cols) {
	                return col_func(idx, cols) >= lit.v;
	            };
	        }
	    }, {
	        key: "_bindLitCol",
	        value: function _bindLitCol(batch, lit, col) {
	            var col_func = col.bind(batch);
	            return function (idx, cols) {
	                return lit.v >= col_func(idx, cols);
	            };
	        }
	    }]);

	    return GTeq;
	}(ComparisonPredicate);

	exports.GTeq = GTeq;
	/** @ignore */

	var Not = function (_Predicate3) {
	    _inherits(Not, _Predicate3);

	    function Not(child) {
	        _classCallCheck(this, Not);

	        var _this10 = _possibleConstructorReturn(this, (Not.__proto__ || Object.getPrototypeOf(Not)).call(this));

	        _this10.child = child;
	        return _this10;
	    }

	    _createClass(Not, [{
	        key: "bind",
	        value: function bind(batch) {
	            var func = this.child.bind(batch);
	            return function (idx, batch) {
	                return !func(idx, batch);
	            };
	        }
	    }]);

	    return Not;
	}(Predicate);

	exports.Not = Not;
	/** @ignore */

	var CustomPredicate = function (_Predicate4) {
	    _inherits(CustomPredicate, _Predicate4);

	    function CustomPredicate(next, bind_) {
	        _classCallCheck(this, CustomPredicate);

	        var _this11 = _possibleConstructorReturn(this, (CustomPredicate.__proto__ || Object.getPrototypeOf(CustomPredicate)).call(this));

	        _this11.next = next;
	        _this11.bind_ = bind_;
	        return _this11;
	    }

	    _createClass(CustomPredicate, [{
	        key: "bind",
	        value: function bind(batch) {
	            this.bind_(batch);
	            return this.next;
	        }
	    }]);

	    return CustomPredicate;
	}(Predicate);

	exports.CustomPredicate = CustomPredicate;
	function lit(v) {
	    return new Literal(v);
	}
	exports.lit = lit;
	function col(n) {
	    return new Col(n);
	}
	exports.col = col;
	function and() {
	    for (var _len6 = arguments.length, p = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        p[_key6] = arguments[_key6];
	    }

	    return new (Function.prototype.bind.apply(And, [null].concat(p)))();
	}
	exports.and = and;
	function or() {
	    for (var _len7 = arguments.length, p = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        p[_key7] = arguments[_key7];
	    }

	    return new (Function.prototype.bind.apply(Or, [null].concat(p)))();
	}
	exports.or = or;
	function custom(next, bind) {
	    return new CustomPredicate(next, bind);
	}
	exports.custom = custom;

	//# sourceMappingURL=predicate.js.map

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var punycode = __webpack_require__(162);
	var util = __webpack_require__(163);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(164);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)(module), (function() { return this; }())))

/***/ }),
/* 163 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(165);
	exports.encode = exports.stringify = __webpack_require__(166);


/***/ }),
/* 165 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ }),
/* 166 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ })
/******/ ]);