(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("../src/noop.js"));
	else if(typeof define === 'function' && define.amd)
		define(["../src/noop.js"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("../src/noop.js")) : factory(root["../src/noop.js"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_22__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(4);
	__webpack_require__(6);
	__webpack_require__(8);
	__webpack_require__(10);
	__webpack_require__(12);
	module.exports = __webpack_require__(14);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(3))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(src) {
		function log(error) {
			(typeof console !== "undefined")
			&& (console.error || console.log)("[Script Loader]", error);
		}

		// Check for IE =< 8
		function isIE() {
			return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
		}

		try {
			if (typeof execScript !== "undefined" && isIE()) {
				execScript(src);
			} else if (typeof eval !== "undefined") {
				eval.call(null, src);
			} else {
				log("EvalError: No eval function available");
			}
		} catch (error) {
			log(error);
		}
	}


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*jshint evil:true*/\n\n/**\n * The Thrift namespace houses the Apache Thrift JavaScript library\n * elements providing JavaScript bindings for the Apache Thrift RPC\n * system. End users will typically only directly make use of the\n * Transport (TXHRTransport/TWebSocketTransport) and Protocol\n * (TJSONPRotocol/TBinaryProtocol) constructors.\n *\n * Object methods beginning with a __ (e.g. __onOpen()) are internal\n * and should not be called outside of the object's own methods.\n *\n * This library creates one global object: Thrift\n * Code in this library must never create additional global identifiers,\n * all features must be scoped within the Thrift namespace.\n * @namespace\n * @example\n *     var transport = new Thrift.Transport('http://localhost:8585');\n *     var protocol  = new Thrift.Protocol(transport);\n *     var client = new MyThriftSvcClient(protocol);\n *     var result = client.MyMethod();\n */\n\nvar Thrift = {\n    /**\n     * Thrift JavaScript library version.\n     * @readonly\n     * @const {string} Version\n     * @memberof Thrift\n     */\n    Version: '0.13.0',\n\n    /**\n     * Thrift IDL type string to Id mapping.\n     * @readonly\n     * @property {number}  STOP   - End of a set of fields.\n     * @property {number}  VOID   - No value (only legal for return types).\n     * @property {number}  BOOL   - True/False integer.\n     * @property {number}  BYTE   - Signed 8 bit integer.\n     * @property {number}  I08    - Signed 8 bit integer.\n     * @property {number}  DOUBLE - 64 bit IEEE 854 floating point.\n     * @property {number}  I16    - Signed 16 bit integer.\n     * @property {number}  I32    - Signed 32 bit integer.\n     * @property {number}  I64    - Signed 64 bit integer.\n     * @property {number}  STRING - Array of bytes representing a string of characters.\n     * @property {number}  UTF7   - Array of bytes representing a string of UTF7 encoded characters.\n     * @property {number}  STRUCT - A multifield type.\n     * @property {number}  MAP    - A collection type (map/associative-array/dictionary).\n     * @property {number}  SET    - A collection type (unordered and without repeated values).\n     * @property {number}  LIST   - A collection type (unordered).\n     * @property {number}  UTF8   - Array of bytes representing a string of UTF8 encoded characters.\n     * @property {number}  UTF16  - Array of bytes representing a string of UTF16 encoded characters.\n     */\n    Type: {\n        STOP: 0,\n        VOID: 1,\n        BOOL: 2,\n        BYTE: 3,\n        I08: 3,\n        DOUBLE: 4,\n        I16: 6,\n        I32: 8,\n        I64: 10,\n        STRING: 11,\n        UTF7: 11,\n        STRUCT: 12,\n        MAP: 13,\n        SET: 14,\n        LIST: 15,\n        UTF8: 16,\n        UTF16: 17\n    },\n\n    /**\n     * Thrift RPC message type string to Id mapping.\n     * @readonly\n     * @property {number}  CALL      - RPC call sent from client to server.\n     * @property {number}  REPLY     - RPC call normal response from server to client.\n     * @property {number}  EXCEPTION - RPC call exception response from server to client.\n     * @property {number}  ONEWAY    - Oneway RPC call from client to server with no response.\n     */\n    MessageType: {\n        CALL: 1,\n        REPLY: 2,\n        EXCEPTION: 3,\n        ONEWAY: 4\n    },\n\n    /**\n     * Utility function returning the count of an object's own properties.\n     * @param {object} obj - Object to test.\n     * @returns {number} number of object's own properties\n     */\n    objectLength: function objectLength(obj) {\n        var length = 0;\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                length++;\n            }\n        }\n        return length;\n    },\n\n    /**\n     * Utility function to establish prototype inheritance.\n     * @see {@link http://javascript.crockford.com/prototypal.html|Prototypal Inheritance}\n     * @param {function} constructor - Contstructor function to set as derived.\n     * @param {function} superConstructor - Contstructor function to set as base.\n     * @param {string} [name] - Type name to set as name property in derived prototype.\n     */\n    inherits: function inherits(constructor, superConstructor, name) {\n        function F() {}\n        F.prototype = superConstructor.prototype;\n        constructor.prototype = new F();\n        constructor.prototype.name = name || '';\n    }\n};\n\n/**\n * Initializes a Thrift TException instance.\n * @constructor\n * @augments Error\n * @param {string} message - The TException message (distinct from the Error message).\n * @classdesc TException is the base class for all Thrift exceptions types.\n */\nThrift.TException = function (message) {\n    this.message = message;\n};\nThrift.inherits(Thrift.TException, Error, 'TException');\n\n/**\n * Returns the message set on the exception.\n * @readonly\n * @returns {string} exception message\n */\nThrift.TException.prototype.getMessage = function () {\n    return this.message;\n};\n\n/**\n * Thrift Application Exception type string to Id mapping.\n * @readonly\n * @property {number}  UNKNOWN                 - Unknown/undefined.\n * @property {number}  UNKNOWN_METHOD          - Client attempted to call a method unknown to the server.\n * @property {number}  INVALID_MESSAGE_TYPE    - Client passed an unknown/unsupported MessageType.\n * @property {number}  WRONG_METHOD_NAME       - Unused.\n * @property {number}  BAD_SEQUENCE_ID         - Unused in Thrift RPC, used to flag proprietary sequence number errors.\n * @property {number}  MISSING_RESULT          - Raised by a server processor if a handler fails to supply the required return result.\n * @property {number}  INTERNAL_ERROR          - Something bad happened.\n * @property {number}  PROTOCOL_ERROR          - The protocol layer failed to serialize or deserialize data.\n * @property {number}  INVALID_TRANSFORM       - Unused.\n * @property {number}  INVALID_PROTOCOL        - The protocol (or version) is not supported.\n * @property {number}  UNSUPPORTED_CLIENT_TYPE - Unused.\n */\nThrift.TApplicationExceptionType = {\n    UNKNOWN: 0,\n    UNKNOWN_METHOD: 1,\n    INVALID_MESSAGE_TYPE: 2,\n    WRONG_METHOD_NAME: 3,\n    BAD_SEQUENCE_ID: 4,\n    MISSING_RESULT: 5,\n    INTERNAL_ERROR: 6,\n    PROTOCOL_ERROR: 7,\n    INVALID_TRANSFORM: 8,\n    INVALID_PROTOCOL: 9,\n    UNSUPPORTED_CLIENT_TYPE: 10\n};\n\n/**\n * Initializes a Thrift TApplicationException instance.\n * @constructor\n * @augments Thrift.TException\n * @param {string} message - The TApplicationException message (distinct from the Error message).\n * @param {Thrift.TApplicationExceptionType} [code] - The TApplicationExceptionType code.\n * @classdesc TApplicationException is the exception class used to propagate exceptions from an RPC server back to a calling client.\n*/\nThrift.TApplicationException = function (message, code) {\n    this.message = message;\n    this.code = typeof code === 'number' ? code : 0;\n};\nThrift.inherits(Thrift.TApplicationException, Thrift.TException, 'TApplicationException');\n\n/**\n * Read a TApplicationException from the supplied protocol.\n * @param {object} input - The input protocol to read from.\n */\nThrift.TApplicationException.prototype.read = function (input) {\n    while (1) {\n        var ret = input.readFieldBegin();\n\n        if (ret.ftype == Thrift.Type.STOP) {\n            break;\n        }\n\n        var fid = ret.fid;\n\n        switch (fid) {\n            case 1:\n                if (ret.ftype == Thrift.Type.STRING) {\n                    ret = input.readString();\n                    this.message = ret.value;\n                } else {\n                    ret = input.skip(ret.ftype);\n                }\n                break;\n            case 2:\n                if (ret.ftype == Thrift.Type.I32) {\n                    ret = input.readI32();\n                    this.code = ret.value;\n                } else {\n                    ret = input.skip(ret.ftype);\n                }\n                break;\n            default:\n                ret = input.skip(ret.ftype);\n                break;\n        }\n\n        input.readFieldEnd();\n    }\n\n    input.readStructEnd();\n};\n\n/**\n * Wite a TApplicationException to the supplied protocol.\n * @param {object} output - The output protocol to write to.\n */\nThrift.TApplicationException.prototype.write = function (output) {\n    output.writeStructBegin('TApplicationException');\n\n    if (this.message) {\n        output.writeFieldBegin('message', Thrift.Type.STRING, 1);\n        output.writeString(this.getMessage());\n        output.writeFieldEnd();\n    }\n\n    if (this.code) {\n        output.writeFieldBegin('type', Thrift.Type.I32, 2);\n        output.writeI32(this.code);\n        output.writeFieldEnd();\n    }\n\n    output.writeFieldStop();\n    output.writeStructEnd();\n};\n\n/**\n * Returns the application exception code set on the exception.\n * @readonly\n * @returns {Thrift.TApplicationExceptionType} exception code\n */\nThrift.TApplicationException.prototype.getCode = function () {\n    return this.code;\n};\n\nThrift.TProtocolExceptionType = {\n    UNKNOWN: 0,\n    INVALID_DATA: 1,\n    NEGATIVE_SIZE: 2,\n    SIZE_LIMIT: 3,\n    BAD_VERSION: 4,\n    NOT_IMPLEMENTED: 5,\n    DEPTH_LIMIT: 6\n};\n\nThrift.TProtocolException = function TProtocolException(type, message) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.type = type;\n    this.message = message;\n};\nThrift.inherits(Thrift.TProtocolException, Thrift.TException, 'TProtocolException');\n\n/**\n * Constructor Function for the XHR transport.\n * If you do not specify a url then you must handle XHR operations on\n * your own. This type can also be constructed using the Transport alias\n * for backward compatibility.\n * @constructor\n * @param {string} [url] - The URL to connect to.\n * @classdesc The Apache Thrift Transport layer performs byte level I/O\n * between RPC clients and servers. The JavaScript TXHRTransport object\n * uses Http[s]/XHR. Target servers must implement the http[s] transport\n * (see: node.js example server_http.js).\n * @example\n *     var transport = new Thrift.TXHRTransport(\"http://localhost:8585\");\n */\nThrift.Transport = Thrift.TXHRTransport = function (url, options) {\n    this.url = url;\n    this.wpos = 0;\n    this.rpos = 0;\n    this.useCORS = options && options.useCORS;\n    this.customHeaders = options ? options.customHeaders ? options.customHeaders : {} : {};\n    this.send_buf = '';\n    this.recv_buf = '';\n};\n\nThrift.TXHRTransport.prototype = {\n    /**\n     * Gets the browser specific XmlHttpRequest Object.\n     * @returns {object} the browser XHR interface object\n     */\n    getXmlHttpRequestObject: function getXmlHttpRequestObject() {\n        try {\n            return new XMLHttpRequest();\n        } catch (e1) {}\n        try {\n            return new ActiveXObject('Msxml2.XMLHTTP');\n        } catch (e2) {}\n        try {\n            return new ActiveXObject('Microsoft.XMLHTTP');\n        } catch (e3) {}\n\n        throw \"Your browser doesn't support XHR.\";\n    },\n\n    /**\n     * Sends the current XRH request if the transport was created with a URL\n     * and the async parameter is false. If the transport was not created with\n     * a URL, or the async parameter is True and no callback is provided, or\n     * the URL is an empty string, the current send buffer is returned.\n     * @param {object} async - If true the current send buffer is returned.\n     * @param {object} callback - Optional async completion callback\n     * @returns {undefined|string} Nothing or the current send buffer.\n     * @throws {string} If XHR fails.\n     */\n    flush: function flush(async, callback) {\n        var self = this;\n        if (async && !callback || this.url === undefined || this.url === '') {\n            return this.send_buf;\n        }\n\n        var xreq = this.getXmlHttpRequestObject();\n\n        if (xreq.overrideMimeType) {\n            xreq.overrideMimeType('application/vnd.apache.thrift.json; charset=utf-8');\n        }\n\n        if (callback) {\n            //Ignore XHR callbacks until the data arrives, then call the\n            //  client's callback\n            xreq.onreadystatechange = function () {\n                var clientCallback = callback;\n                return function () {\n                    if (this.readyState == 4 && this.status == 200) {\n                        self.setRecvBuffer(this.responseText);\n                        clientCallback();\n                    }\n                };\n            }();\n\n            // detect net::ERR_CONNECTION_REFUSED and call the callback.\n            xreq.onerror = function () {\n                var clientCallback = callback;\n                return function () {\n                    clientCallback();\n                };\n            }();\n        }\n\n        xreq.open('POST', this.url, !!async);\n\n        // add custom headers\n        Object.keys(self.customHeaders).forEach(function (prop) {\n            xreq.setRequestHeader(prop, self.customHeaders[prop]);\n        });\n\n        if (xreq.setRequestHeader) {\n            xreq.setRequestHeader('Accept', 'application/vnd.apache.thrift.json; charset=utf-8');\n            xreq.setRequestHeader('Content-Type', 'application/vnd.apache.thrift.json; charset=utf-8');\n        }\n\n        xreq.send(this.send_buf);\n        if (async && callback) {\n            return;\n        }\n\n        if (xreq.readyState != 4) {\n            throw 'encountered an unknown ajax ready state: ' + xreq.readyState;\n        }\n\n        if (xreq.status != 200) {\n            throw 'encountered a unknown request status: ' + xreq.status;\n        }\n\n        this.recv_buf = xreq.responseText;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Creates a jQuery XHR object to be used for a Thrift server call.\n     * @param {object} client - The Thrift Service client object generated by the IDL compiler.\n     * @param {object} postData - The message to send to the server.\n     * @param {function} args - The original call arguments with the success call back at the end.\n     * @param {function} recv_method - The Thrift Service Client receive method for the call.\n     * @returns {object} A new jQuery XHR object.\n     * @throws {string} If the jQuery version is prior to 1.5 or if jQuery is not found.\n     */\n    jqRequest: function jqRequest(client, postData, args, recv_method) {\n        if (typeof jQuery === 'undefined' || typeof jQuery.Deferred === 'undefined') {\n            throw 'Thrift.js requires jQuery 1.5+ to use asynchronous requests';\n        }\n\n        var thriftTransport = this;\n\n        var jqXHR = jQuery.ajax({\n            url: this.url,\n            data: postData,\n            type: 'POST',\n            cache: false,\n            contentType: 'application/vnd.apache.thrift.json; charset=utf-8',\n            dataType: 'text thrift',\n            converters: {\n                'text thrift': function textThrift(responseData) {\n                    thriftTransport.setRecvBuffer(responseData);\n                    var value = recv_method.call(client);\n                    return value;\n                }\n            },\n            context: client,\n            success: jQuery.makeArray(args).pop(),\n            beforeSend: function beforeSend(xreq) {\n                Object.keys(thriftTransport.customHeaders).forEach(function (prop) {\n                    xreq.setRequestHeader(prop, thriftTransport.customHeaders[prop]);\n                });\n            }\n        });\n\n        return jqXHR;\n    },\n\n    /**\n     * Sets the buffer to provide the protocol when deserializing.\n     * @param {string} buf - The buffer to supply the protocol.\n     */\n    setRecvBuffer: function setRecvBuffer(buf) {\n        this.recv_buf = buf;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Returns true if the transport is open, XHR always returns true.\n     * @readonly\n     * @returns {boolean} Always True.\n     */\n    isOpen: function isOpen() {\n        return true;\n    },\n\n    /**\n     * Opens the transport connection, with XHR this is a nop.\n     */\n    open: function open() {},\n\n    /**\n     * Closes the transport connection, with XHR this is a nop.\n     */\n    close: function close() {},\n\n    /**\n     * Returns the specified number of characters from the response\n     * buffer.\n     * @param {number} len - The number of characters to return.\n     * @returns {string} Characters sent by the server.\n     */\n    read: function read(len) {\n        var avail = this.wpos - this.rpos;\n\n        if (avail === 0) {\n            return '';\n        }\n\n        var give = len;\n\n        if (avail < len) {\n            give = avail;\n        }\n\n        var ret = this.read_buf.substr(this.rpos, give);\n        this.rpos += give;\n\n        //clear buf when complete?\n        return ret;\n    },\n\n    /**\n     * Returns the entire response buffer.\n     * @returns {string} Characters sent by the server.\n     */\n    readAll: function readAll() {\n        return this.recv_buf;\n    },\n\n    /**\n     * Sets the send buffer to buf.\n     * @param {string} buf - The buffer to send.\n     */\n    write: function write(buf) {\n        this.send_buf = buf;\n    },\n\n    /**\n     * Returns the send buffer.\n     * @readonly\n     * @returns {string} The send buffer.\n     */\n    getSendBuffer: function getSendBuffer() {\n        return this.send_buf;\n    }\n\n};\n\n/**\n * Constructor Function for the WebSocket transport.\n * @constructor\n * @param {string} [url] - The URL to connect to.\n * @classdesc The Apache Thrift Transport layer performs byte level I/O\n * between RPC clients and servers. The JavaScript TWebSocketTransport object\n * uses the WebSocket protocol. Target servers must implement WebSocket.\n * (see: node.js example server_http.js).\n * @example\n *   var transport = new Thrift.TWebSocketTransport(\"http://localhost:8585\");\n */\nThrift.TWebSocketTransport = function (url) {\n    this.__reset(url);\n};\n\nThrift.TWebSocketTransport.prototype = {\n    __reset: function __reset(url) {\n        this.url = url; //Where to connect\n        this.socket = null; //The web socket\n        this.callbacks = []; //Pending callbacks\n        this.send_pending = []; //Buffers/Callback pairs waiting to be sent\n        this.send_buf = ''; //Outbound data, immutable until sent\n        this.recv_buf = ''; //Inbound data\n        this.rb_wpos = 0; //Network write position in receive buffer\n        this.rb_rpos = 0; //Client read position in receive buffer\n    },\n\n    /**\n     * Sends the current WS request and registers callback. The async\n     * parameter is ignored (WS flush is always async) and the callback\n     * function parameter is required.\n     * @param {object} async - Ignored.\n     * @param {object} callback - The client completion callback.\n     * @returns {undefined|string} Nothing (undefined)\n     */\n    flush: function flush(async, callback) {\n        var self = this;\n        if (this.isOpen()) {\n            //Send data and register a callback to invoke the client callback\n            this.socket.send(this.send_buf);\n            this.callbacks.push(function () {\n                var clientCallback = callback;\n                return function (msg) {\n                    self.setRecvBuffer(msg);\n                    if (clientCallback) {\n                        clientCallback();\n                    }\n                };\n            }());\n        } else {\n            //Queue the send to go out __onOpen\n            this.send_pending.push({\n                buf: this.send_buf,\n                cb: callback\n            });\n        }\n    },\n\n    __onOpen: function __onOpen() {\n        var self = this;\n        if (this.send_pending.length > 0) {\n            //If the user made calls before the connection was fully\n            //open, send them now\n            this.send_pending.forEach(function (elem) {\n                self.socket.send(elem.buf);\n                self.callbacks.push(function () {\n                    var clientCallback = elem.cb;\n                    return function (msg) {\n                        self.setRecvBuffer(msg);\n                        clientCallback();\n                    };\n                }());\n            });\n            this.send_pending = [];\n        }\n    },\n\n    __onClose: function __onClose(evt) {\n        this.__reset(this.url);\n    },\n\n    __onMessage: function __onMessage(evt) {\n        if (this.callbacks.length) {\n            this.callbacks.shift()(evt.data);\n        }\n    },\n\n    __onError: function __onError(evt) {\n        console.log('Thrift WebSocket Error: ' + evt.toString());\n        this.socket.close();\n    },\n\n    /**\n     * Sets the buffer to use when receiving server responses.\n     * @param {string} buf - The buffer to receive server responses.\n     */\n    setRecvBuffer: function setRecvBuffer(buf) {\n        this.recv_buf = buf;\n        this.recv_buf_sz = this.recv_buf.length;\n        this.wpos = this.recv_buf.length;\n        this.rpos = 0;\n    },\n\n    /**\n     * Returns true if the transport is open\n     * @readonly\n     * @returns {boolean}\n     */\n    isOpen: function isOpen() {\n        return this.socket && this.socket.readyState == this.socket.OPEN;\n    },\n\n    /**\n     * Opens the transport connection\n     */\n    open: function open() {\n        //If OPEN/CONNECTING/CLOSING ignore additional opens\n        if (this.socket && this.socket.readyState != this.socket.CLOSED) {\n            return;\n        }\n        //If there is no socket or the socket is closed:\n        this.socket = new WebSocket(this.url);\n        this.socket.onopen = this.__onOpen.bind(this);\n        this.socket.onmessage = this.__onMessage.bind(this);\n        this.socket.onerror = this.__onError.bind(this);\n        this.socket.onclose = this.__onClose.bind(this);\n    },\n\n    /**\n     * Closes the transport connection\n     */\n    close: function close() {\n        this.socket.close();\n    },\n\n    /**\n     * Returns the specified number of characters from the response\n     * buffer.\n     * @param {number} len - The number of characters to return.\n     * @returns {string} Characters sent by the server.\n     */\n    read: function read(len) {\n        var avail = this.wpos - this.rpos;\n\n        if (avail === 0) {\n            return '';\n        }\n\n        var give = len;\n\n        if (avail < len) {\n            give = avail;\n        }\n\n        var ret = this.read_buf.substr(this.rpos, give);\n        this.rpos += give;\n\n        //clear buf when complete?\n        return ret;\n    },\n\n    /**\n     * Returns the entire response buffer.\n     * @returns {string} Characters sent by the server.\n     */\n    readAll: function readAll() {\n        return this.recv_buf;\n    },\n\n    /**\n     * Sets the send buffer to buf.\n     * @param {string} buf - The buffer to send.\n     */\n    write: function write(buf) {\n        this.send_buf = buf;\n    },\n\n    /**\n     * Returns the send buffer.\n     * @readonly\n     * @returns {string} The send buffer.\n     */\n    getSendBuffer: function getSendBuffer() {\n        return this.send_buf;\n    }\n\n};\n\n/**\n * Initializes a Thrift JSON protocol instance.\n * @constructor\n * @param {Thrift.Transport} transport - The transport to serialize to/from.\n * @classdesc Apache Thrift Protocols perform serialization which enables cross\n * language RPC. The Protocol type is the JavaScript browser implementation\n * of the Apache Thrift TJSONProtocol.\n * @example\n *     var protocol  = new Thrift.Protocol(transport);\n */\nThrift.TJSONProtocol = Thrift.Protocol = function (transport) {\n    this.tstack = [];\n    this.tpos = [];\n    this.transport = transport;\n};\n\n/**\n * Thrift IDL type Id to string mapping.\n * @readonly\n * @see {@link Thrift.Type}\n */\nThrift.Protocol.Type = {};\nThrift.Protocol.Type[Thrift.Type.BOOL] = '\"tf\"';\nThrift.Protocol.Type[Thrift.Type.BYTE] = '\"i8\"';\nThrift.Protocol.Type[Thrift.Type.I16] = '\"i16\"';\nThrift.Protocol.Type[Thrift.Type.I32] = '\"i32\"';\nThrift.Protocol.Type[Thrift.Type.I64] = '\"i64\"';\nThrift.Protocol.Type[Thrift.Type.DOUBLE] = '\"dbl\"';\nThrift.Protocol.Type[Thrift.Type.STRUCT] = '\"rec\"';\nThrift.Protocol.Type[Thrift.Type.STRING] = '\"str\"';\nThrift.Protocol.Type[Thrift.Type.MAP] = '\"map\"';\nThrift.Protocol.Type[Thrift.Type.LIST] = '\"lst\"';\nThrift.Protocol.Type[Thrift.Type.SET] = '\"set\"';\n\n/**\n * Thrift IDL type string to Id mapping.\n * @readonly\n * @see {@link Thrift.Type}\n */\nThrift.Protocol.RType = {};\nThrift.Protocol.RType.tf = Thrift.Type.BOOL;\nThrift.Protocol.RType.i8 = Thrift.Type.BYTE;\nThrift.Protocol.RType.i16 = Thrift.Type.I16;\nThrift.Protocol.RType.i32 = Thrift.Type.I32;\nThrift.Protocol.RType.i64 = Thrift.Type.I64;\nThrift.Protocol.RType.dbl = Thrift.Type.DOUBLE;\nThrift.Protocol.RType.rec = Thrift.Type.STRUCT;\nThrift.Protocol.RType.str = Thrift.Type.STRING;\nThrift.Protocol.RType.map = Thrift.Type.MAP;\nThrift.Protocol.RType.lst = Thrift.Type.LIST;\nThrift.Protocol.RType.set = Thrift.Type.SET;\n\n/**\n * The TJSONProtocol version number.\n * @readonly\n * @const {number} Version\n * @memberof Thrift.Protocol\n */\nThrift.Protocol.Version = 1;\n\nThrift.Protocol.prototype = {\n    /**\n     * Returns the underlying transport.\n     * @readonly\n     * @returns {Thrift.Transport} The underlying transport.\n     */\n    getTransport: function getTransport() {\n        return this.transport;\n    },\n\n    /**\n     * Serializes the beginning of a Thrift RPC message.\n     * @param {string} name - The service method to call.\n     * @param {Thrift.MessageType} messageType - The type of method call.\n     * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).\n     */\n    writeMessageBegin: function writeMessageBegin(name, messageType, seqid) {\n        this.tstack = [];\n        this.tpos = [];\n\n        this.tstack.push([Thrift.Protocol.Version, '\"' + name + '\"', messageType, seqid]);\n    },\n\n    /**\n     * Serializes the end of a Thrift RPC message.\n     */\n    writeMessageEnd: function writeMessageEnd() {\n        var obj = this.tstack.pop();\n\n        this.wobj = this.tstack.pop();\n        this.wobj.push(obj);\n\n        this.wbuf = '[' + this.wobj.join(',') + ']';\n\n        this.transport.write(this.wbuf);\n    },\n\n    /**\n     * Serializes the beginning of a struct.\n     * @param {string} name - The name of the struct.\n     */\n    writeStructBegin: function writeStructBegin(name) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push({});\n    },\n\n    /**\n     * Serializes the end of a struct.\n     */\n    writeStructEnd: function writeStructEnd() {\n\n        var p = this.tpos.pop();\n        var struct = this.tstack[p];\n        var str = '{';\n        var first = true;\n        for (var key in struct) {\n            if (first) {\n                first = false;\n            } else {\n                str += ',';\n            }\n\n            str += key + ':' + struct[key];\n        }\n\n        str += '}';\n        this.tstack[p] = str;\n    },\n\n    /**\n     * Serializes the beginning of a struct field.\n     * @param {string} name - The name of the field.\n     * @param {Thrift.Protocol.Type} fieldType - The data type of the field.\n     * @param {number} fieldId - The field's unique identifier.\n     */\n    writeFieldBegin: function writeFieldBegin(name, fieldType, fieldId) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push({ 'fieldId': '\"' + fieldId + '\"', 'fieldType': Thrift.Protocol.Type[fieldType]\n        });\n    },\n\n    /**\n     * Serializes the end of a field.\n     */\n    writeFieldEnd: function writeFieldEnd() {\n        var value = this.tstack.pop();\n        var fieldInfo = this.tstack.pop();\n\n        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' + fieldInfo.fieldType + ':' + value + '}';\n        this.tpos.pop();\n    },\n\n    /**\n     * Serializes the end of the set of fields for a struct.\n     */\n    writeFieldStop: function writeFieldStop() {\n        //na\n    },\n\n    /**\n     * Serializes the beginning of a map collection.\n     * @param {Thrift.Type} keyType - The data type of the key.\n     * @param {Thrift.Type} valType - The data type of the value.\n     * @param {number} [size] - The number of elements in the map (ignored).\n     */\n    writeMapBegin: function writeMapBegin(keyType, valType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[keyType], Thrift.Protocol.Type[valType], 0]);\n    },\n\n    /**\n     * Serializes the end of a map.\n     */\n    writeMapEnd: function writeMapEnd() {\n        var p = this.tpos.pop();\n\n        if (p == this.tstack.length) {\n            return;\n        }\n\n        if ((this.tstack.length - p - 1) % 2 !== 0) {\n            this.tstack.push('');\n        }\n\n        var size = (this.tstack.length - p - 1) / 2;\n\n        this.tstack[p][this.tstack[p].length - 1] = size;\n\n        var map = '}';\n        var first = true;\n        while (this.tstack.length > p + 1) {\n            var v = this.tstack.pop();\n            var k = this.tstack.pop();\n            if (first) {\n                first = false;\n            } else {\n                map = ',' + map;\n            }\n\n            if (!isNaN(k)) {\n                k = '\"' + k + '\"';\n            } //json \"keys\" need to be strings\n            map = k + ':' + v + map;\n        }\n        map = '{' + map;\n\n        this.tstack[p].push(map);\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /**\n     * Serializes the beginning of a list collection.\n     * @param {Thrift.Type} elemType - The data type of the elements.\n     * @param {number} size - The number of elements in the list.\n     */\n    writeListBegin: function writeListBegin(elemType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[elemType], size]);\n    },\n\n    /**\n     * Serializes the end of a list.\n     */\n    writeListEnd: function writeListEnd() {\n        var p = this.tpos.pop();\n\n        while (this.tstack.length > p + 1) {\n            var tmpVal = this.tstack[p + 1];\n            this.tstack.splice(p + 1, 1);\n            this.tstack[p].push(tmpVal);\n        }\n\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /**\n     * Serializes the beginning of a set collection.\n     * @param {Thrift.Type} elemType - The data type of the elements.\n     * @param {number} size - The number of elements in the list.\n     */\n    writeSetBegin: function writeSetBegin(elemType, size) {\n        this.tpos.push(this.tstack.length);\n        this.tstack.push([Thrift.Protocol.Type[elemType], size]);\n    },\n\n    /**\n     * Serializes the end of a set.\n     */\n    writeSetEnd: function writeSetEnd() {\n        var p = this.tpos.pop();\n\n        while (this.tstack.length > p + 1) {\n            var tmpVal = this.tstack[p + 1];\n            this.tstack.splice(p + 1, 1);\n            this.tstack[p].push(tmpVal);\n        }\n\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n    },\n\n    /** Serializes a boolean */\n    writeBool: function writeBool(value) {\n        this.tstack.push(value ? 1 : 0);\n    },\n\n    /** Serializes a number */\n    writeByte: function writeByte(i8) {\n        this.tstack.push(i8);\n    },\n\n    /** Serializes a number */\n    writeI16: function writeI16(i16) {\n        this.tstack.push(i16);\n    },\n\n    /** Serializes a number */\n    writeI32: function writeI32(i32) {\n        this.tstack.push(i32);\n    },\n\n    /** Serializes a number */\n    writeI64: function writeI64(i64) {\n        if (typeof i64 === 'number') {\n            this.tstack.push(i64);\n        } else {\n            this.tstack.push(Int64Util.toDecimalString(i64));\n        }\n    },\n\n    /** Serializes a number */\n    writeDouble: function writeDouble(dbl) {\n        this.tstack.push(dbl);\n    },\n\n    /** Serializes a string */\n    writeString: function writeString(str) {\n        // We do not encode uri components for wire transfer:\n        if (str === null) {\n            this.tstack.push(null);\n        } else {\n            // concat may be slower than building a byte buffer\n            var escapedString = '';\n            for (var i = 0; i < str.length; i++) {\n                var ch = str.charAt(i); // a single double quote: \"\n                if (ch === '\\\"') {\n                    escapedString += '\\\\\\\"'; // write out as: \\\"\n                } else if (ch === '\\\\') {\n                    // a single backslash\n                    escapedString += '\\\\\\\\'; // write out as double backslash\n                } else if (ch === '\\b') {\n                    // a single backspace: invisible\n                    escapedString += '\\\\b'; // write out as: \\b\"\n                } else if (ch === '\\f') {\n                    // a single formfeed: invisible\n                    escapedString += '\\\\f'; // write out as: \\f\"\n                } else if (ch === '\\n') {\n                    // a single newline: invisible\n                    escapedString += '\\\\n'; // write out as: \\n\"\n                } else if (ch === '\\r') {\n                    // a single return: invisible\n                    escapedString += '\\\\r'; // write out as: \\r\"\n                } else if (ch === '\\t') {\n                    // a single tab: invisible\n                    escapedString += '\\\\t'; // write out as: \\t\"\n                } else {\n                    escapedString += ch; // Else it need not be escaped\n                }\n            }\n            this.tstack.push('\"' + escapedString + '\"');\n        }\n    },\n\n    /** Serializes a string */\n    writeBinary: function writeBinary(binary) {\n        var str = '';\n        if (typeof binary == 'string') {\n            str = binary;\n        } else if (binary instanceof Uint8Array) {\n            var arr = binary;\n            for (var i = 0; i < arr.length; ++i) {\n                str += String.fromCharCode(arr[i]);\n            }\n        } else {\n            throw new TypeError('writeBinary only accepts String or Uint8Array.');\n        }\n        this.tstack.push('\"' + btoa(str) + '\"');\n    },\n\n    /**\n       @class\n       @name AnonReadMessageBeginReturn\n       @property {string} fname - The name of the service method.\n       @property {Thrift.MessageType} mtype - The type of message call.\n       @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).\n     */\n    /**\n     * Deserializes the beginning of a message.\n     * @returns {AnonReadMessageBeginReturn}\n     */\n    readMessageBegin: function readMessageBegin() {\n        this.rstack = [];\n        this.rpos = [];\n\n        var received = this.transport.readAll();\n\n        if (typeof JSONInt64 !== 'undefined' && typeof JSONInt64.parse === 'function') {\n            this.robj = JSONInt64.parse(received);\n        } else if (typeof JSON !== 'undefined' && typeof JSON.parse === 'function') {\n            this.robj = JSON.parse(received);\n        } else if (typeof jQuery !== 'undefined') {\n            this.robj = jQuery.parseJSON(received);\n        } else {\n            this.robj = eval(received);\n        }\n\n        var r = {};\n        var version = this.robj.shift();\n\n        if (version != Thrift.Protocol.Version) {\n            throw 'Wrong thrift protocol version: ' + version;\n        }\n\n        r.fname = this.robj.shift();\n        r.mtype = this.robj.shift();\n        r.rseqid = this.robj.shift();\n\n        //get to the main obj\n        this.rstack.push(this.robj.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a message. */\n    readMessageEnd: function readMessageEnd() {},\n\n    /**\n     * Deserializes the beginning of a struct.\n     * @param {string} [name] - The name of the struct (ignored)\n     * @returns {object} - An object with an empty string fname property\n     */\n    readStructBegin: function readStructBegin(name) {\n        var r = {};\n        r.fname = '';\n\n        //incase this is an array of structs\n        if (this.rstack[this.rstack.length - 1] instanceof Array) {\n            this.rstack.push(this.rstack[this.rstack.length - 1].shift());\n        }\n\n        return r;\n    },\n\n    /** Deserializes the end of a struct. */\n    readStructEnd: function readStructEnd() {\n        if (this.rstack[this.rstack.length - 2] instanceof Array) {\n            this.rstack.pop();\n        }\n    },\n\n    /**\n       @class\n       @name AnonReadFieldBeginReturn\n       @property {string} fname - The name of the field (always '').\n       @property {Thrift.Type} ftype - The data type of the field.\n       @property {number} fid - The unique identifier of the field.\n     */\n    /**\n     * Deserializes the beginning of a field.\n     * @returns {AnonReadFieldBeginReturn}\n     */\n    readFieldBegin: function readFieldBegin() {\n        var r = {};\n\n        var fid = -1;\n        var ftype = Thrift.Type.STOP;\n\n        //get a fieldId\n        for (var f in this.rstack[this.rstack.length - 1]) {\n            if (f === null) {\n                continue;\n            }\n\n            fid = parseInt(f, 10);\n            this.rpos.push(this.rstack.length);\n\n            var field = this.rstack[this.rstack.length - 1][fid];\n\n            //remove so we don't see it again\n            delete this.rstack[this.rstack.length - 1][fid];\n\n            this.rstack.push(field);\n\n            break;\n        }\n\n        if (fid != -1) {\n\n            //should only be 1 of these but this is the only\n            //way to match a key\n            for (var i in this.rstack[this.rstack.length - 1]) {\n                if (Thrift.Protocol.RType[i] === null) {\n                    continue;\n                }\n\n                ftype = Thrift.Protocol.RType[i];\n                this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][i];\n            }\n        }\n\n        r.fname = '';\n        r.ftype = ftype;\n        r.fid = fid;\n\n        return r;\n    },\n\n    /** Deserializes the end of a field. */\n    readFieldEnd: function readFieldEnd() {\n        var pos = this.rpos.pop();\n\n        //get back to the right place in the stack\n        while (this.rstack.length > pos) {\n            this.rstack.pop();\n        }\n    },\n\n    /**\n       @class\n       @name AnonReadMapBeginReturn\n       @property {Thrift.Type} ktype - The data type of the key.\n       @property {Thrift.Type} vtype - The data type of the value.\n       @property {number} size - The number of elements in the map.\n     */\n    /**\n     * Deserializes the beginning of a map.\n     * @returns {AnonReadMapBeginReturn}\n     */\n    readMapBegin: function readMapBegin() {\n        var map = this.rstack.pop();\n        var first = map.shift();\n        if (first instanceof Array) {\n            this.rstack.push(map);\n            map = first;\n            first = map.shift();\n        }\n\n        var r = {};\n        r.ktype = Thrift.Protocol.RType[first];\n        r.vtype = Thrift.Protocol.RType[map.shift()];\n        r.size = map.shift();\n\n        this.rpos.push(this.rstack.length);\n        this.rstack.push(map.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a map. */\n    readMapEnd: function readMapEnd() {\n        this.readFieldEnd();\n    },\n\n    /**\n       @class\n       @name AnonReadColBeginReturn\n       @property {Thrift.Type} etype - The data type of the element.\n       @property {number} size - The number of elements in the collection.\n     */\n    /**\n     * Deserializes the beginning of a list.\n     * @returns {AnonReadColBeginReturn}\n     */\n    readListBegin: function readListBegin() {\n        var list = this.rstack[this.rstack.length - 1];\n\n        var r = {};\n        r.etype = Thrift.Protocol.RType[list.shift()];\n        r.size = list.shift();\n\n        this.rpos.push(this.rstack.length);\n        this.rstack.push(list.shift());\n\n        return r;\n    },\n\n    /** Deserializes the end of a list. */\n    readListEnd: function readListEnd() {\n        var pos = this.rpos.pop() - 2;\n        var st = this.rstack;\n        st.pop();\n        if (st instanceof Array && st.length > pos && st[pos].length > 0) {\n            st.push(st[pos].shift());\n        }\n    },\n\n    /**\n     * Deserializes the beginning of a set.\n     * @returns {AnonReadColBeginReturn}\n     */\n    readSetBegin: function readSetBegin(elemType, size) {\n        return this.readListBegin(elemType, size);\n    },\n\n    /** Deserializes the end of a set. */\n    readSetEnd: function readSetEnd() {\n        return this.readListEnd();\n    },\n\n    /** Returns an object with a value property set to\n     *  False unless the next number in the protocol buffer\n     *  is 1, in which case the value property is True */\n    readBool: function readBool() {\n        var r = this.readI32();\n\n        if (r !== null && r.value == '1') {\n            r.value = true;\n        } else {\n            r.value = false;\n        }\n\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readByte: function readByte() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI16: function readI16() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI32: function readI32(f) {\n        if (f === undefined) {\n            f = this.rstack[this.rstack.length - 1];\n        }\n\n        var r = {};\n\n        if (f instanceof Array) {\n            if (f.length === 0) {\n                r.value = undefined;\n            } else {\n                if (!f.isReversed) {\n                    f.reverse();\n                    f.isReversed = true;\n                }\n                r.value = f.pop();\n            }\n        } else if (f instanceof Object) {\n            for (var i in f) {\n                if (i === null) {\n                    continue;\n                }\n                this.rstack.push(f[i]);\n                delete f[i];\n\n                r.value = i;\n                break;\n            }\n        } else {\n            r.value = f;\n            this.rstack.pop();\n        }\n\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readI64: function readI64(f) {\n        if (f === undefined) {\n            f = this.rstack[this.rstack.length - 1];\n        }\n\n        var r = {};\n\n        if (f instanceof Array) {\n            if (f.length === 0) {\n                r.value = undefined;\n            } else {\n                if (!f.isReversed) {\n                    f.reverse();\n                    f.isReversed = true;\n                }\n                r.value = f.pop();\n            }\n        } else if (f instanceof Object) {\n            var int64Object = true;\n            var objectKeys = Object.keys(f).sort();\n            var int64Keys = ['buffer', 'offset'];\n            if (objectKeys.length !== int64Keys.length) {\n                int64Object = false;\n            }\n            for (var it = 0; int64Object && it < objectKeys.length; ++it) {\n                if (objectKeys[it] !== int64Keys[it]) {\n                    int64Object = false;\n                }\n            }\n            if (int64Object) {\n                r.value = f;\n            } else {\n                for (var i in f) {\n                    if (i === null) {\n                        continue;\n                    }\n                    this.rstack.push(f[i]);\n                    delete f[i];\n\n                    r.value = i;\n                    break;\n                }\n            }\n        } else {\n            r.value = f;\n            this.rstack.pop();\n        }\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readDouble: function readDouble() {\n        return this.readI32();\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readString: function readString() {\n        var r = this.readI32();\n        return r;\n    },\n\n    /** Returns the an object with a value property set to the\n        next value found in the protocol buffer */\n    readBinary: function readBinary() {\n        var r = this.readI32();\n        r.value = atob(r.value);\n        return r;\n    },\n\n    /**\n     * Method to arbitrarily skip over data */\n    skip: function skip(type) {\n        var ret, i;\n        switch (type) {\n            case Thrift.Type.BOOL:\n                return this.readBool();\n\n            case Thrift.Type.BYTE:\n                return this.readByte();\n\n            case Thrift.Type.I16:\n                return this.readI16();\n\n            case Thrift.Type.I32:\n                return this.readI32();\n\n            case Thrift.Type.I64:\n                return this.readI64();\n\n            case Thrift.Type.DOUBLE:\n                return this.readDouble();\n\n            case Thrift.Type.STRING:\n                return this.readString();\n\n            case Thrift.Type.STRUCT:\n                this.readStructBegin();\n                while (true) {\n                    ret = this.readFieldBegin();\n                    if (ret.ftype == Thrift.Type.STOP) {\n                        break;\n                    }\n                    this.skip(ret.ftype);\n                    this.readFieldEnd();\n                }\n                this.readStructEnd();\n                return null;\n\n            case Thrift.Type.MAP:\n                ret = this.readMapBegin();\n                for (i = 0; i < ret.size; i++) {\n                    if (i > 0) {\n                        if (this.rstack.length > this.rpos[this.rpos.length - 1] + 1) {\n                            this.rstack.pop();\n                        }\n                    }\n                    this.skip(ret.ktype);\n                    this.skip(ret.vtype);\n                }\n                this.readMapEnd();\n                return null;\n\n            case Thrift.Type.SET:\n                ret = this.readSetBegin();\n                for (i = 0; i < ret.size; i++) {\n                    this.skip(ret.etype);\n                }\n                this.readSetEnd();\n                return null;\n\n            case Thrift.Type.LIST:\n                ret = this.readListBegin();\n                for (i = 0; i < ret.size; i++) {\n                    this.skip(ret.etype);\n                }\n                this.readListEnd();\n                return null;\n\n            default:\n                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA);\n        }\n    }\n};\n\n/**\n * Initializes a MutilplexProtocol Implementation as a Wrapper for Thrift.Protocol\n * @constructor\n */\nThrift.MultiplexProtocol = function (srvName, trans, strictRead, strictWrite) {\n    Thrift.Protocol.call(this, trans, strictRead, strictWrite);\n    this.serviceName = srvName;\n};\nThrift.inherits(Thrift.MultiplexProtocol, Thrift.Protocol, 'multiplexProtocol');\n\n/** Override writeMessageBegin method of prototype*/\nThrift.MultiplexProtocol.prototype.writeMessageBegin = function (name, type, seqid) {\n\n    if (type === Thrift.MessageType.CALL || type === Thrift.MessageType.ONEWAY) {\n        Thrift.Protocol.prototype.writeMessageBegin.call(this, this.serviceName + ':' + name, type, seqid);\n    } else {\n        Thrift.Protocol.prototype.writeMessageBegin.call(this, name, type, seqid);\n    }\n};\n\nThrift.Multiplexer = function () {\n    this.seqid = 0;\n};\n\n/** Instantiates a multiplexed client for a specific service\n * @constructor\n * @param {String} serviceName - The transport to serialize to/from.\n * @param {Thrift.ServiceClient} SCl - The Service Client Class\n * @param {Thrift.Transport} transport - Thrift.Transport instance which provides remote host:port\n * @example\n *    var mp = new Thrift.Multiplexer();\n *    var transport = new Thrift.Transport(\"http://localhost:9090/foo.thrift\");\n *    var protocol = new Thrift.Protocol(transport);\n *    var client = mp.createClient('AuthService', AuthServiceClient, transport);\n*/\nThrift.Multiplexer.prototype.createClient = function (serviceName, SCl, transport) {\n    if (SCl.Client) {\n        SCl = SCl.Client;\n    }\n    var self = this;\n    SCl.prototype.new_seqid = function () {\n        self.seqid += 1;\n        return self.seqid;\n    };\n    var client = new SCl(new Thrift.MultiplexProtocol(serviceName, transport));\n\n    return client;\n};\n\nvar copyList, copyMap;\n\nwindow.copyList = function (lst, types) {\n\n    if (!lst) {\n        return lst;\n    }\n\n    var type;\n\n    if (types.shift === undefined) {\n        type = types;\n    } else {\n        type = types[0];\n    }\n    var Type = type;\n\n    var len = lst.length,\n        result = [],\n        i,\n        val;\n    for (i = 0; i < len; i++) {\n        val = lst[i];\n        if (type === null) {\n            result.push(val);\n        } else if (type === copyMap || type === copyList) {\n            result.push(type(val, types.slice(1)));\n        } else {\n            result.push(new Type(val));\n        }\n    }\n    return result;\n};\n\nwindow.copyMap = function (obj, types) {\n\n    if (!obj) {\n        return obj;\n    }\n\n    var type;\n\n    if (types.shift === undefined) {\n        type = types;\n    } else {\n        type = types[0];\n    }\n    var Type = type;\n\n    var result = {},\n        val;\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            val = obj[prop];\n            if (type === null) {\n                result[prop] = val;\n            } else if (type === copyMap || type === copyList) {\n                result[prop] = type(val, types.slice(1));\n            } else {\n                result[prop] = new Type(val);\n            }\n        }\n    }\n    return result;\n};\n\nThrift.copyMap = copyMap;\nThrift.copyList = copyList;;window.Thrift = Thrift;"

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(5))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.13.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\nif (typeof Int64 === 'undefined' && typeof require === 'function') {\n  var Int64 = require('node-int64');\n}\n\nwindow.TDeviceType = {\n  'CPU': 0,\n  'GPU': 1\n};\nwindow.TDatumType = {\n  'SMALLINT': 0,\n  'INT': 1,\n  'BIGINT': 2,\n  'FLOAT': 3,\n  'DECIMAL': 4,\n  'DOUBLE': 5,\n  'STR': 6,\n  'TIME': 7,\n  'TIMESTAMP': 8,\n  'DATE': 9,\n  'BOOL': 10,\n  'INTERVAL_DAY_TIME': 11,\n  'INTERVAL_YEAR_MONTH': 12,\n  'POINT': 13,\n  'LINESTRING': 14,\n  'POLYGON': 15,\n  'MULTIPOLYGON': 16,\n  'TINYINT': 17,\n  'GEOMETRY': 18,\n  'GEOGRAPHY': 19\n};\nwindow.TEncodingType = {\n  'NONE': 0,\n  'FIXED': 1,\n  'RL': 2,\n  'DIFF': 3,\n  'DICT': 4,\n  'SPARSE': 5,\n  'GEOINT': 6,\n  'DATE_IN_DAYS': 7\n};\nwindow.TTypeInfo = function (args) {\n  this.type = null;\n  this.encoding = null;\n  this.nullable = null;\n  this.is_array = null;\n  this.precision = null;\n  this.scale = null;\n  this.comp_param = null;\n  this.size = -1;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.encoding !== undefined && args.encoding !== null) {\n      this.encoding = args.encoding;\n    }\n    if (args.nullable !== undefined && args.nullable !== null) {\n      this.nullable = args.nullable;\n    }\n    if (args.is_array !== undefined && args.is_array !== null) {\n      this.is_array = args.is_array;\n    }\n    if (args.precision !== undefined && args.precision !== null) {\n      this.precision = args.precision;\n    }\n    if (args.scale !== undefined && args.scale !== null) {\n      this.scale = args.scale;\n    }\n    if (args.comp_param !== undefined && args.comp_param !== null) {\n      this.comp_param = args.comp_param;\n    }\n    if (args.size !== undefined && args.size !== null) {\n      this.size = args.size;\n    }\n  }\n};\nTTypeInfo.prototype = {};\nTTypeInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.encoding = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.nullable = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_array = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.precision = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.scale = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I32) {\n          this.comp_param = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.I32) {\n          this.size = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTypeInfo.prototype.write = function (output) {\n  output.writeStructBegin('TTypeInfo');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.encoding !== null && this.encoding !== undefined) {\n    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);\n    output.writeI32(this.encoding);\n    output.writeFieldEnd();\n  }\n  if (this.nullable !== null && this.nullable !== undefined) {\n    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);\n    output.writeBool(this.nullable);\n    output.writeFieldEnd();\n  }\n  if (this.is_array !== null && this.is_array !== undefined) {\n    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);\n    output.writeBool(this.is_array);\n    output.writeFieldEnd();\n  }\n  if (this.precision !== null && this.precision !== undefined) {\n    output.writeFieldBegin('precision', Thrift.Type.I32, 5);\n    output.writeI32(this.precision);\n    output.writeFieldEnd();\n  }\n  if (this.scale !== null && this.scale !== undefined) {\n    output.writeFieldBegin('scale', Thrift.Type.I32, 6);\n    output.writeI32(this.scale);\n    output.writeFieldEnd();\n  }\n  if (this.comp_param !== null && this.comp_param !== undefined) {\n    output.writeFieldBegin('comp_param', Thrift.Type.I32, 7);\n    output.writeI32(this.comp_param);\n    output.writeFieldEnd();\n  }\n  if (this.size !== null && this.size !== undefined) {\n    output.writeFieldBegin('size', Thrift.Type.I32, 8);\n    output.writeI32(this.size);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(7))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.13.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\nif (typeof Int64 === 'undefined' && typeof require === 'function') {\n  var Int64 = require('node-int64');\n}\n\nwindow.TResultSetLayout = {\n  'GroupByPerfectHash': 0,\n  'GroupByBaselineHash': 1,\n  'Projection': 2,\n  'NonGroupedAggregate': 3\n};\nwindow.TCountDistinctImplType = {\n  'Invalid': 0,\n  'Bitmap': 1,\n  'StdSet': 2\n};\nwindow.TAggKind = {\n  'AVG': 0,\n  'MIN': 1,\n  'MAX': 2,\n  'SUM': 3,\n  'COUNT': 4,\n  'APPROX_COUNT_DISTINCT': 5,\n  'SAMPLE': 6\n};\nwindow.TSlotSize = function (args) {\n  this.padded = null;\n  this.logical = null;\n  if (args) {\n    if (args.padded !== undefined && args.padded !== null) {\n      this.padded = args.padded;\n    }\n    if (args.logical !== undefined && args.logical !== null) {\n      this.logical = args.logical;\n    }\n  }\n};\nTSlotSize.prototype = {};\nTSlotSize.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I16) {\n          this.padded = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I16) {\n          this.logical = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTSlotSize.prototype.write = function (output) {\n  output.writeStructBegin('TSlotSize');\n  if (this.padded !== null && this.padded !== undefined) {\n    output.writeFieldBegin('padded', Thrift.Type.I16, 1);\n    output.writeI16(this.padded);\n    output.writeFieldEnd();\n  }\n  if (this.logical !== null && this.logical !== undefined) {\n    output.writeFieldBegin('logical', Thrift.Type.I16, 2);\n    output.writeI16(this.logical);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColSlotContext = function (args) {\n  this.slot_sizes = null;\n  this.col_to_slot_map = null;\n  if (args) {\n    if (args.slot_sizes !== undefined && args.slot_sizes !== null) {\n      this.slot_sizes = Thrift.copyList(args.slot_sizes, [TSlotSize]);\n    }\n    if (args.col_to_slot_map !== undefined && args.col_to_slot_map !== null) {\n      this.col_to_slot_map = Thrift.copyList(args.col_to_slot_map, [Thrift.copyList, null]);\n    }\n  }\n};\nTColSlotContext.prototype = {};\nTColSlotContext.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.slot_sizes = [];\n          var _rtmp31 = input.readListBegin();\n          var _size0 = _rtmp31.size || 0;\n          for (var _i2 = 0; _i2 < _size0; ++_i2) {\n            var elem3 = null;\n            elem3 = new TSlotSize();\n            elem3.read(input);\n            this.slot_sizes.push(elem3);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.col_to_slot_map = [];\n          var _rtmp35 = input.readListBegin();\n          var _size4 = _rtmp35.size || 0;\n          for (var _i6 = 0; _i6 < _size4; ++_i6) {\n            var elem7 = null;\n            elem7 = [];\n            var _rtmp39 = input.readListBegin();\n            var _size8 = _rtmp39.size || 0;\n            for (var _i10 = 0; _i10 < _size8; ++_i10) {\n              var elem11 = null;\n              elem11 = input.readI32().value;\n              elem7.push(elem11);\n            }\n            input.readListEnd();\n            this.col_to_slot_map.push(elem7);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColSlotContext.prototype.write = function (output) {\n  output.writeStructBegin('TColSlotContext');\n  if (this.slot_sizes !== null && this.slot_sizes !== undefined) {\n    output.writeFieldBegin('slot_sizes', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.slot_sizes.length);\n    for (var iter12 in this.slot_sizes) {\n      if (this.slot_sizes.hasOwnProperty(iter12)) {\n        iter12 = this.slot_sizes[iter12];\n        iter12.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.col_to_slot_map !== null && this.col_to_slot_map !== undefined) {\n    output.writeFieldBegin('col_to_slot_map', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.LIST, this.col_to_slot_map.length);\n    for (var iter13 in this.col_to_slot_map) {\n      if (this.col_to_slot_map.hasOwnProperty(iter13)) {\n        iter13 = this.col_to_slot_map[iter13];\n        output.writeListBegin(Thrift.Type.I32, iter13.length);\n        for (var iter14 in iter13) {\n          if (iter13.hasOwnProperty(iter14)) {\n            iter14 = iter13[iter14];\n            output.writeI32(iter14);\n          }\n        }\n        output.writeListEnd();\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCountDistinctDescriptor = function (args) {\n  this.impl_type = null;\n  this.min_val = null;\n  this.bitmap_sz_bits = null;\n  this.approximate = null;\n  this.device_type = null;\n  this.sub_bitmap_count = null;\n  if (args) {\n    if (args.impl_type !== undefined && args.impl_type !== null) {\n      this.impl_type = args.impl_type;\n    }\n    if (args.min_val !== undefined && args.min_val !== null) {\n      this.min_val = args.min_val;\n    }\n    if (args.bitmap_sz_bits !== undefined && args.bitmap_sz_bits !== null) {\n      this.bitmap_sz_bits = args.bitmap_sz_bits;\n    }\n    if (args.approximate !== undefined && args.approximate !== null) {\n      this.approximate = args.approximate;\n    }\n    if (args.device_type !== undefined && args.device_type !== null) {\n      this.device_type = args.device_type;\n    }\n    if (args.sub_bitmap_count !== undefined && args.sub_bitmap_count !== null) {\n      this.sub_bitmap_count = args.sub_bitmap_count;\n    }\n  }\n};\nTCountDistinctDescriptor.prototype = {};\nTCountDistinctDescriptor.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.impl_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.min_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.bitmap_sz_bits = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.approximate = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.device_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.sub_bitmap_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCountDistinctDescriptor.prototype.write = function (output) {\n  output.writeStructBegin('TCountDistinctDescriptor');\n  if (this.impl_type !== null && this.impl_type !== undefined) {\n    output.writeFieldBegin('impl_type', Thrift.Type.I32, 1);\n    output.writeI32(this.impl_type);\n    output.writeFieldEnd();\n  }\n  if (this.min_val !== null && this.min_val !== undefined) {\n    output.writeFieldBegin('min_val', Thrift.Type.I64, 2);\n    output.writeI64(this.min_val);\n    output.writeFieldEnd();\n  }\n  if (this.bitmap_sz_bits !== null && this.bitmap_sz_bits !== undefined) {\n    output.writeFieldBegin('bitmap_sz_bits', Thrift.Type.I64, 3);\n    output.writeI64(this.bitmap_sz_bits);\n    output.writeFieldEnd();\n  }\n  if (this.approximate !== null && this.approximate !== undefined) {\n    output.writeFieldBegin('approximate', Thrift.Type.BOOL, 4);\n    output.writeBool(this.approximate);\n    output.writeFieldEnd();\n  }\n  if (this.device_type !== null && this.device_type !== undefined) {\n    output.writeFieldBegin('device_type', Thrift.Type.I32, 5);\n    output.writeI32(this.device_type);\n    output.writeFieldEnd();\n  }\n  if (this.sub_bitmap_count !== null && this.sub_bitmap_count !== undefined) {\n    output.writeFieldBegin('sub_bitmap_count', Thrift.Type.I64, 6);\n    output.writeI64(this.sub_bitmap_count);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TResultSetBufferDescriptor = function (args) {\n  this.layout = null;\n  this.keyless = null;\n  this.entry_count = null;\n  this.idx_target_as_key = null;\n  this.min_val = null;\n  this.max_val = null;\n  this.bucket = null;\n  this.group_col_widths = null;\n  this.key_bytewidth = null;\n  this.col_slot_context = null;\n  this.target_groupby_indices = null;\n  this.count_distinct_descriptors = null;\n  this.force_4byte_float = null;\n  if (args) {\n    if (args.layout !== undefined && args.layout !== null) {\n      this.layout = args.layout;\n    }\n    if (args.keyless !== undefined && args.keyless !== null) {\n      this.keyless = args.keyless;\n    }\n    if (args.entry_count !== undefined && args.entry_count !== null) {\n      this.entry_count = args.entry_count;\n    }\n    if (args.idx_target_as_key !== undefined && args.idx_target_as_key !== null) {\n      this.idx_target_as_key = args.idx_target_as_key;\n    }\n    if (args.min_val !== undefined && args.min_val !== null) {\n      this.min_val = args.min_val;\n    }\n    if (args.max_val !== undefined && args.max_val !== null) {\n      this.max_val = args.max_val;\n    }\n    if (args.bucket !== undefined && args.bucket !== null) {\n      this.bucket = args.bucket;\n    }\n    if (args.group_col_widths !== undefined && args.group_col_widths !== null) {\n      this.group_col_widths = Thrift.copyList(args.group_col_widths, [null]);\n    }\n    if (args.key_bytewidth !== undefined && args.key_bytewidth !== null) {\n      this.key_bytewidth = args.key_bytewidth;\n    }\n    if (args.col_slot_context !== undefined && args.col_slot_context !== null) {\n      this.col_slot_context = new TColSlotContext(args.col_slot_context);\n    }\n    if (args.target_groupby_indices !== undefined && args.target_groupby_indices !== null) {\n      this.target_groupby_indices = Thrift.copyList(args.target_groupby_indices, [null]);\n    }\n    if (args.count_distinct_descriptors !== undefined && args.count_distinct_descriptors !== null) {\n      this.count_distinct_descriptors = Thrift.copyList(args.count_distinct_descriptors, [TCountDistinctDescriptor]);\n    }\n    if (args.force_4byte_float !== undefined && args.force_4byte_float !== null) {\n      this.force_4byte_float = args.force_4byte_float;\n    }\n  }\n};\nTResultSetBufferDescriptor.prototype = {};\nTResultSetBufferDescriptor.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.layout = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.keyless = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.entry_count = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.idx_target_as_key = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.min_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.max_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.bucket = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.LIST) {\n          this.group_col_widths = [];\n          var _rtmp316 = input.readListBegin();\n          var _size15 = _rtmp316.size || 0;\n          for (var _i17 = 0; _i17 < _size15; ++_i17) {\n            var elem18 = null;\n            elem18 = input.readI16().value;\n            this.group_col_widths.push(elem18);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.I16) {\n          this.key_bytewidth = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.col_slot_context = new TColSlotContext();\n          this.col_slot_context.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 11:\n        if (ftype == Thrift.Type.LIST) {\n          this.target_groupby_indices = [];\n          var _rtmp320 = input.readListBegin();\n          var _size19 = _rtmp320.size || 0;\n          for (var _i21 = 0; _i21 < _size19; ++_i21) {\n            var elem22 = null;\n            elem22 = input.readI32().value;\n            this.target_groupby_indices.push(elem22);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 12:\n        if (ftype == Thrift.Type.LIST) {\n          this.count_distinct_descriptors = [];\n          var _rtmp324 = input.readListBegin();\n          var _size23 = _rtmp324.size || 0;\n          for (var _i25 = 0; _i25 < _size23; ++_i25) {\n            var elem26 = null;\n            elem26 = new TCountDistinctDescriptor();\n            elem26.read(input);\n            this.count_distinct_descriptors.push(elem26);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 13:\n        if (ftype == Thrift.Type.BOOL) {\n          this.force_4byte_float = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTResultSetBufferDescriptor.prototype.write = function (output) {\n  output.writeStructBegin('TResultSetBufferDescriptor');\n  if (this.layout !== null && this.layout !== undefined) {\n    output.writeFieldBegin('layout', Thrift.Type.I32, 1);\n    output.writeI32(this.layout);\n    output.writeFieldEnd();\n  }\n  if (this.keyless !== null && this.keyless !== undefined) {\n    output.writeFieldBegin('keyless', Thrift.Type.BOOL, 2);\n    output.writeBool(this.keyless);\n    output.writeFieldEnd();\n  }\n  if (this.entry_count !== null && this.entry_count !== undefined) {\n    output.writeFieldBegin('entry_count', Thrift.Type.I32, 3);\n    output.writeI32(this.entry_count);\n    output.writeFieldEnd();\n  }\n  if (this.idx_target_as_key !== null && this.idx_target_as_key !== undefined) {\n    output.writeFieldBegin('idx_target_as_key', Thrift.Type.I32, 4);\n    output.writeI32(this.idx_target_as_key);\n    output.writeFieldEnd();\n  }\n  if (this.min_val !== null && this.min_val !== undefined) {\n    output.writeFieldBegin('min_val', Thrift.Type.I64, 5);\n    output.writeI64(this.min_val);\n    output.writeFieldEnd();\n  }\n  if (this.max_val !== null && this.max_val !== undefined) {\n    output.writeFieldBegin('max_val', Thrift.Type.I64, 6);\n    output.writeI64(this.max_val);\n    output.writeFieldEnd();\n  }\n  if (this.bucket !== null && this.bucket !== undefined) {\n    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);\n    output.writeI64(this.bucket);\n    output.writeFieldEnd();\n  }\n  if (this.group_col_widths !== null && this.group_col_widths !== undefined) {\n    output.writeFieldBegin('group_col_widths', Thrift.Type.LIST, 8);\n    output.writeListBegin(Thrift.Type.I16, this.group_col_widths.length);\n    for (var iter27 in this.group_col_widths) {\n      if (this.group_col_widths.hasOwnProperty(iter27)) {\n        iter27 = this.group_col_widths[iter27];\n        output.writeI16(iter27);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.key_bytewidth !== null && this.key_bytewidth !== undefined) {\n    output.writeFieldBegin('key_bytewidth', Thrift.Type.I16, 9);\n    output.writeI16(this.key_bytewidth);\n    output.writeFieldEnd();\n  }\n  if (this.col_slot_context !== null && this.col_slot_context !== undefined) {\n    output.writeFieldBegin('col_slot_context', Thrift.Type.STRUCT, 10);\n    this.col_slot_context.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.target_groupby_indices !== null && this.target_groupby_indices !== undefined) {\n    output.writeFieldBegin('target_groupby_indices', Thrift.Type.LIST, 11);\n    output.writeListBegin(Thrift.Type.I32, this.target_groupby_indices.length);\n    for (var iter28 in this.target_groupby_indices) {\n      if (this.target_groupby_indices.hasOwnProperty(iter28)) {\n        iter28 = this.target_groupby_indices[iter28];\n        output.writeI32(iter28);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.count_distinct_descriptors !== null && this.count_distinct_descriptors !== undefined) {\n    output.writeFieldBegin('count_distinct_descriptors', Thrift.Type.LIST, 12);\n    output.writeListBegin(Thrift.Type.STRUCT, this.count_distinct_descriptors.length);\n    for (var iter29 in this.count_distinct_descriptors) {\n      if (this.count_distinct_descriptors.hasOwnProperty(iter29)) {\n        iter29 = this.count_distinct_descriptors[iter29];\n        iter29.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.force_4byte_float !== null && this.force_4byte_float !== undefined) {\n    output.writeFieldBegin('force_4byte_float', Thrift.Type.BOOL, 13);\n    output.writeBool(this.force_4byte_float);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTargetInfo = function (args) {\n  this.is_agg = null;\n  this.kind = null;\n  this.type = null;\n  this.arg_type = null;\n  this.skip_nulls = null;\n  this.is_distinct = null;\n  if (args) {\n    if (args.is_agg !== undefined && args.is_agg !== null) {\n      this.is_agg = args.is_agg;\n    }\n    if (args.kind !== undefined && args.kind !== null) {\n      this.kind = args.kind;\n    }\n    if (args.type !== undefined && args.type !== null) {\n      this.type = new TTypeInfo(args.type);\n    }\n    if (args.arg_type !== undefined && args.arg_type !== null) {\n      this.arg_type = new TTypeInfo(args.arg_type);\n    }\n    if (args.skip_nulls !== undefined && args.skip_nulls !== null) {\n      this.skip_nulls = args.skip_nulls;\n    }\n    if (args.is_distinct !== undefined && args.is_distinct !== null) {\n      this.is_distinct = args.is_distinct;\n    }\n  }\n};\nTTargetInfo.prototype = {};\nTTargetInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_agg = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.kind = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.type = new TTypeInfo();\n          this.type.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.arg_type = new TTypeInfo();\n          this.arg_type.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.skip_nulls = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_distinct = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTargetInfo.prototype.write = function (output) {\n  output.writeStructBegin('TTargetInfo');\n  if (this.is_agg !== null && this.is_agg !== undefined) {\n    output.writeFieldBegin('is_agg', Thrift.Type.BOOL, 1);\n    output.writeBool(this.is_agg);\n    output.writeFieldEnd();\n  }\n  if (this.kind !== null && this.kind !== undefined) {\n    output.writeFieldBegin('kind', Thrift.Type.I32, 2);\n    output.writeI32(this.kind);\n    output.writeFieldEnd();\n  }\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.STRUCT, 3);\n    this.type.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.arg_type !== null && this.arg_type !== undefined) {\n    output.writeFieldBegin('arg_type', Thrift.Type.STRUCT, 4);\n    this.arg_type.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.skip_nulls !== null && this.skip_nulls !== undefined) {\n    output.writeFieldBegin('skip_nulls', Thrift.Type.BOOL, 5);\n    output.writeBool(this.skip_nulls);\n    output.writeFieldEnd();\n  }\n  if (this.is_distinct !== null && this.is_distinct !== undefined) {\n    output.writeFieldBegin('is_distinct', Thrift.Type.BOOL, 6);\n    output.writeBool(this.is_distinct);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCountDistinctSetStorage = function (args) {\n  this.bitmap = null;\n  this.sparse_set = null;\n  if (args) {\n    if (args.bitmap !== undefined && args.bitmap !== null) {\n      this.bitmap = args.bitmap;\n    }\n    if (args.sparse_set !== undefined && args.sparse_set !== null) {\n      this.sparse_set = Thrift.copyList(args.sparse_set, [null]);\n    }\n  }\n};\nTCountDistinctSetStorage.prototype = {};\nTCountDistinctSetStorage.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.bitmap = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.SET) {\n          this.sparse_set = [];\n          var _rtmp331 = input.readSetBegin();\n          var _size30 = _rtmp331.size || 0;\n          for (var _i32 = 0; _i32 < _size30; ++_i32) {\n            var elem33 = null;\n            elem33 = input.readI64().value;\n            this.sparse_set.push(elem33);\n          }\n          input.readSetEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCountDistinctSetStorage.prototype.write = function (output) {\n  output.writeStructBegin('TCountDistinctSetStorage');\n  if (this.bitmap !== null && this.bitmap !== undefined) {\n    output.writeFieldBegin('bitmap', Thrift.Type.STRING, 1);\n    output.writeBinary(this.bitmap);\n    output.writeFieldEnd();\n  }\n  if (this.sparse_set !== null && this.sparse_set !== undefined) {\n    output.writeFieldBegin('sparse_set', Thrift.Type.SET, 2);\n    output.writeSetBegin(Thrift.Type.I64, this.sparse_set.length);\n    for (var iter34 in this.sparse_set) {\n      if (this.sparse_set.hasOwnProperty(iter34)) {\n        iter34 = this.sparse_set[iter34];\n        output.writeI64(iter34);\n      }\n    }\n    output.writeSetEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCountDistinctSet = function (args) {\n  this.type = null;\n  this.storage = null;\n  this.remote_ptr = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.storage !== undefined && args.storage !== null) {\n      this.storage = new TCountDistinctSetStorage(args.storage);\n    }\n    if (args.remote_ptr !== undefined && args.remote_ptr !== null) {\n      this.remote_ptr = args.remote_ptr;\n    }\n  }\n};\nTCountDistinctSet.prototype = {};\nTCountDistinctSet.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.storage = new TCountDistinctSetStorage();\n          this.storage.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.remote_ptr = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCountDistinctSet.prototype.write = function (output) {\n  output.writeStructBegin('TCountDistinctSet');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.storage !== null && this.storage !== undefined) {\n    output.writeFieldBegin('storage', Thrift.Type.STRUCT, 2);\n    this.storage.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.remote_ptr !== null && this.remote_ptr !== undefined) {\n    output.writeFieldBegin('remote_ptr', Thrift.Type.I64, 3);\n    output.writeI64(this.remote_ptr);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TSerializedRows = function (args) {\n  this.buffers = null;\n  this.buffer_lengths = null;\n  this.buffers_total_size = null;\n  this.total_compression_time_ms = null;\n  this.descriptor = null;\n  this.targets = null;\n  this.target_init_vals = null;\n  this.varlen_buffer = null;\n  this.count_distinct_sets = null;\n  this.explanation = null;\n  if (args) {\n    if (args.buffers !== undefined && args.buffers !== null) {\n      this.buffers = Thrift.copyList(args.buffers, [null]);\n    }\n    if (args.buffer_lengths !== undefined && args.buffer_lengths !== null) {\n      this.buffer_lengths = Thrift.copyList(args.buffer_lengths, [null]);\n    }\n    if (args.buffers_total_size !== undefined && args.buffers_total_size !== null) {\n      this.buffers_total_size = args.buffers_total_size;\n    }\n    if (args.total_compression_time_ms !== undefined && args.total_compression_time_ms !== null) {\n      this.total_compression_time_ms = args.total_compression_time_ms;\n    }\n    if (args.descriptor !== undefined && args.descriptor !== null) {\n      this.descriptor = new TResultSetBufferDescriptor(args.descriptor);\n    }\n    if (args.targets !== undefined && args.targets !== null) {\n      this.targets = Thrift.copyList(args.targets, [TTargetInfo]);\n    }\n    if (args.target_init_vals !== undefined && args.target_init_vals !== null) {\n      this.target_init_vals = Thrift.copyList(args.target_init_vals, [null]);\n    }\n    if (args.varlen_buffer !== undefined && args.varlen_buffer !== null) {\n      this.varlen_buffer = Thrift.copyList(args.varlen_buffer, [null]);\n    }\n    if (args.count_distinct_sets !== undefined && args.count_distinct_sets !== null) {\n      this.count_distinct_sets = Thrift.copyList(args.count_distinct_sets, [TCountDistinctSet]);\n    }\n    if (args.explanation !== undefined && args.explanation !== null) {\n      this.explanation = args.explanation;\n    }\n  }\n};\nTSerializedRows.prototype = {};\nTSerializedRows.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.buffers = [];\n          var _rtmp336 = input.readListBegin();\n          var _size35 = _rtmp336.size || 0;\n          for (var _i37 = 0; _i37 < _size35; ++_i37) {\n            var elem38 = null;\n            elem38 = input.readBinary().value;\n            this.buffers.push(elem38);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.buffer_lengths = [];\n          var _rtmp340 = input.readListBegin();\n          var _size39 = _rtmp340.size || 0;\n          for (var _i41 = 0; _i41 < _size39; ++_i41) {\n            var elem42 = null;\n            elem42 = input.readI64().value;\n            this.buffer_lengths.push(elem42);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.buffers_total_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.total_compression_time_ms = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.descriptor = new TResultSetBufferDescriptor();\n          this.descriptor.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.LIST) {\n          this.targets = [];\n          var _rtmp344 = input.readListBegin();\n          var _size43 = _rtmp344.size || 0;\n          for (var _i45 = 0; _i45 < _size43; ++_i45) {\n            var elem46 = null;\n            elem46 = new TTargetInfo();\n            elem46.read(input);\n            this.targets.push(elem46);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.LIST) {\n          this.target_init_vals = [];\n          var _rtmp348 = input.readListBegin();\n          var _size47 = _rtmp348.size || 0;\n          for (var _i49 = 0; _i49 < _size47; ++_i49) {\n            var elem50 = null;\n            elem50 = input.readI64().value;\n            this.target_init_vals.push(elem50);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.LIST) {\n          this.varlen_buffer = [];\n          var _rtmp352 = input.readListBegin();\n          var _size51 = _rtmp352.size || 0;\n          for (var _i53 = 0; _i53 < _size51; ++_i53) {\n            var elem54 = null;\n            elem54 = input.readBinary().value;\n            this.varlen_buffer.push(elem54);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.LIST) {\n          this.count_distinct_sets = [];\n          var _rtmp356 = input.readListBegin();\n          var _size55 = _rtmp356.size || 0;\n          for (var _i57 = 0; _i57 < _size55; ++_i57) {\n            var elem58 = null;\n            elem58 = new TCountDistinctSet();\n            elem58.read(input);\n            this.count_distinct_sets.push(elem58);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.STRING) {\n          this.explanation = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTSerializedRows.prototype.write = function (output) {\n  output.writeStructBegin('TSerializedRows');\n  if (this.buffers !== null && this.buffers !== undefined) {\n    output.writeFieldBegin('buffers', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRING, this.buffers.length);\n    for (var iter59 in this.buffers) {\n      if (this.buffers.hasOwnProperty(iter59)) {\n        iter59 = this.buffers[iter59];\n        output.writeBinary(iter59);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.buffer_lengths !== null && this.buffer_lengths !== undefined) {\n    output.writeFieldBegin('buffer_lengths', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.I64, this.buffer_lengths.length);\n    for (var iter60 in this.buffer_lengths) {\n      if (this.buffer_lengths.hasOwnProperty(iter60)) {\n        iter60 = this.buffer_lengths[iter60];\n        output.writeI64(iter60);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.buffers_total_size !== null && this.buffers_total_size !== undefined) {\n    output.writeFieldBegin('buffers_total_size', Thrift.Type.I64, 3);\n    output.writeI64(this.buffers_total_size);\n    output.writeFieldEnd();\n  }\n  if (this.total_compression_time_ms !== null && this.total_compression_time_ms !== undefined) {\n    output.writeFieldBegin('total_compression_time_ms', Thrift.Type.I32, 4);\n    output.writeI32(this.total_compression_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.descriptor !== null && this.descriptor !== undefined) {\n    output.writeFieldBegin('descriptor', Thrift.Type.STRUCT, 5);\n    this.descriptor.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.targets !== null && this.targets !== undefined) {\n    output.writeFieldBegin('targets', Thrift.Type.LIST, 6);\n    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);\n    for (var iter61 in this.targets) {\n      if (this.targets.hasOwnProperty(iter61)) {\n        iter61 = this.targets[iter61];\n        iter61.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.target_init_vals !== null && this.target_init_vals !== undefined) {\n    output.writeFieldBegin('target_init_vals', Thrift.Type.LIST, 7);\n    output.writeListBegin(Thrift.Type.I64, this.target_init_vals.length);\n    for (var iter62 in this.target_init_vals) {\n      if (this.target_init_vals.hasOwnProperty(iter62)) {\n        iter62 = this.target_init_vals[iter62];\n        output.writeI64(iter62);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.varlen_buffer !== null && this.varlen_buffer !== undefined) {\n    output.writeFieldBegin('varlen_buffer', Thrift.Type.LIST, 8);\n    output.writeListBegin(Thrift.Type.STRING, this.varlen_buffer.length);\n    for (var iter63 in this.varlen_buffer) {\n      if (this.varlen_buffer.hasOwnProperty(iter63)) {\n        iter63 = this.varlen_buffer[iter63];\n        output.writeBinary(iter63);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.count_distinct_sets !== null && this.count_distinct_sets !== undefined) {\n    output.writeFieldBegin('count_distinct_sets', Thrift.Type.LIST, 9);\n    output.writeListBegin(Thrift.Type.STRUCT, this.count_distinct_sets.length);\n    for (var iter64 in this.count_distinct_sets) {\n      if (this.count_distinct_sets.hasOwnProperty(iter64)) {\n        iter64 = this.count_distinct_sets[iter64];\n        iter64.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.explanation !== null && this.explanation !== undefined) {\n    output.writeFieldBegin('explanation', Thrift.Type.STRING, 10);\n    output.writeString(this.explanation);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(9))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.13.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\nif (typeof Int64 === 'undefined' && typeof require === 'function') {\n  var Int64 = require('node-int64');\n}\n\nwindow.TExecuteMode = {\n  'GPU': 1,\n  'CPU': 2\n};\nwindow.TFileType = {\n  'DELIMITED': 0,\n  'POLYGON': 1,\n  'PARQUET': 2\n};\nwindow.TPartitionDetail = {\n  'DEFAULT': 0,\n  'REPLICATED': 1,\n  'SHARDED': 2,\n  'OTHER': 3\n};\nwindow.TGeoFileLayerContents = {\n  'EMPTY': 0,\n  'GEO': 1,\n  'NON_GEO': 2,\n  'UNSUPPORTED_GEO': 3\n};\nwindow.TImportHeaderRow = {\n  'AUTODETECT': 0,\n  'NO_HEADER': 1,\n  'HAS_HEADER': 2\n};\nwindow.TRole = {\n  'SERVER': 0,\n  'AGGREGATOR': 1,\n  'LEAF': 2,\n  'STRING_DICTIONARY': 3\n};\nwindow.TMergeType = {\n  'UNION': 0,\n  'REDUCE': 1\n};\nwindow.TExpressionRangeType = {\n  'INVALID': 0,\n  'INTEGER': 1,\n  'FLOAT': 2,\n  'DOUBLE': 3\n};\nwindow.TDBObjectType = {\n  'AbstractDBObjectType': 0,\n  'DatabaseDBObjectType': 1,\n  'TableDBObjectType': 2,\n  'DashboardDBObjectType': 3,\n  'ViewDBObjectType': 4\n};\nwindow.TDatumVal = function (args) {\n  this.int_val = null;\n  this.real_val = null;\n  this.str_val = null;\n  this.arr_val = null;\n  if (args) {\n    if (args.int_val !== undefined && args.int_val !== null) {\n      this.int_val = args.int_val;\n    }\n    if (args.real_val !== undefined && args.real_val !== null) {\n      this.real_val = args.real_val;\n    }\n    if (args.str_val !== undefined && args.str_val !== null) {\n      this.str_val = args.str_val;\n    }\n    if (args.arr_val !== undefined && args.arr_val !== null) {\n      this.arr_val = Thrift.copyList(args.arr_val, [null]);\n    }\n  }\n};\nTDatumVal.prototype = {};\nTDatumVal.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.int_val = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.real_val = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.str_val = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          this.arr_val = [];\n          var _rtmp31 = input.readListBegin();\n          var _size0 = _rtmp31.size || 0;\n          for (var _i2 = 0; _i2 < _size0; ++_i2) {\n            var elem3 = null;\n            elem3 = new TDatum();\n            elem3.read(input);\n            this.arr_val.push(elem3);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatumVal.prototype.write = function (output) {\n  output.writeStructBegin('TDatumVal');\n  if (this.int_val !== null && this.int_val !== undefined) {\n    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);\n    output.writeI64(this.int_val);\n    output.writeFieldEnd();\n  }\n  if (this.real_val !== null && this.real_val !== undefined) {\n    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);\n    output.writeDouble(this.real_val);\n    output.writeFieldEnd();\n  }\n  if (this.str_val !== null && this.str_val !== undefined) {\n    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);\n    output.writeString(this.str_val);\n    output.writeFieldEnd();\n  }\n  if (this.arr_val !== null && this.arr_val !== undefined) {\n    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);\n    for (var iter4 in this.arr_val) {\n      if (this.arr_val.hasOwnProperty(iter4)) {\n        iter4 = this.arr_val[iter4];\n        iter4.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDatum = function (args) {\n  this.val = null;\n  this.is_null = null;\n  if (args) {\n    if (args.val !== undefined && args.val !== null) {\n      this.val = new TDatumVal(args.val);\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTDatum.prototype = {};\nTDatum.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.val = new TDatumVal();\n          this.val.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatum.prototype.write = function (output) {\n  output.writeStructBegin('TDatum');\n  if (this.val !== null && this.val !== undefined) {\n    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);\n    this.val.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStringValue = function (args) {\n  this.str_val = null;\n  this.is_null = null;\n  if (args) {\n    if (args.str_val !== undefined && args.str_val !== null) {\n      this.str_val = args.str_val;\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTStringValue.prototype = {};\nTStringValue.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.str_val = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStringValue.prototype.write = function (output) {\n  output.writeStructBegin('TStringValue');\n  if (this.str_val !== null && this.str_val !== undefined) {\n    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);\n    output.writeString(this.str_val);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnType = function (args) {\n  this.col_name = null;\n  this.col_type = null;\n  this.is_reserved_keyword = null;\n  this.src_name = null;\n  this.is_system = null;\n  this.is_physical = null;\n  this.col_id = null;\n  if (args) {\n    if (args.col_name !== undefined && args.col_name !== null) {\n      this.col_name = args.col_name;\n    }\n    if (args.col_type !== undefined && args.col_type !== null) {\n      this.col_type = new TTypeInfo(args.col_type);\n    }\n    if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {\n      this.is_reserved_keyword = args.is_reserved_keyword;\n    }\n    if (args.src_name !== undefined && args.src_name !== null) {\n      this.src_name = args.src_name;\n    }\n    if (args.is_system !== undefined && args.is_system !== null) {\n      this.is_system = args.is_system;\n    }\n    if (args.is_physical !== undefined && args.is_physical !== null) {\n      this.is_physical = args.is_physical;\n    }\n    if (args.col_id !== undefined && args.col_id !== null) {\n      this.col_id = args.col_id;\n    }\n  }\n};\nTColumnType.prototype = {};\nTColumnType.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.col_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.col_type = new TTypeInfo();\n          this.col_type.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_reserved_keyword = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.src_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_system = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_physical = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.col_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnType.prototype.write = function (output) {\n  output.writeStructBegin('TColumnType');\n  if (this.col_name !== null && this.col_name !== undefined) {\n    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);\n    output.writeString(this.col_name);\n    output.writeFieldEnd();\n  }\n  if (this.col_type !== null && this.col_type !== undefined) {\n    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);\n    this.col_type.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {\n    output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);\n    output.writeBool(this.is_reserved_keyword);\n    output.writeFieldEnd();\n  }\n  if (this.src_name !== null && this.src_name !== undefined) {\n    output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);\n    output.writeString(this.src_name);\n    output.writeFieldEnd();\n  }\n  if (this.is_system !== null && this.is_system !== undefined) {\n    output.writeFieldBegin('is_system', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_system);\n    output.writeFieldEnd();\n  }\n  if (this.is_physical !== null && this.is_physical !== undefined) {\n    output.writeFieldBegin('is_physical', Thrift.Type.BOOL, 6);\n    output.writeBool(this.is_physical);\n    output.writeFieldEnd();\n  }\n  if (this.col_id !== null && this.col_id !== undefined) {\n    output.writeFieldBegin('col_id', Thrift.Type.I64, 7);\n    output.writeI64(this.col_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRow = function (args) {\n  this.cols = null;\n  if (args) {\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TDatum]);\n    }\n  }\n};\nTRow.prototype = {};\nTRow.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.cols = [];\n          var _rtmp36 = input.readListBegin();\n          var _size5 = _rtmp36.size || 0;\n          for (var _i7 = 0; _i7 < _size5; ++_i7) {\n            var elem8 = null;\n            elem8 = new TDatum();\n            elem8.read(input);\n            this.cols.push(elem8);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRow.prototype.write = function (output) {\n  output.writeStructBegin('TRow');\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter9 in this.cols) {\n      if (this.cols.hasOwnProperty(iter9)) {\n        iter9 = this.cols[iter9];\n        iter9.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnData = function (args) {\n  this.int_col = null;\n  this.real_col = null;\n  this.str_col = null;\n  this.arr_col = null;\n  if (args) {\n    if (args.int_col !== undefined && args.int_col !== null) {\n      this.int_col = Thrift.copyList(args.int_col, [null]);\n    }\n    if (args.real_col !== undefined && args.real_col !== null) {\n      this.real_col = Thrift.copyList(args.real_col, [null]);\n    }\n    if (args.str_col !== undefined && args.str_col !== null) {\n      this.str_col = Thrift.copyList(args.str_col, [null]);\n    }\n    if (args.arr_col !== undefined && args.arr_col !== null) {\n      this.arr_col = Thrift.copyList(args.arr_col, [null]);\n    }\n  }\n};\nTColumnData.prototype = {};\nTColumnData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.int_col = [];\n          var _rtmp311 = input.readListBegin();\n          var _size10 = _rtmp311.size || 0;\n          for (var _i12 = 0; _i12 < _size10; ++_i12) {\n            var elem13 = null;\n            elem13 = input.readI64().value;\n            this.int_col.push(elem13);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.real_col = [];\n          var _rtmp315 = input.readListBegin();\n          var _size14 = _rtmp315.size || 0;\n          for (var _i16 = 0; _i16 < _size14; ++_i16) {\n            var elem17 = null;\n            elem17 = input.readDouble().value;\n            this.real_col.push(elem17);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.str_col = [];\n          var _rtmp319 = input.readListBegin();\n          var _size18 = _rtmp319.size || 0;\n          for (var _i20 = 0; _i20 < _size18; ++_i20) {\n            var elem21 = null;\n            elem21 = input.readString().value;\n            this.str_col.push(elem21);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          this.arr_col = [];\n          var _rtmp323 = input.readListBegin();\n          var _size22 = _rtmp323.size || 0;\n          for (var _i24 = 0; _i24 < _size22; ++_i24) {\n            var elem25 = null;\n            elem25 = new TColumn();\n            elem25.read(input);\n            this.arr_col.push(elem25);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnData.prototype.write = function (output) {\n  output.writeStructBegin('TColumnData');\n  if (this.int_col !== null && this.int_col !== undefined) {\n    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.I64, this.int_col.length);\n    for (var iter26 in this.int_col) {\n      if (this.int_col.hasOwnProperty(iter26)) {\n        iter26 = this.int_col[iter26];\n        output.writeI64(iter26);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.real_col !== null && this.real_col !== undefined) {\n    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);\n    for (var iter27 in this.real_col) {\n      if (this.real_col.hasOwnProperty(iter27)) {\n        iter27 = this.real_col[iter27];\n        output.writeDouble(iter27);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.str_col !== null && this.str_col !== undefined) {\n    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);\n    for (var iter28 in this.str_col) {\n      if (this.str_col.hasOwnProperty(iter28)) {\n        iter28 = this.str_col[iter28];\n        output.writeString(iter28);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.arr_col !== null && this.arr_col !== undefined) {\n    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);\n    for (var iter29 in this.arr_col) {\n      if (this.arr_col.hasOwnProperty(iter29)) {\n        iter29 = this.arr_col[iter29];\n        iter29.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumn = function (args) {\n  this.data = null;\n  this.nulls = null;\n  if (args) {\n    if (args.data !== undefined && args.data !== null) {\n      this.data = new TColumnData(args.data);\n    }\n    if (args.nulls !== undefined && args.nulls !== null) {\n      this.nulls = Thrift.copyList(args.nulls, [null]);\n    }\n  }\n};\nTColumn.prototype = {};\nTColumn.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.data = new TColumnData();\n          this.data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.nulls = [];\n          var _rtmp331 = input.readListBegin();\n          var _size30 = _rtmp331.size || 0;\n          for (var _i32 = 0; _i32 < _size30; ++_i32) {\n            var elem33 = null;\n            elem33 = input.readBool().value;\n            this.nulls.push(elem33);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumn.prototype.write = function (output) {\n  output.writeStructBegin('TColumn');\n  if (this.data !== null && this.data !== undefined) {\n    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);\n    this.data.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.nulls !== null && this.nulls !== undefined) {\n    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);\n    for (var iter34 in this.nulls) {\n      if (this.nulls.hasOwnProperty(iter34)) {\n        iter34 = this.nulls[iter34];\n        output.writeBool(iter34);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStringRow = function (args) {\n  this.cols = null;\n  if (args) {\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TStringValue]);\n    }\n  }\n};\nTStringRow.prototype = {};\nTStringRow.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.cols = [];\n          var _rtmp336 = input.readListBegin();\n          var _size35 = _rtmp336.size || 0;\n          for (var _i37 = 0; _i37 < _size35; ++_i37) {\n            var elem38 = null;\n            elem38 = new TStringValue();\n            elem38.read(input);\n            this.cols.push(elem38);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStringRow.prototype.write = function (output) {\n  output.writeStructBegin('TStringRow');\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter39 in this.cols) {\n      if (this.cols.hasOwnProperty(iter39)) {\n        iter39 = this.cols[iter39];\n        iter39.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TKrb5Session = function (args) {\n  this.sessionId = null;\n  this.krbToken = null;\n  if (args) {\n    if (args.sessionId !== undefined && args.sessionId !== null) {\n      this.sessionId = args.sessionId;\n    }\n    if (args.krbToken !== undefined && args.krbToken !== null) {\n      this.krbToken = args.krbToken;\n    }\n  }\n};\nTKrb5Session.prototype = {};\nTKrb5Session.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.sessionId = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.krbToken = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTKrb5Session.prototype.write = function (output) {\n  output.writeStructBegin('TKrb5Session');\n  if (this.sessionId !== null && this.sessionId !== undefined) {\n    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);\n    output.writeString(this.sessionId);\n    output.writeFieldEnd();\n  }\n  if (this.krbToken !== null && this.krbToken !== undefined) {\n    output.writeFieldBegin('krbToken', Thrift.Type.STRING, 2);\n    output.writeString(this.krbToken);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TStepResult = function (args) {\n  this.serialized_rows = null;\n  this.execution_finished = null;\n  this.merge_type = null;\n  this.sharded = null;\n  this.row_desc = null;\n  this.node_id = null;\n  if (args) {\n    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\n      this.serialized_rows = new TSerializedRows(args.serialized_rows);\n    }\n    if (args.execution_finished !== undefined && args.execution_finished !== null) {\n      this.execution_finished = args.execution_finished;\n    }\n    if (args.merge_type !== undefined && args.merge_type !== null) {\n      this.merge_type = args.merge_type;\n    }\n    if (args.sharded !== undefined && args.sharded !== null) {\n      this.sharded = args.sharded;\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.node_id !== undefined && args.node_id !== null) {\n      this.node_id = args.node_id;\n    }\n  }\n};\nTStepResult.prototype = {};\nTStepResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.serialized_rows = new TSerializedRows();\n          this.serialized_rows.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.execution_finished = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.merge_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.sharded = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          this.row_desc = [];\n          var _rtmp341 = input.readListBegin();\n          var _size40 = _rtmp341.size || 0;\n          for (var _i42 = 0; _i42 < _size40; ++_i42) {\n            var elem43 = null;\n            elem43 = new TColumnType();\n            elem43.read(input);\n            this.row_desc.push(elem43);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.node_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTStepResult.prototype.write = function (output) {\n  output.writeStructBegin('TStepResult');\n  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\n    output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);\n    this.serialized_rows.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.execution_finished !== null && this.execution_finished !== undefined) {\n    output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);\n    output.writeBool(this.execution_finished);\n    output.writeFieldEnd();\n  }\n  if (this.merge_type !== null && this.merge_type !== undefined) {\n    output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);\n    output.writeI32(this.merge_type);\n    output.writeFieldEnd();\n  }\n  if (this.sharded !== null && this.sharded !== undefined) {\n    output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);\n    output.writeBool(this.sharded);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter44 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter44)) {\n        iter44 = this.row_desc[iter44];\n        iter44.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.node_id !== null && this.node_id !== undefined) {\n    output.writeFieldBegin('node_id', Thrift.Type.I32, 6);\n    output.writeI32(this.node_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRowSet = function (args) {\n  this.row_desc = null;\n  this.rows = null;\n  this.columns = null;\n  this.is_columnar = null;\n  if (args) {\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TRow]);\n    }\n    if (args.columns !== undefined && args.columns !== null) {\n      this.columns = Thrift.copyList(args.columns, [TColumn]);\n    }\n    if (args.is_columnar !== undefined && args.is_columnar !== null) {\n      this.is_columnar = args.is_columnar;\n    }\n  }\n};\nTRowSet.prototype = {};\nTRowSet.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.row_desc = [];\n          var _rtmp346 = input.readListBegin();\n          var _size45 = _rtmp346.size || 0;\n          for (var _i47 = 0; _i47 < _size45; ++_i47) {\n            var elem48 = null;\n            elem48 = new TColumnType();\n            elem48.read(input);\n            this.row_desc.push(elem48);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.rows = [];\n          var _rtmp350 = input.readListBegin();\n          var _size49 = _rtmp350.size || 0;\n          for (var _i51 = 0; _i51 < _size49; ++_i51) {\n            var elem52 = null;\n            elem52 = new TRow();\n            elem52.read(input);\n            this.rows.push(elem52);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.columns = [];\n          var _rtmp354 = input.readListBegin();\n          var _size53 = _rtmp354.size || 0;\n          for (var _i55 = 0; _i55 < _size53; ++_i55) {\n            var elem56 = null;\n            elem56 = new TColumn();\n            elem56.read(input);\n            this.columns.push(elem56);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_columnar = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRowSet.prototype.write = function (output) {\n  output.writeStructBegin('TRowSet');\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter57 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter57)) {\n        iter57 = this.row_desc[iter57];\n        iter57.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter58 in this.rows) {\n      if (this.rows.hasOwnProperty(iter58)) {\n        iter58 = this.rows[iter58];\n        iter58.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.columns !== null && this.columns !== undefined) {\n    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);\n    for (var iter59 in this.columns) {\n      if (this.columns.hasOwnProperty(iter59)) {\n        iter59 = this.columns[iter59];\n        iter59.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.is_columnar !== null && this.is_columnar !== undefined) {\n    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);\n    output.writeBool(this.is_columnar);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TQueryResult = function (args) {\n  this.row_set = null;\n  this.execution_time_ms = null;\n  this.total_time_ms = null;\n  this.nonce = null;\n  this.debug = null;\n  this.success = true;\n  if (args) {\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n    if (args.debug !== undefined && args.debug !== null) {\n      this.debug = args.debug;\n    }\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n  }\n};\nTQueryResult.prototype = {};\nTQueryResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.debug = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.success = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTQueryResult.prototype.write = function (output) {\n  output.writeStructBegin('TQueryResult');\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  if (this.debug !== null && this.debug !== undefined) {\n    output.writeFieldBegin('debug', Thrift.Type.STRING, 5);\n    output.writeString(this.debug);\n    output.writeFieldEnd();\n  }\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.BOOL, 6);\n    output.writeBool(this.success);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDataFrame = function (args) {\n  this.sm_handle = null;\n  this.sm_size = null;\n  this.df_handle = null;\n  this.df_size = null;\n  this.execution_time_ms = null;\n  this.arrow_conversion_time_ms = null;\n  if (args) {\n    if (args.sm_handle !== undefined && args.sm_handle !== null) {\n      this.sm_handle = args.sm_handle;\n    }\n    if (args.sm_size !== undefined && args.sm_size !== null) {\n      this.sm_size = args.sm_size;\n    }\n    if (args.df_handle !== undefined && args.df_handle !== null) {\n      this.df_handle = args.df_handle;\n    }\n    if (args.df_size !== undefined && args.df_size !== null) {\n      this.df_size = args.df_size;\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.arrow_conversion_time_ms !== undefined && args.arrow_conversion_time_ms !== null) {\n      this.arrow_conversion_time_ms = args.arrow_conversion_time_ms;\n    }\n  }\n};\nTDataFrame.prototype = {};\nTDataFrame.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.sm_handle = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.sm_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.df_handle = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.df_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.arrow_conversion_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDataFrame.prototype.write = function (output) {\n  output.writeStructBegin('TDataFrame');\n  if (this.sm_handle !== null && this.sm_handle !== undefined) {\n    output.writeFieldBegin('sm_handle', Thrift.Type.STRING, 1);\n    output.writeBinary(this.sm_handle);\n    output.writeFieldEnd();\n  }\n  if (this.sm_size !== null && this.sm_size !== undefined) {\n    output.writeFieldBegin('sm_size', Thrift.Type.I64, 2);\n    output.writeI64(this.sm_size);\n    output.writeFieldEnd();\n  }\n  if (this.df_handle !== null && this.df_handle !== undefined) {\n    output.writeFieldBegin('df_handle', Thrift.Type.STRING, 3);\n    output.writeBinary(this.df_handle);\n    output.writeFieldEnd();\n  }\n  if (this.df_size !== null && this.df_size !== undefined) {\n    output.writeFieldBegin('df_size', Thrift.Type.I64, 4);\n    output.writeI64(this.df_size);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.arrow_conversion_time_ms !== null && this.arrow_conversion_time_ms !== undefined) {\n    output.writeFieldBegin('arrow_conversion_time_ms', Thrift.Type.I64, 6);\n    output.writeI64(this.arrow_conversion_time_ms);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDBInfo = function (args) {\n  this.db_name = null;\n  this.db_owner = null;\n  if (args) {\n    if (args.db_name !== undefined && args.db_name !== null) {\n      this.db_name = args.db_name;\n    }\n    if (args.db_owner !== undefined && args.db_owner !== null) {\n      this.db_owner = args.db_owner;\n    }\n  }\n};\nTDBInfo.prototype = {};\nTDBInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.db_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.db_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDBInfo.prototype.write = function (output) {\n  output.writeStructBegin('TDBInfo');\n  if (this.db_name !== null && this.db_name !== undefined) {\n    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);\n    output.writeString(this.db_name);\n    output.writeFieldEnd();\n  }\n  if (this.db_owner !== null && this.db_owner !== undefined) {\n    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);\n    output.writeString(this.db_owner);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TOmniSciException = function (args) {\n  this.error_msg = null;\n  if (args) {\n    if (args.error_msg !== undefined && args.error_msg !== null) {\n      this.error_msg = args.error_msg;\n    }\n  }\n};\nThrift.inherits(TOmniSciException, Thrift.TException);\nTOmniSciException.prototype.name = 'TOmniSciException';\nTOmniSciException.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.error_msg = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTOmniSciException.prototype.write = function (output) {\n  output.writeStructBegin('TOmniSciException');\n  if (this.error_msg !== null && this.error_msg !== undefined) {\n    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);\n    output.writeString(this.error_msg);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCopyParams = function (args) {\n  this.delimiter = null;\n  this.null_str = null;\n  this.has_header = 0;\n  this.quoted = null;\n  this.quote = null;\n  this.escape = null;\n  this.line_delim = null;\n  this.array_delim = null;\n  this.array_begin = null;\n  this.array_end = null;\n  this.threads = null;\n  this.file_type = 0;\n  this.s3_access_key = null;\n  this.s3_secret_key = null;\n  this.s3_region = null;\n  this.geo_coords_encoding = 6;\n  this.geo_coords_comp_param = 32;\n  this.geo_coords_type = 18;\n  this.geo_coords_srid = 4326;\n  this.sanitize_column_names = true;\n  this.geo_layer_name = null;\n  this.s3_endpoint = null;\n  this.geo_assign_render_groups = true;\n  this.geo_explode_collections = false;\n  if (args) {\n    if (args.delimiter !== undefined && args.delimiter !== null) {\n      this.delimiter = args.delimiter;\n    }\n    if (args.null_str !== undefined && args.null_str !== null) {\n      this.null_str = args.null_str;\n    }\n    if (args.has_header !== undefined && args.has_header !== null) {\n      this.has_header = args.has_header;\n    }\n    if (args.quoted !== undefined && args.quoted !== null) {\n      this.quoted = args.quoted;\n    }\n    if (args.quote !== undefined && args.quote !== null) {\n      this.quote = args.quote;\n    }\n    if (args.escape !== undefined && args.escape !== null) {\n      this.escape = args.escape;\n    }\n    if (args.line_delim !== undefined && args.line_delim !== null) {\n      this.line_delim = args.line_delim;\n    }\n    if (args.array_delim !== undefined && args.array_delim !== null) {\n      this.array_delim = args.array_delim;\n    }\n    if (args.array_begin !== undefined && args.array_begin !== null) {\n      this.array_begin = args.array_begin;\n    }\n    if (args.array_end !== undefined && args.array_end !== null) {\n      this.array_end = args.array_end;\n    }\n    if (args.threads !== undefined && args.threads !== null) {\n      this.threads = args.threads;\n    }\n    if (args.file_type !== undefined && args.file_type !== null) {\n      this.file_type = args.file_type;\n    }\n    if (args.s3_access_key !== undefined && args.s3_access_key !== null) {\n      this.s3_access_key = args.s3_access_key;\n    }\n    if (args.s3_secret_key !== undefined && args.s3_secret_key !== null) {\n      this.s3_secret_key = args.s3_secret_key;\n    }\n    if (args.s3_region !== undefined && args.s3_region !== null) {\n      this.s3_region = args.s3_region;\n    }\n    if (args.geo_coords_encoding !== undefined && args.geo_coords_encoding !== null) {\n      this.geo_coords_encoding = args.geo_coords_encoding;\n    }\n    if (args.geo_coords_comp_param !== undefined && args.geo_coords_comp_param !== null) {\n      this.geo_coords_comp_param = args.geo_coords_comp_param;\n    }\n    if (args.geo_coords_type !== undefined && args.geo_coords_type !== null) {\n      this.geo_coords_type = args.geo_coords_type;\n    }\n    if (args.geo_coords_srid !== undefined && args.geo_coords_srid !== null) {\n      this.geo_coords_srid = args.geo_coords_srid;\n    }\n    if (args.sanitize_column_names !== undefined && args.sanitize_column_names !== null) {\n      this.sanitize_column_names = args.sanitize_column_names;\n    }\n    if (args.geo_layer_name !== undefined && args.geo_layer_name !== null) {\n      this.geo_layer_name = args.geo_layer_name;\n    }\n    if (args.s3_endpoint !== undefined && args.s3_endpoint !== null) {\n      this.s3_endpoint = args.s3_endpoint;\n    }\n    if (args.geo_assign_render_groups !== undefined && args.geo_assign_render_groups !== null) {\n      this.geo_assign_render_groups = args.geo_assign_render_groups;\n    }\n    if (args.geo_explode_collections !== undefined && args.geo_explode_collections !== null) {\n      this.geo_explode_collections = args.geo_explode_collections;\n    }\n  }\n};\nTCopyParams.prototype = {};\nTCopyParams.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.delimiter = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.null_str = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.has_header = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.quoted = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.quote = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.escape = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.line_delim = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_delim = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_begin = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.STRING) {\n          this.array_end = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 11:\n        if (ftype == Thrift.Type.I32) {\n          this.threads = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 12:\n        if (ftype == Thrift.Type.I32) {\n          this.file_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 13:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_access_key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 14:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_secret_key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 15:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_region = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 16:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_encoding = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 17:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_comp_param = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 18:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 19:\n        if (ftype == Thrift.Type.I32) {\n          this.geo_coords_srid = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 20:\n        if (ftype == Thrift.Type.BOOL) {\n          this.sanitize_column_names = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 21:\n        if (ftype == Thrift.Type.STRING) {\n          this.geo_layer_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 22:\n        if (ftype == Thrift.Type.STRING) {\n          this.s3_endpoint = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 23:\n        if (ftype == Thrift.Type.BOOL) {\n          this.geo_assign_render_groups = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 24:\n        if (ftype == Thrift.Type.BOOL) {\n          this.geo_explode_collections = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCopyParams.prototype.write = function (output) {\n  output.writeStructBegin('TCopyParams');\n  if (this.delimiter !== null && this.delimiter !== undefined) {\n    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);\n    output.writeString(this.delimiter);\n    output.writeFieldEnd();\n  }\n  if (this.null_str !== null && this.null_str !== undefined) {\n    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);\n    output.writeString(this.null_str);\n    output.writeFieldEnd();\n  }\n  if (this.has_header !== null && this.has_header !== undefined) {\n    output.writeFieldBegin('has_header', Thrift.Type.I32, 3);\n    output.writeI32(this.has_header);\n    output.writeFieldEnd();\n  }\n  if (this.quoted !== null && this.quoted !== undefined) {\n    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);\n    output.writeBool(this.quoted);\n    output.writeFieldEnd();\n  }\n  if (this.quote !== null && this.quote !== undefined) {\n    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);\n    output.writeString(this.quote);\n    output.writeFieldEnd();\n  }\n  if (this.escape !== null && this.escape !== undefined) {\n    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);\n    output.writeString(this.escape);\n    output.writeFieldEnd();\n  }\n  if (this.line_delim !== null && this.line_delim !== undefined) {\n    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);\n    output.writeString(this.line_delim);\n    output.writeFieldEnd();\n  }\n  if (this.array_delim !== null && this.array_delim !== undefined) {\n    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);\n    output.writeString(this.array_delim);\n    output.writeFieldEnd();\n  }\n  if (this.array_begin !== null && this.array_begin !== undefined) {\n    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);\n    output.writeString(this.array_begin);\n    output.writeFieldEnd();\n  }\n  if (this.array_end !== null && this.array_end !== undefined) {\n    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);\n    output.writeString(this.array_end);\n    output.writeFieldEnd();\n  }\n  if (this.threads !== null && this.threads !== undefined) {\n    output.writeFieldBegin('threads', Thrift.Type.I32, 11);\n    output.writeI32(this.threads);\n    output.writeFieldEnd();\n  }\n  if (this.file_type !== null && this.file_type !== undefined) {\n    output.writeFieldBegin('file_type', Thrift.Type.I32, 12);\n    output.writeI32(this.file_type);\n    output.writeFieldEnd();\n  }\n  if (this.s3_access_key !== null && this.s3_access_key !== undefined) {\n    output.writeFieldBegin('s3_access_key', Thrift.Type.STRING, 13);\n    output.writeString(this.s3_access_key);\n    output.writeFieldEnd();\n  }\n  if (this.s3_secret_key !== null && this.s3_secret_key !== undefined) {\n    output.writeFieldBegin('s3_secret_key', Thrift.Type.STRING, 14);\n    output.writeString(this.s3_secret_key);\n    output.writeFieldEnd();\n  }\n  if (this.s3_region !== null && this.s3_region !== undefined) {\n    output.writeFieldBegin('s3_region', Thrift.Type.STRING, 15);\n    output.writeString(this.s3_region);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_encoding !== null && this.geo_coords_encoding !== undefined) {\n    output.writeFieldBegin('geo_coords_encoding', Thrift.Type.I32, 16);\n    output.writeI32(this.geo_coords_encoding);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_comp_param !== null && this.geo_coords_comp_param !== undefined) {\n    output.writeFieldBegin('geo_coords_comp_param', Thrift.Type.I32, 17);\n    output.writeI32(this.geo_coords_comp_param);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_type !== null && this.geo_coords_type !== undefined) {\n    output.writeFieldBegin('geo_coords_type', Thrift.Type.I32, 18);\n    output.writeI32(this.geo_coords_type);\n    output.writeFieldEnd();\n  }\n  if (this.geo_coords_srid !== null && this.geo_coords_srid !== undefined) {\n    output.writeFieldBegin('geo_coords_srid', Thrift.Type.I32, 19);\n    output.writeI32(this.geo_coords_srid);\n    output.writeFieldEnd();\n  }\n  if (this.sanitize_column_names !== null && this.sanitize_column_names !== undefined) {\n    output.writeFieldBegin('sanitize_column_names', Thrift.Type.BOOL, 20);\n    output.writeBool(this.sanitize_column_names);\n    output.writeFieldEnd();\n  }\n  if (this.geo_layer_name !== null && this.geo_layer_name !== undefined) {\n    output.writeFieldBegin('geo_layer_name', Thrift.Type.STRING, 21);\n    output.writeString(this.geo_layer_name);\n    output.writeFieldEnd();\n  }\n  if (this.s3_endpoint !== null && this.s3_endpoint !== undefined) {\n    output.writeFieldBegin('s3_endpoint', Thrift.Type.STRING, 22);\n    output.writeString(this.s3_endpoint);\n    output.writeFieldEnd();\n  }\n  if (this.geo_assign_render_groups !== null && this.geo_assign_render_groups !== undefined) {\n    output.writeFieldBegin('geo_assign_render_groups', Thrift.Type.BOOL, 23);\n    output.writeBool(this.geo_assign_render_groups);\n    output.writeFieldEnd();\n  }\n  if (this.geo_explode_collections !== null && this.geo_explode_collections !== undefined) {\n    output.writeFieldBegin('geo_explode_collections', Thrift.Type.BOOL, 24);\n    output.writeBool(this.geo_explode_collections);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TCreateParams = function (args) {\n  this.is_replicated = null;\n  if (args) {\n    if (args.is_replicated !== undefined && args.is_replicated !== null) {\n      this.is_replicated = args.is_replicated;\n    }\n  }\n};\nTCreateParams.prototype = {};\nTCreateParams.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_replicated = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCreateParams.prototype.write = function (output) {\n  output.writeStructBegin('TCreateParams');\n  if (this.is_replicated !== null && this.is_replicated !== undefined) {\n    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 1);\n    output.writeBool(this.is_replicated);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDetectResult = function (args) {\n  this.row_set = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nTDetectResult.prototype = {};\nTDetectResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDetectResult.prototype.write = function (output) {\n  output.writeStructBegin('TDetectResult');\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TImportStatus = function (args) {\n  this.elapsed = null;\n  this.rows_completed = null;\n  this.rows_estimated = null;\n  this.rows_rejected = null;\n  if (args) {\n    if (args.elapsed !== undefined && args.elapsed !== null) {\n      this.elapsed = args.elapsed;\n    }\n    if (args.rows_completed !== undefined && args.rows_completed !== null) {\n      this.rows_completed = args.rows_completed;\n    }\n    if (args.rows_estimated !== undefined && args.rows_estimated !== null) {\n      this.rows_estimated = args.rows_estimated;\n    }\n    if (args.rows_rejected !== undefined && args.rows_rejected !== null) {\n      this.rows_rejected = args.rows_rejected;\n    }\n  }\n};\nTImportStatus.prototype = {};\nTImportStatus.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.elapsed = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_completed = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_estimated = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.rows_rejected = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTImportStatus.prototype.write = function (output) {\n  output.writeStructBegin('TImportStatus');\n  if (this.elapsed !== null && this.elapsed !== undefined) {\n    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);\n    output.writeI64(this.elapsed);\n    output.writeFieldEnd();\n  }\n  if (this.rows_completed !== null && this.rows_completed !== undefined) {\n    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);\n    output.writeI64(this.rows_completed);\n    output.writeFieldEnd();\n  }\n  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {\n    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);\n    output.writeI64(this.rows_estimated);\n    output.writeFieldEnd();\n  }\n  if (this.rows_rejected !== null && this.rows_rejected !== undefined) {\n    output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);\n    output.writeI64(this.rows_rejected);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TFrontendView = function (args) {\n  this.view_name = null;\n  this.view_state = null;\n  this.image_hash = null;\n  this.update_time = null;\n  this.view_metadata = null;\n  if (args) {\n    if (args.view_name !== undefined && args.view_name !== null) {\n      this.view_name = args.view_name;\n    }\n    if (args.view_state !== undefined && args.view_state !== null) {\n      this.view_state = args.view_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.update_time !== undefined && args.update_time !== null) {\n      this.update_time = args.update_time;\n    }\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n      this.view_metadata = args.view_metadata;\n    }\n  }\n};\nTFrontendView.prototype = {};\nTFrontendView.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.update_time = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTFrontendView.prototype.write = function (output) {\n  output.writeStructBegin('TFrontendView');\n  if (this.view_name !== null && this.view_name !== undefined) {\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);\n    output.writeString(this.view_name);\n    output.writeFieldEnd();\n  }\n  if (this.view_state !== null && this.view_state !== undefined) {\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\n    output.writeString(this.view_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.update_time !== null && this.update_time !== undefined) {\n    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);\n    output.writeString(this.update_time);\n    output.writeFieldEnd();\n  }\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.view_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDashboard = function (args) {\n  this.dashboard_name = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.update_time = null;\n  this.dashboard_metadata = null;\n  this.dashboard_id = null;\n  this.dashboard_owner = null;\n  this.is_dash_shared = null;\n  if (args) {\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.update_time !== undefined && args.update_time !== null) {\n      this.update_time = args.update_time;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {\n      this.dashboard_owner = args.dashboard_owner;\n    }\n    if (args.is_dash_shared !== undefined && args.is_dash_shared !== null) {\n      this.is_dash_shared = args.is_dash_shared;\n    }\n  }\n};\nTDashboard.prototype = {};\nTDashboard.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.update_time = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_dash_shared = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDashboard.prototype.write = function (output) {\n  output.writeStructBegin('TDashboard');\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 1);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 2);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.update_time !== null && this.update_time !== undefined) {\n    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);\n    output.writeString(this.update_time);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 6);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {\n    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 7);\n    output.writeString(this.dashboard_owner);\n    output.writeFieldEnd();\n  }\n  if (this.is_dash_shared !== null && this.is_dash_shared !== undefined) {\n    output.writeFieldBegin('is_dash_shared', Thrift.Type.BOOL, 8);\n    output.writeBool(this.is_dash_shared);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TServerStatus = function (args) {\n  this.read_only = null;\n  this.version = null;\n  this.rendering_enabled = null;\n  this.start_time = null;\n  this.edition = null;\n  this.host_name = null;\n  this.poly_rendering_enabled = null;\n  this.role = null;\n  if (args) {\n    if (args.read_only !== undefined && args.read_only !== null) {\n      this.read_only = args.read_only;\n    }\n    if (args.version !== undefined && args.version !== null) {\n      this.version = args.version;\n    }\n    if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {\n      this.rendering_enabled = args.rendering_enabled;\n    }\n    if (args.start_time !== undefined && args.start_time !== null) {\n      this.start_time = args.start_time;\n    }\n    if (args.edition !== undefined && args.edition !== null) {\n      this.edition = args.edition;\n    }\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.poly_rendering_enabled !== undefined && args.poly_rendering_enabled !== null) {\n      this.poly_rendering_enabled = args.poly_rendering_enabled;\n    }\n    if (args.role !== undefined && args.role !== null) {\n      this.role = args.role;\n    }\n  }\n};\nTServerStatus.prototype = {};\nTServerStatus.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.read_only = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.version = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.rendering_enabled = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.start_time = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.edition = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.poly_rendering_enabled = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.I32) {\n          this.role = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTServerStatus.prototype.write = function (output) {\n  output.writeStructBegin('TServerStatus');\n  if (this.read_only !== null && this.read_only !== undefined) {\n    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);\n    output.writeBool(this.read_only);\n    output.writeFieldEnd();\n  }\n  if (this.version !== null && this.version !== undefined) {\n    output.writeFieldBegin('version', Thrift.Type.STRING, 2);\n    output.writeString(this.version);\n    output.writeFieldEnd();\n  }\n  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {\n    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);\n    output.writeBool(this.rendering_enabled);\n    output.writeFieldEnd();\n  }\n  if (this.start_time !== null && this.start_time !== undefined) {\n    output.writeFieldBegin('start_time', Thrift.Type.I64, 4);\n    output.writeI64(this.start_time);\n    output.writeFieldEnd();\n  }\n  if (this.edition !== null && this.edition !== undefined) {\n    output.writeFieldBegin('edition', Thrift.Type.STRING, 5);\n    output.writeString(this.edition);\n    output.writeFieldEnd();\n  }\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 6);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.poly_rendering_enabled !== null && this.poly_rendering_enabled !== undefined) {\n    output.writeFieldBegin('poly_rendering_enabled', Thrift.Type.BOOL, 7);\n    output.writeBool(this.poly_rendering_enabled);\n    output.writeFieldEnd();\n  }\n  if (this.role !== null && this.role !== undefined) {\n    output.writeFieldBegin('role', Thrift.Type.I32, 8);\n    output.writeI32(this.role);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPixel = function (args) {\n  this.x = null;\n  this.y = null;\n  if (args) {\n    if (args.x !== undefined && args.x !== null) {\n      this.x = args.x;\n    }\n    if (args.y !== undefined && args.y !== null) {\n      this.y = args.y;\n    }\n  }\n};\nTPixel.prototype = {};\nTPixel.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.x = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.y = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPixel.prototype.write = function (output) {\n  output.writeStructBegin('TPixel');\n  if (this.x !== null && this.x !== undefined) {\n    output.writeFieldBegin('x', Thrift.Type.I64, 1);\n    output.writeI64(this.x);\n    output.writeFieldEnd();\n  }\n  if (this.y !== null && this.y !== undefined) {\n    output.writeFieldBegin('y', Thrift.Type.I64, 2);\n    output.writeI64(this.y);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPixelTableRowResult = function (args) {\n  this.pixel = null;\n  this.vega_table_name = null;\n  this.table_id = null;\n  this.row_id = null;\n  this.row_set = null;\n  this.nonce = null;\n  if (args) {\n    if (args.pixel !== undefined && args.pixel !== null) {\n      this.pixel = new TPixel(args.pixel);\n    }\n    if (args.vega_table_name !== undefined && args.vega_table_name !== null) {\n      this.vega_table_name = args.vega_table_name;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = Thrift.copyList(args.table_id, [null]);\n    }\n    if (args.row_id !== undefined && args.row_id !== null) {\n      this.row_id = Thrift.copyList(args.row_id, [null]);\n    }\n    if (args.row_set !== undefined && args.row_set !== null) {\n      this.row_set = new TRowSet(args.row_set);\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nTPixelTableRowResult.prototype = {};\nTPixelTableRowResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pixel = new TPixel();\n          this.pixel.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.table_id = [];\n          var _rtmp361 = input.readListBegin();\n          var _size60 = _rtmp361.size || 0;\n          for (var _i62 = 0; _i62 < _size60; ++_i62) {\n            var elem63 = null;\n            elem63 = input.readI64().value;\n            this.table_id.push(elem63);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          this.row_id = [];\n          var _rtmp365 = input.readListBegin();\n          var _size64 = _rtmp365.size || 0;\n          for (var _i66 = 0; _i66 < _size64; ++_i66) {\n            var elem67 = null;\n            elem67 = input.readI64().value;\n            this.row_id.push(elem67);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.row_set = new TRowSet();\n          this.row_set.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPixelTableRowResult.prototype.write = function (output) {\n  output.writeStructBegin('TPixelTableRowResult');\n  if (this.pixel !== null && this.pixel !== undefined) {\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\n    this.pixel.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.vega_table_name !== null && this.vega_table_name !== undefined) {\n    output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.vega_table_name);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.I64, this.table_id.length);\n    for (var iter68 in this.table_id) {\n      if (this.table_id.hasOwnProperty(iter68)) {\n        iter68 = this.table_id[iter68];\n        output.writeI64(iter68);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.row_id !== null && this.row_id !== undefined) {\n    output.writeFieldBegin('row_id', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.I64, this.row_id.length);\n    for (var iter69 in this.row_id) {\n      if (this.row_id.hasOwnProperty(iter69)) {\n        iter69 = this.row_id[iter69];\n        output.writeI64(iter69);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.row_set !== null && this.row_set !== undefined) {\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);\n    this.row_set.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderResult = function (args) {\n  this.image = null;\n  this.nonce = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  this.vega_metadata = null;\n  if (args) {\n    if (args.image !== undefined && args.image !== null) {\n      this.image = args.image;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n    if (args.vega_metadata !== undefined && args.vega_metadata !== null) {\n      this.vega_metadata = args.vega_metadata;\n    }\n  }\n};\nTRenderResult.prototype = {};\nTRenderResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.image = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderResult');\n  if (this.image !== null && this.image !== undefined) {\n    output.writeFieldBegin('image', Thrift.Type.STRING, 1);\n    output.writeBinary(this.image);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.vega_metadata !== null && this.vega_metadata !== undefined) {\n    output.writeFieldBegin('vega_metadata', Thrift.Type.STRING, 6);\n    output.writeString(this.vega_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TGpuSpecification = function (args) {\n  this.num_sm = null;\n  this.clock_frequency_kHz = null;\n  this.memory = null;\n  this.compute_capability_major = null;\n  this.compute_capability_minor = null;\n  if (args) {\n    if (args.num_sm !== undefined && args.num_sm !== null) {\n      this.num_sm = args.num_sm;\n    }\n    if (args.clock_frequency_kHz !== undefined && args.clock_frequency_kHz !== null) {\n      this.clock_frequency_kHz = args.clock_frequency_kHz;\n    }\n    if (args.memory !== undefined && args.memory !== null) {\n      this.memory = args.memory;\n    }\n    if (args.compute_capability_major !== undefined && args.compute_capability_major !== null) {\n      this.compute_capability_major = args.compute_capability_major;\n    }\n    if (args.compute_capability_minor !== undefined && args.compute_capability_minor !== null) {\n      this.compute_capability_minor = args.compute_capability_minor;\n    }\n  }\n};\nTGpuSpecification.prototype = {};\nTGpuSpecification.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.num_sm = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.clock_frequency_kHz = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.memory = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I16) {\n          this.compute_capability_major = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I16) {\n          this.compute_capability_minor = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTGpuSpecification.prototype.write = function (output) {\n  output.writeStructBegin('TGpuSpecification');\n  if (this.num_sm !== null && this.num_sm !== undefined) {\n    output.writeFieldBegin('num_sm', Thrift.Type.I32, 1);\n    output.writeI32(this.num_sm);\n    output.writeFieldEnd();\n  }\n  if (this.clock_frequency_kHz !== null && this.clock_frequency_kHz !== undefined) {\n    output.writeFieldBegin('clock_frequency_kHz', Thrift.Type.I64, 2);\n    output.writeI64(this.clock_frequency_kHz);\n    output.writeFieldEnd();\n  }\n  if (this.memory !== null && this.memory !== undefined) {\n    output.writeFieldBegin('memory', Thrift.Type.I64, 3);\n    output.writeI64(this.memory);\n    output.writeFieldEnd();\n  }\n  if (this.compute_capability_major !== null && this.compute_capability_major !== undefined) {\n    output.writeFieldBegin('compute_capability_major', Thrift.Type.I16, 4);\n    output.writeI16(this.compute_capability_major);\n    output.writeFieldEnd();\n  }\n  if (this.compute_capability_minor !== null && this.compute_capability_minor !== undefined) {\n    output.writeFieldBegin('compute_capability_minor', Thrift.Type.I16, 5);\n    output.writeI16(this.compute_capability_minor);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.THardwareInfo = function (args) {\n  this.num_gpu_hw = null;\n  this.num_cpu_hw = null;\n  this.num_gpu_allocated = null;\n  this.start_gpu = null;\n  this.host_name = null;\n  this.gpu_info = null;\n  if (args) {\n    if (args.num_gpu_hw !== undefined && args.num_gpu_hw !== null) {\n      this.num_gpu_hw = args.num_gpu_hw;\n    }\n    if (args.num_cpu_hw !== undefined && args.num_cpu_hw !== null) {\n      this.num_cpu_hw = args.num_cpu_hw;\n    }\n    if (args.num_gpu_allocated !== undefined && args.num_gpu_allocated !== null) {\n      this.num_gpu_allocated = args.num_gpu_allocated;\n    }\n    if (args.start_gpu !== undefined && args.start_gpu !== null) {\n      this.start_gpu = args.start_gpu;\n    }\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.gpu_info !== undefined && args.gpu_info !== null) {\n      this.gpu_info = Thrift.copyList(args.gpu_info, [TGpuSpecification]);\n    }\n  }\n};\nTHardwareInfo.prototype = {};\nTHardwareInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I16) {\n          this.num_gpu_hw = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I16) {\n          this.num_cpu_hw = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I16) {\n          this.num_gpu_allocated = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I16) {\n          this.start_gpu = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.LIST) {\n          this.gpu_info = [];\n          var _rtmp371 = input.readListBegin();\n          var _size70 = _rtmp371.size || 0;\n          for (var _i72 = 0; _i72 < _size70; ++_i72) {\n            var elem73 = null;\n            elem73 = new TGpuSpecification();\n            elem73.read(input);\n            this.gpu_info.push(elem73);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTHardwareInfo.prototype.write = function (output) {\n  output.writeStructBegin('THardwareInfo');\n  if (this.num_gpu_hw !== null && this.num_gpu_hw !== undefined) {\n    output.writeFieldBegin('num_gpu_hw', Thrift.Type.I16, 1);\n    output.writeI16(this.num_gpu_hw);\n    output.writeFieldEnd();\n  }\n  if (this.num_cpu_hw !== null && this.num_cpu_hw !== undefined) {\n    output.writeFieldBegin('num_cpu_hw', Thrift.Type.I16, 2);\n    output.writeI16(this.num_cpu_hw);\n    output.writeFieldEnd();\n  }\n  if (this.num_gpu_allocated !== null && this.num_gpu_allocated !== undefined) {\n    output.writeFieldBegin('num_gpu_allocated', Thrift.Type.I16, 3);\n    output.writeI16(this.num_gpu_allocated);\n    output.writeFieldEnd();\n  }\n  if (this.start_gpu !== null && this.start_gpu !== undefined) {\n    output.writeFieldBegin('start_gpu', Thrift.Type.I16, 4);\n    output.writeI16(this.start_gpu);\n    output.writeFieldEnd();\n  }\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 5);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.gpu_info !== null && this.gpu_info !== undefined) {\n    output.writeFieldBegin('gpu_info', Thrift.Type.LIST, 6);\n    output.writeListBegin(Thrift.Type.STRUCT, this.gpu_info.length);\n    for (var iter74 in this.gpu_info) {\n      if (this.gpu_info.hasOwnProperty(iter74)) {\n        iter74 = this.gpu_info[iter74];\n        iter74.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TClusterHardwareInfo = function (args) {\n  this.hardware_info = null;\n  if (args) {\n    if (args.hardware_info !== undefined && args.hardware_info !== null) {\n      this.hardware_info = Thrift.copyList(args.hardware_info, [THardwareInfo]);\n    }\n  }\n};\nTClusterHardwareInfo.prototype = {};\nTClusterHardwareInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.hardware_info = [];\n          var _rtmp376 = input.readListBegin();\n          var _size75 = _rtmp376.size || 0;\n          for (var _i77 = 0; _i77 < _size75; ++_i77) {\n            var elem78 = null;\n            elem78 = new THardwareInfo();\n            elem78.read(input);\n            this.hardware_info.push(elem78);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTClusterHardwareInfo.prototype.write = function (output) {\n  output.writeStructBegin('TClusterHardwareInfo');\n  if (this.hardware_info !== null && this.hardware_info !== undefined) {\n    output.writeFieldBegin('hardware_info', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.hardware_info.length);\n    for (var iter79 in this.hardware_info) {\n      if (this.hardware_info.hasOwnProperty(iter79)) {\n        iter79 = this.hardware_info[iter79];\n        iter79.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TMemoryData = function (args) {\n  this.slab = null;\n  this.start_page = null;\n  this.num_pages = null;\n  this.touch = null;\n  this.chunk_key = null;\n  this.buffer_epoch = null;\n  this.is_free = null;\n  if (args) {\n    if (args.slab !== undefined && args.slab !== null) {\n      this.slab = args.slab;\n    }\n    if (args.start_page !== undefined && args.start_page !== null) {\n      this.start_page = args.start_page;\n    }\n    if (args.num_pages !== undefined && args.num_pages !== null) {\n      this.num_pages = args.num_pages;\n    }\n    if (args.touch !== undefined && args.touch !== null) {\n      this.touch = args.touch;\n    }\n    if (args.chunk_key !== undefined && args.chunk_key !== null) {\n      this.chunk_key = Thrift.copyList(args.chunk_key, [null]);\n    }\n    if (args.buffer_epoch !== undefined && args.buffer_epoch !== null) {\n      this.buffer_epoch = args.buffer_epoch;\n    }\n    if (args.is_free !== undefined && args.is_free !== null) {\n      this.is_free = args.is_free;\n    }\n  }\n};\nTMemoryData.prototype = {};\nTMemoryData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.slab = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.start_page = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.num_pages = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.touch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          this.chunk_key = [];\n          var _rtmp381 = input.readListBegin();\n          var _size80 = _rtmp381.size || 0;\n          for (var _i82 = 0; _i82 < _size80; ++_i82) {\n            var elem83 = null;\n            elem83 = input.readI64().value;\n            this.chunk_key.push(elem83);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.buffer_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_free = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTMemoryData.prototype.write = function (output) {\n  output.writeStructBegin('TMemoryData');\n  if (this.slab !== null && this.slab !== undefined) {\n    output.writeFieldBegin('slab', Thrift.Type.I64, 1);\n    output.writeI64(this.slab);\n    output.writeFieldEnd();\n  }\n  if (this.start_page !== null && this.start_page !== undefined) {\n    output.writeFieldBegin('start_page', Thrift.Type.I32, 2);\n    output.writeI32(this.start_page);\n    output.writeFieldEnd();\n  }\n  if (this.num_pages !== null && this.num_pages !== undefined) {\n    output.writeFieldBegin('num_pages', Thrift.Type.I64, 3);\n    output.writeI64(this.num_pages);\n    output.writeFieldEnd();\n  }\n  if (this.touch !== null && this.touch !== undefined) {\n    output.writeFieldBegin('touch', Thrift.Type.I32, 4);\n    output.writeI32(this.touch);\n    output.writeFieldEnd();\n  }\n  if (this.chunk_key !== null && this.chunk_key !== undefined) {\n    output.writeFieldBegin('chunk_key', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.I64, this.chunk_key.length);\n    for (var iter84 in this.chunk_key) {\n      if (this.chunk_key.hasOwnProperty(iter84)) {\n        iter84 = this.chunk_key[iter84];\n        output.writeI64(iter84);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.buffer_epoch !== null && this.buffer_epoch !== undefined) {\n    output.writeFieldBegin('buffer_epoch', Thrift.Type.I32, 6);\n    output.writeI32(this.buffer_epoch);\n    output.writeFieldEnd();\n  }\n  if (this.is_free !== null && this.is_free !== undefined) {\n    output.writeFieldBegin('is_free', Thrift.Type.BOOL, 7);\n    output.writeBool(this.is_free);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TNodeMemoryInfo = function (args) {\n  this.host_name = null;\n  this.page_size = null;\n  this.max_num_pages = null;\n  this.num_pages_allocated = null;\n  this.is_allocation_capped = null;\n  this.node_memory_data = null;\n  if (args) {\n    if (args.host_name !== undefined && args.host_name !== null) {\n      this.host_name = args.host_name;\n    }\n    if (args.page_size !== undefined && args.page_size !== null) {\n      this.page_size = args.page_size;\n    }\n    if (args.max_num_pages !== undefined && args.max_num_pages !== null) {\n      this.max_num_pages = args.max_num_pages;\n    }\n    if (args.num_pages_allocated !== undefined && args.num_pages_allocated !== null) {\n      this.num_pages_allocated = args.num_pages_allocated;\n    }\n    if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {\n      this.is_allocation_capped = args.is_allocation_capped;\n    }\n    if (args.node_memory_data !== undefined && args.node_memory_data !== null) {\n      this.node_memory_data = Thrift.copyList(args.node_memory_data, [TMemoryData]);\n    }\n  }\n};\nTNodeMemoryInfo.prototype = {};\nTNodeMemoryInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.host_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.page_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.max_num_pages = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.num_pages_allocated = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_allocation_capped = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.LIST) {\n          this.node_memory_data = [];\n          var _rtmp386 = input.readListBegin();\n          var _size85 = _rtmp386.size || 0;\n          for (var _i87 = 0; _i87 < _size85; ++_i87) {\n            var elem88 = null;\n            elem88 = new TMemoryData();\n            elem88.read(input);\n            this.node_memory_data.push(elem88);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTNodeMemoryInfo.prototype.write = function (output) {\n  output.writeStructBegin('TNodeMemoryInfo');\n  if (this.host_name !== null && this.host_name !== undefined) {\n    output.writeFieldBegin('host_name', Thrift.Type.STRING, 1);\n    output.writeString(this.host_name);\n    output.writeFieldEnd();\n  }\n  if (this.page_size !== null && this.page_size !== undefined) {\n    output.writeFieldBegin('page_size', Thrift.Type.I64, 2);\n    output.writeI64(this.page_size);\n    output.writeFieldEnd();\n  }\n  if (this.max_num_pages !== null && this.max_num_pages !== undefined) {\n    output.writeFieldBegin('max_num_pages', Thrift.Type.I64, 3);\n    output.writeI64(this.max_num_pages);\n    output.writeFieldEnd();\n  }\n  if (this.num_pages_allocated !== null && this.num_pages_allocated !== undefined) {\n    output.writeFieldBegin('num_pages_allocated', Thrift.Type.I64, 4);\n    output.writeI64(this.num_pages_allocated);\n    output.writeFieldEnd();\n  }\n  if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {\n    output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_allocation_capped);\n    output.writeFieldEnd();\n  }\n  if (this.node_memory_data !== null && this.node_memory_data !== undefined) {\n    output.writeFieldBegin('node_memory_data', Thrift.Type.LIST, 6);\n    output.writeListBegin(Thrift.Type.STRUCT, this.node_memory_data.length);\n    for (var iter89 in this.node_memory_data) {\n      if (this.node_memory_data.hasOwnProperty(iter89)) {\n        iter89 = this.node_memory_data[iter89];\n        iter89.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableMeta = function (args) {\n  this.table_name = null;\n  this.num_cols = null;\n  this.is_view = null;\n  this.is_replicated = null;\n  this.shard_count = null;\n  this.max_rows = null;\n  this.table_id = null;\n  this.max_table_id = null;\n  this.col_types = null;\n  this.col_names = null;\n  if (args) {\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.num_cols !== undefined && args.num_cols !== null) {\n      this.num_cols = args.num_cols;\n    }\n    if (args.is_view !== undefined && args.is_view !== null) {\n      this.is_view = args.is_view;\n    }\n    if (args.is_replicated !== undefined && args.is_replicated !== null) {\n      this.is_replicated = args.is_replicated;\n    }\n    if (args.shard_count !== undefined && args.shard_count !== null) {\n      this.shard_count = args.shard_count;\n    }\n    if (args.max_rows !== undefined && args.max_rows !== null) {\n      this.max_rows = args.max_rows;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.max_table_id !== undefined && args.max_table_id !== null) {\n      this.max_table_id = args.max_table_id;\n    }\n    if (args.col_types !== undefined && args.col_types !== null) {\n      this.col_types = Thrift.copyList(args.col_types, [TTypeInfo]);\n    }\n    if (args.col_names !== undefined && args.col_names !== null) {\n      this.col_names = Thrift.copyList(args.col_names, [null]);\n    }\n  }\n};\nTTableMeta.prototype = {};\nTTableMeta.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.num_cols = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_view = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_replicated = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.shard_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.max_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.I64) {\n          this.table_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.I64) {\n          this.max_table_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 10:\n        if (ftype == Thrift.Type.LIST) {\n          this.col_types = [];\n          var _rtmp391 = input.readListBegin();\n          var _size90 = _rtmp391.size || 0;\n          for (var _i92 = 0; _i92 < _size90; ++_i92) {\n            var elem93 = null;\n            elem93 = new TTypeInfo();\n            elem93.read(input);\n            this.col_types.push(elem93);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 11:\n        if (ftype == Thrift.Type.LIST) {\n          this.col_names = [];\n          var _rtmp395 = input.readListBegin();\n          var _size94 = _rtmp395.size || 0;\n          for (var _i96 = 0; _i96 < _size94; ++_i96) {\n            var elem97 = null;\n            elem97 = input.readString().value;\n            this.col_names.push(elem97);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableMeta.prototype.write = function (output) {\n  output.writeStructBegin('TTableMeta');\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 1);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.num_cols !== null && this.num_cols !== undefined) {\n    output.writeFieldBegin('num_cols', Thrift.Type.I64, 2);\n    output.writeI64(this.num_cols);\n    output.writeFieldEnd();\n  }\n  if (this.is_view !== null && this.is_view !== undefined) {\n    output.writeFieldBegin('is_view', Thrift.Type.BOOL, 4);\n    output.writeBool(this.is_view);\n    output.writeFieldEnd();\n  }\n  if (this.is_replicated !== null && this.is_replicated !== undefined) {\n    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 5);\n    output.writeBool(this.is_replicated);\n    output.writeFieldEnd();\n  }\n  if (this.shard_count !== null && this.shard_count !== undefined) {\n    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);\n    output.writeI64(this.shard_count);\n    output.writeFieldEnd();\n  }\n  if (this.max_rows !== null && this.max_rows !== undefined) {\n    output.writeFieldBegin('max_rows', Thrift.Type.I64, 7);\n    output.writeI64(this.max_rows);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I64, 8);\n    output.writeI64(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.max_table_id !== null && this.max_table_id !== undefined) {\n    output.writeFieldBegin('max_table_id', Thrift.Type.I64, 9);\n    output.writeI64(this.max_table_id);\n    output.writeFieldEnd();\n  }\n  if (this.col_types !== null && this.col_types !== undefined) {\n    output.writeFieldBegin('col_types', Thrift.Type.LIST, 10);\n    output.writeListBegin(Thrift.Type.STRUCT, this.col_types.length);\n    for (var iter98 in this.col_types) {\n      if (this.col_types.hasOwnProperty(iter98)) {\n        iter98 = this.col_types[iter98];\n        iter98.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.col_names !== null && this.col_names !== undefined) {\n    output.writeFieldBegin('col_names', Thrift.Type.LIST, 11);\n    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);\n    for (var iter99 in this.col_names) {\n      if (this.col_names.hasOwnProperty(iter99)) {\n        iter99 = this.col_names[iter99];\n        output.writeString(iter99);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableDetails = function (args) {\n  this.row_desc = null;\n  this.fragment_size = null;\n  this.page_size = null;\n  this.max_rows = null;\n  this.view_sql = null;\n  this.shard_count = null;\n  this.key_metainfo = null;\n  this.is_temporary = null;\n  this.partition_detail = null;\n  if (args) {\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.fragment_size !== undefined && args.fragment_size !== null) {\n      this.fragment_size = args.fragment_size;\n    }\n    if (args.page_size !== undefined && args.page_size !== null) {\n      this.page_size = args.page_size;\n    }\n    if (args.max_rows !== undefined && args.max_rows !== null) {\n      this.max_rows = args.max_rows;\n    }\n    if (args.view_sql !== undefined && args.view_sql !== null) {\n      this.view_sql = args.view_sql;\n    }\n    if (args.shard_count !== undefined && args.shard_count !== null) {\n      this.shard_count = args.shard_count;\n    }\n    if (args.key_metainfo !== undefined && args.key_metainfo !== null) {\n      this.key_metainfo = args.key_metainfo;\n    }\n    if (args.is_temporary !== undefined && args.is_temporary !== null) {\n      this.is_temporary = args.is_temporary;\n    }\n    if (args.partition_detail !== undefined && args.partition_detail !== null) {\n      this.partition_detail = args.partition_detail;\n    }\n  }\n};\nTTableDetails.prototype = {};\nTTableDetails.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.row_desc = [];\n          var _rtmp3101 = input.readListBegin();\n          var _size100 = _rtmp3101.size || 0;\n          for (var _i102 = 0; _i102 < _size100; ++_i102) {\n            var elem103 = null;\n            elem103 = new TColumnType();\n            elem103.read(input);\n            this.row_desc.push(elem103);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.fragment_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.page_size = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.max_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_sql = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.shard_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.key_metainfo = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_temporary = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.I32) {\n          this.partition_detail = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableDetails.prototype.write = function (output) {\n  output.writeStructBegin('TTableDetails');\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter104 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter104)) {\n        iter104 = this.row_desc[iter104];\n        iter104.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.fragment_size !== null && this.fragment_size !== undefined) {\n    output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);\n    output.writeI64(this.fragment_size);\n    output.writeFieldEnd();\n  }\n  if (this.page_size !== null && this.page_size !== undefined) {\n    output.writeFieldBegin('page_size', Thrift.Type.I64, 3);\n    output.writeI64(this.page_size);\n    output.writeFieldEnd();\n  }\n  if (this.max_rows !== null && this.max_rows !== undefined) {\n    output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);\n    output.writeI64(this.max_rows);\n    output.writeFieldEnd();\n  }\n  if (this.view_sql !== null && this.view_sql !== undefined) {\n    output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);\n    output.writeString(this.view_sql);\n    output.writeFieldEnd();\n  }\n  if (this.shard_count !== null && this.shard_count !== undefined) {\n    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);\n    output.writeI64(this.shard_count);\n    output.writeFieldEnd();\n  }\n  if (this.key_metainfo !== null && this.key_metainfo !== undefined) {\n    output.writeFieldBegin('key_metainfo', Thrift.Type.STRING, 7);\n    output.writeString(this.key_metainfo);\n    output.writeFieldEnd();\n  }\n  if (this.is_temporary !== null && this.is_temporary !== undefined) {\n    output.writeFieldBegin('is_temporary', Thrift.Type.BOOL, 8);\n    output.writeBool(this.is_temporary);\n    output.writeFieldEnd();\n  }\n  if (this.partition_detail !== null && this.partition_detail !== undefined) {\n    output.writeFieldBegin('partition_detail', Thrift.Type.I32, 9);\n    output.writeI32(this.partition_detail);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TColumnRange = function (args) {\n  this.type = null;\n  this.col_id = null;\n  this.table_id = null;\n  this.has_nulls = null;\n  this.int_min = null;\n  this.int_max = null;\n  this.bucket = null;\n  this.fp_min = null;\n  this.fp_max = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.col_id !== undefined && args.col_id !== null) {\n      this.col_id = args.col_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.has_nulls !== undefined && args.has_nulls !== null) {\n      this.has_nulls = args.has_nulls;\n    }\n    if (args.int_min !== undefined && args.int_min !== null) {\n      this.int_min = args.int_min;\n    }\n    if (args.int_max !== undefined && args.int_max !== null) {\n      this.int_max = args.int_max;\n    }\n    if (args.bucket !== undefined && args.bucket !== null) {\n      this.bucket = args.bucket;\n    }\n    if (args.fp_min !== undefined && args.fp_min !== null) {\n      this.fp_min = args.fp_min;\n    }\n    if (args.fp_max !== undefined && args.fp_max !== null) {\n      this.fp_max = args.fp_max;\n    }\n  }\n};\nTColumnRange.prototype = {};\nTColumnRange.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.col_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.has_nulls = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.int_min = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I64) {\n          this.int_max = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.I64) {\n          this.bucket = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.fp_min = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 9:\n        if (ftype == Thrift.Type.DOUBLE) {\n          this.fp_max = input.readDouble().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTColumnRange.prototype.write = function (output) {\n  output.writeStructBegin('TColumnRange');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.col_id !== null && this.col_id !== undefined) {\n    output.writeFieldBegin('col_id', Thrift.Type.I32, 2);\n    output.writeI32(this.col_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.has_nulls !== null && this.has_nulls !== undefined) {\n    output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);\n    output.writeBool(this.has_nulls);\n    output.writeFieldEnd();\n  }\n  if (this.int_min !== null && this.int_min !== undefined) {\n    output.writeFieldBegin('int_min', Thrift.Type.I64, 5);\n    output.writeI64(this.int_min);\n    output.writeFieldEnd();\n  }\n  if (this.int_max !== null && this.int_max !== undefined) {\n    output.writeFieldBegin('int_max', Thrift.Type.I64, 6);\n    output.writeI64(this.int_max);\n    output.writeFieldEnd();\n  }\n  if (this.bucket !== null && this.bucket !== undefined) {\n    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);\n    output.writeI64(this.bucket);\n    output.writeFieldEnd();\n  }\n  if (this.fp_min !== null && this.fp_min !== undefined) {\n    output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);\n    output.writeDouble(this.fp_min);\n    output.writeFieldEnd();\n  }\n  if (this.fp_max !== null && this.fp_max !== undefined) {\n    output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);\n    output.writeDouble(this.fp_max);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDictionaryGeneration = function (args) {\n  this.dict_id = null;\n  this.entry_count = null;\n  if (args) {\n    if (args.dict_id !== undefined && args.dict_id !== null) {\n      this.dict_id = args.dict_id;\n    }\n    if (args.entry_count !== undefined && args.entry_count !== null) {\n      this.entry_count = args.entry_count;\n    }\n  }\n};\nTDictionaryGeneration.prototype = {};\nTDictionaryGeneration.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.dict_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.entry_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDictionaryGeneration.prototype.write = function (output) {\n  output.writeStructBegin('TDictionaryGeneration');\n  if (this.dict_id !== null && this.dict_id !== undefined) {\n    output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);\n    output.writeI32(this.dict_id);\n    output.writeFieldEnd();\n  }\n  if (this.entry_count !== null && this.entry_count !== undefined) {\n    output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);\n    output.writeI64(this.entry_count);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTableGeneration = function (args) {\n  this.table_id = null;\n  this.tuple_count = null;\n  this.start_rowid = null;\n  if (args) {\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.tuple_count !== undefined && args.tuple_count !== null) {\n      this.tuple_count = args.tuple_count;\n    }\n    if (args.start_rowid !== undefined && args.start_rowid !== null) {\n      this.start_rowid = args.start_rowid;\n    }\n  }\n};\nTTableGeneration.prototype = {};\nTTableGeneration.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.tuple_count = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.start_rowid = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTableGeneration.prototype.write = function (output) {\n  output.writeStructBegin('TTableGeneration');\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.tuple_count !== null && this.tuple_count !== undefined) {\n    output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);\n    output.writeI64(this.tuple_count);\n    output.writeFieldEnd();\n  }\n  if (this.start_rowid !== null && this.start_rowid !== undefined) {\n    output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);\n    output.writeI64(this.start_rowid);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPendingQuery = function (args) {\n  this.id = null;\n  this.column_ranges = null;\n  this.dictionary_generations = null;\n  this.table_generations = null;\n  this.parent_session_id = null;\n  if (args) {\n    if (args.id !== undefined && args.id !== null) {\n      this.id = args.id;\n    }\n    if (args.column_ranges !== undefined && args.column_ranges !== null) {\n      this.column_ranges = Thrift.copyList(args.column_ranges, [TColumnRange]);\n    }\n    if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {\n      this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [TDictionaryGeneration]);\n    }\n    if (args.table_generations !== undefined && args.table_generations !== null) {\n      this.table_generations = Thrift.copyList(args.table_generations, [TTableGeneration]);\n    }\n    if (args.parent_session_id !== undefined && args.parent_session_id !== null) {\n      this.parent_session_id = args.parent_session_id;\n    }\n  }\n};\nTPendingQuery.prototype = {};\nTPendingQuery.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.column_ranges = [];\n          var _rtmp3106 = input.readListBegin();\n          var _size105 = _rtmp3106.size || 0;\n          for (var _i107 = 0; _i107 < _size105; ++_i107) {\n            var elem108 = null;\n            elem108 = new TColumnRange();\n            elem108.read(input);\n            this.column_ranges.push(elem108);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.dictionary_generations = [];\n          var _rtmp3110 = input.readListBegin();\n          var _size109 = _rtmp3110.size || 0;\n          for (var _i111 = 0; _i111 < _size109; ++_i111) {\n            var elem112 = null;\n            elem112 = new TDictionaryGeneration();\n            elem112.read(input);\n            this.dictionary_generations.push(elem112);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          this.table_generations = [];\n          var _rtmp3114 = input.readListBegin();\n          var _size113 = _rtmp3114.size || 0;\n          for (var _i115 = 0; _i115 < _size113; ++_i115) {\n            var elem116 = null;\n            elem116 = new TTableGeneration();\n            elem116.read(input);\n            this.table_generations.push(elem116);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.parent_session_id = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPendingQuery.prototype.write = function (output) {\n  output.writeStructBegin('TPendingQuery');\n  if (this.id !== null && this.id !== undefined) {\n    output.writeFieldBegin('id', Thrift.Type.I64, 1);\n    output.writeI64(this.id);\n    output.writeFieldEnd();\n  }\n  if (this.column_ranges !== null && this.column_ranges !== undefined) {\n    output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);\n    for (var iter117 in this.column_ranges) {\n      if (this.column_ranges.hasOwnProperty(iter117)) {\n        iter117 = this.column_ranges[iter117];\n        iter117.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {\n    output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);\n    for (var iter118 in this.dictionary_generations) {\n      if (this.dictionary_generations.hasOwnProperty(iter118)) {\n        iter118 = this.dictionary_generations[iter118];\n        iter118.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.table_generations !== null && this.table_generations !== undefined) {\n    output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);\n    for (var iter119 in this.table_generations) {\n      if (this.table_generations.hasOwnProperty(iter119)) {\n        iter119 = this.table_generations[iter119];\n        iter119.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.parent_session_id !== null && this.parent_session_id !== undefined) {\n    output.writeFieldBegin('parent_session_id', Thrift.Type.STRING, 5);\n    output.writeString(this.parent_session_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TVarLen = function (args) {\n  this.payload = null;\n  this.is_null = null;\n  if (args) {\n    if (args.payload !== undefined && args.payload !== null) {\n      this.payload = args.payload;\n    }\n    if (args.is_null !== undefined && args.is_null !== null) {\n      this.is_null = args.is_null;\n    }\n  }\n};\nTVarLen.prototype = {};\nTVarLen.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.payload = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_null = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTVarLen.prototype.write = function (output) {\n  output.writeStructBegin('TVarLen');\n  if (this.payload !== null && this.payload !== undefined) {\n    output.writeFieldBegin('payload', Thrift.Type.STRING, 1);\n    output.writeBinary(this.payload);\n    output.writeFieldEnd();\n  }\n  if (this.is_null !== null && this.is_null !== undefined) {\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_null);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDataBlockPtr = function (args) {\n  this.fixed_len_data = null;\n  this.var_len_data = null;\n  if (args) {\n    if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {\n      this.fixed_len_data = args.fixed_len_data;\n    }\n    if (args.var_len_data !== undefined && args.var_len_data !== null) {\n      this.var_len_data = Thrift.copyList(args.var_len_data, [TVarLen]);\n    }\n  }\n};\nTDataBlockPtr.prototype = {};\nTDataBlockPtr.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.fixed_len_data = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.var_len_data = [];\n          var _rtmp3121 = input.readListBegin();\n          var _size120 = _rtmp3121.size || 0;\n          for (var _i122 = 0; _i122 < _size120; ++_i122) {\n            var elem123 = null;\n            elem123 = new TVarLen();\n            elem123.read(input);\n            this.var_len_data.push(elem123);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDataBlockPtr.prototype.write = function (output) {\n  output.writeStructBegin('TDataBlockPtr');\n  if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {\n    output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);\n    output.writeBinary(this.fixed_len_data);\n    output.writeFieldEnd();\n  }\n  if (this.var_len_data !== null && this.var_len_data !== undefined) {\n    output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);\n    for (var iter124 in this.var_len_data) {\n      if (this.var_len_data.hasOwnProperty(iter124)) {\n        iter124 = this.var_len_data[iter124];\n        iter124.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TInsertData = function (args) {\n  this.db_id = null;\n  this.table_id = null;\n  this.column_ids = null;\n  this.data = null;\n  this.num_rows = null;\n  if (args) {\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.column_ids !== undefined && args.column_ids !== null) {\n      this.column_ids = Thrift.copyList(args.column_ids, [null]);\n    }\n    if (args.data !== undefined && args.data !== null) {\n      this.data = Thrift.copyList(args.data, [TDataBlockPtr]);\n    }\n    if (args.num_rows !== undefined && args.num_rows !== null) {\n      this.num_rows = args.num_rows;\n    }\n  }\n};\nTInsertData.prototype = {};\nTInsertData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.column_ids = [];\n          var _rtmp3126 = input.readListBegin();\n          var _size125 = _rtmp3126.size || 0;\n          for (var _i127 = 0; _i127 < _size125; ++_i127) {\n            var elem128 = null;\n            elem128 = input.readI32().value;\n            this.column_ids.push(elem128);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          this.data = [];\n          var _rtmp3130 = input.readListBegin();\n          var _size129 = _rtmp3130.size || 0;\n          for (var _i131 = 0; _i131 < _size129; ++_i131) {\n            var elem132 = null;\n            elem132 = new TDataBlockPtr();\n            elem132.read(input);\n            this.data.push(elem132);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.num_rows = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTInsertData.prototype.write = function (output) {\n  output.writeStructBegin('TInsertData');\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 1);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.column_ids !== null && this.column_ids !== undefined) {\n    output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.I32, this.column_ids.length);\n    for (var iter133 in this.column_ids) {\n      if (this.column_ids.hasOwnProperty(iter133)) {\n        iter133 = this.column_ids[iter133];\n        output.writeI32(iter133);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.data !== null && this.data !== undefined) {\n    output.writeFieldBegin('data', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);\n    for (var iter134 in this.data) {\n      if (this.data.hasOwnProperty(iter134)) {\n        iter134 = this.data[iter134];\n        iter134.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.num_rows !== null && this.num_rows !== undefined) {\n    output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);\n    output.writeI64(this.num_rows);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TPendingRenderQuery = function (args) {\n  this.id = null;\n  if (args) {\n    if (args.id !== undefined && args.id !== null) {\n      this.id = args.id;\n    }\n  }\n};\nTPendingRenderQuery.prototype = {};\nTPendingRenderQuery.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I64) {\n          this.id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTPendingRenderQuery.prototype.write = function (output) {\n  output.writeStructBegin('TPendingRenderQuery');\n  if (this.id !== null && this.id !== undefined) {\n    output.writeFieldBegin('id', Thrift.Type.I64, 1);\n    output.writeI64(this.id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderParseResult = function (args) {\n  this.merge_type = null;\n  this.node_id = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  if (args) {\n    if (args.merge_type !== undefined && args.merge_type !== null) {\n      this.merge_type = args.merge_type;\n    }\n    if (args.node_id !== undefined && args.node_id !== null) {\n      this.node_id = args.node_id;\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n  }\n};\nTRenderParseResult.prototype = {};\nTRenderParseResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.merge_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.node_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderParseResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderParseResult');\n  if (this.merge_type !== null && this.merge_type !== undefined) {\n    output.writeFieldBegin('merge_type', Thrift.Type.I32, 1);\n    output.writeI32(this.merge_type);\n    output.writeFieldEnd();\n  }\n  if (this.node_id !== null && this.node_id !== undefined) {\n    output.writeFieldBegin('node_id', Thrift.Type.I32, 2);\n    output.writeI32(this.node_id);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRawRenderPassDataResult = function (args) {\n  this.num_pixel_channels = null;\n  this.num_pixel_samples = null;\n  this.pixels = null;\n  this.row_ids_A = null;\n  this.row_ids_B = null;\n  this.table_ids = null;\n  this.accum_data = null;\n  this.accum_depth = null;\n  if (args) {\n    if (args.num_pixel_channels !== undefined && args.num_pixel_channels !== null) {\n      this.num_pixel_channels = args.num_pixel_channels;\n    }\n    if (args.num_pixel_samples !== undefined && args.num_pixel_samples !== null) {\n      this.num_pixel_samples = args.num_pixel_samples;\n    }\n    if (args.pixels !== undefined && args.pixels !== null) {\n      this.pixels = args.pixels;\n    }\n    if (args.row_ids_A !== undefined && args.row_ids_A !== null) {\n      this.row_ids_A = args.row_ids_A;\n    }\n    if (args.row_ids_B !== undefined && args.row_ids_B !== null) {\n      this.row_ids_B = args.row_ids_B;\n    }\n    if (args.table_ids !== undefined && args.table_ids !== null) {\n      this.table_ids = args.table_ids;\n    }\n    if (args.accum_data !== undefined && args.accum_data !== null) {\n      this.accum_data = args.accum_data;\n    }\n    if (args.accum_depth !== undefined && args.accum_depth !== null) {\n      this.accum_depth = args.accum_depth;\n    }\n  }\n};\nTRawRenderPassDataResult.prototype = {};\nTRawRenderPassDataResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.num_pixel_channels = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.num_pixel_samples = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.pixels = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.row_ids_A = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.row_ids_B = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_ids = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.accum_data = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.I32) {\n          this.accum_depth = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRawRenderPassDataResult.prototype.write = function (output) {\n  output.writeStructBegin('TRawRenderPassDataResult');\n  if (this.num_pixel_channels !== null && this.num_pixel_channels !== undefined) {\n    output.writeFieldBegin('num_pixel_channels', Thrift.Type.I32, 1);\n    output.writeI32(this.num_pixel_channels);\n    output.writeFieldEnd();\n  }\n  if (this.num_pixel_samples !== null && this.num_pixel_samples !== undefined) {\n    output.writeFieldBegin('num_pixel_samples', Thrift.Type.I32, 2);\n    output.writeI32(this.num_pixel_samples);\n    output.writeFieldEnd();\n  }\n  if (this.pixels !== null && this.pixels !== undefined) {\n    output.writeFieldBegin('pixels', Thrift.Type.STRING, 3);\n    output.writeBinary(this.pixels);\n    output.writeFieldEnd();\n  }\n  if (this.row_ids_A !== null && this.row_ids_A !== undefined) {\n    output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 4);\n    output.writeBinary(this.row_ids_A);\n    output.writeFieldEnd();\n  }\n  if (this.row_ids_B !== null && this.row_ids_B !== undefined) {\n    output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 5);\n    output.writeBinary(this.row_ids_B);\n    output.writeFieldEnd();\n  }\n  if (this.table_ids !== null && this.table_ids !== undefined) {\n    output.writeFieldBegin('table_ids', Thrift.Type.STRING, 6);\n    output.writeBinary(this.table_ids);\n    output.writeFieldEnd();\n  }\n  if (this.accum_data !== null && this.accum_data !== undefined) {\n    output.writeFieldBegin('accum_data', Thrift.Type.STRING, 7);\n    output.writeBinary(this.accum_data);\n    output.writeFieldEnd();\n  }\n  if (this.accum_depth !== null && this.accum_depth !== undefined) {\n    output.writeFieldBegin('accum_depth', Thrift.Type.I32, 8);\n    output.writeI32(this.accum_depth);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRawPixelData = function (args) {\n  this.width = null;\n  this.height = null;\n  this.render_pass_map = null;\n  if (args) {\n    if (args.width !== undefined && args.width !== null) {\n      this.width = args.width;\n    }\n    if (args.height !== undefined && args.height !== null) {\n      this.height = args.height;\n    }\n    if (args.render_pass_map !== undefined && args.render_pass_map !== null) {\n      this.render_pass_map = Thrift.copyMap(args.render_pass_map, [TRawRenderPassDataResult]);\n    }\n  }\n};\nTRawPixelData.prototype = {};\nTRawPixelData.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.width = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.height = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.MAP) {\n          this.render_pass_map = {};\n          var _rtmp3136 = input.readMapBegin();\n          var _size135 = _rtmp3136.size || 0;\n          for (var _i137 = 0; _i137 < _size135; ++_i137) {\n            if (_i137 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key138 = null;\n            var val139 = null;\n            key138 = input.readI32().value;\n            val139 = new TRawRenderPassDataResult();\n            val139.read(input);\n            this.render_pass_map[key138] = val139;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRawPixelData.prototype.write = function (output) {\n  output.writeStructBegin('TRawPixelData');\n  if (this.width !== null && this.width !== undefined) {\n    output.writeFieldBegin('width', Thrift.Type.I32, 1);\n    output.writeI32(this.width);\n    output.writeFieldEnd();\n  }\n  if (this.height !== null && this.height !== undefined) {\n    output.writeFieldBegin('height', Thrift.Type.I32, 2);\n    output.writeI32(this.height);\n    output.writeFieldEnd();\n  }\n  if (this.render_pass_map !== null && this.render_pass_map !== undefined) {\n    output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);\n    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));\n    for (var kiter140 in this.render_pass_map) {\n      if (this.render_pass_map.hasOwnProperty(kiter140)) {\n        var viter141 = this.render_pass_map[kiter140];\n        output.writeI32(kiter140);\n        viter141.write(output);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderDatum = function (args) {\n  this.type = null;\n  this.cnt = null;\n  this.value = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.cnt !== undefined && args.cnt !== null) {\n      this.cnt = args.cnt;\n    }\n    if (args.value !== undefined && args.value !== null) {\n      this.value = args.value;\n    }\n  }\n};\nTRenderDatum.prototype = {};\nTRenderDatum.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.cnt = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.value = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderDatum.prototype.write = function (output) {\n  output.writeStructBegin('TRenderDatum');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.cnt !== null && this.cnt !== undefined) {\n    output.writeFieldBegin('cnt', Thrift.Type.I32, 2);\n    output.writeI32(this.cnt);\n    output.writeFieldEnd();\n  }\n  if (this.value !== null && this.value !== undefined) {\n    output.writeFieldBegin('value', Thrift.Type.STRING, 3);\n    output.writeBinary(this.value);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TRenderStepResult = function (args) {\n  this.merge_data = null;\n  this.raw_pixel_data = null;\n  this.execution_time_ms = null;\n  this.render_time_ms = null;\n  this.total_time_ms = null;\n  if (args) {\n    if (args.merge_data !== undefined && args.merge_data !== null) {\n      this.merge_data = Thrift.copyMap(args.merge_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, TRenderDatum]);\n    }\n    if (args.raw_pixel_data !== undefined && args.raw_pixel_data !== null) {\n      this.raw_pixel_data = new TRawPixelData(args.raw_pixel_data);\n    }\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n      this.execution_time_ms = args.execution_time_ms;\n    }\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n      this.render_time_ms = args.render_time_ms;\n    }\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n      this.total_time_ms = args.total_time_ms;\n    }\n  }\n};\nTRenderStepResult.prototype = {};\nTRenderStepResult.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.MAP) {\n          this.merge_data = {};\n          var _rtmp3143 = input.readMapBegin();\n          var _size142 = _rtmp3143.size || 0;\n          for (var _i144 = 0; _i144 < _size142; ++_i144) {\n            if (_i144 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key145 = null;\n            var val146 = null;\n            key145 = input.readString().value;\n            val146 = {};\n            var _rtmp3148 = input.readMapBegin();\n            var _size147 = _rtmp3148.size || 0;\n            for (var _i149 = 0; _i149 < _size147; ++_i149) {\n              if (_i149 > 0) {\n                if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                  input.rstack.pop();\n                }\n              }\n              var key150 = null;\n              var val151 = null;\n              key150 = input.readString().value;\n              val151 = {};\n              var _rtmp3153 = input.readMapBegin();\n              var _size152 = _rtmp3153.size || 0;\n              for (var _i154 = 0; _i154 < _size152; ++_i154) {\n                if (_i154 > 0) {\n                  if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                    input.rstack.pop();\n                  }\n                }\n                var key155 = null;\n                var val156 = null;\n                key155 = input.readString().value;\n                val156 = {};\n                var _rtmp3158 = input.readMapBegin();\n                var _size157 = _rtmp3158.size || 0;\n                for (var _i159 = 0; _i159 < _size157; ++_i159) {\n                  if (_i159 > 0) {\n                    if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                      input.rstack.pop();\n                    }\n                  }\n                  var key160 = null;\n                  var val161 = null;\n                  key160 = input.readString().value;\n                  val161 = [];\n                  var _rtmp3163 = input.readListBegin();\n                  var _size162 = _rtmp3163.size || 0;\n                  for (var _i164 = 0; _i164 < _size162; ++_i164) {\n                    var elem165 = null;\n                    elem165 = new TRenderDatum();\n                    elem165.read(input);\n                    val161.push(elem165);\n                  }\n                  input.readListEnd();\n                  val156[key160] = val161;\n                }\n                input.readMapEnd();\n                val151[key155] = val156;\n              }\n              input.readMapEnd();\n              val146[key150] = val151;\n            }\n            input.readMapEnd();\n            this.merge_data[key145] = val146;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.raw_pixel_data = new TRawPixelData();\n          this.raw_pixel_data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.execution_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I64) {\n          this.render_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I64) {\n          this.total_time_ms = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTRenderStepResult.prototype.write = function (output) {\n  output.writeStructBegin('TRenderStepResult');\n  if (this.merge_data !== null && this.merge_data !== undefined) {\n    output.writeFieldBegin('merge_data', Thrift.Type.MAP, 1);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merge_data));\n    for (var kiter166 in this.merge_data) {\n      if (this.merge_data.hasOwnProperty(kiter166)) {\n        var viter167 = this.merge_data[kiter166];\n        output.writeString(kiter166);\n        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter167));\n        for (var kiter168 in viter167) {\n          if (viter167.hasOwnProperty(kiter168)) {\n            var viter169 = viter167[kiter168];\n            output.writeString(kiter168);\n            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter169));\n            for (var kiter170 in viter169) {\n              if (viter169.hasOwnProperty(kiter170)) {\n                var viter171 = viter169[kiter170];\n                output.writeString(kiter170);\n                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter171));\n                for (var kiter172 in viter171) {\n                  if (viter171.hasOwnProperty(kiter172)) {\n                    var viter173 = viter171[kiter172];\n                    output.writeString(kiter172);\n                    output.writeListBegin(Thrift.Type.STRUCT, viter173.length);\n                    for (var iter174 in viter173) {\n                      if (viter173.hasOwnProperty(iter174)) {\n                        iter174 = viter173[iter174];\n                        iter174.write(output);\n                      }\n                    }\n                    output.writeListEnd();\n                  }\n                }\n                output.writeMapEnd();\n              }\n            }\n            output.writeMapEnd();\n          }\n        }\n        output.writeMapEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.raw_pixel_data !== null && this.raw_pixel_data !== undefined) {\n    output.writeFieldBegin('raw_pixel_data', Thrift.Type.STRUCT, 2);\n    this.raw_pixel_data.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n    output.writeI64(this.execution_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n    output.writeI64(this.render_time_ms);\n    output.writeFieldEnd();\n  }\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n    output.writeI64(this.total_time_ms);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDatabasePermissions = function (args) {\n  this.create_ = null;\n  this.delete_ = null;\n  this.view_sql_editor_ = null;\n  this.access_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n    if (args.view_sql_editor_ !== undefined && args.view_sql_editor_ !== null) {\n      this.view_sql_editor_ = args.view_sql_editor_;\n    }\n    if (args.access_ !== undefined && args.access_ !== null) {\n      this.access_ = args.access_;\n    }\n  }\n};\nTDatabasePermissions.prototype = {};\nTDatabasePermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.view_sql_editor_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.access_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDatabasePermissions.prototype.write = function (output) {\n  output.writeStructBegin('TDatabasePermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  if (this.view_sql_editor_ !== null && this.view_sql_editor_ !== undefined) {\n    output.writeFieldBegin('view_sql_editor_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.view_sql_editor_);\n    output.writeFieldEnd();\n  }\n  if (this.access_ !== null && this.access_ !== undefined) {\n    output.writeFieldBegin('access_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.access_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TTablePermissions = function (args) {\n  this.create_ = null;\n  this.drop_ = null;\n  this.select_ = null;\n  this.insert_ = null;\n  this.update_ = null;\n  this.delete_ = null;\n  this.truncate_ = null;\n  this.alter_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.drop_ !== undefined && args.drop_ !== null) {\n      this.drop_ = args.drop_;\n    }\n    if (args.select_ !== undefined && args.select_ !== null) {\n      this.select_ = args.select_;\n    }\n    if (args.insert_ !== undefined && args.insert_ !== null) {\n      this.insert_ = args.insert_;\n    }\n    if (args.update_ !== undefined && args.update_ !== null) {\n      this.update_ = args.update_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n    if (args.truncate_ !== undefined && args.truncate_ !== null) {\n      this.truncate_ = args.truncate_;\n    }\n    if (args.alter_ !== undefined && args.alter_ !== null) {\n      this.alter_ = args.alter_;\n    }\n  }\n};\nTTablePermissions.prototype = {};\nTTablePermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.drop_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.select_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.insert_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.update_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.BOOL) {\n          this.truncate_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 8:\n        if (ftype == Thrift.Type.BOOL) {\n          this.alter_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTTablePermissions.prototype.write = function (output) {\n  output.writeStructBegin('TTablePermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.drop_ !== null && this.drop_ !== undefined) {\n    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.drop_);\n    output.writeFieldEnd();\n  }\n  if (this.select_ !== null && this.select_ !== undefined) {\n    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.select_);\n    output.writeFieldEnd();\n  }\n  if (this.insert_ !== null && this.insert_ !== undefined) {\n    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.insert_);\n    output.writeFieldEnd();\n  }\n  if (this.update_ !== null && this.update_ !== undefined) {\n    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);\n    output.writeBool(this.update_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  if (this.truncate_ !== null && this.truncate_ !== undefined) {\n    output.writeFieldBegin('truncate_', Thrift.Type.BOOL, 7);\n    output.writeBool(this.truncate_);\n    output.writeFieldEnd();\n  }\n  if (this.alter_ !== null && this.alter_ !== undefined) {\n    output.writeFieldBegin('alter_', Thrift.Type.BOOL, 8);\n    output.writeBool(this.alter_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDashboardPermissions = function (args) {\n  this.create_ = null;\n  this.delete_ = null;\n  this.view_ = null;\n  this.edit_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n    if (args.view_ !== undefined && args.view_ !== null) {\n      this.view_ = args.view_;\n    }\n    if (args.edit_ !== undefined && args.edit_ !== null) {\n      this.edit_ = args.edit_;\n    }\n  }\n};\nTDashboardPermissions.prototype = {};\nTDashboardPermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.view_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.edit_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDashboardPermissions.prototype.write = function (output) {\n  output.writeStructBegin('TDashboardPermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  if (this.view_ !== null && this.view_ !== undefined) {\n    output.writeFieldBegin('view_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.view_);\n    output.writeFieldEnd();\n  }\n  if (this.edit_ !== null && this.edit_ !== undefined) {\n    output.writeFieldBegin('edit_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.edit_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TViewPermissions = function (args) {\n  this.create_ = null;\n  this.drop_ = null;\n  this.select_ = null;\n  this.insert_ = null;\n  this.update_ = null;\n  this.delete_ = null;\n  if (args) {\n    if (args.create_ !== undefined && args.create_ !== null) {\n      this.create_ = args.create_;\n    }\n    if (args.drop_ !== undefined && args.drop_ !== null) {\n      this.drop_ = args.drop_;\n    }\n    if (args.select_ !== undefined && args.select_ !== null) {\n      this.select_ = args.select_;\n    }\n    if (args.insert_ !== undefined && args.insert_ !== null) {\n      this.insert_ = args.insert_;\n    }\n    if (args.update_ !== undefined && args.update_ !== null) {\n      this.update_ = args.update_;\n    }\n    if (args.delete_ !== undefined && args.delete_ !== null) {\n      this.delete_ = args.delete_;\n    }\n  }\n};\nTViewPermissions.prototype = {};\nTViewPermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.BOOL) {\n          this.create_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.drop_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.select_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.insert_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.update_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.delete_ = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTViewPermissions.prototype.write = function (output) {\n  output.writeStructBegin('TViewPermissions');\n  if (this.create_ !== null && this.create_ !== undefined) {\n    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);\n    output.writeBool(this.create_);\n    output.writeFieldEnd();\n  }\n  if (this.drop_ !== null && this.drop_ !== undefined) {\n    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);\n    output.writeBool(this.drop_);\n    output.writeFieldEnd();\n  }\n  if (this.select_ !== null && this.select_ !== undefined) {\n    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);\n    output.writeBool(this.select_);\n    output.writeFieldEnd();\n  }\n  if (this.insert_ !== null && this.insert_ !== undefined) {\n    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);\n    output.writeBool(this.insert_);\n    output.writeFieldEnd();\n  }\n  if (this.update_ !== null && this.update_ !== undefined) {\n    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);\n    output.writeBool(this.update_);\n    output.writeFieldEnd();\n  }\n  if (this.delete_ !== null && this.delete_ !== undefined) {\n    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);\n    output.writeBool(this.delete_);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDBObjectPermissions = function (args) {\n  this.database_permissions_ = null;\n  this.table_permissions_ = null;\n  this.dashboard_permissions_ = null;\n  this.view_permissions_ = null;\n  if (args) {\n    if (args.database_permissions_ !== undefined && args.database_permissions_ !== null) {\n      this.database_permissions_ = new TDatabasePermissions(args.database_permissions_);\n    }\n    if (args.table_permissions_ !== undefined && args.table_permissions_ !== null) {\n      this.table_permissions_ = new TTablePermissions(args.table_permissions_);\n    }\n    if (args.dashboard_permissions_ !== undefined && args.dashboard_permissions_ !== null) {\n      this.dashboard_permissions_ = new TDashboardPermissions(args.dashboard_permissions_);\n    }\n    if (args.view_permissions_ !== undefined && args.view_permissions_ !== null) {\n      this.view_permissions_ = new TViewPermissions(args.view_permissions_);\n    }\n  }\n};\nTDBObjectPermissions.prototype = {};\nTDBObjectPermissions.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.database_permissions_ = new TDatabasePermissions();\n          this.database_permissions_.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.table_permissions_ = new TTablePermissions();\n          this.table_permissions_.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.dashboard_permissions_ = new TDashboardPermissions();\n          this.dashboard_permissions_.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.view_permissions_ = new TViewPermissions();\n          this.view_permissions_.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDBObjectPermissions.prototype.write = function (output) {\n  output.writeStructBegin('TDBObjectPermissions');\n  if (this.database_permissions_ !== null && this.database_permissions_ !== undefined) {\n    output.writeFieldBegin('database_permissions_', Thrift.Type.STRUCT, 1);\n    this.database_permissions_.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.table_permissions_ !== null && this.table_permissions_ !== undefined) {\n    output.writeFieldBegin('table_permissions_', Thrift.Type.STRUCT, 2);\n    this.table_permissions_.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_permissions_ !== null && this.dashboard_permissions_ !== undefined) {\n    output.writeFieldBegin('dashboard_permissions_', Thrift.Type.STRUCT, 3);\n    this.dashboard_permissions_.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.view_permissions_ !== null && this.view_permissions_ !== undefined) {\n    output.writeFieldBegin('view_permissions_', Thrift.Type.STRUCT, 4);\n    this.view_permissions_.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDBObject = function (args) {\n  this.objectName = null;\n  this.objectType = null;\n  this.privs = null;\n  this.grantee = null;\n  this.privilegeObjectType = null;\n  if (args) {\n    if (args.objectName !== undefined && args.objectName !== null) {\n      this.objectName = args.objectName;\n    }\n    if (args.objectType !== undefined && args.objectType !== null) {\n      this.objectType = args.objectType;\n    }\n    if (args.privs !== undefined && args.privs !== null) {\n      this.privs = Thrift.copyList(args.privs, [null]);\n    }\n    if (args.grantee !== undefined && args.grantee !== null) {\n      this.grantee = args.grantee;\n    }\n    if (args.privilegeObjectType !== undefined && args.privilegeObjectType !== null) {\n      this.privilegeObjectType = args.privilegeObjectType;\n    }\n  }\n};\nTDBObject.prototype = {};\nTDBObject.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.objectName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.objectType = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.privs = [];\n          var _rtmp3176 = input.readListBegin();\n          var _size175 = _rtmp3176.size || 0;\n          for (var _i177 = 0; _i177 < _size175; ++_i177) {\n            var elem178 = null;\n            elem178 = input.readBool().value;\n            this.privs.push(elem178);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.grantee = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.privilegeObjectType = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDBObject.prototype.write = function (output) {\n  output.writeStructBegin('TDBObject');\n  if (this.objectName !== null && this.objectName !== undefined) {\n    output.writeFieldBegin('objectName', Thrift.Type.STRING, 1);\n    output.writeString(this.objectName);\n    output.writeFieldEnd();\n  }\n  if (this.objectType !== null && this.objectType !== undefined) {\n    output.writeFieldBegin('objectType', Thrift.Type.I32, 2);\n    output.writeI32(this.objectType);\n    output.writeFieldEnd();\n  }\n  if (this.privs !== null && this.privs !== undefined) {\n    output.writeFieldBegin('privs', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.BOOL, this.privs.length);\n    for (var iter179 in this.privs) {\n      if (this.privs.hasOwnProperty(iter179)) {\n        iter179 = this.privs[iter179];\n        output.writeBool(iter179);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.grantee !== null && this.grantee !== undefined) {\n    output.writeFieldBegin('grantee', Thrift.Type.STRING, 4);\n    output.writeString(this.grantee);\n    output.writeFieldEnd();\n  }\n  if (this.privilegeObjectType !== null && this.privilegeObjectType !== undefined) {\n    output.writeFieldBegin('privilegeObjectType', Thrift.Type.I32, 5);\n    output.writeI32(this.privilegeObjectType);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TDashboardGrantees = function (args) {\n  this.name = null;\n  this.is_user = null;\n  this.permissions = null;\n  if (args) {\n    if (args.name !== undefined && args.name !== null) {\n      this.name = args.name;\n    }\n    if (args.is_user !== undefined && args.is_user !== null) {\n      this.is_user = args.is_user;\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n  }\n};\nTDashboardGrantees.prototype = {};\nTDashboardGrantees.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_user = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTDashboardGrantees.prototype.write = function (output) {\n  output.writeStructBegin('TDashboardGrantees');\n  if (this.name !== null && this.name !== undefined) {\n    output.writeFieldBegin('name', Thrift.Type.STRING, 1);\n    output.writeString(this.name);\n    output.writeFieldEnd();\n  }\n  if (this.is_user !== null && this.is_user !== undefined) {\n    output.writeFieldBegin('is_user', Thrift.Type.BOOL, 2);\n    output.writeBool(this.is_user);\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 3);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TLicenseInfo = function (args) {\n  this.claims = null;\n  if (args) {\n    if (args.claims !== undefined && args.claims !== null) {\n      this.claims = Thrift.copyList(args.claims, [null]);\n    }\n  }\n};\nTLicenseInfo.prototype = {};\nTLicenseInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.LIST) {\n          this.claims = [];\n          var _rtmp3181 = input.readListBegin();\n          var _size180 = _rtmp3181.size || 0;\n          for (var _i182 = 0; _i182 < _size180; ++_i182) {\n            var elem183 = null;\n            elem183 = input.readString().value;\n            this.claims.push(elem183);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTLicenseInfo.prototype.write = function (output) {\n  output.writeStructBegin('TLicenseInfo');\n  if (this.claims !== null && this.claims !== undefined) {\n    output.writeFieldBegin('claims', Thrift.Type.LIST, 1);\n    output.writeListBegin(Thrift.Type.STRING, this.claims.length);\n    for (var iter184 in this.claims) {\n      if (this.claims.hasOwnProperty(iter184)) {\n        iter184 = this.claims[iter184];\n        output.writeString(iter184);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TSessionInfo = function (args) {\n  this.user = null;\n  this.database = null;\n  this.start_time = null;\n  this.is_super = null;\n  if (args) {\n    if (args.user !== undefined && args.user !== null) {\n      this.user = args.user;\n    }\n    if (args.database !== undefined && args.database !== null) {\n      this.database = args.database;\n    }\n    if (args.start_time !== undefined && args.start_time !== null) {\n      this.start_time = args.start_time;\n    }\n    if (args.is_super !== undefined && args.is_super !== null) {\n      this.is_super = args.is_super;\n    }\n  }\n};\nTSessionInfo.prototype = {};\nTSessionInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.user = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.database = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.start_time = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.is_super = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTSessionInfo.prototype.write = function (output) {\n  output.writeStructBegin('TSessionInfo');\n  if (this.user !== null && this.user !== undefined) {\n    output.writeFieldBegin('user', Thrift.Type.STRING, 1);\n    output.writeString(this.user);\n    output.writeFieldEnd();\n  }\n  if (this.database !== null && this.database !== undefined) {\n    output.writeFieldBegin('database', Thrift.Type.STRING, 2);\n    output.writeString(this.database);\n    output.writeFieldEnd();\n  }\n  if (this.start_time !== null && this.start_time !== undefined) {\n    output.writeFieldBegin('start_time', Thrift.Type.I64, 3);\n    output.writeI64(this.start_time);\n    output.writeFieldEnd();\n  }\n  if (this.is_super !== null && this.is_super !== undefined) {\n    output.writeFieldBegin('is_super', Thrift.Type.BOOL, 4);\n    output.writeBool(this.is_super);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.TGeoFileLayerInfo = function (args) {\n  this.name = null;\n  this.contents = null;\n  if (args) {\n    if (args.name !== undefined && args.name !== null) {\n      this.name = args.name;\n    }\n    if (args.contents !== undefined && args.contents !== null) {\n      this.contents = args.contents;\n    }\n  }\n};\nTGeoFileLayerInfo.prototype = {};\nTGeoFileLayerInfo.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.contents = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTGeoFileLayerInfo.prototype.write = function (output) {\n  output.writeStructBegin('TGeoFileLayerInfo');\n  if (this.name !== null && this.name !== undefined) {\n    output.writeFieldBegin('name', Thrift.Type.STRING, 1);\n    output.writeString(this.name);\n    output.writeFieldEnd();\n  }\n  if (this.contents !== null && this.contents !== undefined) {\n    output.writeFieldBegin('contents', Thrift.Type.I32, 2);\n    output.writeI32(this.contents);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(11))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.13.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\nif (typeof Int64 === 'undefined' && typeof require === 'function') {\n  var Int64 = require('node-int64');\n}\n\n//HELPER FUNCTIONS AND STRUCTURES\n\nwindow.OmniSci_connect_args = function (args) {\n  this.user = null;\n  this.passwd = null;\n  this.dbname = null;\n  if (args) {\n    if (args.user !== undefined && args.user !== null) {\n      this.user = args.user;\n    }\n    if (args.passwd !== undefined && args.passwd !== null) {\n      this.passwd = args.passwd;\n    }\n    if (args.dbname !== undefined && args.dbname !== null) {\n      this.dbname = args.dbname;\n    }\n  }\n};\nOmniSci_connect_args.prototype = {};\nOmniSci_connect_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.user = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.passwd = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dbname = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_connect_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_connect_args');\n  if (this.user !== null && this.user !== undefined) {\n    output.writeFieldBegin('user', Thrift.Type.STRING, 1);\n    output.writeString(this.user);\n    output.writeFieldEnd();\n  }\n  if (this.passwd !== null && this.passwd !== undefined) {\n    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);\n    output.writeString(this.passwd);\n    output.writeFieldEnd();\n  }\n  if (this.dbname !== null && this.dbname !== undefined) {\n    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);\n    output.writeString(this.dbname);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_connect_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_connect_result.prototype = {};\nOmniSci_connect_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_connect_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_connect_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_krb5_connect_args = function (args) {\n  this.inputToken = null;\n  this.dbname = null;\n  if (args) {\n    if (args.inputToken !== undefined && args.inputToken !== null) {\n      this.inputToken = args.inputToken;\n    }\n    if (args.dbname !== undefined && args.dbname !== null) {\n      this.dbname = args.dbname;\n    }\n  }\n};\nOmniSci_krb5_connect_args.prototype = {};\nOmniSci_krb5_connect_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.inputToken = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dbname = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_krb5_connect_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_krb5_connect_args');\n  if (this.inputToken !== null && this.inputToken !== undefined) {\n    output.writeFieldBegin('inputToken', Thrift.Type.STRING, 1);\n    output.writeString(this.inputToken);\n    output.writeFieldEnd();\n  }\n  if (this.dbname !== null && this.dbname !== undefined) {\n    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);\n    output.writeString(this.dbname);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_krb5_connect_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TKrb5Session(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_krb5_connect_result.prototype = {};\nOmniSci_krb5_connect_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TKrb5Session();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_krb5_connect_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_krb5_connect_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_disconnect_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_disconnect_args.prototype = {};\nOmniSci_disconnect_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_disconnect_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_disconnect_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_disconnect_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_disconnect_result.prototype = {};\nOmniSci_disconnect_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_disconnect_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_disconnect_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_switch_database_args = function (args) {\n  this.session = null;\n  this.dbname = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dbname !== undefined && args.dbname !== null) {\n      this.dbname = args.dbname;\n    }\n  }\n};\nOmniSci_switch_database_args.prototype = {};\nOmniSci_switch_database_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dbname = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_switch_database_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_switch_database_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dbname !== null && this.dbname !== undefined) {\n    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);\n    output.writeString(this.dbname);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_switch_database_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_switch_database_result.prototype = {};\nOmniSci_switch_database_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_switch_database_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_switch_database_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clone_session_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_clone_session_args.prototype = {};\nOmniSci_clone_session_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clone_session_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clone_session_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clone_session_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_clone_session_result.prototype = {};\nOmniSci_clone_session_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clone_session_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clone_session_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_server_status_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_server_status_args.prototype = {};\nOmniSci_get_server_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_server_status_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_server_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_server_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TServerStatus(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_server_status_result.prototype = {};\nOmniSci_get_server_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TServerStatus();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_server_status_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_server_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_status_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_status_args.prototype = {};\nOmniSci_get_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_status_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TServerStatus]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_status_result.prototype = {};\nOmniSci_get_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3186 = input.readListBegin();\n          var _size185 = _rtmp3186.size || 0;\n          for (var _i187 = 0; _i187 < _size185; ++_i187) {\n            var elem188 = null;\n            elem188 = new TServerStatus();\n            elem188.read(input);\n            this.success.push(elem188);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_status_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter189 in this.success) {\n      if (this.success.hasOwnProperty(iter189)) {\n        iter189 = this.success[iter189];\n        iter189.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_hardware_info_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_hardware_info_args.prototype = {};\nOmniSci_get_hardware_info_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_hardware_info_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_hardware_info_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_hardware_info_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TClusterHardwareInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_hardware_info_result.prototype = {};\nOmniSci_get_hardware_info_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TClusterHardwareInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_hardware_info_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_hardware_info_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_tables_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_tables_args.prototype = {};\nOmniSci_get_tables_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_tables_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_tables_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_tables_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_tables_result.prototype = {};\nOmniSci_get_tables_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3191 = input.readListBegin();\n          var _size190 = _rtmp3191.size || 0;\n          for (var _i192 = 0; _i192 < _size190; ++_i192) {\n            var elem193 = null;\n            elem193 = input.readString().value;\n            this.success.push(elem193);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_tables_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_tables_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter194 in this.success) {\n      if (this.success.hasOwnProperty(iter194)) {\n        iter194 = this.success[iter194];\n        output.writeString(iter194);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_physical_tables_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_physical_tables_args.prototype = {};\nOmniSci_get_physical_tables_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_physical_tables_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_physical_tables_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_physical_tables_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_physical_tables_result.prototype = {};\nOmniSci_get_physical_tables_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3196 = input.readListBegin();\n          var _size195 = _rtmp3196.size || 0;\n          for (var _i197 = 0; _i197 < _size195; ++_i197) {\n            var elem198 = null;\n            elem198 = input.readString().value;\n            this.success.push(elem198);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_physical_tables_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_physical_tables_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter199 in this.success) {\n      if (this.success.hasOwnProperty(iter199)) {\n        iter199 = this.success[iter199];\n        output.writeString(iter199);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_views_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_views_args.prototype = {};\nOmniSci_get_views_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_views_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_views_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_views_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_views_result.prototype = {};\nOmniSci_get_views_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3201 = input.readListBegin();\n          var _size200 = _rtmp3201.size || 0;\n          for (var _i202 = 0; _i202 < _size200; ++_i202) {\n            var elem203 = null;\n            elem203 = input.readString().value;\n            this.success.push(elem203);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_views_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_views_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter204 in this.success) {\n      if (this.success.hasOwnProperty(iter204)) {\n        iter204 = this.success[iter204];\n        output.writeString(iter204);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_tables_meta_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_tables_meta_args.prototype = {};\nOmniSci_get_tables_meta_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_tables_meta_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_tables_meta_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_tables_meta_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TTableMeta]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_tables_meta_result.prototype = {};\nOmniSci_get_tables_meta_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3206 = input.readListBegin();\n          var _size205 = _rtmp3206.size || 0;\n          for (var _i207 = 0; _i207 < _size205; ++_i207) {\n            var elem208 = null;\n            elem208 = new TTableMeta();\n            elem208.read(input);\n            this.success.push(elem208);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_tables_meta_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_tables_meta_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter209 in this.success) {\n      if (this.success.hasOwnProperty(iter209)) {\n        iter209 = this.success[iter209];\n        iter209.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_details_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nOmniSci_get_table_details_args.prototype = {};\nOmniSci_get_table_details_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_details_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_details_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_details_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TTableDetails(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_table_details_result.prototype = {};\nOmniSci_get_table_details_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TTableDetails();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_details_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_details_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_internal_table_details_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nOmniSci_get_internal_table_details_args.prototype = {};\nOmniSci_get_internal_table_details_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_internal_table_details_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_internal_table_details_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_internal_table_details_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TTableDetails(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_internal_table_details_result.prototype = {};\nOmniSci_get_internal_table_details_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TTableDetails();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_internal_table_details_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_internal_table_details_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_users_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_users_args.prototype = {};\nOmniSci_get_users_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_users_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_users_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_users_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_users_result.prototype = {};\nOmniSci_get_users_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3211 = input.readListBegin();\n          var _size210 = _rtmp3211.size || 0;\n          for (var _i212 = 0; _i212 < _size210; ++_i212) {\n            var elem213 = null;\n            elem213 = input.readString().value;\n            this.success.push(elem213);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_users_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_users_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter214 in this.success) {\n      if (this.success.hasOwnProperty(iter214)) {\n        iter214 = this.success[iter214];\n        output.writeString(iter214);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_databases_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_databases_args.prototype = {};\nOmniSci_get_databases_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_databases_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_databases_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_databases_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBInfo]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_databases_result.prototype = {};\nOmniSci_get_databases_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3216 = input.readListBegin();\n          var _size215 = _rtmp3216.size || 0;\n          for (var _i217 = 0; _i217 < _size215; ++_i217) {\n            var elem218 = null;\n            elem218 = new TDBInfo();\n            elem218.read(input);\n            this.success.push(elem218);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_databases_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_databases_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter219 in this.success) {\n      if (this.success.hasOwnProperty(iter219)) {\n        iter219 = this.success[iter219];\n        iter219.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_version_args = function (args) {};\nOmniSci_get_version_args.prototype = {};\nOmniSci_get_version_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    input.skip(ftype);\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_version_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_version_args');\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_version_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_version_result.prototype = {};\nOmniSci_get_version_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_version_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_version_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_start_heap_profile_args.prototype = {};\nOmniSci_start_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_heap_profile_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_start_heap_profile_result.prototype = {};\nOmniSci_start_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_heap_profile_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_stop_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_stop_heap_profile_args.prototype = {};\nOmniSci_stop_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_stop_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_stop_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_stop_heap_profile_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_stop_heap_profile_result.prototype = {};\nOmniSci_stop_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_stop_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_stop_heap_profile_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_heap_profile_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_heap_profile_args.prototype = {};\nOmniSci_get_heap_profile_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_heap_profile_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_heap_profile_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_heap_profile_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_heap_profile_result.prototype = {};\nOmniSci_get_heap_profile_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_heap_profile_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_heap_profile_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_memory_args = function (args) {\n  this.session = null;\n  this.memory_level = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.memory_level !== undefined && args.memory_level !== null) {\n      this.memory_level = args.memory_level;\n    }\n  }\n};\nOmniSci_get_memory_args.prototype = {};\nOmniSci_get_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.memory_level = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.memory_level !== null && this.memory_level !== undefined) {\n    output.writeFieldBegin('memory_level', Thrift.Type.STRING, 2);\n    output.writeString(this.memory_level);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_memory_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TNodeMemoryInfo]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_memory_result.prototype = {};\nOmniSci_get_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3221 = input.readListBegin();\n          var _size220 = _rtmp3221.size || 0;\n          for (var _i222 = 0; _i222 < _size220; ++_i222) {\n            var elem223 = null;\n            elem223 = new TNodeMemoryInfo();\n            elem223.read(input);\n            this.success.push(elem223);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_memory_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter224 in this.success) {\n      if (this.success.hasOwnProperty(iter224)) {\n        iter224 = this.success[iter224];\n        iter224.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clear_cpu_memory_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_clear_cpu_memory_args.prototype = {};\nOmniSci_clear_cpu_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clear_cpu_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clear_cpu_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clear_cpu_memory_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_clear_cpu_memory_result.prototype = {};\nOmniSci_clear_cpu_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clear_cpu_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clear_cpu_memory_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clear_gpu_memory_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_clear_gpu_memory_args.prototype = {};\nOmniSci_clear_gpu_memory_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clear_gpu_memory_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clear_gpu_memory_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_clear_gpu_memory_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_clear_gpu_memory_result.prototype = {};\nOmniSci_clear_gpu_memory_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_clear_gpu_memory_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_clear_gpu_memory_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epoch_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  this.new_epoch = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n    if (args.new_epoch !== undefined && args.new_epoch !== null) {\n      this.new_epoch = args.new_epoch;\n    }\n  }\n};\nOmniSci_set_table_epoch_args.prototype = {};\nOmniSci_set_table_epoch_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.new_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epoch_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epoch_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  if (this.new_epoch !== null && this.new_epoch !== undefined) {\n    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 4);\n    output.writeI32(this.new_epoch);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epoch_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_set_table_epoch_result.prototype = {};\nOmniSci_set_table_epoch_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epoch_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epoch_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epoch_by_name_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.new_epoch = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.new_epoch !== undefined && args.new_epoch !== null) {\n      this.new_epoch = args.new_epoch;\n    }\n  }\n};\nOmniSci_set_table_epoch_by_name_args.prototype = {};\nOmniSci_set_table_epoch_by_name_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.new_epoch = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epoch_by_name_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epoch_by_name_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.new_epoch !== null && this.new_epoch !== undefined) {\n    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 3);\n    output.writeI32(this.new_epoch);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_table_epoch_by_name_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_set_table_epoch_by_name_result.prototype = {};\nOmniSci_set_table_epoch_by_name_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_table_epoch_by_name_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_table_epoch_by_name_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epoch_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nOmniSci_get_table_epoch_args.prototype = {};\nOmniSci_get_table_epoch_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epoch_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epoch_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epoch_result = function (args) {\n  this.success = null;\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n  }\n};\nOmniSci_get_table_epoch_result.prototype = {};\nOmniSci_get_table_epoch_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epoch_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epoch_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epoch_by_name_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n  }\n};\nOmniSci_get_table_epoch_by_name_args.prototype = {};\nOmniSci_get_table_epoch_by_name_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epoch_by_name_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epoch_by_name_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_table_epoch_by_name_result = function (args) {\n  this.success = null;\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n  }\n};\nOmniSci_get_table_epoch_by_name_result.prototype = {};\nOmniSci_get_table_epoch_by_name_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_table_epoch_by_name_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_table_epoch_by_name_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_session_info_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_session_info_args.prototype = {};\nOmniSci_get_session_info_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_session_info_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_session_info_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_session_info_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TSessionInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_session_info_result.prototype = {};\nOmniSci_get_session_info_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TSessionInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_session_info_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_session_info_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.column_format = null;\n  this.nonce = null;\n  this.first_n = -1;\n  this.at_most_n = -1;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.column_format !== undefined && args.column_format !== null) {\n      this.column_format = args.column_format;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n    if (args.at_most_n !== undefined && args.at_most_n !== null) {\n      this.at_most_n = args.at_most_n;\n    }\n  }\n};\nOmniSci_sql_execute_args.prototype = {};\nOmniSci_sql_execute_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.BOOL) {\n          this.column_format = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.at_most_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.column_format !== null && this.column_format !== undefined) {\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);\n    output.writeBool(this.column_format);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  if (this.at_most_n !== null && this.at_most_n !== undefined) {\n    output.writeFieldBegin('at_most_n', Thrift.Type.I32, 6);\n    output.writeI32(this.at_most_n);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TQueryResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_sql_execute_result.prototype = {};\nOmniSci_sql_execute_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TQueryResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_df_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.device_type = null;\n  this.device_id = 0;\n  this.first_n = -1;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.device_type !== undefined && args.device_type !== null) {\n      this.device_type = args.device_type;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n  }\n};\nOmniSci_sql_execute_df_args.prototype = {};\nOmniSci_sql_execute_df_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_df_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_df_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.device_type !== null && this.device_type !== undefined) {\n    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);\n    output.writeI32(this.device_type);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_df_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDataFrame(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_sql_execute_df_result.prototype = {};\nOmniSci_sql_execute_df_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDataFrame();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_df_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_df_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_gdf_args = function (args) {\n  this.session = null;\n  this.query = null;\n  this.device_id = 0;\n  this.first_n = -1;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n    if (args.first_n !== undefined && args.first_n !== null) {\n      this.first_n = args.first_n;\n    }\n  }\n};\nOmniSci_sql_execute_gdf_args.prototype = {};\nOmniSci_sql_execute_gdf_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.first_n = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_gdf_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_gdf_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  if (this.first_n !== null && this.first_n !== undefined) {\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);\n    output.writeI32(this.first_n);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_execute_gdf_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDataFrame(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_sql_execute_gdf_result.prototype = {};\nOmniSci_sql_execute_gdf_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDataFrame();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_execute_gdf_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_execute_gdf_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_deallocate_df_args = function (args) {\n  this.session = null;\n  this.df = null;\n  this.device_type = null;\n  this.device_id = 0;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.df !== undefined && args.df !== null) {\n      this.df = new TDataFrame(args.df);\n    }\n    if (args.device_type !== undefined && args.device_type !== null) {\n      this.device_type = args.device_type;\n    }\n    if (args.device_id !== undefined && args.device_id !== null) {\n      this.device_id = args.device_id;\n    }\n  }\n};\nOmniSci_deallocate_df_args.prototype = {};\nOmniSci_deallocate_df_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.df = new TDataFrame();\n          this.df.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.device_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.device_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_deallocate_df_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_deallocate_df_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.df !== null && this.df !== undefined) {\n    output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);\n    this.df.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.device_type !== null && this.device_type !== undefined) {\n    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);\n    output.writeI32(this.device_type);\n    output.writeFieldEnd();\n  }\n  if (this.device_id !== null && this.device_id !== undefined) {\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);\n    output.writeI32(this.device_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_deallocate_df_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_deallocate_df_result.prototype = {};\nOmniSci_deallocate_df_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_deallocate_df_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_deallocate_df_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_interrupt_args = function (args) {\n  this.query_session = null;\n  this.interrupt_session = null;\n  if (args) {\n    if (args.query_session !== undefined && args.query_session !== null) {\n      this.query_session = args.query_session;\n    }\n    if (args.interrupt_session !== undefined && args.interrupt_session !== null) {\n      this.interrupt_session = args.interrupt_session;\n    }\n  }\n};\nOmniSci_interrupt_args.prototype = {};\nOmniSci_interrupt_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.query_session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.interrupt_session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_interrupt_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_interrupt_args');\n  if (this.query_session !== null && this.query_session !== undefined) {\n    output.writeFieldBegin('query_session', Thrift.Type.STRING, 1);\n    output.writeString(this.query_session);\n    output.writeFieldEnd();\n  }\n  if (this.interrupt_session !== null && this.interrupt_session !== undefined) {\n    output.writeFieldBegin('interrupt_session', Thrift.Type.STRING, 2);\n    output.writeString(this.interrupt_session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_interrupt_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_interrupt_result.prototype = {};\nOmniSci_interrupt_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_interrupt_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_interrupt_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_validate_args = function (args) {\n  this.session = null;\n  this.query = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.query !== undefined && args.query !== null) {\n      this.query = args.query;\n    }\n  }\n};\nOmniSci_sql_validate_args.prototype = {};\nOmniSci_sql_validate_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.query = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_validate_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_validate_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.query !== null && this.query !== undefined) {\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n    output.writeString(this.query);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_sql_validate_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyMap(args.success, [TColumnType]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_sql_validate_result.prototype = {};\nOmniSci_sql_validate_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.MAP) {\n          this.success = {};\n          var _rtmp3226 = input.readMapBegin();\n          var _size225 = _rtmp3226.size || 0;\n          for (var _i227 = 0; _i227 < _size225; ++_i227) {\n            if (_i227 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key228 = null;\n            var val229 = null;\n            key228 = input.readString().value;\n            val229 = new TColumnType();\n            val229.read(input);\n            this.success[key228] = val229;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_sql_validate_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_sql_validate_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));\n    for (var kiter230 in this.success) {\n      if (this.success.hasOwnProperty(kiter230)) {\n        var viter231 = this.success[kiter230];\n        output.writeString(kiter230);\n        viter231.write(output);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_completion_hints_args = function (args) {\n  this.session = null;\n  this.sql = null;\n  this.cursor = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.sql !== undefined && args.sql !== null) {\n      this.sql = args.sql;\n    }\n    if (args.cursor !== undefined && args.cursor !== null) {\n      this.cursor = args.cursor;\n    }\n  }\n};\nOmniSci_get_completion_hints_args.prototype = {};\nOmniSci_get_completion_hints_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.sql = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.cursor = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_completion_hints_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_completion_hints_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.sql !== null && this.sql !== undefined) {\n    output.writeFieldBegin('sql', Thrift.Type.STRING, 2);\n    output.writeString(this.sql);\n    output.writeFieldEnd();\n  }\n  if (this.cursor !== null && this.cursor !== undefined) {\n    output.writeFieldBegin('cursor', Thrift.Type.I32, 3);\n    output.writeI32(this.cursor);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_completion_hints_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TCompletionHint]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_completion_hints_result.prototype = {};\nOmniSci_get_completion_hints_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3233 = input.readListBegin();\n          var _size232 = _rtmp3233.size || 0;\n          for (var _i234 = 0; _i234 < _size232; ++_i234) {\n            var elem235 = null;\n            elem235 = new TCompletionHint();\n            elem235.read(input);\n            this.success.push(elem235);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_completion_hints_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_completion_hints_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter236 in this.success) {\n      if (this.success.hasOwnProperty(iter236)) {\n        iter236 = this.success[iter236];\n        iter236.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_execution_mode_args = function (args) {\n  this.session = null;\n  this.mode = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.mode !== undefined && args.mode !== null) {\n      this.mode = args.mode;\n    }\n  }\n};\nOmniSci_set_execution_mode_args.prototype = {};\nOmniSci_set_execution_mode_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.mode = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_execution_mode_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_execution_mode_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.mode !== null && this.mode !== undefined) {\n    output.writeFieldBegin('mode', Thrift.Type.I32, 2);\n    output.writeI32(this.mode);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_execution_mode_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_set_execution_mode_result.prototype = {};\nOmniSci_set_execution_mode_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_execution_mode_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_execution_mode_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_render_vega_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.vega_json = null;\n  this.compression_level = null;\n  this.nonce = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.vega_json !== undefined && args.vega_json !== null) {\n      this.vega_json = args.vega_json;\n    }\n    if (args.compression_level !== undefined && args.compression_level !== null) {\n      this.compression_level = args.compression_level;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nOmniSci_render_vega_args.prototype = {};\nOmniSci_render_vega_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_json = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.compression_level = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_render_vega_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_render_vega_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.vega_json !== null && this.vega_json !== undefined) {\n    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);\n    output.writeString(this.vega_json);\n    output.writeFieldEnd();\n  }\n  if (this.compression_level !== null && this.compression_level !== undefined) {\n    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);\n    output.writeI32(this.compression_level);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_render_vega_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TRenderResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_render_vega_result.prototype = {};\nOmniSci_render_vega_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TRenderResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_render_vega_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_render_vega_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_result_row_for_pixel_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.pixel = null;\n  this.table_col_names = null;\n  this.column_format = null;\n  this.pixelRadius = null;\n  this.nonce = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.pixel !== undefined && args.pixel !== null) {\n      this.pixel = new TPixel(args.pixel);\n    }\n    if (args.table_col_names !== undefined && args.table_col_names !== null) {\n      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);\n    }\n    if (args.column_format !== undefined && args.column_format !== null) {\n      this.column_format = args.column_format;\n    }\n    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {\n      this.pixelRadius = args.pixelRadius;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nOmniSci_get_result_row_for_pixel_args.prototype = {};\nOmniSci_get_result_row_for_pixel_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pixel = new TPixel();\n          this.pixel.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.MAP) {\n          this.table_col_names = {};\n          var _rtmp3238 = input.readMapBegin();\n          var _size237 = _rtmp3238.size || 0;\n          for (var _i239 = 0; _i239 < _size237; ++_i239) {\n            if (_i239 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key240 = null;\n            var val241 = null;\n            key240 = input.readString().value;\n            val241 = [];\n            var _rtmp3243 = input.readListBegin();\n            var _size242 = _rtmp3243.size || 0;\n            for (var _i244 = 0; _i244 < _size242; ++_i244) {\n              var elem245 = null;\n              elem245 = input.readString().value;\n              val241.push(elem245);\n            }\n            input.readListEnd();\n            this.table_col_names[key240] = val241;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.BOOL) {\n          this.column_format = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.I32) {\n          this.pixelRadius = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_result_row_for_pixel_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_result_row_for_pixel_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.pixel !== null && this.pixel !== undefined) {\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);\n    this.pixel.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.table_col_names !== null && this.table_col_names !== undefined) {\n    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));\n    for (var kiter246 in this.table_col_names) {\n      if (this.table_col_names.hasOwnProperty(kiter246)) {\n        var viter247 = this.table_col_names[kiter246];\n        output.writeString(kiter246);\n        output.writeListBegin(Thrift.Type.STRING, viter247.length);\n        for (var iter248 in viter247) {\n          if (viter247.hasOwnProperty(iter248)) {\n            iter248 = viter247[iter248];\n            output.writeString(iter248);\n          }\n        }\n        output.writeListEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.column_format !== null && this.column_format !== undefined) {\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);\n    output.writeBool(this.column_format);\n    output.writeFieldEnd();\n  }\n  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {\n    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);\n    output.writeI32(this.pixelRadius);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_result_row_for_pixel_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPixelTableRowResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_result_row_for_pixel_result.prototype = {};\nOmniSci_get_result_row_for_pixel_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPixelTableRowResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_result_row_for_pixel_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_result_row_for_pixel_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n  }\n};\nOmniSci_get_dashboard_args.prototype = {};\nOmniSci_get_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboard_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDashboard(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_dashboard_result.prototype = {};\nOmniSci_get_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDashboard();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboard_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboards_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_dashboards_args.prototype = {};\nOmniSci_get_dashboards_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboards_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboards_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboards_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDashboard]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_dashboards_result.prototype = {};\nOmniSci_get_dashboards_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3250 = input.readListBegin();\n          var _size249 = _rtmp3250.size || 0;\n          for (var _i251 = 0; _i251 < _size249; ++_i251) {\n            var elem252 = null;\n            elem252 = new TDashboard();\n            elem252.read(input);\n            this.success.push(elem252);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboards_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboards_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter253 in this.success) {\n      if (this.success.hasOwnProperty(iter253)) {\n        iter253 = this.success[iter253];\n        iter253.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_name = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.dashboard_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n  }\n};\nOmniSci_create_dashboard_args.prototype = {};\nOmniSci_create_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 2);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 3);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_dashboard_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_create_dashboard_result.prototype = {};\nOmniSci_create_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.I32) {\n          this.success = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_dashboard_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.I32, 0);\n    output.writeI32(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_replace_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.dashboard_name = null;\n  this.dashboard_owner = null;\n  this.dashboard_state = null;\n  this.image_hash = null;\n  this.dashboard_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {\n      this.dashboard_name = args.dashboard_name;\n    }\n    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {\n      this.dashboard_owner = args.dashboard_owner;\n    }\n    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {\n      this.dashboard_state = args.dashboard_state;\n    }\n    if (args.image_hash !== undefined && args.image_hash !== null) {\n      this.image_hash = args.image_hash;\n    }\n    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {\n      this.dashboard_metadata = args.dashboard_metadata;\n    }\n  }\n};\nOmniSci_replace_dashboard_args.prototype = {};\nOmniSci_replace_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_owner = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRING) {\n          this.image_hash = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 7:\n        if (ftype == Thrift.Type.STRING) {\n          this.dashboard_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_replace_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_replace_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {\n    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 3);\n    output.writeString(this.dashboard_name);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {\n    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 4);\n    output.writeString(this.dashboard_owner);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {\n    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 5);\n    output.writeString(this.dashboard_state);\n    output.writeFieldEnd();\n  }\n  if (this.image_hash !== null && this.image_hash !== undefined) {\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 6);\n    output.writeString(this.image_hash);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {\n    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 7);\n    output.writeString(this.dashboard_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_replace_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_replace_dashboard_result.prototype = {};\nOmniSci_replace_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_replace_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_replace_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_delete_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n  }\n};\nOmniSci_delete_dashboard_args.prototype = {};\nOmniSci_delete_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_delete_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_delete_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_delete_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_delete_dashboard_result.prototype = {};\nOmniSci_delete_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_delete_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_delete_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_share_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.groups = null;\n  this.objects = null;\n  this.permissions = null;\n  this.grant_role = false;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.groups !== undefined && args.groups !== null) {\n      this.groups = Thrift.copyList(args.groups, [null]);\n    }\n    if (args.objects !== undefined && args.objects !== null) {\n      this.objects = Thrift.copyList(args.objects, [null]);\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n    if (args.grant_role !== undefined && args.grant_role !== null) {\n      this.grant_role = args.grant_role;\n    }\n  }\n};\nOmniSci_share_dashboard_args.prototype = {};\nOmniSci_share_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.groups = [];\n          var _rtmp3255 = input.readListBegin();\n          var _size254 = _rtmp3255.size || 0;\n          for (var _i256 = 0; _i256 < _size254; ++_i256) {\n            var elem257 = null;\n            elem257 = input.readString().value;\n            this.groups.push(elem257);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          this.objects = [];\n          var _rtmp3259 = input.readListBegin();\n          var _size258 = _rtmp3259.size || 0;\n          for (var _i260 = 0; _i260 < _size258; ++_i260) {\n            var elem261 = null;\n            elem261 = input.readString().value;\n            this.objects.push(elem261);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.BOOL) {\n          this.grant_role = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_share_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_share_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.groups !== null && this.groups !== undefined) {\n    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.groups.length);\n    for (var iter262 in this.groups) {\n      if (this.groups.hasOwnProperty(iter262)) {\n        iter262 = this.groups[iter262];\n        output.writeString(iter262);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.objects !== null && this.objects !== undefined) {\n    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRING, this.objects.length);\n    for (var iter263 in this.objects) {\n      if (this.objects.hasOwnProperty(iter263)) {\n        iter263 = this.objects[iter263];\n        output.writeString(iter263);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.grant_role !== null && this.grant_role !== undefined) {\n    output.writeFieldBegin('grant_role', Thrift.Type.BOOL, 6);\n    output.writeBool(this.grant_role);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_share_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_share_dashboard_result.prototype = {};\nOmniSci_share_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_share_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_share_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_unshare_dashboard_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  this.groups = null;\n  this.objects = null;\n  this.permissions = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n    if (args.groups !== undefined && args.groups !== null) {\n      this.groups = Thrift.copyList(args.groups, [null]);\n    }\n    if (args.objects !== undefined && args.objects !== null) {\n      this.objects = Thrift.copyList(args.objects, [null]);\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDashboardPermissions(args.permissions);\n    }\n  }\n};\nOmniSci_unshare_dashboard_args.prototype = {};\nOmniSci_unshare_dashboard_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.groups = [];\n          var _rtmp3265 = input.readListBegin();\n          var _size264 = _rtmp3265.size || 0;\n          for (var _i266 = 0; _i266 < _size264; ++_i266) {\n            var elem267 = null;\n            elem267 = input.readString().value;\n            this.groups.push(elem267);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.LIST) {\n          this.objects = [];\n          var _rtmp3269 = input.readListBegin();\n          var _size268 = _rtmp3269.size || 0;\n          for (var _i270 = 0; _i270 < _size268; ++_i270) {\n            var elem271 = null;\n            elem271 = input.readString().value;\n            this.objects.push(elem271);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDashboardPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_unshare_dashboard_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_unshare_dashboard_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  if (this.groups !== null && this.groups !== undefined) {\n    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRING, this.groups.length);\n    for (var iter272 in this.groups) {\n      if (this.groups.hasOwnProperty(iter272)) {\n        iter272 = this.groups[iter272];\n        output.writeString(iter272);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.objects !== null && this.objects !== undefined) {\n    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);\n    output.writeListBegin(Thrift.Type.STRING, this.objects.length);\n    for (var iter273 in this.objects) {\n      if (this.objects.hasOwnProperty(iter273)) {\n        iter273 = this.objects[iter273];\n        output.writeString(iter273);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_unshare_dashboard_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_unshare_dashboard_result.prototype = {};\nOmniSci_unshare_dashboard_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_unshare_dashboard_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_unshare_dashboard_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboard_grantees_args = function (args) {\n  this.session = null;\n  this.dashboard_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {\n      this.dashboard_id = args.dashboard_id;\n    }\n  }\n};\nOmniSci_get_dashboard_grantees_args.prototype = {};\nOmniSci_get_dashboard_grantees_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.dashboard_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboard_grantees_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboard_grantees_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {\n    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);\n    output.writeI32(this.dashboard_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_dashboard_grantees_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDashboardGrantees]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_dashboard_grantees_result.prototype = {};\nOmniSci_get_dashboard_grantees_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3275 = input.readListBegin();\n          var _size274 = _rtmp3275.size || 0;\n          for (var _i276 = 0; _i276 < _size274; ++_i276) {\n            var elem277 = null;\n            elem277 = new TDashboardGrantees();\n            elem277.read(input);\n            this.success.push(elem277);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_dashboard_grantees_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_dashboard_grantees_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter278 in this.success) {\n      if (this.success.hasOwnProperty(iter278)) {\n        iter278 = this.success[iter278];\n        iter278.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_link_view_args = function (args) {\n  this.session = null;\n  this.link = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.link !== undefined && args.link !== null) {\n      this.link = args.link;\n    }\n  }\n};\nOmniSci_get_link_view_args.prototype = {};\nOmniSci_get_link_view_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.link = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_link_view_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_link_view_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.link !== null && this.link !== undefined) {\n    output.writeFieldBegin('link', Thrift.Type.STRING, 2);\n    output.writeString(this.link);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_link_view_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TFrontendView(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_link_view_result.prototype = {};\nOmniSci_get_link_view_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TFrontendView();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_link_view_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_link_view_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_link_args = function (args) {\n  this.session = null;\n  this.view_state = null;\n  this.view_metadata = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.view_state !== undefined && args.view_state !== null) {\n      this.view_state = args.view_state;\n    }\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n      this.view_metadata = args.view_metadata;\n    }\n  }\n};\nOmniSci_create_link_args.prototype = {};\nOmniSci_create_link_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_state = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.view_metadata = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_link_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_link_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.view_state !== null && this.view_state !== undefined) {\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\n    output.writeString(this.view_state);\n    output.writeFieldEnd();\n  }\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);\n    output.writeString(this.view_metadata);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_link_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_create_link_result.prototype = {};\nOmniSci_create_link_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_link_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_link_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.rows = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TRow]);\n    }\n  }\n};\nOmniSci_load_table_binary_args.prototype = {};\nOmniSci_load_table_binary_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.rows = [];\n          var _rtmp3280 = input.readListBegin();\n          var _size279 = _rtmp3280.size || 0;\n          for (var _i281 = 0; _i281 < _size279; ++_i281) {\n            var elem282 = null;\n            elem282 = new TRow();\n            elem282.read(input);\n            this.rows.push(elem282);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter283 in this.rows) {\n      if (this.rows.hasOwnProperty(iter283)) {\n        iter283 = this.rows[iter283];\n        iter283.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_load_table_binary_result.prototype = {};\nOmniSci_load_table_binary_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_columnar_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.cols = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.cols !== undefined && args.cols !== null) {\n      this.cols = Thrift.copyList(args.cols, [TColumn]);\n    }\n  }\n};\nOmniSci_load_table_binary_columnar_args.prototype = {};\nOmniSci_load_table_binary_columnar_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.cols = [];\n          var _rtmp3285 = input.readListBegin();\n          var _size284 = _rtmp3285.size || 0;\n          for (var _i286 = 0; _i286 < _size284; ++_i286) {\n            var elem287 = null;\n            elem287 = new TColumn();\n            elem287.read(input);\n            this.cols.push(elem287);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_columnar_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_columnar_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.cols !== null && this.cols !== undefined) {\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n    for (var iter288 in this.cols) {\n      if (this.cols.hasOwnProperty(iter288)) {\n        iter288 = this.cols[iter288];\n        iter288.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_columnar_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_load_table_binary_columnar_result.prototype = {};\nOmniSci_load_table_binary_columnar_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_columnar_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_columnar_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_arrow_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.arrow_stream = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.arrow_stream !== undefined && args.arrow_stream !== null) {\n      this.arrow_stream = args.arrow_stream;\n    }\n  }\n};\nOmniSci_load_table_binary_arrow_args.prototype = {};\nOmniSci_load_table_binary_arrow_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.arrow_stream = input.readBinary().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_arrow_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_arrow_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.arrow_stream !== null && this.arrow_stream !== undefined) {\n    output.writeFieldBegin('arrow_stream', Thrift.Type.STRING, 3);\n    output.writeBinary(this.arrow_stream);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_binary_arrow_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_load_table_binary_arrow_result.prototype = {};\nOmniSci_load_table_binary_arrow_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_binary_arrow_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_binary_arrow_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.rows = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.rows !== undefined && args.rows !== null) {\n      this.rows = Thrift.copyList(args.rows, [TStringRow]);\n    }\n  }\n};\nOmniSci_load_table_args.prototype = {};\nOmniSci_load_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.rows = [];\n          var _rtmp3290 = input.readListBegin();\n          var _size289 = _rtmp3290.size || 0;\n          for (var _i291 = 0; _i291 < _size289; ++_i291) {\n            var elem292 = null;\n            elem292 = new TStringRow();\n            elem292.read(input);\n            this.rows.push(elem292);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.rows !== null && this.rows !== undefined) {\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n    for (var iter293 in this.rows) {\n      if (this.rows.hasOwnProperty(iter293)) {\n        iter293 = this.rows[iter293];\n        iter293.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_load_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_load_table_result.prototype = {};\nOmniSci_load_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_load_table_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_load_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_detect_column_types_args = function (args) {\n  this.session = null;\n  this.file_name = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_detect_column_types_args.prototype = {};\nOmniSci_detect_column_types_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_detect_column_types_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_detect_column_types_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_detect_column_types_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TDetectResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_detect_column_types_result.prototype = {};\nOmniSci_detect_column_types_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TDetectResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_detect_column_types_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_detect_column_types_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.row_desc = null;\n  this.file_type = 0;\n  this.create_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.file_type !== undefined && args.file_type !== null) {\n      this.file_type = args.file_type;\n    }\n    if (args.create_params !== undefined && args.create_params !== null) {\n      this.create_params = new TCreateParams(args.create_params);\n    }\n  }\n};\nOmniSci_create_table_args.prototype = {};\nOmniSci_create_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.row_desc = [];\n          var _rtmp3295 = input.readListBegin();\n          var _size294 = _rtmp3295.size || 0;\n          for (var _i296 = 0; _i296 < _size294; ++_i296) {\n            var elem297 = null;\n            elem297 = new TColumnType();\n            elem297.read(input);\n            this.row_desc.push(elem297);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.file_type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.create_params = new TCreateParams();\n          this.create_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_table_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter298 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter298)) {\n        iter298 = this.row_desc[iter298];\n        iter298.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.file_type !== null && this.file_type !== undefined) {\n    output.writeFieldBegin('file_type', Thrift.Type.I32, 4);\n    output.writeI32(this.file_type);\n    output.writeFieldEnd();\n  }\n  if (this.create_params !== null && this.create_params !== undefined) {\n    output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 5);\n    this.create_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_create_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_create_table_result.prototype = {};\nOmniSci_create_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_create_table_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_create_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.file_name = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_import_table_args.prototype = {};\nOmniSci_import_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_table_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_import_table_result.prototype = {};\nOmniSci_import_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_table_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_geo_table_args = function (args) {\n  this.session = null;\n  this.table_name = null;\n  this.file_name = null;\n  this.copy_params = null;\n  this.row_desc = null;\n  this.create_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_name !== undefined && args.table_name !== null) {\n      this.table_name = args.table_name;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.create_params !== undefined && args.create_params !== null) {\n      this.create_params = new TCreateParams(args.create_params);\n    }\n  }\n};\nOmniSci_import_geo_table_args.prototype = {};\nOmniSci_import_geo_table_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.table_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.LIST) {\n          this.row_desc = [];\n          var _rtmp3300 = input.readListBegin();\n          var _size299 = _rtmp3300.size || 0;\n          for (var _i301 = 0; _i301 < _size299; ++_i301) {\n            var elem302 = null;\n            elem302 = new TColumnType();\n            elem302.read(input);\n            this.row_desc.push(elem302);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 6:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.create_params = new TCreateParams();\n          this.create_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_geo_table_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_geo_table_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_name !== null && this.table_name !== undefined) {\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n    output.writeString(this.table_name);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter303 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter303)) {\n        iter303 = this.row_desc[iter303];\n        iter303.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.create_params !== null && this.create_params !== undefined) {\n    output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 6);\n    this.create_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_geo_table_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_import_geo_table_result.prototype = {};\nOmniSci_import_geo_table_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_geo_table_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_geo_table_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_table_status_args = function (args) {\n  this.session = null;\n  this.import_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.import_id !== undefined && args.import_id !== null) {\n      this.import_id = args.import_id;\n    }\n  }\n};\nOmniSci_import_table_status_args.prototype = {};\nOmniSci_import_table_status_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.import_id = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_table_status_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_table_status_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.import_id !== null && this.import_id !== undefined) {\n    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);\n    output.writeString(this.import_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_import_table_status_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TImportStatus(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_import_table_status_result.prototype = {};\nOmniSci_import_table_status_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TImportStatus();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_import_table_status_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_import_table_status_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_first_geo_file_in_archive_args = function (args) {\n  this.session = null;\n  this.archive_path = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.archive_path !== undefined && args.archive_path !== null) {\n      this.archive_path = args.archive_path;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_get_first_geo_file_in_archive_args.prototype = {};\nOmniSci_get_first_geo_file_in_archive_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.archive_path = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_first_geo_file_in_archive_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.archive_path !== null && this.archive_path !== undefined) {\n    output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);\n    output.writeString(this.archive_path);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_first_geo_file_in_archive_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_first_geo_file_in_archive_result.prototype = {};\nOmniSci_get_first_geo_file_in_archive_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRING) {\n          this.success = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_first_geo_file_in_archive_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n    output.writeString(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_all_files_in_archive_args = function (args) {\n  this.session = null;\n  this.archive_path = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.archive_path !== undefined && args.archive_path !== null) {\n      this.archive_path = args.archive_path;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_get_all_files_in_archive_args.prototype = {};\nOmniSci_get_all_files_in_archive_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.archive_path = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_all_files_in_archive_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_all_files_in_archive_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.archive_path !== null && this.archive_path !== undefined) {\n    output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);\n    output.writeString(this.archive_path);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_all_files_in_archive_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_all_files_in_archive_result.prototype = {};\nOmniSci_get_all_files_in_archive_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3305 = input.readListBegin();\n          var _size304 = _rtmp3305.size || 0;\n          for (var _i306 = 0; _i306 < _size304; ++_i306) {\n            var elem307 = null;\n            elem307 = input.readString().value;\n            this.success.push(elem307);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_all_files_in_archive_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_all_files_in_archive_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter308 in this.success) {\n      if (this.success.hasOwnProperty(iter308)) {\n        iter308 = this.success[iter308];\n        output.writeString(iter308);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_layers_in_geo_file_args = function (args) {\n  this.session = null;\n  this.file_name = null;\n  this.copy_params = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.file_name !== undefined && args.file_name !== null) {\n      this.file_name = args.file_name;\n    }\n    if (args.copy_params !== undefined && args.copy_params !== null) {\n      this.copy_params = new TCopyParams(args.copy_params);\n    }\n  }\n};\nOmniSci_get_layers_in_geo_file_args.prototype = {};\nOmniSci_get_layers_in_geo_file_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.file_name = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.copy_params = new TCopyParams();\n          this.copy_params.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_layers_in_geo_file_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_layers_in_geo_file_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.file_name !== null && this.file_name !== undefined) {\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);\n    output.writeString(this.file_name);\n    output.writeFieldEnd();\n  }\n  if (this.copy_params !== null && this.copy_params !== undefined) {\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n    this.copy_params.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_layers_in_geo_file_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TGeoFileLayerInfo]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_layers_in_geo_file_result.prototype = {};\nOmniSci_get_layers_in_geo_file_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3310 = input.readListBegin();\n          var _size309 = _rtmp3310.size || 0;\n          for (var _i311 = 0; _i311 < _size309; ++_i311) {\n            var elem312 = null;\n            elem312 = new TGeoFileLayerInfo();\n            elem312.read(input);\n            this.success.push(elem312);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_layers_in_geo_file_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_layers_in_geo_file_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter313 in this.success) {\n      if (this.success.hasOwnProperty(iter313)) {\n        iter313 = this.success[iter313];\n        iter313.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_check_table_consistency_args = function (args) {\n  this.session = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nOmniSci_check_table_consistency_args.prototype = {};\nOmniSci_check_table_consistency_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_check_table_consistency_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_check_table_consistency_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_check_table_consistency_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TTableMeta(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_check_table_consistency_result.prototype = {};\nOmniSci_check_table_consistency_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TTableMeta();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_check_table_consistency_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_check_table_consistency_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_query_args = function (args) {\n  this.leaf_session = null;\n  this.parent_session = null;\n  this.query_ra = null;\n  this.just_explain = null;\n  if (args) {\n    if (args.leaf_session !== undefined && args.leaf_session !== null) {\n      this.leaf_session = args.leaf_session;\n    }\n    if (args.parent_session !== undefined && args.parent_session !== null) {\n      this.parent_session = args.parent_session;\n    }\n    if (args.query_ra !== undefined && args.query_ra !== null) {\n      this.query_ra = args.query_ra;\n    }\n    if (args.just_explain !== undefined && args.just_explain !== null) {\n      this.just_explain = args.just_explain;\n    }\n  }\n};\nOmniSci_start_query_args.prototype = {};\nOmniSci_start_query_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.leaf_session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.parent_session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.query_ra = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.BOOL) {\n          this.just_explain = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_query_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_query_args');\n  if (this.leaf_session !== null && this.leaf_session !== undefined) {\n    output.writeFieldBegin('leaf_session', Thrift.Type.STRING, 1);\n    output.writeString(this.leaf_session);\n    output.writeFieldEnd();\n  }\n  if (this.parent_session !== null && this.parent_session !== undefined) {\n    output.writeFieldBegin('parent_session', Thrift.Type.STRING, 2);\n    output.writeString(this.parent_session);\n    output.writeFieldEnd();\n  }\n  if (this.query_ra !== null && this.query_ra !== undefined) {\n    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 3);\n    output.writeString(this.query_ra);\n    output.writeFieldEnd();\n  }\n  if (this.just_explain !== null && this.just_explain !== undefined) {\n    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 4);\n    output.writeBool(this.just_explain);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_query_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPendingQuery(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_start_query_result.prototype = {};\nOmniSci_start_query_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPendingQuery();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_query_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_query_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_execute_query_step_args = function (args) {\n  this.pending_query = null;\n  if (args) {\n    if (args.pending_query !== undefined && args.pending_query !== null) {\n      this.pending_query = new TPendingQuery(args.pending_query);\n    }\n  }\n};\nOmniSci_execute_query_step_args.prototype = {};\nOmniSci_execute_query_step_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pending_query = new TPendingQuery();\n          this.pending_query.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_execute_query_step_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_execute_query_step_args');\n  if (this.pending_query !== null && this.pending_query !== undefined) {\n    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);\n    this.pending_query.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_execute_query_step_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TStepResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_execute_query_step_result.prototype = {};\nOmniSci_execute_query_step_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TStepResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_execute_query_step_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_execute_query_step_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_broadcast_serialized_rows_args = function (args) {\n  this.serialized_rows = null;\n  this.row_desc = null;\n  this.query_id = null;\n  if (args) {\n    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\n      this.serialized_rows = new TSerializedRows(args.serialized_rows);\n    }\n    if (args.row_desc !== undefined && args.row_desc !== null) {\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\n    }\n    if (args.query_id !== undefined && args.query_id !== null) {\n      this.query_id = args.query_id;\n    }\n  }\n};\nOmniSci_broadcast_serialized_rows_args.prototype = {};\nOmniSci_broadcast_serialized_rows_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.serialized_rows = new TSerializedRows();\n          this.serialized_rows.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.row_desc = [];\n          var _rtmp3315 = input.readListBegin();\n          var _size314 = _rtmp3315.size || 0;\n          for (var _i316 = 0; _i316 < _size314; ++_i316) {\n            var elem317 = null;\n            elem317 = new TColumnType();\n            elem317.read(input);\n            this.row_desc.push(elem317);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I64) {\n          this.query_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_broadcast_serialized_rows_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_broadcast_serialized_rows_args');\n  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\n    output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);\n    this.serialized_rows.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.row_desc !== null && this.row_desc !== undefined) {\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n    for (var iter318 in this.row_desc) {\n      if (this.row_desc.hasOwnProperty(iter318)) {\n        iter318 = this.row_desc[iter318];\n        iter318.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.query_id !== null && this.query_id !== undefined) {\n    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);\n    output.writeI64(this.query_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_broadcast_serialized_rows_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_broadcast_serialized_rows_result.prototype = {};\nOmniSci_broadcast_serialized_rows_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_broadcast_serialized_rows_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_broadcast_serialized_rows_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_render_query_args = function (args) {\n  this.session = null;\n  this.widget_id = null;\n  this.node_idx = null;\n  this.vega_json = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.widget_id !== undefined && args.widget_id !== null) {\n      this.widget_id = args.widget_id;\n    }\n    if (args.node_idx !== undefined && args.node_idx !== null) {\n      this.node_idx = args.node_idx;\n    }\n    if (args.vega_json !== undefined && args.vega_json !== null) {\n      this.vega_json = args.vega_json;\n    }\n  }\n};\nOmniSci_start_render_query_args.prototype = {};\nOmniSci_start_render_query_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I64) {\n          this.widget_id = input.readI64().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I16) {\n          this.node_idx = input.readI16().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.STRING) {\n          this.vega_json = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_render_query_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_render_query_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.widget_id !== null && this.widget_id !== undefined) {\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n    output.writeI64(this.widget_id);\n    output.writeFieldEnd();\n  }\n  if (this.node_idx !== null && this.node_idx !== undefined) {\n    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);\n    output.writeI16(this.node_idx);\n    output.writeFieldEnd();\n  }\n  if (this.vega_json !== null && this.vega_json !== undefined) {\n    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);\n    output.writeString(this.vega_json);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_start_render_query_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TPendingRenderQuery(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_start_render_query_result.prototype = {};\nOmniSci_start_render_query_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TPendingRenderQuery();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_start_render_query_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_start_render_query_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_execute_next_render_step_args = function (args) {\n  this.pending_render = null;\n  this.merged_data = null;\n  if (args) {\n    if (args.pending_render !== undefined && args.pending_render !== null) {\n      this.pending_render = new TPendingRenderQuery(args.pending_render);\n    }\n    if (args.merged_data !== undefined && args.merged_data !== null) {\n      this.merged_data = Thrift.copyMap(args.merged_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, TRenderDatum]);\n    }\n  }\n};\nOmniSci_execute_next_render_step_args.prototype = {};\nOmniSci_execute_next_render_step_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.pending_render = new TPendingRenderQuery();\n          this.pending_render.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.MAP) {\n          this.merged_data = {};\n          var _rtmp3320 = input.readMapBegin();\n          var _size319 = _rtmp3320.size || 0;\n          for (var _i321 = 0; _i321 < _size319; ++_i321) {\n            if (_i321 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key322 = null;\n            var val323 = null;\n            key322 = input.readString().value;\n            val323 = {};\n            var _rtmp3325 = input.readMapBegin();\n            var _size324 = _rtmp3325.size || 0;\n            for (var _i326 = 0; _i326 < _size324; ++_i326) {\n              if (_i326 > 0) {\n                if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                  input.rstack.pop();\n                }\n              }\n              var key327 = null;\n              var val328 = null;\n              key327 = input.readString().value;\n              val328 = {};\n              var _rtmp3330 = input.readMapBegin();\n              var _size329 = _rtmp3330.size || 0;\n              for (var _i331 = 0; _i331 < _size329; ++_i331) {\n                if (_i331 > 0) {\n                  if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                    input.rstack.pop();\n                  }\n                }\n                var key332 = null;\n                var val333 = null;\n                key332 = input.readString().value;\n                val333 = {};\n                var _rtmp3335 = input.readMapBegin();\n                var _size334 = _rtmp3335.size || 0;\n                for (var _i336 = 0; _i336 < _size334; ++_i336) {\n                  if (_i336 > 0) {\n                    if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                      input.rstack.pop();\n                    }\n                  }\n                  var key337 = null;\n                  var val338 = null;\n                  key337 = input.readString().value;\n                  val338 = [];\n                  var _rtmp3340 = input.readListBegin();\n                  var _size339 = _rtmp3340.size || 0;\n                  for (var _i341 = 0; _i341 < _size339; ++_i341) {\n                    var elem342 = null;\n                    elem342 = new TRenderDatum();\n                    elem342.read(input);\n                    val338.push(elem342);\n                  }\n                  input.readListEnd();\n                  val333[key337] = val338;\n                }\n                input.readMapEnd();\n                val328[key332] = val333;\n              }\n              input.readMapEnd();\n              val323[key327] = val328;\n            }\n            input.readMapEnd();\n            this.merged_data[key322] = val323;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_execute_next_render_step_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_execute_next_render_step_args');\n  if (this.pending_render !== null && this.pending_render !== undefined) {\n    output.writeFieldBegin('pending_render', Thrift.Type.STRUCT, 1);\n    this.pending_render.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.merged_data !== null && this.merged_data !== undefined) {\n    output.writeFieldBegin('merged_data', Thrift.Type.MAP, 2);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merged_data));\n    for (var kiter343 in this.merged_data) {\n      if (this.merged_data.hasOwnProperty(kiter343)) {\n        var viter344 = this.merged_data[kiter343];\n        output.writeString(kiter343);\n        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter344));\n        for (var kiter345 in viter344) {\n          if (viter344.hasOwnProperty(kiter345)) {\n            var viter346 = viter344[kiter345];\n            output.writeString(kiter345);\n            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter346));\n            for (var kiter347 in viter346) {\n              if (viter346.hasOwnProperty(kiter347)) {\n                var viter348 = viter346[kiter347];\n                output.writeString(kiter347);\n                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter348));\n                for (var kiter349 in viter348) {\n                  if (viter348.hasOwnProperty(kiter349)) {\n                    var viter350 = viter348[kiter349];\n                    output.writeString(kiter349);\n                    output.writeListBegin(Thrift.Type.STRUCT, viter350.length);\n                    for (var iter351 in viter350) {\n                      if (viter350.hasOwnProperty(iter351)) {\n                        iter351 = viter350[iter351];\n                        iter351.write(output);\n                      }\n                    }\n                    output.writeListEnd();\n                  }\n                }\n                output.writeMapEnd();\n              }\n            }\n            output.writeMapEnd();\n          }\n        }\n        output.writeMapEnd();\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_execute_next_render_step_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TRenderStepResult(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_execute_next_render_step_result.prototype = {};\nOmniSci_execute_next_render_step_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TRenderStepResult();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_execute_next_render_step_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_execute_next_render_step_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_insert_data_args = function (args) {\n  this.session = null;\n  this.insert_data = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.insert_data !== undefined && args.insert_data !== null) {\n      this.insert_data = new TInsertData(args.insert_data);\n    }\n  }\n};\nOmniSci_insert_data_args.prototype = {};\nOmniSci_insert_data_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.insert_data = new TInsertData();\n          this.insert_data.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_insert_data_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_insert_data_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.insert_data !== null && this.insert_data !== undefined) {\n    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);\n    this.insert_data.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_insert_data_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_insert_data_result.prototype = {};\nOmniSci_insert_data_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_insert_data_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_insert_data_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_checkpoint_args = function (args) {\n  this.session = null;\n  this.db_id = null;\n  this.table_id = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.db_id !== undefined && args.db_id !== null) {\n      this.db_id = args.db_id;\n    }\n    if (args.table_id !== undefined && args.table_id !== null) {\n      this.table_id = args.table_id;\n    }\n  }\n};\nOmniSci_checkpoint_args.prototype = {};\nOmniSci_checkpoint_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.I32) {\n          this.db_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.table_id = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_checkpoint_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_checkpoint_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.db_id !== null && this.db_id !== undefined) {\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);\n    output.writeI32(this.db_id);\n    output.writeFieldEnd();\n  }\n  if (this.table_id !== null && this.table_id !== undefined) {\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n    output.writeI32(this.table_id);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_checkpoint_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_checkpoint_result.prototype = {};\nOmniSci_checkpoint_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_checkpoint_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_checkpoint_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_roles_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_roles_args.prototype = {};\nOmniSci_get_roles_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_roles_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_roles_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_roles_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_roles_result.prototype = {};\nOmniSci_get_roles_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3353 = input.readListBegin();\n          var _size352 = _rtmp3353.size || 0;\n          for (var _i354 = 0; _i354 < _size352; ++_i354) {\n            var elem355 = null;\n            elem355 = input.readString().value;\n            this.success.push(elem355);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_roles_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_roles_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter356 in this.success) {\n      if (this.success.hasOwnProperty(iter356)) {\n        iter356 = this.success[iter356];\n        output.writeString(iter356);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_db_objects_for_grantee_args = function (args) {\n  this.session = null;\n  this.roleName = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.roleName !== undefined && args.roleName !== null) {\n      this.roleName = args.roleName;\n    }\n  }\n};\nOmniSci_get_db_objects_for_grantee_args.prototype = {};\nOmniSci_get_db_objects_for_grantee_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.roleName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_db_objects_for_grantee_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_db_objects_for_grantee_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.roleName !== null && this.roleName !== undefined) {\n    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);\n    output.writeString(this.roleName);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_db_objects_for_grantee_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBObject]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_db_objects_for_grantee_result.prototype = {};\nOmniSci_get_db_objects_for_grantee_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3358 = input.readListBegin();\n          var _size357 = _rtmp3358.size || 0;\n          for (var _i359 = 0; _i359 < _size357; ++_i359) {\n            var elem360 = null;\n            elem360 = new TDBObject();\n            elem360.read(input);\n            this.success.push(elem360);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_db_objects_for_grantee_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_db_objects_for_grantee_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter361 in this.success) {\n      if (this.success.hasOwnProperty(iter361)) {\n        iter361 = this.success[iter361];\n        iter361.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_db_object_privs_args = function (args) {\n  this.session = null;\n  this.objectName = null;\n  this.type = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.objectName !== undefined && args.objectName !== null) {\n      this.objectName = args.objectName;\n    }\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n  }\n};\nOmniSci_get_db_object_privs_args.prototype = {};\nOmniSci_get_db_object_privs_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.objectName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_db_object_privs_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_db_object_privs_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.objectName !== null && this.objectName !== undefined) {\n    output.writeFieldBegin('objectName', Thrift.Type.STRING, 2);\n    output.writeString(this.objectName);\n    output.writeFieldEnd();\n  }\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 3);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_db_object_privs_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [TDBObject]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_db_object_privs_result.prototype = {};\nOmniSci_get_db_object_privs_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3363 = input.readListBegin();\n          var _size362 = _rtmp3363.size || 0;\n          for (var _i364 = 0; _i364 < _size362; ++_i364) {\n            var elem365 = null;\n            elem365 = new TDBObject();\n            elem365.read(input);\n            this.success.push(elem365);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_db_object_privs_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_db_object_privs_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n    for (var iter366 in this.success) {\n      if (this.success.hasOwnProperty(iter366)) {\n        iter366 = this.success[iter366];\n        iter366.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_all_roles_for_user_args = function (args) {\n  this.session = null;\n  this.userName = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.userName !== undefined && args.userName !== null) {\n      this.userName = args.userName;\n    }\n  }\n};\nOmniSci_get_all_roles_for_user_args.prototype = {};\nOmniSci_get_all_roles_for_user_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.userName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_all_roles_for_user_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_all_roles_for_user_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.userName !== null && this.userName !== undefined) {\n    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);\n    output.writeString(this.userName);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_all_roles_for_user_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyList(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_all_roles_for_user_result.prototype = {};\nOmniSci_get_all_roles_for_user_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.LIST) {\n          this.success = [];\n          var _rtmp3368 = input.readListBegin();\n          var _size367 = _rtmp3368.size || 0;\n          for (var _i369 = 0; _i369 < _size367; ++_i369) {\n            var elem370 = null;\n            elem370 = input.readString().value;\n            this.success.push(elem370);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_all_roles_for_user_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_all_roles_for_user_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n    for (var iter371 in this.success) {\n      if (this.success.hasOwnProperty(iter371)) {\n        iter371 = this.success[iter371];\n        output.writeString(iter371);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_has_role_args = function (args) {\n  this.session = null;\n  this.granteeName = null;\n  this.roleName = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.granteeName !== undefined && args.granteeName !== null) {\n      this.granteeName = args.granteeName;\n    }\n    if (args.roleName !== undefined && args.roleName !== null) {\n      this.roleName = args.roleName;\n    }\n  }\n};\nOmniSci_has_role_args.prototype = {};\nOmniSci_has_role_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.granteeName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.roleName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_has_role_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_has_role_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.granteeName !== null && this.granteeName !== undefined) {\n    output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);\n    output.writeString(this.granteeName);\n    output.writeFieldEnd();\n  }\n  if (this.roleName !== null && this.roleName !== undefined) {\n    output.writeFieldBegin('roleName', Thrift.Type.STRING, 3);\n    output.writeString(this.roleName);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_has_role_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_has_role_result.prototype = {};\nOmniSci_has_role_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.BOOL) {\n          this.success = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_has_role_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_has_role_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);\n    output.writeBool(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_has_object_privilege_args = function (args) {\n  this.session = null;\n  this.granteeName = null;\n  this.ObjectName = null;\n  this.objectType = null;\n  this.permissions = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.granteeName !== undefined && args.granteeName !== null) {\n      this.granteeName = args.granteeName;\n    }\n    if (args.ObjectName !== undefined && args.ObjectName !== null) {\n      this.ObjectName = args.ObjectName;\n    }\n    if (args.objectType !== undefined && args.objectType !== null) {\n      this.objectType = args.objectType;\n    }\n    if (args.permissions !== undefined && args.permissions !== null) {\n      this.permissions = new TDBObjectPermissions(args.permissions);\n    }\n  }\n};\nOmniSci_has_object_privilege_args.prototype = {};\nOmniSci_has_object_privilege_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.granteeName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.ObjectName = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.I32) {\n          this.objectType = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 5:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.permissions = new TDBObjectPermissions();\n          this.permissions.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_has_object_privilege_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_has_object_privilege_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.granteeName !== null && this.granteeName !== undefined) {\n    output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);\n    output.writeString(this.granteeName);\n    output.writeFieldEnd();\n  }\n  if (this.ObjectName !== null && this.ObjectName !== undefined) {\n    output.writeFieldBegin('ObjectName', Thrift.Type.STRING, 3);\n    output.writeString(this.ObjectName);\n    output.writeFieldEnd();\n  }\n  if (this.objectType !== null && this.objectType !== undefined) {\n    output.writeFieldBegin('objectType', Thrift.Type.I32, 4);\n    output.writeI32(this.objectType);\n    output.writeFieldEnd();\n  }\n  if (this.permissions !== null && this.permissions !== undefined) {\n    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);\n    this.permissions.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_has_object_privilege_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = args.success;\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_has_object_privilege_result.prototype = {};\nOmniSci_has_object_privilege_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.BOOL) {\n          this.success = input.readBool().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_has_object_privilege_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_has_object_privilege_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);\n    output.writeBool(this.success);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_license_key_args = function (args) {\n  this.session = null;\n  this.key = null;\n  this.nonce = '';\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.key !== undefined && args.key !== null) {\n      this.key = args.key;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nOmniSci_set_license_key_args.prototype = {};\nOmniSci_set_license_key_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.key = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_license_key_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_license_key_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.key !== null && this.key !== undefined) {\n    output.writeFieldBegin('key', Thrift.Type.STRING, 2);\n    output.writeString(this.key);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 3);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_set_license_key_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TLicenseInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_set_license_key_result.prototype = {};\nOmniSci_set_license_key_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TLicenseInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_set_license_key_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_set_license_key_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_license_claims_args = function (args) {\n  this.session = null;\n  this.nonce = '';\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.nonce !== undefined && args.nonce !== null) {\n      this.nonce = args.nonce;\n    }\n  }\n};\nOmniSci_get_license_claims_args.prototype = {};\nOmniSci_get_license_claims_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.STRING) {\n          this.nonce = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_license_claims_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_license_claims_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.nonce !== null && this.nonce !== undefined) {\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\n    output.writeString(this.nonce);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_license_claims_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = new TLicenseInfo(args.success);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_license_claims_result.prototype = {};\nOmniSci_get_license_claims_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.success = new TLicenseInfo();\n          this.success.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_license_claims_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_license_claims_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n    this.success.write(output);\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_device_parameters_args = function (args) {\n  this.session = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n  }\n};\nOmniSci_get_device_parameters_args.prototype = {};\nOmniSci_get_device_parameters_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_device_parameters_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_device_parameters_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_get_device_parameters_result = function (args) {\n  this.success = null;\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.success !== undefined && args.success !== null) {\n      this.success = Thrift.copyMap(args.success, [null]);\n    }\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_get_device_parameters_result.prototype = {};\nOmniSci_get_device_parameters_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 0:\n        if (ftype == Thrift.Type.MAP) {\n          this.success = {};\n          var _rtmp3373 = input.readMapBegin();\n          var _size372 = _rtmp3373.size || 0;\n          for (var _i374 = 0; _i374 < _size372; ++_i374) {\n            if (_i374 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key375 = null;\n            var val376 = null;\n            key375 = input.readString().value;\n            val376 = input.readString().value;\n            this.success[key375] = val376;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_get_device_parameters_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_get_device_parameters_result');\n  if (this.success !== null && this.success !== undefined) {\n    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));\n    for (var kiter377 in this.success) {\n      if (this.success.hasOwnProperty(kiter377)) {\n        var viter378 = this.success[kiter377];\n        output.writeString(kiter377);\n        output.writeString(viter378);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_register_runtime_extension_functions_args = function (args) {\n  this.session = null;\n  this.udfs = null;\n  this.udtfs = null;\n  this.device_ir_map = null;\n  if (args) {\n    if (args.session !== undefined && args.session !== null) {\n      this.session = args.session;\n    }\n    if (args.udfs !== undefined && args.udfs !== null) {\n      this.udfs = Thrift.copyList(args.udfs, [TUserDefinedFunction]);\n    }\n    if (args.udtfs !== undefined && args.udtfs !== null) {\n      this.udtfs = Thrift.copyList(args.udtfs, [TUserDefinedTableFunction]);\n    }\n    if (args.device_ir_map !== undefined && args.device_ir_map !== null) {\n      this.device_ir_map = Thrift.copyMap(args.device_ir_map, [null]);\n    }\n  }\n};\nOmniSci_register_runtime_extension_functions_args.prototype = {};\nOmniSci_register_runtime_extension_functions_args.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRING) {\n          this.session = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.udfs = [];\n          var _rtmp3380 = input.readListBegin();\n          var _size379 = _rtmp3380.size || 0;\n          for (var _i381 = 0; _i381 < _size379; ++_i381) {\n            var elem382 = null;\n            elem382 = new TUserDefinedFunction();\n            elem382.read(input);\n            this.udfs.push(elem382);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.LIST) {\n          this.udtfs = [];\n          var _rtmp3384 = input.readListBegin();\n          var _size383 = _rtmp3384.size || 0;\n          for (var _i385 = 0; _i385 < _size383; ++_i385) {\n            var elem386 = null;\n            elem386 = new TUserDefinedTableFunction();\n            elem386.read(input);\n            this.udtfs.push(elem386);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 4:\n        if (ftype == Thrift.Type.MAP) {\n          this.device_ir_map = {};\n          var _rtmp3388 = input.readMapBegin();\n          var _size387 = _rtmp3388.size || 0;\n          for (var _i389 = 0; _i389 < _size387; ++_i389) {\n            if (_i389 > 0) {\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\n                input.rstack.pop();\n              }\n            }\n            var key390 = null;\n            var val391 = null;\n            key390 = input.readString().value;\n            val391 = input.readString().value;\n            this.device_ir_map[key390] = val391;\n          }\n          input.readMapEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_register_runtime_extension_functions_args.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_register_runtime_extension_functions_args');\n  if (this.session !== null && this.session !== undefined) {\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n    output.writeString(this.session);\n    output.writeFieldEnd();\n  }\n  if (this.udfs !== null && this.udfs !== undefined) {\n    output.writeFieldBegin('udfs', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRUCT, this.udfs.length);\n    for (var iter392 in this.udfs) {\n      if (this.udfs.hasOwnProperty(iter392)) {\n        iter392 = this.udfs[iter392];\n        iter392.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.udtfs !== null && this.udtfs !== undefined) {\n    output.writeFieldBegin('udtfs', Thrift.Type.LIST, 3);\n    output.writeListBegin(Thrift.Type.STRUCT, this.udtfs.length);\n    for (var iter393 in this.udtfs) {\n      if (this.udtfs.hasOwnProperty(iter393)) {\n        iter393 = this.udtfs[iter393];\n        iter393.write(output);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.device_ir_map !== null && this.device_ir_map !== undefined) {\n    output.writeFieldBegin('device_ir_map', Thrift.Type.MAP, 4);\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.device_ir_map));\n    for (var kiter394 in this.device_ir_map) {\n      if (this.device_ir_map.hasOwnProperty(kiter394)) {\n        var viter395 = this.device_ir_map[kiter394];\n        output.writeString(kiter394);\n        output.writeString(viter395);\n      }\n    }\n    output.writeMapEnd();\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSci_register_runtime_extension_functions_result = function (args) {\n  this.e = null;\n  if (args instanceof TOmniSciException) {\n    this.e = args;\n    return;\n  }\n  if (args) {\n    if (args.e !== undefined && args.e !== null) {\n      this.e = args.e;\n    }\n  }\n};\nOmniSci_register_runtime_extension_functions_result.prototype = {};\nOmniSci_register_runtime_extension_functions_result.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.STRUCT) {\n          this.e = new TOmniSciException();\n          this.e.read(input);\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 0:\n        input.skip(ftype);\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nOmniSci_register_runtime_extension_functions_result.prototype.write = function (output) {\n  output.writeStructBegin('OmniSci_register_runtime_extension_functions_result');\n  if (this.e !== null && this.e !== undefined) {\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n    this.e.write(output);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};\n\nwindow.OmniSciClient = function (input, output) {\n  this.input = input;\n  this.output = !output ? input : output;\n  this.seqid = 0;\n};\nOmniSciClient.prototype = {};\n\nOmniSciClient.prototype.connect = function (user, passwd, dbname, callback) {\n  this.send_connect(user, passwd, dbname, callback);\n  if (!callback) {\n    return this.recv_connect();\n  }\n};\n\nOmniSciClient.prototype.send_connect = function (user, passwd, dbname, callback) {\n  var params = {\n    user: user,\n    passwd: passwd,\n    dbname: dbname\n  };\n  var args = new OmniSci_connect_args(params);\n  try {\n    this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_connect();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_connect = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_connect_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'connect failed: unknown result';\n};\n\nOmniSciClient.prototype.krb5_connect = function (inputToken, dbname, callback) {\n  this.send_krb5_connect(inputToken, dbname, callback);\n  if (!callback) {\n    return this.recv_krb5_connect();\n  }\n};\n\nOmniSciClient.prototype.send_krb5_connect = function (inputToken, dbname, callback) {\n  var params = {\n    inputToken: inputToken,\n    dbname: dbname\n  };\n  var args = new OmniSci_krb5_connect_args(params);\n  try {\n    this.output.writeMessageBegin('krb5_connect', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_krb5_connect();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_krb5_connect = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_krb5_connect_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'krb5_connect failed: unknown result';\n};\n\nOmniSciClient.prototype.disconnect = function (session, callback) {\n  this.send_disconnect(session, callback);\n  if (!callback) {\n    this.recv_disconnect();\n  }\n};\n\nOmniSciClient.prototype.send_disconnect = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_disconnect_args(params);\n  try {\n    this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_disconnect();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_disconnect = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_disconnect_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.switch_database = function (session, dbname, callback) {\n  this.send_switch_database(session, dbname, callback);\n  if (!callback) {\n    this.recv_switch_database();\n  }\n};\n\nOmniSciClient.prototype.send_switch_database = function (session, dbname, callback) {\n  var params = {\n    session: session,\n    dbname: dbname\n  };\n  var args = new OmniSci_switch_database_args(params);\n  try {\n    this.output.writeMessageBegin('switch_database', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_switch_database();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_switch_database = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_switch_database_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.clone_session = function (session, callback) {\n  this.send_clone_session(session, callback);\n  if (!callback) {\n    return this.recv_clone_session();\n  }\n};\n\nOmniSciClient.prototype.send_clone_session = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_clone_session_args(params);\n  try {\n    this.output.writeMessageBegin('clone_session', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_clone_session();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_clone_session = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_clone_session_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'clone_session failed: unknown result';\n};\n\nOmniSciClient.prototype.get_server_status = function (session, callback) {\n  this.send_get_server_status(session, callback);\n  if (!callback) {\n    return this.recv_get_server_status();\n  }\n};\n\nOmniSciClient.prototype.send_get_server_status = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_server_status_args(params);\n  try {\n    this.output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_server_status();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_server_status = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_server_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_server_status failed: unknown result';\n};\n\nOmniSciClient.prototype.get_status = function (session, callback) {\n  this.send_get_status(session, callback);\n  if (!callback) {\n    return this.recv_get_status();\n  }\n};\n\nOmniSciClient.prototype.send_get_status = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_status_args(params);\n  try {\n    this.output.writeMessageBegin('get_status', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_status();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_status = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_status failed: unknown result';\n};\n\nOmniSciClient.prototype.get_hardware_info = function (session, callback) {\n  this.send_get_hardware_info(session, callback);\n  if (!callback) {\n    return this.recv_get_hardware_info();\n  }\n};\n\nOmniSciClient.prototype.send_get_hardware_info = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_hardware_info_args(params);\n  try {\n    this.output.writeMessageBegin('get_hardware_info', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_hardware_info();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_hardware_info = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_hardware_info_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_hardware_info failed: unknown result';\n};\n\nOmniSciClient.prototype.get_tables = function (session, callback) {\n  this.send_get_tables(session, callback);\n  if (!callback) {\n    return this.recv_get_tables();\n  }\n};\n\nOmniSciClient.prototype.send_get_tables = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_tables_args(params);\n  try {\n    this.output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_tables();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_tables = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_tables_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_tables failed: unknown result';\n};\n\nOmniSciClient.prototype.get_physical_tables = function (session, callback) {\n  this.send_get_physical_tables(session, callback);\n  if (!callback) {\n    return this.recv_get_physical_tables();\n  }\n};\n\nOmniSciClient.prototype.send_get_physical_tables = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_physical_tables_args(params);\n  try {\n    this.output.writeMessageBegin('get_physical_tables', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_physical_tables();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_physical_tables = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_physical_tables_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_physical_tables failed: unknown result';\n};\n\nOmniSciClient.prototype.get_views = function (session, callback) {\n  this.send_get_views(session, callback);\n  if (!callback) {\n    return this.recv_get_views();\n  }\n};\n\nOmniSciClient.prototype.send_get_views = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_views_args(params);\n  try {\n    this.output.writeMessageBegin('get_views', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_views();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_views = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_views_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_views failed: unknown result';\n};\n\nOmniSciClient.prototype.get_tables_meta = function (session, callback) {\n  this.send_get_tables_meta(session, callback);\n  if (!callback) {\n    return this.recv_get_tables_meta();\n  }\n};\n\nOmniSciClient.prototype.send_get_tables_meta = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_tables_meta_args(params);\n  try {\n    this.output.writeMessageBegin('get_tables_meta', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_tables_meta();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_tables_meta = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_tables_meta_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_tables_meta failed: unknown result';\n};\n\nOmniSciClient.prototype.get_table_details = function (session, table_name, callback) {\n  this.send_get_table_details(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_table_details();\n  }\n};\n\nOmniSciClient.prototype.send_get_table_details = function (session, table_name, callback) {\n  var params = {\n    session: session,\n    table_name: table_name\n  };\n  var args = new OmniSci_get_table_details_args(params);\n  try {\n    this.output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_table_details();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_table_details = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_table_details_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_details failed: unknown result';\n};\n\nOmniSciClient.prototype.get_internal_table_details = function (session, table_name, callback) {\n  this.send_get_internal_table_details(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_internal_table_details();\n  }\n};\n\nOmniSciClient.prototype.send_get_internal_table_details = function (session, table_name, callback) {\n  var params = {\n    session: session,\n    table_name: table_name\n  };\n  var args = new OmniSci_get_internal_table_details_args(params);\n  try {\n    this.output.writeMessageBegin('get_internal_table_details', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_internal_table_details();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_internal_table_details = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_internal_table_details_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_internal_table_details failed: unknown result';\n};\n\nOmniSciClient.prototype.get_users = function (session, callback) {\n  this.send_get_users(session, callback);\n  if (!callback) {\n    return this.recv_get_users();\n  }\n};\n\nOmniSciClient.prototype.send_get_users = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_users_args(params);\n  try {\n    this.output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_users();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_users = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_users_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_users failed: unknown result';\n};\n\nOmniSciClient.prototype.get_databases = function (session, callback) {\n  this.send_get_databases(session, callback);\n  if (!callback) {\n    return this.recv_get_databases();\n  }\n};\n\nOmniSciClient.prototype.send_get_databases = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_databases_args(params);\n  try {\n    this.output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_databases();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_databases = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_databases_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_databases failed: unknown result';\n};\n\nOmniSciClient.prototype.get_version = function (callback) {\n  this.send_get_version(callback);\n  if (!callback) {\n    return this.recv_get_version();\n  }\n};\n\nOmniSciClient.prototype.send_get_version = function (callback) {\n  var args = new OmniSci_get_version_args();\n  try {\n    this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_version();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_version = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_version_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_version failed: unknown result';\n};\n\nOmniSciClient.prototype.start_heap_profile = function (session, callback) {\n  this.send_start_heap_profile(session, callback);\n  if (!callback) {\n    this.recv_start_heap_profile();\n  }\n};\n\nOmniSciClient.prototype.send_start_heap_profile = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_start_heap_profile_args(params);\n  try {\n    this.output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_start_heap_profile();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_start_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_start_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.stop_heap_profile = function (session, callback) {\n  this.send_stop_heap_profile(session, callback);\n  if (!callback) {\n    this.recv_stop_heap_profile();\n  }\n};\n\nOmniSciClient.prototype.send_stop_heap_profile = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_stop_heap_profile_args(params);\n  try {\n    this.output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_stop_heap_profile();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_stop_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_stop_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.get_heap_profile = function (session, callback) {\n  this.send_get_heap_profile(session, callback);\n  if (!callback) {\n    return this.recv_get_heap_profile();\n  }\n};\n\nOmniSciClient.prototype.send_get_heap_profile = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_heap_profile_args(params);\n  try {\n    this.output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_heap_profile();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_heap_profile = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_heap_profile_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_heap_profile failed: unknown result';\n};\n\nOmniSciClient.prototype.get_memory = function (session, memory_level, callback) {\n  this.send_get_memory(session, memory_level, callback);\n  if (!callback) {\n    return this.recv_get_memory();\n  }\n};\n\nOmniSciClient.prototype.send_get_memory = function (session, memory_level, callback) {\n  var params = {\n    session: session,\n    memory_level: memory_level\n  };\n  var args = new OmniSci_get_memory_args(params);\n  try {\n    this.output.writeMessageBegin('get_memory', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_memory();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_memory failed: unknown result';\n};\n\nOmniSciClient.prototype.clear_cpu_memory = function (session, callback) {\n  this.send_clear_cpu_memory(session, callback);\n  if (!callback) {\n    this.recv_clear_cpu_memory();\n  }\n};\n\nOmniSciClient.prototype.send_clear_cpu_memory = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_clear_cpu_memory_args(params);\n  try {\n    this.output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_clear_cpu_memory();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_clear_cpu_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_clear_cpu_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.clear_gpu_memory = function (session, callback) {\n  this.send_clear_gpu_memory(session, callback);\n  if (!callback) {\n    this.recv_clear_gpu_memory();\n  }\n};\n\nOmniSciClient.prototype.send_clear_gpu_memory = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_clear_gpu_memory_args(params);\n  try {\n    this.output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_clear_gpu_memory();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_clear_gpu_memory = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_clear_gpu_memory_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.set_table_epoch = function (session, db_id, table_id, new_epoch, callback) {\n  this.send_set_table_epoch(session, db_id, table_id, new_epoch, callback);\n  if (!callback) {\n    this.recv_set_table_epoch();\n  }\n};\n\nOmniSciClient.prototype.send_set_table_epoch = function (session, db_id, table_id, new_epoch, callback) {\n  var params = {\n    session: session,\n    db_id: db_id,\n    table_id: table_id,\n    new_epoch: new_epoch\n  };\n  var args = new OmniSci_set_table_epoch_args(params);\n  try {\n    this.output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_set_table_epoch();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_set_table_epoch = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_table_epoch_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.set_table_epoch_by_name = function (session, table_name, new_epoch, callback) {\n  this.send_set_table_epoch_by_name(session, table_name, new_epoch, callback);\n  if (!callback) {\n    this.recv_set_table_epoch_by_name();\n  }\n};\n\nOmniSciClient.prototype.send_set_table_epoch_by_name = function (session, table_name, new_epoch, callback) {\n  var params = {\n    session: session,\n    table_name: table_name,\n    new_epoch: new_epoch\n  };\n  var args = new OmniSci_set_table_epoch_by_name_args(params);\n  try {\n    this.output.writeMessageBegin('set_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_set_table_epoch_by_name();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_set_table_epoch_by_name = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_table_epoch_by_name_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.get_table_epoch = function (session, db_id, table_id, callback) {\n  this.send_get_table_epoch(session, db_id, table_id, callback);\n  if (!callback) {\n    return this.recv_get_table_epoch();\n  }\n};\n\nOmniSciClient.prototype.send_get_table_epoch = function (session, db_id, table_id, callback) {\n  var params = {\n    session: session,\n    db_id: db_id,\n    table_id: table_id\n  };\n  var args = new OmniSci_get_table_epoch_args(params);\n  try {\n    this.output.writeMessageBegin('get_table_epoch', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_table_epoch();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_table_epoch = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_table_epoch_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_epoch failed: unknown result';\n};\n\nOmniSciClient.prototype.get_table_epoch_by_name = function (session, table_name, callback) {\n  this.send_get_table_epoch_by_name(session, table_name, callback);\n  if (!callback) {\n    return this.recv_get_table_epoch_by_name();\n  }\n};\n\nOmniSciClient.prototype.send_get_table_epoch_by_name = function (session, table_name, callback) {\n  var params = {\n    session: session,\n    table_name: table_name\n  };\n  var args = new OmniSci_get_table_epoch_by_name_args(params);\n  try {\n    this.output.writeMessageBegin('get_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_table_epoch_by_name();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_table_epoch_by_name = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_table_epoch_by_name_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_table_epoch_by_name failed: unknown result';\n};\n\nOmniSciClient.prototype.get_session_info = function (session, callback) {\n  this.send_get_session_info(session, callback);\n  if (!callback) {\n    return this.recv_get_session_info();\n  }\n};\n\nOmniSciClient.prototype.send_get_session_info = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_session_info_args(params);\n  try {\n    this.output.writeMessageBegin('get_session_info', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_session_info();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_session_info = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_session_info_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_session_info failed: unknown result';\n};\n\nOmniSciClient.prototype.sql_execute = function (session, query, column_format, nonce, first_n, at_most_n, callback) {\n  this.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n, callback);\n  if (!callback) {\n    return this.recv_sql_execute();\n  }\n};\n\nOmniSciClient.prototype.send_sql_execute = function (session, query, column_format, nonce, first_n, at_most_n, callback) {\n  var params = {\n    session: session,\n    query: query,\n    column_format: column_format,\n    nonce: nonce,\n    first_n: first_n,\n    at_most_n: at_most_n\n  };\n  var args = new OmniSci_sql_execute_args(params);\n  try {\n    this.output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_sql_execute();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_sql_execute = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_sql_execute_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute failed: unknown result';\n};\n\nOmniSciClient.prototype.sql_execute_df = function (session, query, device_type, device_id, first_n, callback) {\n  this.send_sql_execute_df(session, query, device_type, device_id, first_n, callback);\n  if (!callback) {\n    return this.recv_sql_execute_df();\n  }\n};\n\nOmniSciClient.prototype.send_sql_execute_df = function (session, query, device_type, device_id, first_n, callback) {\n  var params = {\n    session: session,\n    query: query,\n    device_type: device_type,\n    device_id: device_id,\n    first_n: first_n\n  };\n  var args = new OmniSci_sql_execute_df_args(params);\n  try {\n    this.output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_sql_execute_df();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_sql_execute_df = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_sql_execute_df_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute_df failed: unknown result';\n};\n\nOmniSciClient.prototype.sql_execute_gdf = function (session, query, device_id, first_n, callback) {\n  this.send_sql_execute_gdf(session, query, device_id, first_n, callback);\n  if (!callback) {\n    return this.recv_sql_execute_gdf();\n  }\n};\n\nOmniSciClient.prototype.send_sql_execute_gdf = function (session, query, device_id, first_n, callback) {\n  var params = {\n    session: session,\n    query: query,\n    device_id: device_id,\n    first_n: first_n\n  };\n  var args = new OmniSci_sql_execute_gdf_args(params);\n  try {\n    this.output.writeMessageBegin('sql_execute_gdf', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_sql_execute_gdf();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_sql_execute_gdf = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_sql_execute_gdf_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_execute_gdf failed: unknown result';\n};\n\nOmniSciClient.prototype.deallocate_df = function (session, df, device_type, device_id, callback) {\n  this.send_deallocate_df(session, df, device_type, device_id, callback);\n  if (!callback) {\n    this.recv_deallocate_df();\n  }\n};\n\nOmniSciClient.prototype.send_deallocate_df = function (session, df, device_type, device_id, callback) {\n  var params = {\n    session: session,\n    df: df,\n    device_type: device_type,\n    device_id: device_id\n  };\n  var args = new OmniSci_deallocate_df_args(params);\n  try {\n    this.output.writeMessageBegin('deallocate_df', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_deallocate_df();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_deallocate_df = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_deallocate_df_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.interrupt = function (query_session, interrupt_session, callback) {\n  this.send_interrupt(query_session, interrupt_session, callback);\n  if (!callback) {\n    this.recv_interrupt();\n  }\n};\n\nOmniSciClient.prototype.send_interrupt = function (query_session, interrupt_session, callback) {\n  var params = {\n    query_session: query_session,\n    interrupt_session: interrupt_session\n  };\n  var args = new OmniSci_interrupt_args(params);\n  try {\n    this.output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_interrupt();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_interrupt = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_interrupt_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.sql_validate = function (session, query, callback) {\n  this.send_sql_validate(session, query, callback);\n  if (!callback) {\n    return this.recv_sql_validate();\n  }\n};\n\nOmniSciClient.prototype.send_sql_validate = function (session, query, callback) {\n  var params = {\n    session: session,\n    query: query\n  };\n  var args = new OmniSci_sql_validate_args(params);\n  try {\n    this.output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_sql_validate();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_sql_validate = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_sql_validate_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'sql_validate failed: unknown result';\n};\n\nOmniSciClient.prototype.get_completion_hints = function (session, sql, cursor, callback) {\n  this.send_get_completion_hints(session, sql, cursor, callback);\n  if (!callback) {\n    return this.recv_get_completion_hints();\n  }\n};\n\nOmniSciClient.prototype.send_get_completion_hints = function (session, sql, cursor, callback) {\n  var params = {\n    session: session,\n    sql: sql,\n    cursor: cursor\n  };\n  var args = new OmniSci_get_completion_hints_args(params);\n  try {\n    this.output.writeMessageBegin('get_completion_hints', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_completion_hints();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_completion_hints = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_completion_hints_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_completion_hints failed: unknown result';\n};\n\nOmniSciClient.prototype.set_execution_mode = function (session, mode, callback) {\n  this.send_set_execution_mode(session, mode, callback);\n  if (!callback) {\n    this.recv_set_execution_mode();\n  }\n};\n\nOmniSciClient.prototype.send_set_execution_mode = function (session, mode, callback) {\n  var params = {\n    session: session,\n    mode: mode\n  };\n  var args = new OmniSci_set_execution_mode_args(params);\n  try {\n    this.output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_set_execution_mode();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_set_execution_mode = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_execution_mode_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\n  this.send_render_vega(session, widget_id, vega_json, compression_level, nonce, callback);\n  if (!callback) {\n    return this.recv_render_vega();\n  }\n};\n\nOmniSciClient.prototype.send_render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\n  var params = {\n    session: session,\n    widget_id: widget_id,\n    vega_json: vega_json,\n    compression_level: compression_level,\n    nonce: nonce\n  };\n  var args = new OmniSci_render_vega_args(params);\n  try {\n    this.output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_render_vega();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_render_vega = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_render_vega_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'render_vega failed: unknown result';\n};\n\nOmniSciClient.prototype.get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\n  this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback);\n  if (!callback) {\n    return this.recv_get_result_row_for_pixel();\n  }\n};\n\nOmniSciClient.prototype.send_get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\n  var params = {\n    session: session,\n    widget_id: widget_id,\n    pixel: pixel,\n    table_col_names: table_col_names,\n    column_format: column_format,\n    pixelRadius: pixelRadius,\n    nonce: nonce\n  };\n  var args = new OmniSci_get_result_row_for_pixel_args(params);\n  try {\n    this.output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_result_row_for_pixel();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_result_row_for_pixel = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_result_row_for_pixel_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_result_row_for_pixel failed: unknown result';\n};\n\nOmniSciClient.prototype.get_dashboard = function (session, dashboard_id, callback) {\n  this.send_get_dashboard(session, dashboard_id, callback);\n  if (!callback) {\n    return this.recv_get_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_get_dashboard = function (session, dashboard_id, callback) {\n  var params = {\n    session: session,\n    dashboard_id: dashboard_id\n  };\n  var args = new OmniSci_get_dashboard_args(params);\n  try {\n    this.output.writeMessageBegin('get_dashboard', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_dashboard();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_dashboard failed: unknown result';\n};\n\nOmniSciClient.prototype.get_dashboards = function (session, callback) {\n  this.send_get_dashboards(session, callback);\n  if (!callback) {\n    return this.recv_get_dashboards();\n  }\n};\n\nOmniSciClient.prototype.send_get_dashboards = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_dashboards_args(params);\n  try {\n    this.output.writeMessageBegin('get_dashboards', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_dashboards();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_dashboards = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_dashboards_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_dashboards failed: unknown result';\n};\n\nOmniSciClient.prototype.create_dashboard = function (session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback);\n  if (!callback) {\n    return this.recv_create_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_create_dashboard = function (session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {\n  var params = {\n    session: session,\n    dashboard_name: dashboard_name,\n    dashboard_state: dashboard_state,\n    image_hash: image_hash,\n    dashboard_metadata: dashboard_metadata\n  };\n  var args = new OmniSci_create_dashboard_args(params);\n  try {\n    this.output.writeMessageBegin('create_dashboard', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_create_dashboard();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_create_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_create_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'create_dashboard failed: unknown result';\n};\n\nOmniSciClient.prototype.replace_dashboard = function (session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {\n  this.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback);\n  if (!callback) {\n    this.recv_replace_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_replace_dashboard = function (session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {\n  var params = {\n    session: session,\n    dashboard_id: dashboard_id,\n    dashboard_name: dashboard_name,\n    dashboard_owner: dashboard_owner,\n    dashboard_state: dashboard_state,\n    image_hash: image_hash,\n    dashboard_metadata: dashboard_metadata\n  };\n  var args = new OmniSci_replace_dashboard_args(params);\n  try {\n    this.output.writeMessageBegin('replace_dashboard', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_replace_dashboard();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_replace_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_replace_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.delete_dashboard = function (session, dashboard_id, callback) {\n  this.send_delete_dashboard(session, dashboard_id, callback);\n  if (!callback) {\n    this.recv_delete_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_delete_dashboard = function (session, dashboard_id, callback) {\n  var params = {\n    session: session,\n    dashboard_id: dashboard_id\n  };\n  var args = new OmniSci_delete_dashboard_args(params);\n  try {\n    this.output.writeMessageBegin('delete_dashboard', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_delete_dashboard();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_delete_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_delete_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.share_dashboard = function (session, dashboard_id, groups, objects, permissions, grant_role, callback) {\n  this.send_share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role, callback);\n  if (!callback) {\n    this.recv_share_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_share_dashboard = function (session, dashboard_id, groups, objects, permissions, grant_role, callback) {\n  var params = {\n    session: session,\n    dashboard_id: dashboard_id,\n    groups: groups,\n    objects: objects,\n    permissions: permissions,\n    grant_role: grant_role\n  };\n  var args = new OmniSci_share_dashboard_args(params);\n  try {\n    this.output.writeMessageBegin('share_dashboard', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_share_dashboard();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_share_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_share_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.unshare_dashboard = function (session, dashboard_id, groups, objects, permissions, callback) {\n  this.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions, callback);\n  if (!callback) {\n    this.recv_unshare_dashboard();\n  }\n};\n\nOmniSciClient.prototype.send_unshare_dashboard = function (session, dashboard_id, groups, objects, permissions, callback) {\n  var params = {\n    session: session,\n    dashboard_id: dashboard_id,\n    groups: groups,\n    objects: objects,\n    permissions: permissions\n  };\n  var args = new OmniSci_unshare_dashboard_args(params);\n  try {\n    this.output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_unshare_dashboard();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_unshare_dashboard = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_unshare_dashboard_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.get_dashboard_grantees = function (session, dashboard_id, callback) {\n  this.send_get_dashboard_grantees(session, dashboard_id, callback);\n  if (!callback) {\n    return this.recv_get_dashboard_grantees();\n  }\n};\n\nOmniSciClient.prototype.send_get_dashboard_grantees = function (session, dashboard_id, callback) {\n  var params = {\n    session: session,\n    dashboard_id: dashboard_id\n  };\n  var args = new OmniSci_get_dashboard_grantees_args(params);\n  try {\n    this.output.writeMessageBegin('get_dashboard_grantees', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_dashboard_grantees();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_dashboard_grantees = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_dashboard_grantees_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_dashboard_grantees failed: unknown result';\n};\n\nOmniSciClient.prototype.get_link_view = function (session, link, callback) {\n  this.send_get_link_view(session, link, callback);\n  if (!callback) {\n    return this.recv_get_link_view();\n  }\n};\n\nOmniSciClient.prototype.send_get_link_view = function (session, link, callback) {\n  var params = {\n    session: session,\n    link: link\n  };\n  var args = new OmniSci_get_link_view_args(params);\n  try {\n    this.output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_link_view();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_link_view = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_link_view_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_link_view failed: unknown result';\n};\n\nOmniSciClient.prototype.create_link = function (session, view_state, view_metadata, callback) {\n  this.send_create_link(session, view_state, view_metadata, callback);\n  if (!callback) {\n    return this.recv_create_link();\n  }\n};\n\nOmniSciClient.prototype.send_create_link = function (session, view_state, view_metadata, callback) {\n  var params = {\n    session: session,\n    view_state: view_state,\n    view_metadata: view_metadata\n  };\n  var args = new OmniSci_create_link_args(params);\n  try {\n    this.output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_create_link();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_create_link = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_create_link_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'create_link failed: unknown result';\n};\n\nOmniSciClient.prototype.load_table_binary = function (session, table_name, rows, callback) {\n  this.send_load_table_binary(session, table_name, rows, callback);\n  if (!callback) {\n    this.recv_load_table_binary();\n  }\n};\n\nOmniSciClient.prototype.send_load_table_binary = function (session, table_name, rows, callback) {\n  var params = {\n    session: session,\n    table_name: table_name,\n    rows: rows\n  };\n  var args = new OmniSci_load_table_binary_args(params);\n  try {\n    this.output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_load_table_binary();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_load_table_binary = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_load_table_binary_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.load_table_binary_columnar = function (session, table_name, cols, callback) {\n  this.send_load_table_binary_columnar(session, table_name, cols, callback);\n  if (!callback) {\n    this.recv_load_table_binary_columnar();\n  }\n};\n\nOmniSciClient.prototype.send_load_table_binary_columnar = function (session, table_name, cols, callback) {\n  var params = {\n    session: session,\n    table_name: table_name,\n    cols: cols\n  };\n  var args = new OmniSci_load_table_binary_columnar_args(params);\n  try {\n    this.output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_load_table_binary_columnar();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_load_table_binary_columnar = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_load_table_binary_columnar_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.load_table_binary_arrow = function (session, table_name, arrow_stream, callback) {\n  this.send_load_table_binary_arrow(session, table_name, arrow_stream, callback);\n  if (!callback) {\n    this.recv_load_table_binary_arrow();\n  }\n};\n\nOmniSciClient.prototype.send_load_table_binary_arrow = function (session, table_name, arrow_stream, callback) {\n  var params = {\n    session: session,\n    table_name: table_name,\n    arrow_stream: arrow_stream\n  };\n  var args = new OmniSci_load_table_binary_arrow_args(params);\n  try {\n    this.output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_load_table_binary_arrow();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_load_table_binary_arrow = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_load_table_binary_arrow_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.load_table = function (session, table_name, rows, callback) {\n  this.send_load_table(session, table_name, rows, callback);\n  if (!callback) {\n    this.recv_load_table();\n  }\n};\n\nOmniSciClient.prototype.send_load_table = function (session, table_name, rows, callback) {\n  var params = {\n    session: session,\n    table_name: table_name,\n    rows: rows\n  };\n  var args = new OmniSci_load_table_args(params);\n  try {\n    this.output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_load_table();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_load_table = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_load_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.detect_column_types = function (session, file_name, copy_params, callback) {\n  this.send_detect_column_types(session, file_name, copy_params, callback);\n  if (!callback) {\n    return this.recv_detect_column_types();\n  }\n};\n\nOmniSciClient.prototype.send_detect_column_types = function (session, file_name, copy_params, callback) {\n  var params = {\n    session: session,\n    file_name: file_name,\n    copy_params: copy_params\n  };\n  var args = new OmniSci_detect_column_types_args(params);\n  try {\n    this.output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_detect_column_types();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_detect_column_types = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_detect_column_types_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'detect_column_types failed: unknown result';\n};\n\nOmniSciClient.prototype.create_table = function (session, table_name, row_desc, file_type, create_params, callback) {\n  this.send_create_table(session, table_name, row_desc, file_type, create_params, callback);\n  if (!callback) {\n    this.recv_create_table();\n  }\n};\n\nOmniSciClient.prototype.send_create_table = function (session, table_name, row_desc, file_type, create_params, callback) {\n  var params = {\n    session: session,\n    table_name: table_name,\n    row_desc: row_desc,\n    file_type: file_type,\n    create_params: create_params\n  };\n  var args = new OmniSci_create_table_args(params);\n  try {\n    this.output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_create_table();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_create_table = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_create_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.import_table = function (session, table_name, file_name, copy_params, callback) {\n  this.send_import_table(session, table_name, file_name, copy_params, callback);\n  if (!callback) {\n    this.recv_import_table();\n  }\n};\n\nOmniSciClient.prototype.send_import_table = function (session, table_name, file_name, copy_params, callback) {\n  var params = {\n    session: session,\n    table_name: table_name,\n    file_name: file_name,\n    copy_params: copy_params\n  };\n  var args = new OmniSci_import_table_args(params);\n  try {\n    this.output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_import_table();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_import_table = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_import_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.import_geo_table = function (session, table_name, file_name, copy_params, row_desc, create_params, callback) {\n  this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params, callback);\n  if (!callback) {\n    this.recv_import_geo_table();\n  }\n};\n\nOmniSciClient.prototype.send_import_geo_table = function (session, table_name, file_name, copy_params, row_desc, create_params, callback) {\n  var params = {\n    session: session,\n    table_name: table_name,\n    file_name: file_name,\n    copy_params: copy_params,\n    row_desc: row_desc,\n    create_params: create_params\n  };\n  var args = new OmniSci_import_geo_table_args(params);\n  try {\n    this.output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_import_geo_table();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_import_geo_table = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_import_geo_table_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.import_table_status = function (session, import_id, callback) {\n  this.send_import_table_status(session, import_id, callback);\n  if (!callback) {\n    return this.recv_import_table_status();\n  }\n};\n\nOmniSciClient.prototype.send_import_table_status = function (session, import_id, callback) {\n  var params = {\n    session: session,\n    import_id: import_id\n  };\n  var args = new OmniSci_import_table_status_args(params);\n  try {\n    this.output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_import_table_status();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_import_table_status = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_import_table_status_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'import_table_status failed: unknown result';\n};\n\nOmniSciClient.prototype.get_first_geo_file_in_archive = function (session, archive_path, copy_params, callback) {\n  this.send_get_first_geo_file_in_archive(session, archive_path, copy_params, callback);\n  if (!callback) {\n    return this.recv_get_first_geo_file_in_archive();\n  }\n};\n\nOmniSciClient.prototype.send_get_first_geo_file_in_archive = function (session, archive_path, copy_params, callback) {\n  var params = {\n    session: session,\n    archive_path: archive_path,\n    copy_params: copy_params\n  };\n  var args = new OmniSci_get_first_geo_file_in_archive_args(params);\n  try {\n    this.output.writeMessageBegin('get_first_geo_file_in_archive', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_first_geo_file_in_archive();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_first_geo_file_in_archive = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_first_geo_file_in_archive_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_first_geo_file_in_archive failed: unknown result';\n};\n\nOmniSciClient.prototype.get_all_files_in_archive = function (session, archive_path, copy_params, callback) {\n  this.send_get_all_files_in_archive(session, archive_path, copy_params, callback);\n  if (!callback) {\n    return this.recv_get_all_files_in_archive();\n  }\n};\n\nOmniSciClient.prototype.send_get_all_files_in_archive = function (session, archive_path, copy_params, callback) {\n  var params = {\n    session: session,\n    archive_path: archive_path,\n    copy_params: copy_params\n  };\n  var args = new OmniSci_get_all_files_in_archive_args(params);\n  try {\n    this.output.writeMessageBegin('get_all_files_in_archive', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_all_files_in_archive();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_all_files_in_archive = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_all_files_in_archive_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_all_files_in_archive failed: unknown result';\n};\n\nOmniSciClient.prototype.get_layers_in_geo_file = function (session, file_name, copy_params, callback) {\n  this.send_get_layers_in_geo_file(session, file_name, copy_params, callback);\n  if (!callback) {\n    return this.recv_get_layers_in_geo_file();\n  }\n};\n\nOmniSciClient.prototype.send_get_layers_in_geo_file = function (session, file_name, copy_params, callback) {\n  var params = {\n    session: session,\n    file_name: file_name,\n    copy_params: copy_params\n  };\n  var args = new OmniSci_get_layers_in_geo_file_args(params);\n  try {\n    this.output.writeMessageBegin('get_layers_in_geo_file', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_layers_in_geo_file();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_layers_in_geo_file = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_layers_in_geo_file_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_layers_in_geo_file failed: unknown result';\n};\n\nOmniSciClient.prototype.check_table_consistency = function (session, table_id, callback) {\n  this.send_check_table_consistency(session, table_id, callback);\n  if (!callback) {\n    return this.recv_check_table_consistency();\n  }\n};\n\nOmniSciClient.prototype.send_check_table_consistency = function (session, table_id, callback) {\n  var params = {\n    session: session,\n    table_id: table_id\n  };\n  var args = new OmniSci_check_table_consistency_args(params);\n  try {\n    this.output.writeMessageBegin('check_table_consistency', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_check_table_consistency();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_check_table_consistency = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_check_table_consistency_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'check_table_consistency failed: unknown result';\n};\n\nOmniSciClient.prototype.start_query = function (leaf_session, parent_session, query_ra, just_explain, callback) {\n  this.send_start_query(leaf_session, parent_session, query_ra, just_explain, callback);\n  if (!callback) {\n    return this.recv_start_query();\n  }\n};\n\nOmniSciClient.prototype.send_start_query = function (leaf_session, parent_session, query_ra, just_explain, callback) {\n  var params = {\n    leaf_session: leaf_session,\n    parent_session: parent_session,\n    query_ra: query_ra,\n    just_explain: just_explain\n  };\n  var args = new OmniSci_start_query_args(params);\n  try {\n    this.output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_start_query();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_start_query = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_start_query_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'start_query failed: unknown result';\n};\n\nOmniSciClient.prototype.execute_query_step = function (pending_query, callback) {\n  this.send_execute_query_step(pending_query, callback);\n  if (!callback) {\n    return this.recv_execute_query_step();\n  }\n};\n\nOmniSciClient.prototype.send_execute_query_step = function (pending_query, callback) {\n  var params = {\n    pending_query: pending_query\n  };\n  var args = new OmniSci_execute_query_step_args(params);\n  try {\n    this.output.writeMessageBegin('execute_query_step', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_execute_query_step();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_execute_query_step = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_execute_query_step_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'execute_query_step failed: unknown result';\n};\n\nOmniSciClient.prototype.broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, callback) {\n  this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, callback);\n  if (!callback) {\n    this.recv_broadcast_serialized_rows();\n  }\n};\n\nOmniSciClient.prototype.send_broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, callback) {\n  var params = {\n    serialized_rows: serialized_rows,\n    row_desc: row_desc,\n    query_id: query_id\n  };\n  var args = new OmniSci_broadcast_serialized_rows_args(params);\n  try {\n    this.output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_broadcast_serialized_rows();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_broadcast_serialized_rows = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_broadcast_serialized_rows_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.start_render_query = function (session, widget_id, node_idx, vega_json, callback) {\n  this.send_start_render_query(session, widget_id, node_idx, vega_json, callback);\n  if (!callback) {\n    return this.recv_start_render_query();\n  }\n};\n\nOmniSciClient.prototype.send_start_render_query = function (session, widget_id, node_idx, vega_json, callback) {\n  var params = {\n    session: session,\n    widget_id: widget_id,\n    node_idx: node_idx,\n    vega_json: vega_json\n  };\n  var args = new OmniSci_start_render_query_args(params);\n  try {\n    this.output.writeMessageBegin('start_render_query', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_start_render_query();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_start_render_query = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_start_render_query_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'start_render_query failed: unknown result';\n};\n\nOmniSciClient.prototype.execute_next_render_step = function (pending_render, merged_data, callback) {\n  this.send_execute_next_render_step(pending_render, merged_data, callback);\n  if (!callback) {\n    return this.recv_execute_next_render_step();\n  }\n};\n\nOmniSciClient.prototype.send_execute_next_render_step = function (pending_render, merged_data, callback) {\n  var params = {\n    pending_render: pending_render,\n    merged_data: merged_data\n  };\n  var args = new OmniSci_execute_next_render_step_args(params);\n  try {\n    this.output.writeMessageBegin('execute_next_render_step', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_execute_next_render_step();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_execute_next_render_step = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_execute_next_render_step_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'execute_next_render_step failed: unknown result';\n};\n\nOmniSciClient.prototype.insert_data = function (session, insert_data, callback) {\n  this.send_insert_data(session, insert_data, callback);\n  if (!callback) {\n    this.recv_insert_data();\n  }\n};\n\nOmniSciClient.prototype.send_insert_data = function (session, insert_data, callback) {\n  var params = {\n    session: session,\n    insert_data: insert_data\n  };\n  var args = new OmniSci_insert_data_args(params);\n  try {\n    this.output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_insert_data();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_insert_data = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_insert_data_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.checkpoint = function (session, db_id, table_id, callback) {\n  this.send_checkpoint(session, db_id, table_id, callback);\n  if (!callback) {\n    this.recv_checkpoint();\n  }\n};\n\nOmniSciClient.prototype.send_checkpoint = function (session, db_id, table_id, callback) {\n  var params = {\n    session: session,\n    db_id: db_id,\n    table_id: table_id\n  };\n  var args = new OmniSci_checkpoint_args(params);\n  try {\n    this.output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_checkpoint();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_checkpoint = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_checkpoint_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};\n\nOmniSciClient.prototype.get_roles = function (session, callback) {\n  this.send_get_roles(session, callback);\n  if (!callback) {\n    return this.recv_get_roles();\n  }\n};\n\nOmniSciClient.prototype.send_get_roles = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_roles_args(params);\n  try {\n    this.output.writeMessageBegin('get_roles', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_roles();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_roles = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_roles_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_roles failed: unknown result';\n};\n\nOmniSciClient.prototype.get_db_objects_for_grantee = function (session, roleName, callback) {\n  this.send_get_db_objects_for_grantee(session, roleName, callback);\n  if (!callback) {\n    return this.recv_get_db_objects_for_grantee();\n  }\n};\n\nOmniSciClient.prototype.send_get_db_objects_for_grantee = function (session, roleName, callback) {\n  var params = {\n    session: session,\n    roleName: roleName\n  };\n  var args = new OmniSci_get_db_objects_for_grantee_args(params);\n  try {\n    this.output.writeMessageBegin('get_db_objects_for_grantee', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_db_objects_for_grantee();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_db_objects_for_grantee = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_db_objects_for_grantee_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_db_objects_for_grantee failed: unknown result';\n};\n\nOmniSciClient.prototype.get_db_object_privs = function (session, objectName, type, callback) {\n  this.send_get_db_object_privs(session, objectName, type, callback);\n  if (!callback) {\n    return this.recv_get_db_object_privs();\n  }\n};\n\nOmniSciClient.prototype.send_get_db_object_privs = function (session, objectName, type, callback) {\n  var params = {\n    session: session,\n    objectName: objectName,\n    type: type\n  };\n  var args = new OmniSci_get_db_object_privs_args(params);\n  try {\n    this.output.writeMessageBegin('get_db_object_privs', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_db_object_privs();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_db_object_privs = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_db_object_privs_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_db_object_privs failed: unknown result';\n};\n\nOmniSciClient.prototype.get_all_roles_for_user = function (session, userName, callback) {\n  this.send_get_all_roles_for_user(session, userName, callback);\n  if (!callback) {\n    return this.recv_get_all_roles_for_user();\n  }\n};\n\nOmniSciClient.prototype.send_get_all_roles_for_user = function (session, userName, callback) {\n  var params = {\n    session: session,\n    userName: userName\n  };\n  var args = new OmniSci_get_all_roles_for_user_args(params);\n  try {\n    this.output.writeMessageBegin('get_all_roles_for_user', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_all_roles_for_user();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_all_roles_for_user = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_all_roles_for_user_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_all_roles_for_user failed: unknown result';\n};\n\nOmniSciClient.prototype.has_role = function (session, granteeName, roleName, callback) {\n  this.send_has_role(session, granteeName, roleName, callback);\n  if (!callback) {\n    return this.recv_has_role();\n  }\n};\n\nOmniSciClient.prototype.send_has_role = function (session, granteeName, roleName, callback) {\n  var params = {\n    session: session,\n    granteeName: granteeName,\n    roleName: roleName\n  };\n  var args = new OmniSci_has_role_args(params);\n  try {\n    this.output.writeMessageBegin('has_role', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_has_role();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_has_role = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_has_role_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'has_role failed: unknown result';\n};\n\nOmniSciClient.prototype.has_object_privilege = function (session, granteeName, ObjectName, objectType, permissions, callback) {\n  this.send_has_object_privilege(session, granteeName, ObjectName, objectType, permissions, callback);\n  if (!callback) {\n    return this.recv_has_object_privilege();\n  }\n};\n\nOmniSciClient.prototype.send_has_object_privilege = function (session, granteeName, ObjectName, objectType, permissions, callback) {\n  var params = {\n    session: session,\n    granteeName: granteeName,\n    ObjectName: ObjectName,\n    objectType: objectType,\n    permissions: permissions\n  };\n  var args = new OmniSci_has_object_privilege_args(params);\n  try {\n    this.output.writeMessageBegin('has_object_privilege', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_has_object_privilege();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_has_object_privilege = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_has_object_privilege_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'has_object_privilege failed: unknown result';\n};\n\nOmniSciClient.prototype.set_license_key = function (session, key, nonce, callback) {\n  this.send_set_license_key(session, key, nonce, callback);\n  if (!callback) {\n    return this.recv_set_license_key();\n  }\n};\n\nOmniSciClient.prototype.send_set_license_key = function (session, key, nonce, callback) {\n  var params = {\n    session: session,\n    key: key,\n    nonce: nonce\n  };\n  var args = new OmniSci_set_license_key_args(params);\n  try {\n    this.output.writeMessageBegin('set_license_key', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_set_license_key();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_set_license_key = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_set_license_key_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'set_license_key failed: unknown result';\n};\n\nOmniSciClient.prototype.get_license_claims = function (session, nonce, callback) {\n  this.send_get_license_claims(session, nonce, callback);\n  if (!callback) {\n    return this.recv_get_license_claims();\n  }\n};\n\nOmniSciClient.prototype.send_get_license_claims = function (session, nonce, callback) {\n  var params = {\n    session: session,\n    nonce: nonce\n  };\n  var args = new OmniSci_get_license_claims_args(params);\n  try {\n    this.output.writeMessageBegin('get_license_claims', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_license_claims();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_license_claims = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_license_claims_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_license_claims failed: unknown result';\n};\n\nOmniSciClient.prototype.get_device_parameters = function (session, callback) {\n  this.send_get_device_parameters(session, callback);\n  if (!callback) {\n    return this.recv_get_device_parameters();\n  }\n};\n\nOmniSciClient.prototype.send_get_device_parameters = function (session, callback) {\n  var params = {\n    session: session\n  };\n  var args = new OmniSci_get_device_parameters_args(params);\n  try {\n    this.output.writeMessageBegin('get_device_parameters', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_get_device_parameters();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_get_device_parameters = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_get_device_parameters_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  if (null !== result.success) {\n    return result.success;\n  }\n  throw 'get_device_parameters failed: unknown result';\n};\n\nOmniSciClient.prototype.register_runtime_extension_functions = function (session, udfs, udtfs, device_ir_map, callback) {\n  this.send_register_runtime_extension_functions(session, udfs, udtfs, device_ir_map, callback);\n  if (!callback) {\n    this.recv_register_runtime_extension_functions();\n  }\n};\n\nOmniSciClient.prototype.send_register_runtime_extension_functions = function (session, udfs, udtfs, device_ir_map, callback) {\n  var params = {\n    session: session,\n    udfs: udfs,\n    udtfs: udtfs,\n    device_ir_map: device_ir_map\n  };\n  var args = new OmniSci_register_runtime_extension_functions_args(params);\n  try {\n    this.output.writeMessageBegin('register_runtime_extension_functions', Thrift.MessageType.CALL, this.seqid);\n    args.write(this.output);\n    this.output.writeMessageEnd();\n    if (callback) {\n      var self = this;\n      this.output.getTransport().flush(true, function () {\n        var result = null;\n        try {\n          result = self.recv_register_runtime_extension_functions();\n        } catch (e) {\n          result = e;\n        }\n        callback(result);\n      });\n    } else {\n      return this.output.getTransport().flush();\n    }\n  } catch (e) {\n    if (typeof this.output.getTransport().reset === 'function') {\n      this.output.getTransport().reset();\n    }\n    throw e;\n  }\n};\n\nOmniSciClient.prototype.recv_register_runtime_extension_functions = function () {\n  var ret = this.input.readMessageBegin();\n  var mtype = ret.mtype;\n  if (mtype == Thrift.MessageType.EXCEPTION) {\n    var x = new Thrift.TApplicationException();\n    x.read(this.input);\n    this.input.readMessageEnd();\n    throw x;\n  }\n  var result = new OmniSci_register_runtime_extension_functions_result();\n  result.read(this.input);\n  this.input.readMessageEnd();\n\n  if (null !== result.e) {\n    throw result.e;\n  }\n  return;\n};"

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2)(__webpack_require__(13))

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	module.exports = "\"use strict\";\n//\n// Autogenerated by Thrift Compiler (0.13.0)\n//\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n//\n\nif (typeof Int64 === 'undefined' && typeof require === 'function') {\n  var Int64 = require('node-int64');\n}\n\nwindow.TCompletionHintType = {\n  'COLUMN': 0,\n  'TABLE': 1,\n  'VIEW': 2,\n  'SCHEMA': 3,\n  'CATALOG': 4,\n  'REPOSITORY': 5,\n  'FUNCTION': 6,\n  'KEYWORD': 7\n};\nwindow.TCompletionHint = function (args) {\n  this.type = null;\n  this.hints = null;\n  this.replaced = null;\n  if (args) {\n    if (args.type !== undefined && args.type !== null) {\n      this.type = args.type;\n    }\n    if (args.hints !== undefined && args.hints !== null) {\n      this.hints = Thrift.copyList(args.hints, [null]);\n    }\n    if (args.replaced !== undefined && args.replaced !== null) {\n      this.replaced = args.replaced;\n    }\n  }\n};\nTCompletionHint.prototype = {};\nTCompletionHint.prototype.read = function (input) {\n  input.readStructBegin();\n  while (true) {\n    var ret = input.readFieldBegin();\n    var ftype = ret.ftype;\n    var fid = ret.fid;\n    if (ftype == Thrift.Type.STOP) {\n      break;\n    }\n    switch (fid) {\n      case 1:\n        if (ftype == Thrift.Type.I32) {\n          this.type = input.readI32().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 2:\n        if (ftype == Thrift.Type.LIST) {\n          this.hints = [];\n          var _rtmp31 = input.readListBegin();\n          var _size0 = _rtmp31.size || 0;\n          for (var _i2 = 0; _i2 < _size0; ++_i2) {\n            var elem3 = null;\n            elem3 = input.readString().value;\n            this.hints.push(elem3);\n          }\n          input.readListEnd();\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      case 3:\n        if (ftype == Thrift.Type.STRING) {\n          this.replaced = input.readString().value;\n        } else {\n          input.skip(ftype);\n        }\n        break;\n      default:\n        input.skip(ftype);\n    }\n    input.readFieldEnd();\n  }\n  input.readStructEnd();\n  return;\n};\n\nTCompletionHint.prototype.write = function (output) {\n  output.writeStructBegin('TCompletionHint');\n  if (this.type !== null && this.type !== undefined) {\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n    output.writeI32(this.type);\n    output.writeFieldEnd();\n  }\n  if (this.hints !== null && this.hints !== undefined) {\n    output.writeFieldBegin('hints', Thrift.Type.LIST, 2);\n    output.writeListBegin(Thrift.Type.STRING, this.hints.length);\n    for (var iter4 in this.hints) {\n      if (this.hints.hasOwnProperty(iter4)) {\n        iter4 = this.hints[iter4];\n        output.writeString(iter4);\n      }\n    }\n    output.writeListEnd();\n    output.writeFieldEnd();\n  }\n  if (this.replaced !== null && this.replaced !== undefined) {\n    output.writeFieldBegin('replaced', Thrift.Type.STRING, 3);\n    output.writeString(this.replaced);\n    output.writeFieldEnd();\n  }\n  output.writeFieldStop();\n  output.writeStructEnd();\n  return;\n};"

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _helpers = __webpack_require__(16);

	var helpers = _interopRequireWildcard(_helpers);

	var _ramda = __webpack_require__(17);

	var _ramda2 = _interopRequireDefault(_ramda);

	var _eventemitter = __webpack_require__(19);

	var _eventemitter2 = _interopRequireDefault(_eventemitter);

	var _mapdClientV = __webpack_require__(20);

	var _mapdClientV2 = _interopRequireDefault(_mapdClientV);

	var _processQueryResults = __webpack_require__(23);

	var _processQueryResults2 = _interopRequireDefault(_processQueryResults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* global TCreateParams: false, TDashboardPermissions: false, TDBObjectType: false, TDBObjectPermissions: false, TDatabasePermissions: false */

	var _ref = isNodeRuntime() && __webpack_require__(22) || window,
	    TDatumType = _ref.TDatumType,
	    TEncodingType = _ref.TEncodingType; // eslint-disable-line global-require


	var _ref2 = isNodeRuntime() && __webpack_require__(22) || window,
	    TPixel = _ref2.TPixel,
	    TOmniSciException = _ref2.TOmniSciException; // eslint-disable-line global-require


	var MapDThrift = isNodeRuntime() && __webpack_require__(22); // eslint-disable-line global-require
	var Thrift = isNodeRuntime() && __webpack_require__(22) || window.Thrift; // eslint-disable-line global-require
	var thriftWrapper = Thrift;
	var parseUrl = isNodeRuntime() && __webpack_require__(22).parse; // eslint-disable-line global-require
	if (isNodeRuntime()) {
	  // Because browser Thrift and Node Thrift are exposed slightly differently.
	  Thrift = Thrift.Thrift;
	  Thrift.Transport = thriftWrapper.TBufferedTransport;
	  Thrift.Protocol = thriftWrapper.TJSONProtocol;
	}

	var COMPRESSION_LEVEL_DEFAULT = 3;

	function arrayify(maybeArray) {
	  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];
	}

	function isNodeRuntime() {
	  return typeof window === "undefined";
	}

	var MapdCon = function () {
	  function MapdCon() {
	    var _this = this;

	    _classCallCheck(this, MapdCon);

	    this.connectAsync = function () {
	      return new Promise(function (resolve, reject) {
	        _this.connect(function (error, con) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(con);
	          }
	        });
	      });
	    };

	    this.updateQueryTimes = function (conId, queryId, estimatedQueryTime, execution_time_ms) {
	      _this.queryTimes[queryId] = execution_time_ms;
	    };

	    this.events = new _eventemitter2.default();
	    this.EVENT_NAMES = {
	      ERROR: "error",
	      METHOD_CALLED: "method-called"

	      // ** Method wrappers **

	    };

	    this.handleErrors = function (method) {
	      return function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        return new Promise(function (resolve, reject) {
	          var success = function success(result) {
	            return resolve(result);
	          };
	          var failure = function failure(error) {
	            _this.events.emit(_this.EVENT_NAMES.ERROR, error);
	            return reject(error);
	          };

	          var promise = method.apply(_this, args);

	          promise.then(success).catch(function (error) {
	            return failure(error);
	          });
	        });
	      };
	    };

	    this.promisifyThriftMethodNode = function (client, sessionId, methodName, args) {
	      return new Promise(function (resolve, reject) {
	        client[methodName].apply(client, [sessionId].concat(args, function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        }));
	      });
	    };

	    this.promisifyThriftMethodBrowser = function (client, sessionId, methodName, args) {
	      return new Promise(function (resolve, reject) {
	        _this.events.emit(_this.EVENT_NAMES.METHOD_CALLED, methodName);
	        client[methodName].apply(client, [sessionId].concat(args, function (result) {
	          if (result instanceof Error) {
	            reject(result);
	          } else {
	            resolve(result);
	          }
	        }));
	      });
	    };

	    this.promisifyThriftMethod = isNodeRuntime() ? this.promisifyThriftMethodNode : this.promisifyThriftMethodBrowser;
	    this.overSingleClient = "SINGLE_CLIENT";
	    this.overAllClients = "ALL_CLIENTS";

	    this.wrapThrift = function (methodName, overClients, processArgs) {
	      return function () {
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        if (_this._sessionId) {
	          var processedArgs = processArgs(args);

	          if (overClients === _this.overSingleClient) {
	            return _this.promisifyThriftMethod(_this._client[0], _this._sessionId[0], methodName, processedArgs);
	          } else {
	            return Promise.all(_this._client.map(function (client, index) {
	              return _this.promisifyThriftMethod(client, _this._sessionId[index], methodName, processedArgs);
	            }));
	          }
	        } else {
	          return Promise.reject(new Error("You are not connected to a server. Try running the connect method first."));
	        }
	      };
	    };

	    this.getStatus = function (callback) {
	      _this._client[0].get_status(_this._sessionId[0], callback);
	    };

	    this.getStatusAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getStatus(function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    });

	    this.getHardwareInfo = function (callback) {
	      _this._client[0].get_hardware_info(_this._sessionId[0], callback);
	    };

	    this.getHardwareInfoAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getHardwareInfo(function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    });
	    this.getFirstGeoFileInArchiveAsync = this.handleErrors(this.wrapThrift("get_first_geo_file_in_archive", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getUsersAsync = this.handleErrors(this.wrapThrift("get_users", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.importTableStatusAsync = this.handleErrors(this.wrapThrift("import_table_status", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getRolesAsync = this.handleErrors(this.wrapThrift("get_roles", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getDashboardsAsync = this.handleErrors(this.wrapThrift("get_dashboards", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getDashboardAsync = this.handleErrors(this.wrapThrift("get_dashboard", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.createDashboardAsync = this.handleErrors(this.wrapThrift("create_dashboard", this.overAllClients, function (args) {
	      return args;
	    }));
	    this.replaceDashboardAsync = this.handleErrors(this.wrapThrift("replace_dashboard", this.overAllClients, function (args) {
	      return args;
	    }));
	    this.deleteDashboardAsync = this.handleErrors(this.wrapThrift("delete_dashboard", this.overAllClients, function (args) {
	      return args;
	    }));
	    this.shareDashboardAsync = this.handleErrors(this.wrapThrift("share_dashboard", this.overAllClients, function (_ref3) {
	      var _ref4 = _slicedToArray(_ref3, 4),
	          dashboardId = _ref4[0],
	          groups = _ref4[1],
	          objects = _ref4[2],
	          permissions = _ref4[3];

	      return [dashboardId, groups, objects, new TDashboardPermissions(permissions)];
	    }));
	    this.unshareDashboardAsync = this.handleErrors(this.wrapThrift("unshare_dashboard", this.overAllClients, function (_ref5) {
	      var _ref6 = _slicedToArray(_ref5, 4),
	          dashboardId = _ref6[0],
	          groups = _ref6[1],
	          objects = _ref6[2],
	          permissions = _ref6[3];

	      return [dashboardId, groups, objects, new TDashboardPermissions(permissions)];
	    }));
	    this.getDashboardGranteesAsync = this.handleErrors(this.wrapThrift("get_dashboard_grantees", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getDbObjectsForGranteeAsync = this.handleErrors(this.wrapThrift("get_db_objects_for_grantee", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.getDbObjectPrivsAsync = this.handleErrors(this.wrapThrift("get_db_object_privs", this.overSingleClient, function (_ref7) {
	      var _ref8 = _slicedToArray(_ref7, 2),
	          objectName = _ref8[0],
	          type = _ref8[1];

	      return [objectName, TDBObjectType[type]];
	    }));
	    this.getAllRolesForUserAsync = this.handleErrors(this.wrapThrift("get_all_roles_for_user", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.hasObjectPrivilegesAsync = this.handleErrors(this.wrapThrift("has_object_privilege", this.overSingleClient, function (_ref9) {
	      var _ref10 = _slicedToArray(_ref9, 4),
	          granteeName = _ref10[0],
	          objectName = _ref10[1],
	          objectType = _ref10[2],
	          permissions = _ref10[3];

	      return [granteeName, objectName, objectType, permissions];
	    }));

	    this.hasDbPrivilegesAsync = function (granteeName, dbName, dbPrivs) {
	      return _this.hasObjectPrivilegesAsync(granteeName, dbName, TDBObjectType.DatabaseDBObjectType, new TDBObjectPermissions({
	        database_permissions_: new TDatabasePermissions(dbPrivs)
	      }));
	    };

	    this.getSessionInfoAsync = this.handleErrors(this.wrapThrift("get_session_info", this.overSingleClient, function (args) {
	      return args;
	    }));
	    this.detectColumnTypesAsync = this.handleErrors(function (fileName, copyParams) {
	      return new Promise(function (resolve, reject) {
	        _this.detectColumnTypes.bind(_this, fileName, copyParams)(function (err, res) {
	          if (err) {
	            reject(err);
	          } else {
	            _this.importerRowDesc = res.row_set.row_desc;
	            resolve(res);
	          }
	        });
	      });
	    });
	    this.queryCache = {};
	    this.queryCacheTransient = true;

	    this.setQueryCacheTransient = function (value) {
	      if (value) {
	        // Reset and clear out any nontransient entries
	        _this.queryCache = {};
	      }
	      _this.queryCacheTransient = value;
	    };

	    this.clonePromise = function (promise) {
	      return new Promise(function (resolve, reject) {
	        promise.then(function (result) {
	          resolve((0, _ramda2.default)(result));
	        }).catch(function (error) {
	          reject(error);
	        });
	      });
	    };

	    this.queryAsync = this.handleErrors(function (query, options) {
	      var cacheEntry = _this.queryCache[query];

	      if (cacheEntry) {
	        return _this.clonePromise(cacheEntry);
	      } else {
	        var queryPromise = new Promise(function (resolve, reject) {
	          _this.events.emit(_this.EVENT_NAMES.METHOD_CALLED, "sql_execute");
	          _this.query(query, options, function (error, result) {
	            if (_this.queryCacheTransient) {
	              delete _this.queryCache[query];
	            }

	            if (error) {
	              reject(error);
	            } else {
	              resolve(result);
	            }
	          });
	        });

	        _this.queryCache[query] = queryPromise;

	        return _this.clonePromise(queryPromise);
	      }
	    });
	    this.validateQuery = this.handleErrors(function (query) {
	      return new Promise(function (resolve, reject) {
	        _this._client[0].sql_validate(_this._sessionId[0], query, function (error, res) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(_this.convertFromThriftTypes(res));
	          }
	        });
	      });
	    });
	    this.getTablesAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getTables.bind(_this)(function (error, tables) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(tables);
	          }
	        });
	      });
	    });
	    this.getTablesWithMetaAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getTablesWithMeta.bind(_this)(function (error, tables) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(tables);
	          }
	        });
	      });
	    });
	    this.getTablesMetaAsync = this.handleErrors(function () {
	      return new Promise(function (resolve, reject) {
	        _this.getTablesMeta.bind(_this)(function (error, tables) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(tables);
	          }
	        });
	      });
	    });
	    this.getFieldsAsync = this.handleErrors(function (tableName) {
	      return new Promise(function (resolve, reject) {
	        _this.getFields(tableName, function (error, fields) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(fields);
	          }
	        });
	      });
	    });
	    this.createTableAsync = this.handleErrors(function (tableName, rowDescObj, tableType, createParams) {
	      return new Promise(function (resolve, reject) {
	        _this.createTable(tableName, rowDescObj, tableType, createParams, function (err) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve();
	          }
	        });
	      });
	    });
	    this.importTableAsync = this.handleErrors(this.importTableAsyncWrapper(false));
	    this.importTableGeoAsync = this.handleErrors(this.importTableAsyncWrapper(true));
	    this.renderVegaAsync = this.handleErrors(function (widgetid, vega, options) {
	      return new Promise(function (resolve, reject) {
	        _this.renderVega(widgetid, vega, options, function (error, result) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    });
	    this.getResultRowForPixelAsync = this.handleErrors(function (widgetId, pixel, tableColNamesMap) {
	      var pixelRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
	      return new Promise(function (resolve, reject) {
	        _this.getResultRowForPixel(widgetId, pixel, tableColNamesMap, pixelRadius, function (error, result) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(result);
	          }
	        });
	      });
	    });

	    this._host = null;
	    this._user = null;
	    this._password = null;
	    this._port = null;
	    this._dbName = null;
	    this._client = null;
	    this._sessionId = null;
	    this._protocol = null;
	    this._disableAutoReconnect = false;
	    this._datumEnum = {};
	    this._logging = false;
	    this._platform = "mapd";
	    this._nonce = 0;
	    this._balanceStrategy = "adaptive";
	    this._numConnections = 0;
	    this._lastRenderCon = 0;
	    this.queryTimes = {};
	    this.serverQueueTimes = null;
	    this.serverPingTimes = null;
	    this.pingCount = null;
	    this.DEFAULT_QUERY_TIME = 50;
	    this.NUM_PINGS_PER_SERVER = 4;
	    this.importerRowDesc = null;

	    // invoke initialization methods
	    this.invertDatumTypes();

	    this.processResults = function () {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var result = arguments[1];
	      var error = arguments[2];
	      var callback = arguments[3];

	      if (error) {
	        if (_this._logging && options.query) {
	          console.error(options.query, "\n", error);
	        }
	        callback(error);
	      } else {
	        var processor = (0, _processQueryResults2.default)(_this._logging, _this.updateQueryTimes);
	        var processResultsObject = processor(options, _this._datumEnum, result, callback);
	        return processResultsObject;
	      }
	    };

	    // return this to allow chaining off of instantiation
	    return this;
	  }

	  _createClass(MapdCon, [{
	    key: "xhrWithCredentials",
	    value: function xhrWithCredentials(enabled) {
	      Thrift.xhrWithCredentials = enabled;
	    }

	    /**
	     * Initializes the connector for use. This is similar to `connect()`, but stops short of
	     * actually connecting to the server.
	     *
	     * @return {MapdCon} Object.
	     */

	  }, {
	    key: "initClients",
	    value: function initClients() {
	      var allAreArrays = Array.isArray(this._host) && Array.isArray(this._port) && Array.isArray(this._dbName);
	      if (!allAreArrays) {
	        throw new Error("Host, port, and dbName must be arrays.");
	      }

	      this._client = [];
	      this._sessionId = [];

	      if (!this._host[0]) {
	        throw new Error("Please enter a host name.");
	      } else if (!this._port[0]) {
	        throw new Error("Please enter a port.");
	      }

	      // now check to see if length of all arrays are the same and > 0
	      var hostLength = this._host.length;
	      if (hostLength < 1) {
	        throw new Error("Must have at least one server to connect to.");
	      }
	      if (hostLength !== this._port.length) {
	        throw new Error("Array connection parameters must be of equal length.");
	      }

	      if (!this._protocol) {
	        this._protocol = this._host.map(function () {
	          return window.location.protocol.replace(":", "");
	        });
	      }

	      var transportUrls = this.getEndpoints();
	      var clients = [];

	      for (var h = 0; h < hostLength; h++) {
	        var client = null;

	        if (isNodeRuntime()) {
	          var _parseUrl = parseUrl(transportUrls[h]),
	              protocol = _parseUrl.protocol,
	              hostname = _parseUrl.hostname,
	              port = _parseUrl.port;

	          var connection = thriftWrapper.createHttpConnection(hostname, port, {
	            transport: thriftWrapper.TBufferedTransport,
	            protocol: thriftWrapper.TJSONProtocol,
	            path: "/",
	            headers: { Connection: "close" },
	            https: protocol === "https:"
	          });
	          connection.on("error", console.error); // eslint-disable-line no-console
	          client = thriftWrapper.createClient(MapDThrift, connection);
	          resetThriftClientOnArgumentErrorForMethods(this, client, ["connect", "createTableAsync", "dbName", "detectColumnTypesAsync", "disconnect", "getCompletionHintsAsync", "getFields", "getDashboardAsync", "getDashboardsAsync", "getResultRowForPixel", "getStatusAsync", "getTablesAsync", "getTablesWithMetaAsync", "host", "importTableAsync", "importTableGeoAsync", "logging", "password", "port", "protocol", "query", "renderVega", "sessionId", "user", "validateQuery"]);
	          clients.push(client);
	        } else {
	          var thriftTransport = new Thrift.Transport(transportUrls[h]);
	          var thriftProtocol = new Thrift.Protocol(thriftTransport);
	          clients.push(new _mapdClientV2.default(thriftProtocol));
	        }
	      }
	      this._client = clients;
	      this._numConnections = this._client.length;
	      return this;
	    }

	    /**
	     * Create a connection to the MapD server, generating a client and session ID.
	     * @param {Function} callback A callback that takes `(err, success)` as its signature.  Returns con singleton if successful.
	     * @return {MapdCon} Object.
	     *
	     * @example <caption>Connect to a MapD server:</caption>
	     * var con = new MapdCon()
	     *   .host('localhost')
	     *   .port('8080')
	     *   .dbName('myDatabase')
	     *   .user('foo')
	     *   .password('bar')
	     *   .connect((err, con) => console.log(con.sessionId()));
	     *
	     *   // ["om9E9Ujgbhl6wIzWgLENncjWsaXRDYLy"]
	     */

	  }, {
	    key: "connect",
	    value: function connect(callback) {
	      var _this2 = this;

	      if (!Array.isArray(this._user) || !Array.isArray(this._password)) {
	        return callback("Username and password must be arrays.");
	      }

	      if (!this._dbName[0]) {
	        throw new Error("Please enter a database.");
	      } else if (!this._user[0]) {
	        return callback("Please enter a username.");
	      } else if (!this._password[0]) {
	        return callback("Please enter a password.");
	      }

	      // now check to see if length of all arrays are the same and > 0
	      var hostLength = this._host.length;
	      if (hostLength < 1) {
	        return callback("Must have at least one server to connect to.");
	      }
	      if (hostLength !== this._port.length || hostLength !== this._user.length || hostLength !== this._password.length || hostLength !== this._dbName.length) {
	        return callback("Array connection parameters must be of equal length.");
	      }

	      var clients = [];
	      // eslint-disable-next-line no-restricted-syntax
	      try {
	        this.initClients();
	        clients = this._client;
	        // Reset the client property, so we can add only the ones that we can connect to below
	        this._client = [];
	      } catch (e) {
	        return callback(e.message);
	      }

	      var _loop = function _loop(h) {
	        var client = clients[h];

	        client.connect(_this2._user[h], _this2._password[h], _this2._dbName[h], function (error, sessionId) {
	          if (error) {
	            callback(error);
	            return;
	          }
	          _this2._client.push(client);
	          _this2._sessionId.push(sessionId);
	          callback(null, _this2);
	        });
	      };

	      for (var h = 0; h < clients.length; h++) {
	        _loop(h);
	      }

	      return this;
	    }
	  }, {
	    key: "convertFromThriftTypes",
	    value: function convertFromThriftTypes(fields) {
	      var fieldsArray = [];
	      // silly to change this from map to array
	      // - then later it turns back to map
	      for (var key in fields) {
	        if (fields.hasOwnProperty(key)) {
	          fieldsArray.push({
	            name: key,
	            type: this._datumEnum[fields[key].col_type.type],
	            precision: fields[key].col_type.precision,
	            is_array: fields[key].col_type.is_array,
	            is_dict: fields[key].col_type.encoding === TEncodingType.DICT // eslint-disable-line no-undef
	          });
	        }
	      }
	      return fieldsArray;
	    }

	    /**
	     * Disconnect from the server and then clear the client and session values.
	     * @param {Function} callback A callback that takes `(err, success)` as its signature.  Returns con singleton if successful.
	     * @return {MapdCon} Object.
	     *
	     * @example <caption>Disconnect from the server:</caption>
	     *
	     * con.sessionId() // ["om9E9Ujgbhl6wIzWgLENncjWsaXRDYLy"]
	     * con.disconnect((err, con) => console.log(err, con))
	     * con.sessionId() === null;
	     */

	  }, {
	    key: "disconnect",
	    value: function disconnect(callback) {
	      var _this3 = this;

	      if (this._sessionId !== null) {
	        for (var c = 0; c < this._client.length; c++) {
	          this._client[c].disconnect(this._sessionId[c], function (error) {
	            if (error && !_this3.isTimeoutError(error)) {
	              return callback(error, _this3);
	            }

	            _this3._sessionId = null;
	            _this3._client = null;
	            _this3._numConnections = 0;
	            _this3.serverPingTimes = null;

	            return callback(null, _this3);
	          });
	        }
	      }
	      return this;
	    }
	  }, {
	    key: "removeConnection",
	    value: function removeConnection(conId) {
	      if (conId < 0 || conId >= this.numConnections) {
	        var err = {
	          msg: "Remove connection id invalid"
	        };
	        throw err;
	      }
	      this._client.splice(conId, 1);
	      this._sessionId.splice(conId, 1);
	      this._numConnections--;
	    }

	    // Wrap a Thrift method to perform session check and mapping over
	    // all clients (for mutating methods)


	    // ** Client methods **

	    /**
	     * Get the status of the server as a {@link TServerStatus} object.
	     * This includes the server version number, whether the server is read-only,
	     * and whether backend rendering is enabled.
	     * @return {Promise.<Object>} An object that contains information about the server status.
	     *
	     * @example <caption>Get the server status:</caption>
	     *
	     * con.getStatusAsync().then((result) => console.log(result))
	     * // [{
	     * //   "read_only": false,
	     * //   "version": "3.0.0dev-20170503-40e2de3",
	     * //   "rendering_enabled": true,
	     * //   "start_time": 1493840131
	     * // }]
	     */

	    /**
	     * Get information about the server hardware:
	     * - Number of GPUs.
	     * - Number of GPUs allocated to MapD.
	     * - Start GPU.
	     * - Number of SMs, SMXs, or CUs (streaming multiprocessors).
	     * - Clock frequency of each GPU.
	     * - Physical memory of each GPU.
	     * - Compute capability of each GPU.
	     * @return {Promise.<Object>} An object that contains hardware information.
	     *
	     * @example <caption>Get server hardware information:</caption>
	     *
	     * con.getHardwareInfoAsync().then((result) => console.log(result))
	     * {
	     *   "hardware_info": [{
	     *    "num_gpu_hw": 2,
	     *      "num_cpu_hw": 12,
	     *      "num_gpu_allocated": 2,
	     *      "start_gpu": 0,
	     *      "host_name": "",
	     *      "gpu_info": [{
	     *          "num_sm": 28,
	     *          "clock_frequency_kHz": 1531000,
	     *          "memory": 12781682688,
	     *          "compute_capability_major": 6,
	     *          "compute_capability_minor": 1
	     *      }, {
	     *          "num_sm": 28,
	     *          "clock_frequency_kHz": 1531000,
	     *          "memory": 12782075904,
	     *          "compute_capability_major": 6,
	     *          "compute_capability_minor": 1
	     *      }]
	     *   }]
	     * }
	     */

	    /**
	     * Get the first geo file in an archive, if present, to determine if the archive should be treated as geo.
	     * @param {String} archivePath - The base filename of the archive.
	     * @param {TCopyParams} copyParams See {@link TCopyParams}
	     * @returns {Promise.<String>} Full path to the located geo file; otherwise, to the original archivePath.
	     *
	     * @example <caption>Get the first geo file in an archive:</caption>
	     *
	     * con.getFirstGeoFileInArchiveAsync('archive.zip', {}).then(res => console.log(res))
	     */


	    /**
	     * Get a list of all users on the database for this connection.
	     * @returns {Promise.<Array>} A list of all users (strings).
	     *
	     * @example <caption>Get a list of all users:</caption>
	     *
	     * con.getUsersAsync().then(res => console.log(res))
	     */


	    /**
	     * Get a list of all roles on the database for this connection.
	     * @returns {Promise.<Array>} A list of all roles (strings).
	     *
	     * @example <caption>Get a list of all roles:</caption>
	     *
	     * con.getRolesAsync().then(res => console.log(res))
	     */


	    /**
	     * Get a list of all dashboards on the database for this connection.
	     * @returns {Promise.<Array<TDashboard>>} A list of all dashboards (Dashboard objects).
	     *
	     * @example <caption>Get a list of all dashboards:</caption>
	     *
	     * con.getDashboardsAsync().then(res => console.log(res))
	     */


	    /**
	     * Get a single dashboard.
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @returns {Promise.<TDashboard>} The dashboard (Dashboard object).
	     *
	     * @example <caption>Get a dashboard:</caption>
	     *
	     * con.getDashboardAsync().then(res => console.log(res))
	     */


	    /**
	     * Add a new dashboard to the server.
	     * @param {String} dashboardName - The name of the new dashboard.
	     * @param {String} dashboardState - The Base64-encoded state string of the new dashboard.
	     * @param {String} imageHash - The numeric hash of the dashboard thumbnail.
	     * @param {String} metaData - Stringified metadata related to the view.
	     * @return {Promise} Returns a Promise.all result (array) of the IDs created on each client.
	     *
	     * @example <caption>Add a new dashboard to the server:</caption>
	     *
	     * con.createDashboardAsync('newSave', 'dashboardstateBase64', null, 'metaData').then(res => console.log(res))
	     */


	    /**
	     * Replace a dashboard on the server with new properties.
	     * @param {Number} dashboardId - The ID of the dashboard to replace.
	     * @param {String} dashboardName - The name of the new dashboard.
	     * @param {String} dashboardOwner - User ID of the owner of the dashboard.
	     * @param {String} dashboardState - The Base64-encoded state string of the new dashboard.
	     * @param {String} imageHash - The numeric hash of the dashboard thumbnail.
	     * @param {String} metaData - Stringified metadata related to the view.
	     * @return {Promise} Returns empty if successful, rejects if any client failed.
	     *
	     * @example <caption>Replace a dashboard on the server:</caption>
	     *
	     * con.replaceDashboardAsync(123, 'replaceSave', 'owner', 'dashboardstateBase64', null, 'metaData').then(res => console.log(res))
	     */


	    /**
	     * Delete a dashboard object containing a value for the <code>view_state</code> property.
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @return {Promise} Returns empty if successful, rejects if any client failed.
	     *
	     * @example <caption>Delete a specific dashboard from the server:</caption>
	     *
	     * con.deleteDashboardAsync(123).then(res => console.log(res))
	     */


	    /**
	     * Share a dashboard (GRANT a certain set of permissions to a specified list of groups).
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @param {String[]} groups - The roles and users that can access the dashboard.
	     * @param {String[]} objects - The database objects (tables) that groups can see.
	     * @param {String[]} permissions - Permissions granted to the groups.
	     * @return {Promise} Returns empty if successful.
	     *
	     * @example <caption>Share a dashboard:</caption>
	     *
	     * con.shareDashboardAsync(123, ['group1', 'group2'], ['object1', 'object2'], ['perm1', 'perm2']).then(res => console.log(res))
	     */


	    /**
	     * Stop sharing a dashboard (REVOKE a certain set of permission from a specified list of groups).
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @param {String[]} groups - The roles and users that can access it.
	     * @param {String[]} objects - The database objects (tables) that groups can see.
	     * @param {String[]} permissions - Permissions revoked from the groups.
	     * @return {Promise} Returns empty if successful.
	     *
	     * @example <caption>Unshare a dashboard:</caption>
	     *
	     * con.unshareDashboardAsync(123, ['group1', 'group2'], ['object1', 'object2'], ['perm1', 'perm2']).then(res => console.log(res))
	     */


	    /**
	     * Get the list of users that a dashboard has been shared with; that is, those users who have been granted permissions to the dashboard.
	     * @param {Number} dashboardId - The ID of the dashboard.
	     * @return {Promise} Returns the list of users (array).
	     *
	     * @example <caption>Get the list of grantees for a dashboard:</caption>
	     *
	     * con.getDashboardGranteesAsync(123).then(res => console.log(res))
	     */


	    /**
	     * Get a list of database objects granted to a role; that is, those objects the role has permissions to access.
	     * @param {String} roleName - The name of the role.
	     * @return {Promise} Returns the list of database object names (strings).
	     *
	     * @example <caption>Get list of accessible database objects for a role:</caption>
	     *
	     * con.getDbObjectsForGranteeAsync('role').then(res => console.log(res))
	     */


	    /**
	     * Get the privileges for the current user for a specified database object type and ID.
	     * @param {String} objectName - The ID of the object (e.g. table name or dashboard ID).
	     * @param {TDBObjectType} type - The type of the database object.
	     * @return {Promise.<TDBObject[]>} Returns the list of database objects for this type and ID, including their privs (property 'privs').
	     *
	     * @example <caption>Get the list of accessible database objects for the current user:</caption>
	     *
	     * con.getDbObjectPrivsAsync('table_name', 'TableDBObjectType').then(res => console.log(res))
	     */


	    /**
	     * Get all the roles assigned to a given username.
	     * @param {String} username - The username whose roles you wish to get.
	     * @return {Promise} A list of all roles assigned to the username.
	     */


	    /**
	     * Checks if the given user or role has a privilege(s) on a given object. Note that this check is
	     * transative; if a user has been granted a privilege via a role, this will return `true`.
	     * @param {String} granteeName - The name of the user or role to check privileges for.
	     * @param {String} objectName - The name of the object to check privileges against (for example,
	     * the database name, table name, etc.)
	     * @param {TDBObjectType} objectType - The type of object to check privileges against.
	     * @param {TDBObjectPermissions} permissions - An object containing the privileges to check. All
	     * the privileges specified must be granted for this function to return true.
	     * @return {Boolean} true if all the specified privileges have been granted to the user/role,
	     * false otherwise.
	     *
	     * @example <caption>Check if user <code>my_user</code> has the "view SQL Editor" privilege on the <code>my_db</code> database:</caption>
	     *
	     * con.hasDbPrivilegesAsync(
	     *   "my_user",
	     *   "my_db",
	     *   TDBObjectType.DatabaseDBObjectType,
	     *   new TDBObjectPermissions({
	     *     database_permissions_: new TDatabasePermissions(dbPrivs)
	     *   })
	     * ).then((res) =>
	     *   if(res) { console.log("Can view the SQL editor") }
	     * )
	     */


	    /**
	     * Specialization of `has_object_privilege` for checking database privileges of a user.
	     *
	     * @param {String} granteeName - The name of the user or role to check privileges for.
	     * @param {String} dbName - The name of the database to check user privileges against.
	     * @param {TDatabasePermissions} dbPrivs - An object specifying what privileges to check.
	     *
	     * @return {Boolean} true if the user/role has all the specified DB privileges, false otherwise.
	     *
	     * @example <caption>Check if user <code>my_user</code> has the "view SQL Editor" privilege on the <code>my_db</code> database:</caption>
	     *
	     * con.hasDbPrivilegesAsync("my_user", "my_db", {view_sql_editor_: true}).then(res =>
	     *  if(res) { console.log("Can view the SQL editor") }
	     * )
	     */

	  }, {
	    key: "detectColumnTypes",
	    value: function detectColumnTypes(fileName, copyParams, callback) {
	      var thriftCopyParams = helpers.convertObjectToThriftCopyParams(copyParams);
	      this._client[0].detect_column_types(this._sessionId[0], fileName, thriftCopyParams, callback);
	    }

	    /**
	     * Asynchronously get data from an importable file,
	     * such as a CSV or plaintext file with a header.
	     * @param {String} fileName - The name of the importable file.
	     * @param {TCopyParams} copyParams See {@link TCopyParams}
	     * @returns {Promise.<TDetectResult>} An object that has <code>copy_params</code> and <code>row_set</code>.
	     *
	     * @example <caption>Get data from table_data.csv:</caption>
	     *
	     * var copyParams = new TCopyParams();
	     * con.detectColumnTypesAsync('table_data.csv', copyParams).then(res => console.log(res))
	     * // TDetectResult {row_set: TRowSet, copy_params: TCopyParams}
	     *
	     */

	  }, {
	    key: "query",


	    /**
	     * Submit a query to the database and process the results.
	     * @param {String} query The query to perform.
	     * @param {Object} options Options for the query.
	     * @param {Function} callback A callback function with the signature <code>(err, result) => result</code>.
	     * @returns {Object} The result of the query.
	     *
	     * @example <caption>Create a query:</caption>
	     *
	     * var query = "SELECT count(*) AS n FROM tweets_nov_feb WHERE country='CO'";
	     * var options = {};
	     *
	     * con.query(query, options, function(err, result) {
	     *        console.log(result)
	     *      });
	     *
	     */
	    value: function query(_query, options, callback) {
	      var _this4 = this;

	      var columnarResults = true;
	      var eliminateNullRows = false;
	      var queryId = null;
	      var returnTiming = false;
	      var limit = -1;
	      if (options) {
	        columnarResults = options.hasOwnProperty("columnarResults") ? options.columnarResults : columnarResults;
	        eliminateNullRows = options.hasOwnProperty("eliminateNullRows") ? options.eliminateNullRows : eliminateNullRows;
	        queryId = options.hasOwnProperty("queryId") ? options.queryId : queryId;
	        returnTiming = options.hasOwnProperty("returnTiming") ? options.returnTiming : returnTiming;
	        limit = options.hasOwnProperty("limit") ? options.limit : limit;
	      }

	      var lastQueryTime = queryId in this.queryTimes ? this.queryTimes[queryId] : this.DEFAULT_QUERY_TIME;

	      var curNonce = (this._nonce++).toString();

	      var conId = 0;

	      var processResultsOptions = {
	        returnTiming: returnTiming,
	        eliminateNullRows: eliminateNullRows,
	        query: _query,
	        queryId: queryId,
	        conId: conId,
	        estimatedQueryTime: lastQueryTime
	      };

	      try {
	        var AT_MOST_N = -1;
	        if (callback) {
	          this._client[conId].sql_execute(this._sessionId[conId], _query, columnarResults, curNonce, limit, AT_MOST_N, function (error, result) {
	            _this4.processResults(processResultsOptions, result, error, callback);
	          });
	          return curNonce;
	        } else if (!callback) {
	          var SQLExecuteResult = this._client[conId].sql_execute(this._sessionId[conId], _query, columnarResults, curNonce, limit, AT_MOST_N);
	          return this.processResults(processResultsOptions, SQLExecuteResult);
	        }
	      } catch (err) {
	        if (err.name === "NetworkError") {
	          this.removeConnection(conId);
	          if (this._numConnections === 0) {
	            err.msg = "No remaining database connections";
	            throw err;
	          }
	          this.query(_query, options, callback);
	        } else if (callback) {
	          callback(err);
	        } else {
	          throw err;
	        }
	      }
	    }

	    // This is a *Promise* cache, not a result cache. If queryAsync is called for the same query twice
	    // while the first is still in flight, it will return the Promise from the first call, saving
	    // an unnecessary duplicate trip and sharing the results to both callers once they come back.
	    //
	    // This only survives while requests are in flight in the default 'transient' mode, but if transient
	    // is off then it will act as a long-term cache, returning the resolved Promise with immediate results.

	    // Whether or not the query cache should immediately evict entries once they return with results


	    // We need to clone the original cached promise, so that the object returned is cloned for each consumer.
	    // This is because (unfortunately) Immerse still has a few locations that mutate the results object.


	    /**
	     * Submit a query to validate that the backend can create a result set based on the SQL statement.
	     * @param {String} query The query to perform.
	     * @returns {Promise.<Object>} The result of whether the query is valid.
	     *
	     * @example <caption>Create a query and determine if it is valid:</caption>
	     *
	     * var query = "SELECT count(*) AS n FROM tweets_nov_feb WHERE country='CO'";
	     *
	     * con.validateQuery(query).then(res => console.log(res))
	     *
	     * // [{
	     * //    "name": "n",
	     * //    "type": "INT",
	     * //    "is_array": false,
	     * //    "is_dict": false
	     * //  }]
	     *
	     */

	  }, {
	    key: "getTables",
	    value: function getTables(callback) {
	      this._client[0].get_tables(this._sessionId[0], function (error, tables) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, tables.map(function (table) {
	            return {
	              name: table,
	              label: "obs"
	            };
	          }));
	        }
	      });
	    }

	    /**
	     * Get the names of the databases that exist in the current session connection.
	     * @return {Promise.<Object[]>} List of table objects containing the label and table names.
	     *
	     * @example <caption>Get the list of tables from a connection:</caption>
	     *
	     *  con.getTablesAsync().then(res => console.log(res))
	     *
	     *  //  [{
	     *  //    label: 'obs', // deprecated property
	     *  //    name: 'myTableName'
	     *  //   },
	     *  //  ...]
	     */

	  }, {
	    key: "getTablesWithMeta",
	    value: function getTablesWithMeta(callback) {
	      var _this5 = this;

	      this._client[0].get_tables_meta(this._sessionId[0], function (error, tables) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, tables.map(function (table) {
	            return {
	              name: table.table_name,
	              num_cols: Number(table.num_cols.toString()),
	              col_datum_types: table.col_types.map(function (type) {
	                return _this5._datumEnum[type.type];
	              }),
	              is_view: table.is_view,
	              is_replicated: table.is_replicated,
	              shard_count: Number(table.shard_count.toString()),
	              max_rows: isFinite(table.max_rows) ? Number(table.max_rows.toString()) : -1
	            };
	          }));
	        }
	      });
	    }

	    /**
	     * Get names and catalog metadata for tables that exist on the current session's connection.
	     * @return {Promise.<Object[]>} The list of objects containing table metadata.
	     *
	     * @example <caption>Get the list of tables with metadata from a connection:</caption>
	     *
	     *  con.getTablesWithMetaAsync().then(res => console.log(res))
	     *
	     *  [
	     *   {
	     *    name: 'my_table_name',
	     *    col_datum_types: [TDatumType::BOOL, TDatumType::DOUBLE],
	     *    is_view: false,
	     *    is_replicated: false,
	     *    shard_count: 0,
	     *    max_rows: -1
	     *   },
	     *  ...]
	     */

	  }, {
	    key: "getTablesMeta",
	    value: function getTablesMeta(callback) {
	      this._client[0].get_tables_meta(this._sessionId[0], function (error, tables) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, tables);
	        }
	      });
	    }

	    /**
	     * Get names and catalog metadata for tables that exist on the current session's connection.
	     * @return {Promise.<TTableMeta[]>} The list of objects containing table metadata.
	     *
	     * @example <caption>Get the list of tables with metadata from a connection:</caption>
	     *
	     *  con.getTablesMetaAsync().then(res => console.log(res))
	     *
	     *  [
	     *   {
	     *    table_name: 'my_table_name',
	     *    col_datum_types: [TDatumType::BOOL, TDatumType::DOUBLE],
	     *    col_names: ['bool_col', 'double_col'],
	     *    is_view: false,
	     *    is_replicated: false,
	     *    shard_count: 0,
	     *    max_rows: -1
	     *   },
	     *  ...]
	     */

	  }, {
	    key: "getCompletionHints",


	    /**
	     * Submits an SQL string to the backend and returns a completion hints object.
	     * @param {String} queryString A fragment of SQL input.
	     * @param {Object} options An options object continaing the current cursor position, 1-indexed from the start of `queryString`.
	     * @param {Function} callback A callback function with the signature `(err, result) => result`.
	     * @returns {Array} An array of completion hints objects that contains the completion hints.
	     *
	     * @example
	     * const queryString = "f";
	     * const cursor = 1;
	     *
	     * con.getCompletionHints(queryString, cursor, function(error, result) {
	     *        console.log(result)
	     *      });
	     *
	     *  [{
	     *    hints: ["FROM"],
	     *    replaced: "f",
	     *    type: 7
	     *   }]
	     *
	     */
	    value: function getCompletionHints(queryString, options, callback) {
	      var cursor = options.cursor;
	      this._client[0].get_completion_hints(this._sessionId[0], queryString, cursor, function (error, result) {
	        if (error) {
	          callback(error);
	        } else {
	          callback(null, result);
	        }
	      });
	    }

	    /**
	     * Create an array-like object from {@link TDatumType} by
	     * changing the order of the string key and numerical value.
	     *
	     * @returns {Undefined} This function does not return anything.
	     */

	  }, {
	    key: "invertDatumTypes",
	    value: function invertDatumTypes() {
	      var datumType = TDatumType; // eslint-disable-line no-undef
	      for (var key in datumType) {
	        if (datumType.hasOwnProperty(key)) {
	          this._datumEnum[datumType[key]] = key;
	        }
	      }
	    }

	    /**
	     * Get a list of field objects for a specified table.
	     * @param {String} tableName Name of table containing field names.
	     * @param {Function} callback A callback that takes (`err, results`).
	     * @return {Array<Object>} The formatted list of field objects.
	     *
	     * @example <caption>Get the list of fields from a specific table:</caption>
	     *
	     * con.getFields('flights', (err, res) => console.log(res))
	     * // [{
	     *   name: 'fieldName',
	     *   type: 'BIGINT',
	     *   is_array: false,
	     *   is_dict: false
	     * }, ...]
	     */

	  }, {
	    key: "getFields",
	    value: function getFields(tableName, callback) {
	      var _this6 = this;

	      this._client[0].get_table_details(this._sessionId[0], tableName, function (error, fields) {
	        if (error) {
	          callback(error);
	        } else if (fields) {
	          var rowDict = fields.row_desc.reduce(function (accum, value) {
	            accum[value.col_name] = value;
	            return accum;
	          }, {});
	          callback(null, _extends({}, fields, {
	            columns: _this6.convertFromThriftTypes(rowDict)
	          }));
	        } else {
	          callback(new Error("Table (" + tableName + ") not found"));
	        }
	      });
	    }
	  }, {
	    key: "createTable",
	    value: function createTable(tableName, rowDescObj, tableType, createParams, callback) {
	      if (!this._sessionId) {
	        throw new Error("You are not connected to a server. Try running the connect method first.");
	      }

	      var thriftRowDesc = helpers.mutateThriftRowDesc(rowDescObj, this.importerRowDesc);

	      for (var c = 0; c < this._numConnections; c++) {
	        this._client[c].create_table(this._sessionId[c], tableName, thriftRowDesc, tableType, createParams, function (err) {
	          if (err) {
	            callback(err);
	          } else {
	            callback();
	          }
	        });
	      }
	    }

	    /**
	     * Create a table and persist it to the backend.
	     * @param {String} tableName The name of the new table.
	     * @param {Array<TColumnType>} rowDescObj Fields in the new table.
	     * @param {Number<TTableType>} tableType The types of tables a user can import into the database.
	     * @param {TCreateParams} createParams Properties to apply to the new table (e.g. replicated)
	     * @return {Promise.<undefined>} Generates an error if unsuccessful, or returns undefined if successful.
	     *
	     * @example <caption>Create a new table:</caption>
	     *
	     *  con.createTable('mynewtable', [TColumnType, TColumnType, ...], 0).then(res => console.log(res));
	     *  // undefined
	     */

	  }, {
	    key: "importTable",
	    value: function importTable(tableName, fileName, copyParams, rowDescObj, isShapeFile, callback) {
	      if (!this._sessionId) {
	        throw new Error("You are not connected to a server. Try running the connect method first.");
	      }

	      var thriftCopyParams = helpers.convertObjectToThriftCopyParams(copyParams);
	      var thriftRowDesc = helpers.mutateThriftRowDesc(rowDescObj, this.importerRowDesc);

	      var thriftCallBack = function thriftCallBack(err, res) {
	        if (err) {
	          callback(err);
	        } else {
	          callback(null, res);
	        }
	      };

	      for (var c = 0; c < this._numConnections; c++) {
	        if (isShapeFile) {
	          this._client[c].import_geo_table(this._sessionId[c], tableName, fileName, thriftCopyParams, thriftRowDesc, new TCreateParams(), thriftCallBack);
	        } else {
	          this._client[c].import_table(this._sessionId[c], tableName, fileName, thriftCopyParams, thriftCallBack);
	        }
	      }
	    }
	  }, {
	    key: "importTableAsyncWrapper",
	    value: function importTableAsyncWrapper(isShapeFile) {
	      var _this7 = this;

	      return function (tableName, fileName, copyParams, headers) {
	        return new Promise(function (resolve, reject) {
	          _this7.importTable(tableName, fileName, copyParams, headers, isShapeFile, function (err, link) {
	            if (err) {
	              reject(err);
	            } else {
	              resolve(link);
	            }
	          });
	        });
	      };
	    }

	    /**
	     * Import a delimited table from a file.
	     * @param {String} tableName The name of the new table.
	     * @param {String} fileName The name of the file containing the table.
	     * @param {TCopyParams} copyParams See {@link TCopyParams}
	     * @param {TColumnType[]} headers A collection of metadata related to the table headers.
	     */


	    /**
	     * Import a geo table from a file.
	     * @param {String} tableName The name of the new geo table.
	     * @param {String} fileName The name of the file containing the table.
	     * @param {TCopyParams} copyParams See {@link TCopyParams}
	     * @param {TColumnType[]} headers A colleciton of metadata related to the table headers.
	     */

	  }, {
	    key: "renderVega",


	    /**
	     * Use for backend rendering. This method fetches a PNG image
	     * that is a render of the Vega JSON object.
	     *
	     * @param {Number} widgetid The widget ID of the calling widget.
	     * @param {String} vega The Vega JSON.
	     * @param {Object} options The options for the render query.
	     * @param {Number} options.compressionLevel The PNG compression level.
	     *                  Range: 1 (low compression, faster) to 10 (high compression, slower).
	     *                  Default: 3.
	     * @param {Function} callback Takes `(err, success)` as its signature.  Returns con singleton if successful.
	     *
	     * @returns {Image} Base64 image.
	     */
	    value: function renderVega(widgetid, vega, options, callback) /* istanbul ignore next */{
	      var _this8 = this;

	      var queryId = null;
	      var compressionLevel = COMPRESSION_LEVEL_DEFAULT;

	      if (options) {
	        queryId = options.hasOwnProperty("queryId") ? options.queryId : queryId;
	        compressionLevel = options.hasOwnProperty("compressionLevel") ? options.compressionLevel : compressionLevel;
	      }

	      var lastQueryTime = queryId in this.queryTimes ? this.queryTimes[queryId] : this.DEFAULT_QUERY_TIME;

	      var curNonce = (this._nonce++).toString();

	      var conId = 0;
	      this._lastRenderCon = conId;

	      var processResultsOptions = {
	        isImage: true,
	        query: "render: " + vega,
	        queryId: queryId,
	        conId: conId,
	        estimatedQueryTime: lastQueryTime
	      };

	      if (!callback) {
	        var renderResult = this._client[conId].render_vega(this._sessionId[conId], widgetid, vega, compressionLevel, curNonce);
	        return this.processResults(processResultsOptions, renderResult);
	      }

	      this._client[conId].render_vega(this._sessionId[conId], widgetid, vega, compressionLevel, curNonce, function (error, result) {
	        _this8.processResults(processResultsOptions, result, error, callback);
	      });

	      return curNonce;
	    }
	  }, {
	    key: "getResultRowForPixel",


	    /**
	     * Used primarily for backend-rendered maps; fetches the row
	     * for a specific table that was last rendered at a pixel.
	     *
	     * @param {Number} widgetId The widget ID of the caller.
	     * @param {TPixel} pixel The pixel. The lower-left corner is pixel (0,0).
	     * @param {Object} tableColNamesMap Map of the object of `tableName` to the array of column names.
	     * @param {Number} [pixelRadius=2] The radius around the primary pixel to search within.
	     * @param {Function} callback A callback function with the signature `(err, result) => result`.
	     *
	     * @returns {String} Current result nonce
	     */
	    value: function getResultRowForPixel(widgetId, pixel, tableColNamesMap) /* istanbul ignore next */{
	      var pixelRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
	      var callback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

	      if (!(pixel instanceof TPixel)) {
	        pixel = new TPixel(pixel);
	      }

	      var columnFormat = true; // BOOL
	      var curNonce = (this._nonce++).toString();

	      if (!callback) {
	        return this.processPixelResults(undefined, // eslint-disable-line no-undefined
	        this._client[this._lastRenderCon].get_result_row_for_pixel(this._sessionId[this._lastRenderCon], widgetId, pixel, tableColNamesMap, columnFormat, pixelRadius, curNonce));
	      }

	      this._client[this._lastRenderCon].get_result_row_for_pixel(this._sessionId[this._lastRenderCon], widgetId, pixel, tableColNamesMap, columnFormat, pixelRadius, curNonce, this.processPixelResults.bind(this, callback));

	      return curNonce;
	    }
	  }, {
	    key: "processPixelResults",


	    /**
	     * Formats the pixel results into the same pattern as textual results.
	     *
	     * @param {Function} callback A callback function with the signature `(err, result) => result`.
	     * @param {Object} error An error if thrown; otherwise null.
	     * @param {Array|Object} results Unformatted results of pixel `rowId` information.
	     *
	     * @returns {Object} An object with the pixel results formatted for display.
	     */
	    value: function processPixelResults(callback, error, results) {
	      results = Array.isArray(results) ? results.pixel_rows : [results];

	      if (error) {
	        if (callback) {
	          return callback(error, results);
	        } else {
	          throw new Error("Unable to process result row for pixel results: " + error);
	        }
	      }

	      var processResultsOptions = {
	        isImage: false,
	        eliminateNullRows: false,
	        query: "pixel request",
	        queryId: -2
	      };

	      var numPixels = results.length;
	      for (var p = 0; p < numPixels; p++) {
	        results[p].row_set = this.processResults(processResultsOptions, results[p]);
	      }

	      if (callback) {
	        return callback(error, results);
	      } else {
	        return results;
	      }
	    }

	    // ** Configuration methods **

	    /**
	     * Get or set the session ID used by the server to serve the correct data.
	     * This is typically set by {@link connect} and should not be set manually.
	     * @param {Number} sessionId The session ID of the current connection.
	     * @return {Number|MapdCon} - The session ID or MapD connector itself.
	     *
	     * @example <caption>Get the session ID:</caption>
	     *
	     *  con.sessionId();
	     * // sessionID === 3145846410
	     *
	     * @example <caption>Set the session ID:</caption>
	     * var con = new MapdCon().connect().sessionId(3415846410);
	     * // NOTE: It is generally unsafe to set the session ID manually.
	     */

	  }, {
	    key: "sessionId",
	    value: function sessionId(_sessionId) {
	      if (!arguments.length) {
	        return this._sessionId;
	      }
	      this._sessionId = arrayify(_sessionId);
	      return this;
	    }

	    /**
	     * Get or set the connection server hostname.
	     * This is is typically the first method called after instantiating a new MapdCon.
	     * @param {String} host The hostname address.
	     * @return {String|MapdCon} The hostname or MapD connector itself.
	     *
	     * @example <caption>Set the hostname:</caption>
	     * var con = new MapdCon().host('localhost');
	     *
	     * @example <caption>Get the hostname:</caption>
	     * var host = con.host();
	     * // host === 'localhost'
	     */

	  }, {
	    key: "host",
	    value: function host(_host) {
	      if (!arguments.length) {
	        return this._host;
	      }
	      this._host = arrayify(_host);
	      return this;
	    }

	    /**
	     * Get or set the connection port.
	     * @param {String} port - The port to connect on.
	     * @return {String|MapdCon} - The port or MapD connector itself.
	     *
	     * @example <caption>Set the port:</caption>
	     * var con = new MapdCon().port('8080');
	     *
	     * @example <caption>Get the port:</caption>
	     * var port = con.port();
	     * // port === '8080'
	     */

	  }, {
	    key: "port",
	    value: function port(_port) {
	      if (!arguments.length) {
	        return this._port;
	      }
	      this._port = arrayify(_port);
	      return this;
	    }

	    /**
	     * Get or set the username with which to authenticate.
	     * @param {String} user - The username with which to authenticate.
	     * @return {String|MapdCon} - The username or MapD connector itself.
	     *
	     * @example <caption>Set the username:</caption>
	     * var con = new MapdCon().user('foo');
	     *
	     * @example <caption>Get the username:</caption>
	     * var username = con.user();
	     * // user === 'foo'
	     */

	  }, {
	    key: "user",
	    value: function user(_user) {
	      if (!arguments.length) {
	        return this._user;
	      }
	      this._user = arrayify(_user);
	      return this;
	    }

	    /**
	     * Get or set the user password for authentication.
	     * @param {String} password The password with which to authenticate.
	     * @return {String|MapdCon} The password or MapD connector itself.
	     *
	     * @example <caption>Set the password:</caption>
	     * var con = new MapdCon().password('bar');
	     *
	     * @example <caption>Get the username:</caption>
	     * var password = con.password();
	     * // password === 'bar'
	     */

	  }, {
	    key: "password",
	    value: function password(_password) {
	      if (!arguments.length) {
	        return this._password;
	      }
	      this._password = arrayify(_password);
	      return this;
	    }

	    /**
	     * Get or set the name of the database to connect to.
	     * @param {String} dbName - The database to connect to.
	     * @return {String|MapdCon} - The name of the database or the MapD connector itself.
	     *
	     * @example <caption>Set the database name:</caption>
	     * var con = new MapdCon().dbName('myDatabase');
	     *
	     * @example <caption>Get the database name:</caption>
	     * var dbName = con.dbName();
	     * // dbName === 'myDatabase'
	     */

	  }, {
	    key: "dbName",
	    value: function dbName(_dbName) {
	      if (!arguments.length) {
	        return this._dbName;
	      }
	      this._dbName = arrayify(_dbName);
	      return this;
	    }

	    /**
	     * Configure whether raw query strings are logged to the console.
	     * Used primarily for debugging; `false` by default.
	     * @param {Boolean} logging Set to true to enable logging.
	     * @return {Boolean|MapdCon} The current logging flag or MapD connector itself.
	     *
	     * @example <caption>Set logging to true:</caption>
	     * var con = new MapdCon().logging(true);
	     *
	     * @example <caption>Get the logging flag:</caption>
	     * var isLogging = con.logging();
	     * // isLogging === true
	     */

	  }, {
	    key: "logging",
	    value: function logging(_logging) {
	      if (typeof _logging === "undefined") {
	        return this._logging;
	      } else if (typeof _logging !== "boolean") {
	        return "logging can only be set with boolean values";
	      }
	      this._logging = _logging;
	      var isEnabledTxt = _logging ? "enabled" : "disabled";
	      return "SQL logging is now " + isEnabledTxt;
	    }

	    /**
	     * The name of the platform.
	     * @param {String} platform The platform; "mapd" by default.
	     * @return {String|MapdCon} - The platform or MapD connector itself.
	     *
	     * @example <caption>Set the platform name:</caption>
	     * var con = new MapdCon().platform('myPlatform');
	     *
	     * @example <caption>Get the platform name:</caption>
	     * var platform = con.platform();
	     * // platform === 'myPlatform'
	     */

	  }, {
	    key: "platform",
	    value: function platform(_platform) {
	      if (!arguments.length) {
	        return this._platform;
	      }
	      this._platform = _platform;
	      return this;
	    }

	    /**
	     * Get the number of connections that are currently open.
	     * @return {Number} The number of open connections.
	     *
	     * @example <caption>Get the number of connections:</caption>
	     *
	     * var numConnections = con.numConnections();
	     * // numConnections === 1
	     */

	  }, {
	    key: "numConnections",
	    value: function numConnections() {
	      return this._numConnections;
	    }

	    /**
	     * The protocol to use for requests.
	     * @param {String} protocol <code>http</code> or <code>https</code>.
	     * @return {String|MapdCon} The protocol or MapdCon itself.
	     *
	     * @example <caption>Set the protocol:</caption>
	     * var con = new MapdCon().protocol('http');
	     *
	     * @example <caption>Get the protocol:</caption>
	     * var protocol = con.protocol();
	     * // protocol === 'http'
	     */

	  }, {
	    key: "protocol",
	    value: function protocol(_protocol) {
	      if (!arguments.length) {
	        return this._protocol;
	      }
	      this._protocol = arrayify(_protocol);
	      return this;
	    }

	    /**
	     * Disables logic that automatically tries to reconnect to the server if there's an error
	     *
	     * @param {Boolean?} disable - If true, disables auto-reconnect
	     * @return {Boolean|MapdCon} The status of auto-reconnect, or MapdCon itself.
	     */

	  }, {
	    key: "disableAutoReconnect",
	    value: function disableAutoReconnect(disable) {
	      if (!arguments.length) {
	        return this._disableAutoReconnect;
	      }
	      this._disableAutoReconnect = disable;
	      return this;
	    }

	    /**
	     * Generates a list of endpoints from the connection parameters.
	     * @return {Array<String>} List of endpoints.
	     *
	     * @example <caption>Get the endpoints:</caption>
	     * var con = new MapdCon().protocol('http').host('localhost').port('8000');
	     * var endpoints = con.getEndpoints();
	     * // endpoints === [ 'http://localhost:8000' ]
	     */

	  }, {
	    key: "getEndpoints",
	    value: function getEndpoints() {
	      var _this9 = this;

	      return this._host.map(function (host, i) {
	        return _this9._protocol[i] + "://" + host + ":" + _this9._port[i];
	      });
	    }

	    /**
	     * Set the license for Trial or Enterprise
	     * @param {String} key The key to install
	     * @param {Object} config Protocol, host and port to connect to
	     * @return {Promise.<Object>} Claims or Error.
	     */

	  }, {
	    key: "setLicenseKey",
	    value: function setLicenseKey(key, _ref11) {
	      var _this10 = this;

	      var protocol = _ref11.protocol,
	          host = _ref11.host,
	          port = _ref11.port;

	      return new Promise(function (resolve) {
	        var client = Array.isArray(_this10._client) && _this10._client[0];
	        var sessionId = _this10._sessionId && _this10._sessionId[0];
	        if (!client) {
	          var url = protocol + "://" + host + ":" + port;
	          var thriftTransport = new Thrift.Transport(url);
	          var thriftProtocol = new Thrift.Protocol(thriftTransport);
	          client = new _mapdClientV2.default(thriftProtocol);
	          sessionId = "";
	        }
	        var result = client.set_license_key(sessionId, key, _this10._nonce++);
	        resolve(result);
	      });
	    }

	    /**
	     * Get the license for Trial or Enterprise
	     * @param {Object} config Protocol, host and port to connect to
	     * @return {Promise.<Object>} Claims or Error.
	     */

	  }, {
	    key: "getLicenseClaims",
	    value: function getLicenseClaims(_ref12) {
	      var _this11 = this;

	      var protocol = _ref12.protocol,
	          host = _ref12.host,
	          port = _ref12.port;

	      return new Promise(function (resolve, reject) {
	        var client = Array.isArray(_this11._client) && _this11._client[0];
	        var sessionId = _this11._sessionId && _this11._sessionId[0];
	        if (!client) {
	          var url = protocol + "://" + host + ":" + port;
	          var thriftTransport = new Thrift.Transport(url);
	          var thriftProtocol = new Thrift.Protocol(thriftTransport);
	          client = new _mapdClientV2.default(thriftProtocol);
	          sessionId = "";
	        }
	        try {
	          var result = client.get_license_claims(sessionId, _this11._nonce++);
	          resolve(result);
	        } catch (e) {
	          reject(e);
	        }
	      });
	    }
	  }, {
	    key: "isTimeoutError",
	    value: function isTimeoutError(result) {
	      return result instanceof TOmniSciException && (String(result.error_msg).indexOf("Session not valid.") !== -1 || String(result.error_msg).indexOf("User should re-authenticate.") !== -1);
	    }
	  }]);

	  return MapdCon;
	}();

	function resetThriftClientOnArgumentErrorForMethods(connector, client, methodNames) {
	  methodNames.forEach(function (methodName) {
	    var oldFunc = connector[methodName];
	    connector[methodName] = function () {
	      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      try {
	        // eslint-disable-line no-restricted-syntax
	        return oldFunc.apply(connector, args); // TODO should reject rather than throw for Promises.
	      } catch (e) {
	        // `this.output` is the Thrift transport instance
	        client.output.outCount = 0;
	        client.output.outBuffers = [];
	        client.output._seqid = null;
	        // dereference the callback
	        client._reqs[client._seqid] = null;
	        throw e; // re-throw the error to Rx
	      }
	    };
	  });
	}

	// Set a global mapdcon function when mapdcon is brought in via script tag.
	if (( false ? "undefined" : _typeof(module)) === "object" && module.exports) {
	  if (!isNodeRuntime()) {
	    window.MapdCon = MapdCon;
	  }
	}
	module.exports = MapdCon;
	exports.default = MapdCon;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)(module)))

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.timestampToMs = timestampToMs;
	var convertObjectToThriftCopyParams = exports.convertObjectToThriftCopyParams = function convertObjectToThriftCopyParams(obj) {
	  return new TCopyParams(obj);
	}; // eslint-disable-line no-undef

	var mutateThriftRowDesc = exports.mutateThriftRowDesc = function mutateThriftRowDesc(rowDescArray, thriftRowDescArray) {
	  rowDescArray.forEach(function (obj, i) {
	    thriftRowDescArray[i].col_name = obj.clean_col_name;
	    thriftRowDescArray[i].col_type.encoding = obj.col_type.encoding;
	    thriftRowDescArray[i].col_type.precision = obj.col_type.precision;
	    thriftRowDescArray[i].col_type.comp_param = obj.col_type.comp_param;
	    thriftRowDescArray[i].col_type.scale = obj.col_type.scale;
	    thriftRowDescArray[i].col_type.type = obj.col_type.type;
	  });
	  return thriftRowDescArray;
	};

	/**
	 * Converts a raw integer timestamp value from the DB into milliseconds. The DB timestamp value may
	 * represent seconds, ms, us, or ns depending on the precision of the column. This value is
	 * truncated or extended as necessary to convert to ms precision. The returned ms value is suitable
	 * for passing to the JS Date object constructor.
	 * @param {Number} timestamp - The raw integer timestamp in the database.
	 * @param {Number} precision - The precision of the timestamp column in the database.
	 * @returns {Number} The equivalent timestamp in milliseconds.
	 */
	function timestampToMs(timestamp, precision) {
	  // A precision of 0 = sec, 3 = ms. Thus, this line finds the value to divide the DB val
	  // eslint-disable-next-line no-magic-numbers
	  var divisor = Math.pow(10, precision - 3);
	  var timeInMs = timestamp / divisor;

	  return timeInMs;
	}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(18).clone;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	//  Ramda v0.26.1
	//  https://github.com/ramda/ramda
	//  (c) 2013-2019 Scott Sauyet, Michael Hurley, and David Chambers
	//  Ramda may be freely distributed under the MIT license.

	(function (global, factory) {
	   true ? factory(exports) :
	  typeof define === 'function' && define.amd ? define(['exports'], factory) :
	  (factory((global.R = {})));
	}(this, (function (exports) { 'use strict';

	  function _cloneRegExp(pattern) {
	    return new RegExp(pattern.source, (pattern.global     ? 'g' : '') +
	                                      (pattern.ignoreCase ? 'i' : '') +
	                                      (pattern.multiline  ? 'm' : '') +
	                                      (pattern.sticky     ? 'y' : '') +
	                                      (pattern.unicode    ? 'u' : ''));
	  }

	  function _isPlaceholder(a) {
	    return a != null &&
	           typeof a === 'object' &&
	           a['@@functional/placeholder'] === true;
	  }

	  /**
	   * Optimized internal one-arity curry function.
	   *
	   * @private
	   * @category Function
	   * @param {Function} fn The function to curry.
	   * @return {Function} The curried function.
	   */
	  function _curry1(fn) {
	    return function f1(a) {
	      if (arguments.length === 0 || _isPlaceholder(a)) {
	        return f1;
	      } else {
	        return fn.apply(this, arguments);
	      }
	    };
	  }

	  /**
	   * Gives a single-word string description of the (native) type of a value,
	   * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
	   * attempt to distinguish user Object types any further, reporting them all as
	   * 'Object'.
	   *
	   * @func
	   * @memberOf R
	   * @since v0.8.0
	   * @category Type
	   * @sig (* -> {*}) -> String
	   * @param {*} val The value to test
	   * @return {String}
	   * @example
	   *
	   *      R.type({}); //=> "Object"
	   *      R.type(1); //=> "Number"
	   *      R.type(false); //=> "Boolean"
	   *      R.type('s'); //=> "String"
	   *      R.type(null); //=> "Null"
	   *      R.type([]); //=> "Array"
	   *      R.type(/[A-z]/); //=> "RegExp"
	   *      R.type(() => {}); //=> "Function"
	   *      R.type(undefined); //=> "Undefined"
	   */
	  var type = _curry1(function type(val) {
	    return val === null
	      ? 'Null'
	      : val === undefined
	        ? 'Undefined'
	        : Object.prototype.toString.call(val).slice(8, -1);
	  });

	  /**
	   * Copies an object.
	   *
	   * @private
	   * @param {*} value The value to be copied
	   * @param {Array} refFrom Array containing the source references
	   * @param {Array} refTo Array containing the copied source references
	   * @param {Boolean} deep Whether or not to perform deep cloning.
	   * @return {*} The copied value.
	   */
	  function _clone(value, refFrom, refTo, deep) {
	    var copy = function copy(copiedValue) {
	      var len = refFrom.length;
	      var idx = 0;
	      while (idx < len) {
	        if (value === refFrom[idx]) {
	          return refTo[idx];
	        }
	        idx += 1;
	      }
	      refFrom[idx + 1] = value;
	      refTo[idx + 1] = copiedValue;
	      for (var key in value) {
	        copiedValue[key] = deep ?
	          _clone(value[key], refFrom, refTo, true) : value[key];
	      }
	      return copiedValue;
	    };
	    switch (type(value)) {
	      case 'Object':  return copy({});
	      case 'Array':   return copy([]);
	      case 'Date':    return new Date(value.valueOf());
	      case 'RegExp':  return _cloneRegExp(value);
	      default:        return value;
	    }
	  }

	  /**
	   * Creates a deep copy of the value which may contain (nested) `Array`s and
	   * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
	   * assigned by reference rather than copied
	   *
	   * Dispatches to a `clone` method if present.
	   *
	   * @func
	   * @memberOf R
	   * @since v0.1.0
	   * @category Object
	   * @sig {*} -> {*}
	   * @param {*} value The object or array to clone
	   * @return {*} A deeply cloned copy of `val`
	   * @example
	   *
	   *      const objects = [{}, {}, {}];
	   *      const objectsClone = R.clone(objects);
	   *      objects === objectsClone; //=> false
	   *      objects[0] === objectsClone[0]; //=> false
	   */
	  var clone = _curry1(function clone(value) {
	    return value != null && typeof value.clone === 'function' ?
	      value.clone() :
	      _clone(value, [], [], true);
	  });

	  exports.clone = clone;

	  Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = EventEmitter;
	}


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = MapDClientV2;

	var _wrapWithErrorHandling = __webpack_require__(21);

	var MapDClient = typeof window !== "undefined" && window.OmniSciClient || __webpack_require__(22).Client; // eslint-disable-line global-require

	function MapDClientV2(protocol) {
	  MapDClient.call(this, protocol);
	}

	MapDClientV2.prototype = Object.create(MapDClient.prototype);

	/* eslint-disable no-unused-expressions */
	!function () {
	  ["connect", "sql_execute", "sql_validate", "render", "render_vega", "get_result_row_for_pixel", "get_completion_hints", "get_tables", "get_table_details", "get_tables_meta", "get_fields", "get_status", "get_server_status", "get_hardware_info", "create_link", "get_link_view", "detect_column_types", "send_create_table", "send_import_table", "detect_column_types", "set_license_key", "get_license_claims"].forEach(function (funcName) {
	    MapDClientV2.prototype[funcName] = function () {
	      return (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, funcName).apply(undefined, arguments);
	    };
	  });
	}();

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isResultError = isResultError;
	exports.createResultError = createResultError;
	exports.wrapMethod = wrapMethod;
	exports.wrapWithErrorHandling = wrapWithErrorHandling;
	var MapDClient = typeof window !== "undefined" && window.OmniSciClient || __webpack_require__(22).Client; // eslint-disable-line global-require
	var TMapDException = typeof window !== "undefined" && window.TOmniSciException || __webpack_require__(22).TOmniSciException; // eslint-disable-line global-require
	var Thrift = typeof window !== "undefined" && window.Thrift || __webpack_require__(22).Thrift; // eslint-disable-line global-require

	function isResultError(result) {
	  return result instanceof Thrift.TException || result instanceof Error;
	}

	function createResultError(result) {
	  if (result instanceof TMapDException) {
	    return new Error(result.error_msg);
	  } else if (typeof result.message === "undefined") {
	    return new Error("Unspecified Error");
	  } else {
	    return new Error(result.message);
	  }
	}

	/* eslint-disable consistent-this */
	function wrapMethod(context, method, isError) {
	  return function wrapped() {
	    var arity = MapDClient.prototype[method].length;

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    if (args.length === arity) {
	      var _MapDClient$prototype;

	      var callback = args.pop();
	      (_MapDClient$prototype = MapDClient.prototype[method]).call.apply(_MapDClient$prototype, [context].concat(args, [function (result) {
	        if (isError(result)) {
	          callback(result);
	        } else {
	          callback(null, result);
	        }
	      }]));
	    } else if (args.length === arity - 1) {
	      var _MapDClient$prototype2;

	      var result = (_MapDClient$prototype2 = MapDClient.prototype[method]).call.apply(_MapDClient$prototype2, [context].concat(args));
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    } else {
	      throw new Error("Insufficient arguments to run this method " + method);
	    }
	  };
	}

	function wrapWithErrorHandling(context, method) {
	  return wrapMethod(context, method, isResultError);
	}
	/* eslint-enable consistent-this */

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_22__;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processQueryResults;

	var _processColumnarResults = __webpack_require__(24);

	var _processColumnarResults2 = _interopRequireDefault(_processColumnarResults);

	var _processRowResults = __webpack_require__(25);

	var _processRowResults2 = _interopRequireDefault(_processRowResults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Determines how to process raw results when they return from the server.
	 *
	 * @param {Boolean} logging If enabled, shows on the console how long the query took to run.
	 * @param {Function} updateQueryTimes A function that updates internal query times on the connector.
	 * @param {Object} options A list of options for processing the results.
	 * @param {Boolean} options.isImage Set to true when querying for backend-rendered images.
	 * @param {Boolean} options.eliminateNullRows Removes null rows.
	 * @param {String} options.query The SQL query string used only for logging.
	 * @param {Number} options.queryId The ID of the query.
	 * @param {Number} options.conId The unique connector identification.
	 * @param {String} options.estimatedQueryTime The estimate of the query time.
	 * @param {Array<Function>} callback The same callback coming from {@link #query}.
	 * @param {Object} result - The query result used to decide whether to process
	 *                          as column or row results.
	 * @return {Object} Null if image with callbacks, result if image with callbacks,
	 *                  otherwise formatted results.
	 */
	function processQueryResults(logging, updateQueryTimes) {
	  return function (options, _datumEnum, result, callback) {
	    var isImage = false;
	    var eliminateNullRows = false;
	    var query = null;
	    var queryId = null;
	    var conId = null;
	    var estimatedQueryTime = null;
	    var hasCallback = Boolean(callback);

	    if (typeof options !== "undefined") {
	      isImage = options.isImage ? options.isImage : false;
	      eliminateNullRows = options.eliminateNullRows ? options.eliminateNullRows : false;
	      query = options.query ? options.query : null;
	      queryId = options.queryId ? options.queryId : null;
	      conId = typeof options.conId === "undefined" ? null : options.conId;
	      estimatedQueryTime = typeof options.estimatedQueryTime === "undefined" ? null : options.estimatedQueryTime;
	    }
	    if (result.execution_time_ms && conId !== null && estimatedQueryTime !== null) {
	      updateQueryTimes(conId, queryId, estimatedQueryTime, result.execution_time_ms);
	    }

	    // should use node_env
	    if (logging && result.execution_time_ms) {
	      console.log(query, "on Server", conId, "- Execution Time:", result.execution_time_ms, " ms, Total Time:", result.total_time_ms + "ms");
	    }

	    if (isImage && hasCallback) {
	      callback(null, result);
	    } else if (isImage && !hasCallback) {
	      return result;
	    } else {
	      var formattedResult = null;

	      if (!result.row_set) {
	        if (hasCallback) {
	          callback(new Error("No result to process"));
	        } else {
	          throw new Error("No result to process");
	        }
	        return;
	      }

	      try {
	        if (result.row_set.is_columnar) {
	          formattedResult = (0, _processColumnarResults2.default)(result.row_set, eliminateNullRows, _datumEnum);
	        } else {
	          formattedResult = (0, _processRowResults2.default)(result.row_set, eliminateNullRows, _datumEnum);
	        }

	        formattedResult.timing = {
	          execution_time_ms: result.execution_time_ms,
	          total_time_ms: result.total_time_ms
	        };
	      } catch (err) {
	        if (hasCallback) {
	          callback(err);
	        } else {
	          throw err;
	        }
	        return;
	      }

	      if (hasCallback) {
	        callback(null, options.returnTiming ? formattedResult : formattedResult.results);
	      } else {
	        return options.returnTiming ? formattedResult : formattedResult.results;
	      }
	    }
	  };
	}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processColumnarResults;

	var _helpers = __webpack_require__(16);

	/**
	 * Process the column-based results from the query in a row-based format.
	 * (Returning row-based results directly from the server is inefficient.)
	 *
	 * @param {TRowSet} data The column-based data returned from a query.
	 * @param {Boolean} eliminateNullRows A flag that removes null rows from results.
	 * @param {Object} dataEnum A list of types created from when executing {@link #invertDatumTypes}.
	 * @returns {Object} The formatted results of the query.
	 * @example <caption>Convert data returned in column-based format to row-based:</caption>
	 */
	function processColumnarResults(data, eliminateNullRows, dataEnum) {
	  var formattedResult = { fields: [], results: [] };
	  var numCols = data.row_desc.length;
	  var numRows = typeof data.columns[0] === "undefined" ? 0 : data.columns[0].nulls.length;

	  formattedResult.fields = data.row_desc.map(function (field) {
	    return {
	      name: field.col_name,
	      type: dataEnum[field.col_type.type],
	      is_array: field.col_type.is_array
	    };
	  });

	  for (var r = 0; r < numRows; r++) {
	    if (eliminateNullRows) {
	      var rowHasNull = false;
	      for (var c = 0; c < numCols; c++) {
	        if (data.columns[c].nulls[r]) {
	          rowHasNull = true;
	          break;
	        }
	      }
	      if (rowHasNull) {
	        continue; // eslint-disable-line no-continue
	      }
	    }
	    var row = {};
	    for (var _c = 0; _c < numCols; _c++) {
	      var fieldName = formattedResult.fields[_c].name;
	      var fieldType = formattedResult.fields[_c].type;
	      var fieldIsArray = formattedResult.fields[_c].is_array;
	      var isNull = data.columns[_c].nulls[r];
	      var fieldPrecision = data.row_desc[_c].col_type.precision;

	      if (isNull) {
	        // row[fieldName] = "NULL";
	        row[fieldName] = null;
	        continue; // eslint-disable-line no-continue
	      }
	      if (fieldIsArray) {
	        row[fieldName] = [];
	        var arrayNumElems = data.columns[_c].data.arr_col[r].nulls.length;
	        for (var e = 0; e < arrayNumElems; e++) {
	          if (data.columns[_c].data.arr_col[r].nulls[e]) {
	            row[fieldName].push("NULL");
	            continue; // eslint-disable-line no-continue
	          }
	          switch (fieldType) {
	            case "BOOL":
	              row[fieldName].push(Boolean(data.columns[_c].data.arr_col[r].data.int_col[e]));
	              break;
	            case "SMALLINT":
	            case "INT":
	            case "BIGINT":
	            case "TINYINT":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.int_col[e]);
	              break;
	            case "FLOAT":
	            case "DOUBLE":
	            case "DECIMAL":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.real_col[e]);
	              break;
	            case "STR":
	              row[fieldName].push(data.columns[_c].data.arr_col[r].data.str_col[e]);
	              break;
	            case "TIME":
	            case "TIMESTAMP":
	            case "DATE":
	              var timeInMs = (0, _helpers.timestampToMs)(data.columns[_c].data.int_col[r], fieldPrecision);
	              row[fieldName].push(timeInMs);
	              break;
	            default:
	              throw new Error("Unrecognized array field type: " + fieldType);
	          }
	        }
	      } else {
	        // Not an array
	        switch (fieldType) {
	          case "BOOL":
	            row[fieldName] = Boolean(data.columns[_c].data.int_col[r]);
	            break;
	          case "SMALLINT":
	          case "INT":
	          case "BIGINT":
	          case "TINYINT":
	            row[fieldName] = data.columns[_c].data.int_col[r];
	            break;
	          case "FLOAT":
	          case "DOUBLE":
	          case "DECIMAL":
	            row[fieldName] = data.columns[_c].data.real_col[r];
	            break;
	          case "STR":
	            row[fieldName] = data.columns[_c].data.str_col[r];
	            break;
	          case "TIME":
	          case "TIMESTAMP":
	          case "DATE":
	            var _timeInMs = (0, _helpers.timestampToMs)(data.columns[_c].data.int_col[r], fieldPrecision);
	            row[fieldName] = new Date(_timeInMs);
	            break;
	          case "POINT":
	          case "LINESTRING":
	          case "POLYGON":
	          case "MULTIPOLYGON":
	            row[fieldName] = data.columns[_c].data.str_col[r];
	            break;
	          default:
	            throw new Error("Unrecognized field type: " + fieldType);
	        }
	      }
	    }
	    formattedResult.results.push(row);
	  }
	  return formattedResult;
	}

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = processRowResults;

	var _helpers = __webpack_require__(16);

	/**
	 * Query for row-based results from the server. In general, is inefficient and should be
	 * avoided. Instead, use {@link processColumnarResults} and then convert the results to
	 * row-based format.
	 * @param {TRowSet} data - The row-based data returned from a query.
	 * @param {Boolean} eliminateNullRows Flag that removes null rows from results.
	 * @param {Object} datumEnum A list of types created from when executing {@link #invertDatumTypes}.
	 * @returns {Object} The formatted results of the query.
	 * @example<caption> Return row-based results directly from the server:
	 */
	function processRowResults(data, eliminateNullRows, datumEnum) {
	  var numCols = data.row_desc.length;
	  var formattedResult = { fields: [], results: [] };

	  formattedResult.fields = data.row_desc.map(function (field) {
	    return {
	      name: field.col_name,
	      type: datumEnum[field.col_type.type],
	      is_array: field.col_type.is_array
	    };
	  });

	  formattedResult.results = [];
	  var numRows = 0;
	  if (typeof data.rows !== "undefined" && data.rows !== null) {
	    numRows = data.rows.length; // so won't throw if data.rows is missing
	  }

	  for (var r = 0; r < numRows; r++) {
	    if (eliminateNullRows) {
	      var rowHasNull = false;
	      for (var c = 0; c < numCols; c++) {
	        if (data.rows[r].columns[c].is_null) {
	          rowHasNull = true;
	          break;
	        }
	      }
	      if (rowHasNull) {
	        continue; // eslint-disable-line no-continue
	      }
	    }

	    var row = {};
	    for (var _c = 0; _c < numCols; _c++) {
	      var fieldName = formattedResult.fields[_c].name;
	      var fieldType = formattedResult.fields[_c].type;
	      var fieldIsArray = formattedResult.fields[_c].is_array;
	      var fieldPrecision = data.row_desc[_c].col_type.precision;
	      if (fieldIsArray) {
	        if (data.rows[r].cols[_c].is_null) {
	          row[fieldName] = "NULL";
	          continue; // eslint-disable-line no-continue
	        }
	        row[fieldName] = [];
	        var arrayNumElems = data.rows[r].cols[_c].val.arr_val.length;
	        for (var e = 0; e < arrayNumElems; e++) {
	          var elemDatum = data.rows[r].cols[_c].val.arr_val[e];
	          if (elemDatum.is_null) {
	            row[fieldName].push("NULL");
	            continue; // eslint-disable-line no-continue
	          }
	          switch (fieldType) {
	            case "BOOL":
	              row[fieldName].push(Boolean(elemDatum.val.int_val));
	              break;
	            case "SMALLINT":
	            case "INT":
	            case "BIGINT":
	            case "TINYINT":
	              row[fieldName].push(elemDatum.val.int_val);
	              break;
	            case "FLOAT":
	            case "DOUBLE":
	            case "DECIMAL":
	              row[fieldName].push(elemDatum.val.real_val);
	              break;
	            case "STR":
	              row[fieldName].push(elemDatum.val.str_val);
	              break;
	            case "TIME":
	            case "TIMESTAMP":
	            case "DATE":
	              var timeInMs = (0, _helpers.timestampToMs)(elemDatum.val.int_val, fieldPrecision);
	              row[fieldName].push(timeInMs);
	              break;
	            default:
	              throw new Error("Unrecognized array field type: " + fieldType);
	          }
	        }
	      } else {
	        var scalarDatum = data.rows[r].cols[_c];
	        if (scalarDatum.is_null) {
	          row[fieldName] = "NULL";
	          continue; // eslint-disable-line no-continue
	        }
	        switch (fieldType) {
	          case "BOOL":
	            row[fieldName] = Boolean(scalarDatum.val.int_val);
	            break;
	          case "SMALLINT":
	          case "INT":
	          case "BIGINT":
	          case "TINYINT":
	            row[fieldName] = scalarDatum.val.int_val;
	            break;
	          case "FLOAT":
	          case "DOUBLE":
	          case "DECIMAL":
	            row[fieldName] = scalarDatum.val.real_val;
	            break;
	          case "STR":
	            row[fieldName] = scalarDatum.val.str_val;
	            break;
	          case "TIME":
	          case "TIMESTAMP":
	          case "DATE":
	            var _timeInMs = (0, _helpers.timestampToMs)(scalarDatum.val.int_val, fieldPrecision);
	            row[fieldName] = new Date(_timeInMs);
	            break;
	          case "POINT":
	          case "LINESTRING":
	          case "POLYGON":
	          case "MULTIPOLYGON":
	            row[fieldName] = scalarDatum.val.str_val;
	            break;
	          default:
	            throw new Error("Unrecognized field type: " + fieldType);
	        }
	      }
	    }
	    formattedResult.results.push(row);
	  }
	  return formattedResult;
	}

/***/ })
/******/ ])
});
;