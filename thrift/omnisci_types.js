//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const common_ttypes = require('./common_types');
const completion_hints_ttypes = require('./completion_hints_types');
const serialized_result_set_ttypes = require('./serialized_result_set_types');
const extension_functions_ttypes = require('./extension_functions_types');


const ttypes = module.exports = {};
ttypes.TExecuteMode = {
  'GPU' : 1,
  'CPU' : 2
};
ttypes.TSourceType = {
  'DELIMITED_FILE' : 0,
  'GEO_FILE' : 1,
  'PARQUET_FILE' : 2,
  'RASTER_FILE' : 3,
  'ODBC' : 4
};
ttypes.TPartitionDetail = {
  'DEFAULT' : 0,
  'REPLICATED' : 1,
  'SHARDED' : 2,
  'OTHER' : 3
};
ttypes.TGeoFileLayerContents = {
  'EMPTY' : 0,
  'GEO' : 1,
  'NON_GEO' : 2,
  'UNSUPPORTED_GEO' : 3
};
ttypes.TImportHeaderRow = {
  'AUTODETECT' : 0,
  'NO_HEADER' : 1,
  'HAS_HEADER' : 2
};
ttypes.TRole = {
  'SERVER' : 0,
  'AGGREGATOR' : 1,
  'LEAF' : 2,
  'STRING_DICTIONARY' : 3
};
ttypes.TTableType = {
  'DEFAULT' : 0,
  'TEMPORARY' : 1,
  'FOREIGN' : 2,
  'VIEW' : 3
};
ttypes.TTableRefreshUpdateType = {
  'ALL' : 0,
  'APPEND' : 1
};
ttypes.TTableRefreshTimingType = {
  'MANUAL' : 0,
  'SCHEDULED' : 1
};
ttypes.TTableRefreshIntervalType = {
  'NONE' : 0,
  'HOUR' : 1,
  'DAY' : 2
};
ttypes.TMergeType = {
  'UNION' : 0,
  'REDUCE' : 1
};
ttypes.TRasterPointType = {
  'NONE' : 0,
  'AUTO' : 1,
  'SMALLINT' : 2,
  'INT' : 3,
  'FLOAT' : 4,
  'DOUBLE' : 5,
  'POINT' : 6
};
ttypes.TRasterPointTransform = {
  'NONE' : 0,
  'AUTO' : 1,
  'FILE' : 2,
  'WORLD' : 3
};
ttypes.TQueryType = {
  'UNKNOWN' : 0,
  'READ' : 1,
  'WRITE' : 2,
  'SCHEMA_READ' : 3,
  'SCHEMA_WRITE' : 4
};
ttypes.TArrowTransport = {
  'SHARED_MEMORY' : 0,
  'WIRE' : 1
};
ttypes.TExpressionRangeType = {
  'INVALID' : 0,
  'INTEGER' : 1,
  'FLOAT' : 2,
  'DOUBLE' : 3
};
ttypes.TDBObjectType = {
  'AbstractDBObjectType' : 0,
  'DatabaseDBObjectType' : 1,
  'TableDBObjectType' : 2,
  'DashboardDBObjectType' : 3,
  'ViewDBObjectType' : 4,
  'ServerDBObjectType' : 5
};
ttypes.TDataSourceType = {
  'TABLE' : 0
};
const TDatumVal = module.exports.TDatumVal = class {
  constructor(args) {
    this.int_val = null;
    this.real_val = null;
    this.str_val = null;
    this.arr_val = null;
    if (args) {
      if (args.int_val !== undefined && args.int_val !== null) {
        this.int_val = args.int_val;
      }
      if (args.real_val !== undefined && args.real_val !== null) {
        this.real_val = args.real_val;
      }
      if (args.str_val !== undefined && args.str_val !== null) {
        this.str_val = args.str_val;
      }
      if (args.arr_val !== undefined && args.arr_val !== null) {
        this.arr_val = Thrift.copyList(args.arr_val, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.int_val = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.real_val = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.str_val = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.arr_val = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new ttypes.TDatum();
            elem3.read(input);
            this.arr_val.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDatumVal');
    if (this.int_val !== null && this.int_val !== undefined) {
      output.writeFieldBegin('int_val', Thrift.Type.I64, 1);
      output.writeI64(this.int_val);
      output.writeFieldEnd();
    }
    if (this.real_val !== null && this.real_val !== undefined) {
      output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.real_val);
      output.writeFieldEnd();
    }
    if (this.str_val !== null && this.str_val !== undefined) {
      output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);
      output.writeString(this.str_val);
      output.writeFieldEnd();
    }
    if (this.arr_val !== null && this.arr_val !== undefined) {
      output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);
      for (let iter4 in this.arr_val) {
        if (this.arr_val.hasOwnProperty(iter4)) {
          iter4 = this.arr_val[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDatum = module.exports.TDatum = class {
  constructor(args) {
    this.val = null;
    this.is_null = null;
    if (args) {
      if (args.val !== undefined && args.val !== null) {
        this.val = new ttypes.TDatumVal(args.val);
      }
      if (args.is_null !== undefined && args.is_null !== null) {
        this.is_null = args.is_null;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.val = new ttypes.TDatumVal();
          this.val.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.is_null = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDatum');
    if (this.val !== null && this.val !== undefined) {
      output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);
      this.val.write(output);
      output.writeFieldEnd();
    }
    if (this.is_null !== null && this.is_null !== undefined) {
      output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
      output.writeBool(this.is_null);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TStringValue = module.exports.TStringValue = class {
  constructor(args) {
    this.str_val = null;
    this.is_null = null;
    if (args) {
      if (args.str_val !== undefined && args.str_val !== null) {
        this.str_val = args.str_val;
      }
      if (args.is_null !== undefined && args.is_null !== null) {
        this.is_null = args.is_null;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.str_val = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.is_null = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TStringValue');
    if (this.str_val !== null && this.str_val !== undefined) {
      output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);
      output.writeString(this.str_val);
      output.writeFieldEnd();
    }
    if (this.is_null !== null && this.is_null !== undefined) {
      output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
      output.writeBool(this.is_null);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TColumnType = module.exports.TColumnType = class {
  constructor(args) {
    this.col_name = null;
    this.col_type = null;
    this.is_reserved_keyword = null;
    this.src_name = null;
    this.is_system = null;
    this.is_physical = null;
    this.col_id = null;
    this.default_value = null;
    if (args) {
      if (args.col_name !== undefined && args.col_name !== null) {
        this.col_name = args.col_name;
      }
      if (args.col_type !== undefined && args.col_type !== null) {
        this.col_type = new common_ttypes.TTypeInfo(args.col_type);
      }
      if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {
        this.is_reserved_keyword = args.is_reserved_keyword;
      }
      if (args.src_name !== undefined && args.src_name !== null) {
        this.src_name = args.src_name;
      }
      if (args.is_system !== undefined && args.is_system !== null) {
        this.is_system = args.is_system;
      }
      if (args.is_physical !== undefined && args.is_physical !== null) {
        this.is_physical = args.is_physical;
      }
      if (args.col_id !== undefined && args.col_id !== null) {
        this.col_id = args.col_id;
      }
      if (args.default_value !== undefined && args.default_value !== null) {
        this.default_value = args.default_value;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.col_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.col_type = new common_ttypes.TTypeInfo();
          this.col_type.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.is_reserved_keyword = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.src_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.is_system = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.is_physical = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.col_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.default_value = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TColumnType');
    if (this.col_name !== null && this.col_name !== undefined) {
      output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);
      output.writeString(this.col_name);
      output.writeFieldEnd();
    }
    if (this.col_type !== null && this.col_type !== undefined) {
      output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);
      this.col_type.write(output);
      output.writeFieldEnd();
    }
    if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {
      output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);
      output.writeBool(this.is_reserved_keyword);
      output.writeFieldEnd();
    }
    if (this.src_name !== null && this.src_name !== undefined) {
      output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);
      output.writeString(this.src_name);
      output.writeFieldEnd();
    }
    if (this.is_system !== null && this.is_system !== undefined) {
      output.writeFieldBegin('is_system', Thrift.Type.BOOL, 5);
      output.writeBool(this.is_system);
      output.writeFieldEnd();
    }
    if (this.is_physical !== null && this.is_physical !== undefined) {
      output.writeFieldBegin('is_physical', Thrift.Type.BOOL, 6);
      output.writeBool(this.is_physical);
      output.writeFieldEnd();
    }
    if (this.col_id !== null && this.col_id !== undefined) {
      output.writeFieldBegin('col_id', Thrift.Type.I64, 7);
      output.writeI64(this.col_id);
      output.writeFieldEnd();
    }
    if (this.default_value !== null && this.default_value !== undefined) {
      output.writeFieldBegin('default_value', Thrift.Type.STRING, 8);
      output.writeString(this.default_value);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TRow = module.exports.TRow = class {
  constructor(args) {
    this.cols = null;
    if (args) {
      if (args.cols !== undefined && args.cols !== null) {
        this.cols = Thrift.copyList(args.cols, [ttypes.TDatum]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.cols = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new ttypes.TDatum();
            elem8.read(input);
            this.cols.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TRow');
    if (this.cols !== null && this.cols !== undefined) {
      output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
      for (let iter9 in this.cols) {
        if (this.cols.hasOwnProperty(iter9)) {
          iter9 = this.cols[iter9];
          iter9.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TColumnData = module.exports.TColumnData = class {
  constructor(args) {
    this.int_col = null;
    this.real_col = null;
    this.str_col = null;
    this.arr_col = null;
    if (args) {
      if (args.int_col !== undefined && args.int_col !== null) {
        this.int_col = Thrift.copyList(args.int_col, [null]);
      }
      if (args.real_col !== undefined && args.real_col !== null) {
        this.real_col = Thrift.copyList(args.real_col, [null]);
      }
      if (args.str_col !== undefined && args.str_col !== null) {
        this.str_col = Thrift.copyList(args.str_col, [null]);
      }
      if (args.arr_col !== undefined && args.arr_col !== null) {
        this.arr_col = Thrift.copyList(args.arr_col, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.int_col = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = input.readI64();
            this.int_col.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.real_col = [];
          const _rtmp315 = input.readListBegin();
          const _size14 = _rtmp315.size || 0;
          for (let _i16 = 0; _i16 < _size14; ++_i16) {
            let elem17 = null;
            elem17 = input.readDouble();
            this.real_col.push(elem17);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.str_col = [];
          const _rtmp319 = input.readListBegin();
          const _size18 = _rtmp319.size || 0;
          for (let _i20 = 0; _i20 < _size18; ++_i20) {
            let elem21 = null;
            elem21 = input.readString();
            this.str_col.push(elem21);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.arr_col = [];
          const _rtmp323 = input.readListBegin();
          const _size22 = _rtmp323.size || 0;
          for (let _i24 = 0; _i24 < _size22; ++_i24) {
            let elem25 = null;
            elem25 = new ttypes.TColumn();
            elem25.read(input);
            this.arr_col.push(elem25);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TColumnData');
    if (this.int_col !== null && this.int_col !== undefined) {
      output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.int_col.length);
      for (let iter26 in this.int_col) {
        if (this.int_col.hasOwnProperty(iter26)) {
          iter26 = this.int_col[iter26];
          output.writeI64(iter26);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.real_col !== null && this.real_col !== undefined) {
      output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);
      for (let iter27 in this.real_col) {
        if (this.real_col.hasOwnProperty(iter27)) {
          iter27 = this.real_col[iter27];
          output.writeDouble(iter27);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.str_col !== null && this.str_col !== undefined) {
      output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.str_col.length);
      for (let iter28 in this.str_col) {
        if (this.str_col.hasOwnProperty(iter28)) {
          iter28 = this.str_col[iter28];
          output.writeString(iter28);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.arr_col !== null && this.arr_col !== undefined) {
      output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);
      for (let iter29 in this.arr_col) {
        if (this.arr_col.hasOwnProperty(iter29)) {
          iter29 = this.arr_col[iter29];
          iter29.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TColumn = module.exports.TColumn = class {
  constructor(args) {
    this.data = null;
    this.nulls = null;
    if (args) {
      if (args.data !== undefined && args.data !== null) {
        this.data = new ttypes.TColumnData(args.data);
      }
      if (args.nulls !== undefined && args.nulls !== null) {
        this.nulls = Thrift.copyList(args.nulls, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.data = new ttypes.TColumnData();
          this.data.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.nulls = [];
          const _rtmp331 = input.readListBegin();
          const _size30 = _rtmp331.size || 0;
          for (let _i32 = 0; _i32 < _size30; ++_i32) {
            let elem33 = null;
            elem33 = input.readBool();
            this.nulls.push(elem33);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TColumn');
    if (this.data !== null && this.data !== undefined) {
      output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
      this.data.write(output);
      output.writeFieldEnd();
    }
    if (this.nulls !== null && this.nulls !== undefined) {
      output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);
      for (let iter34 in this.nulls) {
        if (this.nulls.hasOwnProperty(iter34)) {
          iter34 = this.nulls[iter34];
          output.writeBool(iter34);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TStringRow = module.exports.TStringRow = class {
  constructor(args) {
    this.cols = null;
    if (args) {
      if (args.cols !== undefined && args.cols !== null) {
        this.cols = Thrift.copyList(args.cols, [ttypes.TStringValue]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.cols = [];
          const _rtmp336 = input.readListBegin();
          const _size35 = _rtmp336.size || 0;
          for (let _i37 = 0; _i37 < _size35; ++_i37) {
            let elem38 = null;
            elem38 = new ttypes.TStringValue();
            elem38.read(input);
            this.cols.push(elem38);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TStringRow');
    if (this.cols !== null && this.cols !== undefined) {
      output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
      for (let iter39 in this.cols) {
        if (this.cols.hasOwnProperty(iter39)) {
          iter39 = this.cols[iter39];
          iter39.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TKrb5Session = module.exports.TKrb5Session = class {
  constructor(args) {
    this.sessionId = null;
    this.krbToken = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.krbToken !== undefined && args.krbToken !== null) {
        this.krbToken = args.krbToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.krbToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TKrb5Session');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.krbToken !== null && this.krbToken !== undefined) {
      output.writeFieldBegin('krbToken', Thrift.Type.STRING, 2);
      output.writeString(this.krbToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TStepResult = module.exports.TStepResult = class {
  constructor(args) {
    this.serialized_rows = null;
    this.execution_finished = null;
    this.merge_type = null;
    this.sharded = null;
    this.row_desc = null;
    this.node_id = null;
    if (args) {
      if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
        this.serialized_rows = new serialized_result_set_ttypes.TSerializedRows(args.serialized_rows);
      }
      if (args.execution_finished !== undefined && args.execution_finished !== null) {
        this.execution_finished = args.execution_finished;
      }
      if (args.merge_type !== undefined && args.merge_type !== null) {
        this.merge_type = args.merge_type;
      }
      if (args.sharded !== undefined && args.sharded !== null) {
        this.sharded = args.sharded;
      }
      if (args.row_desc !== undefined && args.row_desc !== null) {
        this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
      }
      if (args.node_id !== undefined && args.node_id !== null) {
        this.node_id = args.node_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.serialized_rows = new serialized_result_set_ttypes.TSerializedRows();
          this.serialized_rows.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.execution_finished = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.merge_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.sharded = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.row_desc = [];
          const _rtmp341 = input.readListBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let elem43 = null;
            elem43 = new ttypes.TColumnType();
            elem43.read(input);
            this.row_desc.push(elem43);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.node_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TStepResult');
    if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
      output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);
      this.serialized_rows.write(output);
      output.writeFieldEnd();
    }
    if (this.execution_finished !== null && this.execution_finished !== undefined) {
      output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);
      output.writeBool(this.execution_finished);
      output.writeFieldEnd();
    }
    if (this.merge_type !== null && this.merge_type !== undefined) {
      output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);
      output.writeI32(this.merge_type);
      output.writeFieldEnd();
    }
    if (this.sharded !== null && this.sharded !== undefined) {
      output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);
      output.writeBool(this.sharded);
      output.writeFieldEnd();
    }
    if (this.row_desc !== null && this.row_desc !== undefined) {
      output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
      for (let iter44 in this.row_desc) {
        if (this.row_desc.hasOwnProperty(iter44)) {
          iter44 = this.row_desc[iter44];
          iter44.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.node_id !== null && this.node_id !== undefined) {
      output.writeFieldBegin('node_id', Thrift.Type.I32, 6);
      output.writeI32(this.node_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TRowSet = module.exports.TRowSet = class {
  constructor(args) {
    this.row_desc = null;
    this.rows = null;
    this.columns = null;
    this.is_columnar = null;
    if (args) {
      if (args.row_desc !== undefined && args.row_desc !== null) {
        this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
      }
      if (args.rows !== undefined && args.rows !== null) {
        this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
      }
      if (args.columns !== undefined && args.columns !== null) {
        this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);
      }
      if (args.is_columnar !== undefined && args.is_columnar !== null) {
        this.is_columnar = args.is_columnar;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.row_desc = [];
          const _rtmp346 = input.readListBegin();
          const _size45 = _rtmp346.size || 0;
          for (let _i47 = 0; _i47 < _size45; ++_i47) {
            let elem48 = null;
            elem48 = new ttypes.TColumnType();
            elem48.read(input);
            this.row_desc.push(elem48);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.rows = [];
          const _rtmp350 = input.readListBegin();
          const _size49 = _rtmp350.size || 0;
          for (let _i51 = 0; _i51 < _size49; ++_i51) {
            let elem52 = null;
            elem52 = new ttypes.TRow();
            elem52.read(input);
            this.rows.push(elem52);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.columns = [];
          const _rtmp354 = input.readListBegin();
          const _size53 = _rtmp354.size || 0;
          for (let _i55 = 0; _i55 < _size53; ++_i55) {
            let elem56 = null;
            elem56 = new ttypes.TColumn();
            elem56.read(input);
            this.columns.push(elem56);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.is_columnar = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TRowSet');
    if (this.row_desc !== null && this.row_desc !== undefined) {
      output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
      for (let iter57 in this.row_desc) {
        if (this.row_desc.hasOwnProperty(iter57)) {
          iter57 = this.row_desc[iter57];
          iter57.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.rows !== null && this.rows !== undefined) {
      output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
      for (let iter58 in this.rows) {
        if (this.rows.hasOwnProperty(iter58)) {
          iter58 = this.rows[iter58];
          iter58.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.columns !== null && this.columns !== undefined) {
      output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
      for (let iter59 in this.columns) {
        if (this.columns.hasOwnProperty(iter59)) {
          iter59 = this.columns[iter59];
          iter59.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.is_columnar !== null && this.is_columnar !== undefined) {
      output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);
      output.writeBool(this.is_columnar);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TQueryResult = module.exports.TQueryResult = class {
  constructor(args) {
    this.row_set = null;
    this.execution_time_ms = null;
    this.total_time_ms = null;
    this.nonce = null;
    this.debug = null;
    this.success = true;
    this.query_type = 0;
    if (args) {
      if (args.row_set !== undefined && args.row_set !== null) {
        this.row_set = new ttypes.TRowSet(args.row_set);
      }
      if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
        this.execution_time_ms = args.execution_time_ms;
      }
      if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
        this.total_time_ms = args.total_time_ms;
      }
      if (args.nonce !== undefined && args.nonce !== null) {
        this.nonce = args.nonce;
      }
      if (args.debug !== undefined && args.debug !== null) {
        this.debug = args.debug;
      }
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.query_type !== undefined && args.query_type !== null) {
        this.query_type = args.query_type;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.row_set = new ttypes.TRowSet();
          this.row_set.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.execution_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.total_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.nonce = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.debug = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.query_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TQueryResult');
    if (this.row_set !== null && this.row_set !== undefined) {
      output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
      this.row_set.write(output);
      output.writeFieldEnd();
    }
    if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
      output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);
      output.writeI64(this.execution_time_ms);
      output.writeFieldEnd();
    }
    if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
      output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);
      output.writeI64(this.total_time_ms);
      output.writeFieldEnd();
    }
    if (this.nonce !== null && this.nonce !== undefined) {
      output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
      output.writeString(this.nonce);
      output.writeFieldEnd();
    }
    if (this.debug !== null && this.debug !== undefined) {
      output.writeFieldBegin('debug', Thrift.Type.STRING, 5);
      output.writeString(this.debug);
      output.writeFieldEnd();
    }
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 6);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.query_type !== null && this.query_type !== undefined) {
      output.writeFieldBegin('query_type', Thrift.Type.I32, 7);
      output.writeI32(this.query_type);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDataFrame = module.exports.TDataFrame = class {
  constructor(args) {
    this.sm_handle = null;
    this.sm_size = null;
    this.df_handle = null;
    this.df_size = null;
    this.execution_time_ms = null;
    this.arrow_conversion_time_ms = null;
    this.df_buffer = null;
    if (args) {
      if (args.sm_handle !== undefined && args.sm_handle !== null) {
        this.sm_handle = args.sm_handle;
      }
      if (args.sm_size !== undefined && args.sm_size !== null) {
        this.sm_size = args.sm_size;
      }
      if (args.df_handle !== undefined && args.df_handle !== null) {
        this.df_handle = args.df_handle;
      }
      if (args.df_size !== undefined && args.df_size !== null) {
        this.df_size = args.df_size;
      }
      if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
        this.execution_time_ms = args.execution_time_ms;
      }
      if (args.arrow_conversion_time_ms !== undefined && args.arrow_conversion_time_ms !== null) {
        this.arrow_conversion_time_ms = args.arrow_conversion_time_ms;
      }
      if (args.df_buffer !== undefined && args.df_buffer !== null) {
        this.df_buffer = args.df_buffer;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sm_handle = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.sm_size = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.df_handle = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.df_size = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.execution_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.arrow_conversion_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.df_buffer = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDataFrame');
    if (this.sm_handle !== null && this.sm_handle !== undefined) {
      output.writeFieldBegin('sm_handle', Thrift.Type.STRING, 1);
      output.writeBinary(this.sm_handle);
      output.writeFieldEnd();
    }
    if (this.sm_size !== null && this.sm_size !== undefined) {
      output.writeFieldBegin('sm_size', Thrift.Type.I64, 2);
      output.writeI64(this.sm_size);
      output.writeFieldEnd();
    }
    if (this.df_handle !== null && this.df_handle !== undefined) {
      output.writeFieldBegin('df_handle', Thrift.Type.STRING, 3);
      output.writeBinary(this.df_handle);
      output.writeFieldEnd();
    }
    if (this.df_size !== null && this.df_size !== undefined) {
      output.writeFieldBegin('df_size', Thrift.Type.I64, 4);
      output.writeI64(this.df_size);
      output.writeFieldEnd();
    }
    if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
      output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 5);
      output.writeI64(this.execution_time_ms);
      output.writeFieldEnd();
    }
    if (this.arrow_conversion_time_ms !== null && this.arrow_conversion_time_ms !== undefined) {
      output.writeFieldBegin('arrow_conversion_time_ms', Thrift.Type.I64, 6);
      output.writeI64(this.arrow_conversion_time_ms);
      output.writeFieldEnd();
    }
    if (this.df_buffer !== null && this.df_buffer !== undefined) {
      output.writeFieldBegin('df_buffer', Thrift.Type.STRING, 7);
      output.writeBinary(this.df_buffer);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDBInfo = module.exports.TDBInfo = class {
  constructor(args) {
    this.db_name = null;
    this.db_owner = null;
    if (args) {
      if (args.db_name !== undefined && args.db_name !== null) {
        this.db_name = args.db_name;
      }
      if (args.db_owner !== undefined && args.db_owner !== null) {
        this.db_owner = args.db_owner;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.db_owner = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDBInfo');
    if (this.db_name !== null && this.db_name !== undefined) {
      output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
      output.writeString(this.db_name);
      output.writeFieldEnd();
    }
    if (this.db_owner !== null && this.db_owner !== undefined) {
      output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);
      output.writeString(this.db_owner);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TOmniSciException = module.exports.TOmniSciException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "TOmniSciException";
    this.error_msg = null;
    if (args) {
      if (args.error_msg !== undefined && args.error_msg !== null) {
        this.error_msg = args.error_msg;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.error_msg = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TOmniSciException');
    if (this.error_msg !== null && this.error_msg !== undefined) {
      output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);
      output.writeString(this.error_msg);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TCopyParams = module.exports.TCopyParams = class {
  constructor(args) {
    this.delimiter = null;
    this.null_str = null;
    this.has_header = 0;
    this.quoted = null;
    this.quote = null;
    this.escape = null;
    this.line_delim = null;
    this.array_delim = null;
    this.array_begin = null;
    this.array_end = null;
    this.threads = null;
    this.source_type = 0;
    this.s3_access_key = null;
    this.s3_secret_key = null;
    this.s3_region = null;
    this.geo_coords_encoding = 6;
    this.geo_coords_comp_param = 32;
    this.geo_coords_type = 18;
    this.geo_coords_srid = 4326;
    this.sanitize_column_names = true;
    this.geo_layer_name = null;
    this.s3_endpoint = null;
    this.geo_assign_render_groups = true;
    this.geo_explode_collections = false;
    this.source_srid = 0;
    this.s3_session_token = null;
    this.raster_point_type = 1;
    this.raster_import_bands = null;
    this.raster_scanlines_per_thread = null;
    this.raster_point_transform = 1;
    this.raster_point_compute_angle = false;
    this.raster_import_dimensions = null;
    this.odbc_dsn = null;
    this.odbc_connection_string = null;
    this.odbc_sql_select = null;
    this.odbc_username = null;
    this.odbc_password = null;
    this.odbc_credential_string = null;
    this.add_metadata_columns = null;
    if (args) {
      if (args.delimiter !== undefined && args.delimiter !== null) {
        this.delimiter = args.delimiter;
      }
      if (args.null_str !== undefined && args.null_str !== null) {
        this.null_str = args.null_str;
      }
      if (args.has_header !== undefined && args.has_header !== null) {
        this.has_header = args.has_header;
      }
      if (args.quoted !== undefined && args.quoted !== null) {
        this.quoted = args.quoted;
      }
      if (args.quote !== undefined && args.quote !== null) {
        this.quote = args.quote;
      }
      if (args.escape !== undefined && args.escape !== null) {
        this.escape = args.escape;
      }
      if (args.line_delim !== undefined && args.line_delim !== null) {
        this.line_delim = args.line_delim;
      }
      if (args.array_delim !== undefined && args.array_delim !== null) {
        this.array_delim = args.array_delim;
      }
      if (args.array_begin !== undefined && args.array_begin !== null) {
        this.array_begin = args.array_begin;
      }
      if (args.array_end !== undefined && args.array_end !== null) {
        this.array_end = args.array_end;
      }
      if (args.threads !== undefined && args.threads !== null) {
        this.threads = args.threads;
      }
      if (args.source_type !== undefined && args.source_type !== null) {
        this.source_type = args.source_type;
      }
      if (args.s3_access_key !== undefined && args.s3_access_key !== null) {
        this.s3_access_key = args.s3_access_key;
      }
      if (args.s3_secret_key !== undefined && args.s3_secret_key !== null) {
        this.s3_secret_key = args.s3_secret_key;
      }
      if (args.s3_region !== undefined && args.s3_region !== null) {
        this.s3_region = args.s3_region;
      }
      if (args.geo_coords_encoding !== undefined && args.geo_coords_encoding !== null) {
        this.geo_coords_encoding = args.geo_coords_encoding;
      }
      if (args.geo_coords_comp_param !== undefined && args.geo_coords_comp_param !== null) {
        this.geo_coords_comp_param = args.geo_coords_comp_param;
      }
      if (args.geo_coords_type !== undefined && args.geo_coords_type !== null) {
        this.geo_coords_type = args.geo_coords_type;
      }
      if (args.geo_coords_srid !== undefined && args.geo_coords_srid !== null) {
        this.geo_coords_srid = args.geo_coords_srid;
      }
      if (args.sanitize_column_names !== undefined && args.sanitize_column_names !== null) {
        this.sanitize_column_names = args.sanitize_column_names;
      }
      if (args.geo_layer_name !== undefined && args.geo_layer_name !== null) {
        this.geo_layer_name = args.geo_layer_name;
      }
      if (args.s3_endpoint !== undefined && args.s3_endpoint !== null) {
        this.s3_endpoint = args.s3_endpoint;
      }
      if (args.geo_assign_render_groups !== undefined && args.geo_assign_render_groups !== null) {
        this.geo_assign_render_groups = args.geo_assign_render_groups;
      }
      if (args.geo_explode_collections !== undefined && args.geo_explode_collections !== null) {
        this.geo_explode_collections = args.geo_explode_collections;
      }
      if (args.source_srid !== undefined && args.source_srid !== null) {
        this.source_srid = args.source_srid;
      }
      if (args.s3_session_token !== undefined && args.s3_session_token !== null) {
        this.s3_session_token = args.s3_session_token;
      }
      if (args.raster_point_type !== undefined && args.raster_point_type !== null) {
        this.raster_point_type = args.raster_point_type;
      }
      if (args.raster_import_bands !== undefined && args.raster_import_bands !== null) {
        this.raster_import_bands = args.raster_import_bands;
      }
      if (args.raster_scanlines_per_thread !== undefined && args.raster_scanlines_per_thread !== null) {
        this.raster_scanlines_per_thread = args.raster_scanlines_per_thread;
      }
      if (args.raster_point_transform !== undefined && args.raster_point_transform !== null) {
        this.raster_point_transform = args.raster_point_transform;
      }
      if (args.raster_point_compute_angle !== undefined && args.raster_point_compute_angle !== null) {
        this.raster_point_compute_angle = args.raster_point_compute_angle;
      }
      if (args.raster_import_dimensions !== undefined && args.raster_import_dimensions !== null) {
        this.raster_import_dimensions = args.raster_import_dimensions;
      }
      if (args.odbc_dsn !== undefined && args.odbc_dsn !== null) {
        this.odbc_dsn = args.odbc_dsn;
      }
      if (args.odbc_connection_string !== undefined && args.odbc_connection_string !== null) {
        this.odbc_connection_string = args.odbc_connection_string;
      }
      if (args.odbc_sql_select !== undefined && args.odbc_sql_select !== null) {
        this.odbc_sql_select = args.odbc_sql_select;
      }
      if (args.odbc_username !== undefined && args.odbc_username !== null) {
        this.odbc_username = args.odbc_username;
      }
      if (args.odbc_password !== undefined && args.odbc_password !== null) {
        this.odbc_password = args.odbc_password;
      }
      if (args.odbc_credential_string !== undefined && args.odbc_credential_string !== null) {
        this.odbc_credential_string = args.odbc_credential_string;
      }
      if (args.add_metadata_columns !== undefined && args.add_metadata_columns !== null) {
        this.add_metadata_columns = args.add_metadata_columns;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.delimiter = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.null_str = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.has_header = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.quoted = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.quote = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.escape = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.line_delim = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.array_delim = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.array_begin = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.array_end = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.threads = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.source_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.s3_access_key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.s3_secret_key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.s3_region = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.I32) {
          this.geo_coords_encoding = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.I32) {
          this.geo_coords_comp_param = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.I32) {
          this.geo_coords_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.I32) {
          this.geo_coords_srid = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.BOOL) {
          this.sanitize_column_names = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.geo_layer_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.s3_endpoint = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.BOOL) {
          this.geo_assign_render_groups = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.BOOL) {
          this.geo_explode_collections = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.I32) {
          this.source_srid = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.STRING) {
          this.s3_session_token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.I32) {
          this.raster_point_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.STRING) {
          this.raster_import_bands = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.I32) {
          this.raster_scanlines_per_thread = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.I32) {
          this.raster_point_transform = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.BOOL) {
          this.raster_point_compute_angle = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.STRING) {
          this.raster_import_dimensions = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.STRING) {
          this.odbc_dsn = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 34:
        if (ftype == Thrift.Type.STRING) {
          this.odbc_connection_string = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 35:
        if (ftype == Thrift.Type.STRING) {
          this.odbc_sql_select = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 36:
        if (ftype == Thrift.Type.STRING) {
          this.odbc_username = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 37:
        if (ftype == Thrift.Type.STRING) {
          this.odbc_password = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 38:
        if (ftype == Thrift.Type.STRING) {
          this.odbc_credential_string = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 39:
        if (ftype == Thrift.Type.STRING) {
          this.add_metadata_columns = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TCopyParams');
    if (this.delimiter !== null && this.delimiter !== undefined) {
      output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);
      output.writeString(this.delimiter);
      output.writeFieldEnd();
    }
    if (this.null_str !== null && this.null_str !== undefined) {
      output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);
      output.writeString(this.null_str);
      output.writeFieldEnd();
    }
    if (this.has_header !== null && this.has_header !== undefined) {
      output.writeFieldBegin('has_header', Thrift.Type.I32, 3);
      output.writeI32(this.has_header);
      output.writeFieldEnd();
    }
    if (this.quoted !== null && this.quoted !== undefined) {
      output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);
      output.writeBool(this.quoted);
      output.writeFieldEnd();
    }
    if (this.quote !== null && this.quote !== undefined) {
      output.writeFieldBegin('quote', Thrift.Type.STRING, 5);
      output.writeString(this.quote);
      output.writeFieldEnd();
    }
    if (this.escape !== null && this.escape !== undefined) {
      output.writeFieldBegin('escape', Thrift.Type.STRING, 6);
      output.writeString(this.escape);
      output.writeFieldEnd();
    }
    if (this.line_delim !== null && this.line_delim !== undefined) {
      output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);
      output.writeString(this.line_delim);
      output.writeFieldEnd();
    }
    if (this.array_delim !== null && this.array_delim !== undefined) {
      output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);
      output.writeString(this.array_delim);
      output.writeFieldEnd();
    }
    if (this.array_begin !== null && this.array_begin !== undefined) {
      output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);
      output.writeString(this.array_begin);
      output.writeFieldEnd();
    }
    if (this.array_end !== null && this.array_end !== undefined) {
      output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);
      output.writeString(this.array_end);
      output.writeFieldEnd();
    }
    if (this.threads !== null && this.threads !== undefined) {
      output.writeFieldBegin('threads', Thrift.Type.I32, 11);
      output.writeI32(this.threads);
      output.writeFieldEnd();
    }
    if (this.source_type !== null && this.source_type !== undefined) {
      output.writeFieldBegin('source_type', Thrift.Type.I32, 12);
      output.writeI32(this.source_type);
      output.writeFieldEnd();
    }
    if (this.s3_access_key !== null && this.s3_access_key !== undefined) {
      output.writeFieldBegin('s3_access_key', Thrift.Type.STRING, 13);
      output.writeString(this.s3_access_key);
      output.writeFieldEnd();
    }
    if (this.s3_secret_key !== null && this.s3_secret_key !== undefined) {
      output.writeFieldBegin('s3_secret_key', Thrift.Type.STRING, 14);
      output.writeString(this.s3_secret_key);
      output.writeFieldEnd();
    }
    if (this.s3_region !== null && this.s3_region !== undefined) {
      output.writeFieldBegin('s3_region', Thrift.Type.STRING, 15);
      output.writeString(this.s3_region);
      output.writeFieldEnd();
    }
    if (this.geo_coords_encoding !== null && this.geo_coords_encoding !== undefined) {
      output.writeFieldBegin('geo_coords_encoding', Thrift.Type.I32, 16);
      output.writeI32(this.geo_coords_encoding);
      output.writeFieldEnd();
    }
    if (this.geo_coords_comp_param !== null && this.geo_coords_comp_param !== undefined) {
      output.writeFieldBegin('geo_coords_comp_param', Thrift.Type.I32, 17);
      output.writeI32(this.geo_coords_comp_param);
      output.writeFieldEnd();
    }
    if (this.geo_coords_type !== null && this.geo_coords_type !== undefined) {
      output.writeFieldBegin('geo_coords_type', Thrift.Type.I32, 18);
      output.writeI32(this.geo_coords_type);
      output.writeFieldEnd();
    }
    if (this.geo_coords_srid !== null && this.geo_coords_srid !== undefined) {
      output.writeFieldBegin('geo_coords_srid', Thrift.Type.I32, 19);
      output.writeI32(this.geo_coords_srid);
      output.writeFieldEnd();
    }
    if (this.sanitize_column_names !== null && this.sanitize_column_names !== undefined) {
      output.writeFieldBegin('sanitize_column_names', Thrift.Type.BOOL, 20);
      output.writeBool(this.sanitize_column_names);
      output.writeFieldEnd();
    }
    if (this.geo_layer_name !== null && this.geo_layer_name !== undefined) {
      output.writeFieldBegin('geo_layer_name', Thrift.Type.STRING, 21);
      output.writeString(this.geo_layer_name);
      output.writeFieldEnd();
    }
    if (this.s3_endpoint !== null && this.s3_endpoint !== undefined) {
      output.writeFieldBegin('s3_endpoint', Thrift.Type.STRING, 22);
      output.writeString(this.s3_endpoint);
      output.writeFieldEnd();
    }
    if (this.geo_assign_render_groups !== null && this.geo_assign_render_groups !== undefined) {
      output.writeFieldBegin('geo_assign_render_groups', Thrift.Type.BOOL, 23);
      output.writeBool(this.geo_assign_render_groups);
      output.writeFieldEnd();
    }
    if (this.geo_explode_collections !== null && this.geo_explode_collections !== undefined) {
      output.writeFieldBegin('geo_explode_collections', Thrift.Type.BOOL, 24);
      output.writeBool(this.geo_explode_collections);
      output.writeFieldEnd();
    }
    if (this.source_srid !== null && this.source_srid !== undefined) {
      output.writeFieldBegin('source_srid', Thrift.Type.I32, 25);
      output.writeI32(this.source_srid);
      output.writeFieldEnd();
    }
    if (this.s3_session_token !== null && this.s3_session_token !== undefined) {
      output.writeFieldBegin('s3_session_token', Thrift.Type.STRING, 26);
      output.writeString(this.s3_session_token);
      output.writeFieldEnd();
    }
    if (this.raster_point_type !== null && this.raster_point_type !== undefined) {
      output.writeFieldBegin('raster_point_type', Thrift.Type.I32, 27);
      output.writeI32(this.raster_point_type);
      output.writeFieldEnd();
    }
    if (this.raster_import_bands !== null && this.raster_import_bands !== undefined) {
      output.writeFieldBegin('raster_import_bands', Thrift.Type.STRING, 28);
      output.writeString(this.raster_import_bands);
      output.writeFieldEnd();
    }
    if (this.raster_scanlines_per_thread !== null && this.raster_scanlines_per_thread !== undefined) {
      output.writeFieldBegin('raster_scanlines_per_thread', Thrift.Type.I32, 29);
      output.writeI32(this.raster_scanlines_per_thread);
      output.writeFieldEnd();
    }
    if (this.raster_point_transform !== null && this.raster_point_transform !== undefined) {
      output.writeFieldBegin('raster_point_transform', Thrift.Type.I32, 30);
      output.writeI32(this.raster_point_transform);
      output.writeFieldEnd();
    }
    if (this.raster_point_compute_angle !== null && this.raster_point_compute_angle !== undefined) {
      output.writeFieldBegin('raster_point_compute_angle', Thrift.Type.BOOL, 31);
      output.writeBool(this.raster_point_compute_angle);
      output.writeFieldEnd();
    }
    if (this.raster_import_dimensions !== null && this.raster_import_dimensions !== undefined) {
      output.writeFieldBegin('raster_import_dimensions', Thrift.Type.STRING, 32);
      output.writeString(this.raster_import_dimensions);
      output.writeFieldEnd();
    }
    if (this.odbc_dsn !== null && this.odbc_dsn !== undefined) {
      output.writeFieldBegin('odbc_dsn', Thrift.Type.STRING, 33);
      output.writeString(this.odbc_dsn);
      output.writeFieldEnd();
    }
    if (this.odbc_connection_string !== null && this.odbc_connection_string !== undefined) {
      output.writeFieldBegin('odbc_connection_string', Thrift.Type.STRING, 34);
      output.writeString(this.odbc_connection_string);
      output.writeFieldEnd();
    }
    if (this.odbc_sql_select !== null && this.odbc_sql_select !== undefined) {
      output.writeFieldBegin('odbc_sql_select', Thrift.Type.STRING, 35);
      output.writeString(this.odbc_sql_select);
      output.writeFieldEnd();
    }
    if (this.odbc_username !== null && this.odbc_username !== undefined) {
      output.writeFieldBegin('odbc_username', Thrift.Type.STRING, 36);
      output.writeString(this.odbc_username);
      output.writeFieldEnd();
    }
    if (this.odbc_password !== null && this.odbc_password !== undefined) {
      output.writeFieldBegin('odbc_password', Thrift.Type.STRING, 37);
      output.writeString(this.odbc_password);
      output.writeFieldEnd();
    }
    if (this.odbc_credential_string !== null && this.odbc_credential_string !== undefined) {
      output.writeFieldBegin('odbc_credential_string', Thrift.Type.STRING, 38);
      output.writeString(this.odbc_credential_string);
      output.writeFieldEnd();
    }
    if (this.add_metadata_columns !== null && this.add_metadata_columns !== undefined) {
      output.writeFieldBegin('add_metadata_columns', Thrift.Type.STRING, 39);
      output.writeString(this.add_metadata_columns);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TCreateParams = module.exports.TCreateParams = class {
  constructor(args) {
    this.is_replicated = null;
    if (args) {
      if (args.is_replicated !== undefined && args.is_replicated !== null) {
        this.is_replicated = args.is_replicated;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.is_replicated = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TCreateParams');
    if (this.is_replicated !== null && this.is_replicated !== undefined) {
      output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 1);
      output.writeBool(this.is_replicated);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDetectResult = module.exports.TDetectResult = class {
  constructor(args) {
    this.row_set = null;
    this.copy_params = null;
    if (args) {
      if (args.row_set !== undefined && args.row_set !== null) {
        this.row_set = new ttypes.TRowSet(args.row_set);
      }
      if (args.copy_params !== undefined && args.copy_params !== null) {
        this.copy_params = new ttypes.TCopyParams(args.copy_params);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.row_set = new ttypes.TRowSet();
          this.row_set.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.copy_params = new ttypes.TCopyParams();
          this.copy_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDetectResult');
    if (this.row_set !== null && this.row_set !== undefined) {
      output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
      this.row_set.write(output);
      output.writeFieldEnd();
    }
    if (this.copy_params !== null && this.copy_params !== undefined) {
      output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);
      this.copy_params.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TImportStatus = module.exports.TImportStatus = class {
  constructor(args) {
    this.elapsed = null;
    this.rows_completed = null;
    this.rows_estimated = null;
    this.rows_rejected = null;
    if (args) {
      if (args.elapsed !== undefined && args.elapsed !== null) {
        this.elapsed = args.elapsed;
      }
      if (args.rows_completed !== undefined && args.rows_completed !== null) {
        this.rows_completed = args.rows_completed;
      }
      if (args.rows_estimated !== undefined && args.rows_estimated !== null) {
        this.rows_estimated = args.rows_estimated;
      }
      if (args.rows_rejected !== undefined && args.rows_rejected !== null) {
        this.rows_rejected = args.rows_rejected;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.elapsed = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.rows_completed = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.rows_estimated = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.rows_rejected = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TImportStatus');
    if (this.elapsed !== null && this.elapsed !== undefined) {
      output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);
      output.writeI64(this.elapsed);
      output.writeFieldEnd();
    }
    if (this.rows_completed !== null && this.rows_completed !== undefined) {
      output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);
      output.writeI64(this.rows_completed);
      output.writeFieldEnd();
    }
    if (this.rows_estimated !== null && this.rows_estimated !== undefined) {
      output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);
      output.writeI64(this.rows_estimated);
      output.writeFieldEnd();
    }
    if (this.rows_rejected !== null && this.rows_rejected !== undefined) {
      output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);
      output.writeI64(this.rows_rejected);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TFrontendView = module.exports.TFrontendView = class {
  constructor(args) {
    this.view_name = null;
    this.view_state = null;
    this.image_hash = null;
    this.update_time = null;
    this.view_metadata = null;
    if (args) {
      if (args.view_name !== undefined && args.view_name !== null) {
        this.view_name = args.view_name;
      }
      if (args.view_state !== undefined && args.view_state !== null) {
        this.view_state = args.view_state;
      }
      if (args.image_hash !== undefined && args.image_hash !== null) {
        this.image_hash = args.image_hash;
      }
      if (args.update_time !== undefined && args.update_time !== null) {
        this.update_time = args.update_time;
      }
      if (args.view_metadata !== undefined && args.view_metadata !== null) {
        this.view_metadata = args.view_metadata;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.view_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.view_state = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.image_hash = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.update_time = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.view_metadata = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TFrontendView');
    if (this.view_name !== null && this.view_name !== undefined) {
      output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);
      output.writeString(this.view_name);
      output.writeFieldEnd();
    }
    if (this.view_state !== null && this.view_state !== undefined) {
      output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
      output.writeString(this.view_state);
      output.writeFieldEnd();
    }
    if (this.image_hash !== null && this.image_hash !== undefined) {
      output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
      output.writeString(this.image_hash);
      output.writeFieldEnd();
    }
    if (this.update_time !== null && this.update_time !== undefined) {
      output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
      output.writeString(this.update_time);
      output.writeFieldEnd();
    }
    if (this.view_metadata !== null && this.view_metadata !== undefined) {
      output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);
      output.writeString(this.view_metadata);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TServerStatus = module.exports.TServerStatus = class {
  constructor(args) {
    this.read_only = null;
    this.version = null;
    this.rendering_enabled = null;
    this.start_time = null;
    this.edition = null;
    this.host_name = null;
    this.poly_rendering_enabled = null;
    this.role = null;
    this.renderer_status_json = null;
    if (args) {
      if (args.read_only !== undefined && args.read_only !== null) {
        this.read_only = args.read_only;
      }
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
      if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {
        this.rendering_enabled = args.rendering_enabled;
      }
      if (args.start_time !== undefined && args.start_time !== null) {
        this.start_time = args.start_time;
      }
      if (args.edition !== undefined && args.edition !== null) {
        this.edition = args.edition;
      }
      if (args.host_name !== undefined && args.host_name !== null) {
        this.host_name = args.host_name;
      }
      if (args.poly_rendering_enabled !== undefined && args.poly_rendering_enabled !== null) {
        this.poly_rendering_enabled = args.poly_rendering_enabled;
      }
      if (args.role !== undefined && args.role !== null) {
        this.role = args.role;
      }
      if (args.renderer_status_json !== undefined && args.renderer_status_json !== null) {
        this.renderer_status_json = args.renderer_status_json;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.read_only = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.version = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.rendering_enabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.start_time = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.edition = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.host_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.poly_rendering_enabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.role = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.renderer_status_json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TServerStatus');
    if (this.read_only !== null && this.read_only !== undefined) {
      output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);
      output.writeBool(this.read_only);
      output.writeFieldEnd();
    }
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.STRING, 2);
      output.writeString(this.version);
      output.writeFieldEnd();
    }
    if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {
      output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);
      output.writeBool(this.rendering_enabled);
      output.writeFieldEnd();
    }
    if (this.start_time !== null && this.start_time !== undefined) {
      output.writeFieldBegin('start_time', Thrift.Type.I64, 4);
      output.writeI64(this.start_time);
      output.writeFieldEnd();
    }
    if (this.edition !== null && this.edition !== undefined) {
      output.writeFieldBegin('edition', Thrift.Type.STRING, 5);
      output.writeString(this.edition);
      output.writeFieldEnd();
    }
    if (this.host_name !== null && this.host_name !== undefined) {
      output.writeFieldBegin('host_name', Thrift.Type.STRING, 6);
      output.writeString(this.host_name);
      output.writeFieldEnd();
    }
    if (this.poly_rendering_enabled !== null && this.poly_rendering_enabled !== undefined) {
      output.writeFieldBegin('poly_rendering_enabled', Thrift.Type.BOOL, 7);
      output.writeBool(this.poly_rendering_enabled);
      output.writeFieldEnd();
    }
    if (this.role !== null && this.role !== undefined) {
      output.writeFieldBegin('role', Thrift.Type.I32, 8);
      output.writeI32(this.role);
      output.writeFieldEnd();
    }
    if (this.renderer_status_json !== null && this.renderer_status_json !== undefined) {
      output.writeFieldBegin('renderer_status_json', Thrift.Type.STRING, 9);
      output.writeString(this.renderer_status_json);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TPixel = module.exports.TPixel = class {
  constructor(args) {
    this.x = null;
    this.y = null;
    if (args) {
      if (args.x !== undefined && args.x !== null) {
        this.x = args.x;
      }
      if (args.y !== undefined && args.y !== null) {
        this.y = args.y;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.x = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.y = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TPixel');
    if (this.x !== null && this.x !== undefined) {
      output.writeFieldBegin('x', Thrift.Type.I64, 1);
      output.writeI64(this.x);
      output.writeFieldEnd();
    }
    if (this.y !== null && this.y !== undefined) {
      output.writeFieldBegin('y', Thrift.Type.I64, 2);
      output.writeI64(this.y);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TPixelTableRowResult = module.exports.TPixelTableRowResult = class {
  constructor(args) {
    this.pixel = null;
    this.vega_table_name = null;
    this.table_id = null;
    this.row_id = null;
    this.row_set = null;
    this.nonce = null;
    if (args) {
      if (args.pixel !== undefined && args.pixel !== null) {
        this.pixel = new ttypes.TPixel(args.pixel);
      }
      if (args.vega_table_name !== undefined && args.vega_table_name !== null) {
        this.vega_table_name = args.vega_table_name;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = Thrift.copyList(args.table_id, [null]);
      }
      if (args.row_id !== undefined && args.row_id !== null) {
        this.row_id = Thrift.copyList(args.row_id, [null]);
      }
      if (args.row_set !== undefined && args.row_set !== null) {
        this.row_set = new ttypes.TRowSet(args.row_set);
      }
      if (args.nonce !== undefined && args.nonce !== null) {
        this.nonce = args.nonce;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.pixel = new ttypes.TPixel();
          this.pixel.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.vega_table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.table_id = [];
          const _rtmp361 = input.readListBegin();
          const _size60 = _rtmp361.size || 0;
          for (let _i62 = 0; _i62 < _size60; ++_i62) {
            let elem63 = null;
            elem63 = input.readI64();
            this.table_id.push(elem63);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.row_id = [];
          const _rtmp365 = input.readListBegin();
          const _size64 = _rtmp365.size || 0;
          for (let _i66 = 0; _i66 < _size64; ++_i66) {
            let elem67 = null;
            elem67 = input.readI64();
            this.row_id.push(elem67);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.row_set = new ttypes.TRowSet();
          this.row_set.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.nonce = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TPixelTableRowResult');
    if (this.pixel !== null && this.pixel !== undefined) {
      output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);
      this.pixel.write(output);
      output.writeFieldEnd();
    }
    if (this.vega_table_name !== null && this.vega_table_name !== undefined) {
      output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);
      output.writeString(this.vega_table_name);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.table_id.length);
      for (let iter68 in this.table_id) {
        if (this.table_id.hasOwnProperty(iter68)) {
          iter68 = this.table_id[iter68];
          output.writeI64(iter68);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.row_id !== null && this.row_id !== undefined) {
      output.writeFieldBegin('row_id', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.I64, this.row_id.length);
      for (let iter69 in this.row_id) {
        if (this.row_id.hasOwnProperty(iter69)) {
          iter69 = this.row_id[iter69];
          output.writeI64(iter69);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.row_set !== null && this.row_set !== undefined) {
      output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);
      this.row_set.write(output);
      output.writeFieldEnd();
    }
    if (this.nonce !== null && this.nonce !== undefined) {
      output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);
      output.writeString(this.nonce);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TRenderResult = module.exports.TRenderResult = class {
  constructor(args) {
    this.image = null;
    this.nonce = null;
    this.execution_time_ms = null;
    this.render_time_ms = null;
    this.total_time_ms = null;
    this.vega_metadata = null;
    if (args) {
      if (args.image !== undefined && args.image !== null) {
        this.image = args.image;
      }
      if (args.nonce !== undefined && args.nonce !== null) {
        this.nonce = args.nonce;
      }
      if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
        this.execution_time_ms = args.execution_time_ms;
      }
      if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
        this.render_time_ms = args.render_time_ms;
      }
      if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
        this.total_time_ms = args.total_time_ms;
      }
      if (args.vega_metadata !== undefined && args.vega_metadata !== null) {
        this.vega_metadata = args.vega_metadata;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.image = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.nonce = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.execution_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.render_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.total_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.vega_metadata = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TRenderResult');
    if (this.image !== null && this.image !== undefined) {
      output.writeFieldBegin('image', Thrift.Type.STRING, 1);
      output.writeBinary(this.image);
      output.writeFieldEnd();
    }
    if (this.nonce !== null && this.nonce !== undefined) {
      output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
      output.writeString(this.nonce);
      output.writeFieldEnd();
    }
    if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
      output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
      output.writeI64(this.execution_time_ms);
      output.writeFieldEnd();
    }
    if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
      output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
      output.writeI64(this.render_time_ms);
      output.writeFieldEnd();
    }
    if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
      output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
      output.writeI64(this.total_time_ms);
      output.writeFieldEnd();
    }
    if (this.vega_metadata !== null && this.vega_metadata !== undefined) {
      output.writeFieldBegin('vega_metadata', Thrift.Type.STRING, 6);
      output.writeString(this.vega_metadata);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TGpuSpecification = module.exports.TGpuSpecification = class {
  constructor(args) {
    this.num_sm = null;
    this.clock_frequency_kHz = null;
    this.memory = null;
    this.compute_capability_major = null;
    this.compute_capability_minor = null;
    if (args) {
      if (args.num_sm !== undefined && args.num_sm !== null) {
        this.num_sm = args.num_sm;
      }
      if (args.clock_frequency_kHz !== undefined && args.clock_frequency_kHz !== null) {
        this.clock_frequency_kHz = args.clock_frequency_kHz;
      }
      if (args.memory !== undefined && args.memory !== null) {
        this.memory = args.memory;
      }
      if (args.compute_capability_major !== undefined && args.compute_capability_major !== null) {
        this.compute_capability_major = args.compute_capability_major;
      }
      if (args.compute_capability_minor !== undefined && args.compute_capability_minor !== null) {
        this.compute_capability_minor = args.compute_capability_minor;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.num_sm = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.clock_frequency_kHz = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.memory = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I16) {
          this.compute_capability_major = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I16) {
          this.compute_capability_minor = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TGpuSpecification');
    if (this.num_sm !== null && this.num_sm !== undefined) {
      output.writeFieldBegin('num_sm', Thrift.Type.I32, 1);
      output.writeI32(this.num_sm);
      output.writeFieldEnd();
    }
    if (this.clock_frequency_kHz !== null && this.clock_frequency_kHz !== undefined) {
      output.writeFieldBegin('clock_frequency_kHz', Thrift.Type.I64, 2);
      output.writeI64(this.clock_frequency_kHz);
      output.writeFieldEnd();
    }
    if (this.memory !== null && this.memory !== undefined) {
      output.writeFieldBegin('memory', Thrift.Type.I64, 3);
      output.writeI64(this.memory);
      output.writeFieldEnd();
    }
    if (this.compute_capability_major !== null && this.compute_capability_major !== undefined) {
      output.writeFieldBegin('compute_capability_major', Thrift.Type.I16, 4);
      output.writeI16(this.compute_capability_major);
      output.writeFieldEnd();
    }
    if (this.compute_capability_minor !== null && this.compute_capability_minor !== undefined) {
      output.writeFieldBegin('compute_capability_minor', Thrift.Type.I16, 5);
      output.writeI16(this.compute_capability_minor);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const THardwareInfo = module.exports.THardwareInfo = class {
  constructor(args) {
    this.num_gpu_hw = null;
    this.num_cpu_hw = null;
    this.num_gpu_allocated = null;
    this.start_gpu = null;
    this.host_name = null;
    this.gpu_info = null;
    if (args) {
      if (args.num_gpu_hw !== undefined && args.num_gpu_hw !== null) {
        this.num_gpu_hw = args.num_gpu_hw;
      }
      if (args.num_cpu_hw !== undefined && args.num_cpu_hw !== null) {
        this.num_cpu_hw = args.num_cpu_hw;
      }
      if (args.num_gpu_allocated !== undefined && args.num_gpu_allocated !== null) {
        this.num_gpu_allocated = args.num_gpu_allocated;
      }
      if (args.start_gpu !== undefined && args.start_gpu !== null) {
        this.start_gpu = args.start_gpu;
      }
      if (args.host_name !== undefined && args.host_name !== null) {
        this.host_name = args.host_name;
      }
      if (args.gpu_info !== undefined && args.gpu_info !== null) {
        this.gpu_info = Thrift.copyList(args.gpu_info, [ttypes.TGpuSpecification]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I16) {
          this.num_gpu_hw = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I16) {
          this.num_cpu_hw = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I16) {
          this.num_gpu_allocated = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I16) {
          this.start_gpu = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.host_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.gpu_info = [];
          const _rtmp371 = input.readListBegin();
          const _size70 = _rtmp371.size || 0;
          for (let _i72 = 0; _i72 < _size70; ++_i72) {
            let elem73 = null;
            elem73 = new ttypes.TGpuSpecification();
            elem73.read(input);
            this.gpu_info.push(elem73);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('THardwareInfo');
    if (this.num_gpu_hw !== null && this.num_gpu_hw !== undefined) {
      output.writeFieldBegin('num_gpu_hw', Thrift.Type.I16, 1);
      output.writeI16(this.num_gpu_hw);
      output.writeFieldEnd();
    }
    if (this.num_cpu_hw !== null && this.num_cpu_hw !== undefined) {
      output.writeFieldBegin('num_cpu_hw', Thrift.Type.I16, 2);
      output.writeI16(this.num_cpu_hw);
      output.writeFieldEnd();
    }
    if (this.num_gpu_allocated !== null && this.num_gpu_allocated !== undefined) {
      output.writeFieldBegin('num_gpu_allocated', Thrift.Type.I16, 3);
      output.writeI16(this.num_gpu_allocated);
      output.writeFieldEnd();
    }
    if (this.start_gpu !== null && this.start_gpu !== undefined) {
      output.writeFieldBegin('start_gpu', Thrift.Type.I16, 4);
      output.writeI16(this.start_gpu);
      output.writeFieldEnd();
    }
    if (this.host_name !== null && this.host_name !== undefined) {
      output.writeFieldBegin('host_name', Thrift.Type.STRING, 5);
      output.writeString(this.host_name);
      output.writeFieldEnd();
    }
    if (this.gpu_info !== null && this.gpu_info !== undefined) {
      output.writeFieldBegin('gpu_info', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.gpu_info.length);
      for (let iter74 in this.gpu_info) {
        if (this.gpu_info.hasOwnProperty(iter74)) {
          iter74 = this.gpu_info[iter74];
          iter74.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TClusterHardwareInfo = module.exports.TClusterHardwareInfo = class {
  constructor(args) {
    this.hardware_info = null;
    if (args) {
      if (args.hardware_info !== undefined && args.hardware_info !== null) {
        this.hardware_info = Thrift.copyList(args.hardware_info, [ttypes.THardwareInfo]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.hardware_info = [];
          const _rtmp376 = input.readListBegin();
          const _size75 = _rtmp376.size || 0;
          for (let _i77 = 0; _i77 < _size75; ++_i77) {
            let elem78 = null;
            elem78 = new ttypes.THardwareInfo();
            elem78.read(input);
            this.hardware_info.push(elem78);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TClusterHardwareInfo');
    if (this.hardware_info !== null && this.hardware_info !== undefined) {
      output.writeFieldBegin('hardware_info', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.hardware_info.length);
      for (let iter79 in this.hardware_info) {
        if (this.hardware_info.hasOwnProperty(iter79)) {
          iter79 = this.hardware_info[iter79];
          iter79.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TMemoryData = module.exports.TMemoryData = class {
  constructor(args) {
    this.slab = null;
    this.start_page = null;
    this.num_pages = null;
    this.touch = null;
    this.chunk_key = null;
    this.buffer_epoch = null;
    this.is_free = null;
    if (args) {
      if (args.slab !== undefined && args.slab !== null) {
        this.slab = args.slab;
      }
      if (args.start_page !== undefined && args.start_page !== null) {
        this.start_page = args.start_page;
      }
      if (args.num_pages !== undefined && args.num_pages !== null) {
        this.num_pages = args.num_pages;
      }
      if (args.touch !== undefined && args.touch !== null) {
        this.touch = args.touch;
      }
      if (args.chunk_key !== undefined && args.chunk_key !== null) {
        this.chunk_key = Thrift.copyList(args.chunk_key, [null]);
      }
      if (args.buffer_epoch !== undefined && args.buffer_epoch !== null) {
        this.buffer_epoch = args.buffer_epoch;
      }
      if (args.is_free !== undefined && args.is_free !== null) {
        this.is_free = args.is_free;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.slab = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.start_page = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.num_pages = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.touch = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.chunk_key = [];
          const _rtmp381 = input.readListBegin();
          const _size80 = _rtmp381.size || 0;
          for (let _i82 = 0; _i82 < _size80; ++_i82) {
            let elem83 = null;
            elem83 = input.readI64();
            this.chunk_key.push(elem83);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.buffer_epoch = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.is_free = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TMemoryData');
    if (this.slab !== null && this.slab !== undefined) {
      output.writeFieldBegin('slab', Thrift.Type.I64, 1);
      output.writeI64(this.slab);
      output.writeFieldEnd();
    }
    if (this.start_page !== null && this.start_page !== undefined) {
      output.writeFieldBegin('start_page', Thrift.Type.I32, 2);
      output.writeI32(this.start_page);
      output.writeFieldEnd();
    }
    if (this.num_pages !== null && this.num_pages !== undefined) {
      output.writeFieldBegin('num_pages', Thrift.Type.I64, 3);
      output.writeI64(this.num_pages);
      output.writeFieldEnd();
    }
    if (this.touch !== null && this.touch !== undefined) {
      output.writeFieldBegin('touch', Thrift.Type.I32, 4);
      output.writeI32(this.touch);
      output.writeFieldEnd();
    }
    if (this.chunk_key !== null && this.chunk_key !== undefined) {
      output.writeFieldBegin('chunk_key', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.I64, this.chunk_key.length);
      for (let iter84 in this.chunk_key) {
        if (this.chunk_key.hasOwnProperty(iter84)) {
          iter84 = this.chunk_key[iter84];
          output.writeI64(iter84);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.buffer_epoch !== null && this.buffer_epoch !== undefined) {
      output.writeFieldBegin('buffer_epoch', Thrift.Type.I32, 6);
      output.writeI32(this.buffer_epoch);
      output.writeFieldEnd();
    }
    if (this.is_free !== null && this.is_free !== undefined) {
      output.writeFieldBegin('is_free', Thrift.Type.BOOL, 7);
      output.writeBool(this.is_free);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TNodeMemoryInfo = module.exports.TNodeMemoryInfo = class {
  constructor(args) {
    this.host_name = null;
    this.page_size = null;
    this.max_num_pages = null;
    this.num_pages_allocated = null;
    this.is_allocation_capped = null;
    this.node_memory_data = null;
    if (args) {
      if (args.host_name !== undefined && args.host_name !== null) {
        this.host_name = args.host_name;
      }
      if (args.page_size !== undefined && args.page_size !== null) {
        this.page_size = args.page_size;
      }
      if (args.max_num_pages !== undefined && args.max_num_pages !== null) {
        this.max_num_pages = args.max_num_pages;
      }
      if (args.num_pages_allocated !== undefined && args.num_pages_allocated !== null) {
        this.num_pages_allocated = args.num_pages_allocated;
      }
      if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {
        this.is_allocation_capped = args.is_allocation_capped;
      }
      if (args.node_memory_data !== undefined && args.node_memory_data !== null) {
        this.node_memory_data = Thrift.copyList(args.node_memory_data, [ttypes.TMemoryData]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.host_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.page_size = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.max_num_pages = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.num_pages_allocated = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.is_allocation_capped = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.node_memory_data = [];
          const _rtmp386 = input.readListBegin();
          const _size85 = _rtmp386.size || 0;
          for (let _i87 = 0; _i87 < _size85; ++_i87) {
            let elem88 = null;
            elem88 = new ttypes.TMemoryData();
            elem88.read(input);
            this.node_memory_data.push(elem88);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TNodeMemoryInfo');
    if (this.host_name !== null && this.host_name !== undefined) {
      output.writeFieldBegin('host_name', Thrift.Type.STRING, 1);
      output.writeString(this.host_name);
      output.writeFieldEnd();
    }
    if (this.page_size !== null && this.page_size !== undefined) {
      output.writeFieldBegin('page_size', Thrift.Type.I64, 2);
      output.writeI64(this.page_size);
      output.writeFieldEnd();
    }
    if (this.max_num_pages !== null && this.max_num_pages !== undefined) {
      output.writeFieldBegin('max_num_pages', Thrift.Type.I64, 3);
      output.writeI64(this.max_num_pages);
      output.writeFieldEnd();
    }
    if (this.num_pages_allocated !== null && this.num_pages_allocated !== undefined) {
      output.writeFieldBegin('num_pages_allocated', Thrift.Type.I64, 4);
      output.writeI64(this.num_pages_allocated);
      output.writeFieldEnd();
    }
    if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {
      output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 5);
      output.writeBool(this.is_allocation_capped);
      output.writeFieldEnd();
    }
    if (this.node_memory_data !== null && this.node_memory_data !== undefined) {
      output.writeFieldBegin('node_memory_data', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.node_memory_data.length);
      for (let iter89 in this.node_memory_data) {
        if (this.node_memory_data.hasOwnProperty(iter89)) {
          iter89 = this.node_memory_data[iter89];
          iter89.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TTableMeta = module.exports.TTableMeta = class {
  constructor(args) {
    this.table_name = null;
    this.num_cols = null;
    this.is_view = null;
    this.is_replicated = null;
    this.shard_count = null;
    this.max_rows = null;
    this.table_id = null;
    this.max_table_id = null;
    this.col_types = null;
    this.col_names = null;
    if (args) {
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.num_cols !== undefined && args.num_cols !== null) {
        this.num_cols = args.num_cols;
      }
      if (args.is_view !== undefined && args.is_view !== null) {
        this.is_view = args.is_view;
      }
      if (args.is_replicated !== undefined && args.is_replicated !== null) {
        this.is_replicated = args.is_replicated;
      }
      if (args.shard_count !== undefined && args.shard_count !== null) {
        this.shard_count = args.shard_count;
      }
      if (args.max_rows !== undefined && args.max_rows !== null) {
        this.max_rows = args.max_rows;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
      if (args.max_table_id !== undefined && args.max_table_id !== null) {
        this.max_table_id = args.max_table_id;
      }
      if (args.col_types !== undefined && args.col_types !== null) {
        this.col_types = Thrift.copyList(args.col_types, [common_ttypes.TTypeInfo]);
      }
      if (args.col_names !== undefined && args.col_names !== null) {
        this.col_names = Thrift.copyList(args.col_names, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.num_cols = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.is_view = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.is_replicated = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.shard_count = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.max_rows = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.table_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.max_table_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.col_types = [];
          const _rtmp391 = input.readListBegin();
          const _size90 = _rtmp391.size || 0;
          for (let _i92 = 0; _i92 < _size90; ++_i92) {
            let elem93 = null;
            elem93 = new common_ttypes.TTypeInfo();
            elem93.read(input);
            this.col_types.push(elem93);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.LIST) {
          this.col_names = [];
          const _rtmp395 = input.readListBegin();
          const _size94 = _rtmp395.size || 0;
          for (let _i96 = 0; _i96 < _size94; ++_i96) {
            let elem97 = null;
            elem97 = input.readString();
            this.col_names.push(elem97);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TTableMeta');
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 1);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.num_cols !== null && this.num_cols !== undefined) {
      output.writeFieldBegin('num_cols', Thrift.Type.I64, 2);
      output.writeI64(this.num_cols);
      output.writeFieldEnd();
    }
    if (this.is_view !== null && this.is_view !== undefined) {
      output.writeFieldBegin('is_view', Thrift.Type.BOOL, 4);
      output.writeBool(this.is_view);
      output.writeFieldEnd();
    }
    if (this.is_replicated !== null && this.is_replicated !== undefined) {
      output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 5);
      output.writeBool(this.is_replicated);
      output.writeFieldEnd();
    }
    if (this.shard_count !== null && this.shard_count !== undefined) {
      output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);
      output.writeI64(this.shard_count);
      output.writeFieldEnd();
    }
    if (this.max_rows !== null && this.max_rows !== undefined) {
      output.writeFieldBegin('max_rows', Thrift.Type.I64, 7);
      output.writeI64(this.max_rows);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I64, 8);
      output.writeI64(this.table_id);
      output.writeFieldEnd();
    }
    if (this.max_table_id !== null && this.max_table_id !== undefined) {
      output.writeFieldBegin('max_table_id', Thrift.Type.I64, 9);
      output.writeI64(this.max_table_id);
      output.writeFieldEnd();
    }
    if (this.col_types !== null && this.col_types !== undefined) {
      output.writeFieldBegin('col_types', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.col_types.length);
      for (let iter98 in this.col_types) {
        if (this.col_types.hasOwnProperty(iter98)) {
          iter98 = this.col_types[iter98];
          iter98.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.col_names !== null && this.col_names !== undefined) {
      output.writeFieldBegin('col_names', Thrift.Type.LIST, 11);
      output.writeListBegin(Thrift.Type.STRING, this.col_names.length);
      for (let iter99 in this.col_names) {
        if (this.col_names.hasOwnProperty(iter99)) {
          iter99 = this.col_names[iter99];
          output.writeString(iter99);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TTableRefreshInfo = module.exports.TTableRefreshInfo = class {
  constructor(args) {
    this.update_type = null;
    this.timing_type = null;
    this.start_date_time = null;
    this.interval_type = null;
    this.interval_count = null;
    this.last_refresh_time = null;
    this.next_refresh_time = null;
    if (args) {
      if (args.update_type !== undefined && args.update_type !== null) {
        this.update_type = args.update_type;
      }
      if (args.timing_type !== undefined && args.timing_type !== null) {
        this.timing_type = args.timing_type;
      }
      if (args.start_date_time !== undefined && args.start_date_time !== null) {
        this.start_date_time = args.start_date_time;
      }
      if (args.interval_type !== undefined && args.interval_type !== null) {
        this.interval_type = args.interval_type;
      }
      if (args.interval_count !== undefined && args.interval_count !== null) {
        this.interval_count = args.interval_count;
      }
      if (args.last_refresh_time !== undefined && args.last_refresh_time !== null) {
        this.last_refresh_time = args.last_refresh_time;
      }
      if (args.next_refresh_time !== undefined && args.next_refresh_time !== null) {
        this.next_refresh_time = args.next_refresh_time;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.update_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.timing_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start_date_time = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.interval_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.interval_count = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.last_refresh_time = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.next_refresh_time = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TTableRefreshInfo');
    if (this.update_type !== null && this.update_type !== undefined) {
      output.writeFieldBegin('update_type', Thrift.Type.I32, 1);
      output.writeI32(this.update_type);
      output.writeFieldEnd();
    }
    if (this.timing_type !== null && this.timing_type !== undefined) {
      output.writeFieldBegin('timing_type', Thrift.Type.I32, 2);
      output.writeI32(this.timing_type);
      output.writeFieldEnd();
    }
    if (this.start_date_time !== null && this.start_date_time !== undefined) {
      output.writeFieldBegin('start_date_time', Thrift.Type.I64, 3);
      output.writeI64(this.start_date_time);
      output.writeFieldEnd();
    }
    if (this.interval_type !== null && this.interval_type !== undefined) {
      output.writeFieldBegin('interval_type', Thrift.Type.I32, 4);
      output.writeI32(this.interval_type);
      output.writeFieldEnd();
    }
    if (this.interval_count !== null && this.interval_count !== undefined) {
      output.writeFieldBegin('interval_count', Thrift.Type.I64, 5);
      output.writeI64(this.interval_count);
      output.writeFieldEnd();
    }
    if (this.last_refresh_time !== null && this.last_refresh_time !== undefined) {
      output.writeFieldBegin('last_refresh_time', Thrift.Type.I64, 6);
      output.writeI64(this.last_refresh_time);
      output.writeFieldEnd();
    }
    if (this.next_refresh_time !== null && this.next_refresh_time !== undefined) {
      output.writeFieldBegin('next_refresh_time', Thrift.Type.I64, 7);
      output.writeI64(this.next_refresh_time);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TTableDetails = module.exports.TTableDetails = class {
  constructor(args) {
    this.row_desc = null;
    this.fragment_size = null;
    this.page_size = null;
    this.max_rows = null;
    this.view_sql = null;
    this.shard_count = null;
    this.key_metainfo = null;
    this.is_temporary = null;
    this.partition_detail = null;
    this.table_type = null;
    this.refresh_info = null;
    if (args) {
      if (args.row_desc !== undefined && args.row_desc !== null) {
        this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
      }
      if (args.fragment_size !== undefined && args.fragment_size !== null) {
        this.fragment_size = args.fragment_size;
      }
      if (args.page_size !== undefined && args.page_size !== null) {
        this.page_size = args.page_size;
      }
      if (args.max_rows !== undefined && args.max_rows !== null) {
        this.max_rows = args.max_rows;
      }
      if (args.view_sql !== undefined && args.view_sql !== null) {
        this.view_sql = args.view_sql;
      }
      if (args.shard_count !== undefined && args.shard_count !== null) {
        this.shard_count = args.shard_count;
      }
      if (args.key_metainfo !== undefined && args.key_metainfo !== null) {
        this.key_metainfo = args.key_metainfo;
      }
      if (args.is_temporary !== undefined && args.is_temporary !== null) {
        this.is_temporary = args.is_temporary;
      }
      if (args.partition_detail !== undefined && args.partition_detail !== null) {
        this.partition_detail = args.partition_detail;
      }
      if (args.table_type !== undefined && args.table_type !== null) {
        this.table_type = args.table_type;
      }
      if (args.refresh_info !== undefined && args.refresh_info !== null) {
        this.refresh_info = new ttypes.TTableRefreshInfo(args.refresh_info);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.row_desc = [];
          const _rtmp3101 = input.readListBegin();
          const _size100 = _rtmp3101.size || 0;
          for (let _i102 = 0; _i102 < _size100; ++_i102) {
            let elem103 = null;
            elem103 = new ttypes.TColumnType();
            elem103.read(input);
            this.row_desc.push(elem103);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.fragment_size = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.page_size = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.max_rows = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.view_sql = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.shard_count = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.key_metainfo = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.is_temporary = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.partition_detail = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.table_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.refresh_info = new ttypes.TTableRefreshInfo();
          this.refresh_info.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TTableDetails');
    if (this.row_desc !== null && this.row_desc !== undefined) {
      output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
      for (let iter104 in this.row_desc) {
        if (this.row_desc.hasOwnProperty(iter104)) {
          iter104 = this.row_desc[iter104];
          iter104.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.fragment_size !== null && this.fragment_size !== undefined) {
      output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);
      output.writeI64(this.fragment_size);
      output.writeFieldEnd();
    }
    if (this.page_size !== null && this.page_size !== undefined) {
      output.writeFieldBegin('page_size', Thrift.Type.I64, 3);
      output.writeI64(this.page_size);
      output.writeFieldEnd();
    }
    if (this.max_rows !== null && this.max_rows !== undefined) {
      output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);
      output.writeI64(this.max_rows);
      output.writeFieldEnd();
    }
    if (this.view_sql !== null && this.view_sql !== undefined) {
      output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);
      output.writeString(this.view_sql);
      output.writeFieldEnd();
    }
    if (this.shard_count !== null && this.shard_count !== undefined) {
      output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);
      output.writeI64(this.shard_count);
      output.writeFieldEnd();
    }
    if (this.key_metainfo !== null && this.key_metainfo !== undefined) {
      output.writeFieldBegin('key_metainfo', Thrift.Type.STRING, 7);
      output.writeString(this.key_metainfo);
      output.writeFieldEnd();
    }
    if (this.is_temporary !== null && this.is_temporary !== undefined) {
      output.writeFieldBegin('is_temporary', Thrift.Type.BOOL, 8);
      output.writeBool(this.is_temporary);
      output.writeFieldEnd();
    }
    if (this.partition_detail !== null && this.partition_detail !== undefined) {
      output.writeFieldBegin('partition_detail', Thrift.Type.I32, 9);
      output.writeI32(this.partition_detail);
      output.writeFieldEnd();
    }
    if (this.table_type !== null && this.table_type !== undefined) {
      output.writeFieldBegin('table_type', Thrift.Type.I32, 10);
      output.writeI32(this.table_type);
      output.writeFieldEnd();
    }
    if (this.refresh_info !== null && this.refresh_info !== undefined) {
      output.writeFieldBegin('refresh_info', Thrift.Type.STRUCT, 11);
      this.refresh_info.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TColumnRange = module.exports.TColumnRange = class {
  constructor(args) {
    this.type = null;
    this.col_id = null;
    this.table_id = null;
    this.has_nulls = null;
    this.int_min = null;
    this.int_max = null;
    this.bucket = null;
    this.fp_min = null;
    this.fp_max = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.col_id !== undefined && args.col_id !== null) {
        this.col_id = args.col_id;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
      if (args.has_nulls !== undefined && args.has_nulls !== null) {
        this.has_nulls = args.has_nulls;
      }
      if (args.int_min !== undefined && args.int_min !== null) {
        this.int_min = args.int_min;
      }
      if (args.int_max !== undefined && args.int_max !== null) {
        this.int_max = args.int_max;
      }
      if (args.bucket !== undefined && args.bucket !== null) {
        this.bucket = args.bucket;
      }
      if (args.fp_min !== undefined && args.fp_min !== null) {
        this.fp_min = args.fp_min;
      }
      if (args.fp_max !== undefined && args.fp_max !== null) {
        this.fp_max = args.fp_max;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.col_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.has_nulls = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.int_min = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.int_max = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.bucket = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.DOUBLE) {
          this.fp_min = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.DOUBLE) {
          this.fp_max = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TColumnRange');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.col_id !== null && this.col_id !== undefined) {
      output.writeFieldBegin('col_id', Thrift.Type.I32, 2);
      output.writeI32(this.col_id);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    if (this.has_nulls !== null && this.has_nulls !== undefined) {
      output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);
      output.writeBool(this.has_nulls);
      output.writeFieldEnd();
    }
    if (this.int_min !== null && this.int_min !== undefined) {
      output.writeFieldBegin('int_min', Thrift.Type.I64, 5);
      output.writeI64(this.int_min);
      output.writeFieldEnd();
    }
    if (this.int_max !== null && this.int_max !== undefined) {
      output.writeFieldBegin('int_max', Thrift.Type.I64, 6);
      output.writeI64(this.int_max);
      output.writeFieldEnd();
    }
    if (this.bucket !== null && this.bucket !== undefined) {
      output.writeFieldBegin('bucket', Thrift.Type.I64, 7);
      output.writeI64(this.bucket);
      output.writeFieldEnd();
    }
    if (this.fp_min !== null && this.fp_min !== undefined) {
      output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);
      output.writeDouble(this.fp_min);
      output.writeFieldEnd();
    }
    if (this.fp_max !== null && this.fp_max !== undefined) {
      output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);
      output.writeDouble(this.fp_max);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDictionaryGeneration = module.exports.TDictionaryGeneration = class {
  constructor(args) {
    this.dict_id = null;
    this.entry_count = null;
    if (args) {
      if (args.dict_id !== undefined && args.dict_id !== null) {
        this.dict_id = args.dict_id;
      }
      if (args.entry_count !== undefined && args.entry_count !== null) {
        this.entry_count = args.entry_count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.dict_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.entry_count = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDictionaryGeneration');
    if (this.dict_id !== null && this.dict_id !== undefined) {
      output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);
      output.writeI32(this.dict_id);
      output.writeFieldEnd();
    }
    if (this.entry_count !== null && this.entry_count !== undefined) {
      output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);
      output.writeI64(this.entry_count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TTableGeneration = module.exports.TTableGeneration = class {
  constructor(args) {
    this.table_id = null;
    this.tuple_count = null;
    this.start_rowid = null;
    if (args) {
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
      if (args.tuple_count !== undefined && args.tuple_count !== null) {
        this.tuple_count = args.tuple_count;
      }
      if (args.start_rowid !== undefined && args.start_rowid !== null) {
        this.start_rowid = args.start_rowid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.tuple_count = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start_rowid = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TTableGeneration');
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 1);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    if (this.tuple_count !== null && this.tuple_count !== undefined) {
      output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);
      output.writeI64(this.tuple_count);
      output.writeFieldEnd();
    }
    if (this.start_rowid !== null && this.start_rowid !== undefined) {
      output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);
      output.writeI64(this.start_rowid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TPendingQuery = module.exports.TPendingQuery = class {
  constructor(args) {
    this.id = null;
    this.column_ranges = null;
    this.dictionary_generations = null;
    this.table_generations = null;
    this.parent_session_id = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.column_ranges !== undefined && args.column_ranges !== null) {
        this.column_ranges = Thrift.copyList(args.column_ranges, [ttypes.TColumnRange]);
      }
      if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {
        this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [ttypes.TDictionaryGeneration]);
      }
      if (args.table_generations !== undefined && args.table_generations !== null) {
        this.table_generations = Thrift.copyList(args.table_generations, [ttypes.TTableGeneration]);
      }
      if (args.parent_session_id !== undefined && args.parent_session_id !== null) {
        this.parent_session_id = args.parent_session_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.column_ranges = [];
          const _rtmp3106 = input.readListBegin();
          const _size105 = _rtmp3106.size || 0;
          for (let _i107 = 0; _i107 < _size105; ++_i107) {
            let elem108 = null;
            elem108 = new ttypes.TColumnRange();
            elem108.read(input);
            this.column_ranges.push(elem108);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.dictionary_generations = [];
          const _rtmp3110 = input.readListBegin();
          const _size109 = _rtmp3110.size || 0;
          for (let _i111 = 0; _i111 < _size109; ++_i111) {
            let elem112 = null;
            elem112 = new ttypes.TDictionaryGeneration();
            elem112.read(input);
            this.dictionary_generations.push(elem112);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.table_generations = [];
          const _rtmp3114 = input.readListBegin();
          const _size113 = _rtmp3114.size || 0;
          for (let _i115 = 0; _i115 < _size113; ++_i115) {
            let elem116 = null;
            elem116 = new ttypes.TTableGeneration();
            elem116.read(input);
            this.table_generations.push(elem116);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.parent_session_id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TPendingQuery');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.column_ranges !== null && this.column_ranges !== undefined) {
      output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);
      for (let iter117 in this.column_ranges) {
        if (this.column_ranges.hasOwnProperty(iter117)) {
          iter117 = this.column_ranges[iter117];
          iter117.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {
      output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);
      for (let iter118 in this.dictionary_generations) {
        if (this.dictionary_generations.hasOwnProperty(iter118)) {
          iter118 = this.dictionary_generations[iter118];
          iter118.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.table_generations !== null && this.table_generations !== undefined) {
      output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);
      for (let iter119 in this.table_generations) {
        if (this.table_generations.hasOwnProperty(iter119)) {
          iter119 = this.table_generations[iter119];
          iter119.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.parent_session_id !== null && this.parent_session_id !== undefined) {
      output.writeFieldBegin('parent_session_id', Thrift.Type.STRING, 5);
      output.writeString(this.parent_session_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TVarLen = module.exports.TVarLen = class {
  constructor(args) {
    this.payload = null;
    this.is_null = null;
    if (args) {
      if (args.payload !== undefined && args.payload !== null) {
        this.payload = args.payload;
      }
      if (args.is_null !== undefined && args.is_null !== null) {
        this.is_null = args.is_null;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.payload = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.is_null = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TVarLen');
    if (this.payload !== null && this.payload !== undefined) {
      output.writeFieldBegin('payload', Thrift.Type.STRING, 1);
      output.writeBinary(this.payload);
      output.writeFieldEnd();
    }
    if (this.is_null !== null && this.is_null !== undefined) {
      output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
      output.writeBool(this.is_null);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDataBlockPtr = module.exports.TDataBlockPtr = class {
  constructor(args) {
    this.fixed_len_data = null;
    this.var_len_data = null;
    if (args) {
      if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {
        this.fixed_len_data = args.fixed_len_data;
      }
      if (args.var_len_data !== undefined && args.var_len_data !== null) {
        this.var_len_data = Thrift.copyList(args.var_len_data, [ttypes.TVarLen]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.fixed_len_data = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.var_len_data = [];
          const _rtmp3121 = input.readListBegin();
          const _size120 = _rtmp3121.size || 0;
          for (let _i122 = 0; _i122 < _size120; ++_i122) {
            let elem123 = null;
            elem123 = new ttypes.TVarLen();
            elem123.read(input);
            this.var_len_data.push(elem123);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDataBlockPtr');
    if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {
      output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);
      output.writeBinary(this.fixed_len_data);
      output.writeFieldEnd();
    }
    if (this.var_len_data !== null && this.var_len_data !== undefined) {
      output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);
      for (let iter124 in this.var_len_data) {
        if (this.var_len_data.hasOwnProperty(iter124)) {
          iter124 = this.var_len_data[iter124];
          iter124.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TInsertData = module.exports.TInsertData = class {
  constructor(args) {
    this.db_id = null;
    this.table_id = null;
    this.column_ids = null;
    this.data = null;
    this.num_rows = null;
    this.is_default = null;
    if (args) {
      if (args.db_id !== undefined && args.db_id !== null) {
        this.db_id = args.db_id;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
      if (args.column_ids !== undefined && args.column_ids !== null) {
        this.column_ids = Thrift.copyList(args.column_ids, [null]);
      }
      if (args.data !== undefined && args.data !== null) {
        this.data = Thrift.copyList(args.data, [ttypes.TDataBlockPtr]);
      }
      if (args.num_rows !== undefined && args.num_rows !== null) {
        this.num_rows = args.num_rows;
      }
      if (args.is_default !== undefined && args.is_default !== null) {
        this.is_default = Thrift.copyList(args.is_default, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.db_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.column_ids = [];
          const _rtmp3126 = input.readListBegin();
          const _size125 = _rtmp3126.size || 0;
          for (let _i127 = 0; _i127 < _size125; ++_i127) {
            let elem128 = null;
            elem128 = input.readI32();
            this.column_ids.push(elem128);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.data = [];
          const _rtmp3130 = input.readListBegin();
          const _size129 = _rtmp3130.size || 0;
          for (let _i131 = 0; _i131 < _size129; ++_i131) {
            let elem132 = null;
            elem132 = new ttypes.TDataBlockPtr();
            elem132.read(input);
            this.data.push(elem132);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.num_rows = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.is_default = [];
          const _rtmp3134 = input.readListBegin();
          const _size133 = _rtmp3134.size || 0;
          for (let _i135 = 0; _i135 < _size133; ++_i135) {
            let elem136 = null;
            elem136 = input.readBool();
            this.is_default.push(elem136);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TInsertData');
    if (this.db_id !== null && this.db_id !== undefined) {
      output.writeFieldBegin('db_id', Thrift.Type.I32, 1);
      output.writeI32(this.db_id);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    if (this.column_ids !== null && this.column_ids !== undefined) {
      output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I32, this.column_ids.length);
      for (let iter137 in this.column_ids) {
        if (this.column_ids.hasOwnProperty(iter137)) {
          iter137 = this.column_ids[iter137];
          output.writeI32(iter137);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.data !== null && this.data !== undefined) {
      output.writeFieldBegin('data', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
      for (let iter138 in this.data) {
        if (this.data.hasOwnProperty(iter138)) {
          iter138 = this.data[iter138];
          iter138.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.num_rows !== null && this.num_rows !== undefined) {
      output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);
      output.writeI64(this.num_rows);
      output.writeFieldEnd();
    }
    if (this.is_default !== null && this.is_default !== undefined) {
      output.writeFieldBegin('is_default', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.BOOL, this.is_default.length);
      for (let iter139 in this.is_default) {
        if (this.is_default.hasOwnProperty(iter139)) {
          iter139 = this.is_default[iter139];
          output.writeBool(iter139);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TChunkData = module.exports.TChunkData = class {
  constructor(args) {
    this.data_buffer = null;
    this.index_buffer = null;
    if (args) {
      if (args.data_buffer !== undefined && args.data_buffer !== null) {
        this.data_buffer = args.data_buffer;
      }
      if (args.index_buffer !== undefined && args.index_buffer !== null) {
        this.index_buffer = args.index_buffer;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.data_buffer = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.index_buffer = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TChunkData');
    if (this.data_buffer !== null && this.data_buffer !== undefined) {
      output.writeFieldBegin('data_buffer', Thrift.Type.STRING, 1);
      output.writeBinary(this.data_buffer);
      output.writeFieldEnd();
    }
    if (this.index_buffer !== null && this.index_buffer !== undefined) {
      output.writeFieldBegin('index_buffer', Thrift.Type.STRING, 2);
      output.writeBinary(this.index_buffer);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TInsertChunks = module.exports.TInsertChunks = class {
  constructor(args) {
    this.db_id = null;
    this.table_id = null;
    this.data = null;
    this.valid_indices = null;
    this.num_rows = null;
    if (args) {
      if (args.db_id !== undefined && args.db_id !== null) {
        this.db_id = args.db_id;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
      if (args.data !== undefined && args.data !== null) {
        this.data = Thrift.copyList(args.data, [ttypes.TChunkData]);
      }
      if (args.valid_indices !== undefined && args.valid_indices !== null) {
        this.valid_indices = Thrift.copyList(args.valid_indices, [null]);
      }
      if (args.num_rows !== undefined && args.num_rows !== null) {
        this.num_rows = args.num_rows;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.db_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.data = [];
          const _rtmp3141 = input.readListBegin();
          const _size140 = _rtmp3141.size || 0;
          for (let _i142 = 0; _i142 < _size140; ++_i142) {
            let elem143 = null;
            elem143 = new ttypes.TChunkData();
            elem143.read(input);
            this.data.push(elem143);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.valid_indices = [];
          const _rtmp3145 = input.readListBegin();
          const _size144 = _rtmp3145.size || 0;
          for (let _i146 = 0; _i146 < _size144; ++_i146) {
            let elem147 = null;
            elem147 = input.readI64();
            this.valid_indices.push(elem147);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.num_rows = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TInsertChunks');
    if (this.db_id !== null && this.db_id !== undefined) {
      output.writeFieldBegin('db_id', Thrift.Type.I32, 1);
      output.writeI32(this.db_id);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    if (this.data !== null && this.data !== undefined) {
      output.writeFieldBegin('data', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
      for (let iter148 in this.data) {
        if (this.data.hasOwnProperty(iter148)) {
          iter148 = this.data[iter148];
          iter148.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.valid_indices !== null && this.valid_indices !== undefined) {
      output.writeFieldBegin('valid_indices', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.I64, this.valid_indices.length);
      for (let iter149 in this.valid_indices) {
        if (this.valid_indices.hasOwnProperty(iter149)) {
          iter149 = this.valid_indices[iter149];
          output.writeI64(iter149);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.num_rows !== null && this.num_rows !== undefined) {
      output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);
      output.writeI64(this.num_rows);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TPendingRenderQuery = module.exports.TPendingRenderQuery = class {
  constructor(args) {
    this.id = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TPendingRenderQuery');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TRenderParseResult = module.exports.TRenderParseResult = class {
  constructor(args) {
    this.merge_type = null;
    this.node_id = null;
    this.execution_time_ms = null;
    this.render_time_ms = null;
    this.total_time_ms = null;
    if (args) {
      if (args.merge_type !== undefined && args.merge_type !== null) {
        this.merge_type = args.merge_type;
      }
      if (args.node_id !== undefined && args.node_id !== null) {
        this.node_id = args.node_id;
      }
      if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
        this.execution_time_ms = args.execution_time_ms;
      }
      if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
        this.render_time_ms = args.render_time_ms;
      }
      if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
        this.total_time_ms = args.total_time_ms;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.merge_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.node_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.execution_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.render_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.total_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TRenderParseResult');
    if (this.merge_type !== null && this.merge_type !== undefined) {
      output.writeFieldBegin('merge_type', Thrift.Type.I32, 1);
      output.writeI32(this.merge_type);
      output.writeFieldEnd();
    }
    if (this.node_id !== null && this.node_id !== undefined) {
      output.writeFieldBegin('node_id', Thrift.Type.I32, 2);
      output.writeI32(this.node_id);
      output.writeFieldEnd();
    }
    if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
      output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
      output.writeI64(this.execution_time_ms);
      output.writeFieldEnd();
    }
    if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
      output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
      output.writeI64(this.render_time_ms);
      output.writeFieldEnd();
    }
    if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
      output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
      output.writeI64(this.total_time_ms);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TRawRenderPassDataResult = module.exports.TRawRenderPassDataResult = class {
  constructor(args) {
    this.num_pixel_channels = null;
    this.num_pixel_samples = null;
    this.pixels = null;
    this.row_ids_A = null;
    this.row_ids_B = null;
    this.table_ids = null;
    this.accum_data = null;
    this.accum_depth = null;
    if (args) {
      if (args.num_pixel_channels !== undefined && args.num_pixel_channels !== null) {
        this.num_pixel_channels = args.num_pixel_channels;
      }
      if (args.num_pixel_samples !== undefined && args.num_pixel_samples !== null) {
        this.num_pixel_samples = args.num_pixel_samples;
      }
      if (args.pixels !== undefined && args.pixels !== null) {
        this.pixels = args.pixels;
      }
      if (args.row_ids_A !== undefined && args.row_ids_A !== null) {
        this.row_ids_A = args.row_ids_A;
      }
      if (args.row_ids_B !== undefined && args.row_ids_B !== null) {
        this.row_ids_B = args.row_ids_B;
      }
      if (args.table_ids !== undefined && args.table_ids !== null) {
        this.table_ids = args.table_ids;
      }
      if (args.accum_data !== undefined && args.accum_data !== null) {
        this.accum_data = args.accum_data;
      }
      if (args.accum_depth !== undefined && args.accum_depth !== null) {
        this.accum_depth = args.accum_depth;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.num_pixel_channels = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.num_pixel_samples = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.pixels = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.row_ids_A = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.row_ids_B = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.table_ids = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.accum_data = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.accum_depth = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TRawRenderPassDataResult');
    if (this.num_pixel_channels !== null && this.num_pixel_channels !== undefined) {
      output.writeFieldBegin('num_pixel_channels', Thrift.Type.I32, 1);
      output.writeI32(this.num_pixel_channels);
      output.writeFieldEnd();
    }
    if (this.num_pixel_samples !== null && this.num_pixel_samples !== undefined) {
      output.writeFieldBegin('num_pixel_samples', Thrift.Type.I32, 2);
      output.writeI32(this.num_pixel_samples);
      output.writeFieldEnd();
    }
    if (this.pixels !== null && this.pixels !== undefined) {
      output.writeFieldBegin('pixels', Thrift.Type.STRING, 3);
      output.writeBinary(this.pixels);
      output.writeFieldEnd();
    }
    if (this.row_ids_A !== null && this.row_ids_A !== undefined) {
      output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 4);
      output.writeBinary(this.row_ids_A);
      output.writeFieldEnd();
    }
    if (this.row_ids_B !== null && this.row_ids_B !== undefined) {
      output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 5);
      output.writeBinary(this.row_ids_B);
      output.writeFieldEnd();
    }
    if (this.table_ids !== null && this.table_ids !== undefined) {
      output.writeFieldBegin('table_ids', Thrift.Type.STRING, 6);
      output.writeBinary(this.table_ids);
      output.writeFieldEnd();
    }
    if (this.accum_data !== null && this.accum_data !== undefined) {
      output.writeFieldBegin('accum_data', Thrift.Type.STRING, 7);
      output.writeBinary(this.accum_data);
      output.writeFieldEnd();
    }
    if (this.accum_depth !== null && this.accum_depth !== undefined) {
      output.writeFieldBegin('accum_depth', Thrift.Type.I32, 8);
      output.writeI32(this.accum_depth);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TRawPixelData = module.exports.TRawPixelData = class {
  constructor(args) {
    this.width = null;
    this.height = null;
    this.render_pass_map = null;
    if (args) {
      if (args.width !== undefined && args.width !== null) {
        this.width = args.width;
      }
      if (args.height !== undefined && args.height !== null) {
        this.height = args.height;
      }
      if (args.render_pass_map !== undefined && args.render_pass_map !== null) {
        this.render_pass_map = Thrift.copyMap(args.render_pass_map, [ttypes.TRawRenderPassDataResult]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.width = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.height = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.render_pass_map = {};
          const _rtmp3151 = input.readMapBegin();
          const _size150 = _rtmp3151.size || 0;
          for (let _i152 = 0; _i152 < _size150; ++_i152) {
            let key153 = null;
            let val154 = null;
            key153 = input.readI32();
            val154 = new ttypes.TRawRenderPassDataResult();
            val154.read(input);
            this.render_pass_map[key153] = val154;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TRawPixelData');
    if (this.width !== null && this.width !== undefined) {
      output.writeFieldBegin('width', Thrift.Type.I32, 1);
      output.writeI32(this.width);
      output.writeFieldEnd();
    }
    if (this.height !== null && this.height !== undefined) {
      output.writeFieldBegin('height', Thrift.Type.I32, 2);
      output.writeI32(this.height);
      output.writeFieldEnd();
    }
    if (this.render_pass_map !== null && this.render_pass_map !== undefined) {
      output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));
      for (let kiter155 in this.render_pass_map) {
        if (this.render_pass_map.hasOwnProperty(kiter155)) {
          let viter156 = this.render_pass_map[kiter155];
          output.writeI32(kiter155);
          viter156.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TRenderDatum = module.exports.TRenderDatum = class {
  constructor(args) {
    this.type = null;
    this.cnt = null;
    this.value = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.cnt !== undefined && args.cnt !== null) {
        this.cnt = args.cnt;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = args.value;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.cnt = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.value = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TRenderDatum');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.cnt !== null && this.cnt !== undefined) {
      output.writeFieldBegin('cnt', Thrift.Type.I32, 2);
      output.writeI32(this.cnt);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRING, 3);
      output.writeBinary(this.value);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TRenderStepResult = module.exports.TRenderStepResult = class {
  constructor(args) {
    this.merge_data = null;
    this.raw_pixel_data = null;
    this.execution_time_ms = null;
    this.render_time_ms = null;
    this.total_time_ms = null;
    if (args) {
      if (args.merge_data !== undefined && args.merge_data !== null) {
        this.merge_data = Thrift.copyMap(args.merge_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, ttypes.TRenderDatum]);
      }
      if (args.raw_pixel_data !== undefined && args.raw_pixel_data !== null) {
        this.raw_pixel_data = new ttypes.TRawPixelData(args.raw_pixel_data);
      }
      if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
        this.execution_time_ms = args.execution_time_ms;
      }
      if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
        this.render_time_ms = args.render_time_ms;
      }
      if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
        this.total_time_ms = args.total_time_ms;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.MAP) {
          this.merge_data = {};
          const _rtmp3158 = input.readMapBegin();
          const _size157 = _rtmp3158.size || 0;
          for (let _i159 = 0; _i159 < _size157; ++_i159) {
            let key160 = null;
            let val161 = null;
            key160 = input.readString();
            val161 = {};
            const _rtmp3163 = input.readMapBegin();
            const _size162 = _rtmp3163.size || 0;
            for (let _i164 = 0; _i164 < _size162; ++_i164) {
              let key165 = null;
              let val166 = null;
              key165 = input.readString();
              val166 = {};
              const _rtmp3168 = input.readMapBegin();
              const _size167 = _rtmp3168.size || 0;
              for (let _i169 = 0; _i169 < _size167; ++_i169) {
                let key170 = null;
                let val171 = null;
                key170 = input.readString();
                val171 = {};
                const _rtmp3173 = input.readMapBegin();
                const _size172 = _rtmp3173.size || 0;
                for (let _i174 = 0; _i174 < _size172; ++_i174) {
                  let key175 = null;
                  let val176 = null;
                  key175 = input.readString();
                  val176 = [];
                  const _rtmp3178 = input.readListBegin();
                  const _size177 = _rtmp3178.size || 0;
                  for (let _i179 = 0; _i179 < _size177; ++_i179) {
                    let elem180 = null;
                    elem180 = new ttypes.TRenderDatum();
                    elem180.read(input);
                    val176.push(elem180);
                  }
                  input.readListEnd();
                  val171[key175] = val176;
                }
                input.readMapEnd();
                val166[key170] = val171;
              }
              input.readMapEnd();
              val161[key165] = val166;
            }
            input.readMapEnd();
            this.merge_data[key160] = val161;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.raw_pixel_data = new ttypes.TRawPixelData();
          this.raw_pixel_data.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.execution_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.render_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.total_time_ms = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TRenderStepResult');
    if (this.merge_data !== null && this.merge_data !== undefined) {
      output.writeFieldBegin('merge_data', Thrift.Type.MAP, 1);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merge_data));
      for (let kiter181 in this.merge_data) {
        if (this.merge_data.hasOwnProperty(kiter181)) {
          let viter182 = this.merge_data[kiter181];
          output.writeString(kiter181);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter182));
          for (let kiter183 in viter182) {
            if (viter182.hasOwnProperty(kiter183)) {
              let viter184 = viter182[kiter183];
              output.writeString(kiter183);
              output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter184));
              for (let kiter185 in viter184) {
                if (viter184.hasOwnProperty(kiter185)) {
                  let viter186 = viter184[kiter185];
                  output.writeString(kiter185);
                  output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter186));
                  for (let kiter187 in viter186) {
                    if (viter186.hasOwnProperty(kiter187)) {
                      let viter188 = viter186[kiter187];
                      output.writeString(kiter187);
                      output.writeListBegin(Thrift.Type.STRUCT, viter188.length);
                      for (let iter189 in viter188) {
                        if (viter188.hasOwnProperty(iter189)) {
                          iter189 = viter188[iter189];
                          iter189.write(output);
                        }
                      }
                      output.writeListEnd();
                    }
                  }
                  output.writeMapEnd();
                }
              }
              output.writeMapEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.raw_pixel_data !== null && this.raw_pixel_data !== undefined) {
      output.writeFieldBegin('raw_pixel_data', Thrift.Type.STRUCT, 2);
      this.raw_pixel_data.write(output);
      output.writeFieldEnd();
    }
    if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
      output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
      output.writeI64(this.execution_time_ms);
      output.writeFieldEnd();
    }
    if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
      output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
      output.writeI64(this.render_time_ms);
      output.writeFieldEnd();
    }
    if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
      output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
      output.writeI64(this.total_time_ms);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDatabasePermissions = module.exports.TDatabasePermissions = class {
  constructor(args) {
    this.create_ = null;
    this.delete_ = null;
    this.view_sql_editor_ = null;
    this.access_ = null;
    if (args) {
      if (args.create_ !== undefined && args.create_ !== null) {
        this.create_ = args.create_;
      }
      if (args.delete_ !== undefined && args.delete_ !== null) {
        this.delete_ = args.delete_;
      }
      if (args.view_sql_editor_ !== undefined && args.view_sql_editor_ !== null) {
        this.view_sql_editor_ = args.view_sql_editor_;
      }
      if (args.access_ !== undefined && args.access_ !== null) {
        this.access_ = args.access_;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.create_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.delete_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.view_sql_editor_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.access_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDatabasePermissions');
    if (this.create_ !== null && this.create_ !== undefined) {
      output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
      output.writeBool(this.create_);
      output.writeFieldEnd();
    }
    if (this.delete_ !== null && this.delete_ !== undefined) {
      output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);
      output.writeBool(this.delete_);
      output.writeFieldEnd();
    }
    if (this.view_sql_editor_ !== null && this.view_sql_editor_ !== undefined) {
      output.writeFieldBegin('view_sql_editor_', Thrift.Type.BOOL, 3);
      output.writeBool(this.view_sql_editor_);
      output.writeFieldEnd();
    }
    if (this.access_ !== null && this.access_ !== undefined) {
      output.writeFieldBegin('access_', Thrift.Type.BOOL, 4);
      output.writeBool(this.access_);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TTablePermissions = module.exports.TTablePermissions = class {
  constructor(args) {
    this.create_ = null;
    this.drop_ = null;
    this.select_ = null;
    this.insert_ = null;
    this.update_ = null;
    this.delete_ = null;
    this.truncate_ = null;
    this.alter_ = null;
    if (args) {
      if (args.create_ !== undefined && args.create_ !== null) {
        this.create_ = args.create_;
      }
      if (args.drop_ !== undefined && args.drop_ !== null) {
        this.drop_ = args.drop_;
      }
      if (args.select_ !== undefined && args.select_ !== null) {
        this.select_ = args.select_;
      }
      if (args.insert_ !== undefined && args.insert_ !== null) {
        this.insert_ = args.insert_;
      }
      if (args.update_ !== undefined && args.update_ !== null) {
        this.update_ = args.update_;
      }
      if (args.delete_ !== undefined && args.delete_ !== null) {
        this.delete_ = args.delete_;
      }
      if (args.truncate_ !== undefined && args.truncate_ !== null) {
        this.truncate_ = args.truncate_;
      }
      if (args.alter_ !== undefined && args.alter_ !== null) {
        this.alter_ = args.alter_;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.create_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.drop_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.select_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.insert_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.update_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.delete_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.truncate_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.alter_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TTablePermissions');
    if (this.create_ !== null && this.create_ !== undefined) {
      output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
      output.writeBool(this.create_);
      output.writeFieldEnd();
    }
    if (this.drop_ !== null && this.drop_ !== undefined) {
      output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
      output.writeBool(this.drop_);
      output.writeFieldEnd();
    }
    if (this.select_ !== null && this.select_ !== undefined) {
      output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);
      output.writeBool(this.select_);
      output.writeFieldEnd();
    }
    if (this.insert_ !== null && this.insert_ !== undefined) {
      output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);
      output.writeBool(this.insert_);
      output.writeFieldEnd();
    }
    if (this.update_ !== null && this.update_ !== undefined) {
      output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);
      output.writeBool(this.update_);
      output.writeFieldEnd();
    }
    if (this.delete_ !== null && this.delete_ !== undefined) {
      output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);
      output.writeBool(this.delete_);
      output.writeFieldEnd();
    }
    if (this.truncate_ !== null && this.truncate_ !== undefined) {
      output.writeFieldBegin('truncate_', Thrift.Type.BOOL, 7);
      output.writeBool(this.truncate_);
      output.writeFieldEnd();
    }
    if (this.alter_ !== null && this.alter_ !== undefined) {
      output.writeFieldBegin('alter_', Thrift.Type.BOOL, 8);
      output.writeBool(this.alter_);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDashboardPermissions = module.exports.TDashboardPermissions = class {
  constructor(args) {
    this.create_ = null;
    this.delete_ = null;
    this.view_ = null;
    this.edit_ = null;
    if (args) {
      if (args.create_ !== undefined && args.create_ !== null) {
        this.create_ = args.create_;
      }
      if (args.delete_ !== undefined && args.delete_ !== null) {
        this.delete_ = args.delete_;
      }
      if (args.view_ !== undefined && args.view_ !== null) {
        this.view_ = args.view_;
      }
      if (args.edit_ !== undefined && args.edit_ !== null) {
        this.edit_ = args.edit_;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.create_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.delete_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.view_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.edit_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDashboardPermissions');
    if (this.create_ !== null && this.create_ !== undefined) {
      output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
      output.writeBool(this.create_);
      output.writeFieldEnd();
    }
    if (this.delete_ !== null && this.delete_ !== undefined) {
      output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);
      output.writeBool(this.delete_);
      output.writeFieldEnd();
    }
    if (this.view_ !== null && this.view_ !== undefined) {
      output.writeFieldBegin('view_', Thrift.Type.BOOL, 3);
      output.writeBool(this.view_);
      output.writeFieldEnd();
    }
    if (this.edit_ !== null && this.edit_ !== undefined) {
      output.writeFieldBegin('edit_', Thrift.Type.BOOL, 4);
      output.writeBool(this.edit_);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TViewPermissions = module.exports.TViewPermissions = class {
  constructor(args) {
    this.create_ = null;
    this.drop_ = null;
    this.select_ = null;
    this.insert_ = null;
    this.update_ = null;
    this.delete_ = null;
    if (args) {
      if (args.create_ !== undefined && args.create_ !== null) {
        this.create_ = args.create_;
      }
      if (args.drop_ !== undefined && args.drop_ !== null) {
        this.drop_ = args.drop_;
      }
      if (args.select_ !== undefined && args.select_ !== null) {
        this.select_ = args.select_;
      }
      if (args.insert_ !== undefined && args.insert_ !== null) {
        this.insert_ = args.insert_;
      }
      if (args.update_ !== undefined && args.update_ !== null) {
        this.update_ = args.update_;
      }
      if (args.delete_ !== undefined && args.delete_ !== null) {
        this.delete_ = args.delete_;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.create_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.drop_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.select_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.insert_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.update_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.delete_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TViewPermissions');
    if (this.create_ !== null && this.create_ !== undefined) {
      output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
      output.writeBool(this.create_);
      output.writeFieldEnd();
    }
    if (this.drop_ !== null && this.drop_ !== undefined) {
      output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
      output.writeBool(this.drop_);
      output.writeFieldEnd();
    }
    if (this.select_ !== null && this.select_ !== undefined) {
      output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);
      output.writeBool(this.select_);
      output.writeFieldEnd();
    }
    if (this.insert_ !== null && this.insert_ !== undefined) {
      output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);
      output.writeBool(this.insert_);
      output.writeFieldEnd();
    }
    if (this.update_ !== null && this.update_ !== undefined) {
      output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);
      output.writeBool(this.update_);
      output.writeFieldEnd();
    }
    if (this.delete_ !== null && this.delete_ !== undefined) {
      output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);
      output.writeBool(this.delete_);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TServerPermissions = module.exports.TServerPermissions = class {
  constructor(args) {
    this.create_ = null;
    this.drop_ = null;
    this.alter_ = null;
    this.usage_ = null;
    if (args) {
      if (args.create_ !== undefined && args.create_ !== null) {
        this.create_ = args.create_;
      }
      if (args.drop_ !== undefined && args.drop_ !== null) {
        this.drop_ = args.drop_;
      }
      if (args.alter_ !== undefined && args.alter_ !== null) {
        this.alter_ = args.alter_;
      }
      if (args.usage_ !== undefined && args.usage_ !== null) {
        this.usage_ = args.usage_;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.create_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.drop_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.alter_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.usage_ = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TServerPermissions');
    if (this.create_ !== null && this.create_ !== undefined) {
      output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
      output.writeBool(this.create_);
      output.writeFieldEnd();
    }
    if (this.drop_ !== null && this.drop_ !== undefined) {
      output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
      output.writeBool(this.drop_);
      output.writeFieldEnd();
    }
    if (this.alter_ !== null && this.alter_ !== undefined) {
      output.writeFieldBegin('alter_', Thrift.Type.BOOL, 3);
      output.writeBool(this.alter_);
      output.writeFieldEnd();
    }
    if (this.usage_ !== null && this.usage_ !== undefined) {
      output.writeFieldBegin('usage_', Thrift.Type.BOOL, 4);
      output.writeBool(this.usage_);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDBObjectPermissions = module.exports.TDBObjectPermissions = class {
  constructor(args) {
    this.database_permissions_ = null;
    this.table_permissions_ = null;
    this.dashboard_permissions_ = null;
    this.view_permissions_ = null;
    this.server_permissions_ = null;
    if (args) {
      if (args.database_permissions_ !== undefined && args.database_permissions_ !== null) {
        this.database_permissions_ = new ttypes.TDatabasePermissions(args.database_permissions_);
      }
      if (args.table_permissions_ !== undefined && args.table_permissions_ !== null) {
        this.table_permissions_ = new ttypes.TTablePermissions(args.table_permissions_);
      }
      if (args.dashboard_permissions_ !== undefined && args.dashboard_permissions_ !== null) {
        this.dashboard_permissions_ = new ttypes.TDashboardPermissions(args.dashboard_permissions_);
      }
      if (args.view_permissions_ !== undefined && args.view_permissions_ !== null) {
        this.view_permissions_ = new ttypes.TViewPermissions(args.view_permissions_);
      }
      if (args.server_permissions_ !== undefined && args.server_permissions_ !== null) {
        this.server_permissions_ = new ttypes.TServerPermissions(args.server_permissions_);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.database_permissions_ = new ttypes.TDatabasePermissions();
          this.database_permissions_.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.table_permissions_ = new ttypes.TTablePermissions();
          this.table_permissions_.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.dashboard_permissions_ = new ttypes.TDashboardPermissions();
          this.dashboard_permissions_.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.view_permissions_ = new ttypes.TViewPermissions();
          this.view_permissions_.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.server_permissions_ = new ttypes.TServerPermissions();
          this.server_permissions_.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDBObjectPermissions');
    if (this.database_permissions_ !== null && this.database_permissions_ !== undefined) {
      output.writeFieldBegin('database_permissions_', Thrift.Type.STRUCT, 1);
      this.database_permissions_.write(output);
      output.writeFieldEnd();
    }
    if (this.table_permissions_ !== null && this.table_permissions_ !== undefined) {
      output.writeFieldBegin('table_permissions_', Thrift.Type.STRUCT, 2);
      this.table_permissions_.write(output);
      output.writeFieldEnd();
    }
    if (this.dashboard_permissions_ !== null && this.dashboard_permissions_ !== undefined) {
      output.writeFieldBegin('dashboard_permissions_', Thrift.Type.STRUCT, 3);
      this.dashboard_permissions_.write(output);
      output.writeFieldEnd();
    }
    if (this.view_permissions_ !== null && this.view_permissions_ !== undefined) {
      output.writeFieldBegin('view_permissions_', Thrift.Type.STRUCT, 4);
      this.view_permissions_.write(output);
      output.writeFieldEnd();
    }
    if (this.server_permissions_ !== null && this.server_permissions_ !== undefined) {
      output.writeFieldBegin('server_permissions_', Thrift.Type.STRUCT, 5);
      this.server_permissions_.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDBObject = module.exports.TDBObject = class {
  constructor(args) {
    this.objectName = null;
    this.objectType = null;
    this.privs = null;
    this.grantee = null;
    this.privilegeObjectType = null;
    this.objectId = null;
    if (args) {
      if (args.objectName !== undefined && args.objectName !== null) {
        this.objectName = args.objectName;
      }
      if (args.objectType !== undefined && args.objectType !== null) {
        this.objectType = args.objectType;
      }
      if (args.privs !== undefined && args.privs !== null) {
        this.privs = Thrift.copyList(args.privs, [null]);
      }
      if (args.grantee !== undefined && args.grantee !== null) {
        this.grantee = args.grantee;
      }
      if (args.privilegeObjectType !== undefined && args.privilegeObjectType !== null) {
        this.privilegeObjectType = args.privilegeObjectType;
      }
      if (args.objectId !== undefined && args.objectId !== null) {
        this.objectId = args.objectId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.objectName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.objectType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.privs = [];
          const _rtmp3191 = input.readListBegin();
          const _size190 = _rtmp3191.size || 0;
          for (let _i192 = 0; _i192 < _size190; ++_i192) {
            let elem193 = null;
            elem193 = input.readBool();
            this.privs.push(elem193);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.grantee = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.privilegeObjectType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.objectId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDBObject');
    if (this.objectName !== null && this.objectName !== undefined) {
      output.writeFieldBegin('objectName', Thrift.Type.STRING, 1);
      output.writeString(this.objectName);
      output.writeFieldEnd();
    }
    if (this.objectType !== null && this.objectType !== undefined) {
      output.writeFieldBegin('objectType', Thrift.Type.I32, 2);
      output.writeI32(this.objectType);
      output.writeFieldEnd();
    }
    if (this.privs !== null && this.privs !== undefined) {
      output.writeFieldBegin('privs', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.BOOL, this.privs.length);
      for (let iter194 in this.privs) {
        if (this.privs.hasOwnProperty(iter194)) {
          iter194 = this.privs[iter194];
          output.writeBool(iter194);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.grantee !== null && this.grantee !== undefined) {
      output.writeFieldBegin('grantee', Thrift.Type.STRING, 4);
      output.writeString(this.grantee);
      output.writeFieldEnd();
    }
    if (this.privilegeObjectType !== null && this.privilegeObjectType !== undefined) {
      output.writeFieldBegin('privilegeObjectType', Thrift.Type.I32, 5);
      output.writeI32(this.privilegeObjectType);
      output.writeFieldEnd();
    }
    if (this.objectId !== null && this.objectId !== undefined) {
      output.writeFieldBegin('objectId', Thrift.Type.I32, 6);
      output.writeI32(this.objectId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDashboardGrantees = module.exports.TDashboardGrantees = class {
  constructor(args) {
    this.name = null;
    this.is_user = null;
    this.permissions = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.is_user !== undefined && args.is_user !== null) {
        this.is_user = args.is_user;
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = new ttypes.TDashboardPermissions(args.permissions);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.is_user = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.permissions = new ttypes.TDashboardPermissions();
          this.permissions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDashboardGrantees');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.is_user !== null && this.is_user !== undefined) {
      output.writeFieldBegin('is_user', Thrift.Type.BOOL, 2);
      output.writeBool(this.is_user);
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 3);
      this.permissions.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TDashboard = module.exports.TDashboard = class {
  constructor(args) {
    this.dashboard_name = null;
    this.dashboard_state = null;
    this.image_hash = null;
    this.update_time = null;
    this.dashboard_metadata = null;
    this.dashboard_id = null;
    this.dashboard_owner = null;
    this.is_dash_shared = null;
    this.dashboard_permissions = null;
    if (args) {
      if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
        this.dashboard_name = args.dashboard_name;
      }
      if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
        this.dashboard_state = args.dashboard_state;
      }
      if (args.image_hash !== undefined && args.image_hash !== null) {
        this.image_hash = args.image_hash;
      }
      if (args.update_time !== undefined && args.update_time !== null) {
        this.update_time = args.update_time;
      }
      if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
        this.dashboard_metadata = args.dashboard_metadata;
      }
      if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
        this.dashboard_id = args.dashboard_id;
      }
      if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {
        this.dashboard_owner = args.dashboard_owner;
      }
      if (args.is_dash_shared !== undefined && args.is_dash_shared !== null) {
        this.is_dash_shared = args.is_dash_shared;
      }
      if (args.dashboard_permissions !== undefined && args.dashboard_permissions !== null) {
        this.dashboard_permissions = new ttypes.TDashboardPermissions(args.dashboard_permissions);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_state = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.image_hash = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.update_time = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_metadata = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.dashboard_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_owner = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.is_dash_shared = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRUCT) {
          this.dashboard_permissions = new ttypes.TDashboardPermissions();
          this.dashboard_permissions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TDashboard');
    if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
      output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 1);
      output.writeString(this.dashboard_name);
      output.writeFieldEnd();
    }
    if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
      output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 2);
      output.writeString(this.dashboard_state);
      output.writeFieldEnd();
    }
    if (this.image_hash !== null && this.image_hash !== undefined) {
      output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
      output.writeString(this.image_hash);
      output.writeFieldEnd();
    }
    if (this.update_time !== null && this.update_time !== undefined) {
      output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
      output.writeString(this.update_time);
      output.writeFieldEnd();
    }
    if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
      output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);
      output.writeString(this.dashboard_metadata);
      output.writeFieldEnd();
    }
    if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
      output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 6);
      output.writeI32(this.dashboard_id);
      output.writeFieldEnd();
    }
    if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {
      output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 7);
      output.writeString(this.dashboard_owner);
      output.writeFieldEnd();
    }
    if (this.is_dash_shared !== null && this.is_dash_shared !== undefined) {
      output.writeFieldBegin('is_dash_shared', Thrift.Type.BOOL, 8);
      output.writeBool(this.is_dash_shared);
      output.writeFieldEnd();
    }
    if (this.dashboard_permissions !== null && this.dashboard_permissions !== undefined) {
      output.writeFieldBegin('dashboard_permissions', Thrift.Type.STRUCT, 9);
      this.dashboard_permissions.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TLicenseInfo = module.exports.TLicenseInfo = class {
  constructor(args) {
    this.claims = null;
    if (args) {
      if (args.claims !== undefined && args.claims !== null) {
        this.claims = Thrift.copyList(args.claims, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.claims = [];
          const _rtmp3196 = input.readListBegin();
          const _size195 = _rtmp3196.size || 0;
          for (let _i197 = 0; _i197 < _size195; ++_i197) {
            let elem198 = null;
            elem198 = input.readString();
            this.claims.push(elem198);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TLicenseInfo');
    if (this.claims !== null && this.claims !== undefined) {
      output.writeFieldBegin('claims', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.claims.length);
      for (let iter199 in this.claims) {
        if (this.claims.hasOwnProperty(iter199)) {
          iter199 = this.claims[iter199];
          output.writeString(iter199);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TSessionInfo = module.exports.TSessionInfo = class {
  constructor(args) {
    this.user = null;
    this.database = null;
    this.start_time = null;
    this.is_super = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.database !== undefined && args.database !== null) {
        this.database = args.database;
      }
      if (args.start_time !== undefined && args.start_time !== null) {
        this.start_time = args.start_time;
      }
      if (args.is_super !== undefined && args.is_super !== null) {
        this.is_super = args.is_super;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.user = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.database = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start_time = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.is_super = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TSessionInfo');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.STRING, 1);
      output.writeString(this.user);
      output.writeFieldEnd();
    }
    if (this.database !== null && this.database !== undefined) {
      output.writeFieldBegin('database', Thrift.Type.STRING, 2);
      output.writeString(this.database);
      output.writeFieldEnd();
    }
    if (this.start_time !== null && this.start_time !== undefined) {
      output.writeFieldBegin('start_time', Thrift.Type.I64, 3);
      output.writeI64(this.start_time);
      output.writeFieldEnd();
    }
    if (this.is_super !== null && this.is_super !== undefined) {
      output.writeFieldBegin('is_super', Thrift.Type.BOOL, 4);
      output.writeBool(this.is_super);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TGeoFileLayerInfo = module.exports.TGeoFileLayerInfo = class {
  constructor(args) {
    this.name = null;
    this.contents = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.contents !== undefined && args.contents !== null) {
        this.contents = args.contents;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.contents = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TGeoFileLayerInfo');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.contents !== null && this.contents !== undefined) {
      output.writeFieldBegin('contents', Thrift.Type.I32, 2);
      output.writeI32(this.contents);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TTableEpochInfo = module.exports.TTableEpochInfo = class {
  constructor(args) {
    this.table_id = null;
    this.table_epoch = null;
    this.leaf_index = null;
    if (args) {
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
      if (args.table_epoch !== undefined && args.table_epoch !== null) {
        this.table_epoch = args.table_epoch;
      }
      if (args.leaf_index !== undefined && args.leaf_index !== null) {
        this.leaf_index = args.leaf_index;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.table_epoch = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.leaf_index = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TTableEpochInfo');
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 1);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    if (this.table_epoch !== null && this.table_epoch !== undefined) {
      output.writeFieldBegin('table_epoch', Thrift.Type.I32, 2);
      output.writeI32(this.table_epoch);
      output.writeFieldEnd();
    }
    if (this.leaf_index !== null && this.leaf_index !== undefined) {
      output.writeFieldBegin('leaf_index', Thrift.Type.I32, 3);
      output.writeI32(this.leaf_index);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TCustomExpression = module.exports.TCustomExpression = class {
  constructor(args) {
    this.id = null;
    this.name = null;
    this.expression_json = null;
    this.data_source_type = null;
    this.data_source_id = null;
    this.is_deleted = null;
    this.data_source_name = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.expression_json !== undefined && args.expression_json !== null) {
        this.expression_json = args.expression_json;
      }
      if (args.data_source_type !== undefined && args.data_source_type !== null) {
        this.data_source_type = args.data_source_type;
      }
      if (args.data_source_id !== undefined && args.data_source_id !== null) {
        this.data_source_id = args.data_source_id;
      }
      if (args.is_deleted !== undefined && args.is_deleted !== null) {
        this.is_deleted = args.is_deleted;
      }
      if (args.data_source_name !== undefined && args.data_source_name !== null) {
        this.data_source_name = args.data_source_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.expression_json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.data_source_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.data_source_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.is_deleted = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.data_source_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TCustomExpression');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I32, 1);
      output.writeI32(this.id);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.expression_json !== null && this.expression_json !== undefined) {
      output.writeFieldBegin('expression_json', Thrift.Type.STRING, 4);
      output.writeString(this.expression_json);
      output.writeFieldEnd();
    }
    if (this.data_source_type !== null && this.data_source_type !== undefined) {
      output.writeFieldBegin('data_source_type', Thrift.Type.I32, 5);
      output.writeI32(this.data_source_type);
      output.writeFieldEnd();
    }
    if (this.data_source_id !== null && this.data_source_id !== undefined) {
      output.writeFieldBegin('data_source_id', Thrift.Type.I32, 6);
      output.writeI32(this.data_source_id);
      output.writeFieldEnd();
    }
    if (this.is_deleted !== null && this.is_deleted !== undefined) {
      output.writeFieldBegin('is_deleted', Thrift.Type.BOOL, 7);
      output.writeBool(this.is_deleted);
      output.writeFieldEnd();
    }
    if (this.data_source_name !== null && this.data_source_name !== undefined) {
      output.writeFieldBegin('data_source_name', Thrift.Type.STRING, 8);
      output.writeString(this.data_source_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TQueryInfo = module.exports.TQueryInfo = class {
  constructor(args) {
    this.query_session_id = null;
    this.query_public_session_id = null;
    this.current_status = null;
    this.executor_id = null;
    this.submitted = null;
    this.query_str = null;
    this.login_name = null;
    this.client_address = null;
    this.db_name = null;
    this.exec_device_type = null;
    if (args) {
      if (args.query_session_id !== undefined && args.query_session_id !== null) {
        this.query_session_id = args.query_session_id;
      }
      if (args.query_public_session_id !== undefined && args.query_public_session_id !== null) {
        this.query_public_session_id = args.query_public_session_id;
      }
      if (args.current_status !== undefined && args.current_status !== null) {
        this.current_status = args.current_status;
      }
      if (args.executor_id !== undefined && args.executor_id !== null) {
        this.executor_id = args.executor_id;
      }
      if (args.submitted !== undefined && args.submitted !== null) {
        this.submitted = args.submitted;
      }
      if (args.query_str !== undefined && args.query_str !== null) {
        this.query_str = args.query_str;
      }
      if (args.login_name !== undefined && args.login_name !== null) {
        this.login_name = args.login_name;
      }
      if (args.client_address !== undefined && args.client_address !== null) {
        this.client_address = args.client_address;
      }
      if (args.db_name !== undefined && args.db_name !== null) {
        this.db_name = args.db_name;
      }
      if (args.exec_device_type !== undefined && args.exec_device_type !== null) {
        this.exec_device_type = args.exec_device_type;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.query_session_id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.query_public_session_id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.current_status = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.executor_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.submitted = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.query_str = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.login_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.client_address = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.exec_device_type = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TQueryInfo');
    if (this.query_session_id !== null && this.query_session_id !== undefined) {
      output.writeFieldBegin('query_session_id', Thrift.Type.STRING, 1);
      output.writeString(this.query_session_id);
      output.writeFieldEnd();
    }
    if (this.query_public_session_id !== null && this.query_public_session_id !== undefined) {
      output.writeFieldBegin('query_public_session_id', Thrift.Type.STRING, 2);
      output.writeString(this.query_public_session_id);
      output.writeFieldEnd();
    }
    if (this.current_status !== null && this.current_status !== undefined) {
      output.writeFieldBegin('current_status', Thrift.Type.STRING, 3);
      output.writeString(this.current_status);
      output.writeFieldEnd();
    }
    if (this.executor_id !== null && this.executor_id !== undefined) {
      output.writeFieldBegin('executor_id', Thrift.Type.I32, 4);
      output.writeI32(this.executor_id);
      output.writeFieldEnd();
    }
    if (this.submitted !== null && this.submitted !== undefined) {
      output.writeFieldBegin('submitted', Thrift.Type.STRING, 5);
      output.writeString(this.submitted);
      output.writeFieldEnd();
    }
    if (this.query_str !== null && this.query_str !== undefined) {
      output.writeFieldBegin('query_str', Thrift.Type.STRING, 6);
      output.writeString(this.query_str);
      output.writeFieldEnd();
    }
    if (this.login_name !== null && this.login_name !== undefined) {
      output.writeFieldBegin('login_name', Thrift.Type.STRING, 7);
      output.writeString(this.login_name);
      output.writeFieldEnd();
    }
    if (this.client_address !== null && this.client_address !== undefined) {
      output.writeFieldBegin('client_address', Thrift.Type.STRING, 8);
      output.writeString(this.client_address);
      output.writeFieldEnd();
    }
    if (this.db_name !== null && this.db_name !== undefined) {
      output.writeFieldBegin('db_name', Thrift.Type.STRING, 9);
      output.writeString(this.db_name);
      output.writeFieldEnd();
    }
    if (this.exec_device_type !== null && this.exec_device_type !== undefined) {
      output.writeFieldBegin('exec_device_type', Thrift.Type.STRING, 10);
      output.writeString(this.exec_device_type);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TLeafInfo = module.exports.TLeafInfo = class {
  constructor(args) {
    this.leaf_id = null;
    this.num_leaves = null;
    if (args) {
      if (args.leaf_id !== undefined && args.leaf_id !== null) {
        this.leaf_id = args.leaf_id;
      }
      if (args.num_leaves !== undefined && args.num_leaves !== null) {
        this.num_leaves = args.num_leaves;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.leaf_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.num_leaves = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TLeafInfo');
    if (this.leaf_id !== null && this.leaf_id !== undefined) {
      output.writeFieldBegin('leaf_id', Thrift.Type.I32, 1);
      output.writeI32(this.leaf_id);
      output.writeFieldEnd();
    }
    if (this.num_leaves !== null && this.num_leaves !== undefined) {
      output.writeFieldBegin('num_leaves', Thrift.Type.I32, 2);
      output.writeI32(this.num_leaves);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
