//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var completion_hints_ttypes = require('./completion_hints_types');


var ttypes = require('./mapd_types');
//HELPER FUNCTIONS AND STRUCTURES

var MapD_connect_args = function(args) {
  this.user = null;
  this.passwd = null;
  this.dbname = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.passwd !== undefined && args.passwd !== null) {
      this.passwd = args.passwd;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
MapD_connect_args.prototype = {};
MapD_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_connect_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_connect_result.prototype = {};
MapD_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_disconnect_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_disconnect_args.prototype = {};
MapD_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_disconnect_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_disconnect_result.prototype = {};
MapD_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_server_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_server_status_args.prototype = {};
MapD_get_server_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_server_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TServerStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_server_status_result.prototype = {};
MapD_get_server_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TServerStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_status_args.prototype = {};
MapD_get_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TServerStatus]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_status_result.prototype = {};
MapD_get_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size266 = 0;
        var _rtmp3270;
        this.success = [];
        var _etype269 = 0;
        _rtmp3270 = input.readListBegin();
        _etype269 = _rtmp3270.etype;
        _size266 = _rtmp3270.size;
        for (var _i271 = 0; _i271 < _size266; ++_i271)
        {
          var elem272 = null;
          elem272 = new ttypes.TServerStatus();
          elem272.read(input);
          this.success.push(elem272);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter273 in this.success)
    {
      if (this.success.hasOwnProperty(iter273))
      {
        iter273 = this.success[iter273];
        iter273.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_hardware_info_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_hardware_info_args.prototype = {};
MapD_get_hardware_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_hardware_info_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_hardware_info_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_hardware_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TClusterHardwareInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_hardware_info_result.prototype = {};
MapD_get_hardware_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TClusterHardwareInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_hardware_info_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_hardware_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_tables_args.prototype = {};
MapD_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_tables_result.prototype = {};
MapD_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size274 = 0;
        var _rtmp3278;
        this.success = [];
        var _etype277 = 0;
        _rtmp3278 = input.readListBegin();
        _etype277 = _rtmp3278.etype;
        _size274 = _rtmp3278.size;
        for (var _i279 = 0; _i279 < _size274; ++_i279)
        {
          var elem280 = null;
          elem280 = input.readString();
          this.success.push(elem280);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter281 in this.success)
    {
      if (this.success.hasOwnProperty(iter281))
      {
        iter281 = this.success[iter281];
        output.writeString(iter281);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_physical_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_physical_tables_args.prototype = {};
MapD_get_physical_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_physical_tables_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_physical_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_physical_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_physical_tables_result.prototype = {};
MapD_get_physical_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size282 = 0;
        var _rtmp3286;
        this.success = [];
        var _etype285 = 0;
        _rtmp3286 = input.readListBegin();
        _etype285 = _rtmp3286.etype;
        _size282 = _rtmp3286.size;
        for (var _i287 = 0; _i287 < _size282; ++_i287)
        {
          var elem288 = null;
          elem288 = input.readString();
          this.success.push(elem288);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_physical_tables_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_physical_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter289 in this.success)
    {
      if (this.success.hasOwnProperty(iter289))
      {
        iter289 = this.success[iter289];
        output.writeString(iter289);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_views_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_views_args.prototype = {};
MapD_get_views_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_views_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_views_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_views_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_views_result.prototype = {};
MapD_get_views_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size290 = 0;
        var _rtmp3294;
        this.success = [];
        var _etype293 = 0;
        _rtmp3294 = input.readListBegin();
        _etype293 = _rtmp3294.etype;
        _size290 = _rtmp3294.size;
        for (var _i295 = 0; _i295 < _size290; ++_i295)
        {
          var elem296 = null;
          elem296 = input.readString();
          this.success.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_views_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_views_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter297 in this.success)
    {
      if (this.success.hasOwnProperty(iter297))
      {
        iter297 = this.success[iter297];
        output.writeString(iter297);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_tables_meta_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_tables_meta_args.prototype = {};
MapD_get_tables_meta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_meta_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_meta_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_tables_meta_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TTableMeta]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_tables_meta_result.prototype = {};
MapD_get_tables_meta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size298 = 0;
        var _rtmp3302;
        this.success = [];
        var _etype301 = 0;
        _rtmp3302 = input.readListBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = new ttypes.TTableMeta();
          elem304.read(input);
          this.success.push(elem304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_meta_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_meta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter305 in this.success)
    {
      if (this.success.hasOwnProperty(iter305))
      {
        iter305 = this.success[iter305];
        iter305.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_table_details_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_details_args.prototype = {};
MapD_get_table_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_details_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_details_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_table_details_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TTableDetails(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_table_details_result.prototype = {};
MapD_get_table_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTableDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_details_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_internal_table_details_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_internal_table_details_args.prototype = {};
MapD_get_internal_table_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_internal_table_details_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_internal_table_details_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_internal_table_details_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TTableDetails(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_internal_table_details_result.prototype = {};
MapD_get_internal_table_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTableDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_internal_table_details_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_internal_table_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_users_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_users_args.prototype = {};
MapD_get_users_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_users_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_users_result.prototype = {};
MapD_get_users_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size306 = 0;
        var _rtmp3310;
        this.success = [];
        var _etype309 = 0;
        _rtmp3310 = input.readListBegin();
        _etype309 = _rtmp3310.etype;
        _size306 = _rtmp3310.size;
        for (var _i311 = 0; _i311 < _size306; ++_i311)
        {
          var elem312 = null;
          elem312 = input.readString();
          this.success.push(elem312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter313 in this.success)
    {
      if (this.success.hasOwnProperty(iter313))
      {
        iter313 = this.success[iter313];
        output.writeString(iter313);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_databases_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_databases_args.prototype = {};
MapD_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_databases_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDBInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_databases_result.prototype = {};
MapD_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size314 = 0;
        var _rtmp3318;
        this.success = [];
        var _etype317 = 0;
        _rtmp3318 = input.readListBegin();
        _etype317 = _rtmp3318.etype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var elem320 = null;
          elem320 = new ttypes.TDBInfo();
          elem320.read(input);
          this.success.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter321 in this.success)
    {
      if (this.success.hasOwnProperty(iter321))
      {
        iter321 = this.success[iter321];
        iter321.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_version_args = function(args) {
};
MapD_get_version_args.prototype = {};
MapD_get_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_version_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_version_result.prototype = {};
MapD_get_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_start_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_start_heap_profile_args.prototype = {};
MapD_start_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_start_heap_profile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_start_heap_profile_result.prototype = {};
MapD_start_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_stop_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_stop_heap_profile_args.prototype = {};
MapD_stop_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_stop_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_stop_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_stop_heap_profile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_stop_heap_profile_result.prototype = {};
MapD_stop_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_stop_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_stop_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_heap_profile_args.prototype = {};
MapD_get_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_heap_profile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_heap_profile_result.prototype = {};
MapD_get_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_heap_profile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_memory_args = function(args) {
  this.session = null;
  this.memory_level = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.memory_level !== undefined && args.memory_level !== null) {
      this.memory_level = args.memory_level;
    }
  }
};
MapD_get_memory_args.prototype = {};
MapD_get_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.memory_level = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.memory_level !== null && this.memory_level !== undefined) {
    output.writeFieldBegin('memory_level', Thrift.Type.STRING, 2);
    output.writeString(this.memory_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_memory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TNodeMemoryInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_memory_result.prototype = {};
MapD_get_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.success = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ttypes.TNodeMemoryInfo();
          elem328.read(input);
          this.success.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter329 in this.success)
    {
      if (this.success.hasOwnProperty(iter329))
      {
        iter329 = this.success[iter329];
        iter329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_clear_cpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_clear_cpu_memory_args.prototype = {};
MapD_clear_cpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_cpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_cpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_clear_cpu_memory_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_clear_cpu_memory_result.prototype = {};
MapD_clear_cpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_cpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_cpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_clear_gpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_clear_gpu_memory_args.prototype = {};
MapD_clear_gpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_gpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_gpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_clear_gpu_memory_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_clear_gpu_memory_result.prototype = {};
MapD_clear_gpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_gpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_gpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_set_table_epoch_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  this.new_epoch = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
    if (args.new_epoch !== undefined && args.new_epoch !== null) {
      this.new_epoch = args.new_epoch;
    }
  }
};
MapD_set_table_epoch_args.prototype = {};
MapD_set_table_epoch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.new_epoch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_table_epoch_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_table_epoch_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  if (this.new_epoch !== null && this.new_epoch !== undefined) {
    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 4);
    output.writeI32(this.new_epoch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_set_table_epoch_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_set_table_epoch_result.prototype = {};
MapD_set_table_epoch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_table_epoch_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_table_epoch_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_set_table_epoch_by_name_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.new_epoch = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.new_epoch !== undefined && args.new_epoch !== null) {
      this.new_epoch = args.new_epoch;
    }
  }
};
MapD_set_table_epoch_by_name_args.prototype = {};
MapD_set_table_epoch_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.new_epoch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_table_epoch_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_table_epoch_by_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.new_epoch !== null && this.new_epoch !== undefined) {
    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 3);
    output.writeI32(this.new_epoch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_set_table_epoch_by_name_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_set_table_epoch_by_name_result.prototype = {};
MapD_set_table_epoch_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_table_epoch_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_table_epoch_by_name_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_table_epoch_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
MapD_get_table_epoch_args.prototype = {};
MapD_get_table_epoch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_epoch_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_epoch_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_table_epoch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
MapD_get_table_epoch_result.prototype = {};
MapD_get_table_epoch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_epoch_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_epoch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_table_epoch_by_name_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_epoch_by_name_args.prototype = {};
MapD_get_table_epoch_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_epoch_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_epoch_by_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_table_epoch_by_name_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
MapD_get_table_epoch_by_name_result.prototype = {};
MapD_get_table_epoch_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_epoch_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_epoch_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_sql_execute_args = function(args) {
  this.session = null;
  this.query = null;
  this.column_format = null;
  this.nonce = null;
  this.first_n = -1;
  this.at_most_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
    if (args.at_most_n !== undefined && args.at_most_n !== null) {
      this.at_most_n = args.at_most_n;
    }
  }
};
MapD_sql_execute_args.prototype = {};
MapD_sql_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.at_most_n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  if (this.at_most_n !== null && this.at_most_n !== undefined) {
    output.writeFieldBegin('at_most_n', Thrift.Type.I32, 6);
    output.writeI32(this.at_most_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_sql_execute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TQueryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_sql_execute_result.prototype = {};
MapD_sql_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_sql_execute_df_args = function(args) {
  this.session = null;
  this.query = null;
  this.device_type = null;
  this.device_id = 0;
  this.first_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.device_type !== undefined && args.device_type !== null) {
      this.device_type = args.device_type;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
  }
};
MapD_sql_execute_df_args.prototype = {};
MapD_sql_execute_df_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_df_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_df_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.device_type !== null && this.device_type !== undefined) {
    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);
    output.writeI32(this.device_type);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_sql_execute_df_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDataFrame(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_sql_execute_df_result.prototype = {};
MapD_sql_execute_df_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDataFrame();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_df_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_df_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_sql_execute_gdf_args = function(args) {
  this.session = null;
  this.query = null;
  this.device_id = 0;
  this.first_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
  }
};
MapD_sql_execute_gdf_args.prototype = {};
MapD_sql_execute_gdf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_gdf_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_gdf_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_sql_execute_gdf_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDataFrame(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_sql_execute_gdf_result.prototype = {};
MapD_sql_execute_gdf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDataFrame();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_gdf_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_gdf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_deallocate_df_args = function(args) {
  this.session = null;
  this.df = null;
  this.device_type = null;
  this.device_id = 0;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.TDataFrame(args.df);
    }
    if (args.device_type !== undefined && args.device_type !== null) {
      this.device_type = args.device_type;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
  }
};
MapD_deallocate_df_args.prototype = {};
MapD_deallocate_df_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.TDataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_deallocate_df_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_deallocate_df_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.device_type !== null && this.device_type !== undefined) {
    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);
    output.writeI32(this.device_type);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_deallocate_df_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_deallocate_df_result.prototype = {};
MapD_deallocate_df_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_deallocate_df_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_deallocate_df_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_interrupt_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_interrupt_args.prototype = {};
MapD_interrupt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_interrupt_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_interrupt_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_interrupt_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_interrupt_result.prototype = {};
MapD_interrupt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_interrupt_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_interrupt_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_sql_validate_args = function(args) {
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
MapD_sql_validate_args.prototype = {};
MapD_sql_validate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_validate_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_validate_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_sql_validate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_sql_validate_result.prototype = {};
MapD_sql_validate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size330 = 0;
        var _rtmp3334;
        this.success = {};
        var _ktype331 = 0;
        var _vtype332 = 0;
        _rtmp3334 = input.readMapBegin();
        _ktype331 = _rtmp3334.ktype;
        _vtype332 = _rtmp3334.vtype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var key336 = null;
          var val337 = null;
          key336 = input.readString();
          val337 = new ttypes.TColumnType();
          val337.read(input);
          this.success[key336] = val337;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_validate_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_validate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter338 in this.success)
    {
      if (this.success.hasOwnProperty(kiter338))
      {
        var viter339 = this.success[kiter338];
        output.writeString(kiter338);
        viter339.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_completion_hints_args = function(args) {
  this.session = null;
  this.sql = null;
  this.cursor = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    }
    if (args.cursor !== undefined && args.cursor !== null) {
      this.cursor = args.cursor;
    }
  }
};
MapD_get_completion_hints_args.prototype = {};
MapD_get_completion_hints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cursor = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_completion_hints_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_completion_hints_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 2);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.cursor !== null && this.cursor !== undefined) {
    output.writeFieldBegin('cursor', Thrift.Type.I32, 3);
    output.writeI32(this.cursor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_completion_hints_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [completion_hints_ttypes.TCompletionHint]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_completion_hints_result.prototype = {};
MapD_get_completion_hints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size340 = 0;
        var _rtmp3344;
        this.success = [];
        var _etype343 = 0;
        _rtmp3344 = input.readListBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = new completion_hints_ttypes.TCompletionHint();
          elem346.read(input);
          this.success.push(elem346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_completion_hints_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_completion_hints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter347 in this.success)
    {
      if (this.success.hasOwnProperty(iter347))
      {
        iter347 = this.success[iter347];
        iter347.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_set_execution_mode_args = function(args) {
  this.session = null;
  this.mode = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
MapD_set_execution_mode_args.prototype = {};
MapD_set_execution_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_set_execution_mode_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_set_execution_mode_result.prototype = {};
MapD_set_execution_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_render_vega_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.vega_json = null;
  this.compression_level = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
    if (args.compression_level !== undefined && args.compression_level !== null) {
      this.compression_level = args.compression_level;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_render_vega_args.prototype = {};
MapD_render_vega_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compression_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  if (this.compression_level !== null && this.compression_level !== undefined) {
    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);
    output.writeI32(this.compression_level);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_render_vega_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_render_vega_result.prototype = {};
MapD_render_vega_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_result_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new ttypes.TPixel(args.pixel);
    }
    if (args.table_col_names !== undefined && args.table_col_names !== null) {
      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_result_row_for_pixel_args.prototype = {};
MapD_get_result_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new ttypes.TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size348 = 0;
        var _rtmp3352;
        this.table_col_names = {};
        var _ktype349 = 0;
        var _vtype350 = 0;
        _rtmp3352 = input.readMapBegin();
        _ktype349 = _rtmp3352.ktype;
        _vtype350 = _rtmp3352.vtype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var key354 = null;
          var val355 = null;
          key354 = input.readString();
          var _size356 = 0;
          var _rtmp3360;
          val355 = [];
          var _etype359 = 0;
          _rtmp3360 = input.readListBegin();
          _etype359 = _rtmp3360.etype;
          _size356 = _rtmp3360.size;
          for (var _i361 = 0; _i361 < _size356; ++_i361)
          {
            var elem362 = null;
            elem362 = input.readString();
            val355.push(elem362);
          }
          input.readListEnd();
          this.table_col_names[key354] = val355;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_result_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_result_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_col_names !== null && this.table_col_names !== undefined) {
    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));
    for (var kiter363 in this.table_col_names)
    {
      if (this.table_col_names.hasOwnProperty(kiter363))
      {
        var viter364 = this.table_col_names[kiter363];
        output.writeString(kiter363);
        output.writeListBegin(Thrift.Type.STRING, viter364.length);
        for (var iter365 in viter364)
        {
          if (viter364.hasOwnProperty(iter365))
          {
            iter365 = viter364[iter365];
            output.writeString(iter365);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_result_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPixelTableRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_result_row_for_pixel_result.prototype = {};
MapD_get_result_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPixelTableRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_result_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_result_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_get_frontend_view_args.prototype = {};
MapD_get_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_frontend_view_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_frontend_view_result.prototype = {};
MapD_get_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_frontend_views_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_frontend_views_args.prototype = {};
MapD_get_frontend_views_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_frontend_views_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TFrontendView]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_frontend_views_result.prototype = {};
MapD_get_frontend_views_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.success = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = new ttypes.TFrontendView();
          elem372.read(input);
          this.success.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter373 in this.success)
    {
      if (this.success.hasOwnProperty(iter373))
      {
        iter373 = this.success[iter373];
        iter373.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_create_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  this.view_state = null;
  this.image_hash = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
MapD_create_frontend_view_args.prototype = {};
MapD_create_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 3);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_create_frontend_view_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_create_frontend_view_result.prototype = {};
MapD_create_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_delete_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_delete_frontend_view_args.prototype = {};
MapD_delete_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_delete_frontend_view_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_delete_frontend_view_result.prototype = {};
MapD_delete_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
  }
};
MapD_get_dashboard_args.prototype = {};
MapD_get_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_dashboard_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDashboard(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_dashboard_result.prototype = {};
MapD_get_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDashboard();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_dashboard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_dashboards_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_dashboards_args.prototype = {};
MapD_get_dashboards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_dashboards_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_dashboards_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDashboard]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_dashboards_result.prototype = {};
MapD_get_dashboards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size374 = 0;
        var _rtmp3378;
        this.success = [];
        var _etype377 = 0;
        _rtmp3378 = input.readListBegin();
        _etype377 = _rtmp3378.etype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          var elem380 = null;
          elem380 = new ttypes.TDashboard();
          elem380.read(input);
          this.success.push(elem380);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_dashboards_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter381 in this.success)
    {
      if (this.success.hasOwnProperty(iter381))
      {
        iter381 = this.success[iter381];
        iter381.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_create_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_name = null;
  this.dashboard_state = null;
  this.image_hash = null;
  this.dashboard_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
      this.dashboard_name = args.dashboard_name;
    }
    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
      this.dashboard_state = args.dashboard_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
      this.dashboard_metadata = args.dashboard_metadata;
    }
  }
};
MapD_create_dashboard_args.prototype = {};
MapD_create_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 2);
    output.writeString(this.dashboard_name);
    output.writeFieldEnd();
  }
  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 3);
    output.writeString(this.dashboard_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.dashboard_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_create_dashboard_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_create_dashboard_result.prototype = {};
MapD_create_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_dashboard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_replace_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.dashboard_name = null;
  this.dashboard_owner = null;
  this.dashboard_state = null;
  this.image_hash = null;
  this.dashboard_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
      this.dashboard_name = args.dashboard_name;
    }
    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {
      this.dashboard_owner = args.dashboard_owner;
    }
    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
      this.dashboard_state = args.dashboard_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
      this.dashboard_metadata = args.dashboard_metadata;
    }
  }
};
MapD_replace_dashboard_args.prototype = {};
MapD_replace_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_replace_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_replace_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 3);
    output.writeString(this.dashboard_name);
    output.writeFieldEnd();
  }
  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {
    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 4);
    output.writeString(this.dashboard_owner);
    output.writeFieldEnd();
  }
  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 5);
    output.writeString(this.dashboard_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 6);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 7);
    output.writeString(this.dashboard_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_replace_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_replace_dashboard_result.prototype = {};
MapD_replace_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_replace_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_replace_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_delete_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
  }
};
MapD_delete_dashboard_args.prototype = {};
MapD_delete_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_delete_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_delete_dashboard_result.prototype = {};
MapD_delete_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_share_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.groups = null;
  this.objects = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new ttypes.TDashboardPermissions(args.permissions);
    }
  }
};
MapD_share_dashboard_args.prototype = {};
MapD_share_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.groups = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = input.readString();
          this.groups.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size389 = 0;
        var _rtmp3393;
        this.objects = [];
        var _etype392 = 0;
        _rtmp3393 = input.readListBegin();
        _etype392 = _rtmp3393.etype;
        _size389 = _rtmp3393.size;
        for (var _i394 = 0; _i394 < _size389; ++_i394)
        {
          var elem395 = null;
          elem395 = input.readString();
          this.objects.push(elem395);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new ttypes.TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_share_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_share_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter396 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter396))
      {
        iter396 = this.groups[iter396];
        output.writeString(iter396);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.objects.length);
    for (var iter397 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter397))
      {
        iter397 = this.objects[iter397];
        output.writeString(iter397);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_share_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_share_dashboard_result.prototype = {};
MapD_share_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_share_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_share_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_unshare_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.groups = null;
  this.objects = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new ttypes.TDashboardPermissions(args.permissions);
    }
  }
};
MapD_unshare_dashboard_args.prototype = {};
MapD_unshare_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size398 = 0;
        var _rtmp3402;
        this.groups = [];
        var _etype401 = 0;
        _rtmp3402 = input.readListBegin();
        _etype401 = _rtmp3402.etype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var elem404 = null;
          elem404 = input.readString();
          this.groups.push(elem404);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size405 = 0;
        var _rtmp3409;
        this.objects = [];
        var _etype408 = 0;
        _rtmp3409 = input.readListBegin();
        _etype408 = _rtmp3409.etype;
        _size405 = _rtmp3409.size;
        for (var _i410 = 0; _i410 < _size405; ++_i410)
        {
          var elem411 = null;
          elem411 = input.readString();
          this.objects.push(elem411);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new ttypes.TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_unshare_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_unshare_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter412 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter412))
      {
        iter412 = this.groups[iter412];
        output.writeString(iter412);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.objects.length);
    for (var iter413 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter413))
      {
        iter413 = this.objects[iter413];
        output.writeString(iter413);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_unshare_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_unshare_dashboard_result.prototype = {};
MapD_unshare_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_unshare_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_unshare_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_link_view_args = function(args) {
  this.session = null;
  this.link = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
  }
};
MapD_get_link_view_args.prototype = {};
MapD_get_link_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 2);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_link_view_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_link_view_result.prototype = {};
MapD_get_link_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_create_link_args = function(args) {
  this.session = null;
  this.view_state = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
MapD_create_link_args.prototype = {};
MapD_create_link_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_create_link_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_create_link_result.prototype = {};
MapD_create_link_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_load_table_binary_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
    }
  }
};
MapD_load_table_binary_args.prototype = {};
MapD_load_table_binary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size414 = 0;
        var _rtmp3418;
        this.rows = [];
        var _etype417 = 0;
        _rtmp3418 = input.readListBegin();
        _etype417 = _rtmp3418.etype;
        _size414 = _rtmp3418.size;
        for (var _i419 = 0; _i419 < _size414; ++_i419)
        {
          var elem420 = null;
          elem420 = new ttypes.TRow();
          elem420.read(input);
          this.rows.push(elem420);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter421 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter421))
      {
        iter421 = this.rows[iter421];
        iter421.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_load_table_binary_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_load_table_binary_result.prototype = {};
MapD_load_table_binary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_load_table_binary_columnar_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.cols = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [ttypes.TColumn]);
    }
  }
};
MapD_load_table_binary_columnar_args.prototype = {};
MapD_load_table_binary_columnar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size422 = 0;
        var _rtmp3426;
        this.cols = [];
        var _etype425 = 0;
        _rtmp3426 = input.readListBegin();
        _etype425 = _rtmp3426.etype;
        _size422 = _rtmp3426.size;
        for (var _i427 = 0; _i427 < _size422; ++_i427)
        {
          var elem428 = null;
          elem428 = new ttypes.TColumn();
          elem428.read(input);
          this.cols.push(elem428);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_columnar_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_columnar_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter429 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter429))
      {
        iter429 = this.cols[iter429];
        iter429.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_load_table_binary_columnar_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_load_table_binary_columnar_result.prototype = {};
MapD_load_table_binary_columnar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_columnar_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_columnar_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_load_table_binary_arrow_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.arrow_stream = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.arrow_stream !== undefined && args.arrow_stream !== null) {
      this.arrow_stream = args.arrow_stream;
    }
  }
};
MapD_load_table_binary_arrow_args.prototype = {};
MapD_load_table_binary_arrow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.arrow_stream = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_arrow_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_arrow_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.arrow_stream !== null && this.arrow_stream !== undefined) {
    output.writeFieldBegin('arrow_stream', Thrift.Type.STRING, 3);
    output.writeBinary(this.arrow_stream);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_load_table_binary_arrow_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_load_table_binary_arrow_result.prototype = {};
MapD_load_table_binary_arrow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_arrow_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_arrow_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_load_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.TStringRow]);
    }
  }
};
MapD_load_table_args.prototype = {};
MapD_load_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size430 = 0;
        var _rtmp3434;
        this.rows = [];
        var _etype433 = 0;
        _rtmp3434 = input.readListBegin();
        _etype433 = _rtmp3434.etype;
        _size430 = _rtmp3434.size;
        for (var _i435 = 0; _i435 < _size430; ++_i435)
        {
          var elem436 = null;
          elem436 = new ttypes.TStringRow();
          elem436.read(input);
          this.rows.push(elem436);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter437 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter437))
      {
        iter437 = this.rows[iter437];
        iter437.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_load_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_load_table_result.prototype = {};
MapD_load_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_detect_column_types_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
MapD_detect_column_types_args.prototype = {};
MapD_detect_column_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_detect_column_types_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDetectResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_detect_column_types_result.prototype = {};
MapD_detect_column_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDetectResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_create_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.row_desc = null;
  this.table_type = 0;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
    }
    if (args.table_type !== undefined && args.table_type !== null) {
      this.table_type = args.table_type;
    }
  }
};
MapD_create_table_args.prototype = {};
MapD_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size438 = 0;
        var _rtmp3442;
        this.row_desc = [];
        var _etype441 = 0;
        _rtmp3442 = input.readListBegin();
        _etype441 = _rtmp3442.etype;
        _size438 = _rtmp3442.size;
        for (var _i443 = 0; _i443 < _size438; ++_i443)
        {
          var elem444 = null;
          elem444 = new ttypes.TColumnType();
          elem444.read(input);
          this.row_desc.push(elem444);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.table_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter445 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter445))
      {
        iter445 = this.row_desc[iter445];
        iter445.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.table_type !== null && this.table_type !== undefined) {
    output.writeFieldBegin('table_type', Thrift.Type.I32, 4);
    output.writeI32(this.table_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_create_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_create_table_result.prototype = {};
MapD_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_import_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
MapD_import_table_args.prototype = {};
MapD_import_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_import_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_import_table_result.prototype = {};
MapD_import_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_import_geo_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  this.row_desc = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
    }
  }
};
MapD_import_geo_table_args.prototype = {};
MapD_import_geo_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size446 = 0;
        var _rtmp3450;
        this.row_desc = [];
        var _etype449 = 0;
        _rtmp3450 = input.readListBegin();
        _etype449 = _rtmp3450.etype;
        _size446 = _rtmp3450.size;
        for (var _i451 = 0; _i451 < _size446; ++_i451)
        {
          var elem452 = null;
          elem452 = new ttypes.TColumnType();
          elem452.read(input);
          this.row_desc.push(elem452);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_geo_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_geo_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter453 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter453))
      {
        iter453 = this.row_desc[iter453];
        iter453.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_import_geo_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_import_geo_table_result.prototype = {};
MapD_import_geo_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_geo_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_geo_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_import_table_status_args = function(args) {
  this.session = null;
  this.import_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.import_id !== undefined && args.import_id !== null) {
      this.import_id = args.import_id;
    }
  }
};
MapD_import_table_status_args.prototype = {};
MapD_import_table_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.import_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.import_id !== null && this.import_id !== undefined) {
    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);
    output.writeString(this.import_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_import_table_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TImportStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_import_table_status_result.prototype = {};
MapD_import_table_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TImportStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_start_query_args = function(args) {
  this.session = null;
  this.query_ra = null;
  this.just_explain = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query_ra !== undefined && args.query_ra !== null) {
      this.query_ra = args.query_ra;
    }
    if (args.just_explain !== undefined && args.just_explain !== null) {
      this.just_explain = args.just_explain;
    }
  }
};
MapD_start_query_args.prototype = {};
MapD_start_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query_ra = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.just_explain = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_query_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_query_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query_ra !== null && this.query_ra !== undefined) {
    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 2);
    output.writeString(this.query_ra);
    output.writeFieldEnd();
  }
  if (this.just_explain !== null && this.just_explain !== undefined) {
    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 3);
    output.writeBool(this.just_explain);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_start_query_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPendingQuery(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_start_query_result.prototype = {};
MapD_start_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPendingQuery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_query_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_execute_first_step_args = function(args) {
  this.pending_query = null;
  if (args) {
    if (args.pending_query !== undefined && args.pending_query !== null) {
      this.pending_query = new ttypes.TPendingQuery(args.pending_query);
    }
  }
};
MapD_execute_first_step_args.prototype = {};
MapD_execute_first_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending_query = new ttypes.TPendingQuery();
        this.pending_query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_first_step_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_first_step_args');
  if (this.pending_query !== null && this.pending_query !== undefined) {
    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);
    this.pending_query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_execute_first_step_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_execute_first_step_result.prototype = {};
MapD_execute_first_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_first_step_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_first_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_broadcast_serialized_rows_args = function(args) {
  this.serialized_rows = null;
  this.row_desc = null;
  this.query_id = null;
  if (args) {
    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
      this.serialized_rows = args.serialized_rows;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
    }
    if (args.query_id !== undefined && args.query_id !== null) {
      this.query_id = args.query_id;
    }
  }
};
MapD_broadcast_serialized_rows_args.prototype = {};
MapD_broadcast_serialized_rows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialized_rows = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size454 = 0;
        var _rtmp3458;
        this.row_desc = [];
        var _etype457 = 0;
        _rtmp3458 = input.readListBegin();
        _etype457 = _rtmp3458.etype;
        _size454 = _rtmp3458.size;
        for (var _i459 = 0; _i459 < _size454; ++_i459)
        {
          var elem460 = null;
          elem460 = new ttypes.TColumnType();
          elem460.read(input);
          this.row_desc.push(elem460);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.query_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_broadcast_serialized_rows_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_broadcast_serialized_rows_args');
  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);
    output.writeString(this.serialized_rows);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter461 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter461))
      {
        iter461 = this.row_desc[iter461];
        iter461.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.query_id !== null && this.query_id !== undefined) {
    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);
    output.writeI64(this.query_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_broadcast_serialized_rows_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_broadcast_serialized_rows_result.prototype = {};
MapD_broadcast_serialized_rows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_broadcast_serialized_rows_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_broadcast_serialized_rows_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_start_render_query_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.node_idx = null;
  this.vega_json = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.node_idx !== undefined && args.node_idx !== null) {
      this.node_idx = args.node_idx;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
  }
};
MapD_start_render_query_args.prototype = {};
MapD_start_render_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.node_idx = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_render_query_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_render_query_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.node_idx !== null && this.node_idx !== undefined) {
    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);
    output.writeI16(this.node_idx);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_start_render_query_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPendingRenderQuery(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_start_render_query_result.prototype = {};
MapD_start_render_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPendingRenderQuery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_render_query_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_render_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_execute_next_render_step_args = function(args) {
  this.pending_render = null;
  this.merged_data = null;
  if (args) {
    if (args.pending_render !== undefined && args.pending_render !== null) {
      this.pending_render = new ttypes.TPendingRenderQuery(args.pending_render);
    }
    if (args.merged_data !== undefined && args.merged_data !== null) {
      this.merged_data = Thrift.copyMap(args.merged_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, ttypes.TRenderDatum]);
    }
  }
};
MapD_execute_next_render_step_args.prototype = {};
MapD_execute_next_render_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending_render = new ttypes.TPendingRenderQuery();
        this.pending_render.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size462 = 0;
        var _rtmp3466;
        this.merged_data = {};
        var _ktype463 = 0;
        var _vtype464 = 0;
        _rtmp3466 = input.readMapBegin();
        _ktype463 = _rtmp3466.ktype;
        _vtype464 = _rtmp3466.vtype;
        _size462 = _rtmp3466.size;
        for (var _i467 = 0; _i467 < _size462; ++_i467)
        {
          var key468 = null;
          var val469 = null;
          key468 = input.readString();
          var _size470 = 0;
          var _rtmp3474;
          val469 = {};
          var _ktype471 = 0;
          var _vtype472 = 0;
          _rtmp3474 = input.readMapBegin();
          _ktype471 = _rtmp3474.ktype;
          _vtype472 = _rtmp3474.vtype;
          _size470 = _rtmp3474.size;
          for (var _i475 = 0; _i475 < _size470; ++_i475)
          {
            var key476 = null;
            var val477 = null;
            key476 = input.readString();
            var _size478 = 0;
            var _rtmp3482;
            val477 = {};
            var _ktype479 = 0;
            var _vtype480 = 0;
            _rtmp3482 = input.readMapBegin();
            _ktype479 = _rtmp3482.ktype;
            _vtype480 = _rtmp3482.vtype;
            _size478 = _rtmp3482.size;
            for (var _i483 = 0; _i483 < _size478; ++_i483)
            {
              var key484 = null;
              var val485 = null;
              key484 = input.readString();
              var _size486 = 0;
              var _rtmp3490;
              val485 = {};
              var _ktype487 = 0;
              var _vtype488 = 0;
              _rtmp3490 = input.readMapBegin();
              _ktype487 = _rtmp3490.ktype;
              _vtype488 = _rtmp3490.vtype;
              _size486 = _rtmp3490.size;
              for (var _i491 = 0; _i491 < _size486; ++_i491)
              {
                var key492 = null;
                var val493 = null;
                key492 = input.readString();
                var _size494 = 0;
                var _rtmp3498;
                val493 = [];
                var _etype497 = 0;
                _rtmp3498 = input.readListBegin();
                _etype497 = _rtmp3498.etype;
                _size494 = _rtmp3498.size;
                for (var _i499 = 0; _i499 < _size494; ++_i499)
                {
                  var elem500 = null;
                  elem500 = new ttypes.TRenderDatum();
                  elem500.read(input);
                  val493.push(elem500);
                }
                input.readListEnd();
                val485[key492] = val493;
              }
              input.readMapEnd();
              val477[key484] = val485;
            }
            input.readMapEnd();
            val469[key476] = val477;
          }
          input.readMapEnd();
          this.merged_data[key468] = val469;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_next_render_step_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_next_render_step_args');
  if (this.pending_render !== null && this.pending_render !== undefined) {
    output.writeFieldBegin('pending_render', Thrift.Type.STRUCT, 1);
    this.pending_render.write(output);
    output.writeFieldEnd();
  }
  if (this.merged_data !== null && this.merged_data !== undefined) {
    output.writeFieldBegin('merged_data', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merged_data));
    for (var kiter501 in this.merged_data)
    {
      if (this.merged_data.hasOwnProperty(kiter501))
      {
        var viter502 = this.merged_data[kiter501];
        output.writeString(kiter501);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter502));
        for (var kiter503 in viter502)
        {
          if (viter502.hasOwnProperty(kiter503))
          {
            var viter504 = viter502[kiter503];
            output.writeString(kiter503);
            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter504));
            for (var kiter505 in viter504)
            {
              if (viter504.hasOwnProperty(kiter505))
              {
                var viter506 = viter504[kiter505];
                output.writeString(kiter505);
                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter506));
                for (var kiter507 in viter506)
                {
                  if (viter506.hasOwnProperty(kiter507))
                  {
                    var viter508 = viter506[kiter507];
                    output.writeString(kiter507);
                    output.writeListBegin(Thrift.Type.STRUCT, viter508.length);
                    for (var iter509 in viter508)
                    {
                      if (viter508.hasOwnProperty(iter509))
                      {
                        iter509 = viter508[iter509];
                        iter509.write(output);
                      }
                    }
                    output.writeListEnd();
                  }
                }
                output.writeMapEnd();
              }
            }
            output.writeMapEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_execute_next_render_step_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TRenderStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_execute_next_render_step_result.prototype = {};
MapD_execute_next_render_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRenderStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_next_render_step_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_next_render_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_insert_data_args = function(args) {
  this.session = null;
  this.insert_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.insert_data !== undefined && args.insert_data !== null) {
      this.insert_data = new ttypes.TInsertData(args.insert_data);
    }
  }
};
MapD_insert_data_args.prototype = {};
MapD_insert_data_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.insert_data = new ttypes.TInsertData();
        this.insert_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_insert_data_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_insert_data_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.insert_data !== null && this.insert_data !== undefined) {
    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);
    this.insert_data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_insert_data_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_insert_data_result.prototype = {};
MapD_insert_data_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_insert_data_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_insert_data_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_checkpoint_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
MapD_checkpoint_args.prototype = {};
MapD_checkpoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_checkpoint_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_checkpoint_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_checkpoint_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_checkpoint_result.prototype = {};
MapD_checkpoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_checkpoint_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_checkpoint_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_table_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_descriptor_args.prototype = {};
MapD_get_table_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_table_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_table_descriptor_result.prototype = {};
MapD_get_table_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size510 = 0;
        var _rtmp3514;
        this.success = {};
        var _ktype511 = 0;
        var _vtype512 = 0;
        _rtmp3514 = input.readMapBegin();
        _ktype511 = _rtmp3514.ktype;
        _vtype512 = _rtmp3514.vtype;
        _size510 = _rtmp3514.size;
        for (var _i515 = 0; _i515 < _size510; ++_i515)
        {
          var key516 = null;
          var val517 = null;
          key516 = input.readString();
          val517 = new ttypes.TColumnType();
          val517.read(input);
          this.success[key516] = val517;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter518 in this.success)
    {
      if (this.success.hasOwnProperty(kiter518))
      {
        var viter519 = this.success[kiter518];
        output.writeString(kiter518);
        viter519.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_row_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_row_descriptor_args.prototype = {};
MapD_get_row_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_row_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_row_descriptor_result.prototype = {};
MapD_get_row_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size520 = 0;
        var _rtmp3524;
        this.success = [];
        var _etype523 = 0;
        _rtmp3524 = input.readListBegin();
        _etype523 = _rtmp3524.etype;
        _size520 = _rtmp3524.size;
        for (var _i525 = 0; _i525 < _size520; ++_i525)
        {
          var elem526 = null;
          elem526 = new ttypes.TColumnType();
          elem526.read(input);
          this.success.push(elem526);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter527 in this.success)
    {
      if (this.success.hasOwnProperty(iter527))
      {
        iter527 = this.success[iter527];
        iter527.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_roles_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_roles_args.prototype = {};
MapD_get_roles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_roles_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_roles_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_roles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_roles_result.prototype = {};
MapD_get_roles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size528 = 0;
        var _rtmp3532;
        this.success = [];
        var _etype531 = 0;
        _rtmp3532 = input.readListBegin();
        _etype531 = _rtmp3532.etype;
        _size528 = _rtmp3532.size;
        for (var _i533 = 0; _i533 < _size528; ++_i533)
        {
          var elem534 = null;
          elem534 = input.readString();
          this.success.push(elem534);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_roles_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_roles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter535 in this.success)
    {
      if (this.success.hasOwnProperty(iter535))
      {
        iter535 = this.success[iter535];
        output.writeString(iter535);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_db_objects_for_grantee_args = function(args) {
  this.session = null;
  this.roleName = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
  }
};
MapD_get_db_objects_for_grantee_args.prototype = {};
MapD_get_db_objects_for_grantee_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_db_objects_for_grantee_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_db_objects_for_grantee_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_db_objects_for_grantee_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDBObject]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_db_objects_for_grantee_result.prototype = {};
MapD_get_db_objects_for_grantee_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size536 = 0;
        var _rtmp3540;
        this.success = [];
        var _etype539 = 0;
        _rtmp3540 = input.readListBegin();
        _etype539 = _rtmp3540.etype;
        _size536 = _rtmp3540.size;
        for (var _i541 = 0; _i541 < _size536; ++_i541)
        {
          var elem542 = null;
          elem542 = new ttypes.TDBObject();
          elem542.read(input);
          this.success.push(elem542);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_db_objects_for_grantee_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_db_objects_for_grantee_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter543 in this.success)
    {
      if (this.success.hasOwnProperty(iter543))
      {
        iter543 = this.success[iter543];
        iter543.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_db_object_privs_args = function(args) {
  this.session = null;
  this.objectName = null;
  this.type = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.objectName !== undefined && args.objectName !== null) {
      this.objectName = args.objectName;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
MapD_get_db_object_privs_args.prototype = {};
MapD_get_db_object_privs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_db_object_privs_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_db_object_privs_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.objectName !== null && this.objectName !== undefined) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 2);
    output.writeString(this.objectName);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_db_object_privs_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDBObject]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_db_object_privs_result.prototype = {};
MapD_get_db_object_privs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size544 = 0;
        var _rtmp3548;
        this.success = [];
        var _etype547 = 0;
        _rtmp3548 = input.readListBegin();
        _etype547 = _rtmp3548.etype;
        _size544 = _rtmp3548.size;
        for (var _i549 = 0; _i549 < _size544; ++_i549)
        {
          var elem550 = null;
          elem550 = new ttypes.TDBObject();
          elem550.read(input);
          this.success.push(elem550);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_db_object_privs_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_db_object_privs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter551 in this.success)
    {
      if (this.success.hasOwnProperty(iter551))
      {
        iter551 = this.success[iter551];
        iter551.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_all_roles_for_user_args = function(args) {
  this.session = null;
  this.userName = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
  }
};
MapD_get_all_roles_for_user_args.prototype = {};
MapD_get_all_roles_for_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_all_roles_for_user_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_all_roles_for_user_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_all_roles_for_user_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_all_roles_for_user_result.prototype = {};
MapD_get_all_roles_for_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size552 = 0;
        var _rtmp3556;
        this.success = [];
        var _etype555 = 0;
        _rtmp3556 = input.readListBegin();
        _etype555 = _rtmp3556.etype;
        _size552 = _rtmp3556.size;
        for (var _i557 = 0; _i557 < _size552; ++_i557)
        {
          var elem558 = null;
          elem558 = input.readString();
          this.success.push(elem558);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_all_roles_for_user_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_all_roles_for_user_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter559 in this.success)
    {
      if (this.success.hasOwnProperty(iter559))
      {
        iter559 = this.success[iter559];
        output.writeString(iter559);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_set_license_key_args = function(args) {
  this.session = null;
  this.key = null;
  this.nonce = '';
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_set_license_key_args.prototype = {};
MapD_set_license_key_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_license_key_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_license_key_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 3);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_set_license_key_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TLicenseInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_set_license_key_result.prototype = {};
MapD_set_license_key_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TLicenseInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_license_key_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_license_key_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_license_claims_args = function(args) {
  this.session = null;
  this.nonce = '';
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_license_claims_args.prototype = {};
MapD_get_license_claims_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_license_claims_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_license_claims_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_license_claims_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TLicenseInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_license_claims_result.prototype = {};
MapD_get_license_claims_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TLicenseInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_license_claims_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_license_claims_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapDClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
MapDClient.prototype = {};
MapDClient.prototype.seqid = function() { return this._seqid; };
MapDClient.prototype.new_seqid = function() { return this._seqid += 1; };
MapDClient.prototype.connect = function(user, passwd, dbname, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_connect(user, passwd, dbname);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_connect(user, passwd, dbname);
  }
};

MapDClient.prototype.send_connect = function(user, passwd, dbname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_connect_args();
  args.user = user;
  args.passwd = passwd;
  args.dbname = dbname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_connect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_connect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('connect failed: unknown result');
};
MapDClient.prototype.disconnect = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disconnect(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disconnect(session);
  }
};

MapDClient.prototype.send_disconnect = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_disconnect_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_disconnect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_disconnect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.get_server_status = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_server_status(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_server_status(session);
  }
};

MapDClient.prototype.send_get_server_status = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_server_status_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_server_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_server_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_server_status failed: unknown result');
};
MapDClient.prototype.get_status = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_status(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_status(session);
  }
};

MapDClient.prototype.send_get_status = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_status', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_status_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_status failed: unknown result');
};
MapDClient.prototype.get_hardware_info = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_hardware_info(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_hardware_info(session);
  }
};

MapDClient.prototype.send_get_hardware_info = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_hardware_info', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_hardware_info_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_hardware_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_hardware_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_hardware_info failed: unknown result');
};
MapDClient.prototype.get_tables = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables(session);
  }
};

MapDClient.prototype.send_get_tables = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_tables_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables failed: unknown result');
};
MapDClient.prototype.get_physical_tables = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_physical_tables(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_physical_tables(session);
  }
};

MapDClient.prototype.send_get_physical_tables = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_physical_tables', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_physical_tables_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_physical_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_physical_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_physical_tables failed: unknown result');
};
MapDClient.prototype.get_views = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_views(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_views(session);
  }
};

MapDClient.prototype.send_get_views = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_views', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_views_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_views = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_views_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_views failed: unknown result');
};
MapDClient.prototype.get_tables_meta = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables_meta(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables_meta(session);
  }
};

MapDClient.prototype.send_get_tables_meta = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables_meta', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_tables_meta_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_tables_meta = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_tables_meta_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables_meta failed: unknown result');
};
MapDClient.prototype.get_table_details = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_details(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_details(session, table_name);
  }
};

MapDClient.prototype.send_get_table_details = function(session, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_table_details_args();
  args.session = session;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_table_details = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_table_details_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_details failed: unknown result');
};
MapDClient.prototype.get_internal_table_details = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_internal_table_details(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_internal_table_details(session, table_name);
  }
};

MapDClient.prototype.send_get_internal_table_details = function(session, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_internal_table_details', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_internal_table_details_args();
  args.session = session;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_internal_table_details = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_internal_table_details_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_internal_table_details failed: unknown result');
};
MapDClient.prototype.get_users = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_users(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_users(session);
  }
};

MapDClient.prototype.send_get_users = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_users_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_users = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_users_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_users failed: unknown result');
};
MapDClient.prototype.get_databases = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_databases(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_databases(session);
  }
};

MapDClient.prototype.send_get_databases = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_databases_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_databases failed: unknown result');
};
MapDClient.prototype.get_version = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_version();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_version();
  }
};

MapDClient.prototype.send_get_version = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_version_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_version failed: unknown result');
};
MapDClient.prototype.start_heap_profile = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start_heap_profile(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_heap_profile(session);
  }
};

MapDClient.prototype.send_start_heap_profile = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_start_heap_profile_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_start_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_start_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.stop_heap_profile = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stop_heap_profile(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stop_heap_profile(session);
  }
};

MapDClient.prototype.send_stop_heap_profile = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_stop_heap_profile_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_stop_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_stop_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.get_heap_profile = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_heap_profile(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_heap_profile(session);
  }
};

MapDClient.prototype.send_get_heap_profile = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_heap_profile_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_heap_profile failed: unknown result');
};
MapDClient.prototype.get_memory = function(session, memory_level, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_memory(session, memory_level);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_memory(session, memory_level);
  }
};

MapDClient.prototype.send_get_memory = function(session, memory_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_memory', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_memory_args();
  args.session = session;
  args.memory_level = memory_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_memory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_memory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_memory failed: unknown result');
};
MapDClient.prototype.clear_cpu_memory = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clear_cpu_memory(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clear_cpu_memory(session);
  }
};

MapDClient.prototype.send_clear_cpu_memory = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_clear_cpu_memory_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_clear_cpu_memory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_clear_cpu_memory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.clear_gpu_memory = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clear_gpu_memory(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clear_gpu_memory(session);
  }
};

MapDClient.prototype.send_clear_gpu_memory = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_clear_gpu_memory_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_clear_gpu_memory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_clear_gpu_memory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.set_table_epoch = function(session, db_id, table_id, new_epoch, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_table_epoch(session, db_id, table_id, new_epoch);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_table_epoch(session, db_id, table_id, new_epoch);
  }
};

MapDClient.prototype.send_set_table_epoch = function(session, db_id, table_id, new_epoch) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_set_table_epoch_args();
  args.session = session;
  args.db_id = db_id;
  args.table_id = table_id;
  args.new_epoch = new_epoch;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_set_table_epoch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_set_table_epoch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.set_table_epoch_by_name = function(session, table_name, new_epoch, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_table_epoch_by_name(session, table_name, new_epoch);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_table_epoch_by_name(session, table_name, new_epoch);
  }
};

MapDClient.prototype.send_set_table_epoch_by_name = function(session, table_name, new_epoch) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_set_table_epoch_by_name_args();
  args.session = session;
  args.table_name = table_name;
  args.new_epoch = new_epoch;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_set_table_epoch_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_set_table_epoch_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.get_table_epoch = function(session, db_id, table_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_epoch(session, db_id, table_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_epoch(session, db_id, table_id);
  }
};

MapDClient.prototype.send_get_table_epoch = function(session, db_id, table_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_epoch', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_table_epoch_args();
  args.session = session;
  args.db_id = db_id;
  args.table_id = table_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_table_epoch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_table_epoch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_epoch failed: unknown result');
};
MapDClient.prototype.get_table_epoch_by_name = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_epoch_by_name(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_epoch_by_name(session, table_name);
  }
};

MapDClient.prototype.send_get_table_epoch_by_name = function(session, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_table_epoch_by_name_args();
  args.session = session;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_table_epoch_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_table_epoch_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_epoch_by_name failed: unknown result');
};
MapDClient.prototype.sql_execute = function(session, query, column_format, nonce, first_n, at_most_n, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n);
  }
};

MapDClient.prototype.send_sql_execute = function(session, query, column_format, nonce, first_n, at_most_n) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_sql_execute_args();
  args.session = session;
  args.query = query;
  args.column_format = column_format;
  args.nonce = nonce;
  args.first_n = first_n;
  args.at_most_n = at_most_n;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_sql_execute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_sql_execute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_execute failed: unknown result');
};
MapDClient.prototype.sql_execute_df = function(session, query, device_type, device_id, first_n, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_execute_df(session, query, device_type, device_id, first_n);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_execute_df(session, query, device_type, device_id, first_n);
  }
};

MapDClient.prototype.send_sql_execute_df = function(session, query, device_type, device_id, first_n) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_sql_execute_df_args();
  args.session = session;
  args.query = query;
  args.device_type = device_type;
  args.device_id = device_id;
  args.first_n = first_n;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_sql_execute_df = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_sql_execute_df_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_execute_df failed: unknown result');
};
MapDClient.prototype.sql_execute_gdf = function(session, query, device_id, first_n, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_execute_gdf(session, query, device_id, first_n);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_execute_gdf(session, query, device_id, first_n);
  }
};

MapDClient.prototype.send_sql_execute_gdf = function(session, query, device_id, first_n) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sql_execute_gdf', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_sql_execute_gdf_args();
  args.session = session;
  args.query = query;
  args.device_id = device_id;
  args.first_n = first_n;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_sql_execute_gdf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_sql_execute_gdf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_execute_gdf failed: unknown result');
};
MapDClient.prototype.deallocate_df = function(session, df, device_type, device_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deallocate_df(session, df, device_type, device_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deallocate_df(session, df, device_type, device_id);
  }
};

MapDClient.prototype.send_deallocate_df = function(session, df, device_type, device_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deallocate_df', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_deallocate_df_args();
  args.session = session;
  args.df = df;
  args.device_type = device_type;
  args.device_id = device_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_deallocate_df = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_deallocate_df_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.interrupt = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_interrupt(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_interrupt(session);
  }
};

MapDClient.prototype.send_interrupt = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_interrupt_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_interrupt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_interrupt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.sql_validate = function(session, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_validate(session, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_validate(session, query);
  }
};

MapDClient.prototype.send_sql_validate = function(session, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_sql_validate_args();
  args.session = session;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_sql_validate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_sql_validate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_validate failed: unknown result');
};
MapDClient.prototype.get_completion_hints = function(session, sql, cursor, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_completion_hints(session, sql, cursor);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_completion_hints(session, sql, cursor);
  }
};

MapDClient.prototype.send_get_completion_hints = function(session, sql, cursor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_completion_hints', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_completion_hints_args();
  args.session = session;
  args.sql = sql;
  args.cursor = cursor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_completion_hints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_completion_hints_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_completion_hints failed: unknown result');
};
MapDClient.prototype.set_execution_mode = function(session, mode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_execution_mode(session, mode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_execution_mode(session, mode);
  }
};

MapDClient.prototype.send_set_execution_mode = function(session, mode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_set_execution_mode_args();
  args.session = session;
  args.mode = mode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_set_execution_mode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_set_execution_mode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_render_vega(session, widget_id, vega_json, compression_level, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_render_vega(session, widget_id, vega_json, compression_level, nonce);
  }
};

MapDClient.prototype.send_render_vega = function(session, widget_id, vega_json, compression_level, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_render_vega_args();
  args.session = session;
  args.widget_id = widget_id;
  args.vega_json = vega_json;
  args.compression_level = compression_level;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_render_vega = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_render_vega_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('render_vega failed: unknown result');
};
MapDClient.prototype.get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
  }
};

MapDClient.prototype.send_get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_result_row_for_pixel_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixel = pixel;
  args.table_col_names = table_col_names;
  args.column_format = column_format;
  args.pixelRadius = pixelRadius;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_result_row_for_pixel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_result_row_for_pixel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_result_row_for_pixel failed: unknown result');
};
MapDClient.prototype.get_frontend_view = function(session, view_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_frontend_view(session, view_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_frontend_view(session, view_name);
  }
};

MapDClient.prototype.send_get_frontend_view = function(session, view_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_frontend_view', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_frontend_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_frontend_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_frontend_view failed: unknown result');
};
MapDClient.prototype.get_frontend_views = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_frontend_views(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_frontend_views(session);
  }
};

MapDClient.prototype.send_get_frontend_views = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_frontend_views', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_frontend_views_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_frontend_views = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_frontend_views_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_frontend_views failed: unknown result');
};
MapDClient.prototype.create_frontend_view = function(session, view_name, view_state, image_hash, view_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata);
  }
};

MapDClient.prototype.send_create_frontend_view = function(session, view_name, view_state, image_hash, view_metadata) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_frontend_view', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_create_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.view_state = view_state;
  args.image_hash = image_hash;
  args.view_metadata = view_metadata;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_create_frontend_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_create_frontend_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.delete_frontend_view = function(session, view_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_frontend_view(session, view_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_frontend_view(session, view_name);
  }
};

MapDClient.prototype.send_delete_frontend_view = function(session, view_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_frontend_view', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_delete_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_delete_frontend_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_delete_frontend_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.get_dashboard = function(session, dashboard_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_dashboard(session, dashboard_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_dashboard(session, dashboard_id);
  }
};

MapDClient.prototype.send_get_dashboard = function(session, dashboard_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_dashboard', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_dashboard failed: unknown result');
};
MapDClient.prototype.get_dashboards = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_dashboards(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_dashboards(session);
  }
};

MapDClient.prototype.send_get_dashboards = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_dashboards', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_dashboards_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_dashboards = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_dashboards_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_dashboards failed: unknown result');
};
MapDClient.prototype.create_dashboard = function(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
  }
};

MapDClient.prototype.send_create_dashboard = function(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_dashboard', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_create_dashboard_args();
  args.session = session;
  args.dashboard_name = dashboard_name;
  args.dashboard_state = dashboard_state;
  args.image_hash = image_hash;
  args.dashboard_metadata = dashboard_metadata;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_create_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_create_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_dashboard failed: unknown result');
};
MapDClient.prototype.replace_dashboard = function(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
  }
};

MapDClient.prototype.send_replace_dashboard = function(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('replace_dashboard', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_replace_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.dashboard_name = dashboard_name;
  args.dashboard_owner = dashboard_owner;
  args.dashboard_state = dashboard_state;
  args.image_hash = image_hash;
  args.dashboard_metadata = dashboard_metadata;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_replace_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_replace_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.delete_dashboard = function(session, dashboard_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_dashboard(session, dashboard_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_dashboard(session, dashboard_id);
  }
};

MapDClient.prototype.send_delete_dashboard = function(session, dashboard_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_dashboard', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_delete_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_delete_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_delete_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.share_dashboard = function(session, dashboard_id, groups, objects, permissions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_share_dashboard(session, dashboard_id, groups, objects, permissions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_share_dashboard(session, dashboard_id, groups, objects, permissions);
  }
};

MapDClient.prototype.send_share_dashboard = function(session, dashboard_id, groups, objects, permissions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('share_dashboard', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_share_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.groups = groups;
  args.objects = objects;
  args.permissions = permissions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_share_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_share_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.unshare_dashboard = function(session, dashboard_id, groups, objects, permissions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions);
  }
};

MapDClient.prototype.send_unshare_dashboard = function(session, dashboard_id, groups, objects, permissions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_unshare_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.groups = groups;
  args.objects = objects;
  args.permissions = permissions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_unshare_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_unshare_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.get_link_view = function(session, link, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_link_view(session, link);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_link_view(session, link);
  }
};

MapDClient.prototype.send_get_link_view = function(session, link) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_link_view_args();
  args.session = session;
  args.link = link;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_link_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_link_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_link_view failed: unknown result');
};
MapDClient.prototype.create_link = function(session, view_state, view_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_link(session, view_state, view_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_link(session, view_state, view_metadata);
  }
};

MapDClient.prototype.send_create_link = function(session, view_state, view_metadata) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_create_link_args();
  args.session = session;
  args.view_state = view_state;
  args.view_metadata = view_metadata;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_create_link = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_create_link_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_link failed: unknown result');
};
MapDClient.prototype.load_table_binary = function(session, table_name, rows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table_binary(session, table_name, rows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table_binary(session, table_name, rows);
  }
};

MapDClient.prototype.send_load_table_binary = function(session, table_name, rows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_binary_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_load_table_binary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_load_table_binary_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.load_table_binary_columnar = function(session, table_name, cols, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table_binary_columnar(session, table_name, cols);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table_binary_columnar(session, table_name, cols);
  }
};

MapDClient.prototype.send_load_table_binary_columnar = function(session, table_name, cols) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_binary_columnar_args();
  args.session = session;
  args.table_name = table_name;
  args.cols = cols;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_load_table_binary_columnar = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_load_table_binary_columnar_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.load_table_binary_arrow = function(session, table_name, arrow_stream, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table_binary_arrow(session, table_name, arrow_stream);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table_binary_arrow(session, table_name, arrow_stream);
  }
};

MapDClient.prototype.send_load_table_binary_arrow = function(session, table_name, arrow_stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_binary_arrow_args();
  args.session = session;
  args.table_name = table_name;
  args.arrow_stream = arrow_stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_load_table_binary_arrow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_load_table_binary_arrow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.load_table = function(session, table_name, rows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table(session, table_name, rows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table(session, table_name, rows);
  }
};

MapDClient.prototype.send_load_table = function(session, table_name, rows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_load_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_load_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.detect_column_types = function(session, file_name, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_detect_column_types(session, file_name, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_detect_column_types(session, file_name, copy_params);
  }
};

MapDClient.prototype.send_detect_column_types = function(session, file_name, copy_params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_detect_column_types_args();
  args.session = session;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_detect_column_types = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_detect_column_types_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('detect_column_types failed: unknown result');
};
MapDClient.prototype.create_table = function(session, table_name, row_desc, table_type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_table(session, table_name, row_desc, table_type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_table(session, table_name, row_desc, table_type);
  }
};

MapDClient.prototype.send_create_table = function(session, table_name, row_desc, table_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_create_table_args();
  args.session = session;
  args.table_name = table_name;
  args.row_desc = row_desc;
  args.table_type = table_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_create_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_create_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.import_table = function(session, table_name, file_name, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_table(session, table_name, file_name, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_table(session, table_name, file_name, copy_params);
  }
};

MapDClient.prototype.send_import_table = function(session, table_name, file_name, copy_params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_import_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_import_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_import_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.import_geo_table = function(session, table_name, file_name, copy_params, row_desc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc);
  }
};

MapDClient.prototype.send_import_geo_table = function(session, table_name, file_name, copy_params, row_desc) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_import_geo_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.row_desc = row_desc;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_import_geo_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_import_geo_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.import_table_status = function(session, import_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_table_status(session, import_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_table_status(session, import_id);
  }
};

MapDClient.prototype.send_import_table_status = function(session, import_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_import_table_status_args();
  args.session = session;
  args.import_id = import_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_import_table_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_import_table_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('import_table_status failed: unknown result');
};
MapDClient.prototype.start_query = function(session, query_ra, just_explain, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start_query(session, query_ra, just_explain);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_query(session, query_ra, just_explain);
  }
};

MapDClient.prototype.send_start_query = function(session, query_ra, just_explain) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_start_query_args();
  args.session = session;
  args.query_ra = query_ra;
  args.just_explain = just_explain;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_start_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_start_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start_query failed: unknown result');
};
MapDClient.prototype.execute_first_step = function(pending_query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_execute_first_step(pending_query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_execute_first_step(pending_query);
  }
};

MapDClient.prototype.send_execute_first_step = function(pending_query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('execute_first_step', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_execute_first_step_args();
  args.pending_query = pending_query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_execute_first_step = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_execute_first_step_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_first_step failed: unknown result');
};
MapDClient.prototype.broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id);
  }
};

MapDClient.prototype.send_broadcast_serialized_rows = function(serialized_rows, row_desc, query_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_broadcast_serialized_rows_args();
  args.serialized_rows = serialized_rows;
  args.row_desc = row_desc;
  args.query_id = query_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_broadcast_serialized_rows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_broadcast_serialized_rows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.start_render_query = function(session, widget_id, node_idx, vega_json, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start_render_query(session, widget_id, node_idx, vega_json);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_render_query(session, widget_id, node_idx, vega_json);
  }
};

MapDClient.prototype.send_start_render_query = function(session, widget_id, node_idx, vega_json) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start_render_query', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_start_render_query_args();
  args.session = session;
  args.widget_id = widget_id;
  args.node_idx = node_idx;
  args.vega_json = vega_json;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_start_render_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_start_render_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start_render_query failed: unknown result');
};
MapDClient.prototype.execute_next_render_step = function(pending_render, merged_data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_execute_next_render_step(pending_render, merged_data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_execute_next_render_step(pending_render, merged_data);
  }
};

MapDClient.prototype.send_execute_next_render_step = function(pending_render, merged_data) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('execute_next_render_step', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_execute_next_render_step_args();
  args.pending_render = pending_render;
  args.merged_data = merged_data;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_execute_next_render_step = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_execute_next_render_step_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_next_render_step failed: unknown result');
};
MapDClient.prototype.insert_data = function(session, insert_data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insert_data(session, insert_data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insert_data(session, insert_data);
  }
};

MapDClient.prototype.send_insert_data = function(session, insert_data) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_insert_data_args();
  args.session = session;
  args.insert_data = insert_data;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_insert_data = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_insert_data_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.checkpoint = function(session, db_id, table_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkpoint(session, db_id, table_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkpoint(session, db_id, table_id);
  }
};

MapDClient.prototype.send_checkpoint = function(session, db_id, table_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_checkpoint_args();
  args.session = session;
  args.db_id = db_id;
  args.table_id = table_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_checkpoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_checkpoint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.get_table_descriptor = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_descriptor(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_descriptor(session, table_name);
  }
};

MapDClient.prototype.send_get_table_descriptor = function(session, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_descriptor', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_table_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_table_descriptor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_table_descriptor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_descriptor failed: unknown result');
};
MapDClient.prototype.get_row_descriptor = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row_descriptor(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row_descriptor(session, table_name);
  }
};

MapDClient.prototype.send_get_row_descriptor = function(session, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_row_descriptor', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_row_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_row_descriptor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_row_descriptor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row_descriptor failed: unknown result');
};
MapDClient.prototype.get_roles = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_roles(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_roles(session);
  }
};

MapDClient.prototype.send_get_roles = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_roles', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_roles_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_roles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_roles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_roles failed: unknown result');
};
MapDClient.prototype.get_db_objects_for_grantee = function(session, roleName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_db_objects_for_grantee(session, roleName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_db_objects_for_grantee(session, roleName);
  }
};

MapDClient.prototype.send_get_db_objects_for_grantee = function(session, roleName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_db_objects_for_grantee', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_db_objects_for_grantee_args();
  args.session = session;
  args.roleName = roleName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_db_objects_for_grantee = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_db_objects_for_grantee_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_db_objects_for_grantee failed: unknown result');
};
MapDClient.prototype.get_db_object_privs = function(session, objectName, type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_db_object_privs(session, objectName, type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_db_object_privs(session, objectName, type);
  }
};

MapDClient.prototype.send_get_db_object_privs = function(session, objectName, type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_db_object_privs', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_db_object_privs_args();
  args.session = session;
  args.objectName = objectName;
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_db_object_privs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_db_object_privs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_db_object_privs failed: unknown result');
};
MapDClient.prototype.get_all_roles_for_user = function(session, userName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_roles_for_user(session, userName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_roles_for_user(session, userName);
  }
};

MapDClient.prototype.send_get_all_roles_for_user = function(session, userName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_roles_for_user', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_all_roles_for_user_args();
  args.session = session;
  args.userName = userName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_all_roles_for_user = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_all_roles_for_user_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_roles_for_user failed: unknown result');
};
MapDClient.prototype.set_license_key = function(session, key, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_license_key(session, key, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_license_key(session, key, nonce);
  }
};

MapDClient.prototype.send_set_license_key = function(session, key, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_license_key', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_set_license_key_args();
  args.session = session;
  args.key = key;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_set_license_key = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_set_license_key_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_license_key failed: unknown result');
};
MapDClient.prototype.get_license_claims = function(session, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_license_claims(session, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_license_claims(session, nonce);
  }
};

MapDClient.prototype.send_get_license_claims = function(session, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_license_claims', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_license_claims_args();
  args.session = session;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_license_claims = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_license_claims_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_license_claims failed: unknown result');
};
var MapDProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
MapDProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
MapDProcessor.prototype.process_connect = function(seqid, input, output) {
  var args = new MapD_connect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.connect.length === 3) {
    Q.fcall(this._handler.connect, args.user, args.passwd, args.dbname)
      .then(function(result) {
        var result_obj = new MapD_connect_result({success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_connect_result(err);
          output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.connect(args.user, args.passwd, args.dbname, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_connect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_disconnect = function(seqid, input, output) {
  var args = new MapD_disconnect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disconnect.length === 1) {
    Q.fcall(this._handler.disconnect, args.session)
      .then(function(result) {
        var result_obj = new MapD_disconnect_result({success: result});
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_disconnect_result(err);
          output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disconnect(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_disconnect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_server_status = function(seqid, input, output) {
  var args = new MapD_get_server_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_server_status.length === 1) {
    Q.fcall(this._handler.get_server_status, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_server_status_result({success: result});
        output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_server_status_result(err);
          output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_server_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_server_status(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_server_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_server_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_status = function(seqid, input, output) {
  var args = new MapD_get_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_status.length === 1) {
    Q.fcall(this._handler.get_status, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_status_result({success: result});
        output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_status_result(err);
          output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_status(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_hardware_info = function(seqid, input, output) {
  var args = new MapD_get_hardware_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_hardware_info.length === 1) {
    Q.fcall(this._handler.get_hardware_info, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_hardware_info_result({success: result});
        output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_hardware_info_result(err);
          output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_hardware_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_hardware_info(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_hardware_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_hardware_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new MapD_get_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables.length === 1) {
    Q.fcall(this._handler.get_tables, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_tables_result({success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_tables_result(err);
          output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_tables(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_physical_tables = function(seqid, input, output) {
  var args = new MapD_get_physical_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_physical_tables.length === 1) {
    Q.fcall(this._handler.get_physical_tables, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_physical_tables_result({success: result});
        output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_physical_tables_result(err);
          output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_physical_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_physical_tables(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_physical_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_physical_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_views = function(seqid, input, output) {
  var args = new MapD_get_views_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_views.length === 1) {
    Q.fcall(this._handler.get_views, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_views_result({success: result});
        output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_views_result(err);
          output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_views", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_views(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_views_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_views", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_tables_meta = function(seqid, input, output) {
  var args = new MapD_get_tables_meta_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables_meta.length === 1) {
    Q.fcall(this._handler.get_tables_meta, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_tables_meta_result({success: result});
        output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_tables_meta_result(err);
          output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables_meta", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_tables_meta(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_tables_meta_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables_meta", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_table_details = function(seqid, input, output) {
  var args = new MapD_get_table_details_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_details.length === 2) {
    Q.fcall(this._handler.get_table_details, args.session, args.table_name)
      .then(function(result) {
        var result_obj = new MapD_get_table_details_result({success: result});
        output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_table_details_result(err);
          output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_details(args.session, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_table_details_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_details", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_internal_table_details = function(seqid, input, output) {
  var args = new MapD_get_internal_table_details_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_internal_table_details.length === 2) {
    Q.fcall(this._handler.get_internal_table_details, args.session, args.table_name)
      .then(function(result) {
        var result_obj = new MapD_get_internal_table_details_result({success: result});
        output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_internal_table_details_result(err);
          output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_internal_table_details(args.session, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_internal_table_details_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_users = function(seqid, input, output) {
  var args = new MapD_get_users_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_users.length === 1) {
    Q.fcall(this._handler.get_users, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_users_result({success: result});
        output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_users_result(err);
          output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_users", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_users(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_users_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_users", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new MapD_get_databases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_databases.length === 1) {
    Q.fcall(this._handler.get_databases, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_databases_result({success: result});
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_databases_result(err);
          output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_databases(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_databases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_version = function(seqid, input, output) {
  var args = new MapD_get_version_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_version.length === 0) {
    Q.fcall(this._handler.get_version)
      .then(function(result) {
        var result_obj = new MapD_get_version_result({success: result});
        output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_version_result(err);
          output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_version", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_version(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_version_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_version", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_start_heap_profile = function(seqid, input, output) {
  var args = new MapD_start_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start_heap_profile.length === 1) {
    Q.fcall(this._handler.start_heap_profile, args.session)
      .then(function(result) {
        var result_obj = new MapD_start_heap_profile_result({success: result});
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_start_heap_profile_result(err);
          output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.start_heap_profile(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_start_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_stop_heap_profile = function(seqid, input, output) {
  var args = new MapD_stop_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stop_heap_profile.length === 1) {
    Q.fcall(this._handler.stop_heap_profile, args.session)
      .then(function(result) {
        var result_obj = new MapD_stop_heap_profile_result({success: result});
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_stop_heap_profile_result(err);
          output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.stop_heap_profile(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_stop_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_heap_profile = function(seqid, input, output) {
  var args = new MapD_get_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_heap_profile.length === 1) {
    Q.fcall(this._handler.get_heap_profile, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_heap_profile_result({success: result});
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_heap_profile_result(err);
          output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_heap_profile(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_memory = function(seqid, input, output) {
  var args = new MapD_get_memory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_memory.length === 2) {
    Q.fcall(this._handler.get_memory, args.session, args.memory_level)
      .then(function(result) {
        var result_obj = new MapD_get_memory_result({success: result});
        output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_memory_result(err);
          output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_memory(args.session, args.memory_level, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_clear_cpu_memory = function(seqid, input, output) {
  var args = new MapD_clear_cpu_memory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clear_cpu_memory.length === 1) {
    Q.fcall(this._handler.clear_cpu_memory, args.session)
      .then(function(result) {
        var result_obj = new MapD_clear_cpu_memory_result({success: result});
        output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_clear_cpu_memory_result(err);
          output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clear_cpu_memory(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_clear_cpu_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_clear_gpu_memory = function(seqid, input, output) {
  var args = new MapD_clear_gpu_memory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clear_gpu_memory.length === 1) {
    Q.fcall(this._handler.clear_gpu_memory, args.session)
      .then(function(result) {
        var result_obj = new MapD_clear_gpu_memory_result({success: result});
        output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_clear_gpu_memory_result(err);
          output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clear_gpu_memory(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_clear_gpu_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_set_table_epoch = function(seqid, input, output) {
  var args = new MapD_set_table_epoch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_table_epoch.length === 4) {
    Q.fcall(this._handler.set_table_epoch, args.session, args.db_id, args.table_id, args.new_epoch)
      .then(function(result) {
        var result_obj = new MapD_set_table_epoch_result({success: result});
        output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_set_table_epoch_result(err);
          output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_table_epoch(args.session, args.db_id, args.table_id, args.new_epoch, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_set_table_epoch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_set_table_epoch_by_name = function(seqid, input, output) {
  var args = new MapD_set_table_epoch_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_table_epoch_by_name.length === 3) {
    Q.fcall(this._handler.set_table_epoch_by_name, args.session, args.table_name, args.new_epoch)
      .then(function(result) {
        var result_obj = new MapD_set_table_epoch_by_name_result({success: result});
        output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_set_table_epoch_by_name_result(err);
          output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_table_epoch_by_name(args.session, args.table_name, args.new_epoch, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_set_table_epoch_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_table_epoch = function(seqid, input, output) {
  var args = new MapD_get_table_epoch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_epoch.length === 3) {
    Q.fcall(this._handler.get_table_epoch, args.session, args.db_id, args.table_id)
      .then(function(result) {
        var result_obj = new MapD_get_table_epoch_result({success: result});
        output.writeMessageBegin("get_table_epoch", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_epoch(args.session, args.db_id, args.table_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new MapD_get_table_epoch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_epoch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_table_epoch_by_name = function(seqid, input, output) {
  var args = new MapD_get_table_epoch_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_epoch_by_name.length === 2) {
    Q.fcall(this._handler.get_table_epoch_by_name, args.session, args.table_name)
      .then(function(result) {
        var result_obj = new MapD_get_table_epoch_by_name_result({success: result});
        output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_epoch_by_name(args.session, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new MapD_get_table_epoch_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_sql_execute = function(seqid, input, output) {
  var args = new MapD_sql_execute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_execute.length === 6) {
    Q.fcall(this._handler.sql_execute, args.session, args.query, args.column_format, args.nonce, args.first_n, args.at_most_n)
      .then(function(result) {
        var result_obj = new MapD_sql_execute_result({success: result});
        output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_sql_execute_result(err);
          output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sql_execute(args.session, args.query, args.column_format, args.nonce, args.first_n, args.at_most_n, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_sql_execute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_sql_execute_df = function(seqid, input, output) {
  var args = new MapD_sql_execute_df_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_execute_df.length === 5) {
    Q.fcall(this._handler.sql_execute_df, args.session, args.query, args.device_type, args.device_id, args.first_n)
      .then(function(result) {
        var result_obj = new MapD_sql_execute_df_result({success: result});
        output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_sql_execute_df_result(err);
          output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute_df", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sql_execute_df(args.session, args.query, args.device_type, args.device_id, args.first_n, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_sql_execute_df_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute_df", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_sql_execute_gdf = function(seqid, input, output) {
  var args = new MapD_sql_execute_gdf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_execute_gdf.length === 4) {
    Q.fcall(this._handler.sql_execute_gdf, args.session, args.query, args.device_id, args.first_n)
      .then(function(result) {
        var result_obj = new MapD_sql_execute_gdf_result({success: result});
        output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_sql_execute_gdf_result(err);
          output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sql_execute_gdf(args.session, args.query, args.device_id, args.first_n, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_sql_execute_gdf_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_deallocate_df = function(seqid, input, output) {
  var args = new MapD_deallocate_df_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deallocate_df.length === 4) {
    Q.fcall(this._handler.deallocate_df, args.session, args.df, args.device_type, args.device_id)
      .then(function(result) {
        var result_obj = new MapD_deallocate_df_result({success: result});
        output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_deallocate_df_result(err);
          output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deallocate_df", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deallocate_df(args.session, args.df, args.device_type, args.device_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_deallocate_df_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deallocate_df", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_interrupt = function(seqid, input, output) {
  var args = new MapD_interrupt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.interrupt.length === 1) {
    Q.fcall(this._handler.interrupt, args.session)
      .then(function(result) {
        var result_obj = new MapD_interrupt_result({success: result});
        output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_interrupt_result(err);
          output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("interrupt", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.interrupt(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_interrupt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("interrupt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_sql_validate = function(seqid, input, output) {
  var args = new MapD_sql_validate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_validate.length === 2) {
    Q.fcall(this._handler.sql_validate, args.session, args.query)
      .then(function(result) {
        var result_obj = new MapD_sql_validate_result({success: result});
        output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_sql_validate_result(err);
          output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_validate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sql_validate(args.session, args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_sql_validate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_validate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_completion_hints = function(seqid, input, output) {
  var args = new MapD_get_completion_hints_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_completion_hints.length === 3) {
    Q.fcall(this._handler.get_completion_hints, args.session, args.sql, args.cursor)
      .then(function(result) {
        var result_obj = new MapD_get_completion_hints_result({success: result});
        output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_completion_hints_result(err);
          output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_completion_hints", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_completion_hints(args.session, args.sql, args.cursor, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_completion_hints_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_completion_hints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_set_execution_mode = function(seqid, input, output) {
  var args = new MapD_set_execution_mode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_execution_mode.length === 2) {
    Q.fcall(this._handler.set_execution_mode, args.session, args.mode)
      .then(function(result) {
        var result_obj = new MapD_set_execution_mode_result({success: result});
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_set_execution_mode_result(err);
          output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_execution_mode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_execution_mode(args.session, args.mode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_set_execution_mode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_render_vega = function(seqid, input, output) {
  var args = new MapD_render_vega_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.render_vega.length === 5) {
    Q.fcall(this._handler.render_vega, args.session, args.widget_id, args.vega_json, args.compression_level, args.nonce)
      .then(function(result) {
        var result_obj = new MapD_render_vega_result({success: result});
        output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_render_vega_result(err);
          output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("render_vega", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.render_vega(args.session, args.widget_id, args.vega_json, args.compression_level, args.nonce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_render_vega_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("render_vega", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_result_row_for_pixel = function(seqid, input, output) {
  var args = new MapD_get_result_row_for_pixel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_result_row_for_pixel.length === 7) {
    Q.fcall(this._handler.get_result_row_for_pixel, args.session, args.widget_id, args.pixel, args.table_col_names, args.column_format, args.pixelRadius, args.nonce)
      .then(function(result) {
        var result_obj = new MapD_get_result_row_for_pixel_result({success: result});
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_result_row_for_pixel_result(err);
          output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_result_row_for_pixel(args.session, args.widget_id, args.pixel, args.table_col_names, args.column_format, args.pixelRadius, args.nonce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_result_row_for_pixel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_frontend_view = function(seqid, input, output) {
  var args = new MapD_get_frontend_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_frontend_view.length === 2) {
    Q.fcall(this._handler.get_frontend_view, args.session, args.view_name)
      .then(function(result) {
        var result_obj = new MapD_get_frontend_view_result({success: result});
        output.writeMessageBegin("get_frontend_view", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_frontend_view_result(err);
          output.writeMessageBegin("get_frontend_view", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_frontend_view(args.session, args.view_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_frontend_view_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_frontend_view", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_frontend_views = function(seqid, input, output) {
  var args = new MapD_get_frontend_views_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_frontend_views.length === 1) {
    Q.fcall(this._handler.get_frontend_views, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_frontend_views_result({success: result});
        output.writeMessageBegin("get_frontend_views", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_frontend_views_result(err);
          output.writeMessageBegin("get_frontend_views", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_frontend_views", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_frontend_views(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_frontend_views_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_frontend_views", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_frontend_views", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_create_frontend_view = function(seqid, input, output) {
  var args = new MapD_create_frontend_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_frontend_view.length === 5) {
    Q.fcall(this._handler.create_frontend_view, args.session, args.view_name, args.view_state, args.image_hash, args.view_metadata)
      .then(function(result) {
        var result_obj = new MapD_create_frontend_view_result({success: result});
        output.writeMessageBegin("create_frontend_view", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_create_frontend_view_result(err);
          output.writeMessageBegin("create_frontend_view", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_frontend_view(args.session, args.view_name, args.view_state, args.image_hash, args.view_metadata, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_create_frontend_view_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_frontend_view", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_delete_frontend_view = function(seqid, input, output) {
  var args = new MapD_delete_frontend_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_frontend_view.length === 2) {
    Q.fcall(this._handler.delete_frontend_view, args.session, args.view_name)
      .then(function(result) {
        var result_obj = new MapD_delete_frontend_view_result({success: result});
        output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_delete_frontend_view_result(err);
          output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_frontend_view(args.session, args.view_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_delete_frontend_view_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_dashboard = function(seqid, input, output) {
  var args = new MapD_get_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_dashboard.length === 2) {
    Q.fcall(this._handler.get_dashboard, args.session, args.dashboard_id)
      .then(function(result) {
        var result_obj = new MapD_get_dashboard_result({success: result});
        output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_dashboard_result(err);
          output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_dashboard(args.session, args.dashboard_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_dashboards = function(seqid, input, output) {
  var args = new MapD_get_dashboards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_dashboards.length === 1) {
    Q.fcall(this._handler.get_dashboards, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_dashboards_result({success: result});
        output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_dashboards_result(err);
          output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_dashboards(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_create_dashboard = function(seqid, input, output) {
  var args = new MapD_create_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_dashboard.length === 5) {
    Q.fcall(this._handler.create_dashboard, args.session, args.dashboard_name, args.dashboard_state, args.image_hash, args.dashboard_metadata)
      .then(function(result) {
        var result_obj = new MapD_create_dashboard_result({success: result});
        output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_create_dashboard_result(err);
          output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_dashboard(args.session, args.dashboard_name, args.dashboard_state, args.image_hash, args.dashboard_metadata, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_create_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_replace_dashboard = function(seqid, input, output) {
  var args = new MapD_replace_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.replace_dashboard.length === 7) {
    Q.fcall(this._handler.replace_dashboard, args.session, args.dashboard_id, args.dashboard_name, args.dashboard_owner, args.dashboard_state, args.image_hash, args.dashboard_metadata)
      .then(function(result) {
        var result_obj = new MapD_replace_dashboard_result({success: result});
        output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_replace_dashboard_result(err);
          output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("replace_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.replace_dashboard(args.session, args.dashboard_id, args.dashboard_name, args.dashboard_owner, args.dashboard_state, args.image_hash, args.dashboard_metadata, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_replace_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("replace_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_delete_dashboard = function(seqid, input, output) {
  var args = new MapD_delete_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_dashboard.length === 2) {
    Q.fcall(this._handler.delete_dashboard, args.session, args.dashboard_id)
      .then(function(result) {
        var result_obj = new MapD_delete_dashboard_result({success: result});
        output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_delete_dashboard_result(err);
          output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_dashboard(args.session, args.dashboard_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_delete_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_share_dashboard = function(seqid, input, output) {
  var args = new MapD_share_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.share_dashboard.length === 5) {
    Q.fcall(this._handler.share_dashboard, args.session, args.dashboard_id, args.groups, args.objects, args.permissions)
      .then(function(result) {
        var result_obj = new MapD_share_dashboard_result({success: result});
        output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_share_dashboard_result(err);
          output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("share_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.share_dashboard(args.session, args.dashboard_id, args.groups, args.objects, args.permissions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_share_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("share_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_unshare_dashboard = function(seqid, input, output) {
  var args = new MapD_unshare_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unshare_dashboard.length === 5) {
    Q.fcall(this._handler.unshare_dashboard, args.session, args.dashboard_id, args.groups, args.objects, args.permissions)
      .then(function(result) {
        var result_obj = new MapD_unshare_dashboard_result({success: result});
        output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_unshare_dashboard_result(err);
          output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unshare_dashboard(args.session, args.dashboard_id, args.groups, args.objects, args.permissions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_unshare_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_link_view = function(seqid, input, output) {
  var args = new MapD_get_link_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_link_view.length === 2) {
    Q.fcall(this._handler.get_link_view, args.session, args.link)
      .then(function(result) {
        var result_obj = new MapD_get_link_view_result({success: result});
        output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_link_view_result(err);
          output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_link_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_link_view(args.session, args.link, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_link_view_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_link_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_create_link = function(seqid, input, output) {
  var args = new MapD_create_link_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_link.length === 3) {
    Q.fcall(this._handler.create_link, args.session, args.view_state, args.view_metadata)
      .then(function(result) {
        var result_obj = new MapD_create_link_result({success: result});
        output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_create_link_result(err);
          output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_link", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_link(args.session, args.view_state, args.view_metadata, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_create_link_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_link", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_load_table_binary = function(seqid, input, output) {
  var args = new MapD_load_table_binary_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.load_table_binary.length === 3) {
    Q.fcall(this._handler.load_table_binary, args.session, args.table_name, args.rows)
      .then(function(result) {
        var result_obj = new MapD_load_table_binary_result({success: result});
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_load_table_binary_result(err);
          output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.load_table_binary(args.session, args.table_name, args.rows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_load_table_binary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_load_table_binary_columnar = function(seqid, input, output) {
  var args = new MapD_load_table_binary_columnar_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.load_table_binary_columnar.length === 3) {
    Q.fcall(this._handler.load_table_binary_columnar, args.session, args.table_name, args.cols)
      .then(function(result) {
        var result_obj = new MapD_load_table_binary_columnar_result({success: result});
        output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_load_table_binary_columnar_result(err);
          output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.load_table_binary_columnar(args.session, args.table_name, args.cols, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_load_table_binary_columnar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_load_table_binary_arrow = function(seqid, input, output) {
  var args = new MapD_load_table_binary_arrow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.load_table_binary_arrow.length === 3) {
    Q.fcall(this._handler.load_table_binary_arrow, args.session, args.table_name, args.arrow_stream)
      .then(function(result) {
        var result_obj = new MapD_load_table_binary_arrow_result({success: result});
        output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_load_table_binary_arrow_result(err);
          output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.load_table_binary_arrow(args.session, args.table_name, args.arrow_stream, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_load_table_binary_arrow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_load_table = function(seqid, input, output) {
  var args = new MapD_load_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.load_table.length === 3) {
    Q.fcall(this._handler.load_table, args.session, args.table_name, args.rows)
      .then(function(result) {
        var result_obj = new MapD_load_table_result({success: result});
        output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_load_table_result(err);
          output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.load_table(args.session, args.table_name, args.rows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_load_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_detect_column_types = function(seqid, input, output) {
  var args = new MapD_detect_column_types_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.detect_column_types.length === 3) {
    Q.fcall(this._handler.detect_column_types, args.session, args.file_name, args.copy_params)
      .then(function(result) {
        var result_obj = new MapD_detect_column_types_result({success: result});
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_detect_column_types_result(err);
          output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("detect_column_types", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.detect_column_types(args.session, args.file_name, args.copy_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_detect_column_types_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new MapD_create_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_table.length === 4) {
    Q.fcall(this._handler.create_table, args.session, args.table_name, args.row_desc, args.table_type)
      .then(function(result) {
        var result_obj = new MapD_create_table_result({success: result});
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_create_table_result(err);
          output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_table(args.session, args.table_name, args.row_desc, args.table_type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_create_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_import_table = function(seqid, input, output) {
  var args = new MapD_import_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_table.length === 4) {
    Q.fcall(this._handler.import_table, args.session, args.table_name, args.file_name, args.copy_params)
      .then(function(result) {
        var result_obj = new MapD_import_table_result({success: result});
        output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_import_table_result(err);
          output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.import_table(args.session, args.table_name, args.file_name, args.copy_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_import_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_import_geo_table = function(seqid, input, output) {
  var args = new MapD_import_geo_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_geo_table.length === 5) {
    Q.fcall(this._handler.import_geo_table, args.session, args.table_name, args.file_name, args.copy_params, args.row_desc)
      .then(function(result) {
        var result_obj = new MapD_import_geo_table_result({success: result});
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_import_geo_table_result(err);
          output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_geo_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.import_geo_table(args.session, args.table_name, args.file_name, args.copy_params, args.row_desc, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_import_geo_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_import_table_status = function(seqid, input, output) {
  var args = new MapD_import_table_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_table_status.length === 2) {
    Q.fcall(this._handler.import_table_status, args.session, args.import_id)
      .then(function(result) {
        var result_obj = new MapD_import_table_status_result({success: result});
        output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_import_table_status_result(err);
          output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_table_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.import_table_status(args.session, args.import_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_import_table_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_table_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_start_query = function(seqid, input, output) {
  var args = new MapD_start_query_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start_query.length === 3) {
    Q.fcall(this._handler.start_query, args.session, args.query_ra, args.just_explain)
      .then(function(result) {
        var result_obj = new MapD_start_query_result({success: result});
        output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_start_query_result(err);
          output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.start_query(args.session, args.query_ra, args.just_explain, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_start_query_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_execute_first_step = function(seqid, input, output) {
  var args = new MapD_execute_first_step_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.execute_first_step.length === 1) {
    Q.fcall(this._handler.execute_first_step, args.pending_query)
      .then(function(result) {
        var result_obj = new MapD_execute_first_step_result({success: result});
        output.writeMessageBegin("execute_first_step", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_execute_first_step_result(err);
          output.writeMessageBegin("execute_first_step", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("execute_first_step", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.execute_first_step(args.pending_query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_execute_first_step_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("execute_first_step", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute_first_step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_broadcast_serialized_rows = function(seqid, input, output) {
  var args = new MapD_broadcast_serialized_rows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.broadcast_serialized_rows.length === 3) {
    Q.fcall(this._handler.broadcast_serialized_rows, args.serialized_rows, args.row_desc, args.query_id)
      .then(function(result) {
        var result_obj = new MapD_broadcast_serialized_rows_result({success: result});
        output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_broadcast_serialized_rows_result(err);
          output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.broadcast_serialized_rows(args.serialized_rows, args.row_desc, args.query_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_broadcast_serialized_rows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_start_render_query = function(seqid, input, output) {
  var args = new MapD_start_render_query_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start_render_query.length === 4) {
    Q.fcall(this._handler.start_render_query, args.session, args.widget_id, args.node_idx, args.vega_json)
      .then(function(result) {
        var result_obj = new MapD_start_render_query_result({success: result});
        output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_start_render_query_result(err);
          output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_render_query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.start_render_query(args.session, args.widget_id, args.node_idx, args.vega_json, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_start_render_query_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_render_query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_execute_next_render_step = function(seqid, input, output) {
  var args = new MapD_execute_next_render_step_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.execute_next_render_step.length === 2) {
    Q.fcall(this._handler.execute_next_render_step, args.pending_render, args.merged_data)
      .then(function(result) {
        var result_obj = new MapD_execute_next_render_step_result({success: result});
        output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_execute_next_render_step_result(err);
          output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.execute_next_render_step(args.pending_render, args.merged_data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_execute_next_render_step_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_insert_data = function(seqid, input, output) {
  var args = new MapD_insert_data_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insert_data.length === 2) {
    Q.fcall(this._handler.insert_data, args.session, args.insert_data)
      .then(function(result) {
        var result_obj = new MapD_insert_data_result({success: result});
        output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_insert_data_result(err);
          output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insert_data", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.insert_data(args.session, args.insert_data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_insert_data_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insert_data", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_checkpoint = function(seqid, input, output) {
  var args = new MapD_checkpoint_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkpoint.length === 3) {
    Q.fcall(this._handler.checkpoint, args.session, args.db_id, args.table_id)
      .then(function(result) {
        var result_obj = new MapD_checkpoint_result({success: result});
        output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_checkpoint_result(err);
          output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkpoint", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkpoint(args.session, args.db_id, args.table_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_checkpoint_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_table_descriptor = function(seqid, input, output) {
  var args = new MapD_get_table_descriptor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_descriptor.length === 2) {
    Q.fcall(this._handler.get_table_descriptor, args.session, args.table_name)
      .then(function(result) {
        var result_obj = new MapD_get_table_descriptor_result({success: result});
        output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_table_descriptor_result(err);
          output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_descriptor(args.session, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_table_descriptor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_row_descriptor = function(seqid, input, output) {
  var args = new MapD_get_row_descriptor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row_descriptor.length === 2) {
    Q.fcall(this._handler.get_row_descriptor, args.session, args.table_name)
      .then(function(result) {
        var result_obj = new MapD_get_row_descriptor_result({success: result});
        output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_row_descriptor_result(err);
          output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_row_descriptor(args.session, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_row_descriptor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_roles = function(seqid, input, output) {
  var args = new MapD_get_roles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_roles.length === 1) {
    Q.fcall(this._handler.get_roles, args.session)
      .then(function(result) {
        var result_obj = new MapD_get_roles_result({success: result});
        output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_roles_result(err);
          output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_roles", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_roles(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_roles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_roles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_db_objects_for_grantee = function(seqid, input, output) {
  var args = new MapD_get_db_objects_for_grantee_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_db_objects_for_grantee.length === 2) {
    Q.fcall(this._handler.get_db_objects_for_grantee, args.session, args.roleName)
      .then(function(result) {
        var result_obj = new MapD_get_db_objects_for_grantee_result({success: result});
        output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_db_objects_for_grantee_result(err);
          output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_db_objects_for_grantee(args.session, args.roleName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_db_objects_for_grantee_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_db_object_privs = function(seqid, input, output) {
  var args = new MapD_get_db_object_privs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_db_object_privs.length === 3) {
    Q.fcall(this._handler.get_db_object_privs, args.session, args.objectName, args.type)
      .then(function(result) {
        var result_obj = new MapD_get_db_object_privs_result({success: result});
        output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_db_object_privs_result(err);
          output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_db_object_privs(args.session, args.objectName, args.type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_db_object_privs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_all_roles_for_user = function(seqid, input, output) {
  var args = new MapD_get_all_roles_for_user_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_roles_for_user.length === 2) {
    Q.fcall(this._handler.get_all_roles_for_user, args.session, args.userName)
      .then(function(result) {
        var result_obj = new MapD_get_all_roles_for_user_result({success: result});
        output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_all_roles_for_user_result(err);
          output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_all_roles_for_user(args.session, args.userName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_all_roles_for_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_set_license_key = function(seqid, input, output) {
  var args = new MapD_set_license_key_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_license_key.length === 3) {
    Q.fcall(this._handler.set_license_key, args.session, args.key, args.nonce)
      .then(function(result) {
        var result_obj = new MapD_set_license_key_result({success: result});
        output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_set_license_key_result(err);
          output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_license_key", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_license_key(args.session, args.key, args.nonce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_set_license_key_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_license_key", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MapDProcessor.prototype.process_get_license_claims = function(seqid, input, output) {
  var args = new MapD_get_license_claims_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_license_claims.length === 2) {
    Q.fcall(this._handler.get_license_claims, args.session, args.nonce)
      .then(function(result) {
        var result_obj = new MapD_get_license_claims_result({success: result});
        output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TMapDException) {
          result = new MapD_get_license_claims_result(err);
          output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_license_claims", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_license_claims(args.session, args.nonce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TMapDException) {
        result_obj = new MapD_get_license_claims_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_license_claims", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
