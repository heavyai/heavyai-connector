//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import common_ttypes = require('./common_types');
import completion_hints_ttypes = require('./completion_hints_types');
import serialized_result_set_ttypes = require('./serialized_result_set_types');
import extension_functions_ttypes = require('./extension_functions_types');


import ttypes = require('./omnisci_types');
import TExecuteMode = ttypes.TExecuteMode
import TFileType = ttypes.TFileType
import TPartitionDetail = ttypes.TPartitionDetail
import TGeoFileLayerContents = ttypes.TGeoFileLayerContents
import TImportHeaderRow = ttypes.TImportHeaderRow
import TRole = ttypes.TRole
import TMergeType = ttypes.TMergeType
import TQueryType = ttypes.TQueryType
import TArrowTransport = ttypes.TArrowTransport
import TExpressionRangeType = ttypes.TExpressionRangeType
import TDBObjectType = ttypes.TDBObjectType
import TOmniSciException = ttypes.TOmniSciException
import TDatumVal = ttypes.TDatumVal
import TDatum = ttypes.TDatum
import TStringValue = ttypes.TStringValue
import TColumnType = ttypes.TColumnType
import TRow = ttypes.TRow
import TColumnData = ttypes.TColumnData
import TColumn = ttypes.TColumn
import TStringRow = ttypes.TStringRow
import TKrb5Session = ttypes.TKrb5Session
import TStepResult = ttypes.TStepResult
import TRowSet = ttypes.TRowSet
import TQueryResult = ttypes.TQueryResult
import TDataFrame = ttypes.TDataFrame
import TDBInfo = ttypes.TDBInfo
import TCopyParams = ttypes.TCopyParams
import TCreateParams = ttypes.TCreateParams
import TDetectResult = ttypes.TDetectResult
import TImportStatus = ttypes.TImportStatus
import TFrontendView = ttypes.TFrontendView
import TDashboard = ttypes.TDashboard
import TServerStatus = ttypes.TServerStatus
import TPixel = ttypes.TPixel
import TPixelTableRowResult = ttypes.TPixelTableRowResult
import TRenderResult = ttypes.TRenderResult
import TGpuSpecification = ttypes.TGpuSpecification
import THardwareInfo = ttypes.THardwareInfo
import TClusterHardwareInfo = ttypes.TClusterHardwareInfo
import TMemoryData = ttypes.TMemoryData
import TNodeMemoryInfo = ttypes.TNodeMemoryInfo
import TTableMeta = ttypes.TTableMeta
import TTableDetails = ttypes.TTableDetails
import TColumnRange = ttypes.TColumnRange
import TDictionaryGeneration = ttypes.TDictionaryGeneration
import TTableGeneration = ttypes.TTableGeneration
import TPendingQuery = ttypes.TPendingQuery
import TVarLen = ttypes.TVarLen
import TDataBlockPtr = ttypes.TDataBlockPtr
import TInsertData = ttypes.TInsertData
import TPendingRenderQuery = ttypes.TPendingRenderQuery
import TRenderParseResult = ttypes.TRenderParseResult
import TRawRenderPassDataResult = ttypes.TRawRenderPassDataResult
import TRawPixelData = ttypes.TRawPixelData
import TRenderDatum = ttypes.TRenderDatum
import TRenderStepResult = ttypes.TRenderStepResult
import TDatabasePermissions = ttypes.TDatabasePermissions
import TTablePermissions = ttypes.TTablePermissions
import TDashboardPermissions = ttypes.TDashboardPermissions
import TViewPermissions = ttypes.TViewPermissions
import TDBObjectPermissions = ttypes.TDBObjectPermissions
import TDBObject = ttypes.TDBObject
import TDashboardGrantees = ttypes.TDashboardGrantees
import TLicenseInfo = ttypes.TLicenseInfo
import TSessionInfo = ttypes.TSessionInfo
import TGeoFileLayerInfo = ttypes.TGeoFileLayerInfo
import TTableEpochInfo = ttypes.TTableEpochInfo

declare class Client {
    private output: thrift.TTransport;
    private pClass: thrift.TProtocol;
    private _seqid: number;

    constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

    connect(user: string, passwd: string, dbname: string): Promise<string>;

    connect(user: string, passwd: string, dbname: string, callback?: (error: ttypes.TOmniSciException, response: string)=>void): void;

    krb5_connect(inputToken: string, dbname: string): Promise<TKrb5Session>;

    krb5_connect(inputToken: string, dbname: string, callback?: (error: ttypes.TOmniSciException, response: TKrb5Session)=>void): void;

    disconnect(session: string): Promise<void>;

    disconnect(session: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    switch_database(session: string, dbname: string): Promise<void>;

    switch_database(session: string, dbname: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    clone_session(session: string): Promise<string>;

    clone_session(session: string, callback?: (error: ttypes.TOmniSciException, response: string)=>void): void;

    get_server_status(session: string): Promise<TServerStatus>;

    get_server_status(session: string, callback?: (error: ttypes.TOmniSciException, response: TServerStatus)=>void): void;

    get_status(session: string): Promise<TServerStatus[]>;

    get_status(session: string, callback?: (error: ttypes.TOmniSciException, response: TServerStatus[])=>void): void;

    get_hardware_info(session: string): Promise<TClusterHardwareInfo>;

    get_hardware_info(session: string, callback?: (error: ttypes.TOmniSciException, response: TClusterHardwareInfo)=>void): void;

    get_tables(session: string): Promise<string[]>;

    get_tables(session: string, callback?: (error: ttypes.TOmniSciException, response: string[])=>void): void;

    get_physical_tables(session: string): Promise<string[]>;

    get_physical_tables(session: string, callback?: (error: ttypes.TOmniSciException, response: string[])=>void): void;

    get_views(session: string): Promise<string[]>;

    get_views(session: string, callback?: (error: ttypes.TOmniSciException, response: string[])=>void): void;

    get_tables_meta(session: string): Promise<TTableMeta[]>;

    get_tables_meta(session: string, callback?: (error: ttypes.TOmniSciException, response: TTableMeta[])=>void): void;

    get_table_details(session: string, table_name: string): Promise<TTableDetails>;

    get_table_details(session: string, table_name: string, callback?: (error: ttypes.TOmniSciException, response: TTableDetails)=>void): void;

    get_internal_table_details(session: string, table_name: string): Promise<TTableDetails>;

    get_internal_table_details(session: string, table_name: string, callback?: (error: ttypes.TOmniSciException, response: TTableDetails)=>void): void;

    get_users(session: string): Promise<string[]>;

    get_users(session: string, callback?: (error: ttypes.TOmniSciException, response: string[])=>void): void;

    get_databases(session: string): Promise<TDBInfo[]>;

    get_databases(session: string, callback?: (error: ttypes.TOmniSciException, response: TDBInfo[])=>void): void;

    get_version(): Promise<string>;

    get_version(callback?: (error: ttypes.TOmniSciException, response: string)=>void): void;

    start_heap_profile(session: string): Promise<void>;

    start_heap_profile(session: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    stop_heap_profile(session: string): Promise<void>;

    stop_heap_profile(session: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    get_heap_profile(session: string): Promise<string>;

    get_heap_profile(session: string, callback?: (error: ttypes.TOmniSciException, response: string)=>void): void;

    get_memory(session: string, memory_level: string): Promise<TNodeMemoryInfo[]>;

    get_memory(session: string, memory_level: string, callback?: (error: ttypes.TOmniSciException, response: TNodeMemoryInfo[])=>void): void;

    clear_cpu_memory(session: string): Promise<void>;

    clear_cpu_memory(session: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    clear_gpu_memory(session: string): Promise<void>;

    clear_gpu_memory(session: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    set_table_epoch(session: string, db_id: number, table_id: number, new_epoch: number): Promise<void>;

    set_table_epoch(session: string, db_id: number, table_id: number, new_epoch: number, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    set_table_epoch_by_name(session: string, table_name: string, new_epoch: number): Promise<void>;

    set_table_epoch_by_name(session: string, table_name: string, new_epoch: number, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    get_table_epoch(session: string, db_id: number, table_id: number): Promise<number>;

    get_table_epoch(session: string, db_id: number, table_id: number, callback?: (error: void, response: number)=>void): void;

    get_table_epoch_by_name(session: string, table_name: string): Promise<number>;

    get_table_epoch_by_name(session: string, table_name: string, callback?: (error: void, response: number)=>void): void;

    get_table_epochs(session: string, db_id: number, table_id: number): Promise<TTableEpochInfo[]>;

    get_table_epochs(session: string, db_id: number, table_id: number, callback?: (error: void, response: TTableEpochInfo[])=>void): void;

    set_table_epochs(session: string, db_id: number, table_epochs: TTableEpochInfo[]): Promise<void>;

    set_table_epochs(session: string, db_id: number, table_epochs: TTableEpochInfo[], callback?: (error: void, response: void)=>void): void;

    get_session_info(session: string): Promise<TSessionInfo>;

    get_session_info(session: string, callback?: (error: ttypes.TOmniSciException, response: TSessionInfo)=>void): void;

    sql_execute(session: string, query: string, column_format: boolean, nonce: string, first_n?: number, at_most_n?: number): Promise<TQueryResult>;

    sql_execute(session: string, query: string, column_format: boolean, nonce: string, first_n?: number, at_most_n?: number, callback?: (error: ttypes.TOmniSciException, response: TQueryResult)=>void): void;

    sql_execute_df(session: string, query: string, device_type: common_ttypes.TDeviceType, device_id?: number, first_n?: number, transport_method: TArrowTransport): Promise<TDataFrame>;

    sql_execute_df(session: string, query: string, device_type: common_ttypes.TDeviceType, device_id?: number, first_n?: number, transport_method: TArrowTransport, callback?: (error: ttypes.TOmniSciException, response: TDataFrame)=>void): void;

    sql_execute_gdf(session: string, query: string, device_id?: number, first_n?: number): Promise<TDataFrame>;

    sql_execute_gdf(session: string, query: string, device_id?: number, first_n?: number, callback?: (error: ttypes.TOmniSciException, response: TDataFrame)=>void): void;

    deallocate_df(session: string, df: TDataFrame, device_type: common_ttypes.TDeviceType, device_id?: number): Promise<void>;

    deallocate_df(session: string, df: TDataFrame, device_type: common_ttypes.TDeviceType, device_id?: number, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    interrupt(query_session: string, interrupt_session: string): Promise<void>;

    interrupt(query_session: string, interrupt_session: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    sql_validate(session: string, query: string): Promise<TColumnType[]>;

    sql_validate(session: string, query: string, callback?: (error: ttypes.TOmniSciException, response: TColumnType[])=>void): void;

    get_completion_hints(session: string, sql: string, cursor: number): Promise<completion_hints_ttypes.TCompletionHint[]>;

    get_completion_hints(session: string, sql: string, cursor: number, callback?: (error: ttypes.TOmniSciException, response: completion_hints_ttypes.TCompletionHint[])=>void): void;

    set_execution_mode(session: string, mode: TExecuteMode): Promise<void>;

    set_execution_mode(session: string, mode: TExecuteMode, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    render_vega(session: string, widget_id: Int64, vega_json: string, compression_level: number, nonce: string): Promise<TRenderResult>;

    render_vega(session: string, widget_id: Int64, vega_json: string, compression_level: number, nonce: string, callback?: (error: ttypes.TOmniSciException, response: TRenderResult)=>void): void;

    get_result_row_for_pixel(session: string, widget_id: Int64, pixel: TPixel, table_col_names: { [k: string]: string[]; }, column_format: boolean, pixelRadius: number, nonce: string): Promise<TPixelTableRowResult>;

    get_result_row_for_pixel(session: string, widget_id: Int64, pixel: TPixel, table_col_names: { [k: string]: string[]; }, column_format: boolean, pixelRadius: number, nonce: string, callback?: (error: ttypes.TOmniSciException, response: TPixelTableRowResult)=>void): void;

    get_dashboard(session: string, dashboard_id: number): Promise<TDashboard>;

    get_dashboard(session: string, dashboard_id: number, callback?: (error: ttypes.TOmniSciException, response: TDashboard)=>void): void;

    get_dashboards(session: string): Promise<TDashboard[]>;

    get_dashboards(session: string, callback?: (error: ttypes.TOmniSciException, response: TDashboard[])=>void): void;

    create_dashboard(session: string, dashboard_name: string, dashboard_state: string, image_hash: string, dashboard_metadata: string): Promise<number>;

    create_dashboard(session: string, dashboard_name: string, dashboard_state: string, image_hash: string, dashboard_metadata: string, callback?: (error: ttypes.TOmniSciException, response: number)=>void): void;

    replace_dashboard(session: string, dashboard_id: number, dashboard_name: string, dashboard_owner: string, dashboard_state: string, image_hash: string, dashboard_metadata: string): Promise<void>;

    replace_dashboard(session: string, dashboard_id: number, dashboard_name: string, dashboard_owner: string, dashboard_state: string, image_hash: string, dashboard_metadata: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    delete_dashboard(session: string, dashboard_id: number): Promise<void>;

    delete_dashboard(session: string, dashboard_id: number, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    share_dashboards(session: string, dashboard_ids: number[], groups: string[], permissions: TDashboardPermissions): Promise<void>;

    share_dashboards(session: string, dashboard_ids: number[], groups: string[], permissions: TDashboardPermissions, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    delete_dashboards(session: string, dashboard_ids: number[]): Promise<void>;

    delete_dashboards(session: string, dashboard_ids: number[], callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    share_dashboard(session: string, dashboard_id: number, groups: string[], objects: string[], permissions: TDashboardPermissions, grant_role?: boolean): Promise<void>;

    share_dashboard(session: string, dashboard_id: number, groups: string[], objects: string[], permissions: TDashboardPermissions, grant_role?: boolean, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    unshare_dashboard(session: string, dashboard_id: number, groups: string[], objects: string[], permissions: TDashboardPermissions): Promise<void>;

    unshare_dashboard(session: string, dashboard_id: number, groups: string[], objects: string[], permissions: TDashboardPermissions, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    unshare_dashboards(session: string, dashboard_ids: number[], groups: string[], permissions: TDashboardPermissions): Promise<void>;

    unshare_dashboards(session: string, dashboard_ids: number[], groups: string[], permissions: TDashboardPermissions, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    get_dashboard_grantees(session: string, dashboard_id: number): Promise<TDashboardGrantees[]>;

    get_dashboard_grantees(session: string, dashboard_id: number, callback?: (error: ttypes.TOmniSciException, response: TDashboardGrantees[])=>void): void;

    get_link_view(session: string, link: string): Promise<TFrontendView>;

    get_link_view(session: string, link: string, callback?: (error: ttypes.TOmniSciException, response: TFrontendView)=>void): void;

    create_link(session: string, view_state: string, view_metadata: string): Promise<string>;

    create_link(session: string, view_state: string, view_metadata: string, callback?: (error: ttypes.TOmniSciException, response: string)=>void): void;

    load_table_binary(session: string, table_name: string, rows: TRow[]): Promise<void>;

    load_table_binary(session: string, table_name: string, rows: TRow[], callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    load_table_binary_columnar(session: string, table_name: string, cols: TColumn[]): Promise<void>;

    load_table_binary_columnar(session: string, table_name: string, cols: TColumn[], callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    load_table_binary_arrow(session: string, table_name: string, arrow_stream: string): Promise<void>;

    load_table_binary_arrow(session: string, table_name: string, arrow_stream: string, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    load_table(session: string, table_name: string, rows: TStringRow[]): Promise<void>;

    load_table(session: string, table_name: string, rows: TStringRow[], callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    detect_column_types(session: string, file_name: string, copy_params: TCopyParams): Promise<TDetectResult>;

    detect_column_types(session: string, file_name: string, copy_params: TCopyParams, callback?: (error: ttypes.TOmniSciException, response: TDetectResult)=>void): void;

    create_table(session: string, table_name: string, row_desc: TColumnType[], file_type?: TFileType, create_params: TCreateParams): Promise<void>;

    create_table(session: string, table_name: string, row_desc: TColumnType[], file_type?: TFileType, create_params: TCreateParams, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    import_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams): Promise<void>;

    import_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    import_geo_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams, row_desc: TColumnType[], create_params: TCreateParams): Promise<void>;

    import_geo_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams, row_desc: TColumnType[], create_params: TCreateParams, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    import_table_status(session: string, import_id: string): Promise<TImportStatus>;

    import_table_status(session: string, import_id: string, callback?: (error: ttypes.TOmniSciException, response: TImportStatus)=>void): void;

    get_first_geo_file_in_archive(session: string, archive_path: string, copy_params: TCopyParams): Promise<string>;

    get_first_geo_file_in_archive(session: string, archive_path: string, copy_params: TCopyParams, callback?: (error: ttypes.TOmniSciException, response: string)=>void): void;

    get_all_files_in_archive(session: string, archive_path: string, copy_params: TCopyParams): Promise<string[]>;

    get_all_files_in_archive(session: string, archive_path: string, copy_params: TCopyParams, callback?: (error: ttypes.TOmniSciException, response: string[])=>void): void;

    get_layers_in_geo_file(session: string, file_name: string, copy_params: TCopyParams): Promise<TGeoFileLayerInfo[]>;

    get_layers_in_geo_file(session: string, file_name: string, copy_params: TCopyParams, callback?: (error: ttypes.TOmniSciException, response: TGeoFileLayerInfo[])=>void): void;

    query_get_outer_fragment_count(session: string, query: string): Promise<Int64>;

    query_get_outer_fragment_count(session: string, query: string, callback?: (error: ttypes.TOmniSciException, response: Int64)=>void): void;

    check_table_consistency(session: string, table_id: number): Promise<TTableMeta>;

    check_table_consistency(session: string, table_id: number, callback?: (error: ttypes.TOmniSciException, response: TTableMeta)=>void): void;

    start_query(leaf_session: string, parent_session: string, query_ra: string, just_explain: boolean, outer_fragment_indices: Int64[]): Promise<TPendingQuery>;

    start_query(leaf_session: string, parent_session: string, query_ra: string, just_explain: boolean, outer_fragment_indices: Int64[], callback?: (error: ttypes.TOmniSciException, response: TPendingQuery)=>void): void;

    execute_query_step(pending_query: TPendingQuery, subquery_id: Int64): Promise<TStepResult>;

    execute_query_step(pending_query: TPendingQuery, subquery_id: Int64, callback?: (error: ttypes.TOmniSciException, response: TStepResult)=>void): void;

    broadcast_serialized_rows(serialized_rows: serialized_result_set_ttypes.TSerializedRows, row_desc: TColumnType[], query_id: Int64, subquery_id: Int64, is_final_subquery_result: boolean): Promise<void>;

    broadcast_serialized_rows(serialized_rows: serialized_result_set_ttypes.TSerializedRows, row_desc: TColumnType[], query_id: Int64, subquery_id: Int64, is_final_subquery_result: boolean, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    start_render_query(session: string, widget_id: Int64, node_idx: number, vega_json: string): Promise<TPendingRenderQuery>;

    start_render_query(session: string, widget_id: Int64, node_idx: number, vega_json: string, callback?: (error: ttypes.TOmniSciException, response: TPendingRenderQuery)=>void): void;

    execute_next_render_step(pending_render: TPendingRenderQuery, merged_data: { [k: string]: { [k: string]: { [k: string]: { [k: string]: TRenderDatum[]; }; }; }; }): Promise<TRenderStepResult>;

    execute_next_render_step(pending_render: TPendingRenderQuery, merged_data: { [k: string]: { [k: string]: { [k: string]: { [k: string]: TRenderDatum[]; }; }; }; }, callback?: (error: ttypes.TOmniSciException, response: TRenderStepResult)=>void): void;

    insert_data(session: string, insert_data: TInsertData): Promise<void>;

    insert_data(session: string, insert_data: TInsertData, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    checkpoint(session: string, db_id: number, table_id: number): Promise<void>;

    checkpoint(session: string, db_id: number, table_id: number, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;

    get_roles(session: string): Promise<string[]>;

    get_roles(session: string, callback?: (error: ttypes.TOmniSciException, response: string[])=>void): void;

    get_db_objects_for_grantee(session: string, roleName: string): Promise<TDBObject[]>;

    get_db_objects_for_grantee(session: string, roleName: string, callback?: (error: ttypes.TOmniSciException, response: TDBObject[])=>void): void;

    get_db_object_privs(session: string, objectName: string, type: TDBObjectType): Promise<TDBObject[]>;

    get_db_object_privs(session: string, objectName: string, type: TDBObjectType, callback?: (error: ttypes.TOmniSciException, response: TDBObject[])=>void): void;

    get_all_roles_for_user(session: string, userName: string): Promise<string[]>;

    get_all_roles_for_user(session: string, userName: string, callback?: (error: ttypes.TOmniSciException, response: string[])=>void): void;

    has_role(session: string, granteeName: string, roleName: string): Promise<boolean>;

    has_role(session: string, granteeName: string, roleName: string, callback?: (error: ttypes.TOmniSciException, response: boolean)=>void): void;

    has_object_privilege(session: string, granteeName: string, ObjectName: string, objectType: TDBObjectType, permissions: TDBObjectPermissions): Promise<boolean>;

    has_object_privilege(session: string, granteeName: string, ObjectName: string, objectType: TDBObjectType, permissions: TDBObjectPermissions, callback?: (error: ttypes.TOmniSciException, response: boolean)=>void): void;

    set_license_key(session: string, key: string, nonce?: string): Promise<TLicenseInfo>;

    set_license_key(session: string, key: string, nonce?: string, callback?: (error: ttypes.TOmniSciException, response: TLicenseInfo)=>void): void;

    get_license_claims(session: string, nonce?: string): Promise<TLicenseInfo>;

    get_license_claims(session: string, nonce?: string, callback?: (error: ttypes.TOmniSciException, response: TLicenseInfo)=>void): void;

    get_device_parameters(session: string): Promise<{ [k: string]: string; }>;

    get_device_parameters(session: string, callback?: (error: ttypes.TOmniSciException, response: { [k: string]: string; })=>void): void;

    register_runtime_extension_functions(session: string, udfs: extension_functions_ttypes.TUserDefinedFunction[], udtfs: extension_functions_ttypes.TUserDefinedTableFunction[], device_ir_map: { [k: string]: string; }): Promise<void>;

    register_runtime_extension_functions(session: string, udfs: extension_functions_ttypes.TUserDefinedFunction[], udtfs: extension_functions_ttypes.TUserDefinedTableFunction[], device_ir_map: { [k: string]: string; }, callback?: (error: ttypes.TOmniSciException, response: void)=>void): void;
  }

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_connect(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_krb5_connect(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_disconnect(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_switch_database(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_clone_session(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_server_status(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_status(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_hardware_info(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_tables(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_physical_tables(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_views(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_tables_meta(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_table_details(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_internal_table_details(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_users(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_databases(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_version(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_start_heap_profile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_stop_heap_profile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_heap_profile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_memory(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_clear_cpu_memory(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_clear_gpu_memory(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_set_table_epoch(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_set_table_epoch_by_name(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_table_epoch(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_table_epoch_by_name(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_table_epochs(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_set_table_epochs(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_session_info(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sql_execute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sql_execute_df(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sql_execute_gdf(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_deallocate_df(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_interrupt(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sql_validate(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_completion_hints(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_set_execution_mode(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_render_vega(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_result_row_for_pixel(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_dashboard(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_dashboards(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_create_dashboard(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_replace_dashboard(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_delete_dashboard(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_share_dashboards(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_delete_dashboards(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_share_dashboard(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unshare_dashboard(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unshare_dashboards(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_dashboard_grantees(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_link_view(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_create_link(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_load_table_binary(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_load_table_binary_columnar(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_load_table_binary_arrow(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_load_table(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_detect_column_types(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_create_table(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_import_table(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_import_geo_table(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_import_table_status(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_first_geo_file_in_archive(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_all_files_in_archive(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_layers_in_geo_file(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_query_get_outer_fragment_count(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_check_table_consistency(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_start_query(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_execute_query_step(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_broadcast_serialized_rows(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_start_render_query(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_execute_next_render_step(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_insert_data(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_checkpoint(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_roles(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_db_objects_for_grantee(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_db_object_privs(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_all_roles_for_user(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_has_role(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_has_object_privilege(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_set_license_key(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_license_claims(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_get_device_parameters(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_register_runtime_extension_functions(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
