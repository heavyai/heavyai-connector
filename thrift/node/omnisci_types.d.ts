//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import common_ttypes = require('./common_types');
import completion_hints_ttypes = require('./completion_hints_types');
import serialized_result_set_ttypes = require('./serialized_result_set_types');
import extension_functions_ttypes = require('./extension_functions_types');



declare enum TExecuteMode {
  GPU = 1,
  CPU = 2,
}

declare enum TFileType {
  DELIMITED = 0,
  POLYGON = 1,
  PARQUET = 2,
}

declare enum TPartitionDetail {
  DEFAULT = 0,
  REPLICATED = 1,
  SHARDED = 2,
  OTHER = 3,
}

declare enum TGeoFileLayerContents {
  EMPTY = 0,
  GEO = 1,
  NON_GEO = 2,
  UNSUPPORTED_GEO = 3,
}

declare enum TImportHeaderRow {
  AUTODETECT = 0,
  NO_HEADER = 1,
  HAS_HEADER = 2,
}

declare enum TRole {
  SERVER = 0,
  AGGREGATOR = 1,
  LEAF = 2,
  STRING_DICTIONARY = 3,
}

declare enum TMergeType {
  UNION = 0,
  REDUCE = 1,
}

declare enum TQueryType {
  UNKNOWN = 0,
  READ = 1,
  WRITE = 2,
  SCHEMA_READ = 3,
  SCHEMA_WRITE = 4,
}

declare enum TArrowTransport {
  SHARED_MEMORY = 0,
  WIRE = 1,
}

declare enum TExpressionRangeType {
  INVALID = 0,
  INTEGER = 1,
  FLOAT = 2,
  DOUBLE = 3,
}

declare enum TDBObjectType {
  AbstractDBObjectType = 0,
  DatabaseDBObjectType = 1,
  TableDBObjectType = 2,
  DashboardDBObjectType = 3,
  ViewDBObjectType = 4,
}

declare class TDatumVal {
    public int_val: Int64;
    public real_val: number;
    public str_val: string;
    public arr_val: TDatum[];

      constructor(args?: { int_val: Int64; real_val: number; str_val: string; arr_val: TDatum[]; });
  }

declare class TDatum {
    public val: TDatumVal;
    public is_null: boolean;

      constructor(args?: { val: TDatumVal; is_null: boolean; });
  }

declare class TStringValue {
    public str_val: string;
    public is_null: boolean;

      constructor(args?: { str_val: string; is_null: boolean; });
  }

declare class TColumnType {
    public col_name: string;
    public col_type: common_ttypes.TTypeInfo;
    public is_reserved_keyword: boolean;
    public src_name: string;
    public is_system: boolean;
    public is_physical: boolean;
    public col_id: Int64;

      constructor(args?: { col_name: string; col_type: common_ttypes.TTypeInfo; is_reserved_keyword: boolean; src_name: string; is_system: boolean; is_physical: boolean; col_id: Int64; });
  }

declare class TRow {
    public cols: TDatum[];

      constructor(args?: { cols: TDatum[]; });
  }

declare class TColumnData {
    public int_col: Int64[];
    public real_col: number[];
    public str_col: string[];
    public arr_col: TColumn[];

      constructor(args?: { int_col: Int64[]; real_col: number[]; str_col: string[]; arr_col: TColumn[]; });
  }

declare class TColumn {
    public data: TColumnData;
    public nulls: boolean[];

      constructor(args?: { data: TColumnData; nulls: boolean[]; });
  }

declare class TStringRow {
    public cols: TStringValue[];

      constructor(args?: { cols: TStringValue[]; });
  }

declare class TKrb5Session {
    public sessionId: string;
    public krbToken: string;

      constructor(args?: { sessionId: string; krbToken: string; });
  }

declare class TStepResult {
    public serialized_rows: serialized_result_set_ttypes.TSerializedRows;
    public execution_finished: boolean;
    public merge_type: TMergeType;
    public sharded: boolean;
    public row_desc: TColumnType[];
    public node_id: number;

      constructor(args?: { serialized_rows: serialized_result_set_ttypes.TSerializedRows; execution_finished: boolean; merge_type: TMergeType; sharded: boolean; row_desc: TColumnType[]; node_id: number; });
  }

declare class TRowSet {
    public row_desc: TColumnType[];
    public rows: TRow[];
    public columns: TColumn[];
    public is_columnar: boolean;

      constructor(args?: { row_desc: TColumnType[]; rows: TRow[]; columns: TColumn[]; is_columnar: boolean; });
  }

declare class TQueryResult {
    public row_set: TRowSet;
    public execution_time_ms: Int64;
    public total_time_ms: Int64;
    public nonce: string;
    public debug: string;
    public success: boolean;
    public query_type: TQueryType;

      constructor(args?: { row_set: TRowSet; execution_time_ms: Int64; total_time_ms: Int64; nonce: string; debug: string; success?: boolean; query_type?: TQueryType; });
  }

declare class TDataFrame {
    public sm_handle: string;
    public sm_size: Int64;
    public df_handle: string;
    public df_size: Int64;
    public execution_time_ms: Int64;
    public arrow_conversion_time_ms: Int64;
    public df_buffer: string;

      constructor(args?: { sm_handle: string; sm_size: Int64; df_handle: string; df_size: Int64; execution_time_ms: Int64; arrow_conversion_time_ms: Int64; df_buffer: string; });
  }

declare class TDBInfo {
    public db_name: string;
    public db_owner: string;

      constructor(args?: { db_name: string; db_owner: string; });
  }

declare class TOmniSciException extends Thrift.TException {
    public error_msg: string;

      constructor(args?: { error_msg: string; });
  }

declare class TCopyParams {
    public delimiter: string;
    public null_str: string;
    public has_header: TImportHeaderRow;
    public quoted: boolean;
    public quote: string;
    public escape: string;
    public line_delim: string;
    public array_delim: string;
    public array_begin: string;
    public array_end: string;
    public threads: number;
    public file_type: TFileType;
    public s3_access_key: string;
    public s3_secret_key: string;
    public s3_region: string;
    public geo_coords_encoding: common_ttypes.TEncodingType;
    public geo_coords_comp_param: number;
    public geo_coords_type: common_ttypes.TDatumType;
    public geo_coords_srid: number;
    public sanitize_column_names: boolean;
    public geo_layer_name: string;
    public s3_endpoint: string;
    public geo_assign_render_groups: boolean;
    public geo_explode_collections: boolean;

      constructor(args?: { delimiter: string; null_str: string; has_header?: TImportHeaderRow; quoted: boolean; quote: string; escape: string; line_delim: string; array_delim: string; array_begin: string; array_end: string; threads: number; file_type?: TFileType; s3_access_key: string; s3_secret_key: string; s3_region: string; geo_coords_encoding?: common_ttypes.TEncodingType; geo_coords_comp_param?: number; geo_coords_type?: common_ttypes.TDatumType; geo_coords_srid?: number; sanitize_column_names?: boolean; geo_layer_name: string; s3_endpoint: string; geo_assign_render_groups?: boolean; geo_explode_collections?: boolean; });
  }

declare class TCreateParams {
    public is_replicated: boolean;

      constructor(args?: { is_replicated: boolean; });
  }

declare class TDetectResult {
    public row_set: TRowSet;
    public copy_params: TCopyParams;

      constructor(args?: { row_set: TRowSet; copy_params: TCopyParams; });
  }

declare class TImportStatus {
    public elapsed: Int64;
    public rows_completed: Int64;
    public rows_estimated: Int64;
    public rows_rejected: Int64;

      constructor(args?: { elapsed: Int64; rows_completed: Int64; rows_estimated: Int64; rows_rejected: Int64; });
  }

declare class TFrontendView {
    public view_name: string;
    public view_state: string;
    public image_hash: string;
    public update_time: string;
    public view_metadata: string;

      constructor(args?: { view_name: string; view_state: string; image_hash: string; update_time: string; view_metadata: string; });
  }

declare class TDashboard {
    public dashboard_name: string;
    public dashboard_state: string;
    public image_hash: string;
    public update_time: string;
    public dashboard_metadata: string;
    public dashboard_id: number;
    public dashboard_owner: string;
    public is_dash_shared: boolean;

      constructor(args?: { dashboard_name: string; dashboard_state: string; image_hash: string; update_time: string; dashboard_metadata: string; dashboard_id: number; dashboard_owner: string; is_dash_shared: boolean; });
  }

declare class TServerStatus {
    public read_only: boolean;
    public version: string;
    public rendering_enabled: boolean;
    public start_time: Int64;
    public edition: string;
    public host_name: string;
    public poly_rendering_enabled: boolean;
    public role: TRole;

      constructor(args?: { read_only: boolean; version: string; rendering_enabled: boolean; start_time: Int64; edition: string; host_name: string; poly_rendering_enabled: boolean; role: TRole; });
  }

declare class TPixel {
    public x: Int64;
    public y: Int64;

      constructor(args?: { x: Int64; y: Int64; });
  }

declare class TPixelTableRowResult {
    public pixel: TPixel;
    public vega_table_name: string;
    public table_id: Int64[];
    public row_id: Int64[];
    public row_set: TRowSet;
    public nonce: string;

      constructor(args?: { pixel: TPixel; vega_table_name: string; table_id: Int64[]; row_id: Int64[]; row_set: TRowSet; nonce: string; });
  }

declare class TRenderResult {
    public image: string;
    public nonce: string;
    public execution_time_ms: Int64;
    public render_time_ms: Int64;
    public total_time_ms: Int64;
    public vega_metadata: string;

      constructor(args?: { image: string; nonce: string; execution_time_ms: Int64; render_time_ms: Int64; total_time_ms: Int64; vega_metadata: string; });
  }

declare class TGpuSpecification {
    public num_sm: number;
    public clock_frequency_kHz: Int64;
    public memory: Int64;
    public compute_capability_major: number;
    public compute_capability_minor: number;

      constructor(args?: { num_sm: number; clock_frequency_kHz: Int64; memory: Int64; compute_capability_major: number; compute_capability_minor: number; });
  }

declare class THardwareInfo {
    public num_gpu_hw: number;
    public num_cpu_hw: number;
    public num_gpu_allocated: number;
    public start_gpu: number;
    public host_name: string;
    public gpu_info: TGpuSpecification[];

      constructor(args?: { num_gpu_hw: number; num_cpu_hw: number; num_gpu_allocated: number; start_gpu: number; host_name: string; gpu_info: TGpuSpecification[]; });
  }

declare class TClusterHardwareInfo {
    public hardware_info: THardwareInfo[];

      constructor(args?: { hardware_info: THardwareInfo[]; });
  }

declare class TMemoryData {
    public slab: Int64;
    public start_page: number;
    public num_pages: Int64;
    public touch: number;
    public chunk_key: Int64[];
    public buffer_epoch: number;
    public is_free: boolean;

      constructor(args?: { slab: Int64; start_page: number; num_pages: Int64; touch: number; chunk_key: Int64[]; buffer_epoch: number; is_free: boolean; });
  }

declare class TNodeMemoryInfo {
    public host_name: string;
    public page_size: Int64;
    public max_num_pages: Int64;
    public num_pages_allocated: Int64;
    public is_allocation_capped: boolean;
    public node_memory_data: TMemoryData[];

      constructor(args?: { host_name: string; page_size: Int64; max_num_pages: Int64; num_pages_allocated: Int64; is_allocation_capped: boolean; node_memory_data: TMemoryData[]; });
  }

declare class TTableMeta {
    public table_name: string;
    public num_cols: Int64;
    public is_view: boolean;
    public is_replicated: boolean;
    public shard_count: Int64;
    public max_rows: Int64;
    public table_id: Int64;
    public max_table_id: Int64;
    public col_types: common_ttypes.TTypeInfo[];
    public col_names: string[];

      constructor(args?: { table_name: string; num_cols: Int64; is_view: boolean; is_replicated: boolean; shard_count: Int64; max_rows: Int64; table_id: Int64; max_table_id: Int64; col_types: common_ttypes.TTypeInfo[]; col_names: string[]; });
  }

declare class TTableDetails {
    public row_desc: TColumnType[];
    public fragment_size: Int64;
    public page_size: Int64;
    public max_rows: Int64;
    public view_sql: string;
    public shard_count: Int64;
    public key_metainfo: string;
    public is_temporary: boolean;
    public partition_detail: TPartitionDetail;

      constructor(args?: { row_desc: TColumnType[]; fragment_size: Int64; page_size: Int64; max_rows: Int64; view_sql: string; shard_count: Int64; key_metainfo: string; is_temporary: boolean; partition_detail: TPartitionDetail; });
  }

declare class TColumnRange {
    public type: TExpressionRangeType;
    public col_id: number;
    public table_id: number;
    public has_nulls: boolean;
    public int_min: Int64;
    public int_max: Int64;
    public bucket: Int64;
    public fp_min: number;
    public fp_max: number;

      constructor(args?: { type: TExpressionRangeType; col_id: number; table_id: number; has_nulls: boolean; int_min: Int64; int_max: Int64; bucket: Int64; fp_min: number; fp_max: number; });
  }

declare class TDictionaryGeneration {
    public dict_id: number;
    public entry_count: Int64;

      constructor(args?: { dict_id: number; entry_count: Int64; });
  }

declare class TTableGeneration {
    public table_id: number;
    public tuple_count: Int64;
    public start_rowid: Int64;

      constructor(args?: { table_id: number; tuple_count: Int64; start_rowid: Int64; });
  }

declare class TPendingQuery {
    public id: Int64;
    public column_ranges: TColumnRange[];
    public dictionary_generations: TDictionaryGeneration[];
    public table_generations: TTableGeneration[];
    public parent_session_id: string;

      constructor(args?: { id: Int64; column_ranges: TColumnRange[]; dictionary_generations: TDictionaryGeneration[]; table_generations: TTableGeneration[]; parent_session_id: string; });
  }

declare class TVarLen {
    public payload: string;
    public is_null: boolean;

      constructor(args?: { payload: string; is_null: boolean; });
  }

declare class TDataBlockPtr {
    public fixed_len_data: string;
    public var_len_data: TVarLen[];

      constructor(args?: { fixed_len_data?: string; var_len_data?: TVarLen[]; });
  }

declare class TInsertData {
    public db_id: number;
    public table_id: number;
    public column_ids: number[];
    public data: TDataBlockPtr[];
    public num_rows: Int64;

      constructor(args?: { db_id: number; table_id: number; column_ids: number[]; data: TDataBlockPtr[]; num_rows: Int64; });
  }

declare class TPendingRenderQuery {
    public id: Int64;

      constructor(args?: { id: Int64; });
  }

declare class TRenderParseResult {
    public merge_type: TMergeType;
    public node_id: number;
    public execution_time_ms: Int64;
    public render_time_ms: Int64;
    public total_time_ms: Int64;

      constructor(args?: { merge_type: TMergeType; node_id: number; execution_time_ms: Int64; render_time_ms: Int64; total_time_ms: Int64; });
  }

declare class TRawRenderPassDataResult {
    public num_pixel_channels: number;
    public num_pixel_samples: number;
    public pixels: string;
    public row_ids_A: string;
    public row_ids_B: string;
    public table_ids: string;
    public accum_data: string;
    public accum_depth: number;

      constructor(args?: { num_pixel_channels: number; num_pixel_samples: number; pixels: string; row_ids_A: string; row_ids_B: string; table_ids: string; accum_data: string; accum_depth: number; });
  }

declare class TRawPixelData {
    public width: number;
    public height: number;
    public render_pass_map: { [k: number]: TRawRenderPassDataResult; };

      constructor(args?: { width: number; height: number; render_pass_map: { [k: number]: TRawRenderPassDataResult; }; });
  }

declare class TRenderDatum {
    public type: common_ttypes.TDatumType;
    public cnt: number;
    public value: string;

      constructor(args?: { type: common_ttypes.TDatumType; cnt: number; value: string; });
  }

declare class TRenderStepResult {
    public merge_data: { [k: string]: { [k: string]: { [k: string]: { [k: string]: TRenderDatum[]; }; }; }; };
    public raw_pixel_data: TRawPixelData;
    public execution_time_ms: Int64;
    public render_time_ms: Int64;
    public total_time_ms: Int64;

      constructor(args?: { merge_data: { [k: string]: { [k: string]: { [k: string]: { [k: string]: TRenderDatum[]; }; }; }; }; raw_pixel_data: TRawPixelData; execution_time_ms: Int64; render_time_ms: Int64; total_time_ms: Int64; });
  }

declare class TDatabasePermissions {
    public create_: boolean;
    public delete_: boolean;
    public view_sql_editor_: boolean;
    public access_: boolean;

      constructor(args?: { create_: boolean; delete_: boolean; view_sql_editor_: boolean; access_: boolean; });
  }

declare class TTablePermissions {
    public create_: boolean;
    public drop_: boolean;
    public select_: boolean;
    public insert_: boolean;
    public update_: boolean;
    public delete_: boolean;
    public truncate_: boolean;
    public alter_: boolean;

      constructor(args?: { create_: boolean; drop_: boolean; select_: boolean; insert_: boolean; update_: boolean; delete_: boolean; truncate_: boolean; alter_: boolean; });
  }

declare class TDashboardPermissions {
    public create_: boolean;
    public delete_: boolean;
    public view_: boolean;
    public edit_: boolean;

      constructor(args?: { create_: boolean; delete_: boolean; view_: boolean; edit_: boolean; });
  }

declare class TViewPermissions {
    public create_: boolean;
    public drop_: boolean;
    public select_: boolean;
    public insert_: boolean;
    public update_: boolean;
    public delete_: boolean;

      constructor(args?: { create_: boolean; drop_: boolean; select_: boolean; insert_: boolean; update_: boolean; delete_: boolean; });
  }

declare class TDBObjectPermissions {
    public database_permissions_: TDatabasePermissions;
    public table_permissions_: TTablePermissions;
    public dashboard_permissions_: TDashboardPermissions;
    public view_permissions_: TViewPermissions;

      constructor(args?: { database_permissions_?: TDatabasePermissions; table_permissions_?: TTablePermissions; dashboard_permissions_?: TDashboardPermissions; view_permissions_?: TViewPermissions; });
  }

declare class TDBObject {
    public objectName: string;
    public objectType: TDBObjectType;
    public privs: boolean[];
    public grantee: string;
    public privilegeObjectType: TDBObjectType;

      constructor(args?: { objectName: string; objectType: TDBObjectType; privs: boolean[]; grantee: string; privilegeObjectType: TDBObjectType; });
  }

declare class TDashboardGrantees {
    public name: string;
    public is_user: boolean;
    public permissions: TDashboardPermissions;

      constructor(args?: { name: string; is_user: boolean; permissions: TDashboardPermissions; });
  }

declare class TLicenseInfo {
    public claims: string[];

      constructor(args?: { claims: string[]; });
  }

declare class TSessionInfo {
    public user: string;
    public database: string;
    public start_time: Int64;
    public is_super: boolean;

      constructor(args?: { user: string; database: string; start_time: Int64; is_super: boolean; });
  }

declare class TGeoFileLayerInfo {
    public name: string;
    public contents: TGeoFileLayerContents;

      constructor(args?: { name: string; contents: TGeoFileLayerContents; });
  }

declare class TTableEpochInfo {
    public table_id: number;
    public table_epoch: number;
    public leaf_index: number;

      constructor(args?: { table_id: number; table_epoch: number; leaf_index: number; });
  }
