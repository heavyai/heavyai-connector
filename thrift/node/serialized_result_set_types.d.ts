//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import common_ttypes = require('./common_types');



declare enum TResultSetLayout {
  GroupByPerfectHash = 0,
  GroupByBaselineHash = 1,
  Projection = 2,
  NonGroupedAggregate = 3,
}

declare enum TCountDistinctImplType {
  Invalid = 0,
  Bitmap = 1,
  StdSet = 2,
}

declare enum TAggKind {
  AVG = 0,
  MIN = 1,
  MAX = 2,
  SUM = 3,
  COUNT = 4,
  APPROX_COUNT_DISTINCT = 5,
  SAMPLE = 6,
  SINGLE_VALUE = 7,
}

declare class TSlotSize {
    public padded: number;
    public logical: number;

      constructor(args?: { padded: number; logical: number; });
  }

declare class TColSlotContext {
    public slot_sizes: TSlotSize[];
    public col_to_slot_map: number[][];

      constructor(args?: { slot_sizes: TSlotSize[]; col_to_slot_map: number[][]; });
  }

declare class TCountDistinctDescriptor {
    public impl_type: TCountDistinctImplType;
    public min_val: Int64;
    public bitmap_sz_bits: Int64;
    public approximate: boolean;
    public device_type: common_ttypes.TDeviceType;
    public sub_bitmap_count: Int64;

      constructor(args?: { impl_type: TCountDistinctImplType; min_val: Int64; bitmap_sz_bits: Int64; approximate: boolean; device_type: common_ttypes.TDeviceType; sub_bitmap_count: Int64; });
  }

declare class TResultSetBufferDescriptor {
    public layout: TResultSetLayout;
    public keyless: boolean;
    public entry_count: number;
    public idx_target_as_key: number;
    public min_val: Int64;
    public max_val: Int64;
    public bucket: Int64;
    public group_col_widths: number[];
    public key_bytewidth: number;
    public col_slot_context: TColSlotContext;
    public target_groupby_indices: number[];
    public count_distinct_descriptors: TCountDistinctDescriptor[];
    public force_4byte_float: boolean;

      constructor(args?: { layout: TResultSetLayout; keyless: boolean; entry_count: number; idx_target_as_key: number; min_val: Int64; max_val: Int64; bucket: Int64; group_col_widths: number[]; key_bytewidth: number; col_slot_context: TColSlotContext; target_groupby_indices: number[]; count_distinct_descriptors: TCountDistinctDescriptor[]; force_4byte_float: boolean; });
  }

declare class TTargetInfo {
    public is_agg: boolean;
    public kind: TAggKind;
    public type: common_ttypes.TTypeInfo;
    public arg_type: common_ttypes.TTypeInfo;
    public skip_nulls: boolean;
    public is_distinct: boolean;

      constructor(args?: { is_agg: boolean; kind: TAggKind; type: common_ttypes.TTypeInfo; arg_type: common_ttypes.TTypeInfo; skip_nulls: boolean; is_distinct: boolean; });
  }

declare class TCountDistinctSetStorage {
    public bitmap: string;
    public sparse_set: Int64[];

      constructor(args?: { bitmap?: string; sparse_set?: Int64[]; });
  }

declare class TCountDistinctSet {
    public type: TCountDistinctImplType;
    public storage: TCountDistinctSetStorage;
    public remote_ptr: Int64;

      constructor(args?: { type: TCountDistinctImplType; storage: TCountDistinctSetStorage; remote_ptr: Int64; });
  }

declare class TSerializedRows {
    public buffers: string[];
    public buffer_lengths: Int64[];
    public buffers_total_size: Int64;
    public total_compression_time_ms: number;
    public descriptor: TResultSetBufferDescriptor;
    public targets: TTargetInfo[];
    public target_init_vals: Int64[];
    public varlen_buffer: string[];
    public count_distinct_sets: TCountDistinctSet[];
    public explanation: string;

      constructor(args?: { buffers: string[]; buffer_lengths: Int64[]; buffers_total_size: Int64; total_compression_time_ms: number; descriptor: TResultSetBufferDescriptor; targets: TTargetInfo[]; target_init_vals: Int64[]; varlen_buffer: string[]; count_distinct_sets: TCountDistinctSet[]; explanation: string; });
  }
