//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var common_ttypes = require('./common_types');
var completion_hints_ttypes = require('./completion_hints_types');
var serialized_result_set_ttypes = require('./serialized_result_set_types');
var extension_functions_ttypes = require('./extension_functions_types');


var ttypes = require('./omnisci_types');
//HELPER FUNCTIONS AND STRUCTURES

var OmniSci_connect_args = function(args) {
  this.user = null;
  this.passwd = null;
  this.dbname = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.passwd !== undefined && args.passwd !== null) {
      this.passwd = args.passwd;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
OmniSci_connect_args.prototype = {};
OmniSci_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_connect_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_connect_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_connect_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_connect_result.prototype = {};
OmniSci_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_connect_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_krb5_connect_args = function(args) {
  this.inputToken = null;
  this.dbname = null;
  if (args) {
    if (args.inputToken !== undefined && args.inputToken !== null) {
      this.inputToken = args.inputToken;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
OmniSci_krb5_connect_args.prototype = {};
OmniSci_krb5_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_krb5_connect_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_krb5_connect_args');
  if (this.inputToken !== null && this.inputToken !== undefined) {
    output.writeFieldBegin('inputToken', Thrift.Type.STRING, 1);
    output.writeString(this.inputToken);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_krb5_connect_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TKrb5Session(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_krb5_connect_result.prototype = {};
OmniSci_krb5_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TKrb5Session();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_krb5_connect_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_krb5_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_disconnect_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_disconnect_args.prototype = {};
OmniSci_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_disconnect_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_disconnect_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_disconnect_result.prototype = {};
OmniSci_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_disconnect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_switch_database_args = function(args) {
  this.session = null;
  this.dbname = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
OmniSci_switch_database_args.prototype = {};
OmniSci_switch_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_switch_database_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_switch_database_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_switch_database_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_switch_database_result.prototype = {};
OmniSci_switch_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_switch_database_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_switch_database_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_clone_session_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_clone_session_args.prototype = {};
OmniSci_clone_session_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clone_session_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clone_session_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_clone_session_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_clone_session_result.prototype = {};
OmniSci_clone_session_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clone_session_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clone_session_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_server_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_server_status_args.prototype = {};
OmniSci_get_server_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_server_status_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_server_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_server_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TServerStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_server_status_result.prototype = {};
OmniSci_get_server_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TServerStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_server_status_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_server_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_status_args.prototype = {};
OmniSci_get_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_status_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TServerStatus]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_status_result.prototype = {};
OmniSci_get_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3186 = input.readListBegin();
        var _size185 = _rtmp3186.size || 0;
        for (var _i187 = 0; _i187 < _size185; ++_i187) {
          var elem188 = null;
          elem188 = new ttypes.TServerStatus();
          elem188.read(input);
          this.success.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_status_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter189 in this.success) {
      if (this.success.hasOwnProperty(iter189)) {
        iter189 = this.success[iter189];
        iter189.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_hardware_info_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_hardware_info_args.prototype = {};
OmniSci_get_hardware_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_hardware_info_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_hardware_info_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_hardware_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TClusterHardwareInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_hardware_info_result.prototype = {};
OmniSci_get_hardware_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TClusterHardwareInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_hardware_info_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_hardware_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_tables_args.prototype = {};
OmniSci_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_tables_result.prototype = {};
OmniSci_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3191 = input.readListBegin();
        var _size190 = _rtmp3191.size || 0;
        for (var _i192 = 0; _i192 < _size190; ++_i192) {
          var elem193 = null;
          elem193 = input.readString();
          this.success.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter194 in this.success) {
      if (this.success.hasOwnProperty(iter194)) {
        iter194 = this.success[iter194];
        output.writeString(iter194);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_physical_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_physical_tables_args.prototype = {};
OmniSci_get_physical_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_physical_tables_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_physical_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_physical_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_physical_tables_result.prototype = {};
OmniSci_get_physical_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3196 = input.readListBegin();
        var _size195 = _rtmp3196.size || 0;
        for (var _i197 = 0; _i197 < _size195; ++_i197) {
          var elem198 = null;
          elem198 = input.readString();
          this.success.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_physical_tables_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_physical_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter199 in this.success) {
      if (this.success.hasOwnProperty(iter199)) {
        iter199 = this.success[iter199];
        output.writeString(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_views_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_views_args.prototype = {};
OmniSci_get_views_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_views_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_views_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_views_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_views_result.prototype = {};
OmniSci_get_views_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3201 = input.readListBegin();
        var _size200 = _rtmp3201.size || 0;
        for (var _i202 = 0; _i202 < _size200; ++_i202) {
          var elem203 = null;
          elem203 = input.readString();
          this.success.push(elem203);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_views_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_views_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter204 in this.success) {
      if (this.success.hasOwnProperty(iter204)) {
        iter204 = this.success[iter204];
        output.writeString(iter204);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_tables_meta_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_tables_meta_args.prototype = {};
OmniSci_get_tables_meta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_tables_meta_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_tables_meta_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_tables_meta_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TTableMeta]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_tables_meta_result.prototype = {};
OmniSci_get_tables_meta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3206 = input.readListBegin();
        var _size205 = _rtmp3206.size || 0;
        for (var _i207 = 0; _i207 < _size205; ++_i207) {
          var elem208 = null;
          elem208 = new ttypes.TTableMeta();
          elem208.read(input);
          this.success.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_tables_meta_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_tables_meta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter209 in this.success) {
      if (this.success.hasOwnProperty(iter209)) {
        iter209 = this.success[iter209];
        iter209.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_table_details_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
OmniSci_get_table_details_args.prototype = {};
OmniSci_get_table_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_details_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_details_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_table_details_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TTableDetails(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_table_details_result.prototype = {};
OmniSci_get_table_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTableDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_details_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_internal_table_details_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
OmniSci_get_internal_table_details_args.prototype = {};
OmniSci_get_internal_table_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_internal_table_details_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_internal_table_details_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_internal_table_details_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TTableDetails(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_internal_table_details_result.prototype = {};
OmniSci_get_internal_table_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTableDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_internal_table_details_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_internal_table_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_users_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_users_args.prototype = {};
OmniSci_get_users_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_users_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_users_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_users_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_users_result.prototype = {};
OmniSci_get_users_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3211 = input.readListBegin();
        var _size210 = _rtmp3211.size || 0;
        for (var _i212 = 0; _i212 < _size210; ++_i212) {
          var elem213 = null;
          elem213 = input.readString();
          this.success.push(elem213);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_users_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_users_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter214 in this.success) {
      if (this.success.hasOwnProperty(iter214)) {
        iter214 = this.success[iter214];
        output.writeString(iter214);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_databases_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_databases_args.prototype = {};
OmniSci_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_databases_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_databases_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDBInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_databases_result.prototype = {};
OmniSci_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3216 = input.readListBegin();
        var _size215 = _rtmp3216.size || 0;
        for (var _i217 = 0; _i217 < _size215; ++_i217) {
          var elem218 = null;
          elem218 = new ttypes.TDBInfo();
          elem218.read(input);
          this.success.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter219 in this.success) {
      if (this.success.hasOwnProperty(iter219)) {
        iter219 = this.success[iter219];
        iter219.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_version_args = function(args) {
};
OmniSci_get_version_args.prototype = {};
OmniSci_get_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_version_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_version_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_version_result.prototype = {};
OmniSci_get_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_version_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_start_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_start_heap_profile_args.prototype = {};
OmniSci_start_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_start_heap_profile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_start_heap_profile_result.prototype = {};
OmniSci_start_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_stop_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_stop_heap_profile_args.prototype = {};
OmniSci_stop_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_stop_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_stop_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_stop_heap_profile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_stop_heap_profile_result.prototype = {};
OmniSci_stop_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_stop_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_stop_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_heap_profile_args.prototype = {};
OmniSci_get_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_heap_profile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_heap_profile_result.prototype = {};
OmniSci_get_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_heap_profile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_memory_args = function(args) {
  this.session = null;
  this.memory_level = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.memory_level !== undefined && args.memory_level !== null) {
      this.memory_level = args.memory_level;
    }
  }
};
OmniSci_get_memory_args.prototype = {};
OmniSci_get_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.memory_level = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_memory_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.memory_level !== null && this.memory_level !== undefined) {
    output.writeFieldBegin('memory_level', Thrift.Type.STRING, 2);
    output.writeString(this.memory_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_memory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TNodeMemoryInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_memory_result.prototype = {};
OmniSci_get_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3221 = input.readListBegin();
        var _size220 = _rtmp3221.size || 0;
        for (var _i222 = 0; _i222 < _size220; ++_i222) {
          var elem223 = null;
          elem223 = new ttypes.TNodeMemoryInfo();
          elem223.read(input);
          this.success.push(elem223);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_memory_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_memory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter224 in this.success) {
      if (this.success.hasOwnProperty(iter224)) {
        iter224 = this.success[iter224];
        iter224.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_clear_cpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_clear_cpu_memory_args.prototype = {};
OmniSci_clear_cpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clear_cpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clear_cpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_clear_cpu_memory_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_clear_cpu_memory_result.prototype = {};
OmniSci_clear_cpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clear_cpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clear_cpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_clear_gpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_clear_gpu_memory_args.prototype = {};
OmniSci_clear_gpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clear_gpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clear_gpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_clear_gpu_memory_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_clear_gpu_memory_result.prototype = {};
OmniSci_clear_gpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clear_gpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clear_gpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_table_epoch_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  this.new_epoch = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
    if (args.new_epoch !== undefined && args.new_epoch !== null) {
      this.new_epoch = args.new_epoch;
    }
  }
};
OmniSci_set_table_epoch_args.prototype = {};
OmniSci_set_table_epoch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.new_epoch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epoch_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epoch_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  if (this.new_epoch !== null && this.new_epoch !== undefined) {
    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 4);
    output.writeI32(this.new_epoch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_table_epoch_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_set_table_epoch_result.prototype = {};
OmniSci_set_table_epoch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epoch_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epoch_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_table_epoch_by_name_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.new_epoch = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.new_epoch !== undefined && args.new_epoch !== null) {
      this.new_epoch = args.new_epoch;
    }
  }
};
OmniSci_set_table_epoch_by_name_args.prototype = {};
OmniSci_set_table_epoch_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.new_epoch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epoch_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epoch_by_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.new_epoch !== null && this.new_epoch !== undefined) {
    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 3);
    output.writeI32(this.new_epoch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_table_epoch_by_name_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_set_table_epoch_by_name_result.prototype = {};
OmniSci_set_table_epoch_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epoch_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epoch_by_name_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_table_epoch_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
OmniSci_get_table_epoch_args.prototype = {};
OmniSci_get_table_epoch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epoch_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epoch_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_table_epoch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
OmniSci_get_table_epoch_result.prototype = {};
OmniSci_get_table_epoch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epoch_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epoch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_table_epoch_by_name_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
OmniSci_get_table_epoch_by_name_args.prototype = {};
OmniSci_get_table_epoch_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epoch_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epoch_by_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_table_epoch_by_name_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
OmniSci_get_table_epoch_by_name_result.prototype = {};
OmniSci_get_table_epoch_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epoch_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epoch_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

<<<<<<< HEAD
<<<<<<< HEAD
var OmniSci_get_table_epochs_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
OmniSci_get_table_epochs_args.prototype = {};
OmniSci_get_table_epochs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epochs_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epochs_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_table_epochs_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TTableEpochInfo]);
    }
  }
};
OmniSci_get_table_epochs_result.prototype = {};
OmniSci_get_table_epochs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3226 = input.readListBegin();
        var _size225 = _rtmp3226.size || 0;
        for (var _i227 = 0; _i227 < _size225; ++_i227) {
          var elem228 = null;
          elem228 = new ttypes.TTableEpochInfo();
          elem228.read(input);
          this.success.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epochs_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epochs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter229 in this.success) {
      if (this.success.hasOwnProperty(iter229)) {
        iter229 = this.success[iter229];
        iter229.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_table_epochs_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_epochs = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_epochs !== undefined && args.table_epochs !== null) {
      this.table_epochs = Thrift.copyList(args.table_epochs, [ttypes.TTableEpochInfo]);
    }
  }
};
OmniSci_set_table_epochs_args.prototype = {};
OmniSci_set_table_epochs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.table_epochs = [];
        var _rtmp3231 = input.readListBegin();
        var _size230 = _rtmp3231.size || 0;
        for (var _i232 = 0; _i232 < _size230; ++_i232) {
          var elem233 = null;
          elem233 = new ttypes.TTableEpochInfo();
          elem233.read(input);
          this.table_epochs.push(elem233);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epochs_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epochs_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_epochs !== null && this.table_epochs !== undefined) {
    output.writeFieldBegin('table_epochs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.table_epochs.length);
    for (var iter234 in this.table_epochs) {
      if (this.table_epochs.hasOwnProperty(iter234)) {
        iter234 = this.table_epochs[iter234];
        iter234.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_table_epochs_result = function(args) {
};
OmniSci_set_table_epochs_result.prototype = {};
OmniSci_set_table_epochs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epochs_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epochs_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_session_info_args = function(args) {
=======
var MapD_get_session_info_args = function(args) {
>>>>>>> Update Thrift
=======
var OmniSci_get_session_info_args = function(args) {
>>>>>>> Update Thrift
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_session_info_args.prototype = {};
OmniSci_get_session_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_session_info_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_session_info_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_session_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TSessionInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_session_info_result.prototype = {};
OmniSci_get_session_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TSessionInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_session_info_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_session_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_sql_execute_args = function(args) {
  this.session = null;
  this.query = null;
  this.column_format = null;
  this.nonce = null;
  this.first_n = -1;
  this.at_most_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
    if (args.at_most_n !== undefined && args.at_most_n !== null) {
      this.at_most_n = args.at_most_n;
    }
  }
};
OmniSci_sql_execute_args.prototype = {};
OmniSci_sql_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.at_most_n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  if (this.at_most_n !== null && this.at_most_n !== undefined) {
    output.writeFieldBegin('at_most_n', Thrift.Type.I32, 6);
    output.writeI32(this.at_most_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_sql_execute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TQueryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_sql_execute_result.prototype = {};
OmniSci_sql_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_sql_execute_df_args = function(args) {
  this.session = null;
  this.query = null;
  this.device_type = null;
  this.device_id = 0;
  this.first_n = -1;
  this.transport_method = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.device_type !== undefined && args.device_type !== null) {
      this.device_type = args.device_type;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
    if (args.transport_method !== undefined && args.transport_method !== null) {
      this.transport_method = args.transport_method;
    }
  }
};
OmniSci_sql_execute_df_args.prototype = {};
OmniSci_sql_execute_df_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.transport_method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_df_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_df_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.device_type !== null && this.device_type !== undefined) {
    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);
    output.writeI32(this.device_type);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  if (this.transport_method !== null && this.transport_method !== undefined) {
    output.writeFieldBegin('transport_method', Thrift.Type.I32, 6);
    output.writeI32(this.transport_method);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_sql_execute_df_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDataFrame(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_sql_execute_df_result.prototype = {};
OmniSci_sql_execute_df_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDataFrame();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_df_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_df_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_sql_execute_gdf_args = function(args) {
  this.session = null;
  this.query = null;
  this.device_id = 0;
  this.first_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
  }
};
OmniSci_sql_execute_gdf_args.prototype = {};
OmniSci_sql_execute_gdf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_gdf_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_gdf_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_sql_execute_gdf_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDataFrame(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_sql_execute_gdf_result.prototype = {};
OmniSci_sql_execute_gdf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDataFrame();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_gdf_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_gdf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_deallocate_df_args = function(args) {
  this.session = null;
  this.df = null;
  this.device_type = null;
  this.device_id = 0;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.TDataFrame(args.df);
    }
    if (args.device_type !== undefined && args.device_type !== null) {
      this.device_type = args.device_type;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
  }
};
OmniSci_deallocate_df_args.prototype = {};
OmniSci_deallocate_df_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.TDataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_deallocate_df_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_deallocate_df_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.device_type !== null && this.device_type !== undefined) {
    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);
    output.writeI32(this.device_type);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_deallocate_df_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_deallocate_df_result.prototype = {};
OmniSci_deallocate_df_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_deallocate_df_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_deallocate_df_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_interrupt_args = function(args) {
  this.query_session = null;
  this.interrupt_session = null;
  if (args) {
    if (args.query_session !== undefined && args.query_session !== null) {
      this.query_session = args.query_session;
    }
    if (args.interrupt_session !== undefined && args.interrupt_session !== null) {
      this.interrupt_session = args.interrupt_session;
    }
  }
};
OmniSci_interrupt_args.prototype = {};
OmniSci_interrupt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query_session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.interrupt_session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_interrupt_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_interrupt_args');
  if (this.query_session !== null && this.query_session !== undefined) {
    output.writeFieldBegin('query_session', Thrift.Type.STRING, 1);
    output.writeString(this.query_session);
    output.writeFieldEnd();
  }
  if (this.interrupt_session !== null && this.interrupt_session !== undefined) {
    output.writeFieldBegin('interrupt_session', Thrift.Type.STRING, 2);
    output.writeString(this.interrupt_session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_interrupt_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_interrupt_result.prototype = {};
OmniSci_interrupt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_interrupt_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_interrupt_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_sql_validate_args = function(args) {
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
OmniSci_sql_validate_args.prototype = {};
OmniSci_sql_validate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_validate_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_validate_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_sql_validate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_sql_validate_result.prototype = {};
OmniSci_sql_validate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
<<<<<<< HEAD
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3236 = input.readListBegin();
        var _size235 = _rtmp3236.size || 0;
        for (var _i237 = 0; _i237 < _size235; ++_i237) {
          var elem238 = null;
          elem238 = new ttypes.TColumnType();
          elem238.read(input);
          this.success.push(elem238);
=======
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
<<<<<<< HEAD
        var _ktype355 = 0;
        var _vtype356 = 0;
        _rtmp3358 = input.readMapBegin();
        _ktype355 = _rtmp3358.ktype;
        _vtype356 = _rtmp3358.vtype;
        _size354 = _rtmp3358.size;
        for (var _i359 = 0; _i359 < _size354; ++_i359)
        {
          var key360 = null;
          var val361 = null;
          key360 = input.readString();
          val361 = new ttypes.TColumnType();
          val361.read(input);
          this.success[key360] = val361;
>>>>>>> Update Thrift
=======
        var _rtmp3226 = input.readMapBegin();
        var _size225 = _rtmp3226.size || 0;
        for (var _i227 = 0; _i227 < _size225; ++_i227) {
          var key228 = null;
          var val229 = null;
          key228 = input.readString();
          val229 = new ttypes.TColumnType();
          val229.read(input);
          this.success[key228] = val229;
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_validate_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_validate_result');
  if (this.success !== null && this.success !== undefined) {
<<<<<<< HEAD
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter239 in this.success) {
      if (this.success.hasOwnProperty(iter239)) {
        iter239 = this.success[iter239];
        iter239.write(output);
=======
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
<<<<<<< HEAD
    for (var kiter362 in this.success)
    {
      if (this.success.hasOwnProperty(kiter362))
      {
        var viter363 = this.success[kiter362];
        output.writeString(kiter362);
        viter363.write(output);
>>>>>>> Update Thrift
=======
    for (var kiter230 in this.success) {
      if (this.success.hasOwnProperty(kiter230)) {
        var viter231 = this.success[kiter230];
        output.writeString(kiter230);
        viter231.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_completion_hints_args = function(args) {
  this.session = null;
  this.sql = null;
  this.cursor = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    }
    if (args.cursor !== undefined && args.cursor !== null) {
      this.cursor = args.cursor;
    }
  }
};
OmniSci_get_completion_hints_args.prototype = {};
OmniSci_get_completion_hints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cursor = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_completion_hints_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_completion_hints_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 2);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.cursor !== null && this.cursor !== undefined) {
    output.writeFieldBegin('cursor', Thrift.Type.I32, 3);
    output.writeI32(this.cursor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_completion_hints_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [completion_hints_ttypes.TCompletionHint]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_completion_hints_result.prototype = {};
OmniSci_get_completion_hints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3241 = input.readListBegin();
        var _size240 = _rtmp3241.size || 0;
        for (var _i242 = 0; _i242 < _size240; ++_i242) {
          var elem243 = null;
          elem243 = new completion_hints_ttypes.TCompletionHint();
          elem243.read(input);
          this.success.push(elem243);
=======
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = new completion_hints_ttypes.TCompletionHint();
          elem370.read(input);
          this.success.push(elem370);
>>>>>>> Update Thrift
=======
        var _rtmp3233 = input.readListBegin();
        var _size232 = _rtmp3233.size || 0;
        for (var _i234 = 0; _i234 < _size232; ++_i234) {
          var elem235 = null;
          elem235 = new completion_hints_ttypes.TCompletionHint();
          elem235.read(input);
          this.success.push(elem235);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_completion_hints_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_completion_hints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter244 in this.success) {
      if (this.success.hasOwnProperty(iter244)) {
        iter244 = this.success[iter244];
        iter244.write(output);
=======
    for (var iter371 in this.success)
    {
      if (this.success.hasOwnProperty(iter371))
      {
        iter371 = this.success[iter371];
        iter371.write(output);
>>>>>>> Update Thrift
=======
    for (var iter236 in this.success) {
      if (this.success.hasOwnProperty(iter236)) {
        iter236 = this.success[iter236];
        iter236.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_execution_mode_args = function(args) {
  this.session = null;
  this.mode = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
OmniSci_set_execution_mode_args.prototype = {};
OmniSci_set_execution_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_execution_mode_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_execution_mode_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_execution_mode_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_set_execution_mode_result.prototype = {};
OmniSci_set_execution_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_execution_mode_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_execution_mode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_render_vega_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.vega_json = null;
  this.compression_level = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
    if (args.compression_level !== undefined && args.compression_level !== null) {
      this.compression_level = args.compression_level;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
OmniSci_render_vega_args.prototype = {};
OmniSci_render_vega_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compression_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_render_vega_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_render_vega_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  if (this.compression_level !== null && this.compression_level !== undefined) {
    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);
    output.writeI32(this.compression_level);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_render_vega_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_render_vega_result.prototype = {};
OmniSci_render_vega_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_render_vega_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_render_vega_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_result_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new ttypes.TPixel(args.pixel);
    }
    if (args.table_col_names !== undefined && args.table_col_names !== null) {
      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
OmniSci_get_result_row_for_pixel_args.prototype = {};
OmniSci_get_result_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new ttypes.TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.table_col_names = {};
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3246 = input.readMapBegin();
        var _size245 = _rtmp3246.size || 0;
        for (var _i247 = 0; _i247 < _size245; ++_i247) {
          var key248 = null;
          var val249 = null;
          key248 = input.readString();
          val249 = [];
          var _rtmp3251 = input.readListBegin();
          var _size250 = _rtmp3251.size || 0;
          for (var _i252 = 0; _i252 < _size250; ++_i252) {
            var elem253 = null;
            elem253 = input.readString();
            val249.push(elem253);
          }
          input.readListEnd();
          this.table_col_names[key248] = val249;
=======
        var _ktype373 = 0;
        var _vtype374 = 0;
        _rtmp3376 = input.readMapBegin();
        _ktype373 = _rtmp3376.ktype;
        _vtype374 = _rtmp3376.vtype;
        _size372 = _rtmp3376.size;
        for (var _i377 = 0; _i377 < _size372; ++_i377)
        {
          var key378 = null;
          var val379 = null;
          key378 = input.readString();
          var _size380 = 0;
          var _rtmp3384;
          val379 = [];
          var _etype383 = 0;
          _rtmp3384 = input.readListBegin();
          _etype383 = _rtmp3384.etype;
          _size380 = _rtmp3384.size;
          for (var _i385 = 0; _i385 < _size380; ++_i385)
          {
            var elem386 = null;
            elem386 = input.readString();
            val379.push(elem386);
          }
          input.readListEnd();
          this.table_col_names[key378] = val379;
>>>>>>> Update Thrift
=======
        var _rtmp3238 = input.readMapBegin();
        var _size237 = _rtmp3238.size || 0;
        for (var _i239 = 0; _i239 < _size237; ++_i239) {
          var key240 = null;
          var val241 = null;
          key240 = input.readString();
          val241 = [];
          var _rtmp3243 = input.readListBegin();
          var _size242 = _rtmp3243.size || 0;
          for (var _i244 = 0; _i244 < _size242; ++_i244) {
            var elem245 = null;
            elem245 = input.readString();
            val241.push(elem245);
          }
          input.readListEnd();
          this.table_col_names[key240] = val241;
>>>>>>> Update Thrift
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_result_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_result_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_col_names !== null && this.table_col_names !== undefined) {
    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));
<<<<<<< HEAD
<<<<<<< HEAD
    for (var kiter254 in this.table_col_names) {
      if (this.table_col_names.hasOwnProperty(kiter254)) {
        var viter255 = this.table_col_names[kiter254];
        output.writeString(kiter254);
        output.writeListBegin(Thrift.Type.STRING, viter255.length);
        for (var iter256 in viter255) {
          if (viter255.hasOwnProperty(iter256)) {
            iter256 = viter255[iter256];
            output.writeString(iter256);
=======
    for (var kiter387 in this.table_col_names)
    {
      if (this.table_col_names.hasOwnProperty(kiter387))
      {
        var viter388 = this.table_col_names[kiter387];
        output.writeString(kiter387);
        output.writeListBegin(Thrift.Type.STRING, viter388.length);
        for (var iter389 in viter388)
        {
          if (viter388.hasOwnProperty(iter389))
          {
            iter389 = viter388[iter389];
            output.writeString(iter389);
>>>>>>> Update Thrift
=======
    for (var kiter246 in this.table_col_names) {
      if (this.table_col_names.hasOwnProperty(kiter246)) {
        var viter247 = this.table_col_names[kiter246];
        output.writeString(kiter246);
        output.writeListBegin(Thrift.Type.STRING, viter247.length);
        for (var iter248 in viter247) {
          if (viter247.hasOwnProperty(iter248)) {
            iter248 = viter247[iter248];
            output.writeString(iter248);
>>>>>>> Update Thrift
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_result_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPixelTableRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_result_row_for_pixel_result.prototype = {};
OmniSci_get_result_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPixelTableRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_result_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_result_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
  }
};
OmniSci_get_dashboard_args.prototype = {};
OmniSci_get_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_dashboard_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDashboard(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_dashboard_result.prototype = {};
OmniSci_get_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDashboard();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_dashboards_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_dashboards_args.prototype = {};
OmniSci_get_dashboards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboards_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_dashboards_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDashboard]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_dashboards_result.prototype = {};
OmniSci_get_dashboards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3258 = input.readListBegin();
        var _size257 = _rtmp3258.size || 0;
        for (var _i259 = 0; _i259 < _size257; ++_i259) {
          var elem260 = null;
          elem260 = new ttypes.TDashboard();
          elem260.read(input);
          this.success.push(elem260);
=======
        var _etype393 = 0;
        _rtmp3394 = input.readListBegin();
        _etype393 = _rtmp3394.etype;
        _size390 = _rtmp3394.size;
        for (var _i395 = 0; _i395 < _size390; ++_i395)
        {
          var elem396 = null;
          elem396 = new ttypes.TDashboard();
          elem396.read(input);
          this.success.push(elem396);
>>>>>>> Update Thrift
=======
        var _rtmp3250 = input.readListBegin();
        var _size249 = _rtmp3250.size || 0;
        for (var _i251 = 0; _i251 < _size249; ++_i251) {
          var elem252 = null;
          elem252 = new ttypes.TDashboard();
          elem252.read(input);
          this.success.push(elem252);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboards_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter261 in this.success) {
      if (this.success.hasOwnProperty(iter261)) {
        iter261 = this.success[iter261];
        iter261.write(output);
=======
    for (var iter397 in this.success)
    {
      if (this.success.hasOwnProperty(iter397))
      {
        iter397 = this.success[iter397];
        iter397.write(output);
>>>>>>> Update Thrift
=======
    for (var iter253 in this.success) {
      if (this.success.hasOwnProperty(iter253)) {
        iter253 = this.success[iter253];
        iter253.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_create_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_name = null;
  this.dashboard_state = null;
  this.image_hash = null;
  this.dashboard_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
      this.dashboard_name = args.dashboard_name;
    }
    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
      this.dashboard_state = args.dashboard_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
      this.dashboard_metadata = args.dashboard_metadata;
    }
  }
};
OmniSci_create_dashboard_args.prototype = {};
OmniSci_create_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 2);
    output.writeString(this.dashboard_name);
    output.writeFieldEnd();
  }
  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 3);
    output.writeString(this.dashboard_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.dashboard_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_create_dashboard_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_create_dashboard_result.prototype = {};
OmniSci_create_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_dashboard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_replace_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.dashboard_name = null;
  this.dashboard_owner = null;
  this.dashboard_state = null;
  this.image_hash = null;
  this.dashboard_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
      this.dashboard_name = args.dashboard_name;
    }
    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {
      this.dashboard_owner = args.dashboard_owner;
    }
    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
      this.dashboard_state = args.dashboard_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
      this.dashboard_metadata = args.dashboard_metadata;
    }
  }
};
OmniSci_replace_dashboard_args.prototype = {};
OmniSci_replace_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_replace_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_replace_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 3);
    output.writeString(this.dashboard_name);
    output.writeFieldEnd();
  }
  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {
    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 4);
    output.writeString(this.dashboard_owner);
    output.writeFieldEnd();
  }
  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 5);
    output.writeString(this.dashboard_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 6);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 7);
    output.writeString(this.dashboard_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_replace_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_replace_dashboard_result.prototype = {};
OmniSci_replace_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_replace_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_replace_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_delete_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
  }
};
OmniSci_delete_dashboard_args.prototype = {};
OmniSci_delete_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_delete_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_delete_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_delete_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_delete_dashboard_result.prototype = {};
OmniSci_delete_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_delete_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_delete_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

<<<<<<< HEAD
<<<<<<< HEAD
var OmniSci_share_dashboards_args = function(args) {
=======
var MapD_share_dashboard_args = function(args) {
>>>>>>> Update Thrift
=======
var OmniSci_share_dashboard_args = function(args) {
>>>>>>> Update Thrift
  this.session = null;
  this.dashboard_ids = null;
  this.groups = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new ttypes.TDashboardPermissions(args.permissions);
    }
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
OmniSci_share_dashboards_args.prototype = {};
OmniSci_share_dashboards_args.prototype.read = function(input) {
=======
MapD_share_dashboard_args.prototype = {};
MapD_share_dashboard_args.prototype.read = function(input) {
>>>>>>> Update Thrift
=======
OmniSci_share_dashboard_args.prototype = {};
OmniSci_share_dashboard_args.prototype.read = function(input) {
>>>>>>> Update Thrift
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.dashboard_ids = [];
        var _rtmp3263 = input.readListBegin();
        var _size262 = _rtmp3263.size || 0;
        for (var _i264 = 0; _i264 < _size262; ++_i264) {
          var elem265 = null;
          elem265 = input.readI32();
          this.dashboard_ids.push(elem265);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.groups = [];
<<<<<<< HEAD
        var _rtmp3267 = input.readListBegin();
        var _size266 = _rtmp3267.size || 0;
        for (var _i268 = 0; _i268 < _size266; ++_i268) {
          var elem269 = null;
          elem269 = input.readString();
          this.groups.push(elem269);
=======
        var _rtmp3255 = input.readListBegin();
        var _size254 = _rtmp3255.size || 0;
        for (var _i256 = 0; _i256 < _size254; ++_i256) {
          var elem257 = null;
          elem257 = input.readString();
          this.groups.push(elem257);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
<<<<<<< HEAD
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new ttypes.TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_share_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_share_dashboards_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
    for (var iter270 in this.dashboard_ids) {
      if (this.dashboard_ids.hasOwnProperty(iter270)) {
        iter270 = this.dashboard_ids[iter270];
        output.writeI32(iter270);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter271 in this.groups) {
      if (this.groups.hasOwnProperty(iter271)) {
        iter271 = this.groups[iter271];
        output.writeString(iter271);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 4);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_share_dashboards_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_share_dashboards_result.prototype = {};
OmniSci_share_dashboards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_share_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_share_dashboards_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_delete_dashboards_args = function(args) {
  this.session = null;
  this.dashboard_ids = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
    }
  }
};
OmniSci_delete_dashboards_args.prototype = {};
OmniSci_delete_dashboards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.dashboard_ids = [];
        var _rtmp3273 = input.readListBegin();
        var _size272 = _rtmp3273.size || 0;
        for (var _i274 = 0; _i274 < _size272; ++_i274) {
          var elem275 = null;
          elem275 = input.readI32();
          this.dashboard_ids.push(elem275);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_delete_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_delete_dashboards_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
    for (var iter276 in this.dashboard_ids) {
      if (this.dashboard_ids.hasOwnProperty(iter276)) {
        iter276 = this.dashboard_ids[iter276];
        output.writeI32(iter276);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_delete_dashboards_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_delete_dashboards_result.prototype = {};
OmniSci_delete_dashboards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_delete_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_delete_dashboards_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_share_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.groups = null;
  this.objects = null;
  this.permissions = null;
  this.grant_role = false;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new ttypes.TDashboardPermissions(args.permissions);
    }
    if (args.grant_role !== undefined && args.grant_role !== null) {
      this.grant_role = args.grant_role;
    }
  }
};
OmniSci_share_dashboard_args.prototype = {};
OmniSci_share_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size398 = 0;
        var _rtmp3402;
        this.groups = [];
<<<<<<< HEAD
        var _rtmp3278 = input.readListBegin();
        var _size277 = _rtmp3278.size || 0;
        for (var _i279 = 0; _i279 < _size277; ++_i279) {
          var elem280 = null;
          elem280 = input.readString();
          this.groups.push(elem280);
=======
        var _etype401 = 0;
        _rtmp3402 = input.readListBegin();
        _etype401 = _rtmp3402.etype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var elem404 = null;
          elem404 = input.readString();
          this.groups.push(elem404);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size405 = 0;
        var _rtmp3409;
        this.objects = [];
<<<<<<< HEAD
        var _rtmp3282 = input.readListBegin();
        var _size281 = _rtmp3282.size || 0;
        for (var _i283 = 0; _i283 < _size281; ++_i283) {
          var elem284 = null;
          elem284 = input.readString();
          this.objects.push(elem284);
=======
        var _etype408 = 0;
        _rtmp3409 = input.readListBegin();
        _etype408 = _rtmp3409.etype;
        _size405 = _rtmp3409.size;
        for (var _i410 = 0; _i410 < _size405; ++_i410)
        {
          var elem411 = null;
          elem411 = input.readString();
          this.objects.push(elem411);
>>>>>>> Update Thrift
=======
      if (ftype == Thrift.Type.LIST) {
        this.objects = [];
        var _rtmp3259 = input.readListBegin();
        var _size258 = _rtmp3259.size || 0;
        for (var _i260 = 0; _i260 < _size258; ++_i260) {
          var elem261 = null;
          elem261 = input.readString();
          this.objects.push(elem261);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new ttypes.TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.grant_role = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_share_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_share_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter285 in this.groups) {
      if (this.groups.hasOwnProperty(iter285)) {
        iter285 = this.groups[iter285];
        output.writeString(iter285);
=======
    for (var iter412 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter412))
      {
        iter412 = this.groups[iter412];
        output.writeString(iter412);
>>>>>>> Update Thrift
=======
    for (var iter262 in this.groups) {
      if (this.groups.hasOwnProperty(iter262)) {
        iter262 = this.groups[iter262];
        output.writeString(iter262);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.objects.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter286 in this.objects) {
      if (this.objects.hasOwnProperty(iter286)) {
        iter286 = this.objects[iter286];
        output.writeString(iter286);
=======
    for (var iter413 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter413))
      {
        iter413 = this.objects[iter413];
        output.writeString(iter413);
>>>>>>> Update Thrift
=======
    for (var iter263 in this.objects) {
      if (this.objects.hasOwnProperty(iter263)) {
        iter263 = this.objects[iter263];
        output.writeString(iter263);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  if (this.grant_role !== null && this.grant_role !== undefined) {
    output.writeFieldBegin('grant_role', Thrift.Type.BOOL, 6);
    output.writeBool(this.grant_role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_share_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_share_dashboard_result.prototype = {};
OmniSci_share_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
<<<<<<< HEAD
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_share_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_share_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

<<<<<<< HEAD
var OmniSci_unshare_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.groups = null;
  this.objects = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new ttypes.TDashboardPermissions(args.permissions);
    }
  }
};
OmniSci_unshare_dashboard_args.prototype = {};
OmniSci_unshare_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.groups = [];
        var _rtmp3288 = input.readListBegin();
        var _size287 = _rtmp3288.size || 0;
        for (var _i289 = 0; _i289 < _size287; ++_i289) {
          var elem290 = null;
          elem290 = input.readString();
          this.groups.push(elem290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.objects = [];
        var _rtmp3292 = input.readListBegin();
        var _size291 = _rtmp3292.size || 0;
        for (var _i293 = 0; _i293 < _size291; ++_i293) {
          var elem294 = null;
          elem294 = input.readString();
          this.objects.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new ttypes.TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_unshare_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter295 in this.groups) {
      if (this.groups.hasOwnProperty(iter295)) {
        iter295 = this.groups[iter295];
        output.writeString(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.objects.length);
    for (var iter296 in this.objects) {
      if (this.objects.hasOwnProperty(iter296)) {
        iter296 = this.objects[iter296];
        output.writeString(iter296);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_unshare_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_unshare_dashboard_result.prototype = {};
OmniSci_unshare_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
=======
>>>>>>> Update Thrift
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

<<<<<<< HEAD
OmniSci_unshare_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboard_result');
=======
OmniSci_share_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_share_dashboard_result');
>>>>>>> Update Thrift
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

<<<<<<< HEAD
var OmniSci_unshare_dashboards_args = function(args) {
=======
var MapD_unshare_dashboard_args = function(args) {
>>>>>>> Update Thrift
=======
var OmniSci_unshare_dashboard_args = function(args) {
>>>>>>> Update Thrift
  this.session = null;
  this.dashboard_ids = null;
  this.groups = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new ttypes.TDashboardPermissions(args.permissions);
    }
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
OmniSci_unshare_dashboards_args.prototype = {};
OmniSci_unshare_dashboards_args.prototype.read = function(input) {
=======
MapD_unshare_dashboard_args.prototype = {};
MapD_unshare_dashboard_args.prototype.read = function(input) {
>>>>>>> Update Thrift
=======
OmniSci_unshare_dashboard_args.prototype = {};
OmniSci_unshare_dashboard_args.prototype.read = function(input) {
>>>>>>> Update Thrift
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
<<<<<<< HEAD
<<<<<<< HEAD
        this.dashboard_ids = [];
        var _rtmp3298 = input.readListBegin();
        var _size297 = _rtmp3298.size || 0;
        for (var _i299 = 0; _i299 < _size297; ++_i299) {
          var elem300 = null;
          elem300 = input.readI32();
          this.dashboard_ids.push(elem300);
=======
        var _size414 = 0;
        var _rtmp3418;
        this.groups = [];
        var _etype417 = 0;
        _rtmp3418 = input.readListBegin();
        _etype417 = _rtmp3418.etype;
        _size414 = _rtmp3418.size;
        for (var _i419 = 0; _i419 < _size414; ++_i419)
        {
          var elem420 = null;
          elem420 = input.readString();
          this.groups.push(elem420);
>>>>>>> Update Thrift
=======
        this.groups = [];
        var _rtmp3265 = input.readListBegin();
        var _size264 = _rtmp3265.size || 0;
        for (var _i266 = 0; _i266 < _size264; ++_i266) {
          var elem267 = null;
          elem267 = input.readString();
          this.groups.push(elem267);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
<<<<<<< HEAD
<<<<<<< HEAD
        this.groups = [];
        var _rtmp3302 = input.readListBegin();
        var _size301 = _rtmp3302.size || 0;
        for (var _i303 = 0; _i303 < _size301; ++_i303) {
          var elem304 = null;
          elem304 = input.readString();
          this.groups.push(elem304);
=======
        var _size421 = 0;
        var _rtmp3425;
        this.objects = [];
        var _etype424 = 0;
        _rtmp3425 = input.readListBegin();
        _etype424 = _rtmp3425.etype;
        _size421 = _rtmp3425.size;
        for (var _i426 = 0; _i426 < _size421; ++_i426)
        {
          var elem427 = null;
          elem427 = input.readString();
          this.objects.push(elem427);
>>>>>>> Update Thrift
=======
        this.objects = [];
        var _rtmp3269 = input.readListBegin();
        var _size268 = _rtmp3269.size || 0;
        for (var _i270 = 0; _i270 < _size268; ++_i270) {
          var elem271 = null;
          elem271 = input.readString();
          this.objects.push(elem271);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new ttypes.TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

<<<<<<< HEAD
<<<<<<< HEAD
OmniSci_unshare_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboards_args');
=======
MapD_unshare_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_unshare_dashboard_args');
>>>>>>> Update Thrift
=======
OmniSci_unshare_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboard_args');
>>>>>>> Update Thrift
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
<<<<<<< HEAD
  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
    for (var iter305 in this.dashboard_ids) {
      if (this.dashboard_ids.hasOwnProperty(iter305)) {
        iter305 = this.dashboard_ids[iter305];
        output.writeI32(iter305);
=======
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
<<<<<<< HEAD
    for (var iter428 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter428))
      {
        iter428 = this.groups[iter428];
        output.writeString(iter428);
>>>>>>> Update Thrift
=======
    for (var iter272 in this.groups) {
      if (this.groups.hasOwnProperty(iter272)) {
        iter272 = this.groups[iter272];
        output.writeString(iter272);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
<<<<<<< HEAD
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter306 in this.groups) {
      if (this.groups.hasOwnProperty(iter306)) {
        iter306 = this.groups[iter306];
        output.writeString(iter306);
=======
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.objects.length);
<<<<<<< HEAD
    for (var iter429 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter429))
      {
        iter429 = this.objects[iter429];
        output.writeString(iter429);
>>>>>>> Update Thrift
=======
    for (var iter273 in this.objects) {
      if (this.objects.hasOwnProperty(iter273)) {
        iter273 = this.objects[iter273];
        output.writeString(iter273);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 4);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

<<<<<<< HEAD
<<<<<<< HEAD
var OmniSci_unshare_dashboards_result = function(args) {
=======
var MapD_unshare_dashboard_result = function(args) {
>>>>>>> Update Thrift
=======
var OmniSci_unshare_dashboard_result = function(args) {
>>>>>>> Update Thrift
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
OmniSci_unshare_dashboards_result.prototype = {};
OmniSci_unshare_dashboards_result.prototype.read = function(input) {
=======
MapD_unshare_dashboard_result.prototype = {};
MapD_unshare_dashboard_result.prototype.read = function(input) {
>>>>>>> Update Thrift
=======
OmniSci_unshare_dashboard_result.prototype = {};
OmniSci_unshare_dashboard_result.prototype.read = function(input) {
>>>>>>> Update Thrift
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

<<<<<<< HEAD
<<<<<<< HEAD
OmniSci_unshare_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboards_result');
=======
MapD_unshare_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_unshare_dashboard_result');
>>>>>>> Update Thrift
=======
OmniSci_unshare_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboard_result');
>>>>>>> Update Thrift
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_dashboard_grantees_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
  }
};
OmniSci_get_dashboard_grantees_args.prototype = {};
OmniSci_get_dashboard_grantees_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboard_grantees_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboard_grantees_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_dashboard_grantees_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDashboardGrantees]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_dashboard_grantees_result.prototype = {};
OmniSci_get_dashboard_grantees_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3308 = input.readListBegin();
        var _size307 = _rtmp3308.size || 0;
        for (var _i309 = 0; _i309 < _size307; ++_i309) {
          var elem310 = null;
          elem310 = new ttypes.TDashboardGrantees();
          elem310.read(input);
          this.success.push(elem310);
=======
        var _etype433 = 0;
        _rtmp3434 = input.readListBegin();
        _etype433 = _rtmp3434.etype;
        _size430 = _rtmp3434.size;
        for (var _i435 = 0; _i435 < _size430; ++_i435)
        {
          var elem436 = null;
          elem436 = new ttypes.TDashboardGrantees();
          elem436.read(input);
          this.success.push(elem436);
>>>>>>> Update Thrift
=======
        var _rtmp3275 = input.readListBegin();
        var _size274 = _rtmp3275.size || 0;
        for (var _i276 = 0; _i276 < _size274; ++_i276) {
          var elem277 = null;
          elem277 = new ttypes.TDashboardGrantees();
          elem277.read(input);
          this.success.push(elem277);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboard_grantees_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboard_grantees_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter311 in this.success) {
      if (this.success.hasOwnProperty(iter311)) {
        iter311 = this.success[iter311];
        iter311.write(output);
=======
    for (var iter437 in this.success)
    {
      if (this.success.hasOwnProperty(iter437))
      {
        iter437 = this.success[iter437];
        iter437.write(output);
>>>>>>> Update Thrift
=======
    for (var iter278 in this.success) {
      if (this.success.hasOwnProperty(iter278)) {
        iter278 = this.success[iter278];
        iter278.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_link_view_args = function(args) {
  this.session = null;
  this.link = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
  }
};
OmniSci_get_link_view_args.prototype = {};
OmniSci_get_link_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_link_view_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_link_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 2);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_link_view_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_link_view_result.prototype = {};
OmniSci_get_link_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_link_view_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_link_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_create_link_args = function(args) {
  this.session = null;
  this.view_state = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
OmniSci_create_link_args.prototype = {};
OmniSci_create_link_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_link_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_link_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_create_link_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_create_link_result.prototype = {};
OmniSci_create_link_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_link_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_link_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_load_table_binary_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  this.column_names = [];
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
    }
    if (args.column_names !== undefined && args.column_names !== null) {
      this.column_names = Thrift.copyList(args.column_names, [null]);
    }
  }
};
OmniSci_load_table_binary_args.prototype = {};
OmniSci_load_table_binary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3313 = input.readListBegin();
        var _size312 = _rtmp3313.size || 0;
        for (var _i314 = 0; _i314 < _size312; ++_i314) {
          var elem315 = null;
          elem315 = new ttypes.TRow();
          elem315.read(input);
          this.rows.push(elem315);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.column_names = [];
        var _rtmp3317 = input.readListBegin();
        var _size316 = _rtmp3317.size || 0;
        for (var _i318 = 0; _i318 < _size316; ++_i318) {
          var elem319 = null;
          elem319 = input.readString();
          this.column_names.push(elem319);
=======
        var _etype441 = 0;
        _rtmp3442 = input.readListBegin();
        _etype441 = _rtmp3442.etype;
        _size438 = _rtmp3442.size;
        for (var _i443 = 0; _i443 < _size438; ++_i443)
        {
          var elem444 = null;
          elem444 = new ttypes.TRow();
          elem444.read(input);
          this.rows.push(elem444);
>>>>>>> Update Thrift
=======
        var _rtmp3280 = input.readListBegin();
        var _size279 = _rtmp3280.size || 0;
        for (var _i281 = 0; _i281 < _size279; ++_i281) {
          var elem282 = null;
          elem282 = new ttypes.TRow();
          elem282.read(input);
          this.rows.push(elem282);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter320 in this.rows) {
      if (this.rows.hasOwnProperty(iter320)) {
        iter320 = this.rows[iter320];
        iter320.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_names !== null && this.column_names !== undefined) {
    output.writeFieldBegin('column_names', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
    for (var iter321 in this.column_names) {
      if (this.column_names.hasOwnProperty(iter321)) {
        iter321 = this.column_names[iter321];
        output.writeString(iter321);
=======
    for (var iter445 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter445))
      {
        iter445 = this.rows[iter445];
        iter445.write(output);
>>>>>>> Update Thrift
=======
    for (var iter283 in this.rows) {
      if (this.rows.hasOwnProperty(iter283)) {
        iter283 = this.rows[iter283];
        iter283.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_load_table_binary_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_load_table_binary_result.prototype = {};
OmniSci_load_table_binary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_load_table_binary_columnar_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.cols = null;
  this.column_names = [];
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [ttypes.TColumn]);
    }
    if (args.column_names !== undefined && args.column_names !== null) {
      this.column_names = Thrift.copyList(args.column_names, [null]);
    }
  }
};
OmniSci_load_table_binary_columnar_args.prototype = {};
OmniSci_load_table_binary_columnar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.cols = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3323 = input.readListBegin();
        var _size322 = _rtmp3323.size || 0;
        for (var _i324 = 0; _i324 < _size322; ++_i324) {
          var elem325 = null;
          elem325 = new ttypes.TColumn();
          elem325.read(input);
          this.cols.push(elem325);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.column_names = [];
        var _rtmp3327 = input.readListBegin();
        var _size326 = _rtmp3327.size || 0;
        for (var _i328 = 0; _i328 < _size326; ++_i328) {
          var elem329 = null;
          elem329 = input.readString();
          this.column_names.push(elem329);
=======
        var _etype449 = 0;
        _rtmp3450 = input.readListBegin();
        _etype449 = _rtmp3450.etype;
        _size446 = _rtmp3450.size;
        for (var _i451 = 0; _i451 < _size446; ++_i451)
        {
          var elem452 = null;
          elem452 = new ttypes.TColumn();
          elem452.read(input);
          this.cols.push(elem452);
>>>>>>> Update Thrift
=======
        var _rtmp3285 = input.readListBegin();
        var _size284 = _rtmp3285.size || 0;
        for (var _i286 = 0; _i286 < _size284; ++_i286) {
          var elem287 = null;
          elem287 = new ttypes.TColumn();
          elem287.read(input);
          this.cols.push(elem287);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_columnar_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_columnar_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter330 in this.cols) {
      if (this.cols.hasOwnProperty(iter330)) {
        iter330 = this.cols[iter330];
        iter330.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_names !== null && this.column_names !== undefined) {
    output.writeFieldBegin('column_names', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
    for (var iter331 in this.column_names) {
      if (this.column_names.hasOwnProperty(iter331)) {
        iter331 = this.column_names[iter331];
        output.writeString(iter331);
=======
    for (var iter453 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter453))
      {
        iter453 = this.cols[iter453];
        iter453.write(output);
>>>>>>> Update Thrift
=======
    for (var iter288 in this.cols) {
      if (this.cols.hasOwnProperty(iter288)) {
        iter288 = this.cols[iter288];
        iter288.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_load_table_binary_columnar_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_load_table_binary_columnar_result.prototype = {};
OmniSci_load_table_binary_columnar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_columnar_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_columnar_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_load_table_binary_arrow_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.arrow_stream = null;
  this.use_column_names = false;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.arrow_stream !== undefined && args.arrow_stream !== null) {
      this.arrow_stream = args.arrow_stream;
    }
    if (args.use_column_names !== undefined && args.use_column_names !== null) {
      this.use_column_names = args.use_column_names;
    }
  }
};
OmniSci_load_table_binary_arrow_args.prototype = {};
OmniSci_load_table_binary_arrow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.arrow_stream = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.use_column_names = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_arrow_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_arrow_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.arrow_stream !== null && this.arrow_stream !== undefined) {
    output.writeFieldBegin('arrow_stream', Thrift.Type.STRING, 3);
    output.writeBinary(this.arrow_stream);
    output.writeFieldEnd();
  }
  if (this.use_column_names !== null && this.use_column_names !== undefined) {
    output.writeFieldBegin('use_column_names', Thrift.Type.BOOL, 4);
    output.writeBool(this.use_column_names);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_load_table_binary_arrow_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_load_table_binary_arrow_result.prototype = {};
OmniSci_load_table_binary_arrow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_arrow_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_arrow_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_load_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  this.column_names = [];
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.TStringRow]);
    }
    if (args.column_names !== undefined && args.column_names !== null) {
      this.column_names = Thrift.copyList(args.column_names, [null]);
    }
  }
};
OmniSci_load_table_args.prototype = {};
OmniSci_load_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3333 = input.readListBegin();
        var _size332 = _rtmp3333.size || 0;
        for (var _i334 = 0; _i334 < _size332; ++_i334) {
          var elem335 = null;
          elem335 = new ttypes.TStringRow();
          elem335.read(input);
          this.rows.push(elem335);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.column_names = [];
        var _rtmp3337 = input.readListBegin();
        var _size336 = _rtmp3337.size || 0;
        for (var _i338 = 0; _i338 < _size336; ++_i338) {
          var elem339 = null;
          elem339 = input.readString();
          this.column_names.push(elem339);
=======
        var _etype457 = 0;
        _rtmp3458 = input.readListBegin();
        _etype457 = _rtmp3458.etype;
        _size454 = _rtmp3458.size;
        for (var _i459 = 0; _i459 < _size454; ++_i459)
        {
          var elem460 = null;
          elem460 = new ttypes.TStringRow();
          elem460.read(input);
          this.rows.push(elem460);
>>>>>>> Update Thrift
=======
        var _rtmp3290 = input.readListBegin();
        var _size289 = _rtmp3290.size || 0;
        for (var _i291 = 0; _i291 < _size289; ++_i291) {
          var elem292 = null;
          elem292 = new ttypes.TStringRow();
          elem292.read(input);
          this.rows.push(elem292);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter340 in this.rows) {
      if (this.rows.hasOwnProperty(iter340)) {
        iter340 = this.rows[iter340];
        iter340.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_names !== null && this.column_names !== undefined) {
    output.writeFieldBegin('column_names', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
    for (var iter341 in this.column_names) {
      if (this.column_names.hasOwnProperty(iter341)) {
        iter341 = this.column_names[iter341];
        output.writeString(iter341);
=======
    for (var iter461 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter461))
      {
        iter461 = this.rows[iter461];
        iter461.write(output);
>>>>>>> Update Thrift
=======
    for (var iter293 in this.rows) {
      if (this.rows.hasOwnProperty(iter293)) {
        iter293 = this.rows[iter293];
        iter293.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_load_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_load_table_result.prototype = {};
OmniSci_load_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_detect_column_types_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
OmniSci_detect_column_types_args.prototype = {};
OmniSci_detect_column_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_detect_column_types_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_detect_column_types_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_detect_column_types_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDetectResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_detect_column_types_result.prototype = {};
OmniSci_detect_column_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDetectResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_detect_column_types_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_detect_column_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_create_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.row_desc = null;
  this.file_type = 0;
  this.create_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
    }
    if (args.file_type !== undefined && args.file_type !== null) {
      this.file_type = args.file_type;
    }
    if (args.create_params !== undefined && args.create_params !== null) {
      this.create_params = new ttypes.TCreateParams(args.create_params);
    }
  }
};
OmniSci_create_table_args.prototype = {};
OmniSci_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.row_desc = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3343 = input.readListBegin();
        var _size342 = _rtmp3343.size || 0;
        for (var _i344 = 0; _i344 < _size342; ++_i344) {
          var elem345 = null;
          elem345 = new ttypes.TColumnType();
          elem345.read(input);
          this.row_desc.push(elem345);
=======
        var _etype465 = 0;
        _rtmp3466 = input.readListBegin();
        _etype465 = _rtmp3466.etype;
        _size462 = _rtmp3466.size;
        for (var _i467 = 0; _i467 < _size462; ++_i467)
        {
          var elem468 = null;
          elem468 = new ttypes.TColumnType();
          elem468.read(input);
          this.row_desc.push(elem468);
>>>>>>> Update Thrift
=======
        var _rtmp3295 = input.readListBegin();
        var _size294 = _rtmp3295.size || 0;
        for (var _i296 = 0; _i296 < _size294; ++_i296) {
          var elem297 = null;
          elem297 = new ttypes.TColumnType();
          elem297.read(input);
          this.row_desc.push(elem297);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.file_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.create_params = new ttypes.TCreateParams();
        this.create_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter346 in this.row_desc) {
      if (this.row_desc.hasOwnProperty(iter346)) {
        iter346 = this.row_desc[iter346];
        iter346.write(output);
=======
    for (var iter469 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter469))
      {
        iter469 = this.row_desc[iter469];
        iter469.write(output);
>>>>>>> Update Thrift
=======
    for (var iter298 in this.row_desc) {
      if (this.row_desc.hasOwnProperty(iter298)) {
        iter298 = this.row_desc[iter298];
        iter298.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.file_type !== null && this.file_type !== undefined) {
    output.writeFieldBegin('file_type', Thrift.Type.I32, 4);
    output.writeI32(this.file_type);
    output.writeFieldEnd();
  }
  if (this.create_params !== null && this.create_params !== undefined) {
    output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 5);
    this.create_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_create_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_create_table_result.prototype = {};
OmniSci_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_import_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
OmniSci_import_table_args.prototype = {};
OmniSci_import_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_table_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_import_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_import_table_result.prototype = {};
OmniSci_import_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_table_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_import_geo_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  this.row_desc = null;
  this.create_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
    }
    if (args.create_params !== undefined && args.create_params !== null) {
      this.create_params = new ttypes.TCreateParams(args.create_params);
    }
  }
};
OmniSci_import_geo_table_args.prototype = {};
OmniSci_import_geo_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.row_desc = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3348 = input.readListBegin();
        var _size347 = _rtmp3348.size || 0;
        for (var _i349 = 0; _i349 < _size347; ++_i349) {
          var elem350 = null;
          elem350 = new ttypes.TColumnType();
          elem350.read(input);
          this.row_desc.push(elem350);
=======
        var _etype473 = 0;
        _rtmp3474 = input.readListBegin();
        _etype473 = _rtmp3474.etype;
        _size470 = _rtmp3474.size;
        for (var _i475 = 0; _i475 < _size470; ++_i475)
        {
          var elem476 = null;
          elem476 = new ttypes.TColumnType();
          elem476.read(input);
          this.row_desc.push(elem476);
>>>>>>> Update Thrift
=======
        var _rtmp3300 = input.readListBegin();
        var _size299 = _rtmp3300.size || 0;
        for (var _i301 = 0; _i301 < _size299; ++_i301) {
          var elem302 = null;
          elem302 = new ttypes.TColumnType();
          elem302.read(input);
          this.row_desc.push(elem302);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.create_params = new ttypes.TCreateParams();
        this.create_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_geo_table_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_geo_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter351 in this.row_desc) {
      if (this.row_desc.hasOwnProperty(iter351)) {
        iter351 = this.row_desc[iter351];
        iter351.write(output);
=======
    for (var iter477 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter477))
      {
        iter477 = this.row_desc[iter477];
        iter477.write(output);
>>>>>>> Update Thrift
=======
    for (var iter303 in this.row_desc) {
      if (this.row_desc.hasOwnProperty(iter303)) {
        iter303 = this.row_desc[iter303];
        iter303.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.create_params !== null && this.create_params !== undefined) {
    output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 6);
    this.create_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_import_geo_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_import_geo_table_result.prototype = {};
OmniSci_import_geo_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_geo_table_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_geo_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_import_table_status_args = function(args) {
  this.session = null;
  this.import_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.import_id !== undefined && args.import_id !== null) {
      this.import_id = args.import_id;
    }
  }
};
OmniSci_import_table_status_args.prototype = {};
OmniSci_import_table_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.import_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_table_status_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_table_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.import_id !== null && this.import_id !== undefined) {
    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);
    output.writeString(this.import_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_import_table_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TImportStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_import_table_status_result.prototype = {};
OmniSci_import_table_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TImportStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_table_status_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_table_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_first_geo_file_in_archive_args = function(args) {
  this.session = null;
  this.archive_path = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.archive_path !== undefined && args.archive_path !== null) {
      this.archive_path = args.archive_path;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
OmniSci_get_first_geo_file_in_archive_args.prototype = {};
OmniSci_get_first_geo_file_in_archive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.archive_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_first_geo_file_in_archive_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.archive_path !== null && this.archive_path !== undefined) {
    output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);
    output.writeString(this.archive_path);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_first_geo_file_in_archive_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_first_geo_file_in_archive_result.prototype = {};
OmniSci_get_first_geo_file_in_archive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_first_geo_file_in_archive_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_all_files_in_archive_args = function(args) {
  this.session = null;
  this.archive_path = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.archive_path !== undefined && args.archive_path !== null) {
      this.archive_path = args.archive_path;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
OmniSci_get_all_files_in_archive_args.prototype = {};
OmniSci_get_all_files_in_archive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.archive_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_all_files_in_archive_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_all_files_in_archive_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.archive_path !== null && this.archive_path !== undefined) {
    output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);
    output.writeString(this.archive_path);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_all_files_in_archive_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
MapD_get_all_files_in_archive_result.prototype = {};
MapD_get_all_files_in_archive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size478 = 0;
        var _rtmp3482;
        this.success = [];
<<<<<<< HEAD
        var _rtmp3353 = input.readListBegin();
        var _size352 = _rtmp3353.size || 0;
        for (var _i354 = 0; _i354 < _size352; ++_i354) {
          var elem355 = null;
          elem355 = input.readString();
          this.success.push(elem355);
=======
        var _etype481 = 0;
        _rtmp3482 = input.readListBegin();
        _etype481 = _rtmp3482.etype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          var elem484 = null;
          elem484 = input.readString();
          this.success.push(elem484);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_all_files_in_archive_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_all_files_in_archive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
<<<<<<< HEAD
    for (var iter356 in this.success) {
      if (this.success.hasOwnProperty(iter356)) {
        iter356 = this.success[iter356];
        output.writeString(iter356);
=======
    for (var iter485 in this.success)
    {
      if (this.success.hasOwnProperty(iter485))
      {
        iter485 = this.success[iter485];
        output.writeString(iter485);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapD_get_layers_in_geo_file_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
MapD_get_layers_in_geo_file_args.prototype = {};
MapD_get_layers_in_geo_file_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_layers_in_geo_file_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_layers_in_geo_file_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

<<<<<<< HEAD
var OmniSci_get_layers_in_geo_file_result = function(args) {
=======
var OmniSci_get_all_files_in_archive_result = function(args) {
>>>>>>> Update Thrift
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TGeoFileLayerInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
<<<<<<< HEAD
OmniSci_get_layers_in_geo_file_result.prototype = {};
OmniSci_get_layers_in_geo_file_result.prototype.read = function(input) {
=======
OmniSci_get_all_files_in_archive_result.prototype = {};
OmniSci_get_all_files_in_archive_result.prototype.read = function(input) {
>>>>>>> Update Thrift
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
<<<<<<< HEAD
        var _rtmp3358 = input.readListBegin();
        var _size357 = _rtmp3358.size || 0;
        for (var _i359 = 0; _i359 < _size357; ++_i359) {
          var elem360 = null;
          elem360 = new ttypes.TGeoFileLayerInfo();
          elem360.read(input);
          this.success.push(elem360);
=======
        var _rtmp3305 = input.readListBegin();
        var _size304 = _rtmp3305.size || 0;
        for (var _i306 = 0; _i306 < _size304; ++_i306) {
          var elem307 = null;
          elem307 = input.readString();
          this.success.push(elem307);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

<<<<<<< HEAD
OmniSci_get_layers_in_geo_file_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_layers_in_geo_file_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter361 in this.success) {
      if (this.success.hasOwnProperty(iter361)) {
        iter361 = this.success[iter361];
        iter361.write(output);
=======
OmniSci_get_all_files_in_archive_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_all_files_in_archive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter308 in this.success) {
      if (this.success.hasOwnProperty(iter308)) {
        iter308 = this.success[iter308];
        output.writeString(iter308);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

<<<<<<< HEAD
var OmniSci_query_get_outer_fragment_count_args = function(args) {
=======
var OmniSci_get_layers_in_geo_file_args = function(args) {
>>>>>>> Update Thrift
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
<<<<<<< HEAD
OmniSci_query_get_outer_fragment_count_args.prototype = {};
OmniSci_query_get_outer_fragment_count_args.prototype.read = function(input) {
=======
OmniSci_get_layers_in_geo_file_args.prototype = {};
OmniSci_get_layers_in_geo_file_args.prototype.read = function(input) {
>>>>>>> Update Thrift
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

<<<<<<< HEAD
OmniSci_query_get_outer_fragment_count_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_query_get_outer_fragment_count_args');
=======
OmniSci_get_layers_in_geo_file_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_layers_in_geo_file_args');
>>>>>>> Update Thrift
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

<<<<<<< HEAD
<<<<<<< HEAD
var OmniSci_query_get_outer_fragment_count_result = function(args) {
=======
var MapD_get_layers_in_geo_file_result = function(args) {
>>>>>>> Update Thrift
=======
var OmniSci_get_layers_in_geo_file_result = function(args) {
>>>>>>> Update Thrift
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
OmniSci_query_get_outer_fragment_count_result.prototype = {};
OmniSci_query_get_outer_fragment_count_result.prototype.read = function(input) {
=======
MapD_get_layers_in_geo_file_result.prototype = {};
MapD_get_layers_in_geo_file_result.prototype.read = function(input) {
>>>>>>> Update Thrift
=======
OmniSci_get_layers_in_geo_file_result.prototype = {};
OmniSci_get_layers_in_geo_file_result.prototype.read = function(input) {
>>>>>>> Update Thrift
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
<<<<<<< HEAD
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
=======
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3310 = input.readListBegin();
        var _size309 = _rtmp3310.size || 0;
        for (var _i311 = 0; _i311 < _size309; ++_i311) {
          var elem312 = null;
          elem312 = new ttypes.TGeoFileLayerInfo();
          elem312.read(input);
          this.success.push(elem312);
        }
        input.readListEnd();
>>>>>>> Update Thrift
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

<<<<<<< HEAD
<<<<<<< HEAD
OmniSci_query_get_outer_fragment_count_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_query_get_outer_fragment_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
=======
MapD_get_layers_in_geo_file_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_layers_in_geo_file_result');
=======
OmniSci_get_layers_in_geo_file_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_layers_in_geo_file_result');
>>>>>>> Update Thrift
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter313 in this.success) {
      if (this.success.hasOwnProperty(iter313)) {
        iter313 = this.success[iter313];
        iter313.write(output);
      }
    }
    output.writeListEnd();
>>>>>>> Update Thrift
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_query_get_outer_fragment_count_args = function(args) {
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
OmniSci_query_get_outer_fragment_count_args.prototype = {};
OmniSci_query_get_outer_fragment_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_query_get_outer_fragment_count_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_query_get_outer_fragment_count_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_query_get_outer_fragment_count_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_query_get_outer_fragment_count_result.prototype = {};
OmniSci_query_get_outer_fragment_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_query_get_outer_fragment_count_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_query_get_outer_fragment_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_check_table_consistency_args = function(args) {
  this.session = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
OmniSci_check_table_consistency_args.prototype = {};
OmniSci_check_table_consistency_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_check_table_consistency_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_check_table_consistency_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_check_table_consistency_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TTableMeta(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_check_table_consistency_result.prototype = {};
OmniSci_check_table_consistency_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTableMeta();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_check_table_consistency_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_check_table_consistency_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_start_query_args = function(args) {
  this.leaf_session = null;
  this.parent_session = null;
  this.query_ra = null;
  this.just_explain = null;
  this.outer_fragment_indices = null;
  if (args) {
    if (args.leaf_session !== undefined && args.leaf_session !== null) {
      this.leaf_session = args.leaf_session;
    }
    if (args.parent_session !== undefined && args.parent_session !== null) {
      this.parent_session = args.parent_session;
    }
    if (args.query_ra !== undefined && args.query_ra !== null) {
      this.query_ra = args.query_ra;
    }
    if (args.just_explain !== undefined && args.just_explain !== null) {
      this.just_explain = args.just_explain;
    }
    if (args.outer_fragment_indices !== undefined && args.outer_fragment_indices !== null) {
      this.outer_fragment_indices = Thrift.copyList(args.outer_fragment_indices, [null]);
    }
  }
};
OmniSci_start_query_args.prototype = {};
OmniSci_start_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.leaf_session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parent_session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query_ra = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.just_explain = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.outer_fragment_indices = [];
<<<<<<< HEAD
        var _rtmp3363 = input.readListBegin();
        var _size362 = _rtmp3363.size || 0;
        for (var _i364 = 0; _i364 < _size362; ++_i364) {
          var elem365 = null;
          elem365 = input.readI64();
          this.outer_fragment_indices.push(elem365);
=======
        var _rtmp3315 = input.readListBegin();
        var _size314 = _rtmp3315.size || 0;
        for (var _i316 = 0; _i316 < _size314; ++_i316) {
          var elem317 = null;
          elem317 = input.readI64();
          this.outer_fragment_indices.push(elem317);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_query_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_query_args');
  if (this.leaf_session !== null && this.leaf_session !== undefined) {
    output.writeFieldBegin('leaf_session', Thrift.Type.STRING, 1);
    output.writeString(this.leaf_session);
    output.writeFieldEnd();
  }
  if (this.parent_session !== null && this.parent_session !== undefined) {
    output.writeFieldBegin('parent_session', Thrift.Type.STRING, 2);
    output.writeString(this.parent_session);
    output.writeFieldEnd();
  }
  if (this.query_ra !== null && this.query_ra !== undefined) {
    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 3);
    output.writeString(this.query_ra);
    output.writeFieldEnd();
  }
  if (this.just_explain !== null && this.just_explain !== undefined) {
    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 4);
    output.writeBool(this.just_explain);
    output.writeFieldEnd();
  }
  if (this.outer_fragment_indices !== null && this.outer_fragment_indices !== undefined) {
    output.writeFieldBegin('outer_fragment_indices', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.outer_fragment_indices.length);
<<<<<<< HEAD
    for (var iter366 in this.outer_fragment_indices) {
      if (this.outer_fragment_indices.hasOwnProperty(iter366)) {
        iter366 = this.outer_fragment_indices[iter366];
        output.writeI64(iter366);
=======
    for (var iter318 in this.outer_fragment_indices) {
      if (this.outer_fragment_indices.hasOwnProperty(iter318)) {
        iter318 = this.outer_fragment_indices[iter318];
        output.writeI64(iter318);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_start_query_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPendingQuery(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_start_query_result.prototype = {};
OmniSci_start_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPendingQuery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_query_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_execute_query_step_args = function(args) {
  this.pending_query = null;
  this.subquery_id = null;
  if (args) {
    if (args.pending_query !== undefined && args.pending_query !== null) {
      this.pending_query = new ttypes.TPendingQuery(args.pending_query);
    }
    if (args.subquery_id !== undefined && args.subquery_id !== null) {
      this.subquery_id = args.subquery_id;
    }
  }
};
OmniSci_execute_query_step_args.prototype = {};
OmniSci_execute_query_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending_query = new ttypes.TPendingQuery();
        this.pending_query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.subquery_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_execute_query_step_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_execute_query_step_args');
  if (this.pending_query !== null && this.pending_query !== undefined) {
    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);
    this.pending_query.write(output);
    output.writeFieldEnd();
  }
  if (this.subquery_id !== null && this.subquery_id !== undefined) {
    output.writeFieldBegin('subquery_id', Thrift.Type.I64, 2);
    output.writeI64(this.subquery_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_execute_query_step_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_execute_query_step_result.prototype = {};
OmniSci_execute_query_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_execute_query_step_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_execute_query_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_broadcast_serialized_rows_args = function(args) {
  this.serialized_rows = null;
  this.row_desc = null;
  this.query_id = null;
  this.subquery_id = null;
  this.is_final_subquery_result = null;
  if (args) {
    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
      this.serialized_rows = new serialized_result_set_ttypes.TSerializedRows(args.serialized_rows);
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
    }
    if (args.query_id !== undefined && args.query_id !== null) {
      this.query_id = args.query_id;
    }
    if (args.subquery_id !== undefined && args.subquery_id !== null) {
      this.subquery_id = args.subquery_id;
    }
    if (args.is_final_subquery_result !== undefined && args.is_final_subquery_result !== null) {
      this.is_final_subquery_result = args.is_final_subquery_result;
    }
  }
};
OmniSci_broadcast_serialized_rows_args.prototype = {};
OmniSci_broadcast_serialized_rows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serialized_rows = new serialized_result_set_ttypes.TSerializedRows();
        this.serialized_rows.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.row_desc = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3368 = input.readListBegin();
        var _size367 = _rtmp3368.size || 0;
        for (var _i369 = 0; _i369 < _size367; ++_i369) {
          var elem370 = null;
          elem370 = new ttypes.TColumnType();
          elem370.read(input);
          this.row_desc.push(elem370);
=======
        var _etype497 = 0;
        _rtmp3498 = input.readListBegin();
        _etype497 = _rtmp3498.etype;
        _size494 = _rtmp3498.size;
        for (var _i499 = 0; _i499 < _size494; ++_i499)
        {
          var elem500 = null;
          elem500 = new ttypes.TColumnType();
          elem500.read(input);
          this.row_desc.push(elem500);
>>>>>>> Update Thrift
=======
        var _rtmp3320 = input.readListBegin();
        var _size319 = _rtmp3320.size || 0;
        for (var _i321 = 0; _i321 < _size319; ++_i321) {
          var elem322 = null;
          elem322 = new ttypes.TColumnType();
          elem322.read(input);
          this.row_desc.push(elem322);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.query_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.subquery_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.is_final_subquery_result = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_broadcast_serialized_rows_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_broadcast_serialized_rows_args');
  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
    output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);
    this.serialized_rows.write(output);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter371 in this.row_desc) {
      if (this.row_desc.hasOwnProperty(iter371)) {
        iter371 = this.row_desc[iter371];
        iter371.write(output);
=======
    for (var iter501 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter501))
      {
        iter501 = this.row_desc[iter501];
        iter501.write(output);
>>>>>>> Update Thrift
=======
    for (var iter323 in this.row_desc) {
      if (this.row_desc.hasOwnProperty(iter323)) {
        iter323 = this.row_desc[iter323];
        iter323.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.query_id !== null && this.query_id !== undefined) {
    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);
    output.writeI64(this.query_id);
    output.writeFieldEnd();
  }
  if (this.subquery_id !== null && this.subquery_id !== undefined) {
    output.writeFieldBegin('subquery_id', Thrift.Type.I64, 4);
    output.writeI64(this.subquery_id);
    output.writeFieldEnd();
  }
  if (this.is_final_subquery_result !== null && this.is_final_subquery_result !== undefined) {
    output.writeFieldBegin('is_final_subquery_result', Thrift.Type.BOOL, 5);
    output.writeBool(this.is_final_subquery_result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_broadcast_serialized_rows_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_broadcast_serialized_rows_result.prototype = {};
OmniSci_broadcast_serialized_rows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_broadcast_serialized_rows_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_broadcast_serialized_rows_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_start_render_query_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.node_idx = null;
  this.vega_json = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.node_idx !== undefined && args.node_idx !== null) {
      this.node_idx = args.node_idx;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
  }
};
OmniSci_start_render_query_args.prototype = {};
OmniSci_start_render_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.node_idx = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_render_query_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_render_query_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.node_idx !== null && this.node_idx !== undefined) {
    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);
    output.writeI16(this.node_idx);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_start_render_query_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPendingRenderQuery(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_start_render_query_result.prototype = {};
OmniSci_start_render_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPendingRenderQuery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_render_query_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_render_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_execute_next_render_step_args = function(args) {
  this.pending_render = null;
  this.merged_data = null;
  if (args) {
    if (args.pending_render !== undefined && args.pending_render !== null) {
      this.pending_render = new ttypes.TPendingRenderQuery(args.pending_render);
    }
    if (args.merged_data !== undefined && args.merged_data !== null) {
      this.merged_data = Thrift.copyMap(args.merged_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, ttypes.TRenderDatum]);
    }
  }
};
OmniSci_execute_next_render_step_args.prototype = {};
OmniSci_execute_next_render_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending_render = new ttypes.TPendingRenderQuery();
        this.pending_render.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.merged_data = {};
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3373 = input.readMapBegin();
        var _size372 = _rtmp3373.size || 0;
        for (var _i374 = 0; _i374 < _size372; ++_i374) {
          var key375 = null;
          var val376 = null;
          key375 = input.readString();
          val376 = {};
          var _rtmp3378 = input.readMapBegin();
          var _size377 = _rtmp3378.size || 0;
          for (var _i379 = 0; _i379 < _size377; ++_i379) {
            var key380 = null;
            var val381 = null;
            key380 = input.readString();
            val381 = {};
            var _rtmp3383 = input.readMapBegin();
            var _size382 = _rtmp3383.size || 0;
            for (var _i384 = 0; _i384 < _size382; ++_i384) {
              var key385 = null;
              var val386 = null;
              key385 = input.readString();
              val386 = {};
              var _rtmp3388 = input.readMapBegin();
              var _size387 = _rtmp3388.size || 0;
              for (var _i389 = 0; _i389 < _size387; ++_i389) {
                var key390 = null;
                var val391 = null;
                key390 = input.readString();
                val391 = [];
                var _rtmp3393 = input.readListBegin();
                var _size392 = _rtmp3393.size || 0;
                for (var _i394 = 0; _i394 < _size392; ++_i394) {
                  var elem395 = null;
                  elem395 = new ttypes.TRenderDatum();
                  elem395.read(input);
                  val391.push(elem395);
                }
                input.readListEnd();
                val386[key390] = val391;
              }
              input.readMapEnd();
              val381[key385] = val386;
            }
            input.readMapEnd();
            val376[key380] = val381;
          }
          input.readMapEnd();
          this.merged_data[key375] = val376;
=======
        var _ktype503 = 0;
        var _vtype504 = 0;
        _rtmp3506 = input.readMapBegin();
        _ktype503 = _rtmp3506.ktype;
        _vtype504 = _rtmp3506.vtype;
        _size502 = _rtmp3506.size;
        for (var _i507 = 0; _i507 < _size502; ++_i507)
        {
          var key508 = null;
          var val509 = null;
          key508 = input.readString();
          var _size510 = 0;
          var _rtmp3514;
          val509 = {};
          var _ktype511 = 0;
          var _vtype512 = 0;
          _rtmp3514 = input.readMapBegin();
          _ktype511 = _rtmp3514.ktype;
          _vtype512 = _rtmp3514.vtype;
          _size510 = _rtmp3514.size;
          for (var _i515 = 0; _i515 < _size510; ++_i515)
          {
            var key516 = null;
            var val517 = null;
            key516 = input.readString();
            var _size518 = 0;
            var _rtmp3522;
            val517 = {};
            var _ktype519 = 0;
            var _vtype520 = 0;
            _rtmp3522 = input.readMapBegin();
            _ktype519 = _rtmp3522.ktype;
            _vtype520 = _rtmp3522.vtype;
            _size518 = _rtmp3522.size;
            for (var _i523 = 0; _i523 < _size518; ++_i523)
            {
              var key524 = null;
              var val525 = null;
              key524 = input.readString();
              var _size526 = 0;
              var _rtmp3530;
              val525 = {};
              var _ktype527 = 0;
              var _vtype528 = 0;
              _rtmp3530 = input.readMapBegin();
              _ktype527 = _rtmp3530.ktype;
              _vtype528 = _rtmp3530.vtype;
              _size526 = _rtmp3530.size;
              for (var _i531 = 0; _i531 < _size526; ++_i531)
              {
                var key532 = null;
                var val533 = null;
                key532 = input.readString();
                var _size534 = 0;
                var _rtmp3538;
                val533 = [];
                var _etype537 = 0;
                _rtmp3538 = input.readListBegin();
                _etype537 = _rtmp3538.etype;
                _size534 = _rtmp3538.size;
                for (var _i539 = 0; _i539 < _size534; ++_i539)
                {
                  var elem540 = null;
                  elem540 = new ttypes.TRenderDatum();
                  elem540.read(input);
                  val533.push(elem540);
=======
        var _rtmp3325 = input.readMapBegin();
        var _size324 = _rtmp3325.size || 0;
        for (var _i326 = 0; _i326 < _size324; ++_i326) {
          var key327 = null;
          var val328 = null;
          key327 = input.readString();
          val328 = {};
          var _rtmp3330 = input.readMapBegin();
          var _size329 = _rtmp3330.size || 0;
          for (var _i331 = 0; _i331 < _size329; ++_i331) {
            var key332 = null;
            var val333 = null;
            key332 = input.readString();
            val333 = {};
            var _rtmp3335 = input.readMapBegin();
            var _size334 = _rtmp3335.size || 0;
            for (var _i336 = 0; _i336 < _size334; ++_i336) {
              var key337 = null;
              var val338 = null;
              key337 = input.readString();
              val338 = {};
              var _rtmp3340 = input.readMapBegin();
              var _size339 = _rtmp3340.size || 0;
              for (var _i341 = 0; _i341 < _size339; ++_i341) {
                var key342 = null;
                var val343 = null;
                key342 = input.readString();
                val343 = [];
                var _rtmp3345 = input.readListBegin();
                var _size344 = _rtmp3345.size || 0;
                for (var _i346 = 0; _i346 < _size344; ++_i346) {
                  var elem347 = null;
                  elem347 = new ttypes.TRenderDatum();
                  elem347.read(input);
                  val343.push(elem347);
>>>>>>> Update Thrift
                }
                input.readListEnd();
                val338[key342] = val343;
              }
              input.readMapEnd();
              val333[key337] = val338;
            }
            input.readMapEnd();
            val328[key332] = val333;
          }
          input.readMapEnd();
<<<<<<< HEAD
          this.merged_data[key508] = val509;
>>>>>>> Update Thrift
=======
          this.merged_data[key327] = val328;
>>>>>>> Update Thrift
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_execute_next_render_step_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_execute_next_render_step_args');
  if (this.pending_render !== null && this.pending_render !== undefined) {
    output.writeFieldBegin('pending_render', Thrift.Type.STRUCT, 1);
    this.pending_render.write(output);
    output.writeFieldEnd();
  }
  if (this.merged_data !== null && this.merged_data !== undefined) {
    output.writeFieldBegin('merged_data', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merged_data));
<<<<<<< HEAD
<<<<<<< HEAD
    for (var kiter396 in this.merged_data) {
      if (this.merged_data.hasOwnProperty(kiter396)) {
        var viter397 = this.merged_data[kiter396];
        output.writeString(kiter396);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter397));
        for (var kiter398 in viter397) {
          if (viter397.hasOwnProperty(kiter398)) {
            var viter399 = viter397[kiter398];
            output.writeString(kiter398);
            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter399));
            for (var kiter400 in viter399) {
              if (viter399.hasOwnProperty(kiter400)) {
                var viter401 = viter399[kiter400];
                output.writeString(kiter400);
                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter401));
                for (var kiter402 in viter401) {
                  if (viter401.hasOwnProperty(kiter402)) {
                    var viter403 = viter401[kiter402];
                    output.writeString(kiter402);
                    output.writeListBegin(Thrift.Type.STRUCT, viter403.length);
                    for (var iter404 in viter403) {
                      if (viter403.hasOwnProperty(iter404)) {
                        iter404 = viter403[iter404];
                        iter404.write(output);
=======
    for (var kiter541 in this.merged_data)
    {
      if (this.merged_data.hasOwnProperty(kiter541))
      {
        var viter542 = this.merged_data[kiter541];
        output.writeString(kiter541);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter542));
        for (var kiter543 in viter542)
        {
          if (viter542.hasOwnProperty(kiter543))
          {
            var viter544 = viter542[kiter543];
            output.writeString(kiter543);
            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter544));
            for (var kiter545 in viter544)
            {
              if (viter544.hasOwnProperty(kiter545))
              {
                var viter546 = viter544[kiter545];
                output.writeString(kiter545);
                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter546));
                for (var kiter547 in viter546)
                {
                  if (viter546.hasOwnProperty(kiter547))
                  {
                    var viter548 = viter546[kiter547];
                    output.writeString(kiter547);
                    output.writeListBegin(Thrift.Type.STRUCT, viter548.length);
                    for (var iter549 in viter548)
                    {
                      if (viter548.hasOwnProperty(iter549))
                      {
                        iter549 = viter548[iter549];
                        iter549.write(output);
>>>>>>> Update Thrift
=======
    for (var kiter348 in this.merged_data) {
      if (this.merged_data.hasOwnProperty(kiter348)) {
        var viter349 = this.merged_data[kiter348];
        output.writeString(kiter348);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter349));
        for (var kiter350 in viter349) {
          if (viter349.hasOwnProperty(kiter350)) {
            var viter351 = viter349[kiter350];
            output.writeString(kiter350);
            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter351));
            for (var kiter352 in viter351) {
              if (viter351.hasOwnProperty(kiter352)) {
                var viter353 = viter351[kiter352];
                output.writeString(kiter352);
                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter353));
                for (var kiter354 in viter353) {
                  if (viter353.hasOwnProperty(kiter354)) {
                    var viter355 = viter353[kiter354];
                    output.writeString(kiter354);
                    output.writeListBegin(Thrift.Type.STRUCT, viter355.length);
                    for (var iter356 in viter355) {
                      if (viter355.hasOwnProperty(iter356)) {
                        iter356 = viter355[iter356];
                        iter356.write(output);
>>>>>>> Update Thrift
                      }
                    }
                    output.writeListEnd();
                  }
                }
                output.writeMapEnd();
              }
            }
            output.writeMapEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_execute_next_render_step_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TRenderStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_execute_next_render_step_result.prototype = {};
OmniSci_execute_next_render_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRenderStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_execute_next_render_step_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_execute_next_render_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_insert_data_args = function(args) {
  this.session = null;
  this.insert_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.insert_data !== undefined && args.insert_data !== null) {
      this.insert_data = new ttypes.TInsertData(args.insert_data);
    }
  }
};
OmniSci_insert_data_args.prototype = {};
OmniSci_insert_data_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.insert_data = new ttypes.TInsertData();
        this.insert_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_insert_data_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_insert_data_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.insert_data !== null && this.insert_data !== undefined) {
    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);
    this.insert_data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_insert_data_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_insert_data_result.prototype = {};
OmniSci_insert_data_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_insert_data_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_insert_data_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_checkpoint_args = function(args) {
  this.session = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
OmniSci_checkpoint_args.prototype = {};
OmniSci_checkpoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_checkpoint_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_checkpoint_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_checkpoint_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_checkpoint_result.prototype = {};
OmniSci_checkpoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_checkpoint_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_checkpoint_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_roles_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_roles_args.prototype = {};
OmniSci_get_roles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_roles_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_roles_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_roles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_roles_result.prototype = {};
OmniSci_get_roles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3406 = input.readListBegin();
        var _size405 = _rtmp3406.size || 0;
        for (var _i407 = 0; _i407 < _size405; ++_i407) {
          var elem408 = null;
          elem408 = input.readString();
          this.success.push(elem408);
=======
        var _etype553 = 0;
        _rtmp3554 = input.readListBegin();
        _etype553 = _rtmp3554.etype;
        _size550 = _rtmp3554.size;
        for (var _i555 = 0; _i555 < _size550; ++_i555)
        {
          var elem556 = null;
          elem556 = input.readString();
          this.success.push(elem556);
>>>>>>> Update Thrift
=======
        var _rtmp3358 = input.readListBegin();
        var _size357 = _rtmp3358.size || 0;
        for (var _i359 = 0; _i359 < _size357; ++_i359) {
          var elem360 = null;
          elem360 = input.readString();
          this.success.push(elem360);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_roles_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_roles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter409 in this.success) {
      if (this.success.hasOwnProperty(iter409)) {
        iter409 = this.success[iter409];
        output.writeString(iter409);
=======
    for (var iter557 in this.success)
    {
      if (this.success.hasOwnProperty(iter557))
      {
        iter557 = this.success[iter557];
        output.writeString(iter557);
>>>>>>> Update Thrift
=======
    for (var iter361 in this.success) {
      if (this.success.hasOwnProperty(iter361)) {
        iter361 = this.success[iter361];
        output.writeString(iter361);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_db_objects_for_grantee_args = function(args) {
  this.session = null;
  this.roleName = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
  }
};
OmniSci_get_db_objects_for_grantee_args.prototype = {};
OmniSci_get_db_objects_for_grantee_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_db_objects_for_grantee_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_db_objects_for_grantee_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_db_objects_for_grantee_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDBObject]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_db_objects_for_grantee_result.prototype = {};
OmniSci_get_db_objects_for_grantee_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3411 = input.readListBegin();
        var _size410 = _rtmp3411.size || 0;
        for (var _i412 = 0; _i412 < _size410; ++_i412) {
          var elem413 = null;
          elem413 = new ttypes.TDBObject();
          elem413.read(input);
          this.success.push(elem413);
=======
        var _etype561 = 0;
        _rtmp3562 = input.readListBegin();
        _etype561 = _rtmp3562.etype;
        _size558 = _rtmp3562.size;
        for (var _i563 = 0; _i563 < _size558; ++_i563)
        {
          var elem564 = null;
          elem564 = new ttypes.TDBObject();
          elem564.read(input);
          this.success.push(elem564);
>>>>>>> Update Thrift
=======
        var _rtmp3363 = input.readListBegin();
        var _size362 = _rtmp3363.size || 0;
        for (var _i364 = 0; _i364 < _size362; ++_i364) {
          var elem365 = null;
          elem365 = new ttypes.TDBObject();
          elem365.read(input);
          this.success.push(elem365);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_db_objects_for_grantee_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_db_objects_for_grantee_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter414 in this.success) {
      if (this.success.hasOwnProperty(iter414)) {
        iter414 = this.success[iter414];
        iter414.write(output);
=======
    for (var iter565 in this.success)
    {
      if (this.success.hasOwnProperty(iter565))
      {
        iter565 = this.success[iter565];
        iter565.write(output);
>>>>>>> Update Thrift
=======
    for (var iter366 in this.success) {
      if (this.success.hasOwnProperty(iter366)) {
        iter366 = this.success[iter366];
        iter366.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_db_object_privs_args = function(args) {
  this.session = null;
  this.objectName = null;
  this.type = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.objectName !== undefined && args.objectName !== null) {
      this.objectName = args.objectName;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
OmniSci_get_db_object_privs_args.prototype = {};
OmniSci_get_db_object_privs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_db_object_privs_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_db_object_privs_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.objectName !== null && this.objectName !== undefined) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 2);
    output.writeString(this.objectName);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_db_object_privs_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDBObject]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_db_object_privs_result.prototype = {};
OmniSci_get_db_object_privs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3416 = input.readListBegin();
        var _size415 = _rtmp3416.size || 0;
        for (var _i417 = 0; _i417 < _size415; ++_i417) {
          var elem418 = null;
          elem418 = new ttypes.TDBObject();
          elem418.read(input);
          this.success.push(elem418);
=======
        var _etype569 = 0;
        _rtmp3570 = input.readListBegin();
        _etype569 = _rtmp3570.etype;
        _size566 = _rtmp3570.size;
        for (var _i571 = 0; _i571 < _size566; ++_i571)
        {
          var elem572 = null;
          elem572 = new ttypes.TDBObject();
          elem572.read(input);
          this.success.push(elem572);
>>>>>>> Update Thrift
=======
        var _rtmp3368 = input.readListBegin();
        var _size367 = _rtmp3368.size || 0;
        for (var _i369 = 0; _i369 < _size367; ++_i369) {
          var elem370 = null;
          elem370 = new ttypes.TDBObject();
          elem370.read(input);
          this.success.push(elem370);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_db_object_privs_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_db_object_privs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter419 in this.success) {
      if (this.success.hasOwnProperty(iter419)) {
        iter419 = this.success[iter419];
        iter419.write(output);
=======
    for (var iter573 in this.success)
    {
      if (this.success.hasOwnProperty(iter573))
      {
        iter573 = this.success[iter573];
        iter573.write(output);
>>>>>>> Update Thrift
=======
    for (var iter371 in this.success) {
      if (this.success.hasOwnProperty(iter371)) {
        iter371 = this.success[iter371];
        iter371.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_all_roles_for_user_args = function(args) {
  this.session = null;
  this.userName = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
  }
};
OmniSci_get_all_roles_for_user_args.prototype = {};
OmniSci_get_all_roles_for_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_all_roles_for_user_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_all_roles_for_user_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_all_roles_for_user_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_all_roles_for_user_result.prototype = {};
OmniSci_get_all_roles_for_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3421 = input.readListBegin();
        var _size420 = _rtmp3421.size || 0;
        for (var _i422 = 0; _i422 < _size420; ++_i422) {
          var elem423 = null;
          elem423 = input.readString();
          this.success.push(elem423);
=======
        var _etype577 = 0;
        _rtmp3578 = input.readListBegin();
        _etype577 = _rtmp3578.etype;
        _size574 = _rtmp3578.size;
        for (var _i579 = 0; _i579 < _size574; ++_i579)
        {
          var elem580 = null;
          elem580 = input.readString();
          this.success.push(elem580);
>>>>>>> Update Thrift
=======
        var _rtmp3373 = input.readListBegin();
        var _size372 = _rtmp3373.size || 0;
        for (var _i374 = 0; _i374 < _size372; ++_i374) {
          var elem375 = null;
          elem375 = input.readString();
          this.success.push(elem375);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_all_roles_for_user_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_all_roles_for_user_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter424 in this.success) {
      if (this.success.hasOwnProperty(iter424)) {
        iter424 = this.success[iter424];
        output.writeString(iter424);
=======
    for (var iter581 in this.success)
    {
      if (this.success.hasOwnProperty(iter581))
      {
        iter581 = this.success[iter581];
        output.writeString(iter581);
>>>>>>> Update Thrift
=======
    for (var iter376 in this.success) {
      if (this.success.hasOwnProperty(iter376)) {
        iter376 = this.success[iter376];
        output.writeString(iter376);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_has_role_args = function(args) {
  this.session = null;
  this.granteeName = null;
  this.roleName = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.granteeName !== undefined && args.granteeName !== null) {
      this.granteeName = args.granteeName;
    }
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
  }
};
OmniSci_has_role_args.prototype = {};
OmniSci_has_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.granteeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_has_role_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_has_role_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.granteeName !== null && this.granteeName !== undefined) {
    output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);
    output.writeString(this.granteeName);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 3);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_has_role_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_has_role_result.prototype = {};
OmniSci_has_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_has_role_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_has_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_has_object_privilege_args = function(args) {
  this.session = null;
  this.granteeName = null;
  this.ObjectName = null;
  this.objectType = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.granteeName !== undefined && args.granteeName !== null) {
      this.granteeName = args.granteeName;
    }
    if (args.ObjectName !== undefined && args.ObjectName !== null) {
      this.ObjectName = args.ObjectName;
    }
    if (args.objectType !== undefined && args.objectType !== null) {
      this.objectType = args.objectType;
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new ttypes.TDBObjectPermissions(args.permissions);
    }
  }
};
OmniSci_has_object_privilege_args.prototype = {};
OmniSci_has_object_privilege_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.granteeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ObjectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.objectType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new ttypes.TDBObjectPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_has_object_privilege_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_has_object_privilege_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.granteeName !== null && this.granteeName !== undefined) {
    output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);
    output.writeString(this.granteeName);
    output.writeFieldEnd();
  }
  if (this.ObjectName !== null && this.ObjectName !== undefined) {
    output.writeFieldBegin('ObjectName', Thrift.Type.STRING, 3);
    output.writeString(this.ObjectName);
    output.writeFieldEnd();
  }
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.I32, 4);
    output.writeI32(this.objectType);
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_has_object_privilege_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_has_object_privilege_result.prototype = {};
OmniSci_has_object_privilege_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_has_object_privilege_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_has_object_privilege_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_license_key_args = function(args) {
  this.session = null;
  this.key = null;
  this.nonce = '';
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
OmniSci_set_license_key_args.prototype = {};
OmniSci_set_license_key_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_license_key_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_license_key_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 3);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_set_license_key_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TLicenseInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_set_license_key_result.prototype = {};
OmniSci_set_license_key_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TLicenseInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_license_key_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_license_key_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_license_claims_args = function(args) {
  this.session = null;
  this.nonce = '';
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
OmniSci_get_license_claims_args.prototype = {};
OmniSci_get_license_claims_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_license_claims_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_license_claims_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_license_claims_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TLicenseInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_license_claims_result.prototype = {};
OmniSci_get_license_claims_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TLicenseInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_license_claims_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_license_claims_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_device_parameters_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_device_parameters_args.prototype = {};
OmniSci_get_device_parameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_device_parameters_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_device_parameters_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_get_device_parameters_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_device_parameters_result.prototype = {};
OmniSci_get_device_parameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3426 = input.readMapBegin();
        var _size425 = _rtmp3426.size || 0;
        for (var _i427 = 0; _i427 < _size425; ++_i427) {
          var key428 = null;
          var val429 = null;
          key428 = input.readString();
          val429 = input.readString();
          this.success[key428] = val429;
=======
        var _ktype583 = 0;
        var _vtype584 = 0;
        _rtmp3586 = input.readMapBegin();
        _ktype583 = _rtmp3586.ktype;
        _vtype584 = _rtmp3586.vtype;
        _size582 = _rtmp3586.size;
        for (var _i587 = 0; _i587 < _size582; ++_i587)
        {
          var key588 = null;
          var val589 = null;
          key588 = input.readString();
          val589 = input.readString();
          this.success[key588] = val589;
>>>>>>> Update Thrift
=======
        var _rtmp3378 = input.readMapBegin();
        var _size377 = _rtmp3378.size || 0;
        for (var _i379 = 0; _i379 < _size377; ++_i379) {
          var key380 = null;
          var val381 = null;
          key380 = input.readString();
          val381 = input.readString();
          this.success[key380] = val381;
>>>>>>> Update Thrift
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_device_parameters_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_device_parameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
<<<<<<< HEAD
<<<<<<< HEAD
    for (var kiter430 in this.success) {
      if (this.success.hasOwnProperty(kiter430)) {
        var viter431 = this.success[kiter430];
        output.writeString(kiter430);
        output.writeString(viter431);
=======
    for (var kiter590 in this.success)
    {
      if (this.success.hasOwnProperty(kiter590))
      {
        var viter591 = this.success[kiter590];
        output.writeString(kiter590);
        output.writeString(viter591);
>>>>>>> Update Thrift
=======
    for (var kiter382 in this.success) {
      if (this.success.hasOwnProperty(kiter382)) {
        var viter383 = this.success[kiter382];
        output.writeString(kiter382);
        output.writeString(viter383);
>>>>>>> Update Thrift
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_register_runtime_extension_functions_args = function(args) {
  this.session = null;
  this.udfs = null;
  this.udtfs = null;
  this.device_ir_map = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.udfs !== undefined && args.udfs !== null) {
      this.udfs = Thrift.copyList(args.udfs, [extension_functions_ttypes.TUserDefinedFunction]);
    }
    if (args.udtfs !== undefined && args.udtfs !== null) {
      this.udtfs = Thrift.copyList(args.udtfs, [extension_functions_ttypes.TUserDefinedTableFunction]);
    }
    if (args.device_ir_map !== undefined && args.device_ir_map !== null) {
      this.device_ir_map = Thrift.copyMap(args.device_ir_map, [null]);
    }
  }
};
OmniSci_register_runtime_extension_functions_args.prototype = {};
OmniSci_register_runtime_extension_functions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.udfs = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3433 = input.readListBegin();
        var _size432 = _rtmp3433.size || 0;
        for (var _i434 = 0; _i434 < _size432; ++_i434) {
          var elem435 = null;
          elem435 = new extension_functions_ttypes.TUserDefinedFunction();
          elem435.read(input);
          this.udfs.push(elem435);
=======
        var _etype595 = 0;
        _rtmp3596 = input.readListBegin();
        _etype595 = _rtmp3596.etype;
        _size592 = _rtmp3596.size;
        for (var _i597 = 0; _i597 < _size592; ++_i597)
        {
          var elem598 = null;
          elem598 = new extension_functions_ttypes.TUserDefinedFunction();
          elem598.read(input);
          this.udfs.push(elem598);
>>>>>>> Update Thrift
=======
        var _rtmp3385 = input.readListBegin();
        var _size384 = _rtmp3385.size || 0;
        for (var _i386 = 0; _i386 < _size384; ++_i386) {
          var elem387 = null;
          elem387 = new extension_functions_ttypes.TUserDefinedFunction();
          elem387.read(input);
          this.udfs.push(elem387);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.udtfs = [];
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3437 = input.readListBegin();
        var _size436 = _rtmp3437.size || 0;
        for (var _i438 = 0; _i438 < _size436; ++_i438) {
          var elem439 = null;
          elem439 = new extension_functions_ttypes.TUserDefinedTableFunction();
          elem439.read(input);
          this.udtfs.push(elem439);
=======
        var _etype602 = 0;
        _rtmp3603 = input.readListBegin();
        _etype602 = _rtmp3603.etype;
        _size599 = _rtmp3603.size;
        for (var _i604 = 0; _i604 < _size599; ++_i604)
        {
          var elem605 = null;
          elem605 = new extension_functions_ttypes.TUserDefinedTableFunction();
          elem605.read(input);
          this.udtfs.push(elem605);
>>>>>>> Update Thrift
=======
        var _rtmp3389 = input.readListBegin();
        var _size388 = _rtmp3389.size || 0;
        for (var _i390 = 0; _i390 < _size388; ++_i390) {
          var elem391 = null;
          elem391 = new extension_functions_ttypes.TUserDefinedTableFunction();
          elem391.read(input);
          this.udtfs.push(elem391);
>>>>>>> Update Thrift
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.device_ir_map = {};
<<<<<<< HEAD
<<<<<<< HEAD
        var _rtmp3441 = input.readMapBegin();
        var _size440 = _rtmp3441.size || 0;
        for (var _i442 = 0; _i442 < _size440; ++_i442) {
          var key443 = null;
          var val444 = null;
          key443 = input.readString();
          val444 = input.readString();
          this.device_ir_map[key443] = val444;
=======
        var _ktype607 = 0;
        var _vtype608 = 0;
        _rtmp3610 = input.readMapBegin();
        _ktype607 = _rtmp3610.ktype;
        _vtype608 = _rtmp3610.vtype;
        _size606 = _rtmp3610.size;
        for (var _i611 = 0; _i611 < _size606; ++_i611)
        {
          var key612 = null;
          var val613 = null;
          key612 = input.readString();
          val613 = input.readString();
          this.device_ir_map[key612] = val613;
>>>>>>> Update Thrift
=======
        var _rtmp3393 = input.readMapBegin();
        var _size392 = _rtmp3393.size || 0;
        for (var _i394 = 0; _i394 < _size392; ++_i394) {
          var key395 = null;
          var val396 = null;
          key395 = input.readString();
          val396 = input.readString();
          this.device_ir_map[key395] = val396;
>>>>>>> Update Thrift
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_register_runtime_extension_functions_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_register_runtime_extension_functions_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.udfs !== null && this.udfs !== undefined) {
    output.writeFieldBegin('udfs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.udfs.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter445 in this.udfs) {
      if (this.udfs.hasOwnProperty(iter445)) {
        iter445 = this.udfs[iter445];
        iter445.write(output);
=======
    for (var iter614 in this.udfs)
    {
      if (this.udfs.hasOwnProperty(iter614))
      {
        iter614 = this.udfs[iter614];
        iter614.write(output);
>>>>>>> Update Thrift
=======
    for (var iter397 in this.udfs) {
      if (this.udfs.hasOwnProperty(iter397)) {
        iter397 = this.udfs[iter397];
        iter397.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.udtfs !== null && this.udtfs !== undefined) {
    output.writeFieldBegin('udtfs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.udtfs.length);
<<<<<<< HEAD
<<<<<<< HEAD
    for (var iter446 in this.udtfs) {
      if (this.udtfs.hasOwnProperty(iter446)) {
        iter446 = this.udtfs[iter446];
        iter446.write(output);
=======
    for (var iter615 in this.udtfs)
    {
      if (this.udtfs.hasOwnProperty(iter615))
      {
        iter615 = this.udtfs[iter615];
        iter615.write(output);
>>>>>>> Update Thrift
=======
    for (var iter398 in this.udtfs) {
      if (this.udtfs.hasOwnProperty(iter398)) {
        iter398 = this.udtfs[iter398];
        iter398.write(output);
>>>>>>> Update Thrift
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.device_ir_map !== null && this.device_ir_map !== undefined) {
    output.writeFieldBegin('device_ir_map', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.device_ir_map));
<<<<<<< HEAD
<<<<<<< HEAD
    for (var kiter447 in this.device_ir_map) {
      if (this.device_ir_map.hasOwnProperty(kiter447)) {
        var viter448 = this.device_ir_map[kiter447];
        output.writeString(kiter447);
        output.writeString(viter448);
=======
    for (var kiter616 in this.device_ir_map)
    {
      if (this.device_ir_map.hasOwnProperty(kiter616))
      {
        var viter617 = this.device_ir_map[kiter616];
        output.writeString(kiter616);
        output.writeString(viter617);
>>>>>>> Update Thrift
=======
    for (var kiter399 in this.device_ir_map) {
      if (this.device_ir_map.hasOwnProperty(kiter399)) {
        var viter400 = this.device_ir_map[kiter399];
        output.writeString(kiter399);
        output.writeString(viter400);
>>>>>>> Update Thrift
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSci_register_runtime_extension_functions_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_register_runtime_extension_functions_result.prototype = {};
OmniSci_register_runtime_extension_functions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_register_runtime_extension_functions_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_register_runtime_extension_functions_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OmniSciClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
OmniSciClient.prototype = {};
OmniSciClient.prototype.seqid = function() { return this._seqid; };
OmniSciClient.prototype.new_seqid = function() { return this._seqid += 1; };

OmniSciClient.prototype.connect = function(user, passwd, dbname, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_connect(user, passwd, dbname);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_connect(user, passwd, dbname);
  }
};

OmniSciClient.prototype.send_connect = function(user, passwd, dbname) {
  var output = new this.pClass(this.output);
  var params = {
    user: user,
    passwd: passwd,
    dbname: dbname
  };
  var args = new OmniSci_connect_args(params);
  try {
    output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_connect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_connect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('connect failed: unknown result');
};

OmniSciClient.prototype.krb5_connect = function(inputToken, dbname, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_krb5_connect(inputToken, dbname);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_krb5_connect(inputToken, dbname);
  }
};

OmniSciClient.prototype.send_krb5_connect = function(inputToken, dbname) {
  var output = new this.pClass(this.output);
  var params = {
    inputToken: inputToken,
    dbname: dbname
  };
  var args = new OmniSci_krb5_connect_args(params);
  try {
    output.writeMessageBegin('krb5_connect', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_krb5_connect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_krb5_connect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('krb5_connect failed: unknown result');
};

OmniSciClient.prototype.disconnect = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disconnect(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disconnect(session);
  }
};

OmniSciClient.prototype.send_disconnect = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_disconnect_args(params);
  try {
    output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_disconnect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_disconnect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.switch_database = function(session, dbname, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_switch_database(session, dbname);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_switch_database(session, dbname);
  }
};

OmniSciClient.prototype.send_switch_database = function(session, dbname) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dbname: dbname
  };
  var args = new OmniSci_switch_database_args(params);
  try {
    output.writeMessageBegin('switch_database', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_switch_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_switch_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.clone_session = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clone_session(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clone_session(session);
  }
};

OmniSciClient.prototype.send_clone_session = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_clone_session_args(params);
  try {
    output.writeMessageBegin('clone_session', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_clone_session = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_clone_session_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clone_session failed: unknown result');
};

OmniSciClient.prototype.get_server_status = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_server_status(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_server_status(session);
  }
};

OmniSciClient.prototype.send_get_server_status = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_server_status_args(params);
  try {
    output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_server_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_server_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_server_status failed: unknown result');
};

OmniSciClient.prototype.get_status = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_status(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_status(session);
  }
};

OmniSciClient.prototype.send_get_status = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_status_args(params);
  try {
    output.writeMessageBegin('get_status', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_status failed: unknown result');
};

OmniSciClient.prototype.get_hardware_info = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_hardware_info(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_hardware_info(session);
  }
};

OmniSciClient.prototype.send_get_hardware_info = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_hardware_info_args(params);
  try {
    output.writeMessageBegin('get_hardware_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_hardware_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_hardware_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_hardware_info failed: unknown result');
};

OmniSciClient.prototype.get_tables = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables(session);
  }
};

OmniSciClient.prototype.send_get_tables = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_tables_args(params);
  try {
    output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables failed: unknown result');
};

OmniSciClient.prototype.get_physical_tables = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_physical_tables(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_physical_tables(session);
  }
};

OmniSciClient.prototype.send_get_physical_tables = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_physical_tables_args(params);
  try {
    output.writeMessageBegin('get_physical_tables', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_physical_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_physical_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_physical_tables failed: unknown result');
};

OmniSciClient.prototype.get_views = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_views(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_views(session);
  }
};

OmniSciClient.prototype.send_get_views = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_views_args(params);
  try {
    output.writeMessageBegin('get_views', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_views = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_views_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_views failed: unknown result');
};

OmniSciClient.prototype.get_tables_meta = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables_meta(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables_meta(session);
  }
};

OmniSciClient.prototype.send_get_tables_meta = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_tables_meta_args(params);
  try {
    output.writeMessageBegin('get_tables_meta', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_tables_meta = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_tables_meta_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables_meta failed: unknown result');
};

OmniSciClient.prototype.get_table_details = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_details(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_details(session, table_name);
  }
};

OmniSciClient.prototype.send_get_table_details = function(session, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name
  };
  var args = new OmniSci_get_table_details_args(params);
  try {
    output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_table_details = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_table_details_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_details failed: unknown result');
};

OmniSciClient.prototype.get_internal_table_details = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_internal_table_details(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_internal_table_details(session, table_name);
  }
};

OmniSciClient.prototype.send_get_internal_table_details = function(session, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name
  };
  var args = new OmniSci_get_internal_table_details_args(params);
  try {
    output.writeMessageBegin('get_internal_table_details', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_internal_table_details = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_internal_table_details_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_internal_table_details failed: unknown result');
};

OmniSciClient.prototype.get_users = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_users(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_users(session);
  }
};

OmniSciClient.prototype.send_get_users = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_users_args(params);
  try {
    output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_users = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_users_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_users failed: unknown result');
};

OmniSciClient.prototype.get_databases = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_databases(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_databases(session);
  }
};

OmniSciClient.prototype.send_get_databases = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_databases_args(params);
  try {
    output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_databases failed: unknown result');
};

OmniSciClient.prototype.get_version = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_version();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_version();
  }
};

OmniSciClient.prototype.send_get_version = function() {
  var output = new this.pClass(this.output);
  var args = new OmniSci_get_version_args();
  try {
    output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_version failed: unknown result');
};

OmniSciClient.prototype.start_heap_profile = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start_heap_profile(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_heap_profile(session);
  }
};

OmniSciClient.prototype.send_start_heap_profile = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_start_heap_profile_args(params);
  try {
    output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_start_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_start_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.stop_heap_profile = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stop_heap_profile(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stop_heap_profile(session);
  }
};

OmniSciClient.prototype.send_stop_heap_profile = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_stop_heap_profile_args(params);
  try {
    output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_stop_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_stop_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.get_heap_profile = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_heap_profile(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_heap_profile(session);
  }
};

OmniSciClient.prototype.send_get_heap_profile = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_heap_profile_args(params);
  try {
    output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_heap_profile failed: unknown result');
};

OmniSciClient.prototype.get_memory = function(session, memory_level, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_memory(session, memory_level);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_memory(session, memory_level);
  }
};

MapDClient.prototype.send_get_memory = function(session, memory_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_memory', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_memory_args();
  args.session = session;
  args.memory_level = memory_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_memory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_memory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_memory failed: unknown result');
};
MapDClient.prototype.clear_cpu_memory = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clear_cpu_memory(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clear_cpu_memory(session);
  }
};

MapDClient.prototype.send_clear_cpu_memory = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_clear_cpu_memory_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_clear_cpu_memory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_clear_cpu_memory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
MapDClient.prototype.clear_gpu_memory = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clear_gpu_memory(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clear_gpu_memory(session);
  }
};

<<<<<<< HEAD
MapDClient.prototype.send_clear_gpu_memory = function(session) {
  var output = new this.pClass(this.output);
<<<<<<< HEAD
  var params = {
    session: session
  };
  var args = new OmniSci_clear_gpu_memory_args(params);
  try {
    output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid());
=======
OmniSciClient.prototype.send_get_memory = function(session, memory_level) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    memory_level: memory_level
  };
  var args = new OmniSci_get_memory_args(params);
  try {
    output.writeMessageBegin('get_memory', Thrift.MessageType.CALL, this.seqid());
>>>>>>> Update Thrift
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.recv_clear_gpu_memory = function(input,mtype,rseqid) {
=======
OmniSciClient.prototype.recv_get_memory = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
  var result = new OmniSci_clear_gpu_memory_result();
=======
  var result = new OmniSci_get_memory_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

<<<<<<< HEAD
OmniSciClient.prototype.set_table_epoch = function(session, db_id, table_id, new_epoch, callback) {
=======
OmniSciClient.prototype.clear_cpu_memory = function(session, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_table_epoch(session, db_id, table_id, new_epoch);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_table_epoch(session, db_id, table_id, new_epoch);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_set_table_epoch = function(session, db_id, table_id, new_epoch) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    db_id: db_id,
    table_id: table_id,
    new_epoch: new_epoch
  };
  var args = new OmniSci_set_table_epoch_args(params);
  try {
    output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid());
=======
OmniSciClient.prototype.send_clear_cpu_memory = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_clear_cpu_memory_args(params);
  try {
    output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid());
>>>>>>> Update Thrift
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.recv_set_table_epoch = function(input,mtype,rseqid) {
=======
OmniSciClient.prototype.recv_clear_cpu_memory = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
  var result = new OmniSci_set_table_epoch_result();
=======
  var result = new OmniSci_clear_cpu_memory_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

<<<<<<< HEAD
OmniSciClient.prototype.set_table_epoch_by_name = function(session, table_name, new_epoch, callback) {
=======
OmniSciClient.prototype.clear_gpu_memory = function(session, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_table_epoch_by_name(session, table_name, new_epoch);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_table_epoch_by_name(session, table_name, new_epoch);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_set_table_epoch_by_name = function(session, table_name, new_epoch) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    new_epoch: new_epoch
  };
  var args = new OmniSci_set_table_epoch_by_name_args(params);
  try {
    output.writeMessageBegin('set_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid());
=======
OmniSciClient.prototype.send_clear_gpu_memory = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_clear_gpu_memory_args(params);
  try {
    output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid());
>>>>>>> Update Thrift
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
<<<<<<< HEAD
};

OmniSciClient.prototype.recv_set_table_epoch_by_name = function(input,mtype,rseqid) {
=======
  output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_clear_gpu_memory_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_clear_gpu_memory = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
};

OmniSciClient.prototype.recv_clear_gpu_memory = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
<<<<<<< HEAD
  var result = new OmniSci_set_table_epoch_by_name_result();
=======
  var result = new MapD_clear_gpu_memory_result();
>>>>>>> Update Thrift
=======
  var result = new OmniSci_clear_gpu_memory_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.get_table_epoch = function(session, db_id, table_id, callback) {
=======
MapDClient.prototype.set_table_epoch = function(session, db_id, table_id, new_epoch, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.set_table_epoch = function(session, db_id, table_id, new_epoch, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_epoch(session, db_id, table_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_epoch(session, db_id, table_id);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_get_table_epoch = function(session, db_id, table_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    db_id: db_id,
    table_id: table_id
  };
  var args = new OmniSci_get_table_epoch_args(params);
  try {
    output.writeMessageBegin('get_table_epoch', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.recv_get_table_epoch = function(input,mtype,rseqid) {
=======
MapDClient.prototype.send_set_table_epoch = function(session, db_id, table_id, new_epoch) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_set_table_epoch_args();
  args.session = session;
  args.db_id = db_id;
  args.table_id = table_id;
  args.new_epoch = new_epoch;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_set_table_epoch = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.send_set_table_epoch = function(session, db_id, table_id, new_epoch) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    db_id: db_id,
    table_id: table_id,
    new_epoch: new_epoch
  };
  var args = new OmniSci_set_table_epoch_args(params);
  try {
    output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_set_table_epoch = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
<<<<<<< HEAD
  var result = new OmniSci_get_table_epoch_result();
=======
  var result = new MapD_set_table_epoch_result();
>>>>>>> Update Thrift
=======
  var result = new OmniSci_set_table_epoch_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_epoch failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.get_table_epoch_by_name = function(session, table_name, callback) {
=======
MapDClient.prototype.set_table_epoch_by_name = function(session, table_name, new_epoch, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.set_table_epoch_by_name = function(session, table_name, new_epoch, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_epoch_by_name(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_epoch_by_name(session, table_name);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_get_table_epoch_by_name = function(session, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name
  };
  var args = new OmniSci_get_table_epoch_by_name_args(params);
  try {
    output.writeMessageBegin('get_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.recv_get_table_epoch_by_name = function(input,mtype,rseqid) {
=======
MapDClient.prototype.send_set_table_epoch_by_name = function(session, table_name, new_epoch) {
=======
OmniSciClient.prototype.send_set_table_epoch_by_name = function(session, table_name, new_epoch) {
>>>>>>> Update Thrift
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    new_epoch: new_epoch
  };
  var args = new OmniSci_set_table_epoch_by_name_args(params);
  try {
    output.writeMessageBegin('set_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
MapDClient.prototype.recv_set_table_epoch_by_name = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.recv_set_table_epoch_by_name = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
<<<<<<< HEAD
  var result = new OmniSci_get_table_epoch_by_name_result();
=======
  var result = new MapD_set_table_epoch_by_name_result();
>>>>>>> Update Thrift
=======
  var result = new OmniSci_set_table_epoch_by_name_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_epoch_by_name failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.get_table_epochs = function(session, db_id, table_id, callback) {
=======
MapDClient.prototype.get_table_epoch = function(session, db_id, table_id, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.get_table_epoch = function(session, db_id, table_id, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_epochs(session, db_id, table_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_epochs(session, db_id, table_id);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_get_table_epochs = function(session, db_id, table_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    db_id: db_id,
    table_id: table_id
  };
  var args = new OmniSci_get_table_epochs_args(params);
  try {
    output.writeMessageBegin('get_table_epochs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.recv_get_table_epochs = function(input,mtype,rseqid) {
=======
MapDClient.prototype.send_get_table_epoch = function(session, db_id, table_id) {
=======
OmniSciClient.prototype.send_get_table_epoch = function(session, db_id, table_id) {
>>>>>>> Update Thrift
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    db_id: db_id,
    table_id: table_id
  };
  var args = new OmniSci_get_table_epoch_args(params);
  try {
    output.writeMessageBegin('get_table_epoch', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
MapDClient.prototype.recv_get_table_epoch = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.recv_get_table_epoch = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
<<<<<<< HEAD
  var result = new OmniSci_get_table_epochs_result();
=======
  var result = new MapD_get_table_epoch_result();
>>>>>>> Update Thrift
=======
  var result = new OmniSci_get_table_epoch_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_epochs failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.set_table_epochs = function(session, db_id, table_epochs, callback) {
=======
MapDClient.prototype.get_table_epoch_by_name = function(session, table_name, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.get_table_epoch_by_name = function(session, table_name, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_table_epochs(session, db_id, table_epochs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_table_epochs(session, db_id, table_epochs);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_set_table_epochs = function(session, db_id, table_epochs) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    db_id: db_id,
    table_epochs: table_epochs
  };
  var args = new OmniSci_set_table_epochs_args(params);
  try {
    output.writeMessageBegin('set_table_epochs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.recv_set_table_epochs = function(input,mtype,rseqid) {
=======
MapDClient.prototype.send_get_table_epoch_by_name = function(session, table_name) {
=======
OmniSciClient.prototype.send_get_table_epoch_by_name = function(session, table_name) {
>>>>>>> Update Thrift
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name
  };
  var args = new OmniSci_get_table_epoch_by_name_args(params);
  try {
    output.writeMessageBegin('get_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
MapDClient.prototype.recv_get_table_epoch_by_name = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.recv_get_table_epoch_by_name = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
<<<<<<< HEAD
  var result = new OmniSci_set_table_epochs_result();
=======
  var result = new MapD_get_table_epoch_by_name_result();
>>>>>>> Update Thrift
=======
  var result = new OmniSci_get_table_epoch_by_name_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

OmniSciClient.prototype.get_session_info = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_session_info(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_session_info(session);
  }
};

OmniSciClient.prototype.send_get_session_info = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_session_info_args(params);
  try {
    output.writeMessageBegin('get_session_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_session_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_session_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_session_info failed: unknown result');
};

OmniSciClient.prototype.sql_execute = function(session, query, column_format, nonce, first_n, at_most_n, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n);
  }
};

OmniSciClient.prototype.send_sql_execute = function(session, query, column_format, nonce, first_n, at_most_n) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    query: query,
    column_format: column_format,
    nonce: nonce,
    first_n: first_n,
    at_most_n: at_most_n
  };
  var args = new OmniSci_sql_execute_args(params);
  try {
    output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_sql_execute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_sql_execute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_execute failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.sql_execute_df = function(session, query, device_type, device_id, first_n, transport_method, callback) {
=======
MapDClient.prototype.sql_execute_df = function(session, query, device_type, device_id, first_n, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.sql_execute_df = function(session, query, device_type, device_id, first_n, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_execute_df(session, query, device_type, device_id, first_n, transport_method);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_execute_df(session, query, device_type, device_id, first_n, transport_method);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_sql_execute_df = function(session, query, device_type, device_id, first_n, transport_method) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    query: query,
    device_type: device_type,
    device_id: device_id,
    first_n: first_n,
    transport_method: transport_method
  };
  var args = new OmniSci_sql_execute_df_args(params);
  try {
    output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.recv_sql_execute_df = function(input,mtype,rseqid) {
=======
MapDClient.prototype.send_sql_execute_df = function(session, query, device_type, device_id, first_n) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_sql_execute_df_args();
  args.session = session;
  args.query = query;
  args.device_type = device_type;
  args.device_id = device_id;
  args.first_n = first_n;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_sql_execute_df = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.send_sql_execute_df = function(session, query, device_type, device_id, first_n) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    query: query,
    device_type: device_type,
    device_id: device_id,
    first_n: first_n
  };
  var args = new OmniSci_sql_execute_df_args(params);
  try {
    output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_sql_execute_df = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_sql_execute_df_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_execute_df failed: unknown result');
};

OmniSciClient.prototype.sql_execute_gdf = function(session, query, device_id, first_n, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_execute_gdf(session, query, device_id, first_n);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_execute_gdf(session, query, device_id, first_n);
  }
};

OmniSciClient.prototype.send_sql_execute_gdf = function(session, query, device_id, first_n) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    query: query,
    device_id: device_id,
    first_n: first_n
  };
  var args = new OmniSci_sql_execute_gdf_args(params);
  try {
    output.writeMessageBegin('sql_execute_gdf', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_sql_execute_gdf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_sql_execute_gdf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_execute_gdf failed: unknown result');
};

OmniSciClient.prototype.deallocate_df = function(session, df, device_type, device_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deallocate_df(session, df, device_type, device_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deallocate_df(session, df, device_type, device_id);
  }
};

OmniSciClient.prototype.send_deallocate_df = function(session, df, device_type, device_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    df: df,
    device_type: device_type,
    device_id: device_id
  };
  var args = new OmniSci_deallocate_df_args(params);
  try {
    output.writeMessageBegin('deallocate_df', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_deallocate_df = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_deallocate_df_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.interrupt = function(query_session, interrupt_session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_interrupt(query_session, interrupt_session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_interrupt(query_session, interrupt_session);
  }
};

OmniSciClient.prototype.send_interrupt = function(query_session, interrupt_session) {
  var output = new this.pClass(this.output);
  var params = {
    query_session: query_session,
    interrupt_session: interrupt_session
  };
  var args = new OmniSci_interrupt_args(params);
  try {
    output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_interrupt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_interrupt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.sql_validate = function(session, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_validate(session, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_validate(session, query);
  }
};

OmniSciClient.prototype.send_sql_validate = function(session, query) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    query: query
  };
  var args = new OmniSci_sql_validate_args(params);
  try {
    output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_sql_validate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_sql_validate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_validate failed: unknown result');
};

OmniSciClient.prototype.get_completion_hints = function(session, sql, cursor, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_completion_hints(session, sql, cursor);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_completion_hints(session, sql, cursor);
  }
};

OmniSciClient.prototype.send_get_completion_hints = function(session, sql, cursor) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    sql: sql,
    cursor: cursor
  };
  var args = new OmniSci_get_completion_hints_args(params);
  try {
    output.writeMessageBegin('get_completion_hints', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_completion_hints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_completion_hints_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_completion_hints failed: unknown result');
};

OmniSciClient.prototype.set_execution_mode = function(session, mode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_execution_mode(session, mode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_execution_mode(session, mode);
  }
};

OmniSciClient.prototype.send_set_execution_mode = function(session, mode) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    mode: mode
  };
  var args = new OmniSci_set_execution_mode_args(params);
  try {
    output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_set_execution_mode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_set_execution_mode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_render_vega(session, widget_id, vega_json, compression_level, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_render_vega(session, widget_id, vega_json, compression_level, nonce);
  }
};

OmniSciClient.prototype.send_render_vega = function(session, widget_id, vega_json, compression_level, nonce) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    widget_id: widget_id,
    vega_json: vega_json,
    compression_level: compression_level,
    nonce: nonce
  };
  var args = new OmniSci_render_vega_args(params);
  try {
    output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_render_vega = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_render_vega_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('render_vega failed: unknown result');
};

OmniSciClient.prototype.get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
  }
};

OmniSciClient.prototype.send_get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    widget_id: widget_id,
    pixel: pixel,
    table_col_names: table_col_names,
    column_format: column_format,
    pixelRadius: pixelRadius,
    nonce: nonce
  };
  var args = new OmniSci_get_result_row_for_pixel_args(params);
  try {
    output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_result_row_for_pixel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_result_row_for_pixel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_result_row_for_pixel failed: unknown result');
};

OmniSciClient.prototype.get_dashboard = function(session, dashboard_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_dashboard(session, dashboard_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_dashboard(session, dashboard_id);
  }
};

OmniSciClient.prototype.send_get_dashboard = function(session, dashboard_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_id: dashboard_id
  };
  var args = new OmniSci_get_dashboard_args(params);
  try {
    output.writeMessageBegin('get_dashboard', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_dashboard failed: unknown result');
};

OmniSciClient.prototype.get_dashboards = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_dashboards(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_dashboards(session);
  }
};

OmniSciClient.prototype.send_get_dashboards = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_dashboards_args(params);
  try {
    output.writeMessageBegin('get_dashboards', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_dashboards = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_dashboards_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_dashboards failed: unknown result');
};

OmniSciClient.prototype.create_dashboard = function(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
  }
};

OmniSciClient.prototype.send_create_dashboard = function(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_name: dashboard_name,
    dashboard_state: dashboard_state,
    image_hash: image_hash,
    dashboard_metadata: dashboard_metadata
  };
  var args = new OmniSci_create_dashboard_args(params);
  try {
    output.writeMessageBegin('create_dashboard', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_create_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_create_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_dashboard failed: unknown result');
};

OmniSciClient.prototype.replace_dashboard = function(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
  }
};

OmniSciClient.prototype.send_replace_dashboard = function(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_id: dashboard_id,
    dashboard_name: dashboard_name,
    dashboard_owner: dashboard_owner,
    dashboard_state: dashboard_state,
    image_hash: image_hash,
    dashboard_metadata: dashboard_metadata
  };
  var args = new OmniSci_replace_dashboard_args(params);
  try {
    output.writeMessageBegin('replace_dashboard', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_replace_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_replace_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.delete_dashboard = function(session, dashboard_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_dashboard(session, dashboard_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_dashboard(session, dashboard_id);
  }
};

OmniSciClient.prototype.send_delete_dashboard = function(session, dashboard_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_id: dashboard_id
  };
  var args = new OmniSci_delete_dashboard_args(params);
  try {
    output.writeMessageBegin('delete_dashboard', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_delete_dashboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_delete_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.share_dashboards = function(session, dashboard_ids, groups, permissions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_share_dashboards(session, dashboard_ids, groups, permissions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_share_dashboards(session, dashboard_ids, groups, permissions);
  }
};

OmniSciClient.prototype.send_share_dashboards = function(session, dashboard_ids, groups, permissions) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_ids: dashboard_ids,
    groups: groups,
    permissions: permissions
  };
  var args = new OmniSci_share_dashboards_args(params);
  try {
    output.writeMessageBegin('share_dashboards', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_share_dashboards = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_share_dashboards_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.delete_dashboards = function(session, dashboard_ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_dashboards(session, dashboard_ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_dashboards(session, dashboard_ids);
  }
};

OmniSciClient.prototype.send_delete_dashboards = function(session, dashboard_ids) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_ids: dashboard_ids
  };
  var args = new OmniSci_delete_dashboards_args(params);
  try {
    output.writeMessageBegin('delete_dashboards', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_delete_dashboards = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_delete_dashboards_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.share_dashboard = function(session, dashboard_id, groups, objects, permissions, grant_role, callback) {
=======
MapDClient.prototype.share_dashboard = function(session, dashboard_id, groups, objects, permissions, grant_role, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.share_dashboard = function(session, dashboard_id, groups, objects, permissions, grant_role, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role);
  }
};

OmniSciClient.prototype.send_share_dashboard = function(session, dashboard_id, groups, objects, permissions, grant_role) {
  var output = new this.pClass(this.output);
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update Thrift
  var params = {
    session: session,
    dashboard_id: dashboard_id,
    groups: groups,
    objects: objects,
    permissions: permissions,
    grant_role: grant_role
  };
  var args = new OmniSci_share_dashboard_args(params);
  try {
    output.writeMessageBegin('share_dashboard', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_share_dashboard = function(input,mtype,rseqid) {
<<<<<<< HEAD
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_share_dashboard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.unshare_dashboard = function(session, dashboard_id, groups, objects, permissions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions);
  }
};

OmniSciClient.prototype.send_unshare_dashboard = function(session, dashboard_id, groups, objects, permissions) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_id: dashboard_id,
    groups: groups,
    objects: objects,
    permissions: permissions
  };
  var args = new OmniSci_unshare_dashboard_args(params);
  try {
    output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_unshare_dashboard = function(input,mtype,rseqid) {
=======
  output.writeMessageBegin('share_dashboard', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_share_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.groups = groups;
  args.objects = objects;
  args.permissions = permissions;
  args.grant_role = grant_role;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_share_dashboard = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
<<<<<<< HEAD
  var result = new OmniSci_unshare_dashboard_result();
=======
  var result = new MapD_share_dashboard_result();
>>>>>>> Update Thrift
=======
  var result = new OmniSci_share_dashboard_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.unshare_dashboards = function(session, dashboard_ids, groups, permissions, callback) {
=======
MapDClient.prototype.unshare_dashboard = function(session, dashboard_id, groups, objects, permissions, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.unshare_dashboard = function(session, dashboard_id, groups, objects, permissions, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unshare_dashboards(session, dashboard_ids, groups, permissions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unshare_dashboards(session, dashboard_ids, groups, permissions);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_unshare_dashboards = function(session, dashboard_ids, groups, permissions) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_ids: dashboard_ids,
    groups: groups,
    permissions: permissions
  };
  var args = new OmniSci_unshare_dashboards_args(params);
  try {
    output.writeMessageBegin('unshare_dashboards', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.recv_unshare_dashboards = function(input,mtype,rseqid) {
=======
MapDClient.prototype.send_unshare_dashboard = function(session, dashboard_id, groups, objects, permissions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_unshare_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.groups = groups;
  args.objects = objects;
  args.permissions = permissions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_unshare_dashboard = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.send_unshare_dashboard = function(session, dashboard_id, groups, objects, permissions) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_id: dashboard_id,
    groups: groups,
    objects: objects,
    permissions: permissions
  };
  var args = new OmniSci_unshare_dashboard_args(params);
  try {
    output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_unshare_dashboard = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
<<<<<<< HEAD
<<<<<<< HEAD
  var result = new OmniSci_unshare_dashboards_result();
=======
  var result = new MapD_unshare_dashboard_result();
>>>>>>> Update Thrift
=======
  var result = new OmniSci_unshare_dashboard_result();
>>>>>>> Update Thrift
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.get_dashboard_grantees = function(session, dashboard_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_dashboard_grantees(session, dashboard_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_dashboard_grantees(session, dashboard_id);
  }
};

OmniSciClient.prototype.send_get_dashboard_grantees = function(session, dashboard_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    dashboard_id: dashboard_id
  };
  var args = new OmniSci_get_dashboard_grantees_args(params);
  try {
    output.writeMessageBegin('get_dashboard_grantees', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_dashboard_grantees = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_dashboard_grantees_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_dashboard_grantees failed: unknown result');
};

OmniSciClient.prototype.get_link_view = function(session, link, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_link_view(session, link);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_link_view(session, link);
  }
};

OmniSciClient.prototype.send_get_link_view = function(session, link) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    link: link
  };
  var args = new OmniSci_get_link_view_args(params);
  try {
    output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_link_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_link_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_link_view failed: unknown result');
};

OmniSciClient.prototype.create_link = function(session, view_state, view_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_link(session, view_state, view_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_link(session, view_state, view_metadata);
  }
};

OmniSciClient.prototype.send_create_link = function(session, view_state, view_metadata) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    view_state: view_state,
    view_metadata: view_metadata
  };
  var args = new OmniSci_create_link_args(params);
  try {
    output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_create_link = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_create_link_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_link failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.load_table_binary = function(session, table_name, rows, column_names, callback) {
=======
MapDClient.prototype.load_table_binary = function(session, table_name, rows, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.load_table_binary = function(session, table_name, rows, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table_binary(session, table_name, rows, column_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table_binary(session, table_name, rows, column_names);
  }
};

<<<<<<< HEAD
<<<<<<< HEAD
OmniSciClient.prototype.send_load_table_binary = function(session, table_name, rows, column_names) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    rows: rows,
    column_names: column_names
  };
  var args = new OmniSci_load_table_binary_args(params);
  try {
    output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
=======
MapDClient.prototype.send_load_table_binary = function(session, table_name, rows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_binary_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.send_load_table_binary = function(session, table_name, rows) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    rows: rows
  };
  var args = new OmniSci_load_table_binary_args(params);
  try {
    output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
>>>>>>> Update Thrift
};

OmniSciClient.prototype.recv_load_table_binary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_load_table_binary_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.load_table_binary_columnar = function(session, table_name, cols, column_names, callback) {
=======
MapDClient.prototype.load_table_binary_columnar = function(session, table_name, cols, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.load_table_binary_columnar = function(session, table_name, cols, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table_binary_columnar(session, table_name, cols, column_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table_binary_columnar(session, table_name, cols, column_names);
  }
};

<<<<<<< HEAD
<<<<<<< HEAD
OmniSciClient.prototype.send_load_table_binary_columnar = function(session, table_name, cols, column_names) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    cols: cols,
    column_names: column_names
  };
  var args = new OmniSci_load_table_binary_columnar_args(params);
  try {
    output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
=======
MapDClient.prototype.send_load_table_binary_columnar = function(session, table_name, cols) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_binary_columnar_args();
  args.session = session;
  args.table_name = table_name;
  args.cols = cols;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.send_load_table_binary_columnar = function(session, table_name, cols) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    cols: cols
  };
  var args = new OmniSci_load_table_binary_columnar_args(params);
  try {
    output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
>>>>>>> Update Thrift
};

OmniSciClient.prototype.recv_load_table_binary_columnar = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_load_table_binary_columnar_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.load_table_binary_arrow = function(session, table_name, arrow_stream, use_column_names, callback) {
=======
MapDClient.prototype.load_table_binary_arrow = function(session, table_name, arrow_stream, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.load_table_binary_arrow = function(session, table_name, arrow_stream, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table_binary_arrow(session, table_name, arrow_stream, use_column_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table_binary_arrow(session, table_name, arrow_stream, use_column_names);
  }
};

<<<<<<< HEAD
<<<<<<< HEAD
OmniSciClient.prototype.send_load_table_binary_arrow = function(session, table_name, arrow_stream, use_column_names) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    arrow_stream: arrow_stream,
    use_column_names: use_column_names
  };
  var args = new OmniSci_load_table_binary_arrow_args(params);
  try {
    output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
=======
MapDClient.prototype.send_load_table_binary_arrow = function(session, table_name, arrow_stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_binary_arrow_args();
  args.session = session;
  args.table_name = table_name;
  args.arrow_stream = arrow_stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.send_load_table_binary_arrow = function(session, table_name, arrow_stream) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    arrow_stream: arrow_stream
  };
  var args = new OmniSci_load_table_binary_arrow_args(params);
  try {
    output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
>>>>>>> Update Thrift
};

OmniSciClient.prototype.recv_load_table_binary_arrow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_load_table_binary_arrow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.load_table = function(session, table_name, rows, column_names, callback) {
=======
MapDClient.prototype.load_table = function(session, table_name, rows, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.load_table = function(session, table_name, rows, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table(session, table_name, rows, column_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table(session, table_name, rows, column_names);
  }
};

<<<<<<< HEAD
<<<<<<< HEAD
OmniSciClient.prototype.send_load_table = function(session, table_name, rows, column_names) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    rows: rows,
    column_names: column_names
  };
  var args = new OmniSci_load_table_args(params);
  try {
    output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
=======
MapDClient.prototype.send_load_table = function(session, table_name, rows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.send_load_table = function(session, table_name, rows) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    rows: rows
  };
  var args = new OmniSci_load_table_args(params);
  try {
    output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
>>>>>>> Update Thrift
};

OmniSciClient.prototype.recv_load_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_load_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.detect_column_types = function(session, file_name, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_detect_column_types(session, file_name, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_detect_column_types(session, file_name, copy_params);
  }
};

OmniSciClient.prototype.send_detect_column_types = function(session, file_name, copy_params) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    file_name: file_name,
    copy_params: copy_params
  };
  var args = new OmniSci_detect_column_types_args(params);
  try {
    output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_detect_column_types = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_detect_column_types_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('detect_column_types failed: unknown result');
};

OmniSciClient.prototype.create_table = function(session, table_name, row_desc, file_type, create_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_table(session, table_name, row_desc, file_type, create_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_table(session, table_name, row_desc, file_type, create_params);
  }
};

OmniSciClient.prototype.send_create_table = function(session, table_name, row_desc, file_type, create_params) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    row_desc: row_desc,
    file_type: file_type,
    create_params: create_params
  };
  var args = new OmniSci_create_table_args(params);
  try {
    output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_create_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_create_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.import_table = function(session, table_name, file_name, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_table(session, table_name, file_name, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_table(session, table_name, file_name, copy_params);
  }
};

OmniSciClient.prototype.send_import_table = function(session, table_name, file_name, copy_params) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    file_name: file_name,
    copy_params: copy_params
  };
  var args = new OmniSci_import_table_args(params);
  try {
    output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_import_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_import_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.import_geo_table = function(session, table_name, file_name, copy_params, row_desc, create_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params);
  }
};

OmniSciClient.prototype.send_import_geo_table = function(session, table_name, file_name, copy_params, row_desc, create_params) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_name: table_name,
    file_name: file_name,
    copy_params: copy_params,
    row_desc: row_desc,
    create_params: create_params
  };
  var args = new OmniSci_import_geo_table_args(params);
  try {
    output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_import_geo_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_import_geo_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.import_table_status = function(session, import_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_table_status(session, import_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_table_status(session, import_id);
  }
};

OmniSciClient.prototype.send_import_table_status = function(session, import_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    import_id: import_id
  };
  var args = new OmniSci_import_table_status_args(params);
  try {
    output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_import_table_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_import_table_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('import_table_status failed: unknown result');
};

OmniSciClient.prototype.get_first_geo_file_in_archive = function(session, archive_path, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_first_geo_file_in_archive(session, archive_path, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_first_geo_file_in_archive(session, archive_path, copy_params);
  }
};

OmniSciClient.prototype.send_get_first_geo_file_in_archive = function(session, archive_path, copy_params) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    archive_path: archive_path,
    copy_params: copy_params
  };
  var args = new OmniSci_get_first_geo_file_in_archive_args(params);
  try {
    output.writeMessageBegin('get_first_geo_file_in_archive', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_first_geo_file_in_archive = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_first_geo_file_in_archive_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_first_geo_file_in_archive failed: unknown result');
};

OmniSciClient.prototype.get_all_files_in_archive = function(session, archive_path, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_files_in_archive(session, archive_path, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_files_in_archive(session, archive_path, copy_params);
  }
};

OmniSciClient.prototype.send_get_all_files_in_archive = function(session, archive_path, copy_params) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    archive_path: archive_path,
    copy_params: copy_params
  };
  var args = new OmniSci_get_all_files_in_archive_args(params);
  try {
    output.writeMessageBegin('get_all_files_in_archive', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_all_files_in_archive = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_all_files_in_archive_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_files_in_archive failed: unknown result');
};

OmniSciClient.prototype.get_layers_in_geo_file = function(session, file_name, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_layers_in_geo_file(session, file_name, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_layers_in_geo_file(session, file_name, copy_params);
  }
};

OmniSciClient.prototype.send_get_layers_in_geo_file = function(session, file_name, copy_params) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    file_name: file_name,
    copy_params: copy_params
  };
  var args = new OmniSci_get_layers_in_geo_file_args(params);
  try {
    output.writeMessageBegin('get_layers_in_geo_file', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_layers_in_geo_file = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_layers_in_geo_file_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_layers_in_geo_file failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.query_get_outer_fragment_count = function(session, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_query_get_outer_fragment_count(session, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_query_get_outer_fragment_count(session, query);
  }
};

OmniSciClient.prototype.send_query_get_outer_fragment_count = function(session, query) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    query: query
  };
  var args = new OmniSci_query_get_outer_fragment_count_args(params);
  try {
    output.writeMessageBegin('query_get_outer_fragment_count', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_query_get_outer_fragment_count = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_query_get_outer_fragment_count_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('query_get_outer_fragment_count failed: unknown result');
};

OmniSciClient.prototype.check_table_consistency = function(session, table_id, callback) {
=======
MapDClient.prototype.check_table_consistency = function(session, table_id, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.query_get_outer_fragment_count = function(session, query, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_query_get_outer_fragment_count(session, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_query_get_outer_fragment_count(session, query);
  }
};

OmniSciClient.prototype.send_query_get_outer_fragment_count = function(session, query) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    query: query
  };
  var args = new OmniSci_query_get_outer_fragment_count_args(params);
  try {
    output.writeMessageBegin('query_get_outer_fragment_count', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_query_get_outer_fragment_count = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_query_get_outer_fragment_count_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('query_get_outer_fragment_count failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.start_query = function(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices, callback) {
=======
MapDClient.prototype.start_query = function(leaf_session, parent_session, query_ra, just_explain, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.check_table_consistency = function(session, table_id, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
<<<<<<< HEAD
    this.send_start_query(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_query(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_start_query = function(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices) {
  var output = new this.pClass(this.output);
  var params = {
    leaf_session: leaf_session,
    parent_session: parent_session,
    query_ra: query_ra,
    just_explain: just_explain,
    outer_fragment_indices: outer_fragment_indices
  };
  var args = new OmniSci_start_query_args(params);
  try {
    output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_start_query = function(input,mtype,rseqid) {
=======
MapDClient.prototype.send_start_query = function(leaf_session, parent_session, query_ra, just_explain) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_start_query_args();
  args.leaf_session = leaf_session;
  args.parent_session = parent_session;
  args.query_ra = query_ra;
  args.just_explain = just_explain;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_start_query = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
=======
    this.send_check_table_consistency(session, table_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_check_table_consistency(session, table_id);
  }
};

OmniSciClient.prototype.send_check_table_consistency = function(session, table_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_id: table_id
  };
  var args = new OmniSci_check_table_consistency_args(params);
  try {
    output.writeMessageBegin('check_table_consistency', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_check_table_consistency = function(input,mtype,rseqid) {
>>>>>>> Update Thrift
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_check_table_consistency_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('check_table_consistency failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.execute_query_step = function(pending_query, subquery_id, callback) {
=======
MapDClient.prototype.execute_query_step = function(pending_query, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.start_query = function(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
<<<<<<< HEAD
    this.send_execute_query_step(pending_query, subquery_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_execute_query_step(pending_query, subquery_id);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_execute_query_step = function(pending_query, subquery_id) {
  var output = new this.pClass(this.output);
  var params = {
    pending_query: pending_query,
    subquery_id: subquery_id
  };
  var args = new OmniSci_execute_query_step_args(params);
  try {
    output.writeMessageBegin('execute_query_step', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
=======
MapDClient.prototype.send_execute_query_step = function(pending_query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('execute_query_step', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_execute_query_step_args();
  args.pending_query = pending_query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
>>>>>>> Update Thrift
=======
    this.send_start_query(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_query(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices);
  }
};

OmniSciClient.prototype.send_start_query = function(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices) {
  var output = new this.pClass(this.output);
  var params = {
    leaf_session: leaf_session,
    parent_session: parent_session,
    query_ra: query_ra,
    just_explain: just_explain,
    outer_fragment_indices: outer_fragment_indices
  };
  var args = new OmniSci_start_query_args(params);
  try {
    output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
>>>>>>> Update Thrift
};

OmniSciClient.prototype.recv_start_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_start_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start_query failed: unknown result');
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result, callback) {
=======
MapDClient.prototype.broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.execute_query_step = function(pending_query, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
<<<<<<< HEAD
    this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result);
  }
};

<<<<<<< HEAD
OmniSciClient.prototype.send_broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result) {
  var output = new this.pClass(this.output);
  var params = {
    serialized_rows: serialized_rows,
    row_desc: row_desc,
    query_id: query_id,
    subquery_id: subquery_id,
    is_final_subquery_result: is_final_subquery_result
  };
  var args = new OmniSci_broadcast_serialized_rows_args(params);
  try {
    output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
=======
MapDClient.prototype.send_broadcast_serialized_rows = function(serialized_rows, row_desc, query_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_broadcast_serialized_rows_args();
  args.serialized_rows = serialized_rows;
  args.row_desc = row_desc;
  args.query_id = query_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
>>>>>>> Update Thrift
=======
    this.send_execute_query_step(pending_query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_execute_query_step(pending_query);
  }
};

OmniSciClient.prototype.send_execute_query_step = function(pending_query) {
  var output = new this.pClass(this.output);
  var params = {
    pending_query: pending_query
  };
  var args = new OmniSci_execute_query_step_args(params);
  try {
    output.writeMessageBegin('execute_query_step', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
>>>>>>> Update Thrift
};

OmniSciClient.prototype.recv_execute_query_step = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_execute_query_step_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_query_step failed: unknown result');
};

OmniSciClient.prototype.broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id);
  }
};

OmniSciClient.prototype.send_broadcast_serialized_rows = function(serialized_rows, row_desc, query_id) {
  var output = new this.pClass(this.output);
  var params = {
    serialized_rows: serialized_rows,
    row_desc: row_desc,
    query_id: query_id
  };
  var args = new OmniSci_broadcast_serialized_rows_args(params);
  try {
    output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_broadcast_serialized_rows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_broadcast_serialized_rows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.start_render_query = function(session, widget_id, node_idx, vega_json, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start_render_query(session, widget_id, node_idx, vega_json);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_render_query(session, widget_id, node_idx, vega_json);
  }
};

OmniSciClient.prototype.send_start_render_query = function(session, widget_id, node_idx, vega_json) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    widget_id: widget_id,
    node_idx: node_idx,
    vega_json: vega_json
  };
  var args = new OmniSci_start_render_query_args(params);
  try {
    output.writeMessageBegin('start_render_query', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_start_render_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_start_render_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start_render_query failed: unknown result');
};

OmniSciClient.prototype.execute_next_render_step = function(pending_render, merged_data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_execute_next_render_step(pending_render, merged_data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_execute_next_render_step(pending_render, merged_data);
  }
};

OmniSciClient.prototype.send_execute_next_render_step = function(pending_render, merged_data) {
  var output = new this.pClass(this.output);
  var params = {
    pending_render: pending_render,
    merged_data: merged_data
  };
  var args = new OmniSci_execute_next_render_step_args(params);
  try {
    output.writeMessageBegin('execute_next_render_step', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_execute_next_render_step = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_execute_next_render_step_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_next_render_step failed: unknown result');
};

OmniSciClient.prototype.insert_data = function(session, insert_data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insert_data(session, insert_data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insert_data(session, insert_data);
  }
};

OmniSciClient.prototype.send_insert_data = function(session, insert_data) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    insert_data: insert_data
  };
  var args = new OmniSci_insert_data_args(params);
  try {
    output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_insert_data = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_insert_data_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
<<<<<<< HEAD
<<<<<<< HEAD

OmniSciClient.prototype.checkpoint = function(session, table_id, callback) {
=======
MapDClient.prototype.checkpoint = function(session, db_id, table_id, callback) {
>>>>>>> Update Thrift
=======

OmniSciClient.prototype.checkpoint = function(session, db_id, table_id, callback) {
>>>>>>> Update Thrift
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkpoint(session, table_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkpoint(session, table_id);
  }
};

<<<<<<< HEAD
<<<<<<< HEAD
OmniSciClient.prototype.send_checkpoint = function(session, table_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    table_id: table_id
  };
  var args = new OmniSci_checkpoint_args(params);
  try {
    output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
=======
MapDClient.prototype.send_checkpoint = function(session, db_id, table_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_checkpoint_args();
  args.session = session;
  args.db_id = db_id;
  args.table_id = table_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
>>>>>>> Update Thrift
=======
OmniSciClient.prototype.send_checkpoint = function(session, db_id, table_id) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    db_id: db_id,
    table_id: table_id
  };
  var args = new OmniSci_checkpoint_args(params);
  try {
    output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
>>>>>>> Update Thrift
};

OmniSciClient.prototype.recv_checkpoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_checkpoint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OmniSciClient.prototype.get_roles = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_roles(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_roles(session);
  }
};

OmniSciClient.prototype.send_get_roles = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_roles_args(params);
  try {
    output.writeMessageBegin('get_roles', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_roles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_roles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_roles failed: unknown result');
};

OmniSciClient.prototype.get_db_objects_for_grantee = function(session, roleName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_db_objects_for_grantee(session, roleName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_db_objects_for_grantee(session, roleName);
  }
};

OmniSciClient.prototype.send_get_db_objects_for_grantee = function(session, roleName) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    roleName: roleName
  };
  var args = new OmniSci_get_db_objects_for_grantee_args(params);
  try {
    output.writeMessageBegin('get_db_objects_for_grantee', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_db_objects_for_grantee = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_db_objects_for_grantee_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_db_objects_for_grantee failed: unknown result');
};

OmniSciClient.prototype.get_db_object_privs = function(session, objectName, type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_db_object_privs(session, objectName, type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_db_object_privs(session, objectName, type);
  }
};

OmniSciClient.prototype.send_get_db_object_privs = function(session, objectName, type) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    objectName: objectName,
    type: type
  };
  var args = new OmniSci_get_db_object_privs_args(params);
  try {
    output.writeMessageBegin('get_db_object_privs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_db_object_privs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_db_object_privs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_db_object_privs failed: unknown result');
};

OmniSciClient.prototype.get_all_roles_for_user = function(session, userName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_roles_for_user(session, userName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_roles_for_user(session, userName);
  }
};

OmniSciClient.prototype.send_get_all_roles_for_user = function(session, userName) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    userName: userName
  };
  var args = new OmniSci_get_all_roles_for_user_args(params);
  try {
    output.writeMessageBegin('get_all_roles_for_user', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_all_roles_for_user = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_all_roles_for_user_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_roles_for_user failed: unknown result');
};

OmniSciClient.prototype.has_role = function(session, granteeName, roleName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_has_role(session, granteeName, roleName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_has_role(session, granteeName, roleName);
  }
};

OmniSciClient.prototype.send_has_role = function(session, granteeName, roleName) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    granteeName: granteeName,
    roleName: roleName
  };
  var args = new OmniSci_has_role_args(params);
  try {
    output.writeMessageBegin('has_role', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_has_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_has_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('has_role failed: unknown result');
};

OmniSciClient.prototype.has_object_privilege = function(session, granteeName, ObjectName, objectType, permissions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_has_object_privilege(session, granteeName, ObjectName, objectType, permissions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_has_object_privilege(session, granteeName, ObjectName, objectType, permissions);
  }
};

OmniSciClient.prototype.send_has_object_privilege = function(session, granteeName, ObjectName, objectType, permissions) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    granteeName: granteeName,
    ObjectName: ObjectName,
    objectType: objectType,
    permissions: permissions
  };
  var args = new OmniSci_has_object_privilege_args(params);
  try {
    output.writeMessageBegin('has_object_privilege', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_has_object_privilege = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_has_object_privilege_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('has_object_privilege failed: unknown result');
};

OmniSciClient.prototype.set_license_key = function(session, key, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_license_key(session, key, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_license_key(session, key, nonce);
  }
};

OmniSciClient.prototype.send_set_license_key = function(session, key, nonce) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    key: key,
    nonce: nonce
  };
  var args = new OmniSci_set_license_key_args(params);
  try {
    output.writeMessageBegin('set_license_key', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_set_license_key = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_set_license_key_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_license_key failed: unknown result');
};

OmniSciClient.prototype.get_license_claims = function(session, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_license_claims(session, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_license_claims(session, nonce);
  }
};

OmniSciClient.prototype.send_get_license_claims = function(session, nonce) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    nonce: nonce
  };
  var args = new OmniSci_get_license_claims_args(params);
  try {
    output.writeMessageBegin('get_license_claims', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_license_claims = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_license_claims_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_license_claims failed: unknown result');
};

OmniSciClient.prototype.get_device_parameters = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_device_parameters(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_device_parameters(session);
  }
};

OmniSciClient.prototype.send_get_device_parameters = function(session) {
  var output = new this.pClass(this.output);
  var params = {
    session: session
  };
  var args = new OmniSci_get_device_parameters_args(params);
  try {
    output.writeMessageBegin('get_device_parameters', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_get_device_parameters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_get_device_parameters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_device_parameters failed: unknown result');
};

OmniSciClient.prototype.register_runtime_extension_functions = function(session, udfs, udtfs, device_ir_map, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_register_runtime_extension_functions(session, udfs, udtfs, device_ir_map);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_register_runtime_extension_functions(session, udfs, udtfs, device_ir_map);
  }
};

OmniSciClient.prototype.send_register_runtime_extension_functions = function(session, udfs, udtfs, device_ir_map) {
  var output = new this.pClass(this.output);
  var params = {
    session: session,
    udfs: udfs,
    udtfs: udtfs,
    device_ir_map: device_ir_map
  };
  var args = new OmniSci_register_runtime_extension_functions_args(params);
  try {
    output.writeMessageBegin('register_runtime_extension_functions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OmniSciClient.prototype.recv_register_runtime_extension_functions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OmniSci_register_runtime_extension_functions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
var OmniSciProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
OmniSciProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
OmniSciProcessor.prototype.process_connect = function(seqid, input, output) {
  var args = new OmniSci_connect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.connect.length === 3) {
    Q.fcall(this._handler.connect.bind(this._handler),
      args.user,
      args.passwd,
      args.dbname
    ).then(function(result) {
      var result_obj = new OmniSci_connect_result({success: result});
      output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_connect_result(err);
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.connect(args.user, args.passwd, args.dbname, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_connect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_krb5_connect = function(seqid, input, output) {
  var args = new OmniSci_krb5_connect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.krb5_connect.length === 2) {
    Q.fcall(this._handler.krb5_connect.bind(this._handler),
      args.inputToken,
      args.dbname
    ).then(function(result) {
      var result_obj = new OmniSci_krb5_connect_result({success: result});
      output.writeMessageBegin("krb5_connect", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_krb5_connect_result(err);
        output.writeMessageBegin("krb5_connect", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("krb5_connect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.krb5_connect(args.inputToken, args.dbname, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_krb5_connect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("krb5_connect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("krb5_connect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_disconnect = function(seqid, input, output) {
  var args = new OmniSci_disconnect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disconnect.length === 1) {
    Q.fcall(this._handler.disconnect.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_disconnect_result({success: result});
      output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_disconnect_result(err);
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.disconnect(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_disconnect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_switch_database = function(seqid, input, output) {
  var args = new OmniSci_switch_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.switch_database.length === 2) {
    Q.fcall(this._handler.switch_database.bind(this._handler),
      args.session,
      args.dbname
    ).then(function(result) {
      var result_obj = new OmniSci_switch_database_result({success: result});
      output.writeMessageBegin("switch_database", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_switch_database_result(err);
        output.writeMessageBegin("switch_database", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("switch_database", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.switch_database(args.session, args.dbname, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_switch_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("switch_database", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("switch_database", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_clone_session = function(seqid, input, output) {
  var args = new OmniSci_clone_session_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clone_session.length === 1) {
    Q.fcall(this._handler.clone_session.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_clone_session_result({success: result});
      output.writeMessageBegin("clone_session", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_clone_session_result(err);
        output.writeMessageBegin("clone_session", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clone_session", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clone_session(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_clone_session_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clone_session", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clone_session", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_server_status = function(seqid, input, output) {
  var args = new OmniSci_get_server_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_server_status.length === 1) {
    Q.fcall(this._handler.get_server_status.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_server_status_result({success: result});
      output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_server_status_result(err);
        output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_server_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_server_status(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_server_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_server_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_status = function(seqid, input, output) {
  var args = new OmniSci_get_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_status.length === 1) {
    Q.fcall(this._handler.get_status.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_status_result({success: result});
      output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_status_result(err);
        output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_status(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_hardware_info = function(seqid, input, output) {
  var args = new OmniSci_get_hardware_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_hardware_info.length === 1) {
    Q.fcall(this._handler.get_hardware_info.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_hardware_info_result({success: result});
      output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_hardware_info_result(err);
        output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_hardware_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_hardware_info(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_hardware_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_hardware_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new OmniSci_get_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables.length === 1) {
    Q.fcall(this._handler.get_tables.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_tables_result({success: result});
      output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_tables_result(err);
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_tables(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_physical_tables = function(seqid, input, output) {
  var args = new OmniSci_get_physical_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_physical_tables.length === 1) {
    Q.fcall(this._handler.get_physical_tables.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_physical_tables_result({success: result});
      output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_physical_tables_result(err);
        output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_physical_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_physical_tables(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_physical_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_physical_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_views = function(seqid, input, output) {
  var args = new OmniSci_get_views_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_views.length === 1) {
    Q.fcall(this._handler.get_views.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_views_result({success: result});
      output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_views_result(err);
        output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_views", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_views(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_views_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_views", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_tables_meta = function(seqid, input, output) {
  var args = new OmniSci_get_tables_meta_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables_meta.length === 1) {
    Q.fcall(this._handler.get_tables_meta.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_tables_meta_result({success: result});
      output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_tables_meta_result(err);
        output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables_meta", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_tables_meta(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_tables_meta_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables_meta", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_table_details = function(seqid, input, output) {
  var args = new OmniSci_get_table_details_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_details.length === 2) {
    Q.fcall(this._handler.get_table_details.bind(this._handler),
      args.session,
      args.table_name
    ).then(function(result) {
      var result_obj = new OmniSci_get_table_details_result({success: result});
      output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_table_details_result(err);
        output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_details", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_table_details(args.session, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_table_details_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_details", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_internal_table_details = function(seqid, input, output) {
  var args = new OmniSci_get_internal_table_details_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_internal_table_details.length === 2) {
    Q.fcall(this._handler.get_internal_table_details.bind(this._handler),
      args.session,
      args.table_name
    ).then(function(result) {
      var result_obj = new OmniSci_get_internal_table_details_result({success: result});
      output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_internal_table_details_result(err);
        output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_internal_table_details(args.session, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_internal_table_details_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_users = function(seqid, input, output) {
  var args = new OmniSci_get_users_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_users.length === 1) {
    Q.fcall(this._handler.get_users.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_users_result({success: result});
      output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_users_result(err);
        output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_users", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_users(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_users_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_users", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new OmniSci_get_databases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_databases.length === 1) {
    Q.fcall(this._handler.get_databases.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_databases_result({success: result});
      output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_databases_result(err);
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_databases(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_databases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_version = function(seqid, input, output) {
  var args = new OmniSci_get_version_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_version.length === 0) {
    Q.fcall(this._handler.get_version.bind(this._handler)
    ).then(function(result) {
      var result_obj = new OmniSci_get_version_result({success: result});
      output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_version_result(err);
        output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_version", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_version(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_version_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_version", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_start_heap_profile = function(seqid, input, output) {
  var args = new OmniSci_start_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start_heap_profile.length === 1) {
    Q.fcall(this._handler.start_heap_profile.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_start_heap_profile_result({success: result});
      output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_start_heap_profile_result(err);
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.start_heap_profile(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_start_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_stop_heap_profile = function(seqid, input, output) {
  var args = new OmniSci_stop_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stop_heap_profile.length === 1) {
    Q.fcall(this._handler.stop_heap_profile.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_stop_heap_profile_result({success: result});
      output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_stop_heap_profile_result(err);
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stop_heap_profile(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_stop_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_heap_profile = function(seqid, input, output) {
  var args = new OmniSci_get_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_heap_profile.length === 1) {
    Q.fcall(this._handler.get_heap_profile.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_heap_profile_result({success: result});
      output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_heap_profile_result(err);
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_heap_profile(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_memory = function(seqid, input, output) {
  var args = new OmniSci_get_memory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_memory.length === 2) {
    Q.fcall(this._handler.get_memory.bind(this._handler),
      args.session,
      args.memory_level
    ).then(function(result) {
      var result_obj = new OmniSci_get_memory_result({success: result});
      output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_memory_result(err);
        output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_memory(args.session, args.memory_level, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_clear_cpu_memory = function(seqid, input, output) {
  var args = new OmniSci_clear_cpu_memory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clear_cpu_memory.length === 1) {
    Q.fcall(this._handler.clear_cpu_memory.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_clear_cpu_memory_result({success: result});
      output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_clear_cpu_memory_result(err);
        output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clear_cpu_memory(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_clear_cpu_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_clear_gpu_memory = function(seqid, input, output) {
  var args = new OmniSci_clear_gpu_memory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clear_gpu_memory.length === 1) {
    Q.fcall(this._handler.clear_gpu_memory.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_clear_gpu_memory_result({success: result});
      output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_clear_gpu_memory_result(err);
        output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clear_gpu_memory(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_clear_gpu_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_set_table_epoch = function(seqid, input, output) {
  var args = new OmniSci_set_table_epoch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_table_epoch.length === 4) {
    Q.fcall(this._handler.set_table_epoch.bind(this._handler),
      args.session,
      args.db_id,
      args.table_id,
      args.new_epoch
    ).then(function(result) {
      var result_obj = new OmniSci_set_table_epoch_result({success: result});
      output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_set_table_epoch_result(err);
        output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_table_epoch(args.session, args.db_id, args.table_id, args.new_epoch, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_set_table_epoch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_set_table_epoch_by_name = function(seqid, input, output) {
  var args = new OmniSci_set_table_epoch_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_table_epoch_by_name.length === 3) {
    Q.fcall(this._handler.set_table_epoch_by_name.bind(this._handler),
      args.session,
      args.table_name,
      args.new_epoch
    ).then(function(result) {
      var result_obj = new OmniSci_set_table_epoch_by_name_result({success: result});
      output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_set_table_epoch_by_name_result(err);
        output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_table_epoch_by_name(args.session, args.table_name, args.new_epoch, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_set_table_epoch_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_table_epoch = function(seqid, input, output) {
  var args = new OmniSci_get_table_epoch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_epoch.length === 3) {
    Q.fcall(this._handler.get_table_epoch.bind(this._handler),
      args.session,
      args.db_id,
      args.table_id
    ).then(function(result) {
      var result_obj = new OmniSci_get_table_epoch_result({success: result});
      output.writeMessageBegin("get_table_epoch", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_table_epoch(args.session, args.db_id, args.table_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new OmniSci_get_table_epoch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_epoch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_table_epoch_by_name = function(seqid, input, output) {
  var args = new OmniSci_get_table_epoch_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_epoch_by_name.length === 2) {
    Q.fcall(this._handler.get_table_epoch_by_name.bind(this._handler),
      args.session,
      args.table_name
    ).then(function(result) {
      var result_obj = new OmniSci_get_table_epoch_by_name_result({success: result});
      output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_table_epoch_by_name(args.session, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new OmniSci_get_table_epoch_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
OmniSciProcessor.prototype.process_get_table_epochs = function(seqid, input, output) {
  var args = new OmniSci_get_table_epochs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_epochs.length === 3) {
    Q.fcall(this._handler.get_table_epochs.bind(this._handler),
      args.session,
      args.db_id,
      args.table_id
    ).then(function(result) {
      var result_obj = new OmniSci_get_table_epochs_result({success: result});
      output.writeMessageBegin("get_table_epochs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_table_epochs", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_table_epochs(args.session, args.db_id, args.table_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new OmniSci_get_table_epochs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_epochs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epochs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_set_table_epochs = function(seqid, input, output) {
  var args = new OmniSci_set_table_epochs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_table_epochs.length === 3) {
    Q.fcall(this._handler.set_table_epochs.bind(this._handler),
      args.session,
      args.db_id,
      args.table_epochs
    ).then(function(result) {
      var result_obj = new OmniSci_set_table_epochs_result({success: result});
      output.writeMessageBegin("set_table_epochs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("set_table_epochs", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_table_epochs(args.session, args.db_id, args.table_epochs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new OmniSci_set_table_epochs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_table_epochs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_table_epochs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_session_info = function(seqid, input, output) {
  var args = new OmniSci_get_session_info_args();
=======
MapDProcessor.prototype.process_get_session_info = function(seqid, input, output) {
  var args = new MapD_get_session_info_args();
>>>>>>> Update Thrift
=======
OmniSciProcessor.prototype.process_get_session_info = function(seqid, input, output) {
  var args = new OmniSci_get_session_info_args();
>>>>>>> Update Thrift
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_session_info.length === 1) {
    Q.fcall(this._handler.get_session_info.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_session_info_result({success: result});
      output.writeMessageBegin("get_session_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_session_info_result(err);
        output.writeMessageBegin("get_session_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_session_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_session_info(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_session_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_session_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_session_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_sql_execute = function(seqid, input, output) {
  var args = new OmniSci_sql_execute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_execute.length === 6) {
    Q.fcall(this._handler.sql_execute.bind(this._handler),
      args.session,
      args.query,
      args.column_format,
      args.nonce,
      args.first_n,
      args.at_most_n
    ).then(function(result) {
      var result_obj = new OmniSci_sql_execute_result({success: result});
      output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_sql_execute_result(err);
        output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.sql_execute(args.session, args.query, args.column_format, args.nonce, args.first_n, args.at_most_n, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_sql_execute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_sql_execute_df = function(seqid, input, output) {
  var args = new OmniSci_sql_execute_df_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
  if (this._handler.sql_execute_df.length === 6) {
    Q.fcall(this._handler.sql_execute_df.bind(this._handler),
      args.session,
      args.query,
      args.device_type,
      args.device_id,
      args.first_n,
      args.transport_method
    ).then(function(result) {
      var result_obj = new OmniSci_sql_execute_df_result({success: result});
      output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_sql_execute_df_result(err);
=======
  if (this._handler.sql_execute_df.length === 5) {
<<<<<<< HEAD
    Q.fcall(this._handler.sql_execute_df, args.session, args.query, args.device_type, args.device_id, args.first_n)
      .then(function(result) {
        var result_obj = new MapD_sql_execute_df_result({success: result});
>>>>>>> Update Thrift
=======
    Q.fcall(this._handler.sql_execute_df.bind(this._handler),
      args.session,
      args.query,
      args.device_type,
      args.device_id,
      args.first_n
    ).then(function(result) {
      var result_obj = new OmniSci_sql_execute_df_result({success: result});
      output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_sql_execute_df_result(err);
>>>>>>> Update Thrift
        output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute_df", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.sql_execute_df(args.session, args.query, args.device_type, args.device_id, args.first_n, args.transport_method, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_sql_execute_df_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute_df", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_sql_execute_gdf = function(seqid, input, output) {
  var args = new OmniSci_sql_execute_gdf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_execute_gdf.length === 4) {
    Q.fcall(this._handler.sql_execute_gdf.bind(this._handler),
      args.session,
      args.query,
      args.device_id,
      args.first_n
    ).then(function(result) {
      var result_obj = new OmniSci_sql_execute_gdf_result({success: result});
      output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_sql_execute_gdf_result(err);
        output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.sql_execute_gdf(args.session, args.query, args.device_id, args.first_n, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_sql_execute_gdf_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_deallocate_df = function(seqid, input, output) {
  var args = new OmniSci_deallocate_df_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deallocate_df.length === 4) {
    Q.fcall(this._handler.deallocate_df.bind(this._handler),
      args.session,
      args.df,
      args.device_type,
      args.device_id
    ).then(function(result) {
      var result_obj = new OmniSci_deallocate_df_result({success: result});
      output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_deallocate_df_result(err);
        output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deallocate_df", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deallocate_df(args.session, args.df, args.device_type, args.device_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_deallocate_df_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deallocate_df", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_interrupt = function(seqid, input, output) {
  var args = new OmniSci_interrupt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.interrupt.length === 2) {
    Q.fcall(this._handler.interrupt.bind(this._handler),
      args.query_session,
      args.interrupt_session
    ).then(function(result) {
      var result_obj = new OmniSci_interrupt_result({success: result});
      output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_interrupt_result(err);
        output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("interrupt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.interrupt(args.query_session, args.interrupt_session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_interrupt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("interrupt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_sql_validate = function(seqid, input, output) {
  var args = new OmniSci_sql_validate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_validate.length === 2) {
    Q.fcall(this._handler.sql_validate.bind(this._handler),
      args.session,
      args.query
    ).then(function(result) {
      var result_obj = new OmniSci_sql_validate_result({success: result});
      output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_sql_validate_result(err);
        output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_validate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.sql_validate(args.session, args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_sql_validate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_validate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_completion_hints = function(seqid, input, output) {
  var args = new OmniSci_get_completion_hints_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_completion_hints.length === 3) {
    Q.fcall(this._handler.get_completion_hints.bind(this._handler),
      args.session,
      args.sql,
      args.cursor
    ).then(function(result) {
      var result_obj = new OmniSci_get_completion_hints_result({success: result});
      output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_completion_hints_result(err);
        output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_completion_hints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_completion_hints(args.session, args.sql, args.cursor, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_completion_hints_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_completion_hints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_set_execution_mode = function(seqid, input, output) {
  var args = new OmniSci_set_execution_mode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_execution_mode.length === 2) {
    Q.fcall(this._handler.set_execution_mode.bind(this._handler),
      args.session,
      args.mode
    ).then(function(result) {
      var result_obj = new OmniSci_set_execution_mode_result({success: result});
      output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_set_execution_mode_result(err);
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_execution_mode(args.session, args.mode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_set_execution_mode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_render_vega = function(seqid, input, output) {
  var args = new OmniSci_render_vega_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.render_vega.length === 5) {
    Q.fcall(this._handler.render_vega.bind(this._handler),
      args.session,
      args.widget_id,
      args.vega_json,
      args.compression_level,
      args.nonce
    ).then(function(result) {
      var result_obj = new OmniSci_render_vega_result({success: result});
      output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_render_vega_result(err);
        output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("render_vega", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.render_vega(args.session, args.widget_id, args.vega_json, args.compression_level, args.nonce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_render_vega_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("render_vega", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_result_row_for_pixel = function(seqid, input, output) {
  var args = new OmniSci_get_result_row_for_pixel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_result_row_for_pixel.length === 7) {
    Q.fcall(this._handler.get_result_row_for_pixel.bind(this._handler),
      args.session,
      args.widget_id,
      args.pixel,
      args.table_col_names,
      args.column_format,
      args.pixelRadius,
      args.nonce
    ).then(function(result) {
      var result_obj = new OmniSci_get_result_row_for_pixel_result({success: result});
      output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_result_row_for_pixel_result(err);
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_result_row_for_pixel(args.session, args.widget_id, args.pixel, args.table_col_names, args.column_format, args.pixelRadius, args.nonce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_result_row_for_pixel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_dashboard = function(seqid, input, output) {
  var args = new OmniSci_get_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_dashboard.length === 2) {
    Q.fcall(this._handler.get_dashboard.bind(this._handler),
      args.session,
      args.dashboard_id
    ).then(function(result) {
      var result_obj = new OmniSci_get_dashboard_result({success: result});
      output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_dashboard_result(err);
        output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_dashboard(args.session, args.dashboard_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_dashboards = function(seqid, input, output) {
  var args = new OmniSci_get_dashboards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_dashboards.length === 1) {
    Q.fcall(this._handler.get_dashboards.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_dashboards_result({success: result});
      output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_dashboards_result(err);
        output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_dashboards(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_create_dashboard = function(seqid, input, output) {
  var args = new OmniSci_create_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_dashboard.length === 5) {
    Q.fcall(this._handler.create_dashboard.bind(this._handler),
      args.session,
      args.dashboard_name,
      args.dashboard_state,
      args.image_hash,
      args.dashboard_metadata
    ).then(function(result) {
      var result_obj = new OmniSci_create_dashboard_result({success: result});
      output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_create_dashboard_result(err);
        output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_dashboard(args.session, args.dashboard_name, args.dashboard_state, args.image_hash, args.dashboard_metadata, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_create_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_replace_dashboard = function(seqid, input, output) {
  var args = new OmniSci_replace_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.replace_dashboard.length === 7) {
    Q.fcall(this._handler.replace_dashboard.bind(this._handler),
      args.session,
      args.dashboard_id,
      args.dashboard_name,
      args.dashboard_owner,
      args.dashboard_state,
      args.image_hash,
      args.dashboard_metadata
    ).then(function(result) {
      var result_obj = new OmniSci_replace_dashboard_result({success: result});
      output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_replace_dashboard_result(err);
        output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("replace_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.replace_dashboard(args.session, args.dashboard_id, args.dashboard_name, args.dashboard_owner, args.dashboard_state, args.image_hash, args.dashboard_metadata, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_replace_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("replace_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_delete_dashboard = function(seqid, input, output) {
  var args = new OmniSci_delete_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_dashboard.length === 2) {
    Q.fcall(this._handler.delete_dashboard.bind(this._handler),
      args.session,
      args.dashboard_id
    ).then(function(result) {
      var result_obj = new OmniSci_delete_dashboard_result({success: result});
      output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_delete_dashboard_result(err);
        output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.delete_dashboard(args.session, args.dashboard_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_delete_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
OmniSciProcessor.prototype.process_share_dashboards = function(seqid, input, output) {
  var args = new OmniSci_share_dashboards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.share_dashboards.length === 4) {
    Q.fcall(this._handler.share_dashboards.bind(this._handler),
      args.session,
      args.dashboard_ids,
      args.groups,
      args.permissions
    ).then(function(result) {
      var result_obj = new OmniSci_share_dashboards_result({success: result});
      output.writeMessageBegin("share_dashboards", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_share_dashboards_result(err);
        output.writeMessageBegin("share_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("share_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.share_dashboards(args.session, args.dashboard_ids, args.groups, args.permissions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_share_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("share_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("share_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_delete_dashboards = function(seqid, input, output) {
  var args = new OmniSci_delete_dashboards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_dashboards.length === 2) {
    Q.fcall(this._handler.delete_dashboards.bind(this._handler),
      args.session,
      args.dashboard_ids
    ).then(function(result) {
      var result_obj = new OmniSci_delete_dashboards_result({success: result});
      output.writeMessageBegin("delete_dashboards", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_delete_dashboards_result(err);
        output.writeMessageBegin("delete_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.delete_dashboards(args.session, args.dashboard_ids, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_delete_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_share_dashboard = function(seqid, input, output) {
  var args = new OmniSci_share_dashboard_args();
=======
MapDProcessor.prototype.process_share_dashboard = function(seqid, input, output) {
  var args = new MapD_share_dashboard_args();
>>>>>>> Update Thrift
=======
OmniSciProcessor.prototype.process_share_dashboard = function(seqid, input, output) {
  var args = new OmniSci_share_dashboard_args();
>>>>>>> Update Thrift
  args.read(input);
  input.readMessageEnd();
  if (this._handler.share_dashboard.length === 6) {
    Q.fcall(this._handler.share_dashboard.bind(this._handler),
      args.session,
      args.dashboard_id,
      args.groups,
      args.objects,
      args.permissions,
      args.grant_role
    ).then(function(result) {
      var result_obj = new OmniSci_share_dashboard_result({success: result});
      output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_share_dashboard_result(err);
        output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("share_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.share_dashboard(args.session, args.dashboard_id, args.groups, args.objects, args.permissions, args.grant_role, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_share_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("share_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_unshare_dashboard = function(seqid, input, output) {
  var args = new OmniSci_unshare_dashboard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unshare_dashboard.length === 5) {
    Q.fcall(this._handler.unshare_dashboard.bind(this._handler),
      args.session,
      args.dashboard_id,
      args.groups,
      args.objects,
      args.permissions
    ).then(function(result) {
      var result_obj = new OmniSci_unshare_dashboard_result({success: result});
      output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_unshare_dashboard_result(err);
        output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.unshare_dashboard(args.session, args.dashboard_id, args.groups, args.objects, args.permissions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_unshare_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
OmniSciProcessor.prototype.process_unshare_dashboards = function(seqid, input, output) {
  var args = new OmniSci_unshare_dashboards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unshare_dashboards.length === 4) {
    Q.fcall(this._handler.unshare_dashboards.bind(this._handler),
      args.session,
      args.dashboard_ids,
      args.groups,
      args.permissions
    ).then(function(result) {
      var result_obj = new OmniSci_unshare_dashboards_result({success: result});
      output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_unshare_dashboards_result(err);
        output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.unshare_dashboards(args.session, args.dashboard_ids, args.groups, args.permissions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_unshare_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_dashboard_grantees = function(seqid, input, output) {
  var args = new OmniSci_get_dashboard_grantees_args();
=======
MapDProcessor.prototype.process_get_dashboard_grantees = function(seqid, input, output) {
  var args = new MapD_get_dashboard_grantees_args();
>>>>>>> Update Thrift
=======
OmniSciProcessor.prototype.process_get_dashboard_grantees = function(seqid, input, output) {
  var args = new OmniSci_get_dashboard_grantees_args();
>>>>>>> Update Thrift
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_dashboard_grantees.length === 2) {
    Q.fcall(this._handler.get_dashboard_grantees.bind(this._handler),
      args.session,
      args.dashboard_id
    ).then(function(result) {
      var result_obj = new OmniSci_get_dashboard_grantees_result({success: result});
      output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_dashboard_grantees_result(err);
        output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_dashboard_grantees(args.session, args.dashboard_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_dashboard_grantees_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_link_view = function(seqid, input, output) {
  var args = new OmniSci_get_link_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_link_view.length === 2) {
    Q.fcall(this._handler.get_link_view.bind(this._handler),
      args.session,
      args.link
    ).then(function(result) {
      var result_obj = new OmniSci_get_link_view_result({success: result});
      output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_link_view_result(err);
        output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_link_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_link_view(args.session, args.link, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_link_view_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_link_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_create_link = function(seqid, input, output) {
  var args = new OmniSci_create_link_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_link.length === 3) {
    Q.fcall(this._handler.create_link.bind(this._handler),
      args.session,
      args.view_state,
      args.view_metadata
    ).then(function(result) {
      var result_obj = new OmniSci_create_link_result({success: result});
      output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_create_link_result(err);
        output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_link", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_link(args.session, args.view_state, args.view_metadata, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_create_link_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_link", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_load_table_binary = function(seqid, input, output) {
  var args = new OmniSci_load_table_binary_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
  if (this._handler.load_table_binary.length === 4) {
    Q.fcall(this._handler.load_table_binary.bind(this._handler),
      args.session,
      args.table_name,
      args.rows,
      args.column_names
    ).then(function(result) {
      var result_obj = new OmniSci_load_table_binary_result({success: result});
      output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_load_table_binary_result(err);
=======
  if (this._handler.load_table_binary.length === 3) {
<<<<<<< HEAD
    Q.fcall(this._handler.load_table_binary, args.session, args.table_name, args.rows)
      .then(function(result) {
        var result_obj = new MapD_load_table_binary_result({success: result});
>>>>>>> Update Thrift
=======
    Q.fcall(this._handler.load_table_binary.bind(this._handler),
      args.session,
      args.table_name,
      args.rows
    ).then(function(result) {
      var result_obj = new OmniSci_load_table_binary_result({success: result});
      output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_load_table_binary_result(err);
>>>>>>> Update Thrift
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.load_table_binary(args.session, args.table_name, args.rows, args.column_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_load_table_binary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_load_table_binary_columnar = function(seqid, input, output) {
  var args = new OmniSci_load_table_binary_columnar_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
  if (this._handler.load_table_binary_columnar.length === 4) {
    Q.fcall(this._handler.load_table_binary_columnar.bind(this._handler),
      args.session,
      args.table_name,
      args.cols,
      args.column_names
    ).then(function(result) {
      var result_obj = new OmniSci_load_table_binary_columnar_result({success: result});
      output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_load_table_binary_columnar_result(err);
=======
  if (this._handler.load_table_binary_columnar.length === 3) {
<<<<<<< HEAD
    Q.fcall(this._handler.load_table_binary_columnar, args.session, args.table_name, args.cols)
      .then(function(result) {
        var result_obj = new MapD_load_table_binary_columnar_result({success: result});
>>>>>>> Update Thrift
=======
    Q.fcall(this._handler.load_table_binary_columnar.bind(this._handler),
      args.session,
      args.table_name,
      args.cols
    ).then(function(result) {
      var result_obj = new OmniSci_load_table_binary_columnar_result({success: result});
      output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_load_table_binary_columnar_result(err);
>>>>>>> Update Thrift
        output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.load_table_binary_columnar(args.session, args.table_name, args.cols, args.column_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_load_table_binary_columnar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_load_table_binary_arrow = function(seqid, input, output) {
  var args = new OmniSci_load_table_binary_arrow_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
  if (this._handler.load_table_binary_arrow.length === 4) {
    Q.fcall(this._handler.load_table_binary_arrow.bind(this._handler),
      args.session,
      args.table_name,
      args.arrow_stream,
      args.use_column_names
    ).then(function(result) {
      var result_obj = new OmniSci_load_table_binary_arrow_result({success: result});
      output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_load_table_binary_arrow_result(err);
=======
  if (this._handler.load_table_binary_arrow.length === 3) {
<<<<<<< HEAD
    Q.fcall(this._handler.load_table_binary_arrow, args.session, args.table_name, args.arrow_stream)
      .then(function(result) {
        var result_obj = new MapD_load_table_binary_arrow_result({success: result});
>>>>>>> Update Thrift
=======
    Q.fcall(this._handler.load_table_binary_arrow.bind(this._handler),
      args.session,
      args.table_name,
      args.arrow_stream
    ).then(function(result) {
      var result_obj = new OmniSci_load_table_binary_arrow_result({success: result});
      output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_load_table_binary_arrow_result(err);
>>>>>>> Update Thrift
        output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.load_table_binary_arrow(args.session, args.table_name, args.arrow_stream, args.use_column_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_load_table_binary_arrow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_load_table = function(seqid, input, output) {
  var args = new OmniSci_load_table_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
  if (this._handler.load_table.length === 4) {
    Q.fcall(this._handler.load_table.bind(this._handler),
      args.session,
      args.table_name,
      args.rows,
      args.column_names
    ).then(function(result) {
      var result_obj = new OmniSci_load_table_result({success: result});
      output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_load_table_result(err);
=======
  if (this._handler.load_table.length === 3) {
<<<<<<< HEAD
    Q.fcall(this._handler.load_table, args.session, args.table_name, args.rows)
      .then(function(result) {
        var result_obj = new MapD_load_table_result({success: result});
>>>>>>> Update Thrift
=======
    Q.fcall(this._handler.load_table.bind(this._handler),
      args.session,
      args.table_name,
      args.rows
    ).then(function(result) {
      var result_obj = new OmniSci_load_table_result({success: result});
      output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_load_table_result(err);
>>>>>>> Update Thrift
        output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.load_table(args.session, args.table_name, args.rows, args.column_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_load_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_detect_column_types = function(seqid, input, output) {
  var args = new OmniSci_detect_column_types_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.detect_column_types.length === 3) {
    Q.fcall(this._handler.detect_column_types.bind(this._handler),
      args.session,
      args.file_name,
      args.copy_params
    ).then(function(result) {
      var result_obj = new OmniSci_detect_column_types_result({success: result});
      output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_detect_column_types_result(err);
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.detect_column_types(args.session, args.file_name, args.copy_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_detect_column_types_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new OmniSci_create_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_table.length === 5) {
    Q.fcall(this._handler.create_table.bind(this._handler),
      args.session,
      args.table_name,
      args.row_desc,
      args.file_type,
      args.create_params
    ).then(function(result) {
      var result_obj = new OmniSci_create_table_result({success: result});
      output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_create_table_result(err);
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_table(args.session, args.table_name, args.row_desc, args.file_type, args.create_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_create_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_import_table = function(seqid, input, output) {
  var args = new OmniSci_import_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_table.length === 4) {
    Q.fcall(this._handler.import_table.bind(this._handler),
      args.session,
      args.table_name,
      args.file_name,
      args.copy_params
    ).then(function(result) {
      var result_obj = new OmniSci_import_table_result({success: result});
      output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_import_table_result(err);
        output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.import_table(args.session, args.table_name, args.file_name, args.copy_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_import_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_import_geo_table = function(seqid, input, output) {
  var args = new OmniSci_import_geo_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_geo_table.length === 6) {
    Q.fcall(this._handler.import_geo_table.bind(this._handler),
      args.session,
      args.table_name,
      args.file_name,
      args.copy_params,
      args.row_desc,
      args.create_params
    ).then(function(result) {
      var result_obj = new OmniSci_import_geo_table_result({success: result});
      output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_import_geo_table_result(err);
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.import_geo_table(args.session, args.table_name, args.file_name, args.copy_params, args.row_desc, args.create_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_import_geo_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_import_table_status = function(seqid, input, output) {
  var args = new OmniSci_import_table_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_table_status.length === 2) {
    Q.fcall(this._handler.import_table_status.bind(this._handler),
      args.session,
      args.import_id
    ).then(function(result) {
      var result_obj = new OmniSci_import_table_status_result({success: result});
      output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_import_table_status_result(err);
        output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_table_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.import_table_status(args.session, args.import_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_import_table_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_table_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_first_geo_file_in_archive = function(seqid, input, output) {
  var args = new OmniSci_get_first_geo_file_in_archive_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_first_geo_file_in_archive.length === 3) {
    Q.fcall(this._handler.get_first_geo_file_in_archive.bind(this._handler),
      args.session,
      args.archive_path,
      args.copy_params
    ).then(function(result) {
      var result_obj = new OmniSci_get_first_geo_file_in_archive_result({success: result});
      output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_first_geo_file_in_archive_result(err);
        output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_first_geo_file_in_archive(args.session, args.archive_path, args.copy_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_first_geo_file_in_archive_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_all_files_in_archive = function(seqid, input, output) {
  var args = new OmniSci_get_all_files_in_archive_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_files_in_archive.length === 3) {
    Q.fcall(this._handler.get_all_files_in_archive.bind(this._handler),
      args.session,
      args.archive_path,
      args.copy_params
    ).then(function(result) {
      var result_obj = new OmniSci_get_all_files_in_archive_result({success: result});
      output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_all_files_in_archive_result(err);
        output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_files_in_archive(args.session, args.archive_path, args.copy_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_all_files_in_archive_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_layers_in_geo_file = function(seqid, input, output) {
  var args = new OmniSci_get_layers_in_geo_file_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_layers_in_geo_file.length === 3) {
    Q.fcall(this._handler.get_layers_in_geo_file.bind(this._handler),
      args.session,
      args.file_name,
      args.copy_params
    ).then(function(result) {
      var result_obj = new OmniSci_get_layers_in_geo_file_result({success: result});
      output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_layers_in_geo_file_result(err);
        output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_layers_in_geo_file(args.session, args.file_name, args.copy_params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_layers_in_geo_file_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update Thrift
OmniSciProcessor.prototype.process_query_get_outer_fragment_count = function(seqid, input, output) {
  var args = new OmniSci_query_get_outer_fragment_count_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.query_get_outer_fragment_count.length === 2) {
    Q.fcall(this._handler.query_get_outer_fragment_count.bind(this._handler),
      args.session,
      args.query
    ).then(function(result) {
      var result_obj = new OmniSci_query_get_outer_fragment_count_result({success: result});
      output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_query_get_outer_fragment_count_result(err);
        output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.query_get_outer_fragment_count(args.session, args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_query_get_outer_fragment_count_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_check_table_consistency = function(seqid, input, output) {
  var args = new OmniSci_check_table_consistency_args();
<<<<<<< HEAD
=======
MapDProcessor.prototype.process_check_table_consistency = function(seqid, input, output) {
  var args = new MapD_check_table_consistency_args();
>>>>>>> Update Thrift
=======
>>>>>>> Update Thrift
  args.read(input);
  input.readMessageEnd();
  if (this._handler.check_table_consistency.length === 2) {
    Q.fcall(this._handler.check_table_consistency.bind(this._handler),
      args.session,
      args.table_id
    ).then(function(result) {
      var result_obj = new OmniSci_check_table_consistency_result({success: result});
      output.writeMessageBegin("check_table_consistency", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_check_table_consistency_result(err);
        output.writeMessageBegin("check_table_consistency", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("check_table_consistency", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.check_table_consistency(args.session, args.table_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_check_table_consistency_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("check_table_consistency", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("check_table_consistency", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_start_query = function(seqid, input, output) {
  var args = new OmniSci_start_query_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update Thrift
  if (this._handler.start_query.length === 5) {
    Q.fcall(this._handler.start_query.bind(this._handler),
      args.leaf_session,
      args.parent_session,
      args.query_ra,
      args.just_explain,
      args.outer_fragment_indices
    ).then(function(result) {
      var result_obj = new OmniSci_start_query_result({success: result});
      output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_start_query_result(err);
<<<<<<< HEAD
=======
  if (this._handler.start_query.length === 4) {
    Q.fcall(this._handler.start_query, args.leaf_session, args.parent_session, args.query_ra, args.just_explain)
      .then(function(result) {
        var result_obj = new MapD_start_query_result({success: result});
>>>>>>> Update Thrift
=======
>>>>>>> Update Thrift
        output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.start_query(args.leaf_session, args.parent_session, args.query_ra, args.just_explain, args.outer_fragment_indices, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_start_query_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_execute_query_step = function(seqid, input, output) {
  var args = new OmniSci_execute_query_step_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
  if (this._handler.execute_query_step.length === 2) {
    Q.fcall(this._handler.execute_query_step.bind(this._handler),
      args.pending_query,
      args.subquery_id
    ).then(function(result) {
      var result_obj = new OmniSci_execute_query_step_result({success: result});
      output.writeMessageBegin("execute_query_step", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_execute_query_step_result(err);
=======
  if (this._handler.execute_query_step.length === 1) {
<<<<<<< HEAD
    Q.fcall(this._handler.execute_query_step, args.pending_query)
      .then(function(result) {
        var result_obj = new MapD_execute_query_step_result({success: result});
>>>>>>> Update Thrift
=======
    Q.fcall(this._handler.execute_query_step.bind(this._handler),
      args.pending_query
    ).then(function(result) {
      var result_obj = new OmniSci_execute_query_step_result({success: result});
      output.writeMessageBegin("execute_query_step", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_execute_query_step_result(err);
>>>>>>> Update Thrift
        output.writeMessageBegin("execute_query_step", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute_query_step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.execute_query_step(args.pending_query, args.subquery_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_execute_query_step_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("execute_query_step", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute_query_step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_broadcast_serialized_rows = function(seqid, input, output) {
  var args = new OmniSci_broadcast_serialized_rows_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
  if (this._handler.broadcast_serialized_rows.length === 5) {
    Q.fcall(this._handler.broadcast_serialized_rows.bind(this._handler),
      args.serialized_rows,
      args.row_desc,
      args.query_id,
      args.subquery_id,
      args.is_final_subquery_result
    ).then(function(result) {
      var result_obj = new OmniSci_broadcast_serialized_rows_result({success: result});
      output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_broadcast_serialized_rows_result(err);
=======
  if (this._handler.broadcast_serialized_rows.length === 3) {
<<<<<<< HEAD
    Q.fcall(this._handler.broadcast_serialized_rows, args.serialized_rows, args.row_desc, args.query_id)
      .then(function(result) {
        var result_obj = new MapD_broadcast_serialized_rows_result({success: result});
>>>>>>> Update Thrift
=======
    Q.fcall(this._handler.broadcast_serialized_rows.bind(this._handler),
      args.serialized_rows,
      args.row_desc,
      args.query_id
    ).then(function(result) {
      var result_obj = new OmniSci_broadcast_serialized_rows_result({success: result});
      output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_broadcast_serialized_rows_result(err);
>>>>>>> Update Thrift
        output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.broadcast_serialized_rows(args.serialized_rows, args.row_desc, args.query_id, args.subquery_id, args.is_final_subquery_result, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_broadcast_serialized_rows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_start_render_query = function(seqid, input, output) {
  var args = new OmniSci_start_render_query_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start_render_query.length === 4) {
    Q.fcall(this._handler.start_render_query.bind(this._handler),
      args.session,
      args.widget_id,
      args.node_idx,
      args.vega_json
    ).then(function(result) {
      var result_obj = new OmniSci_start_render_query_result({success: result});
      output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_start_render_query_result(err);
        output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_render_query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.start_render_query(args.session, args.widget_id, args.node_idx, args.vega_json, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_start_render_query_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_render_query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_execute_next_render_step = function(seqid, input, output) {
  var args = new OmniSci_execute_next_render_step_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.execute_next_render_step.length === 2) {
    Q.fcall(this._handler.execute_next_render_step.bind(this._handler),
      args.pending_render,
      args.merged_data
    ).then(function(result) {
      var result_obj = new OmniSci_execute_next_render_step_result({success: result});
      output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_execute_next_render_step_result(err);
        output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.execute_next_render_step(args.pending_render, args.merged_data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_execute_next_render_step_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_insert_data = function(seqid, input, output) {
  var args = new OmniSci_insert_data_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insert_data.length === 2) {
    Q.fcall(this._handler.insert_data.bind(this._handler),
      args.session,
      args.insert_data
    ).then(function(result) {
      var result_obj = new OmniSci_insert_data_result({success: result});
      output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_insert_data_result(err);
        output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insert_data", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.insert_data(args.session, args.insert_data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_insert_data_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insert_data", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_checkpoint = function(seqid, input, output) {
  var args = new OmniSci_checkpoint_args();
  args.read(input);
  input.readMessageEnd();
<<<<<<< HEAD
  if (this._handler.checkpoint.length === 2) {
    Q.fcall(this._handler.checkpoint.bind(this._handler),
      args.session,
      args.table_id
    ).then(function(result) {
      var result_obj = new OmniSci_checkpoint_result({success: result});
      output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_checkpoint_result(err);
=======
  if (this._handler.checkpoint.length === 3) {
<<<<<<< HEAD
    Q.fcall(this._handler.checkpoint, args.session, args.db_id, args.table_id)
      .then(function(result) {
        var result_obj = new MapD_checkpoint_result({success: result});
>>>>>>> Update Thrift
=======
    Q.fcall(this._handler.checkpoint.bind(this._handler),
      args.session,
      args.db_id,
      args.table_id
    ).then(function(result) {
      var result_obj = new OmniSci_checkpoint_result({success: result});
      output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_checkpoint_result(err);
>>>>>>> Update Thrift
        output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.checkpoint(args.session, args.table_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_checkpoint_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_roles = function(seqid, input, output) {
  var args = new OmniSci_get_roles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_roles.length === 1) {
    Q.fcall(this._handler.get_roles.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_roles_result({success: result});
      output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_roles_result(err);
        output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_roles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_roles(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_roles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_roles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_db_objects_for_grantee = function(seqid, input, output) {
  var args = new OmniSci_get_db_objects_for_grantee_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_db_objects_for_grantee.length === 2) {
    Q.fcall(this._handler.get_db_objects_for_grantee.bind(this._handler),
      args.session,
      args.roleName
    ).then(function(result) {
      var result_obj = new OmniSci_get_db_objects_for_grantee_result({success: result});
      output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_db_objects_for_grantee_result(err);
        output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_db_objects_for_grantee(args.session, args.roleName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_db_objects_for_grantee_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_db_object_privs = function(seqid, input, output) {
  var args = new OmniSci_get_db_object_privs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_db_object_privs.length === 3) {
    Q.fcall(this._handler.get_db_object_privs.bind(this._handler),
      args.session,
      args.objectName,
      args.type
    ).then(function(result) {
      var result_obj = new OmniSci_get_db_object_privs_result({success: result});
      output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_db_object_privs_result(err);
        output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_db_object_privs(args.session, args.objectName, args.type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_db_object_privs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_all_roles_for_user = function(seqid, input, output) {
  var args = new OmniSci_get_all_roles_for_user_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_roles_for_user.length === 2) {
    Q.fcall(this._handler.get_all_roles_for_user.bind(this._handler),
      args.session,
      args.userName
    ).then(function(result) {
      var result_obj = new OmniSci_get_all_roles_for_user_result({success: result});
      output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_all_roles_for_user_result(err);
        output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_roles_for_user(args.session, args.userName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_all_roles_for_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_has_role = function(seqid, input, output) {
  var args = new OmniSci_has_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.has_role.length === 3) {
    Q.fcall(this._handler.has_role.bind(this._handler),
      args.session,
      args.granteeName,
      args.roleName
    ).then(function(result) {
      var result_obj = new OmniSci_has_role_result({success: result});
      output.writeMessageBegin("has_role", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_has_role_result(err);
        output.writeMessageBegin("has_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("has_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.has_role(args.session, args.granteeName, args.roleName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_has_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("has_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("has_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_has_object_privilege = function(seqid, input, output) {
  var args = new OmniSci_has_object_privilege_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.has_object_privilege.length === 5) {
    Q.fcall(this._handler.has_object_privilege.bind(this._handler),
      args.session,
      args.granteeName,
      args.ObjectName,
      args.objectType,
      args.permissions
    ).then(function(result) {
      var result_obj = new OmniSci_has_object_privilege_result({success: result});
      output.writeMessageBegin("has_object_privilege", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_has_object_privilege_result(err);
        output.writeMessageBegin("has_object_privilege", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("has_object_privilege", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.has_object_privilege(args.session, args.granteeName, args.ObjectName, args.objectType, args.permissions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_has_object_privilege_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("has_object_privilege", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("has_object_privilege", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_set_license_key = function(seqid, input, output) {
  var args = new OmniSci_set_license_key_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_license_key.length === 3) {
    Q.fcall(this._handler.set_license_key.bind(this._handler),
      args.session,
      args.key,
      args.nonce
    ).then(function(result) {
      var result_obj = new OmniSci_set_license_key_result({success: result});
      output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_set_license_key_result(err);
        output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_license_key", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_license_key(args.session, args.key, args.nonce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_set_license_key_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_license_key", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_license_claims = function(seqid, input, output) {
  var args = new OmniSci_get_license_claims_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_license_claims.length === 2) {
    Q.fcall(this._handler.get_license_claims.bind(this._handler),
      args.session,
      args.nonce
    ).then(function(result) {
      var result_obj = new OmniSci_get_license_claims_result({success: result});
      output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_license_claims_result(err);
        output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_license_claims", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_license_claims(args.session, args.nonce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_license_claims_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_license_claims", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_get_device_parameters = function(seqid, input, output) {
  var args = new OmniSci_get_device_parameters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_device_parameters.length === 1) {
    Q.fcall(this._handler.get_device_parameters.bind(this._handler),
      args.session
    ).then(function(result) {
      var result_obj = new OmniSci_get_device_parameters_result({success: result});
      output.writeMessageBegin("get_device_parameters", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_get_device_parameters_result(err);
        output.writeMessageBegin("get_device_parameters", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_device_parameters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_device_parameters(args.session, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_get_device_parameters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_device_parameters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_device_parameters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OmniSciProcessor.prototype.process_register_runtime_extension_functions = function(seqid, input, output) {
  var args = new OmniSci_register_runtime_extension_functions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.register_runtime_extension_functions.length === 4) {
    Q.fcall(this._handler.register_runtime_extension_functions.bind(this._handler),
      args.session,
      args.udfs,
      args.udtfs,
      args.device_ir_map
    ).then(function(result) {
      var result_obj = new OmniSci_register_runtime_extension_functions_result({success: result});
      output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TOmniSciException) {
        result = new OmniSci_register_runtime_extension_functions_result(err);
        output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.register_runtime_extension_functions(args.session, args.udfs, args.udtfs, args.device_ir_map, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TOmniSciException) {
        result_obj = new OmniSci_register_runtime_extension_functions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
