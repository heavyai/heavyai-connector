//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TResultSetLayout = {
  'GroupByPerfectHash' : 0,
  'GroupByBaselineHash' : 1,
  'Projection' : 2,
  'NonGroupedAggregate' : 3
};
TCountDistinctImplType = {
  'Invalid' : 0,
  'Bitmap' : 1,
  'StdSet' : 2
};
TAggKind = {
  'AVG' : 0,
  'MIN' : 1,
  'MAX' : 2,
  'SUM' : 3,
  'COUNT' : 4,
  'APPROX_COUNT_DISTINCT' : 5,
  'SAMPLE' : 6
};
TSlotSize = function(args) {
  this.padded = null;
  this.logical = null;
  if (args) {
    if (args.padded !== undefined && args.padded !== null) {
      this.padded = args.padded;
    }
    if (args.logical !== undefined && args.logical !== null) {
      this.logical = args.logical;
    }
  }
};
TSlotSize.prototype = {};
TSlotSize.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.padded = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.logical = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSlotSize.prototype.write = function(output) {
  output.writeStructBegin('TSlotSize');
  if (this.padded !== null && this.padded !== undefined) {
    output.writeFieldBegin('padded', Thrift.Type.I16, 1);
    output.writeI16(this.padded);
    output.writeFieldEnd();
  }
  if (this.logical !== null && this.logical !== undefined) {
    output.writeFieldBegin('logical', Thrift.Type.I16, 2);
    output.writeI16(this.logical);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColSlotContext = function(args) {
  this.slot_sizes = null;
  this.col_to_slot_map = null;
  if (args) {
    if (args.slot_sizes !== undefined && args.slot_sizes !== null) {
      this.slot_sizes = Thrift.copyList(args.slot_sizes, [TSlotSize]);
    }
    if (args.col_to_slot_map !== undefined && args.col_to_slot_map !== null) {
      this.col_to_slot_map = Thrift.copyList(args.col_to_slot_map, [Thrift.copyList, null]);
    }
  }
};
TColSlotContext.prototype = {};
TColSlotContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.slot_sizes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TSlotSize();
          elem6.read(input);
          this.slot_sizes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.col_to_slot_map = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          var _size14 = 0;
          var _rtmp318;
          elem13 = [];
          var _etype17 = 0;
          _rtmp318 = input.readListBegin();
          _etype17 = _rtmp318.etype;
          _size14 = _rtmp318.size;
          for (var _i19 = 0; _i19 < _size14; ++_i19)
          {
            var elem20 = null;
            elem20 = input.readI32().value;
            elem13.push(elem20);
          }
          input.readListEnd();
          this.col_to_slot_map.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColSlotContext.prototype.write = function(output) {
  output.writeStructBegin('TColSlotContext');
  if (this.slot_sizes !== null && this.slot_sizes !== undefined) {
    output.writeFieldBegin('slot_sizes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.slot_sizes.length);
    for (var iter21 in this.slot_sizes)
    {
      if (this.slot_sizes.hasOwnProperty(iter21))
      {
        iter21 = this.slot_sizes[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.col_to_slot_map !== null && this.col_to_slot_map !== undefined) {
    output.writeFieldBegin('col_to_slot_map', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.col_to_slot_map.length);
    for (var iter22 in this.col_to_slot_map)
    {
      if (this.col_to_slot_map.hasOwnProperty(iter22))
      {
        iter22 = this.col_to_slot_map[iter22];
        output.writeListBegin(Thrift.Type.I32, iter22.length);
        for (var iter23 in iter22)
        {
          if (iter22.hasOwnProperty(iter23))
          {
            iter23 = iter22[iter23];
            output.writeI32(iter23);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCountDistinctDescriptor = function(args) {
  this.impl_type = null;
  this.min_val = null;
  this.bitmap_sz_bits = null;
  this.approximate = null;
  this.device_type = null;
  this.sub_bitmap_count = null;
  if (args) {
    if (args.impl_type !== undefined && args.impl_type !== null) {
      this.impl_type = args.impl_type;
    }
    if (args.min_val !== undefined && args.min_val !== null) {
      this.min_val = args.min_val;
    }
    if (args.bitmap_sz_bits !== undefined && args.bitmap_sz_bits !== null) {
      this.bitmap_sz_bits = args.bitmap_sz_bits;
    }
    if (args.approximate !== undefined && args.approximate !== null) {
      this.approximate = args.approximate;
    }
    if (args.device_type !== undefined && args.device_type !== null) {
      this.device_type = args.device_type;
    }
    if (args.sub_bitmap_count !== undefined && args.sub_bitmap_count !== null) {
      this.sub_bitmap_count = args.sub_bitmap_count;
    }
  }
};
TCountDistinctDescriptor.prototype = {};
TCountDistinctDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.impl_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.min_val = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.bitmap_sz_bits = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.approximate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.device_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.sub_bitmap_count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCountDistinctDescriptor.prototype.write = function(output) {
  output.writeStructBegin('TCountDistinctDescriptor');
  if (this.impl_type !== null && this.impl_type !== undefined) {
    output.writeFieldBegin('impl_type', Thrift.Type.I32, 1);
    output.writeI32(this.impl_type);
    output.writeFieldEnd();
  }
  if (this.min_val !== null && this.min_val !== undefined) {
    output.writeFieldBegin('min_val', Thrift.Type.I64, 2);
    output.writeI64(this.min_val);
    output.writeFieldEnd();
  }
  if (this.bitmap_sz_bits !== null && this.bitmap_sz_bits !== undefined) {
    output.writeFieldBegin('bitmap_sz_bits', Thrift.Type.I64, 3);
    output.writeI64(this.bitmap_sz_bits);
    output.writeFieldEnd();
  }
  if (this.approximate !== null && this.approximate !== undefined) {
    output.writeFieldBegin('approximate', Thrift.Type.BOOL, 4);
    output.writeBool(this.approximate);
    output.writeFieldEnd();
  }
  if (this.device_type !== null && this.device_type !== undefined) {
    output.writeFieldBegin('device_type', Thrift.Type.I32, 5);
    output.writeI32(this.device_type);
    output.writeFieldEnd();
  }
  if (this.sub_bitmap_count !== null && this.sub_bitmap_count !== undefined) {
    output.writeFieldBegin('sub_bitmap_count', Thrift.Type.I64, 6);
    output.writeI64(this.sub_bitmap_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TResultSetBufferDescriptor = function(args) {
  this.layout = null;
  this.keyless = null;
  this.entry_count = null;
  this.idx_target_as_key = null;
  this.min_val = null;
  this.max_val = null;
  this.bucket = null;
  this.group_col_widths = null;
  this.key_bytewidth = null;
  this.col_slot_context = null;
  this.target_groupby_indices = null;
  this.count_distinct_descriptors = null;
  this.force_4byte_float = null;
  if (args) {
    if (args.layout !== undefined && args.layout !== null) {
      this.layout = args.layout;
    }
    if (args.keyless !== undefined && args.keyless !== null) {
      this.keyless = args.keyless;
    }
    if (args.entry_count !== undefined && args.entry_count !== null) {
      this.entry_count = args.entry_count;
    }
    if (args.idx_target_as_key !== undefined && args.idx_target_as_key !== null) {
      this.idx_target_as_key = args.idx_target_as_key;
    }
    if (args.min_val !== undefined && args.min_val !== null) {
      this.min_val = args.min_val;
    }
    if (args.max_val !== undefined && args.max_val !== null) {
      this.max_val = args.max_val;
    }
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.group_col_widths !== undefined && args.group_col_widths !== null) {
      this.group_col_widths = Thrift.copyList(args.group_col_widths, [null]);
    }
    if (args.key_bytewidth !== undefined && args.key_bytewidth !== null) {
      this.key_bytewidth = args.key_bytewidth;
    }
    if (args.col_slot_context !== undefined && args.col_slot_context !== null) {
      this.col_slot_context = new TColSlotContext(args.col_slot_context);
    }
    if (args.target_groupby_indices !== undefined && args.target_groupby_indices !== null) {
      this.target_groupby_indices = Thrift.copyList(args.target_groupby_indices, [null]);
    }
    if (args.count_distinct_descriptors !== undefined && args.count_distinct_descriptors !== null) {
      this.count_distinct_descriptors = Thrift.copyList(args.count_distinct_descriptors, [TCountDistinctDescriptor]);
    }
    if (args.force_4byte_float !== undefined && args.force_4byte_float !== null) {
      this.force_4byte_float = args.force_4byte_float;
    }
  }
};
TResultSetBufferDescriptor.prototype = {};
TResultSetBufferDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.layout = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.keyless = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.entry_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.idx_target_as_key = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.min_val = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.max_val = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.bucket = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.group_col_widths = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI16().value;
          this.group_col_widths.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I16) {
        this.key_bytewidth = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.col_slot_context = new TColSlotContext();
        this.col_slot_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.target_groupby_indices = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = input.readI32().value;
          this.target_groupby_indices.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.count_distinct_descriptors = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new TCountDistinctDescriptor();
          elem44.read(input);
          this.count_distinct_descriptors.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.force_4byte_float = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResultSetBufferDescriptor.prototype.write = function(output) {
  output.writeStructBegin('TResultSetBufferDescriptor');
  if (this.layout !== null && this.layout !== undefined) {
    output.writeFieldBegin('layout', Thrift.Type.I32, 1);
    output.writeI32(this.layout);
    output.writeFieldEnd();
  }
  if (this.keyless !== null && this.keyless !== undefined) {
    output.writeFieldBegin('keyless', Thrift.Type.BOOL, 2);
    output.writeBool(this.keyless);
    output.writeFieldEnd();
  }
  if (this.entry_count !== null && this.entry_count !== undefined) {
    output.writeFieldBegin('entry_count', Thrift.Type.I32, 3);
    output.writeI32(this.entry_count);
    output.writeFieldEnd();
  }
  if (this.idx_target_as_key !== null && this.idx_target_as_key !== undefined) {
    output.writeFieldBegin('idx_target_as_key', Thrift.Type.I32, 4);
    output.writeI32(this.idx_target_as_key);
    output.writeFieldEnd();
  }
  if (this.min_val !== null && this.min_val !== undefined) {
    output.writeFieldBegin('min_val', Thrift.Type.I64, 5);
    output.writeI64(this.min_val);
    output.writeFieldEnd();
  }
  if (this.max_val !== null && this.max_val !== undefined) {
    output.writeFieldBegin('max_val', Thrift.Type.I64, 6);
    output.writeI64(this.max_val);
    output.writeFieldEnd();
  }
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);
    output.writeI64(this.bucket);
    output.writeFieldEnd();
  }
  if (this.group_col_widths !== null && this.group_col_widths !== undefined) {
    output.writeFieldBegin('group_col_widths', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.I16, this.group_col_widths.length);
    for (var iter45 in this.group_col_widths)
    {
      if (this.group_col_widths.hasOwnProperty(iter45))
      {
        iter45 = this.group_col_widths[iter45];
        output.writeI16(iter45);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.key_bytewidth !== null && this.key_bytewidth !== undefined) {
    output.writeFieldBegin('key_bytewidth', Thrift.Type.I16, 9);
    output.writeI16(this.key_bytewidth);
    output.writeFieldEnd();
  }
  if (this.col_slot_context !== null && this.col_slot_context !== undefined) {
    output.writeFieldBegin('col_slot_context', Thrift.Type.STRUCT, 10);
    this.col_slot_context.write(output);
    output.writeFieldEnd();
  }
  if (this.target_groupby_indices !== null && this.target_groupby_indices !== undefined) {
    output.writeFieldBegin('target_groupby_indices', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.I32, this.target_groupby_indices.length);
    for (var iter46 in this.target_groupby_indices)
    {
      if (this.target_groupby_indices.hasOwnProperty(iter46))
      {
        iter46 = this.target_groupby_indices[iter46];
        output.writeI32(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.count_distinct_descriptors !== null && this.count_distinct_descriptors !== undefined) {
    output.writeFieldBegin('count_distinct_descriptors', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.count_distinct_descriptors.length);
    for (var iter47 in this.count_distinct_descriptors)
    {
      if (this.count_distinct_descriptors.hasOwnProperty(iter47))
      {
        iter47 = this.count_distinct_descriptors[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.force_4byte_float !== null && this.force_4byte_float !== undefined) {
    output.writeFieldBegin('force_4byte_float', Thrift.Type.BOOL, 13);
    output.writeBool(this.force_4byte_float);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTargetInfo = function(args) {
  this.is_agg = null;
  this.kind = null;
  this.type = null;
  this.arg_type = null;
  this.skip_nulls = null;
  this.is_distinct = null;
  if (args) {
    if (args.is_agg !== undefined && args.is_agg !== null) {
      this.is_agg = args.is_agg;
    }
    if (args.kind !== undefined && args.kind !== null) {
      this.kind = args.kind;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = new TTypeInfo(args.type);
    }
    if (args.arg_type !== undefined && args.arg_type !== null) {
      this.arg_type = new TTypeInfo(args.arg_type);
    }
    if (args.skip_nulls !== undefined && args.skip_nulls !== null) {
      this.skip_nulls = args.skip_nulls;
    }
    if (args.is_distinct !== undefined && args.is_distinct !== null) {
      this.is_distinct = args.is_distinct;
    }
  }
};
TTargetInfo.prototype = {};
TTargetInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.is_agg = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.kind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.type = new TTypeInfo();
        this.type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg_type = new TTypeInfo();
        this.arg_type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.skip_nulls = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.is_distinct = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTargetInfo.prototype.write = function(output) {
  output.writeStructBegin('TTargetInfo');
  if (this.is_agg !== null && this.is_agg !== undefined) {
    output.writeFieldBegin('is_agg', Thrift.Type.BOOL, 1);
    output.writeBool(this.is_agg);
    output.writeFieldEnd();
  }
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.I32, 2);
    output.writeI32(this.kind);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 3);
    this.type.write(output);
    output.writeFieldEnd();
  }
  if (this.arg_type !== null && this.arg_type !== undefined) {
    output.writeFieldBegin('arg_type', Thrift.Type.STRUCT, 4);
    this.arg_type.write(output);
    output.writeFieldEnd();
  }
  if (this.skip_nulls !== null && this.skip_nulls !== undefined) {
    output.writeFieldBegin('skip_nulls', Thrift.Type.BOOL, 5);
    output.writeBool(this.skip_nulls);
    output.writeFieldEnd();
  }
  if (this.is_distinct !== null && this.is_distinct !== undefined) {
    output.writeFieldBegin('is_distinct', Thrift.Type.BOOL, 6);
    output.writeBool(this.is_distinct);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCountDistinctSetStorage = function(args) {
  this.bitmap = null;
  this.sparse_set = null;
  if (args) {
    if (args.bitmap !== undefined && args.bitmap !== null) {
      this.bitmap = args.bitmap;
    }
    if (args.sparse_set !== undefined && args.sparse_set !== null) {
      this.sparse_set = Thrift.copyList(args.sparse_set, [null]);
    }
  }
};
TCountDistinctSetStorage.prototype = {};
TCountDistinctSetStorage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bitmap = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size48 = 0;
        var _rtmp352;
        this.sparse_set = [];
        var _etype51 = 0;
        _rtmp352 = input.readSetBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readI64().value;
          this.sparse_set.push(elem54);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCountDistinctSetStorage.prototype.write = function(output) {
  output.writeStructBegin('TCountDistinctSetStorage');
  if (this.bitmap !== null && this.bitmap !== undefined) {
    output.writeFieldBegin('bitmap', Thrift.Type.STRING, 1);
    output.writeBinary(this.bitmap);
    output.writeFieldEnd();
  }
  if (this.sparse_set !== null && this.sparse_set !== undefined) {
    output.writeFieldBegin('sparse_set', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I64, this.sparse_set.length);
    for (var iter55 in this.sparse_set)
    {
      if (this.sparse_set.hasOwnProperty(iter55))
      {
        iter55 = this.sparse_set[iter55];
        output.writeI64(iter55);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCountDistinctSet = function(args) {
  this.type = null;
  this.storage = null;
  this.remote_ptr = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.storage !== undefined && args.storage !== null) {
      this.storage = new TCountDistinctSetStorage(args.storage);
    }
    if (args.remote_ptr !== undefined && args.remote_ptr !== null) {
      this.remote_ptr = args.remote_ptr;
    }
  }
};
TCountDistinctSet.prototype = {};
TCountDistinctSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.storage = new TCountDistinctSetStorage();
        this.storage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.remote_ptr = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCountDistinctSet.prototype.write = function(output) {
  output.writeStructBegin('TCountDistinctSet');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.storage !== null && this.storage !== undefined) {
    output.writeFieldBegin('storage', Thrift.Type.STRUCT, 2);
    this.storage.write(output);
    output.writeFieldEnd();
  }
  if (this.remote_ptr !== null && this.remote_ptr !== undefined) {
    output.writeFieldBegin('remote_ptr', Thrift.Type.I64, 3);
    output.writeI64(this.remote_ptr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSerializedRows = function(args) {
  this.buffers = null;
  this.buffer_lengths = null;
  this.buffers_total_size = null;
  this.total_compression_time_ms = null;
  this.descriptor = null;
  this.targets = null;
  this.target_init_vals = null;
  this.varlen_buffer = null;
  this.count_distinct_sets = null;
  this.explanation = null;
  if (args) {
    if (args.buffers !== undefined && args.buffers !== null) {
      this.buffers = Thrift.copyList(args.buffers, [null]);
    }
    if (args.buffer_lengths !== undefined && args.buffer_lengths !== null) {
      this.buffer_lengths = Thrift.copyList(args.buffer_lengths, [null]);
    }
    if (args.buffers_total_size !== undefined && args.buffers_total_size !== null) {
      this.buffers_total_size = args.buffers_total_size;
    }
    if (args.total_compression_time_ms !== undefined && args.total_compression_time_ms !== null) {
      this.total_compression_time_ms = args.total_compression_time_ms;
    }
    if (args.descriptor !== undefined && args.descriptor !== null) {
      this.descriptor = new TResultSetBufferDescriptor(args.descriptor);
    }
    if (args.targets !== undefined && args.targets !== null) {
      this.targets = Thrift.copyList(args.targets, [TTargetInfo]);
    }
    if (args.target_init_vals !== undefined && args.target_init_vals !== null) {
      this.target_init_vals = Thrift.copyList(args.target_init_vals, [null]);
    }
    if (args.varlen_buffer !== undefined && args.varlen_buffer !== null) {
      this.varlen_buffer = Thrift.copyList(args.varlen_buffer, [null]);
    }
    if (args.count_distinct_sets !== undefined && args.count_distinct_sets !== null) {
      this.count_distinct_sets = Thrift.copyList(args.count_distinct_sets, [TCountDistinctSet]);
    }
    if (args.explanation !== undefined && args.explanation !== null) {
      this.explanation = args.explanation;
    }
  }
};
TSerializedRows.prototype = {};
TSerializedRows.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.buffers = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readBinary().value;
          this.buffers.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.buffer_lengths = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = input.readI64().value;
          this.buffer_lengths.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.buffers_total_size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.total_compression_time_ms = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.descriptor = new TResultSetBufferDescriptor();
        this.descriptor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.targets = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new TTargetInfo();
          elem76.read(input);
          this.targets.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size77 = 0;
        var _rtmp381;
        this.target_init_vals = [];
        var _etype80 = 0;
        _rtmp381 = input.readListBegin();
        _etype80 = _rtmp381.etype;
        _size77 = _rtmp381.size;
        for (var _i82 = 0; _i82 < _size77; ++_i82)
        {
          var elem83 = null;
          elem83 = input.readI64().value;
          this.target_init_vals.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.varlen_buffer = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readBinary().value;
          this.varlen_buffer.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size91 = 0;
        var _rtmp395;
        this.count_distinct_sets = [];
        var _etype94 = 0;
        _rtmp395 = input.readListBegin();
        _etype94 = _rtmp395.etype;
        _size91 = _rtmp395.size;
        for (var _i96 = 0; _i96 < _size91; ++_i96)
        {
          var elem97 = null;
          elem97 = new TCountDistinctSet();
          elem97.read(input);
          this.count_distinct_sets.push(elem97);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.explanation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSerializedRows.prototype.write = function(output) {
  output.writeStructBegin('TSerializedRows');
  if (this.buffers !== null && this.buffers !== undefined) {
    output.writeFieldBegin('buffers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.buffers.length);
    for (var iter98 in this.buffers)
    {
      if (this.buffers.hasOwnProperty(iter98))
      {
        iter98 = this.buffers[iter98];
        output.writeBinary(iter98);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.buffer_lengths !== null && this.buffer_lengths !== undefined) {
    output.writeFieldBegin('buffer_lengths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.buffer_lengths.length);
    for (var iter99 in this.buffer_lengths)
    {
      if (this.buffer_lengths.hasOwnProperty(iter99))
      {
        iter99 = this.buffer_lengths[iter99];
        output.writeI64(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.buffers_total_size !== null && this.buffers_total_size !== undefined) {
    output.writeFieldBegin('buffers_total_size', Thrift.Type.I64, 3);
    output.writeI64(this.buffers_total_size);
    output.writeFieldEnd();
  }
  if (this.total_compression_time_ms !== null && this.total_compression_time_ms !== undefined) {
    output.writeFieldBegin('total_compression_time_ms', Thrift.Type.I32, 4);
    output.writeI32(this.total_compression_time_ms);
    output.writeFieldEnd();
  }
  if (this.descriptor !== null && this.descriptor !== undefined) {
    output.writeFieldBegin('descriptor', Thrift.Type.STRUCT, 5);
    this.descriptor.write(output);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);
    for (var iter100 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter100))
      {
        iter100 = this.targets[iter100];
        iter100.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.target_init_vals !== null && this.target_init_vals !== undefined) {
    output.writeFieldBegin('target_init_vals', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I64, this.target_init_vals.length);
    for (var iter101 in this.target_init_vals)
    {
      if (this.target_init_vals.hasOwnProperty(iter101))
      {
        iter101 = this.target_init_vals[iter101];
        output.writeI64(iter101);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.varlen_buffer !== null && this.varlen_buffer !== undefined) {
    output.writeFieldBegin('varlen_buffer', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.varlen_buffer.length);
    for (var iter102 in this.varlen_buffer)
    {
      if (this.varlen_buffer.hasOwnProperty(iter102))
      {
        iter102 = this.varlen_buffer[iter102];
        output.writeBinary(iter102);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.count_distinct_sets !== null && this.count_distinct_sets !== undefined) {
    output.writeFieldBegin('count_distinct_sets', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.count_distinct_sets.length);
    for (var iter103 in this.count_distinct_sets)
    {
      if (this.count_distinct_sets.hasOwnProperty(iter103))
      {
        iter103 = this.count_distinct_sets[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.explanation !== null && this.explanation !== undefined) {
    output.writeFieldBegin('explanation', Thrift.Type.STRING, 10);
    output.writeString(this.explanation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

