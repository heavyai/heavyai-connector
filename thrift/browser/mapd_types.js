//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TDatumType = {
  'SMALLINT' : 0,
  'INT' : 1,
  'BIGINT' : 2,
  'FLOAT' : 3,
  'DECIMAL' : 4,
  'DOUBLE' : 5,
  'STR' : 6,
  'TIME' : 7,
  'TIMESTAMP' : 8,
  'DATE' : 9,
  'BOOL' : 10,
  'INTERVAL_DAY_TIME' : 11,
  'INTERVAL_YEAR_MONTH' : 12,
  'POINT' : 13,
  'LINESTRING' : 14,
  'POLYGON' : 15,
  'MULTIPOLYGON' : 16,
  'TINYINT' : 17,
  'GEOMETRY' : 18,
  'GEOGRAPHY' : 19
};
TEncodingType = {
  'NONE' : 0,
  'FIXED' : 1,
  'RL' : 2,
  'DIFF' : 3,
  'DICT' : 4,
  'SPARSE' : 5,
  'GEOINT' : 6
};
TExecuteMode = {
  'HYBRID' : 0,
  'GPU' : 1,
  'CPU' : 2
};
TDeviceType = {
  'CPU' : 0,
  'GPU' : 1
};
TTableType = {
  'DELIMITED' : 0,
  'POLYGON' : 1
};
TMergeType = {
  'UNION' : 0,
  'REDUCE' : 1
};
TExpressionRangeType = {
  'INVALID' : 0,
  'INTEGER' : 1,
  'FLOAT' : 2,
  'DOUBLE' : 3
};
TDBObjectType = {
  'AbstractDBObjectType' : 0,
  'DatabaseDBObjectType' : 1,
  'TableDBObjectType' : 2,
  'DashboardDBObjectType' : 3,
  'ViewDBObjectType' : 4
};
TDatumVal = function(args) {
  this.int_val = null;
  this.real_val = null;
  this.str_val = null;
  this.arr_val = null;
  if (args) {
    if (args.int_val !== undefined && args.int_val !== null) {
      this.int_val = args.int_val;
    }
    if (args.real_val !== undefined && args.real_val !== null) {
      this.real_val = args.real_val;
    }
    if (args.str_val !== undefined && args.str_val !== null) {
      this.str_val = args.str_val;
    }
    if (args.arr_val !== undefined && args.arr_val !== null) {
      this.arr_val = Thrift.copyList(args.arr_val, [null]);
    }
  }
};
TDatumVal.prototype = {};
TDatumVal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.int_val = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.real_val = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.str_val = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.arr_val = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TDatum();
          elem6.read(input);
          this.arr_val.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDatumVal.prototype.write = function(output) {
  output.writeStructBegin('TDatumVal');
  if (this.int_val !== null && this.int_val !== undefined) {
    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);
    output.writeI64(this.int_val);
    output.writeFieldEnd();
  }
  if (this.real_val !== null && this.real_val !== undefined) {
    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.real_val);
    output.writeFieldEnd();
  }
  if (this.str_val !== null && this.str_val !== undefined) {
    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);
    output.writeString(this.str_val);
    output.writeFieldEnd();
  }
  if (this.arr_val !== null && this.arr_val !== undefined) {
    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);
    for (var iter7 in this.arr_val)
    {
      if (this.arr_val.hasOwnProperty(iter7))
      {
        iter7 = this.arr_val[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDatum = function(args) {
  this.val = null;
  this.is_null = null;
  if (args) {
    if (args.val !== undefined && args.val !== null) {
      this.val = new TDatumVal(args.val);
    }
    if (args.is_null !== undefined && args.is_null !== null) {
      this.is_null = args.is_null;
    }
  }
};
TDatum.prototype = {};
TDatum.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.val = new TDatumVal();
        this.val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.is_null = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDatum.prototype.write = function(output) {
  output.writeStructBegin('TDatum');
  if (this.val !== null && this.val !== undefined) {
    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);
    this.val.write(output);
    output.writeFieldEnd();
  }
  if (this.is_null !== null && this.is_null !== undefined) {
    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
    output.writeBool(this.is_null);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStringValue = function(args) {
  this.str_val = null;
  this.is_null = null;
  if (args) {
    if (args.str_val !== undefined && args.str_val !== null) {
      this.str_val = args.str_val;
    }
    if (args.is_null !== undefined && args.is_null !== null) {
      this.is_null = args.is_null;
    }
  }
};
TStringValue.prototype = {};
TStringValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.str_val = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.is_null = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringValue.prototype.write = function(output) {
  output.writeStructBegin('TStringValue');
  if (this.str_val !== null && this.str_val !== undefined) {
    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);
    output.writeString(this.str_val);
    output.writeFieldEnd();
  }
  if (this.is_null !== null && this.is_null !== undefined) {
    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
    output.writeBool(this.is_null);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTypeInfo = function(args) {
  this.type = null;
  this.encoding = null;
  this.nullable = null;
  this.is_array = null;
  this.precision = null;
  this.scale = null;
  this.comp_param = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.encoding !== undefined && args.encoding !== null) {
      this.encoding = args.encoding;
    }
    if (args.nullable !== undefined && args.nullable !== null) {
      this.nullable = args.nullable;
    }
    if (args.is_array !== undefined && args.is_array !== null) {
      this.is_array = args.is_array;
    }
    if (args.precision !== undefined && args.precision !== null) {
      this.precision = args.precision;
    }
    if (args.scale !== undefined && args.scale !== null) {
      this.scale = args.scale;
    }
    if (args.comp_param !== undefined && args.comp_param !== null) {
      this.comp_param = args.comp_param;
    }
  }
};
TTypeInfo.prototype = {};
TTypeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.nullable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_array = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.precision = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.scale = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.comp_param = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeInfo.prototype.write = function(output) {
  output.writeStructBegin('TTypeInfo');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.nullable !== null && this.nullable !== undefined) {
    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);
    output.writeBool(this.nullable);
    output.writeFieldEnd();
  }
  if (this.is_array !== null && this.is_array !== undefined) {
    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_array);
    output.writeFieldEnd();
  }
  if (this.precision !== null && this.precision !== undefined) {
    output.writeFieldBegin('precision', Thrift.Type.I32, 5);
    output.writeI32(this.precision);
    output.writeFieldEnd();
  }
  if (this.scale !== null && this.scale !== undefined) {
    output.writeFieldBegin('scale', Thrift.Type.I32, 6);
    output.writeI32(this.scale);
    output.writeFieldEnd();
  }
  if (this.comp_param !== null && this.comp_param !== undefined) {
    output.writeFieldBegin('comp_param', Thrift.Type.I32, 7);
    output.writeI32(this.comp_param);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumnType = function(args) {
  this.col_name = null;
  this.col_type = null;
  this.is_reserved_keyword = null;
  this.src_name = null;
  this.is_system = null;
  this.is_physical = null;
  if (args) {
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name;
    }
    if (args.col_type !== undefined && args.col_type !== null) {
      this.col_type = new TTypeInfo(args.col_type);
    }
    if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {
      this.is_reserved_keyword = args.is_reserved_keyword;
    }
    if (args.src_name !== undefined && args.src_name !== null) {
      this.src_name = args.src_name;
    }
    if (args.is_system !== undefined && args.is_system !== null) {
      this.is_system = args.is_system;
    }
    if (args.is_physical !== undefined && args.is_physical !== null) {
      this.is_physical = args.is_physical;
    }
  }
};
TColumnType.prototype = {};
TColumnType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.col_type = new TTypeInfo();
        this.col_type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_reserved_keyword = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.src_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.is_system = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.is_physical = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnType.prototype.write = function(output) {
  output.writeStructBegin('TColumnType');
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  if (this.col_type !== null && this.col_type !== undefined) {
    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);
    this.col_type.write(output);
    output.writeFieldEnd();
  }
  if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {
    output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_reserved_keyword);
    output.writeFieldEnd();
  }
  if (this.src_name !== null && this.src_name !== undefined) {
    output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);
    output.writeString(this.src_name);
    output.writeFieldEnd();
  }
  if (this.is_system !== null && this.is_system !== undefined) {
    output.writeFieldBegin('is_system', Thrift.Type.BOOL, 5);
    output.writeBool(this.is_system);
    output.writeFieldEnd();
  }
  if (this.is_physical !== null && this.is_physical !== undefined) {
    output.writeFieldBegin('is_physical', Thrift.Type.BOOL, 6);
    output.writeBool(this.is_physical);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRow = function(args) {
  this.cols = null;
  if (args) {
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [TDatum]);
    }
  }
};
TRow.prototype = {};
TRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.cols = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new TDatum();
          elem14.read(input);
          this.cols.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRow.prototype.write = function(output) {
  output.writeStructBegin('TRow');
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter15 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter15))
      {
        iter15 = this.cols[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumnData = function(args) {
  this.int_col = null;
  this.real_col = null;
  this.str_col = null;
  this.arr_col = null;
  if (args) {
    if (args.int_col !== undefined && args.int_col !== null) {
      this.int_col = Thrift.copyList(args.int_col, [null]);
    }
    if (args.real_col !== undefined && args.real_col !== null) {
      this.real_col = Thrift.copyList(args.real_col, [null]);
    }
    if (args.str_col !== undefined && args.str_col !== null) {
      this.str_col = Thrift.copyList(args.str_col, [null]);
    }
    if (args.arr_col !== undefined && args.arr_col !== null) {
      this.arr_col = Thrift.copyList(args.arr_col, [null]);
    }
  }
};
TColumnData.prototype = {};
TColumnData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.int_col = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI64().value;
          this.int_col.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.real_col = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readDouble().value;
          this.real_col.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.str_col = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = input.readString().value;
          this.str_col.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size37 = 0;
        var _rtmp341;
        this.arr_col = [];
        var _etype40 = 0;
        _rtmp341 = input.readListBegin();
        _etype40 = _rtmp341.etype;
        _size37 = _rtmp341.size;
        for (var _i42 = 0; _i42 < _size37; ++_i42)
        {
          var elem43 = null;
          elem43 = new TColumn();
          elem43.read(input);
          this.arr_col.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnData.prototype.write = function(output) {
  output.writeStructBegin('TColumnData');
  if (this.int_col !== null && this.int_col !== undefined) {
    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.int_col.length);
    for (var iter44 in this.int_col)
    {
      if (this.int_col.hasOwnProperty(iter44))
      {
        iter44 = this.int_col[iter44];
        output.writeI64(iter44);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.real_col !== null && this.real_col !== undefined) {
    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);
    for (var iter45 in this.real_col)
    {
      if (this.real_col.hasOwnProperty(iter45))
      {
        iter45 = this.real_col[iter45];
        output.writeDouble(iter45);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.str_col !== null && this.str_col !== undefined) {
    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);
    for (var iter46 in this.str_col)
    {
      if (this.str_col.hasOwnProperty(iter46))
      {
        iter46 = this.str_col[iter46];
        output.writeString(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.arr_col !== null && this.arr_col !== undefined) {
    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);
    for (var iter47 in this.arr_col)
    {
      if (this.arr_col.hasOwnProperty(iter47))
      {
        iter47 = this.arr_col[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumn = function(args) {
  this.data = null;
  this.nulls = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = new TColumnData(args.data);
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = Thrift.copyList(args.nulls, [null]);
    }
  }
};
TColumn.prototype = {};
TColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new TColumnData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.nulls = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readBool().value;
          this.nulls.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumn.prototype.write = function(output) {
  output.writeStructBegin('TColumn');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);
    for (var iter55 in this.nulls)
    {
      if (this.nulls.hasOwnProperty(iter55))
      {
        iter55 = this.nulls[iter55];
        output.writeBool(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStringRow = function(args) {
  this.cols = null;
  if (args) {
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [TStringValue]);
    }
  }
};
TStringRow.prototype = {};
TStringRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.cols = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new TStringValue();
          elem62.read(input);
          this.cols.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringRow.prototype.write = function(output) {
  output.writeStructBegin('TStringRow');
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter63 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter63))
      {
        iter63 = this.cols[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStepResult = function(args) {
  this.serialized_rows = null;
  this.execution_finished = null;
  this.merge_type = null;
  this.sharded = null;
  this.row_desc = null;
  this.node_id = null;
  if (args) {
    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
      this.serialized_rows = args.serialized_rows;
    }
    if (args.execution_finished !== undefined && args.execution_finished !== null) {
      this.execution_finished = args.execution_finished;
    }
    if (args.merge_type !== undefined && args.merge_type !== null) {
      this.merge_type = args.merge_type;
    }
    if (args.sharded !== undefined && args.sharded !== null) {
      this.sharded = args.sharded;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
  }
};
TStepResult.prototype = {};
TStepResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialized_rows = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.execution_finished = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.merge_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sharded = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.row_desc = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new TColumnType();
          elem70.read(input);
          this.row_desc.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.node_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStepResult.prototype.write = function(output) {
  output.writeStructBegin('TStepResult');
  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);
    output.writeString(this.serialized_rows);
    output.writeFieldEnd();
  }
  if (this.execution_finished !== null && this.execution_finished !== undefined) {
    output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);
    output.writeBool(this.execution_finished);
    output.writeFieldEnd();
  }
  if (this.merge_type !== null && this.merge_type !== undefined) {
    output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);
    output.writeI32(this.merge_type);
    output.writeFieldEnd();
  }
  if (this.sharded !== null && this.sharded !== undefined) {
    output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);
    output.writeBool(this.sharded);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter71 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter71))
      {
        iter71 = this.row_desc[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I32, 6);
    output.writeI32(this.node_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRowSet = function(args) {
  this.row_desc = null;
  this.rows = null;
  this.columns = null;
  this.is_columnar = null;
  if (args) {
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TRow]);
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [TColumn]);
    }
    if (args.is_columnar !== undefined && args.is_columnar !== null) {
      this.is_columnar = args.is_columnar;
    }
  }
};
TRowSet.prototype = {};
TRowSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.row_desc = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new TColumnType();
          elem78.read(input);
          this.row_desc.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.rows = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = new TRow();
          elem85.read(input);
          this.rows.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.columns = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new TColumn();
          elem92.read(input);
          this.columns.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_columnar = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRowSet.prototype.write = function(output) {
  output.writeStructBegin('TRowSet');
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter93 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter93))
      {
        iter93 = this.row_desc[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter94 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter94))
      {
        iter94 = this.rows[iter94];
        iter94.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter95 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter95))
      {
        iter95 = this.columns[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.is_columnar !== null && this.is_columnar !== undefined) {
    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_columnar);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TQueryResult = function(args) {
  this.row_set = null;
  this.execution_time_ms = null;
  this.total_time_ms = null;
  this.nonce = null;
  if (args) {
    if (args.row_set !== undefined && args.row_set !== null) {
      this.row_set = new TRowSet(args.row_set);
    }
    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
      this.execution_time_ms = args.execution_time_ms;
    }
    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
      this.total_time_ms = args.total_time_ms;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
TQueryResult.prototype = {};
TQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.row_set = new TRowSet();
        this.row_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.execution_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.total_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryResult.prototype.write = function(output) {
  output.writeStructBegin('TQueryResult');
  if (this.row_set !== null && this.row_set !== undefined) {
    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
    this.row_set.write(output);
    output.writeFieldEnd();
  }
  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);
    output.writeI64(this.execution_time_ms);
    output.writeFieldEnd();
  }
  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);
    output.writeI64(this.total_time_ms);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDataFrame = function(args) {
  this.sm_handle = null;
  this.sm_size = null;
  this.df_handle = null;
  this.df_size = null;
  if (args) {
    if (args.sm_handle !== undefined && args.sm_handle !== null) {
      this.sm_handle = args.sm_handle;
    }
    if (args.sm_size !== undefined && args.sm_size !== null) {
      this.sm_size = args.sm_size;
    }
    if (args.df_handle !== undefined && args.df_handle !== null) {
      this.df_handle = args.df_handle;
    }
    if (args.df_size !== undefined && args.df_size !== null) {
      this.df_size = args.df_size;
    }
  }
};
TDataFrame.prototype = {};
TDataFrame.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sm_handle = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.sm_size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.df_handle = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.df_size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDataFrame.prototype.write = function(output) {
  output.writeStructBegin('TDataFrame');
  if (this.sm_handle !== null && this.sm_handle !== undefined) {
    output.writeFieldBegin('sm_handle', Thrift.Type.STRING, 1);
    output.writeBinary(this.sm_handle);
    output.writeFieldEnd();
  }
  if (this.sm_size !== null && this.sm_size !== undefined) {
    output.writeFieldBegin('sm_size', Thrift.Type.I64, 2);
    output.writeI64(this.sm_size);
    output.writeFieldEnd();
  }
  if (this.df_handle !== null && this.df_handle !== undefined) {
    output.writeFieldBegin('df_handle', Thrift.Type.STRING, 3);
    output.writeBinary(this.df_handle);
    output.writeFieldEnd();
  }
  if (this.df_size !== null && this.df_size !== undefined) {
    output.writeFieldBegin('df_size', Thrift.Type.I64, 4);
    output.writeI64(this.df_size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBInfo = function(args) {
  this.db_name = null;
  this.db_owner = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.db_owner !== undefined && args.db_owner !== null) {
      this.db_owner = args.db_owner;
    }
  }
};
TDBInfo.prototype = {};
TDBInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.db_owner = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBInfo.prototype.write = function(output) {
  output.writeStructBegin('TDBInfo');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.db_owner !== null && this.db_owner !== undefined) {
    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);
    output.writeString(this.db_owner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMapDException = function(args) {
  this.error_msg = null;
  if (args) {
    if (args.error_msg !== undefined && args.error_msg !== null) {
      this.error_msg = args.error_msg;
    }
  }
};
Thrift.inherits(TMapDException, Thrift.TException);
TMapDException.prototype.name = 'TMapDException';
TMapDException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.error_msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMapDException.prototype.write = function(output) {
  output.writeStructBegin('TMapDException');
  if (this.error_msg !== null && this.error_msg !== undefined) {
    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);
    output.writeString(this.error_msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCopyParams = function(args) {
  this.delimiter = null;
  this.null_str = null;
  this.has_header = null;
  this.quoted = null;
  this.quote = null;
  this.escape = null;
  this.line_delim = null;
  this.array_delim = null;
  this.array_begin = null;
  this.array_end = null;
  this.threads = null;
  this.table_type = 0;
  this.s3_access_key = null;
  this.s3_secret_key = null;
  this.s3_region = null;
  this.geo_coords_encoding = 0;
  this.geo_coords_comp_param = null;
  if (args) {
    if (args.delimiter !== undefined && args.delimiter !== null) {
      this.delimiter = args.delimiter;
    }
    if (args.null_str !== undefined && args.null_str !== null) {
      this.null_str = args.null_str;
    }
    if (args.has_header !== undefined && args.has_header !== null) {
      this.has_header = args.has_header;
    }
    if (args.quoted !== undefined && args.quoted !== null) {
      this.quoted = args.quoted;
    }
    if (args.quote !== undefined && args.quote !== null) {
      this.quote = args.quote;
    }
    if (args.escape !== undefined && args.escape !== null) {
      this.escape = args.escape;
    }
    if (args.line_delim !== undefined && args.line_delim !== null) {
      this.line_delim = args.line_delim;
    }
    if (args.array_delim !== undefined && args.array_delim !== null) {
      this.array_delim = args.array_delim;
    }
    if (args.array_begin !== undefined && args.array_begin !== null) {
      this.array_begin = args.array_begin;
    }
    if (args.array_end !== undefined && args.array_end !== null) {
      this.array_end = args.array_end;
    }
    if (args.threads !== undefined && args.threads !== null) {
      this.threads = args.threads;
    }
    if (args.table_type !== undefined && args.table_type !== null) {
      this.table_type = args.table_type;
    }
    if (args.s3_access_key !== undefined && args.s3_access_key !== null) {
      this.s3_access_key = args.s3_access_key;
    }
    if (args.s3_secret_key !== undefined && args.s3_secret_key !== null) {
      this.s3_secret_key = args.s3_secret_key;
    }
    if (args.s3_region !== undefined && args.s3_region !== null) {
      this.s3_region = args.s3_region;
    }
    if (args.geo_coords_encoding !== undefined && args.geo_coords_encoding !== null) {
      this.geo_coords_encoding = args.geo_coords_encoding;
    }
    if (args.geo_coords_comp_param !== undefined && args.geo_coords_comp_param !== null) {
      this.geo_coords_comp_param = args.geo_coords_comp_param;
    }
  }
};
TCopyParams.prototype = {};
TCopyParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.delimiter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.null_str = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.has_header = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.quoted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.quote = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.escape = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.line_delim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.array_delim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.array_begin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.array_end = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.threads = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.table_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.s3_access_key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.s3_secret_key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.s3_region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.geo_coords_encoding = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.geo_coords_comp_param = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCopyParams.prototype.write = function(output) {
  output.writeStructBegin('TCopyParams');
  if (this.delimiter !== null && this.delimiter !== undefined) {
    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);
    output.writeString(this.delimiter);
    output.writeFieldEnd();
  }
  if (this.null_str !== null && this.null_str !== undefined) {
    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);
    output.writeString(this.null_str);
    output.writeFieldEnd();
  }
  if (this.has_header !== null && this.has_header !== undefined) {
    output.writeFieldBegin('has_header', Thrift.Type.BOOL, 3);
    output.writeBool(this.has_header);
    output.writeFieldEnd();
  }
  if (this.quoted !== null && this.quoted !== undefined) {
    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);
    output.writeBool(this.quoted);
    output.writeFieldEnd();
  }
  if (this.quote !== null && this.quote !== undefined) {
    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);
    output.writeString(this.quote);
    output.writeFieldEnd();
  }
  if (this.escape !== null && this.escape !== undefined) {
    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);
    output.writeString(this.escape);
    output.writeFieldEnd();
  }
  if (this.line_delim !== null && this.line_delim !== undefined) {
    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);
    output.writeString(this.line_delim);
    output.writeFieldEnd();
  }
  if (this.array_delim !== null && this.array_delim !== undefined) {
    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);
    output.writeString(this.array_delim);
    output.writeFieldEnd();
  }
  if (this.array_begin !== null && this.array_begin !== undefined) {
    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);
    output.writeString(this.array_begin);
    output.writeFieldEnd();
  }
  if (this.array_end !== null && this.array_end !== undefined) {
    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);
    output.writeString(this.array_end);
    output.writeFieldEnd();
  }
  if (this.threads !== null && this.threads !== undefined) {
    output.writeFieldBegin('threads', Thrift.Type.I32, 11);
    output.writeI32(this.threads);
    output.writeFieldEnd();
  }
  if (this.table_type !== null && this.table_type !== undefined) {
    output.writeFieldBegin('table_type', Thrift.Type.I32, 12);
    output.writeI32(this.table_type);
    output.writeFieldEnd();
  }
  if (this.s3_access_key !== null && this.s3_access_key !== undefined) {
    output.writeFieldBegin('s3_access_key', Thrift.Type.STRING, 13);
    output.writeString(this.s3_access_key);
    output.writeFieldEnd();
  }
  if (this.s3_secret_key !== null && this.s3_secret_key !== undefined) {
    output.writeFieldBegin('s3_secret_key', Thrift.Type.STRING, 14);
    output.writeString(this.s3_secret_key);
    output.writeFieldEnd();
  }
  if (this.s3_region !== null && this.s3_region !== undefined) {
    output.writeFieldBegin('s3_region', Thrift.Type.STRING, 15);
    output.writeString(this.s3_region);
    output.writeFieldEnd();
  }
  if (this.geo_coords_encoding !== null && this.geo_coords_encoding !== undefined) {
    output.writeFieldBegin('geo_coords_encoding', Thrift.Type.I32, 16);
    output.writeI32(this.geo_coords_encoding);
    output.writeFieldEnd();
  }
  if (this.geo_coords_comp_param !== null && this.geo_coords_comp_param !== undefined) {
    output.writeFieldBegin('geo_coords_comp_param', Thrift.Type.I32, 17);
    output.writeI32(this.geo_coords_comp_param);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDetectResult = function(args) {
  this.row_set = null;
  this.copy_params = null;
  if (args) {
    if (args.row_set !== undefined && args.row_set !== null) {
      this.row_set = new TRowSet(args.row_set);
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
TDetectResult.prototype = {};
TDetectResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.row_set = new TRowSet();
        this.row_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDetectResult.prototype.write = function(output) {
  output.writeStructBegin('TDetectResult');
  if (this.row_set !== null && this.row_set !== undefined) {
    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
    this.row_set.write(output);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TImportStatus = function(args) {
  this.elapsed = null;
  this.rows_completed = null;
  this.rows_estimated = null;
  this.rows_rejected = null;
  if (args) {
    if (args.elapsed !== undefined && args.elapsed !== null) {
      this.elapsed = args.elapsed;
    }
    if (args.rows_completed !== undefined && args.rows_completed !== null) {
      this.rows_completed = args.rows_completed;
    }
    if (args.rows_estimated !== undefined && args.rows_estimated !== null) {
      this.rows_estimated = args.rows_estimated;
    }
    if (args.rows_rejected !== undefined && args.rows_rejected !== null) {
      this.rows_rejected = args.rows_rejected;
    }
  }
};
TImportStatus.prototype = {};
TImportStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.elapsed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.rows_completed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.rows_estimated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.rows_rejected = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TImportStatus.prototype.write = function(output) {
  output.writeStructBegin('TImportStatus');
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);
    output.writeI64(this.elapsed);
    output.writeFieldEnd();
  }
  if (this.rows_completed !== null && this.rows_completed !== undefined) {
    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);
    output.writeI64(this.rows_completed);
    output.writeFieldEnd();
  }
  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {
    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);
    output.writeI64(this.rows_estimated);
    output.writeFieldEnd();
  }
  if (this.rows_rejected !== null && this.rows_rejected !== undefined) {
    output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);
    output.writeI64(this.rows_rejected);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFrontendView = function(args) {
  this.view_name = null;
  this.view_state = null;
  this.image_hash = null;
  this.update_time = null;
  this.view_metadata = null;
  if (args) {
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
TFrontendView.prototype = {};
TFrontendView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFrontendView.prototype.write = function(output) {
  output.writeStructBegin('TFrontendView');
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDashboard = function(args) {
  this.dashboard_name = null;
  this.dashboard_state = null;
  this.image_hash = null;
  this.update_time = null;
  this.dashboard_metadata = null;
  this.dashboard_id = null;
  this.dashboard_owner = null;
  if (args) {
    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
      this.dashboard_name = args.dashboard_name;
    }
    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
      this.dashboard_state = args.dashboard_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
      this.dashboard_metadata = args.dashboard_metadata;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {
      this.dashboard_owner = args.dashboard_owner;
    }
  }
};
TDashboard.prototype = {};
TDashboard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_owner = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDashboard.prototype.write = function(output) {
  output.writeStructBegin('TDashboard');
  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 1);
    output.writeString(this.dashboard_name);
    output.writeFieldEnd();
  }
  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 2);
    output.writeString(this.dashboard_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.dashboard_metadata);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 6);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {
    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 7);
    output.writeString(this.dashboard_owner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TServerStatus = function(args) {
  this.read_only = null;
  this.version = null;
  this.rendering_enabled = null;
  this.start_time = null;
  this.edition = null;
  this.host_name = null;
  this.poly_rendering_enabled = null;
  if (args) {
    if (args.read_only !== undefined && args.read_only !== null) {
      this.read_only = args.read_only;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {
      this.rendering_enabled = args.rendering_enabled;
    }
    if (args.start_time !== undefined && args.start_time !== null) {
      this.start_time = args.start_time;
    }
    if (args.edition !== undefined && args.edition !== null) {
      this.edition = args.edition;
    }
    if (args.host_name !== undefined && args.host_name !== null) {
      this.host_name = args.host_name;
    }
    if (args.poly_rendering_enabled !== undefined && args.poly_rendering_enabled !== null) {
      this.poly_rendering_enabled = args.poly_rendering_enabled;
    }
  }
};
TServerStatus.prototype = {};
TServerStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.read_only = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.rendering_enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.start_time = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.edition = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.host_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.poly_rendering_enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TServerStatus.prototype.write = function(output) {
  output.writeStructBegin('TServerStatus');
  if (this.read_only !== null && this.read_only !== undefined) {
    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);
    output.writeBool(this.read_only);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {
    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.rendering_enabled);
    output.writeFieldEnd();
  }
  if (this.start_time !== null && this.start_time !== undefined) {
    output.writeFieldBegin('start_time', Thrift.Type.I64, 4);
    output.writeI64(this.start_time);
    output.writeFieldEnd();
  }
  if (this.edition !== null && this.edition !== undefined) {
    output.writeFieldBegin('edition', Thrift.Type.STRING, 5);
    output.writeString(this.edition);
    output.writeFieldEnd();
  }
  if (this.host_name !== null && this.host_name !== undefined) {
    output.writeFieldBegin('host_name', Thrift.Type.STRING, 6);
    output.writeString(this.host_name);
    output.writeFieldEnd();
  }
  if (this.poly_rendering_enabled !== null && this.poly_rendering_enabled !== undefined) {
    output.writeFieldBegin('poly_rendering_enabled', Thrift.Type.BOOL, 7);
    output.writeBool(this.poly_rendering_enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPixel = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
  }
};
TPixel.prototype = {};
TPixel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.x = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.y = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPixel.prototype.write = function(output) {
  output.writeStructBegin('TPixel');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I64, 1);
    output.writeI64(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I64, 2);
    output.writeI64(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPixelTableRowResult = function(args) {
  this.pixel = null;
  this.vega_table_name = null;
  this.table_id = null;
  this.row_id = null;
  this.row_set = null;
  this.nonce = null;
  if (args) {
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new TPixel(args.pixel);
    }
    if (args.vega_table_name !== undefined && args.vega_table_name !== null) {
      this.vega_table_name = args.vega_table_name;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
    if (args.row_id !== undefined && args.row_id !== null) {
      this.row_id = args.row_id;
    }
    if (args.row_set !== undefined && args.row_set !== null) {
      this.row_set = new TRowSet(args.row_set);
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
TPixelTableRowResult.prototype = {};
TPixelTableRowResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vega_table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.table_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.row_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.row_set = new TRowSet();
        this.row_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPixelTableRowResult.prototype.write = function(output) {
  output.writeStructBegin('TPixelTableRowResult');
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.vega_table_name !== null && this.vega_table_name !== undefined) {
    output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);
    output.writeString(this.vega_table_name);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I64, 3);
    output.writeI64(this.table_id);
    output.writeFieldEnd();
  }
  if (this.row_id !== null && this.row_id !== undefined) {
    output.writeFieldBegin('row_id', Thrift.Type.I64, 4);
    output.writeI64(this.row_id);
    output.writeFieldEnd();
  }
  if (this.row_set !== null && this.row_set !== undefined) {
    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);
    this.row_set.write(output);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRenderResult = function(args) {
  this.image = null;
  this.nonce = null;
  this.execution_time_ms = null;
  this.render_time_ms = null;
  this.total_time_ms = null;
  this.vega_metadata = null;
  if (args) {
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
      this.execution_time_ms = args.execution_time_ms;
    }
    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
      this.render_time_ms = args.render_time_ms;
    }
    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
      this.total_time_ms = args.total_time_ms;
    }
    if (args.vega_metadata !== undefined && args.vega_metadata !== null) {
      this.vega_metadata = args.vega_metadata;
    }
  }
};
TRenderResult.prototype = {};
TRenderResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.execution_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.render_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.total_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.vega_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenderResult.prototype.write = function(output) {
  output.writeStructBegin('TRenderResult');
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 1);
    output.writeBinary(this.image);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
    output.writeI64(this.execution_time_ms);
    output.writeFieldEnd();
  }
  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
    output.writeI64(this.render_time_ms);
    output.writeFieldEnd();
  }
  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
    output.writeI64(this.total_time_ms);
    output.writeFieldEnd();
  }
  if (this.vega_metadata !== null && this.vega_metadata !== undefined) {
    output.writeFieldBegin('vega_metadata', Thrift.Type.STRING, 6);
    output.writeString(this.vega_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGpuSpecification = function(args) {
  this.num_sm = null;
  this.clock_frequency_kHz = null;
  this.memory = null;
  this.compute_capability_major = null;
  this.compute_capability_minor = null;
  if (args) {
    if (args.num_sm !== undefined && args.num_sm !== null) {
      this.num_sm = args.num_sm;
    }
    if (args.clock_frequency_kHz !== undefined && args.clock_frequency_kHz !== null) {
      this.clock_frequency_kHz = args.clock_frequency_kHz;
    }
    if (args.memory !== undefined && args.memory !== null) {
      this.memory = args.memory;
    }
    if (args.compute_capability_major !== undefined && args.compute_capability_major !== null) {
      this.compute_capability_major = args.compute_capability_major;
    }
    if (args.compute_capability_minor !== undefined && args.compute_capability_minor !== null) {
      this.compute_capability_minor = args.compute_capability_minor;
    }
  }
};
TGpuSpecification.prototype = {};
TGpuSpecification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_sm = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.clock_frequency_kHz = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.memory = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.compute_capability_major = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.compute_capability_minor = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGpuSpecification.prototype.write = function(output) {
  output.writeStructBegin('TGpuSpecification');
  if (this.num_sm !== null && this.num_sm !== undefined) {
    output.writeFieldBegin('num_sm', Thrift.Type.I32, 1);
    output.writeI32(this.num_sm);
    output.writeFieldEnd();
  }
  if (this.clock_frequency_kHz !== null && this.clock_frequency_kHz !== undefined) {
    output.writeFieldBegin('clock_frequency_kHz', Thrift.Type.I64, 2);
    output.writeI64(this.clock_frequency_kHz);
    output.writeFieldEnd();
  }
  if (this.memory !== null && this.memory !== undefined) {
    output.writeFieldBegin('memory', Thrift.Type.I64, 3);
    output.writeI64(this.memory);
    output.writeFieldEnd();
  }
  if (this.compute_capability_major !== null && this.compute_capability_major !== undefined) {
    output.writeFieldBegin('compute_capability_major', Thrift.Type.I16, 4);
    output.writeI16(this.compute_capability_major);
    output.writeFieldEnd();
  }
  if (this.compute_capability_minor !== null && this.compute_capability_minor !== undefined) {
    output.writeFieldBegin('compute_capability_minor', Thrift.Type.I16, 5);
    output.writeI16(this.compute_capability_minor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THardwareInfo = function(args) {
  this.num_gpu_hw = null;
  this.num_cpu_hw = null;
  this.num_gpu_allocated = null;
  this.start_gpu = null;
  this.host_name = null;
  this.gpu_info = null;
  if (args) {
    if (args.num_gpu_hw !== undefined && args.num_gpu_hw !== null) {
      this.num_gpu_hw = args.num_gpu_hw;
    }
    if (args.num_cpu_hw !== undefined && args.num_cpu_hw !== null) {
      this.num_cpu_hw = args.num_cpu_hw;
    }
    if (args.num_gpu_allocated !== undefined && args.num_gpu_allocated !== null) {
      this.num_gpu_allocated = args.num_gpu_allocated;
    }
    if (args.start_gpu !== undefined && args.start_gpu !== null) {
      this.start_gpu = args.start_gpu;
    }
    if (args.host_name !== undefined && args.host_name !== null) {
      this.host_name = args.host_name;
    }
    if (args.gpu_info !== undefined && args.gpu_info !== null) {
      this.gpu_info = Thrift.copyList(args.gpu_info, [TGpuSpecification]);
    }
  }
};
THardwareInfo.prototype = {};
THardwareInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.num_gpu_hw = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.num_cpu_hw = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.num_gpu_allocated = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.start_gpu = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.host_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.gpu_info = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new TGpuSpecification();
          elem102.read(input);
          this.gpu_info.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THardwareInfo.prototype.write = function(output) {
  output.writeStructBegin('THardwareInfo');
  if (this.num_gpu_hw !== null && this.num_gpu_hw !== undefined) {
    output.writeFieldBegin('num_gpu_hw', Thrift.Type.I16, 1);
    output.writeI16(this.num_gpu_hw);
    output.writeFieldEnd();
  }
  if (this.num_cpu_hw !== null && this.num_cpu_hw !== undefined) {
    output.writeFieldBegin('num_cpu_hw', Thrift.Type.I16, 2);
    output.writeI16(this.num_cpu_hw);
    output.writeFieldEnd();
  }
  if (this.num_gpu_allocated !== null && this.num_gpu_allocated !== undefined) {
    output.writeFieldBegin('num_gpu_allocated', Thrift.Type.I16, 3);
    output.writeI16(this.num_gpu_allocated);
    output.writeFieldEnd();
  }
  if (this.start_gpu !== null && this.start_gpu !== undefined) {
    output.writeFieldBegin('start_gpu', Thrift.Type.I16, 4);
    output.writeI16(this.start_gpu);
    output.writeFieldEnd();
  }
  if (this.host_name !== null && this.host_name !== undefined) {
    output.writeFieldBegin('host_name', Thrift.Type.STRING, 5);
    output.writeString(this.host_name);
    output.writeFieldEnd();
  }
  if (this.gpu_info !== null && this.gpu_info !== undefined) {
    output.writeFieldBegin('gpu_info', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.gpu_info.length);
    for (var iter103 in this.gpu_info)
    {
      if (this.gpu_info.hasOwnProperty(iter103))
      {
        iter103 = this.gpu_info[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TClusterHardwareInfo = function(args) {
  this.hardware_info = null;
  if (args) {
    if (args.hardware_info !== undefined && args.hardware_info !== null) {
      this.hardware_info = Thrift.copyList(args.hardware_info, [THardwareInfo]);
    }
  }
};
TClusterHardwareInfo.prototype = {};
TClusterHardwareInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.hardware_info = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new THardwareInfo();
          elem110.read(input);
          this.hardware_info.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TClusterHardwareInfo.prototype.write = function(output) {
  output.writeStructBegin('TClusterHardwareInfo');
  if (this.hardware_info !== null && this.hardware_info !== undefined) {
    output.writeFieldBegin('hardware_info', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.hardware_info.length);
    for (var iter111 in this.hardware_info)
    {
      if (this.hardware_info.hasOwnProperty(iter111))
      {
        iter111 = this.hardware_info[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMemoryData = function(args) {
  this.slab = null;
  this.start_page = null;
  this.num_pages = null;
  this.touch = null;
  this.chunk_key = null;
  this.buffer_epoch = null;
  this.is_free = null;
  if (args) {
    if (args.slab !== undefined && args.slab !== null) {
      this.slab = args.slab;
    }
    if (args.start_page !== undefined && args.start_page !== null) {
      this.start_page = args.start_page;
    }
    if (args.num_pages !== undefined && args.num_pages !== null) {
      this.num_pages = args.num_pages;
    }
    if (args.touch !== undefined && args.touch !== null) {
      this.touch = args.touch;
    }
    if (args.chunk_key !== undefined && args.chunk_key !== null) {
      this.chunk_key = Thrift.copyList(args.chunk_key, [null]);
    }
    if (args.buffer_epoch !== undefined && args.buffer_epoch !== null) {
      this.buffer_epoch = args.buffer_epoch;
    }
    if (args.is_free !== undefined && args.is_free !== null) {
      this.is_free = args.is_free;
    }
  }
};
TMemoryData.prototype = {};
TMemoryData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.slab = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start_page = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.num_pages = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.touch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.chunk_key = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readI64().value;
          this.chunk_key.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.buffer_epoch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.is_free = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMemoryData.prototype.write = function(output) {
  output.writeStructBegin('TMemoryData');
  if (this.slab !== null && this.slab !== undefined) {
    output.writeFieldBegin('slab', Thrift.Type.I64, 1);
    output.writeI64(this.slab);
    output.writeFieldEnd();
  }
  if (this.start_page !== null && this.start_page !== undefined) {
    output.writeFieldBegin('start_page', Thrift.Type.I32, 2);
    output.writeI32(this.start_page);
    output.writeFieldEnd();
  }
  if (this.num_pages !== null && this.num_pages !== undefined) {
    output.writeFieldBegin('num_pages', Thrift.Type.I64, 3);
    output.writeI64(this.num_pages);
    output.writeFieldEnd();
  }
  if (this.touch !== null && this.touch !== undefined) {
    output.writeFieldBegin('touch', Thrift.Type.I32, 4);
    output.writeI32(this.touch);
    output.writeFieldEnd();
  }
  if (this.chunk_key !== null && this.chunk_key !== undefined) {
    output.writeFieldBegin('chunk_key', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.chunk_key.length);
    for (var iter119 in this.chunk_key)
    {
      if (this.chunk_key.hasOwnProperty(iter119))
      {
        iter119 = this.chunk_key[iter119];
        output.writeI64(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.buffer_epoch !== null && this.buffer_epoch !== undefined) {
    output.writeFieldBegin('buffer_epoch', Thrift.Type.I32, 6);
    output.writeI32(this.buffer_epoch);
    output.writeFieldEnd();
  }
  if (this.is_free !== null && this.is_free !== undefined) {
    output.writeFieldBegin('is_free', Thrift.Type.BOOL, 7);
    output.writeBool(this.is_free);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TNodeMemoryInfo = function(args) {
  this.host_name = null;
  this.page_size = null;
  this.max_num_pages = null;
  this.num_pages_allocated = null;
  this.is_allocation_capped = null;
  this.node_memory_data = null;
  if (args) {
    if (args.host_name !== undefined && args.host_name !== null) {
      this.host_name = args.host_name;
    }
    if (args.page_size !== undefined && args.page_size !== null) {
      this.page_size = args.page_size;
    }
    if (args.max_num_pages !== undefined && args.max_num_pages !== null) {
      this.max_num_pages = args.max_num_pages;
    }
    if (args.num_pages_allocated !== undefined && args.num_pages_allocated !== null) {
      this.num_pages_allocated = args.num_pages_allocated;
    }
    if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {
      this.is_allocation_capped = args.is_allocation_capped;
    }
    if (args.node_memory_data !== undefined && args.node_memory_data !== null) {
      this.node_memory_data = Thrift.copyList(args.node_memory_data, [TMemoryData]);
    }
  }
};
TNodeMemoryInfo.prototype = {};
TNodeMemoryInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.page_size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.max_num_pages = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.num_pages_allocated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.is_allocation_capped = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.node_memory_data = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new TMemoryData();
          elem126.read(input);
          this.node_memory_data.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TNodeMemoryInfo.prototype.write = function(output) {
  output.writeStructBegin('TNodeMemoryInfo');
  if (this.host_name !== null && this.host_name !== undefined) {
    output.writeFieldBegin('host_name', Thrift.Type.STRING, 1);
    output.writeString(this.host_name);
    output.writeFieldEnd();
  }
  if (this.page_size !== null && this.page_size !== undefined) {
    output.writeFieldBegin('page_size', Thrift.Type.I64, 2);
    output.writeI64(this.page_size);
    output.writeFieldEnd();
  }
  if (this.max_num_pages !== null && this.max_num_pages !== undefined) {
    output.writeFieldBegin('max_num_pages', Thrift.Type.I64, 3);
    output.writeI64(this.max_num_pages);
    output.writeFieldEnd();
  }
  if (this.num_pages_allocated !== null && this.num_pages_allocated !== undefined) {
    output.writeFieldBegin('num_pages_allocated', Thrift.Type.I64, 4);
    output.writeI64(this.num_pages_allocated);
    output.writeFieldEnd();
  }
  if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {
    output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 5);
    output.writeBool(this.is_allocation_capped);
    output.writeFieldEnd();
  }
  if (this.node_memory_data !== null && this.node_memory_data !== undefined) {
    output.writeFieldBegin('node_memory_data', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.node_memory_data.length);
    for (var iter127 in this.node_memory_data)
    {
      if (this.node_memory_data.hasOwnProperty(iter127))
      {
        iter127 = this.node_memory_data[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTableMeta = function(args) {
  this.table_name = null;
  this.num_cols = null;
  this.col_datum_types = null;
  this.is_view = null;
  this.is_replicated = null;
  this.shard_count = null;
  this.max_rows = null;
  if (args) {
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.num_cols !== undefined && args.num_cols !== null) {
      this.num_cols = args.num_cols;
    }
    if (args.col_datum_types !== undefined && args.col_datum_types !== null) {
      this.col_datum_types = Thrift.copyList(args.col_datum_types, [null]);
    }
    if (args.is_view !== undefined && args.is_view !== null) {
      this.is_view = args.is_view;
    }
    if (args.is_replicated !== undefined && args.is_replicated !== null) {
      this.is_replicated = args.is_replicated;
    }
    if (args.shard_count !== undefined && args.shard_count !== null) {
      this.shard_count = args.shard_count;
    }
    if (args.max_rows !== undefined && args.max_rows !== null) {
      this.max_rows = args.max_rows;
    }
  }
};
TTableMeta.prototype = {};
TTableMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.num_cols = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.col_datum_types = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readI32().value;
          this.col_datum_types.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_view = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.is_replicated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.shard_count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.max_rows = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTableMeta.prototype.write = function(output) {
  output.writeStructBegin('TTableMeta');
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 1);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.num_cols !== null && this.num_cols !== undefined) {
    output.writeFieldBegin('num_cols', Thrift.Type.I64, 2);
    output.writeI64(this.num_cols);
    output.writeFieldEnd();
  }
  if (this.col_datum_types !== null && this.col_datum_types !== undefined) {
    output.writeFieldBegin('col_datum_types', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.col_datum_types.length);
    for (var iter135 in this.col_datum_types)
    {
      if (this.col_datum_types.hasOwnProperty(iter135))
      {
        iter135 = this.col_datum_types[iter135];
        output.writeI32(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.is_view !== null && this.is_view !== undefined) {
    output.writeFieldBegin('is_view', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_view);
    output.writeFieldEnd();
  }
  if (this.is_replicated !== null && this.is_replicated !== undefined) {
    output.writeFieldBegin('is_replicated', Thrift.Type.BOOL, 5);
    output.writeBool(this.is_replicated);
    output.writeFieldEnd();
  }
  if (this.shard_count !== null && this.shard_count !== undefined) {
    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);
    output.writeI64(this.shard_count);
    output.writeFieldEnd();
  }
  if (this.max_rows !== null && this.max_rows !== undefined) {
    output.writeFieldBegin('max_rows', Thrift.Type.I64, 7);
    output.writeI64(this.max_rows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTableDetails = function(args) {
  this.row_desc = null;
  this.fragment_size = null;
  this.page_size = null;
  this.max_rows = null;
  this.view_sql = null;
  this.shard_count = null;
  this.key_metainfo = null;
  this.is_temporary = null;
  if (args) {
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.fragment_size !== undefined && args.fragment_size !== null) {
      this.fragment_size = args.fragment_size;
    }
    if (args.page_size !== undefined && args.page_size !== null) {
      this.page_size = args.page_size;
    }
    if (args.max_rows !== undefined && args.max_rows !== null) {
      this.max_rows = args.max_rows;
    }
    if (args.view_sql !== undefined && args.view_sql !== null) {
      this.view_sql = args.view_sql;
    }
    if (args.shard_count !== undefined && args.shard_count !== null) {
      this.shard_count = args.shard_count;
    }
    if (args.key_metainfo !== undefined && args.key_metainfo !== null) {
      this.key_metainfo = args.key_metainfo;
    }
    if (args.is_temporary !== undefined && args.is_temporary !== null) {
      this.is_temporary = args.is_temporary;
    }
  }
};
TTableDetails.prototype = {};
TTableDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.row_desc = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new TColumnType();
          elem142.read(input);
          this.row_desc.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fragment_size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.page_size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.max_rows = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.view_sql = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.shard_count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.key_metainfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.is_temporary = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTableDetails.prototype.write = function(output) {
  output.writeStructBegin('TTableDetails');
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter143 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter143))
      {
        iter143 = this.row_desc[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fragment_size !== null && this.fragment_size !== undefined) {
    output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);
    output.writeI64(this.fragment_size);
    output.writeFieldEnd();
  }
  if (this.page_size !== null && this.page_size !== undefined) {
    output.writeFieldBegin('page_size', Thrift.Type.I64, 3);
    output.writeI64(this.page_size);
    output.writeFieldEnd();
  }
  if (this.max_rows !== null && this.max_rows !== undefined) {
    output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);
    output.writeI64(this.max_rows);
    output.writeFieldEnd();
  }
  if (this.view_sql !== null && this.view_sql !== undefined) {
    output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);
    output.writeString(this.view_sql);
    output.writeFieldEnd();
  }
  if (this.shard_count !== null && this.shard_count !== undefined) {
    output.writeFieldBegin('shard_count', Thrift.Type.I64, 6);
    output.writeI64(this.shard_count);
    output.writeFieldEnd();
  }
  if (this.key_metainfo !== null && this.key_metainfo !== undefined) {
    output.writeFieldBegin('key_metainfo', Thrift.Type.STRING, 7);
    output.writeString(this.key_metainfo);
    output.writeFieldEnd();
  }
  if (this.is_temporary !== null && this.is_temporary !== undefined) {
    output.writeFieldBegin('is_temporary', Thrift.Type.BOOL, 8);
    output.writeBool(this.is_temporary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumnRange = function(args) {
  this.type = null;
  this.col_id = null;
  this.table_id = null;
  this.has_nulls = null;
  this.int_min = null;
  this.int_max = null;
  this.bucket = null;
  this.fp_min = null;
  this.fp_max = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.col_id !== undefined && args.col_id !== null) {
      this.col_id = args.col_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
    if (args.has_nulls !== undefined && args.has_nulls !== null) {
      this.has_nulls = args.has_nulls;
    }
    if (args.int_min !== undefined && args.int_min !== null) {
      this.int_min = args.int_min;
    }
    if (args.int_max !== undefined && args.int_max !== null) {
      this.int_max = args.int_max;
    }
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.fp_min !== undefined && args.fp_min !== null) {
      this.fp_min = args.fp_min;
    }
    if (args.fp_max !== undefined && args.fp_max !== null) {
      this.fp_max = args.fp_max;
    }
  }
};
TColumnRange.prototype = {};
TColumnRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.has_nulls = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.int_min = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.int_max = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.bucket = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fp_min = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fp_max = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnRange.prototype.write = function(output) {
  output.writeStructBegin('TColumnRange');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.col_id !== null && this.col_id !== undefined) {
    output.writeFieldBegin('col_id', Thrift.Type.I32, 2);
    output.writeI32(this.col_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  if (this.has_nulls !== null && this.has_nulls !== undefined) {
    output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);
    output.writeBool(this.has_nulls);
    output.writeFieldEnd();
  }
  if (this.int_min !== null && this.int_min !== undefined) {
    output.writeFieldBegin('int_min', Thrift.Type.I64, 5);
    output.writeI64(this.int_min);
    output.writeFieldEnd();
  }
  if (this.int_max !== null && this.int_max !== undefined) {
    output.writeFieldBegin('int_max', Thrift.Type.I64, 6);
    output.writeI64(this.int_max);
    output.writeFieldEnd();
  }
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);
    output.writeI64(this.bucket);
    output.writeFieldEnd();
  }
  if (this.fp_min !== null && this.fp_min !== undefined) {
    output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.fp_min);
    output.writeFieldEnd();
  }
  if (this.fp_max !== null && this.fp_max !== undefined) {
    output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.fp_max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDictionaryGeneration = function(args) {
  this.dict_id = null;
  this.entry_count = null;
  if (args) {
    if (args.dict_id !== undefined && args.dict_id !== null) {
      this.dict_id = args.dict_id;
    }
    if (args.entry_count !== undefined && args.entry_count !== null) {
      this.entry_count = args.entry_count;
    }
  }
};
TDictionaryGeneration.prototype = {};
TDictionaryGeneration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dict_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.entry_count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDictionaryGeneration.prototype.write = function(output) {
  output.writeStructBegin('TDictionaryGeneration');
  if (this.dict_id !== null && this.dict_id !== undefined) {
    output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);
    output.writeI32(this.dict_id);
    output.writeFieldEnd();
  }
  if (this.entry_count !== null && this.entry_count !== undefined) {
    output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);
    output.writeI64(this.entry_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTableGeneration = function(args) {
  this.table_id = null;
  this.tuple_count = null;
  this.start_rowid = null;
  if (args) {
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
    if (args.tuple_count !== undefined && args.tuple_count !== null) {
      this.tuple_count = args.tuple_count;
    }
    if (args.start_rowid !== undefined && args.start_rowid !== null) {
      this.start_rowid = args.start_rowid;
    }
  }
};
TTableGeneration.prototype = {};
TTableGeneration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.tuple_count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.start_rowid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTableGeneration.prototype.write = function(output) {
  output.writeStructBegin('TTableGeneration');
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  if (this.tuple_count !== null && this.tuple_count !== undefined) {
    output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);
    output.writeI64(this.tuple_count);
    output.writeFieldEnd();
  }
  if (this.start_rowid !== null && this.start_rowid !== undefined) {
    output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);
    output.writeI64(this.start_rowid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPendingQuery = function(args) {
  this.id = null;
  this.column_ranges = null;
  this.dictionary_generations = null;
  this.table_generations = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.column_ranges !== undefined && args.column_ranges !== null) {
      this.column_ranges = Thrift.copyList(args.column_ranges, [TColumnRange]);
    }
    if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {
      this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [TDictionaryGeneration]);
    }
    if (args.table_generations !== undefined && args.table_generations !== null) {
      this.table_generations = Thrift.copyList(args.table_generations, [TTableGeneration]);
    }
  }
};
TPendingQuery.prototype = {};
TPendingQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.column_ranges = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new TColumnRange();
          elem150.read(input);
          this.column_ranges.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size151 = 0;
        var _rtmp3155;
        this.dictionary_generations = [];
        var _etype154 = 0;
        _rtmp3155 = input.readListBegin();
        _etype154 = _rtmp3155.etype;
        _size151 = _rtmp3155.size;
        for (var _i156 = 0; _i156 < _size151; ++_i156)
        {
          var elem157 = null;
          elem157 = new TDictionaryGeneration();
          elem157.read(input);
          this.dictionary_generations.push(elem157);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size158 = 0;
        var _rtmp3162;
        this.table_generations = [];
        var _etype161 = 0;
        _rtmp3162 = input.readListBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = new TTableGeneration();
          elem164.read(input);
          this.table_generations.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPendingQuery.prototype.write = function(output) {
  output.writeStructBegin('TPendingQuery');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.column_ranges !== null && this.column_ranges !== undefined) {
    output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);
    for (var iter165 in this.column_ranges)
    {
      if (this.column_ranges.hasOwnProperty(iter165))
      {
        iter165 = this.column_ranges[iter165];
        iter165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {
    output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);
    for (var iter166 in this.dictionary_generations)
    {
      if (this.dictionary_generations.hasOwnProperty(iter166))
      {
        iter166 = this.dictionary_generations[iter166];
        iter166.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.table_generations !== null && this.table_generations !== undefined) {
    output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);
    for (var iter167 in this.table_generations)
    {
      if (this.table_generations.hasOwnProperty(iter167))
      {
        iter167 = this.table_generations[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TVarLen = function(args) {
  this.payload = null;
  this.is_null = null;
  if (args) {
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = args.payload;
    }
    if (args.is_null !== undefined && args.is_null !== null) {
      this.is_null = args.is_null;
    }
  }
};
TVarLen.prototype = {};
TVarLen.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payload = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.is_null = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TVarLen.prototype.write = function(output) {
  output.writeStructBegin('TVarLen');
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRING, 1);
    output.writeBinary(this.payload);
    output.writeFieldEnd();
  }
  if (this.is_null !== null && this.is_null !== undefined) {
    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
    output.writeBool(this.is_null);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDataBlockPtr = function(args) {
  this.fixed_len_data = null;
  this.var_len_data = null;
  if (args) {
    if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {
      this.fixed_len_data = args.fixed_len_data;
    }
    if (args.var_len_data !== undefined && args.var_len_data !== null) {
      this.var_len_data = Thrift.copyList(args.var_len_data, [TVarLen]);
    }
  }
};
TDataBlockPtr.prototype = {};
TDataBlockPtr.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fixed_len_data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.var_len_data = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new TVarLen();
          elem174.read(input);
          this.var_len_data.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDataBlockPtr.prototype.write = function(output) {
  output.writeStructBegin('TDataBlockPtr');
  if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {
    output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);
    output.writeBinary(this.fixed_len_data);
    output.writeFieldEnd();
  }
  if (this.var_len_data !== null && this.var_len_data !== undefined) {
    output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);
    for (var iter175 in this.var_len_data)
    {
      if (this.var_len_data.hasOwnProperty(iter175))
      {
        iter175 = this.var_len_data[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TInsertData = function(args) {
  this.db_id = null;
  this.table_id = null;
  this.column_ids = null;
  this.data = null;
  this.num_rows = null;
  if (args) {
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
    if (args.column_ids !== undefined && args.column_ids !== null) {
      this.column_ids = Thrift.copyList(args.column_ids, [null]);
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [TDataBlockPtr]);
    }
    if (args.num_rows !== undefined && args.num_rows !== null) {
      this.num_rows = args.num_rows;
    }
  }
};
TInsertData.prototype = {};
TInsertData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.column_ids = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = input.readI32().value;
          this.column_ids.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size183 = 0;
        var _rtmp3187;
        this.data = [];
        var _etype186 = 0;
        _rtmp3187 = input.readListBegin();
        _etype186 = _rtmp3187.etype;
        _size183 = _rtmp3187.size;
        for (var _i188 = 0; _i188 < _size183; ++_i188)
        {
          var elem189 = null;
          elem189 = new TDataBlockPtr();
          elem189.read(input);
          this.data.push(elem189);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.num_rows = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TInsertData.prototype.write = function(output) {
  output.writeStructBegin('TInsertData');
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 1);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  if (this.column_ids !== null && this.column_ids !== undefined) {
    output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.column_ids.length);
    for (var iter190 in this.column_ids)
    {
      if (this.column_ids.hasOwnProperty(iter190))
      {
        iter190 = this.column_ids[iter190];
        output.writeI32(iter190);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter191 in this.data)
    {
      if (this.data.hasOwnProperty(iter191))
      {
        iter191 = this.data[iter191];
        iter191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.num_rows !== null && this.num_rows !== undefined) {
    output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);
    output.writeI64(this.num_rows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPendingRenderQuery = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TPendingRenderQuery.prototype = {};
TPendingRenderQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPendingRenderQuery.prototype.write = function(output) {
  output.writeStructBegin('TPendingRenderQuery');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRenderParseResult = function(args) {
  this.merge_type = null;
  this.node_id = null;
  this.execution_time_ms = null;
  this.render_time_ms = null;
  this.total_time_ms = null;
  if (args) {
    if (args.merge_type !== undefined && args.merge_type !== null) {
      this.merge_type = args.merge_type;
    }
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
      this.execution_time_ms = args.execution_time_ms;
    }
    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
      this.render_time_ms = args.render_time_ms;
    }
    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
      this.total_time_ms = args.total_time_ms;
    }
  }
};
TRenderParseResult.prototype = {};
TRenderParseResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.merge_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.node_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.execution_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.render_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.total_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenderParseResult.prototype.write = function(output) {
  output.writeStructBegin('TRenderParseResult');
  if (this.merge_type !== null && this.merge_type !== undefined) {
    output.writeFieldBegin('merge_type', Thrift.Type.I32, 1);
    output.writeI32(this.merge_type);
    output.writeFieldEnd();
  }
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I32, 2);
    output.writeI32(this.node_id);
    output.writeFieldEnd();
  }
  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
    output.writeI64(this.execution_time_ms);
    output.writeFieldEnd();
  }
  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
    output.writeI64(this.render_time_ms);
    output.writeFieldEnd();
  }
  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
    output.writeI64(this.total_time_ms);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRawRenderPassDataResult = function(args) {
  this.num_channels = null;
  this.pixels = null;
  this.row_ids_A = null;
  this.row_ids_B = null;
  this.table_ids = null;
  this.accum_data = null;
  if (args) {
    if (args.num_channels !== undefined && args.num_channels !== null) {
      this.num_channels = args.num_channels;
    }
    if (args.pixels !== undefined && args.pixels !== null) {
      this.pixels = args.pixels;
    }
    if (args.row_ids_A !== undefined && args.row_ids_A !== null) {
      this.row_ids_A = args.row_ids_A;
    }
    if (args.row_ids_B !== undefined && args.row_ids_B !== null) {
      this.row_ids_B = args.row_ids_B;
    }
    if (args.table_ids !== undefined && args.table_ids !== null) {
      this.table_ids = args.table_ids;
    }
    if (args.accum_data !== undefined && args.accum_data !== null) {
      this.accum_data = args.accum_data;
    }
  }
};
TRawRenderPassDataResult.prototype = {};
TRawRenderPassDataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_channels = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pixels = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row_ids_A = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.row_ids_B = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.table_ids = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accum_data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRawRenderPassDataResult.prototype.write = function(output) {
  output.writeStructBegin('TRawRenderPassDataResult');
  if (this.num_channels !== null && this.num_channels !== undefined) {
    output.writeFieldBegin('num_channels', Thrift.Type.I32, 1);
    output.writeI32(this.num_channels);
    output.writeFieldEnd();
  }
  if (this.pixels !== null && this.pixels !== undefined) {
    output.writeFieldBegin('pixels', Thrift.Type.STRING, 2);
    output.writeBinary(this.pixels);
    output.writeFieldEnd();
  }
  if (this.row_ids_A !== null && this.row_ids_A !== undefined) {
    output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 3);
    output.writeBinary(this.row_ids_A);
    output.writeFieldEnd();
  }
  if (this.row_ids_B !== null && this.row_ids_B !== undefined) {
    output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 4);
    output.writeBinary(this.row_ids_B);
    output.writeFieldEnd();
  }
  if (this.table_ids !== null && this.table_ids !== undefined) {
    output.writeFieldBegin('table_ids', Thrift.Type.STRING, 5);
    output.writeBinary(this.table_ids);
    output.writeFieldEnd();
  }
  if (this.accum_data !== null && this.accum_data !== undefined) {
    output.writeFieldBegin('accum_data', Thrift.Type.STRING, 6);
    output.writeBinary(this.accum_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRawPixelData = function(args) {
  this.width = null;
  this.height = null;
  this.render_pass_map = null;
  if (args) {
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.render_pass_map !== undefined && args.render_pass_map !== null) {
      this.render_pass_map = Thrift.copyMap(args.render_pass_map, [TRawRenderPassDataResult]);
    }
  }
};
TRawPixelData.prototype = {};
TRawPixelData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size192 = 0;
        var _rtmp3196;
        this.render_pass_map = {};
        var _ktype193 = 0;
        var _vtype194 = 0;
        _rtmp3196 = input.readMapBegin();
        _ktype193 = _rtmp3196.ktype;
        _vtype194 = _rtmp3196.vtype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          if (_i197 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key198 = null;
          var val199 = null;
          key198 = input.readI32().value;
          val199 = new TRawRenderPassDataResult();
          val199.read(input);
          this.render_pass_map[key198] = val199;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRawPixelData.prototype.write = function(output) {
  output.writeStructBegin('TRawPixelData');
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 1);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 2);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.render_pass_map !== null && this.render_pass_map !== undefined) {
    output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));
    for (var kiter200 in this.render_pass_map)
    {
      if (this.render_pass_map.hasOwnProperty(kiter200))
      {
        var viter201 = this.render_pass_map[kiter200];
        output.writeI32(kiter200);
        viter201.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRenderDatum = function(args) {
  this.type = null;
  this.cnt = null;
  this.value = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.cnt !== undefined && args.cnt !== null) {
      this.cnt = args.cnt;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TRenderDatum.prototype = {};
TRenderDatum.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.cnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenderDatum.prototype.write = function(output) {
  output.writeStructBegin('TRenderDatum');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.cnt !== null && this.cnt !== undefined) {
    output.writeFieldBegin('cnt', Thrift.Type.I32, 2);
    output.writeI32(this.cnt);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRenderStepResult = function(args) {
  this.merge_data = null;
  this.raw_pixel_data = null;
  this.execution_time_ms = null;
  this.render_time_ms = null;
  this.total_time_ms = null;
  if (args) {
    if (args.merge_data !== undefined && args.merge_data !== null) {
      this.merge_data = Thrift.copyMap(args.merge_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, TRenderDatum]);
    }
    if (args.raw_pixel_data !== undefined && args.raw_pixel_data !== null) {
      this.raw_pixel_data = new TRawPixelData(args.raw_pixel_data);
    }
    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {
      this.execution_time_ms = args.execution_time_ms;
    }
    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {
      this.render_time_ms = args.render_time_ms;
    }
    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {
      this.total_time_ms = args.total_time_ms;
    }
  }
};
TRenderStepResult.prototype = {};
TRenderStepResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size202 = 0;
        var _rtmp3206;
        this.merge_data = {};
        var _ktype203 = 0;
        var _vtype204 = 0;
        _rtmp3206 = input.readMapBegin();
        _ktype203 = _rtmp3206.ktype;
        _vtype204 = _rtmp3206.vtype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          if (_i207 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key208 = null;
          var val209 = null;
          key208 = input.readString().value;
          var _size210 = 0;
          var _rtmp3214;
          val209 = {};
          var _ktype211 = 0;
          var _vtype212 = 0;
          _rtmp3214 = input.readMapBegin();
          _ktype211 = _rtmp3214.ktype;
          _vtype212 = _rtmp3214.vtype;
          _size210 = _rtmp3214.size;
          for (var _i215 = 0; _i215 < _size210; ++_i215)
          {
            if (_i215 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key216 = null;
            var val217 = null;
            key216 = input.readString().value;
            var _size218 = 0;
            var _rtmp3222;
            val217 = {};
            var _ktype219 = 0;
            var _vtype220 = 0;
            _rtmp3222 = input.readMapBegin();
            _ktype219 = _rtmp3222.ktype;
            _vtype220 = _rtmp3222.vtype;
            _size218 = _rtmp3222.size;
            for (var _i223 = 0; _i223 < _size218; ++_i223)
            {
              if (_i223 > 0 ) {
                if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                  input.rstack.pop();
                }
              }
              var key224 = null;
              var val225 = null;
              key224 = input.readString().value;
              var _size226 = 0;
              var _rtmp3230;
              val225 = {};
              var _ktype227 = 0;
              var _vtype228 = 0;
              _rtmp3230 = input.readMapBegin();
              _ktype227 = _rtmp3230.ktype;
              _vtype228 = _rtmp3230.vtype;
              _size226 = _rtmp3230.size;
              for (var _i231 = 0; _i231 < _size226; ++_i231)
              {
                if (_i231 > 0 ) {
                  if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                    input.rstack.pop();
                  }
                }
                var key232 = null;
                var val233 = null;
                key232 = input.readString().value;
                var _size234 = 0;
                var _rtmp3238;
                val233 = [];
                var _etype237 = 0;
                _rtmp3238 = input.readListBegin();
                _etype237 = _rtmp3238.etype;
                _size234 = _rtmp3238.size;
                for (var _i239 = 0; _i239 < _size234; ++_i239)
                {
                  var elem240 = null;
                  elem240 = new TRenderDatum();
                  elem240.read(input);
                  val233.push(elem240);
                }
                input.readListEnd();
                val225[key232] = val233;
              }
              input.readMapEnd();
              val217[key224] = val225;
            }
            input.readMapEnd();
            val209[key216] = val217;
          }
          input.readMapEnd();
          this.merge_data[key208] = val209;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.raw_pixel_data = new TRawPixelData();
        this.raw_pixel_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.execution_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.render_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.total_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenderStepResult.prototype.write = function(output) {
  output.writeStructBegin('TRenderStepResult');
  if (this.merge_data !== null && this.merge_data !== undefined) {
    output.writeFieldBegin('merge_data', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merge_data));
    for (var kiter241 in this.merge_data)
    {
      if (this.merge_data.hasOwnProperty(kiter241))
      {
        var viter242 = this.merge_data[kiter241];
        output.writeString(kiter241);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter242));
        for (var kiter243 in viter242)
        {
          if (viter242.hasOwnProperty(kiter243))
          {
            var viter244 = viter242[kiter243];
            output.writeString(kiter243);
            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter244));
            for (var kiter245 in viter244)
            {
              if (viter244.hasOwnProperty(kiter245))
              {
                var viter246 = viter244[kiter245];
                output.writeString(kiter245);
                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter246));
                for (var kiter247 in viter246)
                {
                  if (viter246.hasOwnProperty(kiter247))
                  {
                    var viter248 = viter246[kiter247];
                    output.writeString(kiter247);
                    output.writeListBegin(Thrift.Type.STRUCT, viter248.length);
                    for (var iter249 in viter248)
                    {
                      if (viter248.hasOwnProperty(iter249))
                      {
                        iter249 = viter248[iter249];
                        iter249.write(output);
                      }
                    }
                    output.writeListEnd();
                  }
                }
                output.writeMapEnd();
              }
            }
            output.writeMapEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.raw_pixel_data !== null && this.raw_pixel_data !== undefined) {
    output.writeFieldBegin('raw_pixel_data', Thrift.Type.STRUCT, 2);
    this.raw_pixel_data.write(output);
    output.writeFieldEnd();
  }
  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);
    output.writeI64(this.execution_time_ms);
    output.writeFieldEnd();
  }
  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {
    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);
    output.writeI64(this.render_time_ms);
    output.writeFieldEnd();
  }
  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {
    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);
    output.writeI64(this.total_time_ms);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDatabasePermissions = function(args) {
  this.create_ = null;
  this.delete_ = null;
  if (args) {
    if (args.create_ !== undefined && args.create_ !== null) {
      this.create_ = args.create_;
    }
    if (args.delete_ !== undefined && args.delete_ !== null) {
      this.delete_ = args.delete_;
    }
  }
};
TDatabasePermissions.prototype = {};
TDatabasePermissions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.create_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.delete_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDatabasePermissions.prototype.write = function(output) {
  output.writeStructBegin('TDatabasePermissions');
  if (this.create_ !== null && this.create_ !== undefined) {
    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
    output.writeBool(this.create_);
    output.writeFieldEnd();
  }
  if (this.delete_ !== null && this.delete_ !== undefined) {
    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);
    output.writeBool(this.delete_);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTablePermissions = function(args) {
  this.create_ = null;
  this.drop_ = null;
  this.select_ = null;
  this.insert_ = null;
  this.update_ = null;
  this.delete_ = null;
  this.truncate_ = null;
  if (args) {
    if (args.create_ !== undefined && args.create_ !== null) {
      this.create_ = args.create_;
    }
    if (args.drop_ !== undefined && args.drop_ !== null) {
      this.drop_ = args.drop_;
    }
    if (args.select_ !== undefined && args.select_ !== null) {
      this.select_ = args.select_;
    }
    if (args.insert_ !== undefined && args.insert_ !== null) {
      this.insert_ = args.insert_;
    }
    if (args.update_ !== undefined && args.update_ !== null) {
      this.update_ = args.update_;
    }
    if (args.delete_ !== undefined && args.delete_ !== null) {
      this.delete_ = args.delete_;
    }
    if (args.truncate_ !== undefined && args.truncate_ !== null) {
      this.truncate_ = args.truncate_;
    }
  }
};
TTablePermissions.prototype = {};
TTablePermissions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.create_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.drop_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.select_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.insert_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.update_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.delete_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.truncate_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTablePermissions.prototype.write = function(output) {
  output.writeStructBegin('TTablePermissions');
  if (this.create_ !== null && this.create_ !== undefined) {
    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
    output.writeBool(this.create_);
    output.writeFieldEnd();
  }
  if (this.drop_ !== null && this.drop_ !== undefined) {
    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
    output.writeBool(this.drop_);
    output.writeFieldEnd();
  }
  if (this.select_ !== null && this.select_ !== undefined) {
    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);
    output.writeBool(this.select_);
    output.writeFieldEnd();
  }
  if (this.insert_ !== null && this.insert_ !== undefined) {
    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);
    output.writeBool(this.insert_);
    output.writeFieldEnd();
  }
  if (this.update_ !== null && this.update_ !== undefined) {
    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);
    output.writeBool(this.update_);
    output.writeFieldEnd();
  }
  if (this.delete_ !== null && this.delete_ !== undefined) {
    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);
    output.writeBool(this.delete_);
    output.writeFieldEnd();
  }
  if (this.truncate_ !== null && this.truncate_ !== undefined) {
    output.writeFieldBegin('truncate_', Thrift.Type.BOOL, 7);
    output.writeBool(this.truncate_);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDashboardPermissions = function(args) {
  this.create_ = null;
  this.delete_ = null;
  this.view_ = null;
  this.edit_ = null;
  if (args) {
    if (args.create_ !== undefined && args.create_ !== null) {
      this.create_ = args.create_;
    }
    if (args.delete_ !== undefined && args.delete_ !== null) {
      this.delete_ = args.delete_;
    }
    if (args.view_ !== undefined && args.view_ !== null) {
      this.view_ = args.view_;
    }
    if (args.edit_ !== undefined && args.edit_ !== null) {
      this.edit_ = args.edit_;
    }
  }
};
TDashboardPermissions.prototype = {};
TDashboardPermissions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.create_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.delete_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.view_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.edit_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDashboardPermissions.prototype.write = function(output) {
  output.writeStructBegin('TDashboardPermissions');
  if (this.create_ !== null && this.create_ !== undefined) {
    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
    output.writeBool(this.create_);
    output.writeFieldEnd();
  }
  if (this.delete_ !== null && this.delete_ !== undefined) {
    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 2);
    output.writeBool(this.delete_);
    output.writeFieldEnd();
  }
  if (this.view_ !== null && this.view_ !== undefined) {
    output.writeFieldBegin('view_', Thrift.Type.BOOL, 3);
    output.writeBool(this.view_);
    output.writeFieldEnd();
  }
  if (this.edit_ !== null && this.edit_ !== undefined) {
    output.writeFieldBegin('edit_', Thrift.Type.BOOL, 4);
    output.writeBool(this.edit_);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TViewPermissions = function(args) {
  this.create_ = null;
  this.drop_ = null;
  this.select_ = null;
  this.insert_ = null;
  this.update_ = null;
  this.delete_ = null;
  if (args) {
    if (args.create_ !== undefined && args.create_ !== null) {
      this.create_ = args.create_;
    }
    if (args.drop_ !== undefined && args.drop_ !== null) {
      this.drop_ = args.drop_;
    }
    if (args.select_ !== undefined && args.select_ !== null) {
      this.select_ = args.select_;
    }
    if (args.insert_ !== undefined && args.insert_ !== null) {
      this.insert_ = args.insert_;
    }
    if (args.update_ !== undefined && args.update_ !== null) {
      this.update_ = args.update_;
    }
    if (args.delete_ !== undefined && args.delete_ !== null) {
      this.delete_ = args.delete_;
    }
  }
};
TViewPermissions.prototype = {};
TViewPermissions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.create_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.drop_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.select_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.insert_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.update_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.delete_ = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TViewPermissions.prototype.write = function(output) {
  output.writeStructBegin('TViewPermissions');
  if (this.create_ !== null && this.create_ !== undefined) {
    output.writeFieldBegin('create_', Thrift.Type.BOOL, 1);
    output.writeBool(this.create_);
    output.writeFieldEnd();
  }
  if (this.drop_ !== null && this.drop_ !== undefined) {
    output.writeFieldBegin('drop_', Thrift.Type.BOOL, 2);
    output.writeBool(this.drop_);
    output.writeFieldEnd();
  }
  if (this.select_ !== null && this.select_ !== undefined) {
    output.writeFieldBegin('select_', Thrift.Type.BOOL, 3);
    output.writeBool(this.select_);
    output.writeFieldEnd();
  }
  if (this.insert_ !== null && this.insert_ !== undefined) {
    output.writeFieldBegin('insert_', Thrift.Type.BOOL, 4);
    output.writeBool(this.insert_);
    output.writeFieldEnd();
  }
  if (this.update_ !== null && this.update_ !== undefined) {
    output.writeFieldBegin('update_', Thrift.Type.BOOL, 5);
    output.writeBool(this.update_);
    output.writeFieldEnd();
  }
  if (this.delete_ !== null && this.delete_ !== undefined) {
    output.writeFieldBegin('delete_', Thrift.Type.BOOL, 6);
    output.writeBool(this.delete_);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBObject = function(args) {
  this.objectName = null;
  this.objectType = null;
  this.privs = null;
  this.grantee = null;
  if (args) {
    if (args.objectName !== undefined && args.objectName !== null) {
      this.objectName = args.objectName;
    }
    if (args.objectType !== undefined && args.objectType !== null) {
      this.objectType = args.objectType;
    }
    if (args.privs !== undefined && args.privs !== null) {
      this.privs = Thrift.copyList(args.privs, [null]);
    }
    if (args.grantee !== undefined && args.grantee !== null) {
      this.grantee = args.grantee;
    }
  }
};
TDBObject.prototype = {};
TDBObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.objectType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size250 = 0;
        var _rtmp3254;
        this.privs = [];
        var _etype253 = 0;
        _rtmp3254 = input.readListBegin();
        _etype253 = _rtmp3254.etype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var elem256 = null;
          elem256 = input.readBool().value;
          this.privs.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.grantee = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBObject.prototype.write = function(output) {
  output.writeStructBegin('TDBObject');
  if (this.objectName !== null && this.objectName !== undefined) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 1);
    output.writeString(this.objectName);
    output.writeFieldEnd();
  }
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.I32, 2);
    output.writeI32(this.objectType);
    output.writeFieldEnd();
  }
  if (this.privs !== null && this.privs !== undefined) {
    output.writeFieldBegin('privs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.BOOL, this.privs.length);
    for (var iter257 in this.privs)
    {
      if (this.privs.hasOwnProperty(iter257))
      {
        iter257 = this.privs[iter257];
        output.writeBool(iter257);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.grantee !== null && this.grantee !== undefined) {
    output.writeFieldBegin('grantee', Thrift.Type.STRING, 4);
    output.writeString(this.grantee);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TLicenseInfo = function(args) {
  this.claims = null;
  if (args) {
    if (args.claims !== undefined && args.claims !== null) {
      this.claims = Thrift.copyList(args.claims, [null]);
    }
  }
};
TLicenseInfo.prototype = {};
TLicenseInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size258 = 0;
        var _rtmp3262;
        this.claims = [];
        var _etype261 = 0;
        _rtmp3262 = input.readListBegin();
        _etype261 = _rtmp3262.etype;
        _size258 = _rtmp3262.size;
        for (var _i263 = 0; _i263 < _size258; ++_i263)
        {
          var elem264 = null;
          elem264 = input.readString().value;
          this.claims.push(elem264);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TLicenseInfo.prototype.write = function(output) {
  output.writeStructBegin('TLicenseInfo');
  if (this.claims !== null && this.claims !== undefined) {
    output.writeFieldBegin('claims', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.claims.length);
    for (var iter265 in this.claims)
    {
      if (this.claims.hasOwnProperty(iter265))
      {
        iter265 = this.claims[iter265];
        output.writeString(iter265);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

