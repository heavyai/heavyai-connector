//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

OmniSci_connect_args = function(args) {
  this.user = null;
  this.passwd = null;
  this.dbname = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.passwd !== undefined && args.passwd !== null) {
      this.passwd = args.passwd;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
OmniSci_connect_args.prototype = {};
OmniSci_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_connect_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_connect_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_connect_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_connect_result.prototype = {};
OmniSci_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_connect_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_krb5_connect_args = function(args) {
  this.inputToken = null;
  this.dbname = null;
  if (args) {
    if (args.inputToken !== undefined && args.inputToken !== null) {
      this.inputToken = args.inputToken;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
OmniSci_krb5_connect_args.prototype = {};
OmniSci_krb5_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_krb5_connect_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_krb5_connect_args');
  if (this.inputToken !== null && this.inputToken !== undefined) {
    output.writeFieldBegin('inputToken', Thrift.Type.STRING, 1);
    output.writeString(this.inputToken);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_krb5_connect_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TKrb5Session(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_krb5_connect_result.prototype = {};
OmniSci_krb5_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TKrb5Session();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_krb5_connect_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_krb5_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_disconnect_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_disconnect_args.prototype = {};
OmniSci_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_disconnect_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_disconnect_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_disconnect_result.prototype = {};
OmniSci_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_disconnect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_switch_database_args = function(args) {
  this.session = null;
  this.dbname = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
OmniSci_switch_database_args.prototype = {};
OmniSci_switch_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_switch_database_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_switch_database_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_switch_database_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_switch_database_result.prototype = {};
OmniSci_switch_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_switch_database_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_switch_database_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_clone_session_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_clone_session_args.prototype = {};
OmniSci_clone_session_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clone_session_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clone_session_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_clone_session_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_clone_session_result.prototype = {};
OmniSci_clone_session_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clone_session_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clone_session_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_server_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_server_status_args.prototype = {};
OmniSci_get_server_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_server_status_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_server_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_server_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TServerStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_server_status_result.prototype = {};
OmniSci_get_server_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TServerStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_server_status_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_server_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_status_args.prototype = {};
OmniSci_get_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_status_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TServerStatus]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_status_result.prototype = {};
OmniSci_get_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size290 = 0;
        var _rtmp3294;
        this.success = [];
        var _etype293 = 0;
        _rtmp3294 = input.readListBegin();
        _etype293 = _rtmp3294.etype;
        _size290 = _rtmp3294.size;
        for (var _i295 = 0; _i295 < _size290; ++_i295)
        {
          var elem296 = null;
          elem296 = new TServerStatus();
          elem296.read(input);
          this.success.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_status_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter297 in this.success)
    {
      if (this.success.hasOwnProperty(iter297))
      {
        iter297 = this.success[iter297];
        iter297.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_hardware_info_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_hardware_info_args.prototype = {};
OmniSci_get_hardware_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_hardware_info_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_hardware_info_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_hardware_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TClusterHardwareInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_hardware_info_result.prototype = {};
OmniSci_get_hardware_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TClusterHardwareInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_hardware_info_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_hardware_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_tables_args.prototype = {};
OmniSci_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_tables_result.prototype = {};
OmniSci_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size298 = 0;
        var _rtmp3302;
        this.success = [];
        var _etype301 = 0;
        _rtmp3302 = input.readListBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = input.readString().value;
          this.success.push(elem304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter305 in this.success)
    {
      if (this.success.hasOwnProperty(iter305))
      {
        iter305 = this.success[iter305];
        output.writeString(iter305);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_physical_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_physical_tables_args.prototype = {};
OmniSci_get_physical_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_physical_tables_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_physical_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_physical_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_physical_tables_result.prototype = {};
OmniSci_get_physical_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size306 = 0;
        var _rtmp3310;
        this.success = [];
        var _etype309 = 0;
        _rtmp3310 = input.readListBegin();
        _etype309 = _rtmp3310.etype;
        _size306 = _rtmp3310.size;
        for (var _i311 = 0; _i311 < _size306; ++_i311)
        {
          var elem312 = null;
          elem312 = input.readString().value;
          this.success.push(elem312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_physical_tables_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_physical_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter313 in this.success)
    {
      if (this.success.hasOwnProperty(iter313))
      {
        iter313 = this.success[iter313];
        output.writeString(iter313);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_views_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_views_args.prototype = {};
OmniSci_get_views_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_views_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_views_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_views_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_views_result.prototype = {};
OmniSci_get_views_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size314 = 0;
        var _rtmp3318;
        this.success = [];
        var _etype317 = 0;
        _rtmp3318 = input.readListBegin();
        _etype317 = _rtmp3318.etype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var elem320 = null;
          elem320 = input.readString().value;
          this.success.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_views_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_views_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter321 in this.success)
    {
      if (this.success.hasOwnProperty(iter321))
      {
        iter321 = this.success[iter321];
        output.writeString(iter321);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_tables_meta_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_tables_meta_args.prototype = {};
OmniSci_get_tables_meta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_tables_meta_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_tables_meta_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_tables_meta_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TTableMeta]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_tables_meta_result.prototype = {};
OmniSci_get_tables_meta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.success = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new TTableMeta();
          elem328.read(input);
          this.success.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_tables_meta_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_tables_meta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter329 in this.success)
    {
      if (this.success.hasOwnProperty(iter329))
      {
        iter329 = this.success[iter329];
        iter329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_table_details_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
OmniSci_get_table_details_args.prototype = {};
OmniSci_get_table_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_details_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_details_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_table_details_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TTableDetails(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_table_details_result.prototype = {};
OmniSci_get_table_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TTableDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_details_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_internal_table_details_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
OmniSci_get_internal_table_details_args.prototype = {};
OmniSci_get_internal_table_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_internal_table_details_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_internal_table_details_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_internal_table_details_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TTableDetails(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_internal_table_details_result.prototype = {};
OmniSci_get_internal_table_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TTableDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_internal_table_details_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_internal_table_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_users_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_users_args.prototype = {};
OmniSci_get_users_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_users_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_users_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_users_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_users_result.prototype = {};
OmniSci_get_users_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.success = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = input.readString().value;
          this.success.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_users_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_users_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter337 in this.success)
    {
      if (this.success.hasOwnProperty(iter337))
      {
        iter337 = this.success[iter337];
        output.writeString(iter337);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_databases_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_databases_args.prototype = {};
OmniSci_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_databases_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_databases_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TDBInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_databases_result.prototype = {};
OmniSci_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size338 = 0;
        var _rtmp3342;
        this.success = [];
        var _etype341 = 0;
        _rtmp3342 = input.readListBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          elem344 = new TDBInfo();
          elem344.read(input);
          this.success.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter345 in this.success)
    {
      if (this.success.hasOwnProperty(iter345))
      {
        iter345 = this.success[iter345];
        iter345.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_version_args = function(args) {
};
OmniSci_get_version_args.prototype = {};
OmniSci_get_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_version_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_version_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_version_result.prototype = {};
OmniSci_get_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_version_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_start_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_start_heap_profile_args.prototype = {};
OmniSci_start_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_start_heap_profile_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_start_heap_profile_result.prototype = {};
OmniSci_start_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_stop_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_stop_heap_profile_args.prototype = {};
OmniSci_stop_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_stop_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_stop_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_stop_heap_profile_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_stop_heap_profile_result.prototype = {};
OmniSci_stop_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_stop_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_stop_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_heap_profile_args.prototype = {};
OmniSci_get_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_heap_profile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_heap_profile_result.prototype = {};
OmniSci_get_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_heap_profile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_memory_args = function(args) {
  this.session = null;
  this.memory_level = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.memory_level !== undefined && args.memory_level !== null) {
      this.memory_level = args.memory_level;
    }
  }
};
OmniSci_get_memory_args.prototype = {};
OmniSci_get_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.memory_level = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_memory_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.memory_level !== null && this.memory_level !== undefined) {
    output.writeFieldBegin('memory_level', Thrift.Type.STRING, 2);
    output.writeString(this.memory_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_memory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TNodeMemoryInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_memory_result.prototype = {};
OmniSci_get_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.success = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = new TNodeMemoryInfo();
          elem352.read(input);
          this.success.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_memory_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_memory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter353 in this.success)
    {
      if (this.success.hasOwnProperty(iter353))
      {
        iter353 = this.success[iter353];
        iter353.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_clear_cpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_clear_cpu_memory_args.prototype = {};
OmniSci_clear_cpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clear_cpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clear_cpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_clear_cpu_memory_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_clear_cpu_memory_result.prototype = {};
OmniSci_clear_cpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clear_cpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clear_cpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_clear_gpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_clear_gpu_memory_args.prototype = {};
OmniSci_clear_gpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clear_gpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clear_gpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_clear_gpu_memory_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_clear_gpu_memory_result.prototype = {};
OmniSci_clear_gpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_clear_gpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_clear_gpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_set_table_epoch_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  this.new_epoch = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
    if (args.new_epoch !== undefined && args.new_epoch !== null) {
      this.new_epoch = args.new_epoch;
    }
  }
};
OmniSci_set_table_epoch_args.prototype = {};
OmniSci_set_table_epoch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.new_epoch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epoch_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epoch_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  if (this.new_epoch !== null && this.new_epoch !== undefined) {
    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 4);
    output.writeI32(this.new_epoch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_set_table_epoch_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_set_table_epoch_result.prototype = {};
OmniSci_set_table_epoch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epoch_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epoch_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_set_table_epoch_by_name_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.new_epoch = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.new_epoch !== undefined && args.new_epoch !== null) {
      this.new_epoch = args.new_epoch;
    }
  }
};
OmniSci_set_table_epoch_by_name_args.prototype = {};
OmniSci_set_table_epoch_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.new_epoch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epoch_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epoch_by_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.new_epoch !== null && this.new_epoch !== undefined) {
    output.writeFieldBegin('new_epoch', Thrift.Type.I32, 3);
    output.writeI32(this.new_epoch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_set_table_epoch_by_name_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_set_table_epoch_by_name_result.prototype = {};
OmniSci_set_table_epoch_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_table_epoch_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_table_epoch_by_name_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_table_epoch_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
OmniSci_get_table_epoch_args.prototype = {};
OmniSci_get_table_epoch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epoch_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epoch_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_table_epoch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
OmniSci_get_table_epoch_result.prototype = {};
OmniSci_get_table_epoch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epoch_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epoch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_table_epoch_by_name_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
OmniSci_get_table_epoch_by_name_args.prototype = {};
OmniSci_get_table_epoch_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epoch_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epoch_by_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_table_epoch_by_name_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
OmniSci_get_table_epoch_by_name_result.prototype = {};
OmniSci_get_table_epoch_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_table_epoch_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_table_epoch_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_session_info_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_session_info_args.prototype = {};
OmniSci_get_session_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_session_info_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_session_info_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_session_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TSessionInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_session_info_result.prototype = {};
OmniSci_get_session_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TSessionInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_session_info_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_session_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_sql_execute_args = function(args) {
  this.session = null;
  this.query = null;
  this.column_format = null;
  this.nonce = null;
  this.first_n = -1;
  this.at_most_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
    if (args.at_most_n !== undefined && args.at_most_n !== null) {
      this.at_most_n = args.at_most_n;
    }
  }
};
OmniSci_sql_execute_args.prototype = {};
OmniSci_sql_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.at_most_n = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  if (this.at_most_n !== null && this.at_most_n !== undefined) {
    output.writeFieldBegin('at_most_n', Thrift.Type.I32, 6);
    output.writeI32(this.at_most_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_sql_execute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TQueryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_sql_execute_result.prototype = {};
OmniSci_sql_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_sql_execute_df_args = function(args) {
  this.session = null;
  this.query = null;
  this.device_type = null;
  this.device_id = 0;
  this.first_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.device_type !== undefined && args.device_type !== null) {
      this.device_type = args.device_type;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
  }
};
OmniSci_sql_execute_df_args.prototype = {};
OmniSci_sql_execute_df_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_df_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_df_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.device_type !== null && this.device_type !== undefined) {
    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);
    output.writeI32(this.device_type);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_sql_execute_df_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TDataFrame(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_sql_execute_df_result.prototype = {};
OmniSci_sql_execute_df_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TDataFrame();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_df_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_df_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_sql_execute_gdf_args = function(args) {
  this.session = null;
  this.query = null;
  this.device_id = 0;
  this.first_n = -1;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
    if (args.first_n !== undefined && args.first_n !== null) {
      this.first_n = args.first_n;
    }
  }
};
OmniSci_sql_execute_gdf_args.prototype = {};
OmniSci_sql_execute_gdf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.first_n = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_gdf_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_gdf_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  if (this.first_n !== null && this.first_n !== undefined) {
    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);
    output.writeI32(this.first_n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_sql_execute_gdf_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TDataFrame(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_sql_execute_gdf_result.prototype = {};
OmniSci_sql_execute_gdf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TDataFrame();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_execute_gdf_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_execute_gdf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_deallocate_df_args = function(args) {
  this.session = null;
  this.df = null;
  this.device_type = null;
  this.device_id = 0;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.df !== undefined && args.df !== null) {
      this.df = new TDataFrame(args.df);
    }
    if (args.device_type !== undefined && args.device_type !== null) {
      this.device_type = args.device_type;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
  }
};
OmniSci_deallocate_df_args.prototype = {};
OmniSci_deallocate_df_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new TDataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.device_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.device_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_deallocate_df_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_deallocate_df_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.device_type !== null && this.device_type !== undefined) {
    output.writeFieldBegin('device_type', Thrift.Type.I32, 3);
    output.writeI32(this.device_type);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.I32, 4);
    output.writeI32(this.device_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_deallocate_df_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_deallocate_df_result.prototype = {};
OmniSci_deallocate_df_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_deallocate_df_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_deallocate_df_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_interrupt_args = function(args) {
  this.query_session = null;
  this.interrupt_session = null;
  if (args) {
    if (args.query_session !== undefined && args.query_session !== null) {
      this.query_session = args.query_session;
    }
    if (args.interrupt_session !== undefined && args.interrupt_session !== null) {
      this.interrupt_session = args.interrupt_session;
    }
  }
};
OmniSci_interrupt_args.prototype = {};
OmniSci_interrupt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query_session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.interrupt_session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_interrupt_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_interrupt_args');
  if (this.query_session !== null && this.query_session !== undefined) {
    output.writeFieldBegin('query_session', Thrift.Type.STRING, 1);
    output.writeString(this.query_session);
    output.writeFieldEnd();
  }
  if (this.interrupt_session !== null && this.interrupt_session !== undefined) {
    output.writeFieldBegin('interrupt_session', Thrift.Type.STRING, 2);
    output.writeString(this.interrupt_session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_interrupt_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_interrupt_result.prototype = {};
OmniSci_interrupt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_interrupt_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_interrupt_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_sql_validate_args = function(args) {
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
OmniSci_sql_validate_args.prototype = {};
OmniSci_sql_validate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_validate_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_validate_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_sql_validate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_sql_validate_result.prototype = {};
OmniSci_sql_validate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size354 = 0;
        var _rtmp3358;
        this.success = [];
        var _etype357 = 0;
        _rtmp3358 = input.readListBegin();
        _etype357 = _rtmp3358.etype;
        _size354 = _rtmp3358.size;
        for (var _i359 = 0; _i359 < _size354; ++_i359)
        {
          var elem360 = null;
          elem360 = new TColumnType();
          elem360.read(input);
          this.success.push(elem360);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_sql_validate_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_sql_validate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter361 in this.success)
    {
      if (this.success.hasOwnProperty(iter361))
      {
        iter361 = this.success[iter361];
        iter361.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_completion_hints_args = function(args) {
  this.session = null;
  this.sql = null;
  this.cursor = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    }
    if (args.cursor !== undefined && args.cursor !== null) {
      this.cursor = args.cursor;
    }
  }
};
OmniSci_get_completion_hints_args.prototype = {};
OmniSci_get_completion_hints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cursor = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_completion_hints_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_completion_hints_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 2);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.cursor !== null && this.cursor !== undefined) {
    output.writeFieldBegin('cursor', Thrift.Type.I32, 3);
    output.writeI32(this.cursor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_completion_hints_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TCompletionHint]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_completion_hints_result.prototype = {};
OmniSci_get_completion_hints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size362 = 0;
        var _rtmp3366;
        this.success = [];
        var _etype365 = 0;
        _rtmp3366 = input.readListBegin();
        _etype365 = _rtmp3366.etype;
        _size362 = _rtmp3366.size;
        for (var _i367 = 0; _i367 < _size362; ++_i367)
        {
          var elem368 = null;
          elem368 = new TCompletionHint();
          elem368.read(input);
          this.success.push(elem368);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_completion_hints_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_completion_hints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter369 in this.success)
    {
      if (this.success.hasOwnProperty(iter369))
      {
        iter369 = this.success[iter369];
        iter369.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_set_execution_mode_args = function(args) {
  this.session = null;
  this.mode = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
OmniSci_set_execution_mode_args.prototype = {};
OmniSci_set_execution_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_execution_mode_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_execution_mode_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_set_execution_mode_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_set_execution_mode_result.prototype = {};
OmniSci_set_execution_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_execution_mode_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_execution_mode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_render_vega_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.vega_json = null;
  this.compression_level = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
    if (args.compression_level !== undefined && args.compression_level !== null) {
      this.compression_level = args.compression_level;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
OmniSci_render_vega_args.prototype = {};
OmniSci_render_vega_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compression_level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_render_vega_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_render_vega_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  if (this.compression_level !== null && this.compression_level !== undefined) {
    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);
    output.writeI32(this.compression_level);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_render_vega_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_render_vega_result.prototype = {};
OmniSci_render_vega_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_render_vega_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_render_vega_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_result_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new TPixel(args.pixel);
    }
    if (args.table_col_names !== undefined && args.table_col_names !== null) {
      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
OmniSci_get_result_row_for_pixel_args.prototype = {};
OmniSci_get_result_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size370 = 0;
        var _rtmp3374;
        this.table_col_names = {};
        var _ktype371 = 0;
        var _vtype372 = 0;
        _rtmp3374 = input.readMapBegin();
        _ktype371 = _rtmp3374.ktype;
        _vtype372 = _rtmp3374.vtype;
        _size370 = _rtmp3374.size;
        for (var _i375 = 0; _i375 < _size370; ++_i375)
        {
          if (_i375 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key376 = null;
          var val377 = null;
          key376 = input.readString().value;
          var _size378 = 0;
          var _rtmp3382;
          val377 = [];
          var _etype381 = 0;
          _rtmp3382 = input.readListBegin();
          _etype381 = _rtmp3382.etype;
          _size378 = _rtmp3382.size;
          for (var _i383 = 0; _i383 < _size378; ++_i383)
          {
            var elem384 = null;
            elem384 = input.readString().value;
            val377.push(elem384);
          }
          input.readListEnd();
          this.table_col_names[key376] = val377;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_result_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_result_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_col_names !== null && this.table_col_names !== undefined) {
    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));
    for (var kiter385 in this.table_col_names)
    {
      if (this.table_col_names.hasOwnProperty(kiter385))
      {
        var viter386 = this.table_col_names[kiter385];
        output.writeString(kiter385);
        output.writeListBegin(Thrift.Type.STRING, viter386.length);
        for (var iter387 in viter386)
        {
          if (viter386.hasOwnProperty(iter387))
          {
            iter387 = viter386[iter387];
            output.writeString(iter387);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_result_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPixelTableRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_result_row_for_pixel_result.prototype = {};
OmniSci_get_result_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPixelTableRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_result_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_result_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
  }
};
OmniSci_get_dashboard_args.prototype = {};
OmniSci_get_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_dashboard_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TDashboard(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_dashboard_result.prototype = {};
OmniSci_get_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TDashboard();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_dashboards_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_dashboards_args.prototype = {};
OmniSci_get_dashboards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboards_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_dashboards_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TDashboard]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_dashboards_result.prototype = {};
OmniSci_get_dashboards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size388 = 0;
        var _rtmp3392;
        this.success = [];
        var _etype391 = 0;
        _rtmp3392 = input.readListBegin();
        _etype391 = _rtmp3392.etype;
        _size388 = _rtmp3392.size;
        for (var _i393 = 0; _i393 < _size388; ++_i393)
        {
          var elem394 = null;
          elem394 = new TDashboard();
          elem394.read(input);
          this.success.push(elem394);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboards_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter395 in this.success)
    {
      if (this.success.hasOwnProperty(iter395))
      {
        iter395 = this.success[iter395];
        iter395.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_create_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_name = null;
  this.dashboard_state = null;
  this.image_hash = null;
  this.dashboard_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
      this.dashboard_name = args.dashboard_name;
    }
    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
      this.dashboard_state = args.dashboard_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
      this.dashboard_metadata = args.dashboard_metadata;
    }
  }
};
OmniSci_create_dashboard_args.prototype = {};
OmniSci_create_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 2);
    output.writeString(this.dashboard_name);
    output.writeFieldEnd();
  }
  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 3);
    output.writeString(this.dashboard_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.dashboard_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_create_dashboard_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_create_dashboard_result.prototype = {};
OmniSci_create_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_dashboard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_replace_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.dashboard_name = null;
  this.dashboard_owner = null;
  this.dashboard_state = null;
  this.image_hash = null;
  this.dashboard_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
      this.dashboard_name = args.dashboard_name;
    }
    if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {
      this.dashboard_owner = args.dashboard_owner;
    }
    if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
      this.dashboard_state = args.dashboard_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
      this.dashboard_metadata = args.dashboard_metadata;
    }
  }
};
OmniSci_replace_dashboard_args.prototype = {};
OmniSci_replace_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_owner = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_replace_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_replace_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
    output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 3);
    output.writeString(this.dashboard_name);
    output.writeFieldEnd();
  }
  if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {
    output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 4);
    output.writeString(this.dashboard_owner);
    output.writeFieldEnd();
  }
  if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
    output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 5);
    output.writeString(this.dashboard_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 6);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
    output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 7);
    output.writeString(this.dashboard_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_replace_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_replace_dashboard_result.prototype = {};
OmniSci_replace_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_replace_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_replace_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_delete_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
  }
};
OmniSci_delete_dashboard_args.prototype = {};
OmniSci_delete_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_delete_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_delete_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_delete_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_delete_dashboard_result.prototype = {};
OmniSci_delete_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_delete_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_delete_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_share_dashboards_args = function(args) {
  this.session = null;
  this.dashboard_ids = null;
  this.groups = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new TDashboardPermissions(args.permissions);
    }
  }
};
OmniSci_share_dashboards_args.prototype = {};
OmniSci_share_dashboards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size396 = 0;
        var _rtmp3400;
        this.dashboard_ids = [];
        var _etype399 = 0;
        _rtmp3400 = input.readListBegin();
        _etype399 = _rtmp3400.etype;
        _size396 = _rtmp3400.size;
        for (var _i401 = 0; _i401 < _size396; ++_i401)
        {
          var elem402 = null;
          elem402 = input.readI32().value;
          this.dashboard_ids.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size403 = 0;
        var _rtmp3407;
        this.groups = [];
        var _etype406 = 0;
        _rtmp3407 = input.readListBegin();
        _etype406 = _rtmp3407.etype;
        _size403 = _rtmp3407.size;
        for (var _i408 = 0; _i408 < _size403; ++_i408)
        {
          var elem409 = null;
          elem409 = input.readString().value;
          this.groups.push(elem409);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_share_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_share_dashboards_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
    for (var iter410 in this.dashboard_ids)
    {
      if (this.dashboard_ids.hasOwnProperty(iter410))
      {
        iter410 = this.dashboard_ids[iter410];
        output.writeI32(iter410);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter411 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter411))
      {
        iter411 = this.groups[iter411];
        output.writeString(iter411);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 4);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_share_dashboards_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_share_dashboards_result.prototype = {};
OmniSci_share_dashboards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_share_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_share_dashboards_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_delete_dashboards_args = function(args) {
  this.session = null;
  this.dashboard_ids = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
    }
  }
};
OmniSci_delete_dashboards_args.prototype = {};
OmniSci_delete_dashboards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size412 = 0;
        var _rtmp3416;
        this.dashboard_ids = [];
        var _etype415 = 0;
        _rtmp3416 = input.readListBegin();
        _etype415 = _rtmp3416.etype;
        _size412 = _rtmp3416.size;
        for (var _i417 = 0; _i417 < _size412; ++_i417)
        {
          var elem418 = null;
          elem418 = input.readI32().value;
          this.dashboard_ids.push(elem418);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_delete_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_delete_dashboards_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
    for (var iter419 in this.dashboard_ids)
    {
      if (this.dashboard_ids.hasOwnProperty(iter419))
      {
        iter419 = this.dashboard_ids[iter419];
        output.writeI32(iter419);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_delete_dashboards_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_delete_dashboards_result.prototype = {};
OmniSci_delete_dashboards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_delete_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_delete_dashboards_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_share_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.groups = null;
  this.objects = null;
  this.permissions = null;
  this.grant_role = false;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new TDashboardPermissions(args.permissions);
    }
    if (args.grant_role !== undefined && args.grant_role !== null) {
      this.grant_role = args.grant_role;
    }
  }
};
OmniSci_share_dashboard_args.prototype = {};
OmniSci_share_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size420 = 0;
        var _rtmp3424;
        this.groups = [];
        var _etype423 = 0;
        _rtmp3424 = input.readListBegin();
        _etype423 = _rtmp3424.etype;
        _size420 = _rtmp3424.size;
        for (var _i425 = 0; _i425 < _size420; ++_i425)
        {
          var elem426 = null;
          elem426 = input.readString().value;
          this.groups.push(elem426);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size427 = 0;
        var _rtmp3431;
        this.objects = [];
        var _etype430 = 0;
        _rtmp3431 = input.readListBegin();
        _etype430 = _rtmp3431.etype;
        _size427 = _rtmp3431.size;
        for (var _i432 = 0; _i432 < _size427; ++_i432)
        {
          var elem433 = null;
          elem433 = input.readString().value;
          this.objects.push(elem433);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.grant_role = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_share_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_share_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter434 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter434))
      {
        iter434 = this.groups[iter434];
        output.writeString(iter434);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.objects.length);
    for (var iter435 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter435))
      {
        iter435 = this.objects[iter435];
        output.writeString(iter435);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  if (this.grant_role !== null && this.grant_role !== undefined) {
    output.writeFieldBegin('grant_role', Thrift.Type.BOOL, 6);
    output.writeBool(this.grant_role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_share_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_share_dashboard_result.prototype = {};
OmniSci_share_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_share_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_share_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_unshare_dashboard_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  this.groups = null;
  this.objects = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new TDashboardPermissions(args.permissions);
    }
  }
};
OmniSci_unshare_dashboard_args.prototype = {};
OmniSci_unshare_dashboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size436 = 0;
        var _rtmp3440;
        this.groups = [];
        var _etype439 = 0;
        _rtmp3440 = input.readListBegin();
        _etype439 = _rtmp3440.etype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          var elem442 = null;
          elem442 = input.readString().value;
          this.groups.push(elem442);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size443 = 0;
        var _rtmp3447;
        this.objects = [];
        var _etype446 = 0;
        _rtmp3447 = input.readListBegin();
        _etype446 = _rtmp3447.etype;
        _size443 = _rtmp3447.size;
        for (var _i448 = 0; _i448 < _size443; ++_i448)
        {
          var elem449 = null;
          elem449 = input.readString().value;
          this.objects.push(elem449);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_unshare_dashboard_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboard_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter450 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter450))
      {
        iter450 = this.groups[iter450];
        output.writeString(iter450);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.objects.length);
    for (var iter451 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter451))
      {
        iter451 = this.objects[iter451];
        output.writeString(iter451);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_unshare_dashboard_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_unshare_dashboard_result.prototype = {};
OmniSci_unshare_dashboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_unshare_dashboard_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboard_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_unshare_dashboards_args = function(args) {
  this.session = null;
  this.dashboard_ids = null;
  this.groups = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
      this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new TDashboardPermissions(args.permissions);
    }
  }
};
OmniSci_unshare_dashboards_args.prototype = {};
OmniSci_unshare_dashboards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size452 = 0;
        var _rtmp3456;
        this.dashboard_ids = [];
        var _etype455 = 0;
        _rtmp3456 = input.readListBegin();
        _etype455 = _rtmp3456.etype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var elem458 = null;
          elem458 = input.readI32().value;
          this.dashboard_ids.push(elem458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size459 = 0;
        var _rtmp3463;
        this.groups = [];
        var _etype462 = 0;
        _rtmp3463 = input.readListBegin();
        _etype462 = _rtmp3463.etype;
        _size459 = _rtmp3463.size;
        for (var _i464 = 0; _i464 < _size459; ++_i464)
        {
          var elem465 = null;
          elem465 = input.readString().value;
          this.groups.push(elem465);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new TDashboardPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_unshare_dashboards_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboards_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
    output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
    for (var iter466 in this.dashboard_ids)
    {
      if (this.dashboard_ids.hasOwnProperty(iter466))
      {
        iter466 = this.dashboard_ids[iter466];
        output.writeI32(iter466);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter467 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter467))
      {
        iter467 = this.groups[iter467];
        output.writeString(iter467);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 4);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_unshare_dashboards_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_unshare_dashboards_result.prototype = {};
OmniSci_unshare_dashboards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_unshare_dashboards_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_unshare_dashboards_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_dashboard_grantees_args = function(args) {
  this.session = null;
  this.dashboard_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
      this.dashboard_id = args.dashboard_id;
    }
  }
};
OmniSci_get_dashboard_grantees_args.prototype = {};
OmniSci_get_dashboard_grantees_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dashboard_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboard_grantees_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboard_grantees_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
    output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
    output.writeI32(this.dashboard_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_dashboard_grantees_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TDashboardGrantees]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_dashboard_grantees_result.prototype = {};
OmniSci_get_dashboard_grantees_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size468 = 0;
        var _rtmp3472;
        this.success = [];
        var _etype471 = 0;
        _rtmp3472 = input.readListBegin();
        _etype471 = _rtmp3472.etype;
        _size468 = _rtmp3472.size;
        for (var _i473 = 0; _i473 < _size468; ++_i473)
        {
          var elem474 = null;
          elem474 = new TDashboardGrantees();
          elem474.read(input);
          this.success.push(elem474);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_dashboard_grantees_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_dashboard_grantees_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter475 in this.success)
    {
      if (this.success.hasOwnProperty(iter475))
      {
        iter475 = this.success[iter475];
        iter475.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_link_view_args = function(args) {
  this.session = null;
  this.link = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
  }
};
OmniSci_get_link_view_args.prototype = {};
OmniSci_get_link_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_link_view_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_link_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 2);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_link_view_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_link_view_result.prototype = {};
OmniSci_get_link_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_link_view_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_link_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_create_link_args = function(args) {
  this.session = null;
  this.view_state = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
OmniSci_create_link_args.prototype = {};
OmniSci_create_link_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_link_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_link_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_create_link_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_create_link_result.prototype = {};
OmniSci_create_link_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_link_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_link_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_load_table_binary_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TRow]);
    }
  }
};
OmniSci_load_table_binary_args.prototype = {};
OmniSci_load_table_binary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size476 = 0;
        var _rtmp3480;
        this.rows = [];
        var _etype479 = 0;
        _rtmp3480 = input.readListBegin();
        _etype479 = _rtmp3480.etype;
        _size476 = _rtmp3480.size;
        for (var _i481 = 0; _i481 < _size476; ++_i481)
        {
          var elem482 = null;
          elem482 = new TRow();
          elem482.read(input);
          this.rows.push(elem482);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter483 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter483))
      {
        iter483 = this.rows[iter483];
        iter483.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_load_table_binary_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_load_table_binary_result.prototype = {};
OmniSci_load_table_binary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_load_table_binary_columnar_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.cols = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [TColumn]);
    }
  }
};
OmniSci_load_table_binary_columnar_args.prototype = {};
OmniSci_load_table_binary_columnar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size484 = 0;
        var _rtmp3488;
        this.cols = [];
        var _etype487 = 0;
        _rtmp3488 = input.readListBegin();
        _etype487 = _rtmp3488.etype;
        _size484 = _rtmp3488.size;
        for (var _i489 = 0; _i489 < _size484; ++_i489)
        {
          var elem490 = null;
          elem490 = new TColumn();
          elem490.read(input);
          this.cols.push(elem490);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_columnar_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_columnar_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter491 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter491))
      {
        iter491 = this.cols[iter491];
        iter491.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_load_table_binary_columnar_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_load_table_binary_columnar_result.prototype = {};
OmniSci_load_table_binary_columnar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_columnar_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_columnar_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_load_table_binary_arrow_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.arrow_stream = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.arrow_stream !== undefined && args.arrow_stream !== null) {
      this.arrow_stream = args.arrow_stream;
    }
  }
};
OmniSci_load_table_binary_arrow_args.prototype = {};
OmniSci_load_table_binary_arrow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.arrow_stream = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_arrow_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_arrow_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.arrow_stream !== null && this.arrow_stream !== undefined) {
    output.writeFieldBegin('arrow_stream', Thrift.Type.STRING, 3);
    output.writeBinary(this.arrow_stream);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_load_table_binary_arrow_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_load_table_binary_arrow_result.prototype = {};
OmniSci_load_table_binary_arrow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_binary_arrow_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_binary_arrow_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_load_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TStringRow]);
    }
  }
};
OmniSci_load_table_args.prototype = {};
OmniSci_load_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size492 = 0;
        var _rtmp3496;
        this.rows = [];
        var _etype495 = 0;
        _rtmp3496 = input.readListBegin();
        _etype495 = _rtmp3496.etype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var elem498 = null;
          elem498 = new TStringRow();
          elem498.read(input);
          this.rows.push(elem498);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter499 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter499))
      {
        iter499 = this.rows[iter499];
        iter499.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_load_table_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_load_table_result.prototype = {};
OmniSci_load_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_load_table_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_load_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_detect_column_types_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
OmniSci_detect_column_types_args.prototype = {};
OmniSci_detect_column_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_detect_column_types_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_detect_column_types_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_detect_column_types_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TDetectResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_detect_column_types_result.prototype = {};
OmniSci_detect_column_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TDetectResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_detect_column_types_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_detect_column_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_create_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.row_desc = null;
  this.file_type = 0;
  this.create_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.file_type !== undefined && args.file_type !== null) {
      this.file_type = args.file_type;
    }
    if (args.create_params !== undefined && args.create_params !== null) {
      this.create_params = new TCreateParams(args.create_params);
    }
  }
};
OmniSci_create_table_args.prototype = {};
OmniSci_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size500 = 0;
        var _rtmp3504;
        this.row_desc = [];
        var _etype503 = 0;
        _rtmp3504 = input.readListBegin();
        _etype503 = _rtmp3504.etype;
        _size500 = _rtmp3504.size;
        for (var _i505 = 0; _i505 < _size500; ++_i505)
        {
          var elem506 = null;
          elem506 = new TColumnType();
          elem506.read(input);
          this.row_desc.push(elem506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.file_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.create_params = new TCreateParams();
        this.create_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter507 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter507))
      {
        iter507 = this.row_desc[iter507];
        iter507.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.file_type !== null && this.file_type !== undefined) {
    output.writeFieldBegin('file_type', Thrift.Type.I32, 4);
    output.writeI32(this.file_type);
    output.writeFieldEnd();
  }
  if (this.create_params !== null && this.create_params !== undefined) {
    output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 5);
    this.create_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_create_table_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_create_table_result.prototype = {};
OmniSci_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_create_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_import_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
OmniSci_import_table_args.prototype = {};
OmniSci_import_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_table_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_import_table_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_import_table_result.prototype = {};
OmniSci_import_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_table_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_import_geo_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  this.row_desc = null;
  this.create_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.create_params !== undefined && args.create_params !== null) {
      this.create_params = new TCreateParams(args.create_params);
    }
  }
};
OmniSci_import_geo_table_args.prototype = {};
OmniSci_import_geo_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size508 = 0;
        var _rtmp3512;
        this.row_desc = [];
        var _etype511 = 0;
        _rtmp3512 = input.readListBegin();
        _etype511 = _rtmp3512.etype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          var elem514 = null;
          elem514 = new TColumnType();
          elem514.read(input);
          this.row_desc.push(elem514);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.create_params = new TCreateParams();
        this.create_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_geo_table_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_geo_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter515 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter515))
      {
        iter515 = this.row_desc[iter515];
        iter515.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.create_params !== null && this.create_params !== undefined) {
    output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 6);
    this.create_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_import_geo_table_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_import_geo_table_result.prototype = {};
OmniSci_import_geo_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_geo_table_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_geo_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_import_table_status_args = function(args) {
  this.session = null;
  this.import_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.import_id !== undefined && args.import_id !== null) {
      this.import_id = args.import_id;
    }
  }
};
OmniSci_import_table_status_args.prototype = {};
OmniSci_import_table_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.import_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_table_status_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_table_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.import_id !== null && this.import_id !== undefined) {
    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);
    output.writeString(this.import_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_import_table_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TImportStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_import_table_status_result.prototype = {};
OmniSci_import_table_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TImportStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_import_table_status_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_import_table_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_first_geo_file_in_archive_args = function(args) {
  this.session = null;
  this.archive_path = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.archive_path !== undefined && args.archive_path !== null) {
      this.archive_path = args.archive_path;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
OmniSci_get_first_geo_file_in_archive_args.prototype = {};
OmniSci_get_first_geo_file_in_archive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.archive_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_first_geo_file_in_archive_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.archive_path !== null && this.archive_path !== undefined) {
    output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);
    output.writeString(this.archive_path);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_first_geo_file_in_archive_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_first_geo_file_in_archive_result.prototype = {};
OmniSci_get_first_geo_file_in_archive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_first_geo_file_in_archive_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_first_geo_file_in_archive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_all_files_in_archive_args = function(args) {
  this.session = null;
  this.archive_path = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.archive_path !== undefined && args.archive_path !== null) {
      this.archive_path = args.archive_path;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
OmniSci_get_all_files_in_archive_args.prototype = {};
OmniSci_get_all_files_in_archive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.archive_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_all_files_in_archive_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_all_files_in_archive_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.archive_path !== null && this.archive_path !== undefined) {
    output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);
    output.writeString(this.archive_path);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_all_files_in_archive_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_all_files_in_archive_result.prototype = {};
OmniSci_get_all_files_in_archive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size516 = 0;
        var _rtmp3520;
        this.success = [];
        var _etype519 = 0;
        _rtmp3520 = input.readListBegin();
        _etype519 = _rtmp3520.etype;
        _size516 = _rtmp3520.size;
        for (var _i521 = 0; _i521 < _size516; ++_i521)
        {
          var elem522 = null;
          elem522 = input.readString().value;
          this.success.push(elem522);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_all_files_in_archive_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_all_files_in_archive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter523 in this.success)
    {
      if (this.success.hasOwnProperty(iter523))
      {
        iter523 = this.success[iter523];
        output.writeString(iter523);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_layers_in_geo_file_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
OmniSci_get_layers_in_geo_file_args.prototype = {};
OmniSci_get_layers_in_geo_file_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_layers_in_geo_file_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_layers_in_geo_file_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_layers_in_geo_file_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TGeoFileLayerInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_layers_in_geo_file_result.prototype = {};
OmniSci_get_layers_in_geo_file_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size524 = 0;
        var _rtmp3528;
        this.success = [];
        var _etype527 = 0;
        _rtmp3528 = input.readListBegin();
        _etype527 = _rtmp3528.etype;
        _size524 = _rtmp3528.size;
        for (var _i529 = 0; _i529 < _size524; ++_i529)
        {
          var elem530 = null;
          elem530 = new TGeoFileLayerInfo();
          elem530.read(input);
          this.success.push(elem530);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_layers_in_geo_file_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_layers_in_geo_file_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter531 in this.success)
    {
      if (this.success.hasOwnProperty(iter531))
      {
        iter531 = this.success[iter531];
        iter531.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_query_get_outer_fragment_count_args = function(args) {
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
OmniSci_query_get_outer_fragment_count_args.prototype = {};
OmniSci_query_get_outer_fragment_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_query_get_outer_fragment_count_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_query_get_outer_fragment_count_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_query_get_outer_fragment_count_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_query_get_outer_fragment_count_result.prototype = {};
OmniSci_query_get_outer_fragment_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_query_get_outer_fragment_count_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_query_get_outer_fragment_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_check_table_consistency_args = function(args) {
  this.session = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
OmniSci_check_table_consistency_args.prototype = {};
OmniSci_check_table_consistency_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_check_table_consistency_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_check_table_consistency_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_check_table_consistency_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TTableMeta(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_check_table_consistency_result.prototype = {};
OmniSci_check_table_consistency_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TTableMeta();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_check_table_consistency_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_check_table_consistency_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_start_query_args = function(args) {
  this.leaf_session = null;
  this.parent_session = null;
  this.query_ra = null;
  this.just_explain = null;
  this.outer_fragment_indices = null;
  if (args) {
    if (args.leaf_session !== undefined && args.leaf_session !== null) {
      this.leaf_session = args.leaf_session;
    }
    if (args.parent_session !== undefined && args.parent_session !== null) {
      this.parent_session = args.parent_session;
    }
    if (args.query_ra !== undefined && args.query_ra !== null) {
      this.query_ra = args.query_ra;
    }
    if (args.just_explain !== undefined && args.just_explain !== null) {
      this.just_explain = args.just_explain;
    }
    if (args.outer_fragment_indices !== undefined && args.outer_fragment_indices !== null) {
      this.outer_fragment_indices = Thrift.copyList(args.outer_fragment_indices, [null]);
    }
  }
};
OmniSci_start_query_args.prototype = {};
OmniSci_start_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.leaf_session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parent_session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query_ra = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.just_explain = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size532 = 0;
        var _rtmp3536;
        this.outer_fragment_indices = [];
        var _etype535 = 0;
        _rtmp3536 = input.readListBegin();
        _etype535 = _rtmp3536.etype;
        _size532 = _rtmp3536.size;
        for (var _i537 = 0; _i537 < _size532; ++_i537)
        {
          var elem538 = null;
          elem538 = input.readI64().value;
          this.outer_fragment_indices.push(elem538);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_query_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_query_args');
  if (this.leaf_session !== null && this.leaf_session !== undefined) {
    output.writeFieldBegin('leaf_session', Thrift.Type.STRING, 1);
    output.writeString(this.leaf_session);
    output.writeFieldEnd();
  }
  if (this.parent_session !== null && this.parent_session !== undefined) {
    output.writeFieldBegin('parent_session', Thrift.Type.STRING, 2);
    output.writeString(this.parent_session);
    output.writeFieldEnd();
  }
  if (this.query_ra !== null && this.query_ra !== undefined) {
    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 3);
    output.writeString(this.query_ra);
    output.writeFieldEnd();
  }
  if (this.just_explain !== null && this.just_explain !== undefined) {
    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 4);
    output.writeBool(this.just_explain);
    output.writeFieldEnd();
  }
  if (this.outer_fragment_indices !== null && this.outer_fragment_indices !== undefined) {
    output.writeFieldBegin('outer_fragment_indices', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.outer_fragment_indices.length);
    for (var iter539 in this.outer_fragment_indices)
    {
      if (this.outer_fragment_indices.hasOwnProperty(iter539))
      {
        iter539 = this.outer_fragment_indices[iter539];
        output.writeI64(iter539);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_start_query_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPendingQuery(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_start_query_result.prototype = {};
OmniSci_start_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPendingQuery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_query_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_execute_query_step_args = function(args) {
  this.pending_query = null;
  if (args) {
    if (args.pending_query !== undefined && args.pending_query !== null) {
      this.pending_query = new TPendingQuery(args.pending_query);
    }
  }
};
OmniSci_execute_query_step_args.prototype = {};
OmniSci_execute_query_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending_query = new TPendingQuery();
        this.pending_query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_execute_query_step_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_execute_query_step_args');
  if (this.pending_query !== null && this.pending_query !== undefined) {
    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);
    this.pending_query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_execute_query_step_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_execute_query_step_result.prototype = {};
OmniSci_execute_query_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_execute_query_step_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_execute_query_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_broadcast_serialized_rows_args = function(args) {
  this.serialized_rows = null;
  this.row_desc = null;
  this.query_id = null;
  if (args) {
    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
      this.serialized_rows = new TSerializedRows(args.serialized_rows);
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.query_id !== undefined && args.query_id !== null) {
      this.query_id = args.query_id;
    }
  }
};
OmniSci_broadcast_serialized_rows_args.prototype = {};
OmniSci_broadcast_serialized_rows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serialized_rows = new TSerializedRows();
        this.serialized_rows.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size540 = 0;
        var _rtmp3544;
        this.row_desc = [];
        var _etype543 = 0;
        _rtmp3544 = input.readListBegin();
        _etype543 = _rtmp3544.etype;
        _size540 = _rtmp3544.size;
        for (var _i545 = 0; _i545 < _size540; ++_i545)
        {
          var elem546 = null;
          elem546 = new TColumnType();
          elem546.read(input);
          this.row_desc.push(elem546);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.query_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_broadcast_serialized_rows_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_broadcast_serialized_rows_args');
  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
    output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);
    this.serialized_rows.write(output);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter547 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter547))
      {
        iter547 = this.row_desc[iter547];
        iter547.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.query_id !== null && this.query_id !== undefined) {
    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);
    output.writeI64(this.query_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_broadcast_serialized_rows_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_broadcast_serialized_rows_result.prototype = {};
OmniSci_broadcast_serialized_rows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_broadcast_serialized_rows_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_broadcast_serialized_rows_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_start_render_query_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.node_idx = null;
  this.vega_json = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.node_idx !== undefined && args.node_idx !== null) {
      this.node_idx = args.node_idx;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
  }
};
OmniSci_start_render_query_args.prototype = {};
OmniSci_start_render_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.node_idx = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_render_query_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_render_query_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.node_idx !== null && this.node_idx !== undefined) {
    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);
    output.writeI16(this.node_idx);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_start_render_query_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPendingRenderQuery(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_start_render_query_result.prototype = {};
OmniSci_start_render_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPendingRenderQuery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_start_render_query_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_start_render_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_execute_next_render_step_args = function(args) {
  this.pending_render = null;
  this.merged_data = null;
  if (args) {
    if (args.pending_render !== undefined && args.pending_render !== null) {
      this.pending_render = new TPendingRenderQuery(args.pending_render);
    }
    if (args.merged_data !== undefined && args.merged_data !== null) {
      this.merged_data = Thrift.copyMap(args.merged_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, TRenderDatum]);
    }
  }
};
OmniSci_execute_next_render_step_args.prototype = {};
OmniSci_execute_next_render_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending_render = new TPendingRenderQuery();
        this.pending_render.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size548 = 0;
        var _rtmp3552;
        this.merged_data = {};
        var _ktype549 = 0;
        var _vtype550 = 0;
        _rtmp3552 = input.readMapBegin();
        _ktype549 = _rtmp3552.ktype;
        _vtype550 = _rtmp3552.vtype;
        _size548 = _rtmp3552.size;
        for (var _i553 = 0; _i553 < _size548; ++_i553)
        {
          if (_i553 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key554 = null;
          var val555 = null;
          key554 = input.readString().value;
          var _size556 = 0;
          var _rtmp3560;
          val555 = {};
          var _ktype557 = 0;
          var _vtype558 = 0;
          _rtmp3560 = input.readMapBegin();
          _ktype557 = _rtmp3560.ktype;
          _vtype558 = _rtmp3560.vtype;
          _size556 = _rtmp3560.size;
          for (var _i561 = 0; _i561 < _size556; ++_i561)
          {
            if (_i561 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key562 = null;
            var val563 = null;
            key562 = input.readString().value;
            var _size564 = 0;
            var _rtmp3568;
            val563 = {};
            var _ktype565 = 0;
            var _vtype566 = 0;
            _rtmp3568 = input.readMapBegin();
            _ktype565 = _rtmp3568.ktype;
            _vtype566 = _rtmp3568.vtype;
            _size564 = _rtmp3568.size;
            for (var _i569 = 0; _i569 < _size564; ++_i569)
            {
              if (_i569 > 0 ) {
                if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                  input.rstack.pop();
                }
              }
              var key570 = null;
              var val571 = null;
              key570 = input.readString().value;
              var _size572 = 0;
              var _rtmp3576;
              val571 = {};
              var _ktype573 = 0;
              var _vtype574 = 0;
              _rtmp3576 = input.readMapBegin();
              _ktype573 = _rtmp3576.ktype;
              _vtype574 = _rtmp3576.vtype;
              _size572 = _rtmp3576.size;
              for (var _i577 = 0; _i577 < _size572; ++_i577)
              {
                if (_i577 > 0 ) {
                  if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                    input.rstack.pop();
                  }
                }
                var key578 = null;
                var val579 = null;
                key578 = input.readString().value;
                var _size580 = 0;
                var _rtmp3584;
                val579 = [];
                var _etype583 = 0;
                _rtmp3584 = input.readListBegin();
                _etype583 = _rtmp3584.etype;
                _size580 = _rtmp3584.size;
                for (var _i585 = 0; _i585 < _size580; ++_i585)
                {
                  var elem586 = null;
                  elem586 = new TRenderDatum();
                  elem586.read(input);
                  val579.push(elem586);
                }
                input.readListEnd();
                val571[key578] = val579;
              }
              input.readMapEnd();
              val563[key570] = val571;
            }
            input.readMapEnd();
            val555[key562] = val563;
          }
          input.readMapEnd();
          this.merged_data[key554] = val555;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_execute_next_render_step_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_execute_next_render_step_args');
  if (this.pending_render !== null && this.pending_render !== undefined) {
    output.writeFieldBegin('pending_render', Thrift.Type.STRUCT, 1);
    this.pending_render.write(output);
    output.writeFieldEnd();
  }
  if (this.merged_data !== null && this.merged_data !== undefined) {
    output.writeFieldBegin('merged_data', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merged_data));
    for (var kiter587 in this.merged_data)
    {
      if (this.merged_data.hasOwnProperty(kiter587))
      {
        var viter588 = this.merged_data[kiter587];
        output.writeString(kiter587);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter588));
        for (var kiter589 in viter588)
        {
          if (viter588.hasOwnProperty(kiter589))
          {
            var viter590 = viter588[kiter589];
            output.writeString(kiter589);
            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter590));
            for (var kiter591 in viter590)
            {
              if (viter590.hasOwnProperty(kiter591))
              {
                var viter592 = viter590[kiter591];
                output.writeString(kiter591);
                output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter592));
                for (var kiter593 in viter592)
                {
                  if (viter592.hasOwnProperty(kiter593))
                  {
                    var viter594 = viter592[kiter593];
                    output.writeString(kiter593);
                    output.writeListBegin(Thrift.Type.STRUCT, viter594.length);
                    for (var iter595 in viter594)
                    {
                      if (viter594.hasOwnProperty(iter595))
                      {
                        iter595 = viter594[iter595];
                        iter595.write(output);
                      }
                    }
                    output.writeListEnd();
                  }
                }
                output.writeMapEnd();
              }
            }
            output.writeMapEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_execute_next_render_step_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TRenderStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_execute_next_render_step_result.prototype = {};
OmniSci_execute_next_render_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TRenderStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_execute_next_render_step_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_execute_next_render_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_insert_data_args = function(args) {
  this.session = null;
  this.insert_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.insert_data !== undefined && args.insert_data !== null) {
      this.insert_data = new TInsertData(args.insert_data);
    }
  }
};
OmniSci_insert_data_args.prototype = {};
OmniSci_insert_data_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.insert_data = new TInsertData();
        this.insert_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_insert_data_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_insert_data_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.insert_data !== null && this.insert_data !== undefined) {
    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);
    this.insert_data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_insert_data_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_insert_data_result.prototype = {};
OmniSci_insert_data_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_insert_data_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_insert_data_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_checkpoint_args = function(args) {
  this.session = null;
  this.db_id = null;
  this.table_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.db_id !== undefined && args.db_id !== null) {
      this.db_id = args.db_id;
    }
    if (args.table_id !== undefined && args.table_id !== null) {
      this.table_id = args.table_id;
    }
  }
};
OmniSci_checkpoint_args.prototype = {};
OmniSci_checkpoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.db_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.table_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_checkpoint_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_checkpoint_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.db_id !== null && this.db_id !== undefined) {
    output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
    output.writeI32(this.db_id);
    output.writeFieldEnd();
  }
  if (this.table_id !== null && this.table_id !== undefined) {
    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
    output.writeI32(this.table_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_checkpoint_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_checkpoint_result.prototype = {};
OmniSci_checkpoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_checkpoint_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_checkpoint_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_roles_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_roles_args.prototype = {};
OmniSci_get_roles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_roles_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_roles_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_roles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_roles_result.prototype = {};
OmniSci_get_roles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size596 = 0;
        var _rtmp3600;
        this.success = [];
        var _etype599 = 0;
        _rtmp3600 = input.readListBegin();
        _etype599 = _rtmp3600.etype;
        _size596 = _rtmp3600.size;
        for (var _i601 = 0; _i601 < _size596; ++_i601)
        {
          var elem602 = null;
          elem602 = input.readString().value;
          this.success.push(elem602);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_roles_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_roles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter603 in this.success)
    {
      if (this.success.hasOwnProperty(iter603))
      {
        iter603 = this.success[iter603];
        output.writeString(iter603);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_db_objects_for_grantee_args = function(args) {
  this.session = null;
  this.roleName = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
  }
};
OmniSci_get_db_objects_for_grantee_args.prototype = {};
OmniSci_get_db_objects_for_grantee_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_db_objects_for_grantee_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_db_objects_for_grantee_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_db_objects_for_grantee_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TDBObject]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_db_objects_for_grantee_result.prototype = {};
OmniSci_get_db_objects_for_grantee_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size604 = 0;
        var _rtmp3608;
        this.success = [];
        var _etype607 = 0;
        _rtmp3608 = input.readListBegin();
        _etype607 = _rtmp3608.etype;
        _size604 = _rtmp3608.size;
        for (var _i609 = 0; _i609 < _size604; ++_i609)
        {
          var elem610 = null;
          elem610 = new TDBObject();
          elem610.read(input);
          this.success.push(elem610);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_db_objects_for_grantee_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_db_objects_for_grantee_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter611 in this.success)
    {
      if (this.success.hasOwnProperty(iter611))
      {
        iter611 = this.success[iter611];
        iter611.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_db_object_privs_args = function(args) {
  this.session = null;
  this.objectName = null;
  this.type = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.objectName !== undefined && args.objectName !== null) {
      this.objectName = args.objectName;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
OmniSci_get_db_object_privs_args.prototype = {};
OmniSci_get_db_object_privs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_db_object_privs_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_db_object_privs_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.objectName !== null && this.objectName !== undefined) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 2);
    output.writeString(this.objectName);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_db_object_privs_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TDBObject]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_db_object_privs_result.prototype = {};
OmniSci_get_db_object_privs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size612 = 0;
        var _rtmp3616;
        this.success = [];
        var _etype615 = 0;
        _rtmp3616 = input.readListBegin();
        _etype615 = _rtmp3616.etype;
        _size612 = _rtmp3616.size;
        for (var _i617 = 0; _i617 < _size612; ++_i617)
        {
          var elem618 = null;
          elem618 = new TDBObject();
          elem618.read(input);
          this.success.push(elem618);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_db_object_privs_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_db_object_privs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter619 in this.success)
    {
      if (this.success.hasOwnProperty(iter619))
      {
        iter619 = this.success[iter619];
        iter619.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_all_roles_for_user_args = function(args) {
  this.session = null;
  this.userName = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
  }
};
OmniSci_get_all_roles_for_user_args.prototype = {};
OmniSci_get_all_roles_for_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_all_roles_for_user_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_all_roles_for_user_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_all_roles_for_user_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_all_roles_for_user_result.prototype = {};
OmniSci_get_all_roles_for_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size620 = 0;
        var _rtmp3624;
        this.success = [];
        var _etype623 = 0;
        _rtmp3624 = input.readListBegin();
        _etype623 = _rtmp3624.etype;
        _size620 = _rtmp3624.size;
        for (var _i625 = 0; _i625 < _size620; ++_i625)
        {
          var elem626 = null;
          elem626 = input.readString().value;
          this.success.push(elem626);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_all_roles_for_user_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_all_roles_for_user_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter627 in this.success)
    {
      if (this.success.hasOwnProperty(iter627))
      {
        iter627 = this.success[iter627];
        output.writeString(iter627);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_has_role_args = function(args) {
  this.session = null;
  this.granteeName = null;
  this.roleName = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.granteeName !== undefined && args.granteeName !== null) {
      this.granteeName = args.granteeName;
    }
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
  }
};
OmniSci_has_role_args.prototype = {};
OmniSci_has_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.granteeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_has_role_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_has_role_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.granteeName !== null && this.granteeName !== undefined) {
    output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);
    output.writeString(this.granteeName);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 3);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_has_role_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_has_role_result.prototype = {};
OmniSci_has_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_has_role_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_has_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_has_object_privilege_args = function(args) {
  this.session = null;
  this.granteeName = null;
  this.ObjectName = null;
  this.objectType = null;
  this.permissions = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.granteeName !== undefined && args.granteeName !== null) {
      this.granteeName = args.granteeName;
    }
    if (args.ObjectName !== undefined && args.ObjectName !== null) {
      this.ObjectName = args.ObjectName;
    }
    if (args.objectType !== undefined && args.objectType !== null) {
      this.objectType = args.objectType;
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new TDBObjectPermissions(args.permissions);
    }
  }
};
OmniSci_has_object_privilege_args.prototype = {};
OmniSci_has_object_privilege_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.granteeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ObjectName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.objectType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new TDBObjectPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_has_object_privilege_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_has_object_privilege_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.granteeName !== null && this.granteeName !== undefined) {
    output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);
    output.writeString(this.granteeName);
    output.writeFieldEnd();
  }
  if (this.ObjectName !== null && this.ObjectName !== undefined) {
    output.writeFieldBegin('ObjectName', Thrift.Type.STRING, 3);
    output.writeString(this.ObjectName);
    output.writeFieldEnd();
  }
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.I32, 4);
    output.writeI32(this.objectType);
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_has_object_privilege_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_has_object_privilege_result.prototype = {};
OmniSci_has_object_privilege_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_has_object_privilege_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_has_object_privilege_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_set_license_key_args = function(args) {
  this.session = null;
  this.key = null;
  this.nonce = '';
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
OmniSci_set_license_key_args.prototype = {};
OmniSci_set_license_key_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_license_key_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_license_key_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 3);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_set_license_key_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TLicenseInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_set_license_key_result.prototype = {};
OmniSci_set_license_key_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TLicenseInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_set_license_key_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_set_license_key_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_license_claims_args = function(args) {
  this.session = null;
  this.nonce = '';
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
OmniSci_get_license_claims_args.prototype = {};
OmniSci_get_license_claims_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_license_claims_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_license_claims_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_license_claims_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TLicenseInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_license_claims_result.prototype = {};
OmniSci_get_license_claims_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TLicenseInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_license_claims_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_license_claims_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_device_parameters_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
OmniSci_get_device_parameters_args.prototype = {};
OmniSci_get_device_parameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_device_parameters_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_device_parameters_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_get_device_parameters_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_get_device_parameters_result.prototype = {};
OmniSci_get_device_parameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size628 = 0;
        var _rtmp3632;
        this.success = {};
        var _ktype629 = 0;
        var _vtype630 = 0;
        _rtmp3632 = input.readMapBegin();
        _ktype629 = _rtmp3632.ktype;
        _vtype630 = _rtmp3632.vtype;
        _size628 = _rtmp3632.size;
        for (var _i633 = 0; _i633 < _size628; ++_i633)
        {
          if (_i633 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key634 = null;
          var val635 = null;
          key634 = input.readString().value;
          val635 = input.readString().value;
          this.success[key634] = val635;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_get_device_parameters_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_get_device_parameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter636 in this.success)
    {
      if (this.success.hasOwnProperty(kiter636))
      {
        var viter637 = this.success[kiter636];
        output.writeString(kiter636);
        output.writeString(viter637);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_register_runtime_extension_functions_args = function(args) {
  this.session = null;
  this.udfs = null;
  this.udtfs = null;
  this.device_ir_map = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.udfs !== undefined && args.udfs !== null) {
      this.udfs = Thrift.copyList(args.udfs, [TUserDefinedFunction]);
    }
    if (args.udtfs !== undefined && args.udtfs !== null) {
      this.udtfs = Thrift.copyList(args.udtfs, [TUserDefinedTableFunction]);
    }
    if (args.device_ir_map !== undefined && args.device_ir_map !== null) {
      this.device_ir_map = Thrift.copyMap(args.device_ir_map, [null]);
    }
  }
};
OmniSci_register_runtime_extension_functions_args.prototype = {};
OmniSci_register_runtime_extension_functions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size638 = 0;
        var _rtmp3642;
        this.udfs = [];
        var _etype641 = 0;
        _rtmp3642 = input.readListBegin();
        _etype641 = _rtmp3642.etype;
        _size638 = _rtmp3642.size;
        for (var _i643 = 0; _i643 < _size638; ++_i643)
        {
          var elem644 = null;
          elem644 = new TUserDefinedFunction();
          elem644.read(input);
          this.udfs.push(elem644);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size645 = 0;
        var _rtmp3649;
        this.udtfs = [];
        var _etype648 = 0;
        _rtmp3649 = input.readListBegin();
        _etype648 = _rtmp3649.etype;
        _size645 = _rtmp3649.size;
        for (var _i650 = 0; _i650 < _size645; ++_i650)
        {
          var elem651 = null;
          elem651 = new TUserDefinedTableFunction();
          elem651.read(input);
          this.udtfs.push(elem651);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size652 = 0;
        var _rtmp3656;
        this.device_ir_map = {};
        var _ktype653 = 0;
        var _vtype654 = 0;
        _rtmp3656 = input.readMapBegin();
        _ktype653 = _rtmp3656.ktype;
        _vtype654 = _rtmp3656.vtype;
        _size652 = _rtmp3656.size;
        for (var _i657 = 0; _i657 < _size652; ++_i657)
        {
          if (_i657 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key658 = null;
          var val659 = null;
          key658 = input.readString().value;
          val659 = input.readString().value;
          this.device_ir_map[key658] = val659;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_register_runtime_extension_functions_args.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_register_runtime_extension_functions_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.udfs !== null && this.udfs !== undefined) {
    output.writeFieldBegin('udfs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.udfs.length);
    for (var iter660 in this.udfs)
    {
      if (this.udfs.hasOwnProperty(iter660))
      {
        iter660 = this.udfs[iter660];
        iter660.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.udtfs !== null && this.udtfs !== undefined) {
    output.writeFieldBegin('udtfs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.udtfs.length);
    for (var iter661 in this.udtfs)
    {
      if (this.udtfs.hasOwnProperty(iter661))
      {
        iter661 = this.udtfs[iter661];
        iter661.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.device_ir_map !== null && this.device_ir_map !== undefined) {
    output.writeFieldBegin('device_ir_map', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.device_ir_map));
    for (var kiter662 in this.device_ir_map)
    {
      if (this.device_ir_map.hasOwnProperty(kiter662))
      {
        var viter663 = this.device_ir_map[kiter662];
        output.writeString(kiter662);
        output.writeString(viter663);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSci_register_runtime_extension_functions_result = function(args) {
  this.e = null;
  if (args instanceof TOmniSciException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OmniSci_register_runtime_extension_functions_result.prototype = {};
OmniSci_register_runtime_extension_functions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TOmniSciException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OmniSci_register_runtime_extension_functions_result.prototype.write = function(output) {
  output.writeStructBegin('OmniSci_register_runtime_extension_functions_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OmniSciClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
OmniSciClient.prototype = {};
OmniSciClient.prototype.connect = function(user, passwd, dbname, callback) {
  this.send_connect(user, passwd, dbname, callback); 
  if (!callback) {
    return this.recv_connect();
  }
};

OmniSciClient.prototype.send_connect = function(user, passwd, dbname, callback) {
  this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_connect_args();
  args.user = user;
  args.passwd = passwd;
  args.dbname = dbname;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_connect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_connect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_connect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'connect failed: unknown result';
};
OmniSciClient.prototype.krb5_connect = function(inputToken, dbname, callback) {
  this.send_krb5_connect(inputToken, dbname, callback); 
  if (!callback) {
    return this.recv_krb5_connect();
  }
};

OmniSciClient.prototype.send_krb5_connect = function(inputToken, dbname, callback) {
  this.output.writeMessageBegin('krb5_connect', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_krb5_connect_args();
  args.inputToken = inputToken;
  args.dbname = dbname;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_krb5_connect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_krb5_connect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_krb5_connect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'krb5_connect failed: unknown result';
};
OmniSciClient.prototype.disconnect = function(session, callback) {
  this.send_disconnect(session, callback); 
  if (!callback) {
  this.recv_disconnect();
  }
};

OmniSciClient.prototype.send_disconnect = function(session, callback) {
  this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_disconnect_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_disconnect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_disconnect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_disconnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.switch_database = function(session, dbname, callback) {
  this.send_switch_database(session, dbname, callback); 
  if (!callback) {
  this.recv_switch_database();
  }
};

OmniSciClient.prototype.send_switch_database = function(session, dbname, callback) {
  this.output.writeMessageBegin('switch_database', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_switch_database_args();
  args.session = session;
  args.dbname = dbname;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_switch_database();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_switch_database = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_switch_database_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.clone_session = function(session, callback) {
  this.send_clone_session(session, callback); 
  if (!callback) {
    return this.recv_clone_session();
  }
};

OmniSciClient.prototype.send_clone_session = function(session, callback) {
  this.output.writeMessageBegin('clone_session', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_clone_session_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_clone_session();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_clone_session = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_clone_session_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'clone_session failed: unknown result';
};
OmniSciClient.prototype.get_server_status = function(session, callback) {
  this.send_get_server_status(session, callback); 
  if (!callback) {
    return this.recv_get_server_status();
  }
};

OmniSciClient.prototype.send_get_server_status = function(session, callback) {
  this.output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_server_status_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_server_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_server_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_server_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_server_status failed: unknown result';
};
OmniSciClient.prototype.get_status = function(session, callback) {
  this.send_get_status(session, callback); 
  if (!callback) {
    return this.recv_get_status();
  }
};

OmniSciClient.prototype.send_get_status = function(session, callback) {
  this.output.writeMessageBegin('get_status', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_status_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_status failed: unknown result';
};
OmniSciClient.prototype.get_hardware_info = function(session, callback) {
  this.send_get_hardware_info(session, callback); 
  if (!callback) {
    return this.recv_get_hardware_info();
  }
};

OmniSciClient.prototype.send_get_hardware_info = function(session, callback) {
  this.output.writeMessageBegin('get_hardware_info', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_hardware_info_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_hardware_info();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_hardware_info = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_hardware_info_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_hardware_info failed: unknown result';
};
OmniSciClient.prototype.get_tables = function(session, callback) {
  this.send_get_tables(session, callback); 
  if (!callback) {
    return this.recv_get_tables();
  }
};

OmniSciClient.prototype.send_get_tables = function(session, callback) {
  this.output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_tables_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_tables();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_tables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_tables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_tables failed: unknown result';
};
OmniSciClient.prototype.get_physical_tables = function(session, callback) {
  this.send_get_physical_tables(session, callback); 
  if (!callback) {
    return this.recv_get_physical_tables();
  }
};

OmniSciClient.prototype.send_get_physical_tables = function(session, callback) {
  this.output.writeMessageBegin('get_physical_tables', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_physical_tables_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_physical_tables();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_physical_tables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_physical_tables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_physical_tables failed: unknown result';
};
OmniSciClient.prototype.get_views = function(session, callback) {
  this.send_get_views(session, callback); 
  if (!callback) {
    return this.recv_get_views();
  }
};

OmniSciClient.prototype.send_get_views = function(session, callback) {
  this.output.writeMessageBegin('get_views', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_views_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_views();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_views = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_views_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_views failed: unknown result';
};
OmniSciClient.prototype.get_tables_meta = function(session, callback) {
  this.send_get_tables_meta(session, callback); 
  if (!callback) {
    return this.recv_get_tables_meta();
  }
};

OmniSciClient.prototype.send_get_tables_meta = function(session, callback) {
  this.output.writeMessageBegin('get_tables_meta', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_tables_meta_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_tables_meta();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_tables_meta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_tables_meta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_tables_meta failed: unknown result';
};
OmniSciClient.prototype.get_table_details = function(session, table_name, callback) {
  this.send_get_table_details(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_table_details();
  }
};

OmniSciClient.prototype.send_get_table_details = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_table_details_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_table_details();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_table_details = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_table_details_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_table_details failed: unknown result';
};
OmniSciClient.prototype.get_internal_table_details = function(session, table_name, callback) {
  this.send_get_internal_table_details(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_internal_table_details();
  }
};

OmniSciClient.prototype.send_get_internal_table_details = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_internal_table_details', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_internal_table_details_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_internal_table_details();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_internal_table_details = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_internal_table_details_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_internal_table_details failed: unknown result';
};
OmniSciClient.prototype.get_users = function(session, callback) {
  this.send_get_users(session, callback); 
  if (!callback) {
    return this.recv_get_users();
  }
};

OmniSciClient.prototype.send_get_users = function(session, callback) {
  this.output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_users_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_users();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_users = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_users_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_users failed: unknown result';
};
OmniSciClient.prototype.get_databases = function(session, callback) {
  this.send_get_databases(session, callback); 
  if (!callback) {
    return this.recv_get_databases();
  }
};

OmniSciClient.prototype.send_get_databases = function(session, callback) {
  this.output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_databases_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_databases();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_databases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_databases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_databases failed: unknown result';
};
OmniSciClient.prototype.get_version = function(callback) {
  this.send_get_version(callback); 
  if (!callback) {
    return this.recv_get_version();
  }
};

OmniSciClient.prototype.send_get_version = function(callback) {
  this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_version_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_version();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_version = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_version_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_version failed: unknown result';
};
OmniSciClient.prototype.start_heap_profile = function(session, callback) {
  this.send_start_heap_profile(session, callback); 
  if (!callback) {
  this.recv_start_heap_profile();
  }
};

OmniSciClient.prototype.send_start_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_start_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_start_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_start_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_start_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.stop_heap_profile = function(session, callback) {
  this.send_stop_heap_profile(session, callback); 
  if (!callback) {
  this.recv_stop_heap_profile();
  }
};

OmniSciClient.prototype.send_stop_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_stop_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_stop_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_stop_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_stop_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.get_heap_profile = function(session, callback) {
  this.send_get_heap_profile(session, callback); 
  if (!callback) {
    return this.recv_get_heap_profile();
  }
};

OmniSciClient.prototype.send_get_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_heap_profile failed: unknown result';
};
OmniSciClient.prototype.get_memory = function(session, memory_level, callback) {
  this.send_get_memory(session, memory_level, callback); 
  if (!callback) {
    return this.recv_get_memory();
  }
};

OmniSciClient.prototype.send_get_memory = function(session, memory_level, callback) {
  this.output.writeMessageBegin('get_memory', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_memory_args();
  args.session = session;
  args.memory_level = memory_level;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_memory();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_memory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_memory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_memory failed: unknown result';
};
OmniSciClient.prototype.clear_cpu_memory = function(session, callback) {
  this.send_clear_cpu_memory(session, callback); 
  if (!callback) {
  this.recv_clear_cpu_memory();
  }
};

OmniSciClient.prototype.send_clear_cpu_memory = function(session, callback) {
  this.output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_clear_cpu_memory_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_clear_cpu_memory();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_clear_cpu_memory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_clear_cpu_memory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.clear_gpu_memory = function(session, callback) {
  this.send_clear_gpu_memory(session, callback); 
  if (!callback) {
  this.recv_clear_gpu_memory();
  }
};

OmniSciClient.prototype.send_clear_gpu_memory = function(session, callback) {
  this.output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_clear_gpu_memory_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_clear_gpu_memory();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_clear_gpu_memory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_clear_gpu_memory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.set_table_epoch = function(session, db_id, table_id, new_epoch, callback) {
  this.send_set_table_epoch(session, db_id, table_id, new_epoch, callback); 
  if (!callback) {
  this.recv_set_table_epoch();
  }
};

OmniSciClient.prototype.send_set_table_epoch = function(session, db_id, table_id, new_epoch, callback) {
  this.output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_set_table_epoch_args();
  args.session = session;
  args.db_id = db_id;
  args.table_id = table_id;
  args.new_epoch = new_epoch;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_set_table_epoch();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_set_table_epoch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_set_table_epoch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.set_table_epoch_by_name = function(session, table_name, new_epoch, callback) {
  this.send_set_table_epoch_by_name(session, table_name, new_epoch, callback); 
  if (!callback) {
  this.recv_set_table_epoch_by_name();
  }
};

OmniSciClient.prototype.send_set_table_epoch_by_name = function(session, table_name, new_epoch, callback) {
  this.output.writeMessageBegin('set_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_set_table_epoch_by_name_args();
  args.session = session;
  args.table_name = table_name;
  args.new_epoch = new_epoch;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_set_table_epoch_by_name();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_set_table_epoch_by_name = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_set_table_epoch_by_name_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.get_table_epoch = function(session, db_id, table_id, callback) {
  this.send_get_table_epoch(session, db_id, table_id, callback); 
  if (!callback) {
    return this.recv_get_table_epoch();
  }
};

OmniSciClient.prototype.send_get_table_epoch = function(session, db_id, table_id, callback) {
  this.output.writeMessageBegin('get_table_epoch', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_table_epoch_args();
  args.session = session;
  args.db_id = db_id;
  args.table_id = table_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_table_epoch();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_table_epoch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_table_epoch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_table_epoch failed: unknown result';
};
OmniSciClient.prototype.get_table_epoch_by_name = function(session, table_name, callback) {
  this.send_get_table_epoch_by_name(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_table_epoch_by_name();
  }
};

OmniSciClient.prototype.send_get_table_epoch_by_name = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_table_epoch_by_name_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_table_epoch_by_name();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_table_epoch_by_name = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_table_epoch_by_name_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_table_epoch_by_name failed: unknown result';
};
OmniSciClient.prototype.get_session_info = function(session, callback) {
  this.send_get_session_info(session, callback); 
  if (!callback) {
    return this.recv_get_session_info();
  }
};

OmniSciClient.prototype.send_get_session_info = function(session, callback) {
  this.output.writeMessageBegin('get_session_info', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_session_info_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_session_info();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_session_info = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_session_info_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_session_info failed: unknown result';
};
OmniSciClient.prototype.sql_execute = function(session, query, column_format, nonce, first_n, at_most_n, callback) {
  this.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n, callback); 
  if (!callback) {
    return this.recv_sql_execute();
  }
};

OmniSciClient.prototype.send_sql_execute = function(session, query, column_format, nonce, first_n, at_most_n, callback) {
  this.output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_sql_execute_args();
  args.session = session;
  args.query = query;
  args.column_format = column_format;
  args.nonce = nonce;
  args.first_n = first_n;
  args.at_most_n = at_most_n;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_execute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_sql_execute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_sql_execute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_execute failed: unknown result';
};
OmniSciClient.prototype.sql_execute_df = function(session, query, device_type, device_id, first_n, callback) {
  this.send_sql_execute_df(session, query, device_type, device_id, first_n, callback); 
  if (!callback) {
    return this.recv_sql_execute_df();
  }
};

OmniSciClient.prototype.send_sql_execute_df = function(session, query, device_type, device_id, first_n, callback) {
  this.output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_sql_execute_df_args();
  args.session = session;
  args.query = query;
  args.device_type = device_type;
  args.device_id = device_id;
  args.first_n = first_n;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_execute_df();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_sql_execute_df = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_sql_execute_df_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_execute_df failed: unknown result';
};
OmniSciClient.prototype.sql_execute_gdf = function(session, query, device_id, first_n, callback) {
  this.send_sql_execute_gdf(session, query, device_id, first_n, callback); 
  if (!callback) {
    return this.recv_sql_execute_gdf();
  }
};

OmniSciClient.prototype.send_sql_execute_gdf = function(session, query, device_id, first_n, callback) {
  this.output.writeMessageBegin('sql_execute_gdf', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_sql_execute_gdf_args();
  args.session = session;
  args.query = query;
  args.device_id = device_id;
  args.first_n = first_n;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_execute_gdf();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_sql_execute_gdf = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_sql_execute_gdf_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_execute_gdf failed: unknown result';
};
OmniSciClient.prototype.deallocate_df = function(session, df, device_type, device_id, callback) {
  this.send_deallocate_df(session, df, device_type, device_id, callback); 
  if (!callback) {
  this.recv_deallocate_df();
  }
};

OmniSciClient.prototype.send_deallocate_df = function(session, df, device_type, device_id, callback) {
  this.output.writeMessageBegin('deallocate_df', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_deallocate_df_args();
  args.session = session;
  args.df = df;
  args.device_type = device_type;
  args.device_id = device_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deallocate_df();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_deallocate_df = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_deallocate_df_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.interrupt = function(query_session, interrupt_session, callback) {
  this.send_interrupt(query_session, interrupt_session, callback); 
  if (!callback) {
  this.recv_interrupt();
  }
};

OmniSciClient.prototype.send_interrupt = function(query_session, interrupt_session, callback) {
  this.output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_interrupt_args();
  args.query_session = query_session;
  args.interrupt_session = interrupt_session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_interrupt();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_interrupt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_interrupt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.sql_validate = function(session, query, callback) {
  this.send_sql_validate(session, query, callback); 
  if (!callback) {
    return this.recv_sql_validate();
  }
};

OmniSciClient.prototype.send_sql_validate = function(session, query, callback) {
  this.output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_sql_validate_args();
  args.session = session;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_validate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_sql_validate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_sql_validate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_validate failed: unknown result';
};
OmniSciClient.prototype.get_completion_hints = function(session, sql, cursor, callback) {
  this.send_get_completion_hints(session, sql, cursor, callback); 
  if (!callback) {
    return this.recv_get_completion_hints();
  }
};

OmniSciClient.prototype.send_get_completion_hints = function(session, sql, cursor, callback) {
  this.output.writeMessageBegin('get_completion_hints', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_completion_hints_args();
  args.session = session;
  args.sql = sql;
  args.cursor = cursor;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_completion_hints();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_completion_hints = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_completion_hints_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_completion_hints failed: unknown result';
};
OmniSciClient.prototype.set_execution_mode = function(session, mode, callback) {
  this.send_set_execution_mode(session, mode, callback); 
  if (!callback) {
  this.recv_set_execution_mode();
  }
};

OmniSciClient.prototype.send_set_execution_mode = function(session, mode, callback) {
  this.output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_set_execution_mode_args();
  args.session = session;
  args.mode = mode;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_set_execution_mode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_set_execution_mode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_set_execution_mode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this.send_render_vega(session, widget_id, vega_json, compression_level, nonce, callback); 
  if (!callback) {
    return this.recv_render_vega();
  }
};

OmniSciClient.prototype.send_render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this.output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_render_vega_args();
  args.session = session;
  args.widget_id = widget_id;
  args.vega_json = vega_json;
  args.compression_level = compression_level;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_render_vega();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_render_vega = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_render_vega_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'render_vega failed: unknown result';
};
OmniSciClient.prototype.get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback); 
  if (!callback) {
    return this.recv_get_result_row_for_pixel();
  }
};

OmniSciClient.prototype.send_get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this.output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_result_row_for_pixel_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixel = pixel;
  args.table_col_names = table_col_names;
  args.column_format = column_format;
  args.pixelRadius = pixelRadius;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_result_row_for_pixel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_result_row_for_pixel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_result_row_for_pixel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_result_row_for_pixel failed: unknown result';
};
OmniSciClient.prototype.get_dashboard = function(session, dashboard_id, callback) {
  this.send_get_dashboard(session, dashboard_id, callback); 
  if (!callback) {
    return this.recv_get_dashboard();
  }
};

OmniSciClient.prototype.send_get_dashboard = function(session, dashboard_id, callback) {
  this.output.writeMessageBegin('get_dashboard', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_dashboard();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_dashboard = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_dashboard_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_dashboard failed: unknown result';
};
OmniSciClient.prototype.get_dashboards = function(session, callback) {
  this.send_get_dashboards(session, callback); 
  if (!callback) {
    return this.recv_get_dashboards();
  }
};

OmniSciClient.prototype.send_get_dashboards = function(session, callback) {
  this.output.writeMessageBegin('get_dashboards', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_dashboards_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_dashboards();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_dashboards = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_dashboards_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_dashboards failed: unknown result';
};
OmniSciClient.prototype.create_dashboard = function(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {
  this.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback); 
  if (!callback) {
    return this.recv_create_dashboard();
  }
};

OmniSciClient.prototype.send_create_dashboard = function(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata, callback) {
  this.output.writeMessageBegin('create_dashboard', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_create_dashboard_args();
  args.session = session;
  args.dashboard_name = dashboard_name;
  args.dashboard_state = dashboard_state;
  args.image_hash = image_hash;
  args.dashboard_metadata = dashboard_metadata;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_dashboard();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_create_dashboard = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_create_dashboard_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create_dashboard failed: unknown result';
};
OmniSciClient.prototype.replace_dashboard = function(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {
  this.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback); 
  if (!callback) {
  this.recv_replace_dashboard();
  }
};

OmniSciClient.prototype.send_replace_dashboard = function(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata, callback) {
  this.output.writeMessageBegin('replace_dashboard', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_replace_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.dashboard_name = dashboard_name;
  args.dashboard_owner = dashboard_owner;
  args.dashboard_state = dashboard_state;
  args.image_hash = image_hash;
  args.dashboard_metadata = dashboard_metadata;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_replace_dashboard();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_replace_dashboard = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_replace_dashboard_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.delete_dashboard = function(session, dashboard_id, callback) {
  this.send_delete_dashboard(session, dashboard_id, callback); 
  if (!callback) {
  this.recv_delete_dashboard();
  }
};

OmniSciClient.prototype.send_delete_dashboard = function(session, dashboard_id, callback) {
  this.output.writeMessageBegin('delete_dashboard', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_delete_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_delete_dashboard();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_delete_dashboard = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_delete_dashboard_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.share_dashboards = function(session, dashboard_ids, groups, permissions, callback) {
  this.send_share_dashboards(session, dashboard_ids, groups, permissions, callback); 
  if (!callback) {
  this.recv_share_dashboards();
  }
};

OmniSciClient.prototype.send_share_dashboards = function(session, dashboard_ids, groups, permissions, callback) {
  this.output.writeMessageBegin('share_dashboards', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_share_dashboards_args();
  args.session = session;
  args.dashboard_ids = dashboard_ids;
  args.groups = groups;
  args.permissions = permissions;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_share_dashboards();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_share_dashboards = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_share_dashboards_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.delete_dashboards = function(session, dashboard_ids, callback) {
  this.send_delete_dashboards(session, dashboard_ids, callback); 
  if (!callback) {
  this.recv_delete_dashboards();
  }
};

OmniSciClient.prototype.send_delete_dashboards = function(session, dashboard_ids, callback) {
  this.output.writeMessageBegin('delete_dashboards', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_delete_dashboards_args();
  args.session = session;
  args.dashboard_ids = dashboard_ids;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_delete_dashboards();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_delete_dashboards = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_delete_dashboards_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.share_dashboard = function(session, dashboard_id, groups, objects, permissions, grant_role, callback) {
  this.send_share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role, callback); 
  if (!callback) {
  this.recv_share_dashboard();
  }
};

OmniSciClient.prototype.send_share_dashboard = function(session, dashboard_id, groups, objects, permissions, grant_role, callback) {
  this.output.writeMessageBegin('share_dashboard', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_share_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.groups = groups;
  args.objects = objects;
  args.permissions = permissions;
  args.grant_role = grant_role;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_share_dashboard();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_share_dashboard = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_share_dashboard_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.unshare_dashboard = function(session, dashboard_id, groups, objects, permissions, callback) {
  this.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions, callback); 
  if (!callback) {
  this.recv_unshare_dashboard();
  }
};

OmniSciClient.prototype.send_unshare_dashboard = function(session, dashboard_id, groups, objects, permissions, callback) {
  this.output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_unshare_dashboard_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.groups = groups;
  args.objects = objects;
  args.permissions = permissions;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unshare_dashboard();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_unshare_dashboard = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_unshare_dashboard_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.unshare_dashboards = function(session, dashboard_ids, groups, permissions, callback) {
  this.send_unshare_dashboards(session, dashboard_ids, groups, permissions, callback); 
  if (!callback) {
  this.recv_unshare_dashboards();
  }
};

OmniSciClient.prototype.send_unshare_dashboards = function(session, dashboard_ids, groups, permissions, callback) {
  this.output.writeMessageBegin('unshare_dashboards', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_unshare_dashboards_args();
  args.session = session;
  args.dashboard_ids = dashboard_ids;
  args.groups = groups;
  args.permissions = permissions;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unshare_dashboards();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_unshare_dashboards = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_unshare_dashboards_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.get_dashboard_grantees = function(session, dashboard_id, callback) {
  this.send_get_dashboard_grantees(session, dashboard_id, callback); 
  if (!callback) {
    return this.recv_get_dashboard_grantees();
  }
};

OmniSciClient.prototype.send_get_dashboard_grantees = function(session, dashboard_id, callback) {
  this.output.writeMessageBegin('get_dashboard_grantees', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_dashboard_grantees_args();
  args.session = session;
  args.dashboard_id = dashboard_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_dashboard_grantees();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_dashboard_grantees = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_dashboard_grantees_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_dashboard_grantees failed: unknown result';
};
OmniSciClient.prototype.get_link_view = function(session, link, callback) {
  this.send_get_link_view(session, link, callback); 
  if (!callback) {
    return this.recv_get_link_view();
  }
};

OmniSciClient.prototype.send_get_link_view = function(session, link, callback) {
  this.output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_link_view_args();
  args.session = session;
  args.link = link;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_link_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_link_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_link_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_link_view failed: unknown result';
};
OmniSciClient.prototype.create_link = function(session, view_state, view_metadata, callback) {
  this.send_create_link(session, view_state, view_metadata, callback); 
  if (!callback) {
    return this.recv_create_link();
  }
};

OmniSciClient.prototype.send_create_link = function(session, view_state, view_metadata, callback) {
  this.output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_create_link_args();
  args.session = session;
  args.view_state = view_state;
  args.view_metadata = view_metadata;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_link();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_create_link = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_create_link_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create_link failed: unknown result';
};
OmniSciClient.prototype.load_table_binary = function(session, table_name, rows, callback) {
  this.send_load_table_binary(session, table_name, rows, callback); 
  if (!callback) {
  this.recv_load_table_binary();
  }
};

OmniSciClient.prototype.send_load_table_binary = function(session, table_name, rows, callback) {
  this.output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_load_table_binary_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table_binary();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_load_table_binary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_load_table_binary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.load_table_binary_columnar = function(session, table_name, cols, callback) {
  this.send_load_table_binary_columnar(session, table_name, cols, callback); 
  if (!callback) {
  this.recv_load_table_binary_columnar();
  }
};

OmniSciClient.prototype.send_load_table_binary_columnar = function(session, table_name, cols, callback) {
  this.output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_load_table_binary_columnar_args();
  args.session = session;
  args.table_name = table_name;
  args.cols = cols;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table_binary_columnar();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_load_table_binary_columnar = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_load_table_binary_columnar_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.load_table_binary_arrow = function(session, table_name, arrow_stream, callback) {
  this.send_load_table_binary_arrow(session, table_name, arrow_stream, callback); 
  if (!callback) {
  this.recv_load_table_binary_arrow();
  }
};

OmniSciClient.prototype.send_load_table_binary_arrow = function(session, table_name, arrow_stream, callback) {
  this.output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_load_table_binary_arrow_args();
  args.session = session;
  args.table_name = table_name;
  args.arrow_stream = arrow_stream;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table_binary_arrow();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_load_table_binary_arrow = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_load_table_binary_arrow_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.load_table = function(session, table_name, rows, callback) {
  this.send_load_table(session, table_name, rows, callback); 
  if (!callback) {
  this.recv_load_table();
  }
};

OmniSciClient.prototype.send_load_table = function(session, table_name, rows, callback) {
  this.output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_load_table_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_load_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_load_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.detect_column_types = function(session, file_name, copy_params, callback) {
  this.send_detect_column_types(session, file_name, copy_params, callback); 
  if (!callback) {
    return this.recv_detect_column_types();
  }
};

OmniSciClient.prototype.send_detect_column_types = function(session, file_name, copy_params, callback) {
  this.output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_detect_column_types_args();
  args.session = session;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_detect_column_types();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_detect_column_types = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_detect_column_types_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'detect_column_types failed: unknown result';
};
OmniSciClient.prototype.create_table = function(session, table_name, row_desc, file_type, create_params, callback) {
  this.send_create_table(session, table_name, row_desc, file_type, create_params, callback); 
  if (!callback) {
  this.recv_create_table();
  }
};

OmniSciClient.prototype.send_create_table = function(session, table_name, row_desc, file_type, create_params, callback) {
  this.output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_create_table_args();
  args.session = session;
  args.table_name = table_name;
  args.row_desc = row_desc;
  args.file_type = file_type;
  args.create_params = create_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_create_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_create_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.import_table = function(session, table_name, file_name, copy_params, callback) {
  this.send_import_table(session, table_name, file_name, copy_params, callback); 
  if (!callback) {
  this.recv_import_table();
  }
};

OmniSciClient.prototype.send_import_table = function(session, table_name, file_name, copy_params, callback) {
  this.output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_import_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_import_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_import_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.import_geo_table = function(session, table_name, file_name, copy_params, row_desc, create_params, callback) {
  this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params, callback); 
  if (!callback) {
  this.recv_import_geo_table();
  }
};

OmniSciClient.prototype.send_import_geo_table = function(session, table_name, file_name, copy_params, row_desc, create_params, callback) {
  this.output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_import_geo_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.row_desc = row_desc;
  args.create_params = create_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_geo_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_import_geo_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_import_geo_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.import_table_status = function(session, import_id, callback) {
  this.send_import_table_status(session, import_id, callback); 
  if (!callback) {
    return this.recv_import_table_status();
  }
};

OmniSciClient.prototype.send_import_table_status = function(session, import_id, callback) {
  this.output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_import_table_status_args();
  args.session = session;
  args.import_id = import_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_table_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_import_table_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_import_table_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'import_table_status failed: unknown result';
};
OmniSciClient.prototype.get_first_geo_file_in_archive = function(session, archive_path, copy_params, callback) {
  this.send_get_first_geo_file_in_archive(session, archive_path, copy_params, callback); 
  if (!callback) {
    return this.recv_get_first_geo_file_in_archive();
  }
};

OmniSciClient.prototype.send_get_first_geo_file_in_archive = function(session, archive_path, copy_params, callback) {
  this.output.writeMessageBegin('get_first_geo_file_in_archive', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_first_geo_file_in_archive_args();
  args.session = session;
  args.archive_path = archive_path;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_first_geo_file_in_archive();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_first_geo_file_in_archive = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_first_geo_file_in_archive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_first_geo_file_in_archive failed: unknown result';
};
OmniSciClient.prototype.get_all_files_in_archive = function(session, archive_path, copy_params, callback) {
  this.send_get_all_files_in_archive(session, archive_path, copy_params, callback); 
  if (!callback) {
    return this.recv_get_all_files_in_archive();
  }
};

OmniSciClient.prototype.send_get_all_files_in_archive = function(session, archive_path, copy_params, callback) {
  this.output.writeMessageBegin('get_all_files_in_archive', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_all_files_in_archive_args();
  args.session = session;
  args.archive_path = archive_path;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_all_files_in_archive();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_all_files_in_archive = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_all_files_in_archive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_all_files_in_archive failed: unknown result';
};
OmniSciClient.prototype.get_layers_in_geo_file = function(session, file_name, copy_params, callback) {
  this.send_get_layers_in_geo_file(session, file_name, copy_params, callback); 
  if (!callback) {
    return this.recv_get_layers_in_geo_file();
  }
};

OmniSciClient.prototype.send_get_layers_in_geo_file = function(session, file_name, copy_params, callback) {
  this.output.writeMessageBegin('get_layers_in_geo_file', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_layers_in_geo_file_args();
  args.session = session;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_layers_in_geo_file();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_layers_in_geo_file = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_layers_in_geo_file_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_layers_in_geo_file failed: unknown result';
};
OmniSciClient.prototype.query_get_outer_fragment_count = function(session, query, callback) {
  this.send_query_get_outer_fragment_count(session, query, callback); 
  if (!callback) {
    return this.recv_query_get_outer_fragment_count();
  }
};

OmniSciClient.prototype.send_query_get_outer_fragment_count = function(session, query, callback) {
  this.output.writeMessageBegin('query_get_outer_fragment_count', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_query_get_outer_fragment_count_args();
  args.session = session;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_query_get_outer_fragment_count();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_query_get_outer_fragment_count = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_query_get_outer_fragment_count_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'query_get_outer_fragment_count failed: unknown result';
};
OmniSciClient.prototype.check_table_consistency = function(session, table_id, callback) {
  this.send_check_table_consistency(session, table_id, callback); 
  if (!callback) {
    return this.recv_check_table_consistency();
  }
};

OmniSciClient.prototype.send_check_table_consistency = function(session, table_id, callback) {
  this.output.writeMessageBegin('check_table_consistency', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_check_table_consistency_args();
  args.session = session;
  args.table_id = table_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_check_table_consistency();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_check_table_consistency = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_check_table_consistency_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'check_table_consistency failed: unknown result';
};
OmniSciClient.prototype.start_query = function(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices, callback) {
  this.send_start_query(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices, callback); 
  if (!callback) {
    return this.recv_start_query();
  }
};

OmniSciClient.prototype.send_start_query = function(leaf_session, parent_session, query_ra, just_explain, outer_fragment_indices, callback) {
  this.output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_start_query_args();
  args.leaf_session = leaf_session;
  args.parent_session = parent_session;
  args.query_ra = query_ra;
  args.just_explain = just_explain;
  args.outer_fragment_indices = outer_fragment_indices;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_start_query();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_start_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_start_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'start_query failed: unknown result';
};
OmniSciClient.prototype.execute_query_step = function(pending_query, callback) {
  this.send_execute_query_step(pending_query, callback); 
  if (!callback) {
    return this.recv_execute_query_step();
  }
};

OmniSciClient.prototype.send_execute_query_step = function(pending_query, callback) {
  this.output.writeMessageBegin('execute_query_step', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_execute_query_step_args();
  args.pending_query = pending_query;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_execute_query_step();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_execute_query_step = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_execute_query_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute_query_step failed: unknown result';
};
OmniSciClient.prototype.broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
  this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, callback); 
  if (!callback) {
  this.recv_broadcast_serialized_rows();
  }
};

OmniSciClient.prototype.send_broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
  this.output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_broadcast_serialized_rows_args();
  args.serialized_rows = serialized_rows;
  args.row_desc = row_desc;
  args.query_id = query_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_broadcast_serialized_rows();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_broadcast_serialized_rows = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_broadcast_serialized_rows_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.start_render_query = function(session, widget_id, node_idx, vega_json, callback) {
  this.send_start_render_query(session, widget_id, node_idx, vega_json, callback); 
  if (!callback) {
    return this.recv_start_render_query();
  }
};

OmniSciClient.prototype.send_start_render_query = function(session, widget_id, node_idx, vega_json, callback) {
  this.output.writeMessageBegin('start_render_query', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_start_render_query_args();
  args.session = session;
  args.widget_id = widget_id;
  args.node_idx = node_idx;
  args.vega_json = vega_json;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_start_render_query();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_start_render_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_start_render_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'start_render_query failed: unknown result';
};
OmniSciClient.prototype.execute_next_render_step = function(pending_render, merged_data, callback) {
  this.send_execute_next_render_step(pending_render, merged_data, callback); 
  if (!callback) {
    return this.recv_execute_next_render_step();
  }
};

OmniSciClient.prototype.send_execute_next_render_step = function(pending_render, merged_data, callback) {
  this.output.writeMessageBegin('execute_next_render_step', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_execute_next_render_step_args();
  args.pending_render = pending_render;
  args.merged_data = merged_data;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_execute_next_render_step();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_execute_next_render_step = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_execute_next_render_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute_next_render_step failed: unknown result';
};
OmniSciClient.prototype.insert_data = function(session, insert_data, callback) {
  this.send_insert_data(session, insert_data, callback); 
  if (!callback) {
  this.recv_insert_data();
  }
};

OmniSciClient.prototype.send_insert_data = function(session, insert_data, callback) {
  this.output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_insert_data_args();
  args.session = session;
  args.insert_data = insert_data;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_insert_data();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_insert_data = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_insert_data_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.checkpoint = function(session, db_id, table_id, callback) {
  this.send_checkpoint(session, db_id, table_id, callback); 
  if (!callback) {
  this.recv_checkpoint();
  }
};

OmniSciClient.prototype.send_checkpoint = function(session, db_id, table_id, callback) {
  this.output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_checkpoint_args();
  args.session = session;
  args.db_id = db_id;
  args.table_id = table_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_checkpoint();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_checkpoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_checkpoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
OmniSciClient.prototype.get_roles = function(session, callback) {
  this.send_get_roles(session, callback); 
  if (!callback) {
    return this.recv_get_roles();
  }
};

OmniSciClient.prototype.send_get_roles = function(session, callback) {
  this.output.writeMessageBegin('get_roles', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_roles_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_roles();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_roles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_roles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_roles failed: unknown result';
};
OmniSciClient.prototype.get_db_objects_for_grantee = function(session, roleName, callback) {
  this.send_get_db_objects_for_grantee(session, roleName, callback); 
  if (!callback) {
    return this.recv_get_db_objects_for_grantee();
  }
};

OmniSciClient.prototype.send_get_db_objects_for_grantee = function(session, roleName, callback) {
  this.output.writeMessageBegin('get_db_objects_for_grantee', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_db_objects_for_grantee_args();
  args.session = session;
  args.roleName = roleName;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_db_objects_for_grantee();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_db_objects_for_grantee = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_db_objects_for_grantee_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_db_objects_for_grantee failed: unknown result';
};
OmniSciClient.prototype.get_db_object_privs = function(session, objectName, type, callback) {
  this.send_get_db_object_privs(session, objectName, type, callback); 
  if (!callback) {
    return this.recv_get_db_object_privs();
  }
};

OmniSciClient.prototype.send_get_db_object_privs = function(session, objectName, type, callback) {
  this.output.writeMessageBegin('get_db_object_privs', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_db_object_privs_args();
  args.session = session;
  args.objectName = objectName;
  args.type = type;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_db_object_privs();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_db_object_privs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_db_object_privs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_db_object_privs failed: unknown result';
};
OmniSciClient.prototype.get_all_roles_for_user = function(session, userName, callback) {
  this.send_get_all_roles_for_user(session, userName, callback); 
  if (!callback) {
    return this.recv_get_all_roles_for_user();
  }
};

OmniSciClient.prototype.send_get_all_roles_for_user = function(session, userName, callback) {
  this.output.writeMessageBegin('get_all_roles_for_user', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_all_roles_for_user_args();
  args.session = session;
  args.userName = userName;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_all_roles_for_user();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_all_roles_for_user = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_all_roles_for_user_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_all_roles_for_user failed: unknown result';
};
OmniSciClient.prototype.has_role = function(session, granteeName, roleName, callback) {
  this.send_has_role(session, granteeName, roleName, callback); 
  if (!callback) {
    return this.recv_has_role();
  }
};

OmniSciClient.prototype.send_has_role = function(session, granteeName, roleName, callback) {
  this.output.writeMessageBegin('has_role', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_has_role_args();
  args.session = session;
  args.granteeName = granteeName;
  args.roleName = roleName;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_has_role();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_has_role = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_has_role_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'has_role failed: unknown result';
};
OmniSciClient.prototype.has_object_privilege = function(session, granteeName, ObjectName, objectType, permissions, callback) {
  this.send_has_object_privilege(session, granteeName, ObjectName, objectType, permissions, callback); 
  if (!callback) {
    return this.recv_has_object_privilege();
  }
};

OmniSciClient.prototype.send_has_object_privilege = function(session, granteeName, ObjectName, objectType, permissions, callback) {
  this.output.writeMessageBegin('has_object_privilege', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_has_object_privilege_args();
  args.session = session;
  args.granteeName = granteeName;
  args.ObjectName = ObjectName;
  args.objectType = objectType;
  args.permissions = permissions;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_has_object_privilege();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_has_object_privilege = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_has_object_privilege_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'has_object_privilege failed: unknown result';
};
OmniSciClient.prototype.set_license_key = function(session, key, nonce, callback) {
  this.send_set_license_key(session, key, nonce, callback); 
  if (!callback) {
    return this.recv_set_license_key();
  }
};

OmniSciClient.prototype.send_set_license_key = function(session, key, nonce, callback) {
  this.output.writeMessageBegin('set_license_key', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_set_license_key_args();
  args.session = session;
  args.key = key;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_set_license_key();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_set_license_key = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_set_license_key_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'set_license_key failed: unknown result';
};
OmniSciClient.prototype.get_license_claims = function(session, nonce, callback) {
  this.send_get_license_claims(session, nonce, callback); 
  if (!callback) {
    return this.recv_get_license_claims();
  }
};

OmniSciClient.prototype.send_get_license_claims = function(session, nonce, callback) {
  this.output.writeMessageBegin('get_license_claims', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_license_claims_args();
  args.session = session;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_license_claims();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_license_claims = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_license_claims_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_license_claims failed: unknown result';
};
OmniSciClient.prototype.get_device_parameters = function(session, callback) {
  this.send_get_device_parameters(session, callback); 
  if (!callback) {
    return this.recv_get_device_parameters();
  }
};

OmniSciClient.prototype.send_get_device_parameters = function(session, callback) {
  this.output.writeMessageBegin('get_device_parameters', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_get_device_parameters_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_device_parameters();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_get_device_parameters = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_get_device_parameters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_device_parameters failed: unknown result';
};
OmniSciClient.prototype.register_runtime_extension_functions = function(session, udfs, udtfs, device_ir_map, callback) {
  this.send_register_runtime_extension_functions(session, udfs, udtfs, device_ir_map, callback); 
  if (!callback) {
  this.recv_register_runtime_extension_functions();
  }
};

OmniSciClient.prototype.send_register_runtime_extension_functions = function(session, udfs, udtfs, device_ir_map, callback) {
  this.output.writeMessageBegin('register_runtime_extension_functions', Thrift.MessageType.CALL, this.seqid);
  var args = new OmniSci_register_runtime_extension_functions_args();
  args.session = session;
  args.udfs = udfs;
  args.udtfs = udtfs;
  args.device_ir_map = device_ir_map;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_register_runtime_extension_functions();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OmniSciClient.prototype.recv_register_runtime_extension_functions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OmniSci_register_runtime_extension_functions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
