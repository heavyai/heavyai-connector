//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const common_ttypes = require('./common_types');
const completion_hints_ttypes = require('./completion_hints_types');
const serialized_result_set_ttypes = require('./serialized_result_set_types');
const extension_functions_ttypes = require('./extension_functions_types');


const ttypes = require('./heavy_types');
//HELPER FUNCTIONS AND STRUCTURES

const Heavy_connect_args = class {
  constructor(args) {
    this.user = null;
    this.passwd = null;
    this.dbname = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.passwd !== undefined && args.passwd !== null) {
        this.passwd = args.passwd;
      }
      if (args.dbname !== undefined && args.dbname !== null) {
        this.dbname = args.dbname;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.user = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.passwd = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_connect_args');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.STRING, 1);
      output.writeString(this.user);
      output.writeFieldEnd();
    }
    if (this.passwd !== null && this.passwd !== undefined) {
      output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
      output.writeString(this.passwd);
      output.writeFieldEnd();
    }
    if (this.dbname !== null && this.dbname !== undefined) {
      output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
      output.writeString(this.dbname);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_connect_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_connect_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_krb5_connect_args = class {
  constructor(args) {
    this.inputToken = null;
    this.dbname = null;
    if (args) {
      if (args.inputToken !== undefined && args.inputToken !== null) {
        this.inputToken = args.inputToken;
      }
      if (args.dbname !== undefined && args.dbname !== null) {
        this.dbname = args.dbname;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.inputToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_krb5_connect_args');
    if (this.inputToken !== null && this.inputToken !== undefined) {
      output.writeFieldBegin('inputToken', Thrift.Type.STRING, 1);
      output.writeString(this.inputToken);
      output.writeFieldEnd();
    }
    if (this.dbname !== null && this.dbname !== undefined) {
      output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
      output.writeString(this.dbname);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_krb5_connect_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TKrb5Session(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TKrb5Session();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_krb5_connect_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_disconnect_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_disconnect_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_disconnect_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_disconnect_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_switch_database_args = class {
  constructor(args) {
    this.session = null;
    this.dbname = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dbname !== undefined && args.dbname !== null) {
        this.dbname = args.dbname;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_switch_database_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dbname !== null && this.dbname !== undefined) {
      output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
      output.writeString(this.dbname);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_switch_database_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_switch_database_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_clone_session_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_clone_session_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_clone_session_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_clone_session_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_server_status_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_server_status_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_server_status_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TServerStatus(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TServerStatus();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_server_status_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_status_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_status_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_status_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TServerStatus]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3206 = input.readListBegin();
          const _size205 = _rtmp3206.size || 0;
          for (let _i207 = 0; _i207 < _size205; ++_i207) {
            let elem208 = null;
            elem208 = new ttypes.TServerStatus();
            elem208.read(input);
            this.success.push(elem208);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_status_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter209 in this.success) {
        if (this.success.hasOwnProperty(iter209)) {
          iter209 = this.success[iter209];
          iter209.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_hardware_info_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_hardware_info_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_hardware_info_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TClusterHardwareInfo(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TClusterHardwareInfo();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_hardware_info_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_tables_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_tables_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_tables_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3211 = input.readListBegin();
          const _size210 = _rtmp3211.size || 0;
          for (let _i212 = 0; _i212 < _size210; ++_i212) {
            let elem213 = null;
            elem213 = input.readString();
            this.success.push(elem213);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_tables_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter214 in this.success) {
        if (this.success.hasOwnProperty(iter214)) {
          iter214 = this.success[iter214];
          output.writeString(iter214);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_tables_for_database_args = class {
  constructor(args) {
    this.session = null;
    this.database_name = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.database_name !== undefined && args.database_name !== null) {
        this.database_name = args.database_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.database_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_tables_for_database_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.database_name !== null && this.database_name !== undefined) {
      output.writeFieldBegin('database_name', Thrift.Type.STRING, 2);
      output.writeString(this.database_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_tables_for_database_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3216 = input.readListBegin();
          const _size215 = _rtmp3216.size || 0;
          for (let _i217 = 0; _i217 < _size215; ++_i217) {
            let elem218 = null;
            elem218 = input.readString();
            this.success.push(elem218);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_tables_for_database_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter219 in this.success) {
        if (this.success.hasOwnProperty(iter219)) {
          iter219 = this.success[iter219];
          output.writeString(iter219);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_physical_tables_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_physical_tables_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_physical_tables_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3221 = input.readListBegin();
          const _size220 = _rtmp3221.size || 0;
          for (let _i222 = 0; _i222 < _size220; ++_i222) {
            let elem223 = null;
            elem223 = input.readString();
            this.success.push(elem223);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_physical_tables_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter224 in this.success) {
        if (this.success.hasOwnProperty(iter224)) {
          iter224 = this.success[iter224];
          output.writeString(iter224);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_views_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_views_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_views_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3226 = input.readListBegin();
          const _size225 = _rtmp3226.size || 0;
          for (let _i227 = 0; _i227 < _size225; ++_i227) {
            let elem228 = null;
            elem228 = input.readString();
            this.success.push(elem228);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_views_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter229 in this.success) {
        if (this.success.hasOwnProperty(iter229)) {
          iter229 = this.success[iter229];
          output.writeString(iter229);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_tables_meta_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_tables_meta_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_tables_meta_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TTableMeta]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3231 = input.readListBegin();
          const _size230 = _rtmp3231.size || 0;
          for (let _i232 = 0; _i232 < _size230; ++_i232) {
            let elem233 = null;
            elem233 = new ttypes.TTableMeta();
            elem233.read(input);
            this.success.push(elem233);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_tables_meta_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter234 in this.success) {
        if (this.success.hasOwnProperty(iter234)) {
          iter234 = this.success[iter234];
          iter234.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_details_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_details_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_details_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TTableDetails(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TTableDetails();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_details_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_details_for_database_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.database_name = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.database_name !== undefined && args.database_name !== null) {
        this.database_name = args.database_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.database_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_details_for_database_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.database_name !== null && this.database_name !== undefined) {
      output.writeFieldBegin('database_name', Thrift.Type.STRING, 3);
      output.writeString(this.database_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_details_for_database_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TTableDetails(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TTableDetails();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_details_for_database_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_internal_table_details_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.include_system_columns = true;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.include_system_columns !== undefined && args.include_system_columns !== null) {
        this.include_system_columns = args.include_system_columns;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.include_system_columns = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_internal_table_details_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.include_system_columns !== null && this.include_system_columns !== undefined) {
      output.writeFieldBegin('include_system_columns', Thrift.Type.BOOL, 3);
      output.writeBool(this.include_system_columns);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_internal_table_details_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TTableDetails(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TTableDetails();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_internal_table_details_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_internal_table_details_for_database_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.database_name = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.database_name !== undefined && args.database_name !== null) {
        this.database_name = args.database_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.database_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_internal_table_details_for_database_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.database_name !== null && this.database_name !== undefined) {
      output.writeFieldBegin('database_name', Thrift.Type.STRING, 3);
      output.writeString(this.database_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_internal_table_details_for_database_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TTableDetails(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TTableDetails();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_internal_table_details_for_database_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_users_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_users_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_users_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3236 = input.readListBegin();
          const _size235 = _rtmp3236.size || 0;
          for (let _i237 = 0; _i237 < _size235; ++_i237) {
            let elem238 = null;
            elem238 = input.readString();
            this.success.push(elem238);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_users_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter239 in this.success) {
        if (this.success.hasOwnProperty(iter239)) {
          iter239 = this.success[iter239];
          output.writeString(iter239);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_databases_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_databases_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_databases_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TDBInfo]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3241 = input.readListBegin();
          const _size240 = _rtmp3241.size || 0;
          for (let _i242 = 0; _i242 < _size240; ++_i242) {
            let elem243 = null;
            elem243 = new ttypes.TDBInfo();
            elem243.read(input);
            this.success.push(elem243);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_databases_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter244 in this.success) {
        if (this.success.hasOwnProperty(iter244)) {
          iter244 = this.success[iter244];
          iter244.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_version_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_version_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_version_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_version_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_start_heap_profile_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_start_heap_profile_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_start_heap_profile_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_start_heap_profile_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_stop_heap_profile_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_stop_heap_profile_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_stop_heap_profile_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_stop_heap_profile_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_heap_profile_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_heap_profile_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_heap_profile_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_heap_profile_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_memory_args = class {
  constructor(args) {
    this.session = null;
    this.memory_level = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.memory_level !== undefined && args.memory_level !== null) {
        this.memory_level = args.memory_level;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.memory_level = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_memory_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.memory_level !== null && this.memory_level !== undefined) {
      output.writeFieldBegin('memory_level', Thrift.Type.STRING, 2);
      output.writeString(this.memory_level);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_memory_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TNodeMemoryInfo]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3246 = input.readListBegin();
          const _size245 = _rtmp3246.size || 0;
          for (let _i247 = 0; _i247 < _size245; ++_i247) {
            let elem248 = null;
            elem248 = new ttypes.TNodeMemoryInfo();
            elem248.read(input);
            this.success.push(elem248);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_memory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter249 in this.success) {
        if (this.success.hasOwnProperty(iter249)) {
          iter249 = this.success[iter249];
          iter249.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_clear_cpu_memory_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_clear_cpu_memory_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_clear_cpu_memory_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_clear_cpu_memory_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_clear_gpu_memory_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_clear_gpu_memory_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_clear_gpu_memory_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_clear_gpu_memory_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_cur_session_args = class {
  constructor(args) {
    this.parent_session = null;
    this.leaf_session = null;
    this.start_time_str = null;
    this.label = null;
    this.for_running_query_kernel = null;
    if (args) {
      if (args.parent_session !== undefined && args.parent_session !== null) {
        this.parent_session = args.parent_session;
      }
      if (args.leaf_session !== undefined && args.leaf_session !== null) {
        this.leaf_session = args.leaf_session;
      }
      if (args.start_time_str !== undefined && args.start_time_str !== null) {
        this.start_time_str = args.start_time_str;
      }
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
      if (args.for_running_query_kernel !== undefined && args.for_running_query_kernel !== null) {
        this.for_running_query_kernel = args.for_running_query_kernel;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.parent_session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.leaf_session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start_time_str = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.for_running_query_kernel = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_cur_session_args');
    if (this.parent_session !== null && this.parent_session !== undefined) {
      output.writeFieldBegin('parent_session', Thrift.Type.STRING, 1);
      output.writeString(this.parent_session);
      output.writeFieldEnd();
    }
    if (this.leaf_session !== null && this.leaf_session !== undefined) {
      output.writeFieldBegin('leaf_session', Thrift.Type.STRING, 2);
      output.writeString(this.leaf_session);
      output.writeFieldEnd();
    }
    if (this.start_time_str !== null && this.start_time_str !== undefined) {
      output.writeFieldBegin('start_time_str', Thrift.Type.STRING, 3);
      output.writeString(this.start_time_str);
      output.writeFieldEnd();
    }
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 4);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    if (this.for_running_query_kernel !== null && this.for_running_query_kernel !== undefined) {
      output.writeFieldBegin('for_running_query_kernel', Thrift.Type.BOOL, 5);
      output.writeBool(this.for_running_query_kernel);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_cur_session_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_cur_session_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_invalidate_cur_session_args = class {
  constructor(args) {
    this.parent_session = null;
    this.leaf_session = null;
    this.start_time_str = null;
    this.label = null;
    this.for_running_query_kernel = null;
    if (args) {
      if (args.parent_session !== undefined && args.parent_session !== null) {
        this.parent_session = args.parent_session;
      }
      if (args.leaf_session !== undefined && args.leaf_session !== null) {
        this.leaf_session = args.leaf_session;
      }
      if (args.start_time_str !== undefined && args.start_time_str !== null) {
        this.start_time_str = args.start_time_str;
      }
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
      if (args.for_running_query_kernel !== undefined && args.for_running_query_kernel !== null) {
        this.for_running_query_kernel = args.for_running_query_kernel;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.parent_session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.leaf_session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start_time_str = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.for_running_query_kernel = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_invalidate_cur_session_args');
    if (this.parent_session !== null && this.parent_session !== undefined) {
      output.writeFieldBegin('parent_session', Thrift.Type.STRING, 1);
      output.writeString(this.parent_session);
      output.writeFieldEnd();
    }
    if (this.leaf_session !== null && this.leaf_session !== undefined) {
      output.writeFieldBegin('leaf_session', Thrift.Type.STRING, 2);
      output.writeString(this.leaf_session);
      output.writeFieldEnd();
    }
    if (this.start_time_str !== null && this.start_time_str !== undefined) {
      output.writeFieldBegin('start_time_str', Thrift.Type.STRING, 3);
      output.writeString(this.start_time_str);
      output.writeFieldEnd();
    }
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 4);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    if (this.for_running_query_kernel !== null && this.for_running_query_kernel !== undefined) {
      output.writeFieldBegin('for_running_query_kernel', Thrift.Type.BOOL, 5);
      output.writeBool(this.for_running_query_kernel);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_invalidate_cur_session_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_invalidate_cur_session_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_table_epoch_args = class {
  constructor(args) {
    this.session = null;
    this.db_id = null;
    this.table_id = null;
    this.new_epoch = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.db_id !== undefined && args.db_id !== null) {
        this.db_id = args.db_id;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
      if (args.new_epoch !== undefined && args.new_epoch !== null) {
        this.new_epoch = args.new_epoch;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.db_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.new_epoch = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_table_epoch_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.db_id !== null && this.db_id !== undefined) {
      output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
      output.writeI32(this.db_id);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    if (this.new_epoch !== null && this.new_epoch !== undefined) {
      output.writeFieldBegin('new_epoch', Thrift.Type.I32, 4);
      output.writeI32(this.new_epoch);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_table_epoch_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_table_epoch_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_table_epoch_by_name_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.new_epoch = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.new_epoch !== undefined && args.new_epoch !== null) {
        this.new_epoch = args.new_epoch;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.new_epoch = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_table_epoch_by_name_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.new_epoch !== null && this.new_epoch !== undefined) {
      output.writeFieldBegin('new_epoch', Thrift.Type.I32, 3);
      output.writeI32(this.new_epoch);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_table_epoch_by_name_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_table_epoch_by_name_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_epoch_args = class {
  constructor(args) {
    this.session = null;
    this.db_id = null;
    this.table_id = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.db_id !== undefined && args.db_id !== null) {
        this.db_id = args.db_id;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.db_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_epoch_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.db_id !== null && this.db_id !== undefined) {
      output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
      output.writeI32(this.db_id);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_epoch_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_epoch_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_epoch_by_name_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_epoch_by_name_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_epoch_by_name_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_epoch_by_name_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_epochs_args = class {
  constructor(args) {
    this.session = null;
    this.db_id = null;
    this.table_id = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.db_id !== undefined && args.db_id !== null) {
        this.db_id = args.db_id;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.db_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_epochs_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.db_id !== null && this.db_id !== undefined) {
      output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
      output.writeI32(this.db_id);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 3);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_epochs_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TTableEpochInfo]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3251 = input.readListBegin();
          const _size250 = _rtmp3251.size || 0;
          for (let _i252 = 0; _i252 < _size250; ++_i252) {
            let elem253 = null;
            elem253 = new ttypes.TTableEpochInfo();
            elem253.read(input);
            this.success.push(elem253);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_epochs_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter254 in this.success) {
        if (this.success.hasOwnProperty(iter254)) {
          iter254 = this.success[iter254];
          iter254.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_table_epochs_args = class {
  constructor(args) {
    this.session = null;
    this.db_id = null;
    this.table_epochs = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.db_id !== undefined && args.db_id !== null) {
        this.db_id = args.db_id;
      }
      if (args.table_epochs !== undefined && args.table_epochs !== null) {
        this.table_epochs = Thrift.copyList(args.table_epochs, [ttypes.TTableEpochInfo]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.db_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.table_epochs = [];
          const _rtmp3256 = input.readListBegin();
          const _size255 = _rtmp3256.size || 0;
          for (let _i257 = 0; _i257 < _size255; ++_i257) {
            let elem258 = null;
            elem258 = new ttypes.TTableEpochInfo();
            elem258.read(input);
            this.table_epochs.push(elem258);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_table_epochs_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.db_id !== null && this.db_id !== undefined) {
      output.writeFieldBegin('db_id', Thrift.Type.I32, 2);
      output.writeI32(this.db_id);
      output.writeFieldEnd();
    }
    if (this.table_epochs !== null && this.table_epochs !== undefined) {
      output.writeFieldBegin('table_epochs', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.table_epochs.length);
      for (let iter259 in this.table_epochs) {
        if (this.table_epochs.hasOwnProperty(iter259)) {
          iter259 = this.table_epochs[iter259];
          iter259.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_table_epochs_result = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_table_epochs_result');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_session_info_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_session_info_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_session_info_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TSessionInfo(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TSessionInfo();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_session_info_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_queries_info_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_queries_info_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_queries_info_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TQueryInfo]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3261 = input.readListBegin();
          const _size260 = _rtmp3261.size || 0;
          for (let _i262 = 0; _i262 < _size260; ++_i262) {
            let elem263 = null;
            elem263 = new ttypes.TQueryInfo();
            elem263.read(input);
            this.success.push(elem263);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_queries_info_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter264 in this.success) {
        if (this.success.hasOwnProperty(iter264)) {
          iter264 = this.success[iter264];
          iter264.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_leaf_info_args = class {
  constructor(args) {
    this.session = null;
    this.leaf_info = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.leaf_info !== undefined && args.leaf_info !== null) {
        this.leaf_info = new ttypes.TLeafInfo(args.leaf_info);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.leaf_info = new ttypes.TLeafInfo();
          this.leaf_info.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_leaf_info_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.leaf_info !== null && this.leaf_info !== undefined) {
      output.writeFieldBegin('leaf_info', Thrift.Type.STRUCT, 2);
      this.leaf_info.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_leaf_info_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_leaf_info_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_sql_execute_args = class {
  constructor(args) {
    this.session = null;
    this.query = null;
    this.column_format = null;
    this.nonce = null;
    this.first_n = -1;
    this.at_most_n = -1;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
      if (args.column_format !== undefined && args.column_format !== null) {
        this.column_format = args.column_format;
      }
      if (args.nonce !== undefined && args.nonce !== null) {
        this.nonce = args.nonce;
      }
      if (args.first_n !== undefined && args.first_n !== null) {
        this.first_n = args.first_n;
      }
      if (args.at_most_n !== undefined && args.at_most_n !== null) {
        this.at_most_n = args.at_most_n;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.column_format = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.nonce = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.first_n = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.at_most_n = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_sql_execute_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 2);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    if (this.column_format !== null && this.column_format !== undefined) {
      output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
      output.writeBool(this.column_format);
      output.writeFieldEnd();
    }
    if (this.nonce !== null && this.nonce !== undefined) {
      output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
      output.writeString(this.nonce);
      output.writeFieldEnd();
    }
    if (this.first_n !== null && this.first_n !== undefined) {
      output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
      output.writeI32(this.first_n);
      output.writeFieldEnd();
    }
    if (this.at_most_n !== null && this.at_most_n !== undefined) {
      output.writeFieldBegin('at_most_n', Thrift.Type.I32, 6);
      output.writeI32(this.at_most_n);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_sql_execute_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TQueryResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TQueryResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_sql_execute_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_sql_execute_df_args = class {
  constructor(args) {
    this.session = null;
    this.query = null;
    this.device_type = null;
    this.device_id = 0;
    this.first_n = -1;
    this.transport_method = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
      if (args.device_type !== undefined && args.device_type !== null) {
        this.device_type = args.device_type;
      }
      if (args.device_id !== undefined && args.device_id !== null) {
        this.device_id = args.device_id;
      }
      if (args.first_n !== undefined && args.first_n !== null) {
        this.first_n = args.first_n;
      }
      if (args.transport_method !== undefined && args.transport_method !== null) {
        this.transport_method = args.transport_method;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.device_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.device_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.first_n = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.transport_method = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_sql_execute_df_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 2);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    if (this.device_type !== null && this.device_type !== undefined) {
      output.writeFieldBegin('device_type', Thrift.Type.I32, 3);
      output.writeI32(this.device_type);
      output.writeFieldEnd();
    }
    if (this.device_id !== null && this.device_id !== undefined) {
      output.writeFieldBegin('device_id', Thrift.Type.I32, 4);
      output.writeI32(this.device_id);
      output.writeFieldEnd();
    }
    if (this.first_n !== null && this.first_n !== undefined) {
      output.writeFieldBegin('first_n', Thrift.Type.I32, 5);
      output.writeI32(this.first_n);
      output.writeFieldEnd();
    }
    if (this.transport_method !== null && this.transport_method !== undefined) {
      output.writeFieldBegin('transport_method', Thrift.Type.I32, 6);
      output.writeI32(this.transport_method);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_sql_execute_df_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TDataFrame(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TDataFrame();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_sql_execute_df_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_sql_execute_gdf_args = class {
  constructor(args) {
    this.session = null;
    this.query = null;
    this.device_id = 0;
    this.first_n = -1;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
      if (args.device_id !== undefined && args.device_id !== null) {
        this.device_id = args.device_id;
      }
      if (args.first_n !== undefined && args.first_n !== null) {
        this.first_n = args.first_n;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.device_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.first_n = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_sql_execute_gdf_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 2);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    if (this.device_id !== null && this.device_id !== undefined) {
      output.writeFieldBegin('device_id', Thrift.Type.I32, 3);
      output.writeI32(this.device_id);
      output.writeFieldEnd();
    }
    if (this.first_n !== null && this.first_n !== undefined) {
      output.writeFieldBegin('first_n', Thrift.Type.I32, 4);
      output.writeI32(this.first_n);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_sql_execute_gdf_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TDataFrame(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TDataFrame();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_sql_execute_gdf_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_deallocate_df_args = class {
  constructor(args) {
    this.session = null;
    this.df = null;
    this.device_type = null;
    this.device_id = 0;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.df !== undefined && args.df !== null) {
        this.df = new ttypes.TDataFrame(args.df);
      }
      if (args.device_type !== undefined && args.device_type !== null) {
        this.device_type = args.device_type;
      }
      if (args.device_id !== undefined && args.device_id !== null) {
        this.device_id = args.device_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.df = new ttypes.TDataFrame();
          this.df.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.device_type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.device_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_deallocate_df_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.df !== null && this.df !== undefined) {
      output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);
      this.df.write(output);
      output.writeFieldEnd();
    }
    if (this.device_type !== null && this.device_type !== undefined) {
      output.writeFieldBegin('device_type', Thrift.Type.I32, 3);
      output.writeI32(this.device_type);
      output.writeFieldEnd();
    }
    if (this.device_id !== null && this.device_id !== undefined) {
      output.writeFieldBegin('device_id', Thrift.Type.I32, 4);
      output.writeI32(this.device_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_deallocate_df_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_deallocate_df_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_interrupt_args = class {
  constructor(args) {
    this.query_session = null;
    this.interrupt_session = null;
    if (args) {
      if (args.query_session !== undefined && args.query_session !== null) {
        this.query_session = args.query_session;
      }
      if (args.interrupt_session !== undefined && args.interrupt_session !== null) {
        this.interrupt_session = args.interrupt_session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.query_session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.interrupt_session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_interrupt_args');
    if (this.query_session !== null && this.query_session !== undefined) {
      output.writeFieldBegin('query_session', Thrift.Type.STRING, 1);
      output.writeString(this.query_session);
      output.writeFieldEnd();
    }
    if (this.interrupt_session !== null && this.interrupt_session !== undefined) {
      output.writeFieldBegin('interrupt_session', Thrift.Type.STRING, 2);
      output.writeString(this.interrupt_session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_interrupt_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_interrupt_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_sql_validate_args = class {
  constructor(args) {
    this.session = null;
    this.query = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_sql_validate_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 2);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_sql_validate_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TColumnType]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3266 = input.readListBegin();
          const _size265 = _rtmp3266.size || 0;
          for (let _i267 = 0; _i267 < _size265; ++_i267) {
            let elem268 = null;
            elem268 = new ttypes.TColumnType();
            elem268.read(input);
            this.success.push(elem268);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_sql_validate_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter269 in this.success) {
        if (this.success.hasOwnProperty(iter269)) {
          iter269 = this.success[iter269];
          iter269.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_completion_hints_args = class {
  constructor(args) {
    this.session = null;
    this.sql = null;
    this.cursor = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.sql !== undefined && args.sql !== null) {
        this.sql = args.sql;
      }
      if (args.cursor !== undefined && args.cursor !== null) {
        this.cursor = args.cursor;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.sql = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.cursor = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_completion_hints_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.sql !== null && this.sql !== undefined) {
      output.writeFieldBegin('sql', Thrift.Type.STRING, 2);
      output.writeString(this.sql);
      output.writeFieldEnd();
    }
    if (this.cursor !== null && this.cursor !== undefined) {
      output.writeFieldBegin('cursor', Thrift.Type.I32, 3);
      output.writeI32(this.cursor);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_completion_hints_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [completion_hints_ttypes.TCompletionHint]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3271 = input.readListBegin();
          const _size270 = _rtmp3271.size || 0;
          for (let _i272 = 0; _i272 < _size270; ++_i272) {
            let elem273 = null;
            elem273 = new completion_hints_ttypes.TCompletionHint();
            elem273.read(input);
            this.success.push(elem273);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_completion_hints_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter274 in this.success) {
        if (this.success.hasOwnProperty(iter274)) {
          iter274 = this.success[iter274];
          iter274.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_execution_mode_args = class {
  constructor(args) {
    this.session = null;
    this.mode = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.mode !== undefined && args.mode !== null) {
        this.mode = args.mode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.mode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_execution_mode_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.mode !== null && this.mode !== undefined) {
      output.writeFieldBegin('mode', Thrift.Type.I32, 2);
      output.writeI32(this.mode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_execution_mode_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_execution_mode_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_render_vega_args = class {
  constructor(args) {
    this.session = null;
    this.widget_id = null;
    this.vega_json = null;
    this.compression_level = null;
    this.nonce = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.widget_id !== undefined && args.widget_id !== null) {
        this.widget_id = args.widget_id;
      }
      if (args.vega_json !== undefined && args.vega_json !== null) {
        this.vega_json = args.vega_json;
      }
      if (args.compression_level !== undefined && args.compression_level !== null) {
        this.compression_level = args.compression_level;
      }
      if (args.nonce !== undefined && args.nonce !== null) {
        this.nonce = args.nonce;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.widget_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.vega_json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.compression_level = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.nonce = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_render_vega_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.widget_id !== null && this.widget_id !== undefined) {
      output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
      output.writeI64(this.widget_id);
      output.writeFieldEnd();
    }
    if (this.vega_json !== null && this.vega_json !== undefined) {
      output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);
      output.writeString(this.vega_json);
      output.writeFieldEnd();
    }
    if (this.compression_level !== null && this.compression_level !== undefined) {
      output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);
      output.writeI32(this.compression_level);
      output.writeFieldEnd();
    }
    if (this.nonce !== null && this.nonce !== undefined) {
      output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);
      output.writeString(this.nonce);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_render_vega_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TRenderResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TRenderResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_render_vega_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_result_row_for_pixel_args = class {
  constructor(args) {
    this.session = null;
    this.widget_id = null;
    this.pixel = null;
    this.table_col_names = null;
    this.column_format = null;
    this.pixelRadius = null;
    this.nonce = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.widget_id !== undefined && args.widget_id !== null) {
        this.widget_id = args.widget_id;
      }
      if (args.pixel !== undefined && args.pixel !== null) {
        this.pixel = new ttypes.TPixel(args.pixel);
      }
      if (args.table_col_names !== undefined && args.table_col_names !== null) {
        this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);
      }
      if (args.column_format !== undefined && args.column_format !== null) {
        this.column_format = args.column_format;
      }
      if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
        this.pixelRadius = args.pixelRadius;
      }
      if (args.nonce !== undefined && args.nonce !== null) {
        this.nonce = args.nonce;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.widget_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.pixel = new ttypes.TPixel();
          this.pixel.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.MAP) {
          this.table_col_names = {};
          const _rtmp3276 = input.readMapBegin();
          const _size275 = _rtmp3276.size || 0;
          for (let _i277 = 0; _i277 < _size275; ++_i277) {
            let key278 = null;
            let val279 = null;
            key278 = input.readString();
            val279 = [];
            const _rtmp3281 = input.readListBegin();
            const _size280 = _rtmp3281.size || 0;
            for (let _i282 = 0; _i282 < _size280; ++_i282) {
              let elem283 = null;
              elem283 = input.readString();
              val279.push(elem283);
            }
            input.readListEnd();
            this.table_col_names[key278] = val279;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.column_format = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.pixelRadius = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.nonce = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_result_row_for_pixel_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.widget_id !== null && this.widget_id !== undefined) {
      output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
      output.writeI64(this.widget_id);
      output.writeFieldEnd();
    }
    if (this.pixel !== null && this.pixel !== undefined) {
      output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
      this.pixel.write(output);
      output.writeFieldEnd();
    }
    if (this.table_col_names !== null && this.table_col_names !== undefined) {
      output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));
      for (let kiter284 in this.table_col_names) {
        if (this.table_col_names.hasOwnProperty(kiter284)) {
          let viter285 = this.table_col_names[kiter284];
          output.writeString(kiter284);
          output.writeListBegin(Thrift.Type.STRING, viter285.length);
          for (let iter286 in viter285) {
            if (viter285.hasOwnProperty(iter286)) {
              iter286 = viter285[iter286];
              output.writeString(iter286);
            }
          }
          output.writeListEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.column_format !== null && this.column_format !== undefined) {
      output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);
      output.writeBool(this.column_format);
      output.writeFieldEnd();
    }
    if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
      output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);
      output.writeI32(this.pixelRadius);
      output.writeFieldEnd();
    }
    if (this.nonce !== null && this.nonce !== undefined) {
      output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
      output.writeString(this.nonce);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_result_row_for_pixel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TPixelTableRowResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TPixelTableRowResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_result_row_for_pixel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_create_custom_expression_args = class {
  constructor(args) {
    this.session = null;
    this.custom_expression = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.custom_expression !== undefined && args.custom_expression !== null) {
        this.custom_expression = new ttypes.TCustomExpression(args.custom_expression);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.custom_expression = new ttypes.TCustomExpression();
          this.custom_expression.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_create_custom_expression_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.custom_expression !== null && this.custom_expression !== undefined) {
      output.writeFieldBegin('custom_expression', Thrift.Type.STRUCT, 2);
      this.custom_expression.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_create_custom_expression_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_create_custom_expression_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_custom_expressions_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_custom_expressions_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_custom_expressions_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TCustomExpression]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3288 = input.readListBegin();
          const _size287 = _rtmp3288.size || 0;
          for (let _i289 = 0; _i289 < _size287; ++_i289) {
            let elem290 = null;
            elem290 = new ttypes.TCustomExpression();
            elem290.read(input);
            this.success.push(elem290);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_custom_expressions_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter291 in this.success) {
        if (this.success.hasOwnProperty(iter291)) {
          iter291 = this.success[iter291];
          iter291.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_update_custom_expression_args = class {
  constructor(args) {
    this.session = null;
    this.id = null;
    this.expression_json = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.expression_json !== undefined && args.expression_json !== null) {
        this.expression_json = args.expression_json;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.expression_json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_update_custom_expression_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I32, 2);
      output.writeI32(this.id);
      output.writeFieldEnd();
    }
    if (this.expression_json !== null && this.expression_json !== undefined) {
      output.writeFieldBegin('expression_json', Thrift.Type.STRING, 3);
      output.writeString(this.expression_json);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_update_custom_expression_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_update_custom_expression_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_delete_custom_expressions_args = class {
  constructor(args) {
    this.session = null;
    this.custom_expression_ids = null;
    this.do_soft_delete = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.custom_expression_ids !== undefined && args.custom_expression_ids !== null) {
        this.custom_expression_ids = Thrift.copyList(args.custom_expression_ids, [null]);
      }
      if (args.do_soft_delete !== undefined && args.do_soft_delete !== null) {
        this.do_soft_delete = args.do_soft_delete;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.custom_expression_ids = [];
          const _rtmp3293 = input.readListBegin();
          const _size292 = _rtmp3293.size || 0;
          for (let _i294 = 0; _i294 < _size292; ++_i294) {
            let elem295 = null;
            elem295 = input.readI32();
            this.custom_expression_ids.push(elem295);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.do_soft_delete = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_delete_custom_expressions_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.custom_expression_ids !== null && this.custom_expression_ids !== undefined) {
      output.writeFieldBegin('custom_expression_ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I32, this.custom_expression_ids.length);
      for (let iter296 in this.custom_expression_ids) {
        if (this.custom_expression_ids.hasOwnProperty(iter296)) {
          iter296 = this.custom_expression_ids[iter296];
          output.writeI32(iter296);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.do_soft_delete !== null && this.do_soft_delete !== undefined) {
      output.writeFieldBegin('do_soft_delete', Thrift.Type.BOOL, 3);
      output.writeBool(this.do_soft_delete);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_delete_custom_expressions_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_delete_custom_expressions_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_dashboard_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_id = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
        this.dashboard_id = args.dashboard_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.dashboard_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_dashboard_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
      output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
      output.writeI32(this.dashboard_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_dashboard_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TDashboard(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TDashboard();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_dashboard_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_dashboards_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_dashboards_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_dashboards_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TDashboard]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3298 = input.readListBegin();
          const _size297 = _rtmp3298.size || 0;
          for (let _i299 = 0; _i299 < _size297; ++_i299) {
            let elem300 = null;
            elem300 = new ttypes.TDashboard();
            elem300.read(input);
            this.success.push(elem300);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_dashboards_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter301 in this.success) {
        if (this.success.hasOwnProperty(iter301)) {
          iter301 = this.success[iter301];
          iter301.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_create_dashboard_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_name = null;
    this.dashboard_state = null;
    this.image_hash = null;
    this.dashboard_metadata = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
        this.dashboard_name = args.dashboard_name;
      }
      if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
        this.dashboard_state = args.dashboard_state;
      }
      if (args.image_hash !== undefined && args.image_hash !== null) {
        this.image_hash = args.image_hash;
      }
      if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
        this.dashboard_metadata = args.dashboard_metadata;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_state = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.image_hash = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_metadata = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_create_dashboard_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
      output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 2);
      output.writeString(this.dashboard_name);
      output.writeFieldEnd();
    }
    if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
      output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 3);
      output.writeString(this.dashboard_state);
      output.writeFieldEnd();
    }
    if (this.image_hash !== null && this.image_hash !== undefined) {
      output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
      output.writeString(this.image_hash);
      output.writeFieldEnd();
    }
    if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
      output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 5);
      output.writeString(this.dashboard_metadata);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_create_dashboard_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_create_dashboard_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_replace_dashboard_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_id = null;
    this.dashboard_name = null;
    this.dashboard_owner = null;
    this.dashboard_state = null;
    this.image_hash = null;
    this.dashboard_metadata = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
        this.dashboard_id = args.dashboard_id;
      }
      if (args.dashboard_name !== undefined && args.dashboard_name !== null) {
        this.dashboard_name = args.dashboard_name;
      }
      if (args.dashboard_owner !== undefined && args.dashboard_owner !== null) {
        this.dashboard_owner = args.dashboard_owner;
      }
      if (args.dashboard_state !== undefined && args.dashboard_state !== null) {
        this.dashboard_state = args.dashboard_state;
      }
      if (args.image_hash !== undefined && args.image_hash !== null) {
        this.image_hash = args.image_hash;
      }
      if (args.dashboard_metadata !== undefined && args.dashboard_metadata !== null) {
        this.dashboard_metadata = args.dashboard_metadata;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.dashboard_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_owner = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_state = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.image_hash = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.dashboard_metadata = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_replace_dashboard_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
      output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
      output.writeI32(this.dashboard_id);
      output.writeFieldEnd();
    }
    if (this.dashboard_name !== null && this.dashboard_name !== undefined) {
      output.writeFieldBegin('dashboard_name', Thrift.Type.STRING, 3);
      output.writeString(this.dashboard_name);
      output.writeFieldEnd();
    }
    if (this.dashboard_owner !== null && this.dashboard_owner !== undefined) {
      output.writeFieldBegin('dashboard_owner', Thrift.Type.STRING, 4);
      output.writeString(this.dashboard_owner);
      output.writeFieldEnd();
    }
    if (this.dashboard_state !== null && this.dashboard_state !== undefined) {
      output.writeFieldBegin('dashboard_state', Thrift.Type.STRING, 5);
      output.writeString(this.dashboard_state);
      output.writeFieldEnd();
    }
    if (this.image_hash !== null && this.image_hash !== undefined) {
      output.writeFieldBegin('image_hash', Thrift.Type.STRING, 6);
      output.writeString(this.image_hash);
      output.writeFieldEnd();
    }
    if (this.dashboard_metadata !== null && this.dashboard_metadata !== undefined) {
      output.writeFieldBegin('dashboard_metadata', Thrift.Type.STRING, 7);
      output.writeString(this.dashboard_metadata);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_replace_dashboard_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_replace_dashboard_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_delete_dashboard_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_id = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
        this.dashboard_id = args.dashboard_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.dashboard_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_delete_dashboard_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
      output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
      output.writeI32(this.dashboard_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_delete_dashboard_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_delete_dashboard_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_share_dashboards_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_ids = null;
    this.groups = null;
    this.permissions = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
        this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
      }
      if (args.groups !== undefined && args.groups !== null) {
        this.groups = Thrift.copyList(args.groups, [null]);
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = new ttypes.TDashboardPermissions(args.permissions);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.dashboard_ids = [];
          const _rtmp3303 = input.readListBegin();
          const _size302 = _rtmp3303.size || 0;
          for (let _i304 = 0; _i304 < _size302; ++_i304) {
            let elem305 = null;
            elem305 = input.readI32();
            this.dashboard_ids.push(elem305);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.groups = [];
          const _rtmp3307 = input.readListBegin();
          const _size306 = _rtmp3307.size || 0;
          for (let _i308 = 0; _i308 < _size306; ++_i308) {
            let elem309 = null;
            elem309 = input.readString();
            this.groups.push(elem309);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.permissions = new ttypes.TDashboardPermissions();
          this.permissions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_share_dashboards_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
      output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
      for (let iter310 in this.dashboard_ids) {
        if (this.dashboard_ids.hasOwnProperty(iter310)) {
          iter310 = this.dashboard_ids[iter310];
          output.writeI32(iter310);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.groups !== null && this.groups !== undefined) {
      output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.groups.length);
      for (let iter311 in this.groups) {
        if (this.groups.hasOwnProperty(iter311)) {
          iter311 = this.groups[iter311];
          output.writeString(iter311);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 4);
      this.permissions.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_share_dashboards_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_share_dashboards_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_delete_dashboards_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_ids = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
        this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.dashboard_ids = [];
          const _rtmp3313 = input.readListBegin();
          const _size312 = _rtmp3313.size || 0;
          for (let _i314 = 0; _i314 < _size312; ++_i314) {
            let elem315 = null;
            elem315 = input.readI32();
            this.dashboard_ids.push(elem315);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_delete_dashboards_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
      output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
      for (let iter316 in this.dashboard_ids) {
        if (this.dashboard_ids.hasOwnProperty(iter316)) {
          iter316 = this.dashboard_ids[iter316];
          output.writeI32(iter316);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_delete_dashboards_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_delete_dashboards_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_share_dashboard_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_id = null;
    this.groups = null;
    this.objects = null;
    this.permissions = null;
    this.grant_role = false;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
        this.dashboard_id = args.dashboard_id;
      }
      if (args.groups !== undefined && args.groups !== null) {
        this.groups = Thrift.copyList(args.groups, [null]);
      }
      if (args.objects !== undefined && args.objects !== null) {
        this.objects = Thrift.copyList(args.objects, [null]);
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = new ttypes.TDashboardPermissions(args.permissions);
      }
      if (args.grant_role !== undefined && args.grant_role !== null) {
        this.grant_role = args.grant_role;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.dashboard_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.groups = [];
          const _rtmp3318 = input.readListBegin();
          const _size317 = _rtmp3318.size || 0;
          for (let _i319 = 0; _i319 < _size317; ++_i319) {
            let elem320 = null;
            elem320 = input.readString();
            this.groups.push(elem320);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.objects = [];
          const _rtmp3322 = input.readListBegin();
          const _size321 = _rtmp3322.size || 0;
          for (let _i323 = 0; _i323 < _size321; ++_i323) {
            let elem324 = null;
            elem324 = input.readString();
            this.objects.push(elem324);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.permissions = new ttypes.TDashboardPermissions();
          this.permissions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.grant_role = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_share_dashboard_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
      output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
      output.writeI32(this.dashboard_id);
      output.writeFieldEnd();
    }
    if (this.groups !== null && this.groups !== undefined) {
      output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.groups.length);
      for (let iter325 in this.groups) {
        if (this.groups.hasOwnProperty(iter325)) {
          iter325 = this.groups[iter325];
          output.writeString(iter325);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.objects !== null && this.objects !== undefined) {
      output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.objects.length);
      for (let iter326 in this.objects) {
        if (this.objects.hasOwnProperty(iter326)) {
          iter326 = this.objects[iter326];
          output.writeString(iter326);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
      this.permissions.write(output);
      output.writeFieldEnd();
    }
    if (this.grant_role !== null && this.grant_role !== undefined) {
      output.writeFieldBegin('grant_role', Thrift.Type.BOOL, 6);
      output.writeBool(this.grant_role);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_share_dashboard_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_share_dashboard_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_unshare_dashboard_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_id = null;
    this.groups = null;
    this.objects = null;
    this.permissions = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
        this.dashboard_id = args.dashboard_id;
      }
      if (args.groups !== undefined && args.groups !== null) {
        this.groups = Thrift.copyList(args.groups, [null]);
      }
      if (args.objects !== undefined && args.objects !== null) {
        this.objects = Thrift.copyList(args.objects, [null]);
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = new ttypes.TDashboardPermissions(args.permissions);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.dashboard_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.groups = [];
          const _rtmp3328 = input.readListBegin();
          const _size327 = _rtmp3328.size || 0;
          for (let _i329 = 0; _i329 < _size327; ++_i329) {
            let elem330 = null;
            elem330 = input.readString();
            this.groups.push(elem330);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.objects = [];
          const _rtmp3332 = input.readListBegin();
          const _size331 = _rtmp3332.size || 0;
          for (let _i333 = 0; _i333 < _size331; ++_i333) {
            let elem334 = null;
            elem334 = input.readString();
            this.objects.push(elem334);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.permissions = new ttypes.TDashboardPermissions();
          this.permissions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_unshare_dashboard_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
      output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
      output.writeI32(this.dashboard_id);
      output.writeFieldEnd();
    }
    if (this.groups !== null && this.groups !== undefined) {
      output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.groups.length);
      for (let iter335 in this.groups) {
        if (this.groups.hasOwnProperty(iter335)) {
          iter335 = this.groups[iter335];
          output.writeString(iter335);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.objects !== null && this.objects !== undefined) {
      output.writeFieldBegin('objects', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.objects.length);
      for (let iter336 in this.objects) {
        if (this.objects.hasOwnProperty(iter336)) {
          iter336 = this.objects[iter336];
          output.writeString(iter336);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
      this.permissions.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_unshare_dashboard_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_unshare_dashboard_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_unshare_dashboards_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_ids = null;
    this.groups = null;
    this.permissions = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_ids !== undefined && args.dashboard_ids !== null) {
        this.dashboard_ids = Thrift.copyList(args.dashboard_ids, [null]);
      }
      if (args.groups !== undefined && args.groups !== null) {
        this.groups = Thrift.copyList(args.groups, [null]);
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = new ttypes.TDashboardPermissions(args.permissions);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.dashboard_ids = [];
          const _rtmp3338 = input.readListBegin();
          const _size337 = _rtmp3338.size || 0;
          for (let _i339 = 0; _i339 < _size337; ++_i339) {
            let elem340 = null;
            elem340 = input.readI32();
            this.dashboard_ids.push(elem340);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.groups = [];
          const _rtmp3342 = input.readListBegin();
          const _size341 = _rtmp3342.size || 0;
          for (let _i343 = 0; _i343 < _size341; ++_i343) {
            let elem344 = null;
            elem344 = input.readString();
            this.groups.push(elem344);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.permissions = new ttypes.TDashboardPermissions();
          this.permissions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_unshare_dashboards_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_ids !== null && this.dashboard_ids !== undefined) {
      output.writeFieldBegin('dashboard_ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I32, this.dashboard_ids.length);
      for (let iter345 in this.dashboard_ids) {
        if (this.dashboard_ids.hasOwnProperty(iter345)) {
          iter345 = this.dashboard_ids[iter345];
          output.writeI32(iter345);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.groups !== null && this.groups !== undefined) {
      output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.groups.length);
      for (let iter346 in this.groups) {
        if (this.groups.hasOwnProperty(iter346)) {
          iter346 = this.groups[iter346];
          output.writeString(iter346);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 4);
      this.permissions.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_unshare_dashboards_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_unshare_dashboards_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_dashboard_grantees_args = class {
  constructor(args) {
    this.session = null;
    this.dashboard_id = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.dashboard_id !== undefined && args.dashboard_id !== null) {
        this.dashboard_id = args.dashboard_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.dashboard_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_dashboard_grantees_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.dashboard_id !== null && this.dashboard_id !== undefined) {
      output.writeFieldBegin('dashboard_id', Thrift.Type.I32, 2);
      output.writeI32(this.dashboard_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_dashboard_grantees_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TDashboardGrantees]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3348 = input.readListBegin();
          const _size347 = _rtmp3348.size || 0;
          for (let _i349 = 0; _i349 < _size347; ++_i349) {
            let elem350 = null;
            elem350 = new ttypes.TDashboardGrantees();
            elem350.read(input);
            this.success.push(elem350);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_dashboard_grantees_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter351 in this.success) {
        if (this.success.hasOwnProperty(iter351)) {
          iter351 = this.success[iter351];
          iter351.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_link_view_args = class {
  constructor(args) {
    this.session = null;
    this.link = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.link !== undefined && args.link !== null) {
        this.link = args.link;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.link = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_link_view_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.link !== null && this.link !== undefined) {
      output.writeFieldBegin('link', Thrift.Type.STRING, 2);
      output.writeString(this.link);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_link_view_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TFrontendView(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TFrontendView();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_link_view_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_create_link_args = class {
  constructor(args) {
    this.session = null;
    this.view_state = null;
    this.view_metadata = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.view_state !== undefined && args.view_state !== null) {
        this.view_state = args.view_state;
      }
      if (args.view_metadata !== undefined && args.view_metadata !== null) {
        this.view_metadata = args.view_metadata;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.view_state = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.view_metadata = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_create_link_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.view_state !== null && this.view_state !== undefined) {
      output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
      output.writeString(this.view_state);
      output.writeFieldEnd();
    }
    if (this.view_metadata !== null && this.view_metadata !== undefined) {
      output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);
      output.writeString(this.view_metadata);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_create_link_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_create_link_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_load_table_binary_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.rows = null;
    this.column_names = [];
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.rows !== undefined && args.rows !== null) {
        this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
      }
      if (args.column_names !== undefined && args.column_names !== null) {
        this.column_names = Thrift.copyList(args.column_names, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.rows = [];
          const _rtmp3353 = input.readListBegin();
          const _size352 = _rtmp3353.size || 0;
          for (let _i354 = 0; _i354 < _size352; ++_i354) {
            let elem355 = null;
            elem355 = new ttypes.TRow();
            elem355.read(input);
            this.rows.push(elem355);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.column_names = [];
          const _rtmp3357 = input.readListBegin();
          const _size356 = _rtmp3357.size || 0;
          for (let _i358 = 0; _i358 < _size356; ++_i358) {
            let elem359 = null;
            elem359 = input.readString();
            this.column_names.push(elem359);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_load_table_binary_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.rows !== null && this.rows !== undefined) {
      output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
      for (let iter360 in this.rows) {
        if (this.rows.hasOwnProperty(iter360)) {
          iter360 = this.rows[iter360];
          iter360.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.column_names !== null && this.column_names !== undefined) {
      output.writeFieldBegin('column_names', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
      for (let iter361 in this.column_names) {
        if (this.column_names.hasOwnProperty(iter361)) {
          iter361 = this.column_names[iter361];
          output.writeString(iter361);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_load_table_binary_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_load_table_binary_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_load_table_binary_columnar_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.cols = null;
    this.column_names = [];
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.cols !== undefined && args.cols !== null) {
        this.cols = Thrift.copyList(args.cols, [ttypes.TColumn]);
      }
      if (args.column_names !== undefined && args.column_names !== null) {
        this.column_names = Thrift.copyList(args.column_names, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.cols = [];
          const _rtmp3363 = input.readListBegin();
          const _size362 = _rtmp3363.size || 0;
          for (let _i364 = 0; _i364 < _size362; ++_i364) {
            let elem365 = null;
            elem365 = new ttypes.TColumn();
            elem365.read(input);
            this.cols.push(elem365);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.column_names = [];
          const _rtmp3367 = input.readListBegin();
          const _size366 = _rtmp3367.size || 0;
          for (let _i368 = 0; _i368 < _size366; ++_i368) {
            let elem369 = null;
            elem369 = input.readString();
            this.column_names.push(elem369);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_load_table_binary_columnar_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.cols !== null && this.cols !== undefined) {
      output.writeFieldBegin('cols', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
      for (let iter370 in this.cols) {
        if (this.cols.hasOwnProperty(iter370)) {
          iter370 = this.cols[iter370];
          iter370.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.column_names !== null && this.column_names !== undefined) {
      output.writeFieldBegin('column_names', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
      for (let iter371 in this.column_names) {
        if (this.column_names.hasOwnProperty(iter371)) {
          iter371 = this.column_names[iter371];
          output.writeString(iter371);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_load_table_binary_columnar_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_load_table_binary_columnar_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_load_table_binary_arrow_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.arrow_stream = null;
    this.use_column_names = false;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.arrow_stream !== undefined && args.arrow_stream !== null) {
        this.arrow_stream = args.arrow_stream;
      }
      if (args.use_column_names !== undefined && args.use_column_names !== null) {
        this.use_column_names = args.use_column_names;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.arrow_stream = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.use_column_names = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_load_table_binary_arrow_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.arrow_stream !== null && this.arrow_stream !== undefined) {
      output.writeFieldBegin('arrow_stream', Thrift.Type.STRING, 3);
      output.writeBinary(this.arrow_stream);
      output.writeFieldEnd();
    }
    if (this.use_column_names !== null && this.use_column_names !== undefined) {
      output.writeFieldBegin('use_column_names', Thrift.Type.BOOL, 4);
      output.writeBool(this.use_column_names);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_load_table_binary_arrow_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_load_table_binary_arrow_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_load_table_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.rows = null;
    this.column_names = [];
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.rows !== undefined && args.rows !== null) {
        this.rows = Thrift.copyList(args.rows, [ttypes.TStringRow]);
      }
      if (args.column_names !== undefined && args.column_names !== null) {
        this.column_names = Thrift.copyList(args.column_names, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.rows = [];
          const _rtmp3373 = input.readListBegin();
          const _size372 = _rtmp3373.size || 0;
          for (let _i374 = 0; _i374 < _size372; ++_i374) {
            let elem375 = null;
            elem375 = new ttypes.TStringRow();
            elem375.read(input);
            this.rows.push(elem375);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.column_names = [];
          const _rtmp3377 = input.readListBegin();
          const _size376 = _rtmp3377.size || 0;
          for (let _i378 = 0; _i378 < _size376; ++_i378) {
            let elem379 = null;
            elem379 = input.readString();
            this.column_names.push(elem379);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_load_table_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.rows !== null && this.rows !== undefined) {
      output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
      for (let iter380 in this.rows) {
        if (this.rows.hasOwnProperty(iter380)) {
          iter380 = this.rows[iter380];
          iter380.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.column_names !== null && this.column_names !== undefined) {
      output.writeFieldBegin('column_names', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
      for (let iter381 in this.column_names) {
        if (this.column_names.hasOwnProperty(iter381)) {
          iter381 = this.column_names[iter381];
          output.writeString(iter381);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_load_table_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_load_table_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_detect_column_types_args = class {
  constructor(args) {
    this.session = null;
    this.file_name = null;
    this.copy_params = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.file_name !== undefined && args.file_name !== null) {
        this.file_name = args.file_name;
      }
      if (args.copy_params !== undefined && args.copy_params !== null) {
        this.copy_params = new ttypes.TCopyParams(args.copy_params);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.file_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.copy_params = new ttypes.TCopyParams();
          this.copy_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_detect_column_types_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.file_name !== null && this.file_name !== undefined) {
      output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
      output.writeString(this.file_name);
      output.writeFieldEnd();
    }
    if (this.copy_params !== null && this.copy_params !== undefined) {
      output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
      this.copy_params.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_detect_column_types_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TDetectResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TDetectResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_detect_column_types_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_create_table_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.row_desc = null;
    this.create_params = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.row_desc !== undefined && args.row_desc !== null) {
        this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
      }
      if (args.create_params !== undefined && args.create_params !== null) {
        this.create_params = new ttypes.TCreateParams(args.create_params);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.row_desc = [];
          const _rtmp3383 = input.readListBegin();
          const _size382 = _rtmp3383.size || 0;
          for (let _i384 = 0; _i384 < _size382; ++_i384) {
            let elem385 = null;
            elem385 = new ttypes.TColumnType();
            elem385.read(input);
            this.row_desc.push(elem385);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.create_params = new ttypes.TCreateParams();
          this.create_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_create_table_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.row_desc !== null && this.row_desc !== undefined) {
      output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
      for (let iter386 in this.row_desc) {
        if (this.row_desc.hasOwnProperty(iter386)) {
          iter386 = this.row_desc[iter386];
          iter386.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.create_params !== null && this.create_params !== undefined) {
      output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 4);
      this.create_params.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_create_table_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_create_table_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_import_table_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.file_name = null;
    this.copy_params = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.file_name !== undefined && args.file_name !== null) {
        this.file_name = args.file_name;
      }
      if (args.copy_params !== undefined && args.copy_params !== null) {
        this.copy_params = new ttypes.TCopyParams(args.copy_params);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.file_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.copy_params = new ttypes.TCopyParams();
          this.copy_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_import_table_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.file_name !== null && this.file_name !== undefined) {
      output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
      output.writeString(this.file_name);
      output.writeFieldEnd();
    }
    if (this.copy_params !== null && this.copy_params !== undefined) {
      output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
      this.copy_params.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_import_table_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_import_table_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_import_geo_table_args = class {
  constructor(args) {
    this.session = null;
    this.table_name = null;
    this.file_name = null;
    this.copy_params = null;
    this.row_desc = null;
    this.create_params = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_name !== undefined && args.table_name !== null) {
        this.table_name = args.table_name;
      }
      if (args.file_name !== undefined && args.file_name !== null) {
        this.file_name = args.file_name;
      }
      if (args.copy_params !== undefined && args.copy_params !== null) {
        this.copy_params = new ttypes.TCopyParams(args.copy_params);
      }
      if (args.row_desc !== undefined && args.row_desc !== null) {
        this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
      }
      if (args.create_params !== undefined && args.create_params !== null) {
        this.create_params = new ttypes.TCreateParams(args.create_params);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.file_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.copy_params = new ttypes.TCopyParams();
          this.copy_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.row_desc = [];
          const _rtmp3388 = input.readListBegin();
          const _size387 = _rtmp3388.size || 0;
          for (let _i389 = 0; _i389 < _size387; ++_i389) {
            let elem390 = null;
            elem390 = new ttypes.TColumnType();
            elem390.read(input);
            this.row_desc.push(elem390);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.create_params = new ttypes.TCreateParams();
          this.create_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_import_geo_table_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_name !== null && this.table_name !== undefined) {
      output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
      output.writeString(this.table_name);
      output.writeFieldEnd();
    }
    if (this.file_name !== null && this.file_name !== undefined) {
      output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
      output.writeString(this.file_name);
      output.writeFieldEnd();
    }
    if (this.copy_params !== null && this.copy_params !== undefined) {
      output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
      this.copy_params.write(output);
      output.writeFieldEnd();
    }
    if (this.row_desc !== null && this.row_desc !== undefined) {
      output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
      for (let iter391 in this.row_desc) {
        if (this.row_desc.hasOwnProperty(iter391)) {
          iter391 = this.row_desc[iter391];
          iter391.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.create_params !== null && this.create_params !== undefined) {
      output.writeFieldBegin('create_params', Thrift.Type.STRUCT, 6);
      this.create_params.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_import_geo_table_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_import_geo_table_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_import_table_status_args = class {
  constructor(args) {
    this.session = null;
    this.import_id = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.import_id !== undefined && args.import_id !== null) {
        this.import_id = args.import_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.import_id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_import_table_status_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.import_id !== null && this.import_id !== undefined) {
      output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);
      output.writeString(this.import_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_import_table_status_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TImportStatus(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TImportStatus();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_import_table_status_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_first_geo_file_in_archive_args = class {
  constructor(args) {
    this.session = null;
    this.archive_path = null;
    this.copy_params = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.archive_path !== undefined && args.archive_path !== null) {
        this.archive_path = args.archive_path;
      }
      if (args.copy_params !== undefined && args.copy_params !== null) {
        this.copy_params = new ttypes.TCopyParams(args.copy_params);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.archive_path = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.copy_params = new ttypes.TCopyParams();
          this.copy_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_first_geo_file_in_archive_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.archive_path !== null && this.archive_path !== undefined) {
      output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);
      output.writeString(this.archive_path);
      output.writeFieldEnd();
    }
    if (this.copy_params !== null && this.copy_params !== undefined) {
      output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
      this.copy_params.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_first_geo_file_in_archive_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_first_geo_file_in_archive_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_all_files_in_archive_args = class {
  constructor(args) {
    this.session = null;
    this.archive_path = null;
    this.copy_params = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.archive_path !== undefined && args.archive_path !== null) {
        this.archive_path = args.archive_path;
      }
      if (args.copy_params !== undefined && args.copy_params !== null) {
        this.copy_params = new ttypes.TCopyParams(args.copy_params);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.archive_path = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.copy_params = new ttypes.TCopyParams();
          this.copy_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_all_files_in_archive_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.archive_path !== null && this.archive_path !== undefined) {
      output.writeFieldBegin('archive_path', Thrift.Type.STRING, 2);
      output.writeString(this.archive_path);
      output.writeFieldEnd();
    }
    if (this.copy_params !== null && this.copy_params !== undefined) {
      output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
      this.copy_params.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_all_files_in_archive_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3393 = input.readListBegin();
          const _size392 = _rtmp3393.size || 0;
          for (let _i394 = 0; _i394 < _size392; ++_i394) {
            let elem395 = null;
            elem395 = input.readString();
            this.success.push(elem395);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_all_files_in_archive_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter396 in this.success) {
        if (this.success.hasOwnProperty(iter396)) {
          iter396 = this.success[iter396];
          output.writeString(iter396);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_layers_in_geo_file_args = class {
  constructor(args) {
    this.session = null;
    this.file_name = null;
    this.copy_params = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.file_name !== undefined && args.file_name !== null) {
        this.file_name = args.file_name;
      }
      if (args.copy_params !== undefined && args.copy_params !== null) {
        this.copy_params = new ttypes.TCopyParams(args.copy_params);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.file_name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.copy_params = new ttypes.TCopyParams();
          this.copy_params.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_layers_in_geo_file_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.file_name !== null && this.file_name !== undefined) {
      output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
      output.writeString(this.file_name);
      output.writeFieldEnd();
    }
    if (this.copy_params !== null && this.copy_params !== undefined) {
      output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
      this.copy_params.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_layers_in_geo_file_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TGeoFileLayerInfo]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3398 = input.readListBegin();
          const _size397 = _rtmp3398.size || 0;
          for (let _i399 = 0; _i399 < _size397; ++_i399) {
            let elem400 = null;
            elem400 = new ttypes.TGeoFileLayerInfo();
            elem400.read(input);
            this.success.push(elem400);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_layers_in_geo_file_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter401 in this.success) {
        if (this.success.hasOwnProperty(iter401)) {
          iter401 = this.success[iter401];
          iter401.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_query_get_outer_fragment_count_args = class {
  constructor(args) {
    this.session = null;
    this.query = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_query_get_outer_fragment_count_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 2);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_query_get_outer_fragment_count_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_query_get_outer_fragment_count_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_check_table_consistency_args = class {
  constructor(args) {
    this.session = null;
    this.table_id = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_check_table_consistency_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_check_table_consistency_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TTableMeta(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TTableMeta();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_check_table_consistency_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_start_query_args = class {
  constructor(args) {
    this.leaf_session = null;
    this.parent_session = null;
    this.query_ra = null;
    this.start_time_str = null;
    this.just_explain = null;
    this.outer_fragment_indices = null;
    if (args) {
      if (args.leaf_session !== undefined && args.leaf_session !== null) {
        this.leaf_session = args.leaf_session;
      }
      if (args.parent_session !== undefined && args.parent_session !== null) {
        this.parent_session = args.parent_session;
      }
      if (args.query_ra !== undefined && args.query_ra !== null) {
        this.query_ra = args.query_ra;
      }
      if (args.start_time_str !== undefined && args.start_time_str !== null) {
        this.start_time_str = args.start_time_str;
      }
      if (args.just_explain !== undefined && args.just_explain !== null) {
        this.just_explain = args.just_explain;
      }
      if (args.outer_fragment_indices !== undefined && args.outer_fragment_indices !== null) {
        this.outer_fragment_indices = Thrift.copyList(args.outer_fragment_indices, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.leaf_session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.parent_session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.query_ra = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.start_time_str = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.just_explain = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.outer_fragment_indices = [];
          const _rtmp3403 = input.readListBegin();
          const _size402 = _rtmp3403.size || 0;
          for (let _i404 = 0; _i404 < _size402; ++_i404) {
            let elem405 = null;
            elem405 = input.readI64();
            this.outer_fragment_indices.push(elem405);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_start_query_args');
    if (this.leaf_session !== null && this.leaf_session !== undefined) {
      output.writeFieldBegin('leaf_session', Thrift.Type.STRING, 1);
      output.writeString(this.leaf_session);
      output.writeFieldEnd();
    }
    if (this.parent_session !== null && this.parent_session !== undefined) {
      output.writeFieldBegin('parent_session', Thrift.Type.STRING, 2);
      output.writeString(this.parent_session);
      output.writeFieldEnd();
    }
    if (this.query_ra !== null && this.query_ra !== undefined) {
      output.writeFieldBegin('query_ra', Thrift.Type.STRING, 3);
      output.writeString(this.query_ra);
      output.writeFieldEnd();
    }
    if (this.start_time_str !== null && this.start_time_str !== undefined) {
      output.writeFieldBegin('start_time_str', Thrift.Type.STRING, 4);
      output.writeString(this.start_time_str);
      output.writeFieldEnd();
    }
    if (this.just_explain !== null && this.just_explain !== undefined) {
      output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 5);
      output.writeBool(this.just_explain);
      output.writeFieldEnd();
    }
    if (this.outer_fragment_indices !== null && this.outer_fragment_indices !== undefined) {
      output.writeFieldBegin('outer_fragment_indices', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.I64, this.outer_fragment_indices.length);
      for (let iter406 in this.outer_fragment_indices) {
        if (this.outer_fragment_indices.hasOwnProperty(iter406)) {
          iter406 = this.outer_fragment_indices[iter406];
          output.writeI64(iter406);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_start_query_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TPendingQuery(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TPendingQuery();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_start_query_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_execute_query_step_args = class {
  constructor(args) {
    this.pending_query = null;
    this.subquery_id = null;
    this.start_time_str = null;
    if (args) {
      if (args.pending_query !== undefined && args.pending_query !== null) {
        this.pending_query = new ttypes.TPendingQuery(args.pending_query);
      }
      if (args.subquery_id !== undefined && args.subquery_id !== null) {
        this.subquery_id = args.subquery_id;
      }
      if (args.start_time_str !== undefined && args.start_time_str !== null) {
        this.start_time_str = args.start_time_str;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.pending_query = new ttypes.TPendingQuery();
          this.pending_query.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.subquery_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start_time_str = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_execute_query_step_args');
    if (this.pending_query !== null && this.pending_query !== undefined) {
      output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);
      this.pending_query.write(output);
      output.writeFieldEnd();
    }
    if (this.subquery_id !== null && this.subquery_id !== undefined) {
      output.writeFieldBegin('subquery_id', Thrift.Type.I64, 2);
      output.writeI64(this.subquery_id);
      output.writeFieldEnd();
    }
    if (this.start_time_str !== null && this.start_time_str !== undefined) {
      output.writeFieldBegin('start_time_str', Thrift.Type.STRING, 3);
      output.writeString(this.start_time_str);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_execute_query_step_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TStepResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TStepResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_execute_query_step_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_broadcast_serialized_rows_args = class {
  constructor(args) {
    this.serialized_rows = null;
    this.row_desc = null;
    this.query_id = null;
    this.subquery_id = null;
    this.is_final_subquery_result = null;
    if (args) {
      if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
        this.serialized_rows = new serialized_result_set_ttypes.TSerializedRows(args.serialized_rows);
      }
      if (args.row_desc !== undefined && args.row_desc !== null) {
        this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
      }
      if (args.query_id !== undefined && args.query_id !== null) {
        this.query_id = args.query_id;
      }
      if (args.subquery_id !== undefined && args.subquery_id !== null) {
        this.subquery_id = args.subquery_id;
      }
      if (args.is_final_subquery_result !== undefined && args.is_final_subquery_result !== null) {
        this.is_final_subquery_result = args.is_final_subquery_result;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.serialized_rows = new serialized_result_set_ttypes.TSerializedRows();
          this.serialized_rows.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.row_desc = [];
          const _rtmp3408 = input.readListBegin();
          const _size407 = _rtmp3408.size || 0;
          for (let _i409 = 0; _i409 < _size407; ++_i409) {
            let elem410 = null;
            elem410 = new ttypes.TColumnType();
            elem410.read(input);
            this.row_desc.push(elem410);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.query_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.subquery_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.is_final_subquery_result = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_broadcast_serialized_rows_args');
    if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
      output.writeFieldBegin('serialized_rows', Thrift.Type.STRUCT, 1);
      this.serialized_rows.write(output);
      output.writeFieldEnd();
    }
    if (this.row_desc !== null && this.row_desc !== undefined) {
      output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
      for (let iter411 in this.row_desc) {
        if (this.row_desc.hasOwnProperty(iter411)) {
          iter411 = this.row_desc[iter411];
          iter411.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.query_id !== null && this.query_id !== undefined) {
      output.writeFieldBegin('query_id', Thrift.Type.I64, 3);
      output.writeI64(this.query_id);
      output.writeFieldEnd();
    }
    if (this.subquery_id !== null && this.subquery_id !== undefined) {
      output.writeFieldBegin('subquery_id', Thrift.Type.I64, 4);
      output.writeI64(this.subquery_id);
      output.writeFieldEnd();
    }
    if (this.is_final_subquery_result !== null && this.is_final_subquery_result !== undefined) {
      output.writeFieldBegin('is_final_subquery_result', Thrift.Type.BOOL, 5);
      output.writeBool(this.is_final_subquery_result);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_broadcast_serialized_rows_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_broadcast_serialized_rows_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_start_render_query_args = class {
  constructor(args) {
    this.session = null;
    this.widget_id = null;
    this.node_idx = null;
    this.vega_json = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.widget_id !== undefined && args.widget_id !== null) {
        this.widget_id = args.widget_id;
      }
      if (args.node_idx !== undefined && args.node_idx !== null) {
        this.node_idx = args.node_idx;
      }
      if (args.vega_json !== undefined && args.vega_json !== null) {
        this.vega_json = args.vega_json;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.widget_id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I16) {
          this.node_idx = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.vega_json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_start_render_query_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.widget_id !== null && this.widget_id !== undefined) {
      output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
      output.writeI64(this.widget_id);
      output.writeFieldEnd();
    }
    if (this.node_idx !== null && this.node_idx !== undefined) {
      output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);
      output.writeI16(this.node_idx);
      output.writeFieldEnd();
    }
    if (this.vega_json !== null && this.vega_json !== undefined) {
      output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);
      output.writeString(this.vega_json);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_start_render_query_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TPendingRenderQuery(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TPendingRenderQuery();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_start_render_query_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_execute_next_render_step_args = class {
  constructor(args) {
    this.pending_render = null;
    this.merged_data = null;
    if (args) {
      if (args.pending_render !== undefined && args.pending_render !== null) {
        this.pending_render = new ttypes.TPendingRenderQuery(args.pending_render);
      }
      if (args.merged_data !== undefined && args.merged_data !== null) {
        this.merged_data = Thrift.copyMap(args.merged_data, [Thrift.copyMap, Thrift.copyMap, Thrift.copyMap, Thrift.copyList, ttypes.TRenderDatum]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.pending_render = new ttypes.TPendingRenderQuery();
          this.pending_render.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.merged_data = {};
          const _rtmp3413 = input.readMapBegin();
          const _size412 = _rtmp3413.size || 0;
          for (let _i414 = 0; _i414 < _size412; ++_i414) {
            let key415 = null;
            let val416 = null;
            key415 = input.readString();
            val416 = {};
            const _rtmp3418 = input.readMapBegin();
            const _size417 = _rtmp3418.size || 0;
            for (let _i419 = 0; _i419 < _size417; ++_i419) {
              let key420 = null;
              let val421 = null;
              key420 = input.readString();
              val421 = {};
              const _rtmp3423 = input.readMapBegin();
              const _size422 = _rtmp3423.size || 0;
              for (let _i424 = 0; _i424 < _size422; ++_i424) {
                let key425 = null;
                let val426 = null;
                key425 = input.readString();
                val426 = {};
                const _rtmp3428 = input.readMapBegin();
                const _size427 = _rtmp3428.size || 0;
                for (let _i429 = 0; _i429 < _size427; ++_i429) {
                  let key430 = null;
                  let val431 = null;
                  key430 = input.readString();
                  val431 = [];
                  const _rtmp3433 = input.readListBegin();
                  const _size432 = _rtmp3433.size || 0;
                  for (let _i434 = 0; _i434 < _size432; ++_i434) {
                    let elem435 = null;
                    elem435 = new ttypes.TRenderDatum();
                    elem435.read(input);
                    val431.push(elem435);
                  }
                  input.readListEnd();
                  val426[key430] = val431;
                }
                input.readMapEnd();
                val421[key425] = val426;
              }
              input.readMapEnd();
              val416[key420] = val421;
            }
            input.readMapEnd();
            this.merged_data[key415] = val416;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_execute_next_render_step_args');
    if (this.pending_render !== null && this.pending_render !== undefined) {
      output.writeFieldBegin('pending_render', Thrift.Type.STRUCT, 1);
      this.pending_render.write(output);
      output.writeFieldEnd();
    }
    if (this.merged_data !== null && this.merged_data !== undefined) {
      output.writeFieldBegin('merged_data', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.merged_data));
      for (let kiter436 in this.merged_data) {
        if (this.merged_data.hasOwnProperty(kiter436)) {
          let viter437 = this.merged_data[kiter436];
          output.writeString(kiter436);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter437));
          for (let kiter438 in viter437) {
            if (viter437.hasOwnProperty(kiter438)) {
              let viter439 = viter437[kiter438];
              output.writeString(kiter438);
              output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter439));
              for (let kiter440 in viter439) {
                if (viter439.hasOwnProperty(kiter440)) {
                  let viter441 = viter439[kiter440];
                  output.writeString(kiter440);
                  output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter441));
                  for (let kiter442 in viter441) {
                    if (viter441.hasOwnProperty(kiter442)) {
                      let viter443 = viter441[kiter442];
                      output.writeString(kiter442);
                      output.writeListBegin(Thrift.Type.STRUCT, viter443.length);
                      for (let iter444 in viter443) {
                        if (viter443.hasOwnProperty(iter444)) {
                          iter444 = viter443[iter444];
                          iter444.write(output);
                        }
                      }
                      output.writeListEnd();
                    }
                  }
                  output.writeMapEnd();
                }
              }
              output.writeMapEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_execute_next_render_step_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TRenderStepResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TRenderStepResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_execute_next_render_step_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_insert_data_args = class {
  constructor(args) {
    this.session = null;
    this.insert_data = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.insert_data !== undefined && args.insert_data !== null) {
        this.insert_data = new ttypes.TInsertData(args.insert_data);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.insert_data = new ttypes.TInsertData();
          this.insert_data.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_insert_data_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.insert_data !== null && this.insert_data !== undefined) {
      output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);
      this.insert_data.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_insert_data_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_insert_data_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_insert_chunks_args = class {
  constructor(args) {
    this.session = null;
    this.insert_chunks = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.insert_chunks !== undefined && args.insert_chunks !== null) {
        this.insert_chunks = new ttypes.TInsertChunks(args.insert_chunks);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.insert_chunks = new ttypes.TInsertChunks();
          this.insert_chunks.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_insert_chunks_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.insert_chunks !== null && this.insert_chunks !== undefined) {
      output.writeFieldBegin('insert_chunks', Thrift.Type.STRUCT, 2);
      this.insert_chunks.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_insert_chunks_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_insert_chunks_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_checkpoint_args = class {
  constructor(args) {
    this.session = null;
    this.table_id = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.table_id !== undefined && args.table_id !== null) {
        this.table_id = args.table_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.table_id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_checkpoint_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.table_id !== null && this.table_id !== undefined) {
      output.writeFieldBegin('table_id', Thrift.Type.I32, 2);
      output.writeI32(this.table_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_checkpoint_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_checkpoint_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_roles_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_roles_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_roles_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3446 = input.readListBegin();
          const _size445 = _rtmp3446.size || 0;
          for (let _i447 = 0; _i447 < _size445; ++_i447) {
            let elem448 = null;
            elem448 = input.readString();
            this.success.push(elem448);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_roles_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter449 in this.success) {
        if (this.success.hasOwnProperty(iter449)) {
          iter449 = this.success[iter449];
          output.writeString(iter449);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_db_objects_for_grantee_args = class {
  constructor(args) {
    this.session = null;
    this.roleName = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.roleName !== undefined && args.roleName !== null) {
        this.roleName = args.roleName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.roleName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_db_objects_for_grantee_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.roleName !== null && this.roleName !== undefined) {
      output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
      output.writeString(this.roleName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_db_objects_for_grantee_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TDBObject]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3451 = input.readListBegin();
          const _size450 = _rtmp3451.size || 0;
          for (let _i452 = 0; _i452 < _size450; ++_i452) {
            let elem453 = null;
            elem453 = new ttypes.TDBObject();
            elem453.read(input);
            this.success.push(elem453);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_db_objects_for_grantee_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter454 in this.success) {
        if (this.success.hasOwnProperty(iter454)) {
          iter454 = this.success[iter454];
          iter454.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_db_object_privs_args = class {
  constructor(args) {
    this.session = null;
    this.objectName = null;
    this.type = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.objectName !== undefined && args.objectName !== null) {
        this.objectName = args.objectName;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.objectName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_db_object_privs_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.objectName !== null && this.objectName !== undefined) {
      output.writeFieldBegin('objectName', Thrift.Type.STRING, 2);
      output.writeString(this.objectName);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 3);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_db_object_privs_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.TDBObject]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3456 = input.readListBegin();
          const _size455 = _rtmp3456.size || 0;
          for (let _i457 = 0; _i457 < _size455; ++_i457) {
            let elem458 = null;
            elem458 = new ttypes.TDBObject();
            elem458.read(input);
            this.success.push(elem458);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_db_object_privs_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter459 in this.success) {
        if (this.success.hasOwnProperty(iter459)) {
          iter459 = this.success[iter459];
          iter459.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_all_roles_for_user_args = class {
  constructor(args) {
    this.session = null;
    this.userName = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.userName !== undefined && args.userName !== null) {
        this.userName = args.userName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_all_roles_for_user_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.userName !== null && this.userName !== undefined) {
      output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
      output.writeString(this.userName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_all_roles_for_user_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3461 = input.readListBegin();
          const _size460 = _rtmp3461.size || 0;
          for (let _i462 = 0; _i462 < _size460; ++_i462) {
            let elem463 = null;
            elem463 = input.readString();
            this.success.push(elem463);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_all_roles_for_user_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter464 in this.success) {
        if (this.success.hasOwnProperty(iter464)) {
          iter464 = this.success[iter464];
          output.writeString(iter464);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_all_effective_roles_for_user_args = class {
  constructor(args) {
    this.session = null;
    this.userName = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.userName !== undefined && args.userName !== null) {
        this.userName = args.userName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_all_effective_roles_for_user_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.userName !== null && this.userName !== undefined) {
      output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
      output.writeString(this.userName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_all_effective_roles_for_user_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3466 = input.readListBegin();
          const _size465 = _rtmp3466.size || 0;
          for (let _i467 = 0; _i467 < _size465; ++_i467) {
            let elem468 = null;
            elem468 = input.readString();
            this.success.push(elem468);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_all_effective_roles_for_user_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter469 in this.success) {
        if (this.success.hasOwnProperty(iter469)) {
          iter469 = this.success[iter469];
          output.writeString(iter469);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_has_role_args = class {
  constructor(args) {
    this.session = null;
    this.granteeName = null;
    this.roleName = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.granteeName !== undefined && args.granteeName !== null) {
        this.granteeName = args.granteeName;
      }
      if (args.roleName !== undefined && args.roleName !== null) {
        this.roleName = args.roleName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.granteeName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.roleName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_has_role_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.granteeName !== null && this.granteeName !== undefined) {
      output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);
      output.writeString(this.granteeName);
      output.writeFieldEnd();
    }
    if (this.roleName !== null && this.roleName !== undefined) {
      output.writeFieldBegin('roleName', Thrift.Type.STRING, 3);
      output.writeString(this.roleName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_has_role_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_has_role_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_has_object_privilege_args = class {
  constructor(args) {
    this.session = null;
    this.granteeName = null;
    this.ObjectName = null;
    this.objectType = null;
    this.permissions = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.granteeName !== undefined && args.granteeName !== null) {
        this.granteeName = args.granteeName;
      }
      if (args.ObjectName !== undefined && args.ObjectName !== null) {
        this.ObjectName = args.ObjectName;
      }
      if (args.objectType !== undefined && args.objectType !== null) {
        this.objectType = args.objectType;
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = new ttypes.TDBObjectPermissions(args.permissions);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.granteeName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.ObjectName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.objectType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.permissions = new ttypes.TDBObjectPermissions();
          this.permissions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_has_object_privilege_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.granteeName !== null && this.granteeName !== undefined) {
      output.writeFieldBegin('granteeName', Thrift.Type.STRING, 2);
      output.writeString(this.granteeName);
      output.writeFieldEnd();
    }
    if (this.ObjectName !== null && this.ObjectName !== undefined) {
      output.writeFieldBegin('ObjectName', Thrift.Type.STRING, 3);
      output.writeString(this.ObjectName);
      output.writeFieldEnd();
    }
    if (this.objectType !== null && this.objectType !== undefined) {
      output.writeFieldBegin('objectType', Thrift.Type.I32, 4);
      output.writeI32(this.objectType);
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 5);
      this.permissions.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_has_object_privilege_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_has_object_privilege_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_license_key_args = class {
  constructor(args) {
    this.session = null;
    this.key = null;
    this.nonce = '';
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.nonce !== undefined && args.nonce !== null) {
        this.nonce = args.nonce;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.nonce = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_license_key_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 2);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.nonce !== null && this.nonce !== undefined) {
      output.writeFieldBegin('nonce', Thrift.Type.STRING, 3);
      output.writeString(this.nonce);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_set_license_key_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TLicenseInfo(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TLicenseInfo();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_set_license_key_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_license_claims_args = class {
  constructor(args) {
    this.session = null;
    this.nonce = '';
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.nonce !== undefined && args.nonce !== null) {
        this.nonce = args.nonce;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.nonce = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_license_claims_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.nonce !== null && this.nonce !== undefined) {
      output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
      output.writeString(this.nonce);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_license_claims_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.TLicenseInfo(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TLicenseInfo();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_license_claims_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_device_parameters_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_device_parameters_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_device_parameters_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3471 = input.readMapBegin();
          const _size470 = _rtmp3471.size || 0;
          for (let _i472 = 0; _i472 < _size470; ++_i472) {
            let key473 = null;
            let val474 = null;
            key473 = input.readString();
            val474 = input.readString();
            this.success[key473] = val474;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_device_parameters_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter475 in this.success) {
        if (this.success.hasOwnProperty(kiter475)) {
          let viter476 = this.success[kiter475];
          output.writeString(kiter475);
          output.writeString(viter476);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_register_runtime_extension_functions_args = class {
  constructor(args) {
    this.session = null;
    this.udfs = null;
    this.udtfs = null;
    this.device_ir_map = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.udfs !== undefined && args.udfs !== null) {
        this.udfs = Thrift.copyList(args.udfs, [extension_functions_ttypes.TUserDefinedFunction]);
      }
      if (args.udtfs !== undefined && args.udtfs !== null) {
        this.udtfs = Thrift.copyList(args.udtfs, [extension_functions_ttypes.TUserDefinedTableFunction]);
      }
      if (args.device_ir_map !== undefined && args.device_ir_map !== null) {
        this.device_ir_map = Thrift.copyMap(args.device_ir_map, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.udfs = [];
          const _rtmp3478 = input.readListBegin();
          const _size477 = _rtmp3478.size || 0;
          for (let _i479 = 0; _i479 < _size477; ++_i479) {
            let elem480 = null;
            elem480 = new extension_functions_ttypes.TUserDefinedFunction();
            elem480.read(input);
            this.udfs.push(elem480);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.udtfs = [];
          const _rtmp3482 = input.readListBegin();
          const _size481 = _rtmp3482.size || 0;
          for (let _i483 = 0; _i483 < _size481; ++_i483) {
            let elem484 = null;
            elem484 = new extension_functions_ttypes.TUserDefinedTableFunction();
            elem484.read(input);
            this.udtfs.push(elem484);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.MAP) {
          this.device_ir_map = {};
          const _rtmp3486 = input.readMapBegin();
          const _size485 = _rtmp3486.size || 0;
          for (let _i487 = 0; _i487 < _size485; ++_i487) {
            let key488 = null;
            let val489 = null;
            key488 = input.readString();
            val489 = input.readString();
            this.device_ir_map[key488] = val489;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_register_runtime_extension_functions_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.udfs !== null && this.udfs !== undefined) {
      output.writeFieldBegin('udfs', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.udfs.length);
      for (let iter490 in this.udfs) {
        if (this.udfs.hasOwnProperty(iter490)) {
          iter490 = this.udfs[iter490];
          iter490.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.udtfs !== null && this.udtfs !== undefined) {
      output.writeFieldBegin('udtfs', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.udtfs.length);
      for (let iter491 in this.udtfs) {
        if (this.udtfs.hasOwnProperty(iter491)) {
          iter491 = this.udtfs[iter491];
          iter491.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.device_ir_map !== null && this.device_ir_map !== undefined) {
      output.writeFieldBegin('device_ir_map', Thrift.Type.MAP, 4);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.device_ir_map));
      for (let kiter492 in this.device_ir_map) {
        if (this.device_ir_map.hasOwnProperty(kiter492)) {
          let viter493 = this.device_ir_map[kiter492];
          output.writeString(kiter492);
          output.writeString(viter493);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_register_runtime_extension_functions_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_register_runtime_extension_functions_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_function_names_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_function_names_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_function_names_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3495 = input.readListBegin();
          const _size494 = _rtmp3495.size || 0;
          for (let _i496 = 0; _i496 < _size494; ++_i496) {
            let elem497 = null;
            elem497 = input.readString();
            this.success.push(elem497);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_function_names_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter498 in this.success) {
        if (this.success.hasOwnProperty(iter498)) {
          iter498 = this.success[iter498];
          output.writeString(iter498);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_runtime_table_function_names_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_runtime_table_function_names_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_runtime_table_function_names_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3500 = input.readListBegin();
          const _size499 = _rtmp3500.size || 0;
          for (let _i501 = 0; _i501 < _size499; ++_i501) {
            let elem502 = null;
            elem502 = input.readString();
            this.success.push(elem502);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_runtime_table_function_names_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter503 in this.success) {
        if (this.success.hasOwnProperty(iter503)) {
          iter503 = this.success[iter503];
          output.writeString(iter503);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_function_details_args = class {
  constructor(args) {
    this.session = null;
    this.udtf_names = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.udtf_names !== undefined && args.udtf_names !== null) {
        this.udtf_names = Thrift.copyList(args.udtf_names, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.udtf_names = [];
          const _rtmp3505 = input.readListBegin();
          const _size504 = _rtmp3505.size || 0;
          for (let _i506 = 0; _i506 < _size504; ++_i506) {
            let elem507 = null;
            elem507 = input.readString();
            this.udtf_names.push(elem507);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_function_details_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.udtf_names !== null && this.udtf_names !== undefined) {
      output.writeFieldBegin('udtf_names', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.udtf_names.length);
      for (let iter508 in this.udtf_names) {
        if (this.udtf_names.hasOwnProperty(iter508)) {
          iter508 = this.udtf_names[iter508];
          output.writeString(iter508);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_table_function_details_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [extension_functions_ttypes.TUserDefinedTableFunction]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3510 = input.readListBegin();
          const _size509 = _rtmp3510.size || 0;
          for (let _i511 = 0; _i511 < _size509; ++_i511) {
            let elem512 = null;
            elem512 = new extension_functions_ttypes.TUserDefinedTableFunction();
            elem512.read(input);
            this.success.push(elem512);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_table_function_details_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter513 in this.success) {
        if (this.success.hasOwnProperty(iter513)) {
          iter513 = this.success[iter513];
          iter513.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_function_names_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_function_names_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_function_names_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3515 = input.readListBegin();
          const _size514 = _rtmp3515.size || 0;
          for (let _i516 = 0; _i516 < _size514; ++_i516) {
            let elem517 = null;
            elem517 = input.readString();
            this.success.push(elem517);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_function_names_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter518 in this.success) {
        if (this.success.hasOwnProperty(iter518)) {
          iter518 = this.success[iter518];
          output.writeString(iter518);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_runtime_function_names_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_runtime_function_names_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_runtime_function_names_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3520 = input.readListBegin();
          const _size519 = _rtmp3520.size || 0;
          for (let _i521 = 0; _i521 < _size519; ++_i521) {
            let elem522 = null;
            elem522 = input.readString();
            this.success.push(elem522);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_runtime_function_names_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter523 in this.success) {
        if (this.success.hasOwnProperty(iter523)) {
          iter523 = this.success[iter523];
          output.writeString(iter523);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_function_details_args = class {
  constructor(args) {
    this.session = null;
    this.udf_names = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = args.session;
      }
      if (args.udf_names !== undefined && args.udf_names !== null) {
        this.udf_names = Thrift.copyList(args.udf_names, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.session = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.udf_names = [];
          const _rtmp3525 = input.readListBegin();
          const _size524 = _rtmp3525.size || 0;
          for (let _i526 = 0; _i526 < _size524; ++_i526) {
            let elem527 = null;
            elem527 = input.readString();
            this.udf_names.push(elem527);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_function_details_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRING, 1);
      output.writeString(this.session);
      output.writeFieldEnd();
    }
    if (this.udf_names !== null && this.udf_names !== undefined) {
      output.writeFieldBegin('udf_names', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.udf_names.length);
      for (let iter528 in this.udf_names) {
        if (this.udf_names.hasOwnProperty(iter528)) {
          iter528 = this.udf_names[iter528];
          output.writeString(iter528);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Heavy_get_function_details_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TDBException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [extension_functions_ttypes.TUserDefinedFunction]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3530 = input.readListBegin();
          const _size529 = _rtmp3530.size || 0;
          for (let _i531 = 0; _i531 < _size529; ++_i531) {
            let elem532 = null;
            elem532 = new extension_functions_ttypes.TUserDefinedFunction();
            elem532.read(input);
            this.success.push(elem532);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TDBException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Heavy_get_function_details_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter533 in this.success) {
        if (this.success.hasOwnProperty(iter533)) {
          iter533 = this.success[iter533];
          iter533.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const HeavyClient = exports.Client = class HeavyClient {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  connect (user, passwd, dbname) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_connect(user, passwd, dbname);
    });
  }

  send_connect (user, passwd, dbname) {
    const output = new this.pClass(this.output);
    const params = {
      user: user,
      passwd: passwd,
      dbname: dbname
    };
    const args = new Heavy_connect_args(params);
    try {
      output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_connect (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_connect_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('connect failed: unknown result');
  }

  krb5_connect (inputToken, dbname) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_krb5_connect(inputToken, dbname);
    });
  }

  send_krb5_connect (inputToken, dbname) {
    const output = new this.pClass(this.output);
    const params = {
      inputToken: inputToken,
      dbname: dbname
    };
    const args = new Heavy_krb5_connect_args(params);
    try {
      output.writeMessageBegin('krb5_connect', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_krb5_connect (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_krb5_connect_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('krb5_connect failed: unknown result');
  }

  disconnect (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_disconnect(session);
    });
  }

  send_disconnect (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_disconnect_args(params);
    try {
      output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_disconnect (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_disconnect_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  switch_database (session, dbname) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_switch_database(session, dbname);
    });
  }

  send_switch_database (session, dbname) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dbname: dbname
    };
    const args = new Heavy_switch_database_args(params);
    try {
      output.writeMessageBegin('switch_database', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_switch_database (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_switch_database_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  clone_session (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clone_session(session);
    });
  }

  send_clone_session (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_clone_session_args(params);
    try {
      output.writeMessageBegin('clone_session', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clone_session (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_clone_session_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('clone_session failed: unknown result');
  }

  get_server_status (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_server_status(session);
    });
  }

  send_get_server_status (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_server_status_args(params);
    try {
      output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_server_status (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_server_status_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_server_status failed: unknown result');
  }

  get_status (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_status(session);
    });
  }

  send_get_status (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_status_args(params);
    try {
      output.writeMessageBegin('get_status', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_status (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_status_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_status failed: unknown result');
  }

  get_hardware_info (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_hardware_info(session);
    });
  }

  send_get_hardware_info (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_hardware_info_args(params);
    try {
      output.writeMessageBegin('get_hardware_info', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_hardware_info (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_hardware_info_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_hardware_info failed: unknown result');
  }

  get_tables (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_tables(session);
    });
  }

  send_get_tables (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_tables_args(params);
    try {
      output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_tables (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_tables_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_tables failed: unknown result');
  }

  get_tables_for_database (session, database_name) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_tables_for_database(session, database_name);
    });
  }

  send_get_tables_for_database (session, database_name) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      database_name: database_name
    };
    const args = new Heavy_get_tables_for_database_args(params);
    try {
      output.writeMessageBegin('get_tables_for_database', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_tables_for_database (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_tables_for_database_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_tables_for_database failed: unknown result');
  }

  get_physical_tables (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_physical_tables(session);
    });
  }

  send_get_physical_tables (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_physical_tables_args(params);
    try {
      output.writeMessageBegin('get_physical_tables', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_physical_tables (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_physical_tables_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_physical_tables failed: unknown result');
  }

  get_views (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_views(session);
    });
  }

  send_get_views (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_views_args(params);
    try {
      output.writeMessageBegin('get_views', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_views (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_views_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_views failed: unknown result');
  }

  get_tables_meta (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_tables_meta(session);
    });
  }

  send_get_tables_meta (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_tables_meta_args(params);
    try {
      output.writeMessageBegin('get_tables_meta', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_tables_meta (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_tables_meta_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_tables_meta failed: unknown result');
  }

  get_table_details (session, table_name) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_table_details(session, table_name);
    });
  }

  send_get_table_details (session, table_name) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name
    };
    const args = new Heavy_get_table_details_args(params);
    try {
      output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_table_details (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_table_details_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_table_details failed: unknown result');
  }

  get_table_details_for_database (session, table_name, database_name) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_table_details_for_database(session, table_name, database_name);
    });
  }

  send_get_table_details_for_database (session, table_name, database_name) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      database_name: database_name
    };
    const args = new Heavy_get_table_details_for_database_args(params);
    try {
      output.writeMessageBegin('get_table_details_for_database', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_table_details_for_database (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_table_details_for_database_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_table_details_for_database failed: unknown result');
  }

  get_internal_table_details (session, table_name, include_system_columns) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_internal_table_details(session, table_name, include_system_columns);
    });
  }

  send_get_internal_table_details (session, table_name, include_system_columns) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      include_system_columns: include_system_columns
    };
    const args = new Heavy_get_internal_table_details_args(params);
    try {
      output.writeMessageBegin('get_internal_table_details', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_internal_table_details (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_internal_table_details_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_internal_table_details failed: unknown result');
  }

  get_internal_table_details_for_database (session, table_name, database_name) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_internal_table_details_for_database(session, table_name, database_name);
    });
  }

  send_get_internal_table_details_for_database (session, table_name, database_name) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      database_name: database_name
    };
    const args = new Heavy_get_internal_table_details_for_database_args(params);
    try {
      output.writeMessageBegin('get_internal_table_details_for_database', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_internal_table_details_for_database (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_internal_table_details_for_database_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_internal_table_details_for_database failed: unknown result');
  }

  get_users (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_users(session);
    });
  }

  send_get_users (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_users_args(params);
    try {
      output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_users (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_users_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_users failed: unknown result');
  }

  get_databases (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_databases(session);
    });
  }

  send_get_databases (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_databases_args(params);
    try {
      output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_databases (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_databases_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_databases failed: unknown result');
  }

  get_version () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_version();
    });
  }

  send_get_version () {
    const output = new this.pClass(this.output);
    const args = new Heavy_get_version_args();
    try {
      output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_version (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_version_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_version failed: unknown result');
  }

  start_heap_profile (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_start_heap_profile(session);
    });
  }

  send_start_heap_profile (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_start_heap_profile_args(params);
    try {
      output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_start_heap_profile (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_start_heap_profile_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  stop_heap_profile (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_stop_heap_profile(session);
    });
  }

  send_stop_heap_profile (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_stop_heap_profile_args(params);
    try {
      output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_stop_heap_profile (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_stop_heap_profile_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  get_heap_profile (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_heap_profile(session);
    });
  }

  send_get_heap_profile (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_heap_profile_args(params);
    try {
      output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_heap_profile (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_heap_profile_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_heap_profile failed: unknown result');
  }

  get_memory (session, memory_level) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_memory(session, memory_level);
    });
  }

  send_get_memory (session, memory_level) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      memory_level: memory_level
    };
    const args = new Heavy_get_memory_args(params);
    try {
      output.writeMessageBegin('get_memory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_memory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_memory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_memory failed: unknown result');
  }

  clear_cpu_memory (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clear_cpu_memory(session);
    });
  }

  send_clear_cpu_memory (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_clear_cpu_memory_args(params);
    try {
      output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clear_cpu_memory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_clear_cpu_memory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  clear_gpu_memory (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clear_gpu_memory(session);
    });
  }

  send_clear_gpu_memory (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_clear_gpu_memory_args(params);
    try {
      output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clear_gpu_memory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_clear_gpu_memory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  set_cur_session (parent_session, leaf_session, start_time_str, label, for_running_query_kernel) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_set_cur_session(parent_session, leaf_session, start_time_str, label, for_running_query_kernel);
    });
  }

  send_set_cur_session (parent_session, leaf_session, start_time_str, label, for_running_query_kernel) {
    const output = new this.pClass(this.output);
    const params = {
      parent_session: parent_session,
      leaf_session: leaf_session,
      start_time_str: start_time_str,
      label: label,
      for_running_query_kernel: for_running_query_kernel
    };
    const args = new Heavy_set_cur_session_args(params);
    try {
      output.writeMessageBegin('set_cur_session', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_set_cur_session (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_set_cur_session_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  invalidate_cur_session (parent_session, leaf_session, start_time_str, label, for_running_query_kernel) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_invalidate_cur_session(parent_session, leaf_session, start_time_str, label, for_running_query_kernel);
    });
  }

  send_invalidate_cur_session (parent_session, leaf_session, start_time_str, label, for_running_query_kernel) {
    const output = new this.pClass(this.output);
    const params = {
      parent_session: parent_session,
      leaf_session: leaf_session,
      start_time_str: start_time_str,
      label: label,
      for_running_query_kernel: for_running_query_kernel
    };
    const args = new Heavy_invalidate_cur_session_args(params);
    try {
      output.writeMessageBegin('invalidate_cur_session', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_invalidate_cur_session (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_invalidate_cur_session_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  set_table_epoch (session, db_id, table_id, new_epoch) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_set_table_epoch(session, db_id, table_id, new_epoch);
    });
  }

  send_set_table_epoch (session, db_id, table_id, new_epoch) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      db_id: db_id,
      table_id: table_id,
      new_epoch: new_epoch
    };
    const args = new Heavy_set_table_epoch_args(params);
    try {
      output.writeMessageBegin('set_table_epoch', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_set_table_epoch (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_set_table_epoch_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  set_table_epoch_by_name (session, table_name, new_epoch) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_set_table_epoch_by_name(session, table_name, new_epoch);
    });
  }

  send_set_table_epoch_by_name (session, table_name, new_epoch) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      new_epoch: new_epoch
    };
    const args = new Heavy_set_table_epoch_by_name_args(params);
    try {
      output.writeMessageBegin('set_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_set_table_epoch_by_name (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_set_table_epoch_by_name_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  get_table_epoch (session, db_id, table_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_table_epoch(session, db_id, table_id);
    });
  }

  send_get_table_epoch (session, db_id, table_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      db_id: db_id,
      table_id: table_id
    };
    const args = new Heavy_get_table_epoch_args(params);
    try {
      output.writeMessageBegin('get_table_epoch', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_table_epoch (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_table_epoch_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_table_epoch failed: unknown result');
  }

  get_table_epoch_by_name (session, table_name) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_table_epoch_by_name(session, table_name);
    });
  }

  send_get_table_epoch_by_name (session, table_name) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name
    };
    const args = new Heavy_get_table_epoch_by_name_args(params);
    try {
      output.writeMessageBegin('get_table_epoch_by_name', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_table_epoch_by_name (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_table_epoch_by_name_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_table_epoch_by_name failed: unknown result');
  }

  get_table_epochs (session, db_id, table_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_table_epochs(session, db_id, table_id);
    });
  }

  send_get_table_epochs (session, db_id, table_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      db_id: db_id,
      table_id: table_id
    };
    const args = new Heavy_get_table_epochs_args(params);
    try {
      output.writeMessageBegin('get_table_epochs', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_table_epochs (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_table_epochs_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_table_epochs failed: unknown result');
  }

  set_table_epochs (session, db_id, table_epochs) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_set_table_epochs(session, db_id, table_epochs);
    });
  }

  send_set_table_epochs (session, db_id, table_epochs) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      db_id: db_id,
      table_epochs: table_epochs
    };
    const args = new Heavy_set_table_epochs_args(params);
    try {
      output.writeMessageBegin('set_table_epochs', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_set_table_epochs (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_set_table_epochs_result();
    result.read(input);
    input.readMessageEnd();

    callback(null);
  }

  get_session_info (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_session_info(session);
    });
  }

  send_get_session_info (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_session_info_args(params);
    try {
      output.writeMessageBegin('get_session_info', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_session_info (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_session_info_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_session_info failed: unknown result');
  }

  get_queries_info (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_queries_info(session);
    });
  }

  send_get_queries_info (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_queries_info_args(params);
    try {
      output.writeMessageBegin('get_queries_info', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_queries_info (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_queries_info_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_queries_info failed: unknown result');
  }

  set_leaf_info (session, leaf_info) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_set_leaf_info(session, leaf_info);
    });
  }

  send_set_leaf_info (session, leaf_info) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      leaf_info: leaf_info
    };
    const args = new Heavy_set_leaf_info_args(params);
    try {
      output.writeMessageBegin('set_leaf_info', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_set_leaf_info (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_set_leaf_info_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  sql_execute (session, query, column_format, nonce, first_n, at_most_n) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sql_execute(session, query, column_format, nonce, first_n, at_most_n);
    });
  }

  send_sql_execute (session, query, column_format, nonce, first_n, at_most_n) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      query: query,
      column_format: column_format,
      nonce: nonce,
      first_n: first_n,
      at_most_n: at_most_n
    };
    const args = new Heavy_sql_execute_args(params);
    try {
      output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sql_execute (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_sql_execute_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sql_execute failed: unknown result');
  }

  sql_execute_df (session, query, device_type, device_id, first_n, transport_method) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sql_execute_df(session, query, device_type, device_id, first_n, transport_method);
    });
  }

  send_sql_execute_df (session, query, device_type, device_id, first_n, transport_method) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      query: query,
      device_type: device_type,
      device_id: device_id,
      first_n: first_n,
      transport_method: transport_method
    };
    const args = new Heavy_sql_execute_df_args(params);
    try {
      output.writeMessageBegin('sql_execute_df', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sql_execute_df (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_sql_execute_df_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sql_execute_df failed: unknown result');
  }

  sql_execute_gdf (session, query, device_id, first_n) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sql_execute_gdf(session, query, device_id, first_n);
    });
  }

  send_sql_execute_gdf (session, query, device_id, first_n) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      query: query,
      device_id: device_id,
      first_n: first_n
    };
    const args = new Heavy_sql_execute_gdf_args(params);
    try {
      output.writeMessageBegin('sql_execute_gdf', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sql_execute_gdf (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_sql_execute_gdf_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sql_execute_gdf failed: unknown result');
  }

  deallocate_df (session, df, device_type, device_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_deallocate_df(session, df, device_type, device_id);
    });
  }

  send_deallocate_df (session, df, device_type, device_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      df: df,
      device_type: device_type,
      device_id: device_id
    };
    const args = new Heavy_deallocate_df_args(params);
    try {
      output.writeMessageBegin('deallocate_df', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_deallocate_df (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_deallocate_df_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  interrupt (query_session, interrupt_session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_interrupt(query_session, interrupt_session);
    });
  }

  send_interrupt (query_session, interrupt_session) {
    const output = new this.pClass(this.output);
    const params = {
      query_session: query_session,
      interrupt_session: interrupt_session
    };
    const args = new Heavy_interrupt_args(params);
    try {
      output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_interrupt (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_interrupt_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  sql_validate (session, query) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sql_validate(session, query);
    });
  }

  send_sql_validate (session, query) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      query: query
    };
    const args = new Heavy_sql_validate_args(params);
    try {
      output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sql_validate (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_sql_validate_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sql_validate failed: unknown result');
  }

  get_completion_hints (session, sql, cursor) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_completion_hints(session, sql, cursor);
    });
  }

  send_get_completion_hints (session, sql, cursor) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      sql: sql,
      cursor: cursor
    };
    const args = new Heavy_get_completion_hints_args(params);
    try {
      output.writeMessageBegin('get_completion_hints', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_completion_hints (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_completion_hints_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_completion_hints failed: unknown result');
  }

  set_execution_mode (session, mode) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_set_execution_mode(session, mode);
    });
  }

  send_set_execution_mode (session, mode) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      mode: mode
    };
    const args = new Heavy_set_execution_mode_args(params);
    try {
      output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_set_execution_mode (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_set_execution_mode_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  render_vega (session, widget_id, vega_json, compression_level, nonce) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_render_vega(session, widget_id, vega_json, compression_level, nonce);
    });
  }

  send_render_vega (session, widget_id, vega_json, compression_level, nonce) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      widget_id: widget_id,
      vega_json: vega_json,
      compression_level: compression_level,
      nonce: nonce
    };
    const args = new Heavy_render_vega_args(params);
    try {
      output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_render_vega (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_render_vega_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('render_vega failed: unknown result');
  }

  get_result_row_for_pixel (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
    });
  }

  send_get_result_row_for_pixel (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      widget_id: widget_id,
      pixel: pixel,
      table_col_names: table_col_names,
      column_format: column_format,
      pixelRadius: pixelRadius,
      nonce: nonce
    };
    const args = new Heavy_get_result_row_for_pixel_args(params);
    try {
      output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_result_row_for_pixel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_result_row_for_pixel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_result_row_for_pixel failed: unknown result');
  }

  create_custom_expression (session, custom_expression) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_create_custom_expression(session, custom_expression);
    });
  }

  send_create_custom_expression (session, custom_expression) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      custom_expression: custom_expression
    };
    const args = new Heavy_create_custom_expression_args(params);
    try {
      output.writeMessageBegin('create_custom_expression', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_create_custom_expression (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_create_custom_expression_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('create_custom_expression failed: unknown result');
  }

  get_custom_expressions (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_custom_expressions(session);
    });
  }

  send_get_custom_expressions (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_custom_expressions_args(params);
    try {
      output.writeMessageBegin('get_custom_expressions', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_custom_expressions (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_custom_expressions_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_custom_expressions failed: unknown result');
  }

  update_custom_expression (session, id, expression_json) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_update_custom_expression(session, id, expression_json);
    });
  }

  send_update_custom_expression (session, id, expression_json) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      id: id,
      expression_json: expression_json
    };
    const args = new Heavy_update_custom_expression_args(params);
    try {
      output.writeMessageBegin('update_custom_expression', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_update_custom_expression (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_update_custom_expression_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  delete_custom_expressions (session, custom_expression_ids, do_soft_delete) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_delete_custom_expressions(session, custom_expression_ids, do_soft_delete);
    });
  }

  send_delete_custom_expressions (session, custom_expression_ids, do_soft_delete) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      custom_expression_ids: custom_expression_ids,
      do_soft_delete: do_soft_delete
    };
    const args = new Heavy_delete_custom_expressions_args(params);
    try {
      output.writeMessageBegin('delete_custom_expressions', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_delete_custom_expressions (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_delete_custom_expressions_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  get_dashboard (session, dashboard_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_dashboard(session, dashboard_id);
    });
  }

  send_get_dashboard (session, dashboard_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_id: dashboard_id
    };
    const args = new Heavy_get_dashboard_args(params);
    try {
      output.writeMessageBegin('get_dashboard', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_dashboard (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_dashboard_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_dashboard failed: unknown result');
  }

  get_dashboards (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_dashboards(session);
    });
  }

  send_get_dashboards (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_dashboards_args(params);
    try {
      output.writeMessageBegin('get_dashboards', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_dashboards (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_dashboards_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_dashboards failed: unknown result');
  }

  create_dashboard (session, dashboard_name, dashboard_state, image_hash, dashboard_metadata) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
    });
  }

  send_create_dashboard (session, dashboard_name, dashboard_state, image_hash, dashboard_metadata) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_name: dashboard_name,
      dashboard_state: dashboard_state,
      image_hash: image_hash,
      dashboard_metadata: dashboard_metadata
    };
    const args = new Heavy_create_dashboard_args(params);
    try {
      output.writeMessageBegin('create_dashboard', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_create_dashboard (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_create_dashboard_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('create_dashboard failed: unknown result');
  }

  replace_dashboard (session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
    });
  }

  send_replace_dashboard (session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_id: dashboard_id,
      dashboard_name: dashboard_name,
      dashboard_owner: dashboard_owner,
      dashboard_state: dashboard_state,
      image_hash: image_hash,
      dashboard_metadata: dashboard_metadata
    };
    const args = new Heavy_replace_dashboard_args(params);
    try {
      output.writeMessageBegin('replace_dashboard', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_replace_dashboard (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_replace_dashboard_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  delete_dashboard (session, dashboard_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_delete_dashboard(session, dashboard_id);
    });
  }

  send_delete_dashboard (session, dashboard_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_id: dashboard_id
    };
    const args = new Heavy_delete_dashboard_args(params);
    try {
      output.writeMessageBegin('delete_dashboard', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_delete_dashboard (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_delete_dashboard_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  share_dashboards (session, dashboard_ids, groups, permissions) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_share_dashboards(session, dashboard_ids, groups, permissions);
    });
  }

  send_share_dashboards (session, dashboard_ids, groups, permissions) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_ids: dashboard_ids,
      groups: groups,
      permissions: permissions
    };
    const args = new Heavy_share_dashboards_args(params);
    try {
      output.writeMessageBegin('share_dashboards', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_share_dashboards (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_share_dashboards_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  delete_dashboards (session, dashboard_ids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_delete_dashboards(session, dashboard_ids);
    });
  }

  send_delete_dashboards (session, dashboard_ids) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_ids: dashboard_ids
    };
    const args = new Heavy_delete_dashboards_args(params);
    try {
      output.writeMessageBegin('delete_dashboards', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_delete_dashboards (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_delete_dashboards_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  share_dashboard (session, dashboard_id, groups, objects, permissions, grant_role) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role);
    });
  }

  send_share_dashboard (session, dashboard_id, groups, objects, permissions, grant_role) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_id: dashboard_id,
      groups: groups,
      objects: objects,
      permissions: permissions,
      grant_role: grant_role
    };
    const args = new Heavy_share_dashboard_args(params);
    try {
      output.writeMessageBegin('share_dashboard', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_share_dashboard (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_share_dashboard_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  unshare_dashboard (session, dashboard_id, groups, objects, permissions) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_unshare_dashboard(session, dashboard_id, groups, objects, permissions);
    });
  }

  send_unshare_dashboard (session, dashboard_id, groups, objects, permissions) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_id: dashboard_id,
      groups: groups,
      objects: objects,
      permissions: permissions
    };
    const args = new Heavy_unshare_dashboard_args(params);
    try {
      output.writeMessageBegin('unshare_dashboard', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_unshare_dashboard (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_unshare_dashboard_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  unshare_dashboards (session, dashboard_ids, groups, permissions) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_unshare_dashboards(session, dashboard_ids, groups, permissions);
    });
  }

  send_unshare_dashboards (session, dashboard_ids, groups, permissions) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_ids: dashboard_ids,
      groups: groups,
      permissions: permissions
    };
    const args = new Heavy_unshare_dashboards_args(params);
    try {
      output.writeMessageBegin('unshare_dashboards', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_unshare_dashboards (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_unshare_dashboards_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  get_dashboard_grantees (session, dashboard_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_dashboard_grantees(session, dashboard_id);
    });
  }

  send_get_dashboard_grantees (session, dashboard_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      dashboard_id: dashboard_id
    };
    const args = new Heavy_get_dashboard_grantees_args(params);
    try {
      output.writeMessageBegin('get_dashboard_grantees', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_dashboard_grantees (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_dashboard_grantees_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_dashboard_grantees failed: unknown result');
  }

  get_link_view (session, link) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_link_view(session, link);
    });
  }

  send_get_link_view (session, link) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      link: link
    };
    const args = new Heavy_get_link_view_args(params);
    try {
      output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_link_view (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_link_view_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_link_view failed: unknown result');
  }

  create_link (session, view_state, view_metadata) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_create_link(session, view_state, view_metadata);
    });
  }

  send_create_link (session, view_state, view_metadata) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      view_state: view_state,
      view_metadata: view_metadata
    };
    const args = new Heavy_create_link_args(params);
    try {
      output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_create_link (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_create_link_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('create_link failed: unknown result');
  }

  load_table_binary (session, table_name, rows, column_names) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_load_table_binary(session, table_name, rows, column_names);
    });
  }

  send_load_table_binary (session, table_name, rows, column_names) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      rows: rows,
      column_names: column_names
    };
    const args = new Heavy_load_table_binary_args(params);
    try {
      output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_load_table_binary (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_load_table_binary_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  load_table_binary_columnar (session, table_name, cols, column_names) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_load_table_binary_columnar(session, table_name, cols, column_names);
    });
  }

  send_load_table_binary_columnar (session, table_name, cols, column_names) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      cols: cols,
      column_names: column_names
    };
    const args = new Heavy_load_table_binary_columnar_args(params);
    try {
      output.writeMessageBegin('load_table_binary_columnar', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_load_table_binary_columnar (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_load_table_binary_columnar_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  load_table_binary_arrow (session, table_name, arrow_stream, use_column_names) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_load_table_binary_arrow(session, table_name, arrow_stream, use_column_names);
    });
  }

  send_load_table_binary_arrow (session, table_name, arrow_stream, use_column_names) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      arrow_stream: arrow_stream,
      use_column_names: use_column_names
    };
    const args = new Heavy_load_table_binary_arrow_args(params);
    try {
      output.writeMessageBegin('load_table_binary_arrow', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_load_table_binary_arrow (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_load_table_binary_arrow_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  load_table (session, table_name, rows, column_names) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_load_table(session, table_name, rows, column_names);
    });
  }

  send_load_table (session, table_name, rows, column_names) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      rows: rows,
      column_names: column_names
    };
    const args = new Heavy_load_table_args(params);
    try {
      output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_load_table (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_load_table_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  detect_column_types (session, file_name, copy_params) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_detect_column_types(session, file_name, copy_params);
    });
  }

  send_detect_column_types (session, file_name, copy_params) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      file_name: file_name,
      copy_params: copy_params
    };
    const args = new Heavy_detect_column_types_args(params);
    try {
      output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_detect_column_types (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_detect_column_types_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('detect_column_types failed: unknown result');
  }

  create_table (session, table_name, row_desc, create_params) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_create_table(session, table_name, row_desc, create_params);
    });
  }

  send_create_table (session, table_name, row_desc, create_params) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      row_desc: row_desc,
      create_params: create_params
    };
    const args = new Heavy_create_table_args(params);
    try {
      output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_create_table (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_create_table_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  import_table (session, table_name, file_name, copy_params) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_import_table(session, table_name, file_name, copy_params);
    });
  }

  send_import_table (session, table_name, file_name, copy_params) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      file_name: file_name,
      copy_params: copy_params
    };
    const args = new Heavy_import_table_args(params);
    try {
      output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_import_table (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_import_table_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  import_geo_table (session, table_name, file_name, copy_params, row_desc, create_params) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params);
    });
  }

  send_import_geo_table (session, table_name, file_name, copy_params, row_desc, create_params) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_name: table_name,
      file_name: file_name,
      copy_params: copy_params,
      row_desc: row_desc,
      create_params: create_params
    };
    const args = new Heavy_import_geo_table_args(params);
    try {
      output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_import_geo_table (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_import_geo_table_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  import_table_status (session, import_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_import_table_status(session, import_id);
    });
  }

  send_import_table_status (session, import_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      import_id: import_id
    };
    const args = new Heavy_import_table_status_args(params);
    try {
      output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_import_table_status (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_import_table_status_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('import_table_status failed: unknown result');
  }

  get_first_geo_file_in_archive (session, archive_path, copy_params) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_first_geo_file_in_archive(session, archive_path, copy_params);
    });
  }

  send_get_first_geo_file_in_archive (session, archive_path, copy_params) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      archive_path: archive_path,
      copy_params: copy_params
    };
    const args = new Heavy_get_first_geo_file_in_archive_args(params);
    try {
      output.writeMessageBegin('get_first_geo_file_in_archive', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_first_geo_file_in_archive (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_first_geo_file_in_archive_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_first_geo_file_in_archive failed: unknown result');
  }

  get_all_files_in_archive (session, archive_path, copy_params) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_all_files_in_archive(session, archive_path, copy_params);
    });
  }

  send_get_all_files_in_archive (session, archive_path, copy_params) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      archive_path: archive_path,
      copy_params: copy_params
    };
    const args = new Heavy_get_all_files_in_archive_args(params);
    try {
      output.writeMessageBegin('get_all_files_in_archive', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_all_files_in_archive (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_all_files_in_archive_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_all_files_in_archive failed: unknown result');
  }

  get_layers_in_geo_file (session, file_name, copy_params) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_layers_in_geo_file(session, file_name, copy_params);
    });
  }

  send_get_layers_in_geo_file (session, file_name, copy_params) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      file_name: file_name,
      copy_params: copy_params
    };
    const args = new Heavy_get_layers_in_geo_file_args(params);
    try {
      output.writeMessageBegin('get_layers_in_geo_file', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_layers_in_geo_file (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_layers_in_geo_file_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_layers_in_geo_file failed: unknown result');
  }

  query_get_outer_fragment_count (session, query) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_query_get_outer_fragment_count(session, query);
    });
  }

  send_query_get_outer_fragment_count (session, query) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      query: query
    };
    const args = new Heavy_query_get_outer_fragment_count_args(params);
    try {
      output.writeMessageBegin('query_get_outer_fragment_count', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_query_get_outer_fragment_count (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_query_get_outer_fragment_count_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('query_get_outer_fragment_count failed: unknown result');
  }

  check_table_consistency (session, table_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_check_table_consistency(session, table_id);
    });
  }

  send_check_table_consistency (session, table_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_id: table_id
    };
    const args = new Heavy_check_table_consistency_args(params);
    try {
      output.writeMessageBegin('check_table_consistency', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_check_table_consistency (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_check_table_consistency_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('check_table_consistency failed: unknown result');
  }

  start_query (leaf_session, parent_session, query_ra, start_time_str, just_explain, outer_fragment_indices) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_start_query(leaf_session, parent_session, query_ra, start_time_str, just_explain, outer_fragment_indices);
    });
  }

  send_start_query (leaf_session, parent_session, query_ra, start_time_str, just_explain, outer_fragment_indices) {
    const output = new this.pClass(this.output);
    const params = {
      leaf_session: leaf_session,
      parent_session: parent_session,
      query_ra: query_ra,
      start_time_str: start_time_str,
      just_explain: just_explain,
      outer_fragment_indices: outer_fragment_indices
    };
    const args = new Heavy_start_query_args(params);
    try {
      output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_start_query (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_start_query_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('start_query failed: unknown result');
  }

  execute_query_step (pending_query, subquery_id, start_time_str) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_execute_query_step(pending_query, subquery_id, start_time_str);
    });
  }

  send_execute_query_step (pending_query, subquery_id, start_time_str) {
    const output = new this.pClass(this.output);
    const params = {
      pending_query: pending_query,
      subquery_id: subquery_id,
      start_time_str: start_time_str
    };
    const args = new Heavy_execute_query_step_args(params);
    try {
      output.writeMessageBegin('execute_query_step', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_execute_query_step (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_execute_query_step_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('execute_query_step failed: unknown result');
  }

  broadcast_serialized_rows (serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result);
    });
  }

  send_broadcast_serialized_rows (serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result) {
    const output = new this.pClass(this.output);
    const params = {
      serialized_rows: serialized_rows,
      row_desc: row_desc,
      query_id: query_id,
      subquery_id: subquery_id,
      is_final_subquery_result: is_final_subquery_result
    };
    const args = new Heavy_broadcast_serialized_rows_args(params);
    try {
      output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_broadcast_serialized_rows (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_broadcast_serialized_rows_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  start_render_query (session, widget_id, node_idx, vega_json) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_start_render_query(session, widget_id, node_idx, vega_json);
    });
  }

  send_start_render_query (session, widget_id, node_idx, vega_json) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      widget_id: widget_id,
      node_idx: node_idx,
      vega_json: vega_json
    };
    const args = new Heavy_start_render_query_args(params);
    try {
      output.writeMessageBegin('start_render_query', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_start_render_query (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_start_render_query_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('start_render_query failed: unknown result');
  }

  execute_next_render_step (pending_render, merged_data) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_execute_next_render_step(pending_render, merged_data);
    });
  }

  send_execute_next_render_step (pending_render, merged_data) {
    const output = new this.pClass(this.output);
    const params = {
      pending_render: pending_render,
      merged_data: merged_data
    };
    const args = new Heavy_execute_next_render_step_args(params);
    try {
      output.writeMessageBegin('execute_next_render_step', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_execute_next_render_step (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_execute_next_render_step_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('execute_next_render_step failed: unknown result');
  }

  insert_data (session, insert_data) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_insert_data(session, insert_data);
    });
  }

  send_insert_data (session, insert_data) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      insert_data: insert_data
    };
    const args = new Heavy_insert_data_args(params);
    try {
      output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_insert_data (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_insert_data_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  insert_chunks (session, insert_chunks) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_insert_chunks(session, insert_chunks);
    });
  }

  send_insert_chunks (session, insert_chunks) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      insert_chunks: insert_chunks
    };
    const args = new Heavy_insert_chunks_args(params);
    try {
      output.writeMessageBegin('insert_chunks', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_insert_chunks (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_insert_chunks_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  checkpoint (session, table_id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_checkpoint(session, table_id);
    });
  }

  send_checkpoint (session, table_id) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      table_id: table_id
    };
    const args = new Heavy_checkpoint_args(params);
    try {
      output.writeMessageBegin('checkpoint', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_checkpoint (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_checkpoint_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  get_roles (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_roles(session);
    });
  }

  send_get_roles (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_roles_args(params);
    try {
      output.writeMessageBegin('get_roles', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_roles (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_roles_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_roles failed: unknown result');
  }

  get_db_objects_for_grantee (session, roleName) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_db_objects_for_grantee(session, roleName);
    });
  }

  send_get_db_objects_for_grantee (session, roleName) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      roleName: roleName
    };
    const args = new Heavy_get_db_objects_for_grantee_args(params);
    try {
      output.writeMessageBegin('get_db_objects_for_grantee', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_db_objects_for_grantee (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_db_objects_for_grantee_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_db_objects_for_grantee failed: unknown result');
  }

  get_db_object_privs (session, objectName, type) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_db_object_privs(session, objectName, type);
    });
  }

  send_get_db_object_privs (session, objectName, type) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      objectName: objectName,
      type: type
    };
    const args = new Heavy_get_db_object_privs_args(params);
    try {
      output.writeMessageBegin('get_db_object_privs', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_db_object_privs (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_db_object_privs_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_db_object_privs failed: unknown result');
  }

  get_all_roles_for_user (session, userName) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_all_roles_for_user(session, userName);
    });
  }

  send_get_all_roles_for_user (session, userName) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      userName: userName
    };
    const args = new Heavy_get_all_roles_for_user_args(params);
    try {
      output.writeMessageBegin('get_all_roles_for_user', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_all_roles_for_user (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_all_roles_for_user_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_all_roles_for_user failed: unknown result');
  }

  get_all_effective_roles_for_user (session, userName) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_all_effective_roles_for_user(session, userName);
    });
  }

  send_get_all_effective_roles_for_user (session, userName) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      userName: userName
    };
    const args = new Heavy_get_all_effective_roles_for_user_args(params);
    try {
      output.writeMessageBegin('get_all_effective_roles_for_user', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_all_effective_roles_for_user (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_all_effective_roles_for_user_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_all_effective_roles_for_user failed: unknown result');
  }

  has_role (session, granteeName, roleName) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_has_role(session, granteeName, roleName);
    });
  }

  send_has_role (session, granteeName, roleName) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      granteeName: granteeName,
      roleName: roleName
    };
    const args = new Heavy_has_role_args(params);
    try {
      output.writeMessageBegin('has_role', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_has_role (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_has_role_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('has_role failed: unknown result');
  }

  has_object_privilege (session, granteeName, ObjectName, objectType, permissions) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_has_object_privilege(session, granteeName, ObjectName, objectType, permissions);
    });
  }

  send_has_object_privilege (session, granteeName, ObjectName, objectType, permissions) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      granteeName: granteeName,
      ObjectName: ObjectName,
      objectType: objectType,
      permissions: permissions
    };
    const args = new Heavy_has_object_privilege_args(params);
    try {
      output.writeMessageBegin('has_object_privilege', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_has_object_privilege (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_has_object_privilege_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('has_object_privilege failed: unknown result');
  }

  set_license_key (session, key, nonce) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_set_license_key(session, key, nonce);
    });
  }

  send_set_license_key (session, key, nonce) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      key: key,
      nonce: nonce
    };
    const args = new Heavy_set_license_key_args(params);
    try {
      output.writeMessageBegin('set_license_key', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_set_license_key (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_set_license_key_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('set_license_key failed: unknown result');
  }

  get_license_claims (session, nonce) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_license_claims(session, nonce);
    });
  }

  send_get_license_claims (session, nonce) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      nonce: nonce
    };
    const args = new Heavy_get_license_claims_args(params);
    try {
      output.writeMessageBegin('get_license_claims', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_license_claims (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_license_claims_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_license_claims failed: unknown result');
  }

  get_device_parameters (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_device_parameters(session);
    });
  }

  send_get_device_parameters (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_device_parameters_args(params);
    try {
      output.writeMessageBegin('get_device_parameters', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_device_parameters (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_device_parameters_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_device_parameters failed: unknown result');
  }

  register_runtime_extension_functions (session, udfs, udtfs, device_ir_map) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_register_runtime_extension_functions(session, udfs, udtfs, device_ir_map);
    });
  }

  send_register_runtime_extension_functions (session, udfs, udtfs, device_ir_map) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      udfs: udfs,
      udtfs: udtfs,
      device_ir_map: device_ir_map
    };
    const args = new Heavy_register_runtime_extension_functions_args(params);
    try {
      output.writeMessageBegin('register_runtime_extension_functions', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_register_runtime_extension_functions (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_register_runtime_extension_functions_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  get_table_function_names (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_table_function_names(session);
    });
  }

  send_get_table_function_names (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_table_function_names_args(params);
    try {
      output.writeMessageBegin('get_table_function_names', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_table_function_names (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_table_function_names_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_table_function_names failed: unknown result');
  }

  get_runtime_table_function_names (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_runtime_table_function_names(session);
    });
  }

  send_get_runtime_table_function_names (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_runtime_table_function_names_args(params);
    try {
      output.writeMessageBegin('get_runtime_table_function_names', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_runtime_table_function_names (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_runtime_table_function_names_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_runtime_table_function_names failed: unknown result');
  }

  get_table_function_details (session, udtf_names) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_table_function_details(session, udtf_names);
    });
  }

  send_get_table_function_details (session, udtf_names) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      udtf_names: udtf_names
    };
    const args = new Heavy_get_table_function_details_args(params);
    try {
      output.writeMessageBegin('get_table_function_details', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_table_function_details (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_table_function_details_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_table_function_details failed: unknown result');
  }

  get_function_names (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_function_names(session);
    });
  }

  send_get_function_names (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_function_names_args(params);
    try {
      output.writeMessageBegin('get_function_names', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_function_names (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_function_names_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_function_names failed: unknown result');
  }

  get_runtime_function_names (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_runtime_function_names(session);
    });
  }

  send_get_runtime_function_names (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Heavy_get_runtime_function_names_args(params);
    try {
      output.writeMessageBegin('get_runtime_function_names', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_runtime_function_names (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_runtime_function_names_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_runtime_function_names failed: unknown result');
  }

  get_function_details (session, udf_names) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_get_function_details(session, udf_names);
    });
  }

  send_get_function_details (session, udf_names) {
    const output = new this.pClass(this.output);
    const params = {
      session: session,
      udf_names: udf_names
    };
    const args = new Heavy_get_function_details_args(params);
    try {
      output.writeMessageBegin('get_function_details', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_get_function_details (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Heavy_get_function_details_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('get_function_details failed: unknown result');
  }
};
const HeavyProcessor = exports.Processor = class HeavyProcessor {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_connect (seqid, input, output) {
    const args = new Heavy_connect_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.connect.length === 3) {
      Promise.resolve(this._handler.connect.bind(this._handler)(
        args.user,
        args.passwd,
        args.dbname
      )).then(result => {
        const result_obj = new Heavy_connect_result({success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_connect_result(err);
          output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.connect(args.user, args.passwd, args.dbname, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_connect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_krb5_connect (seqid, input, output) {
    const args = new Heavy_krb5_connect_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.krb5_connect.length === 2) {
      Promise.resolve(this._handler.krb5_connect.bind(this._handler)(
        args.inputToken,
        args.dbname
      )).then(result => {
        const result_obj = new Heavy_krb5_connect_result({success: result});
        output.writeMessageBegin("krb5_connect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_krb5_connect_result(err);
          output.writeMessageBegin("krb5_connect", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("krb5_connect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.krb5_connect(args.inputToken, args.dbname, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_krb5_connect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("krb5_connect", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("krb5_connect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_disconnect (seqid, input, output) {
    const args = new Heavy_disconnect_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.disconnect.length === 1) {
      Promise.resolve(this._handler.disconnect.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_disconnect_result({success: result});
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_disconnect_result(err);
          output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.disconnect(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_disconnect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_switch_database (seqid, input, output) {
    const args = new Heavy_switch_database_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.switch_database.length === 2) {
      Promise.resolve(this._handler.switch_database.bind(this._handler)(
        args.session,
        args.dbname
      )).then(result => {
        const result_obj = new Heavy_switch_database_result({success: result});
        output.writeMessageBegin("switch_database", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_switch_database_result(err);
          output.writeMessageBegin("switch_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("switch_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.switch_database(args.session, args.dbname, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_switch_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("switch_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("switch_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clone_session (seqid, input, output) {
    const args = new Heavy_clone_session_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clone_session.length === 1) {
      Promise.resolve(this._handler.clone_session.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_clone_session_result({success: result});
        output.writeMessageBegin("clone_session", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_clone_session_result(err);
          output.writeMessageBegin("clone_session", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clone_session", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clone_session(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_clone_session_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clone_session", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clone_session", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_server_status (seqid, input, output) {
    const args = new Heavy_get_server_status_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_server_status.length === 1) {
      Promise.resolve(this._handler.get_server_status.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_server_status_result({success: result});
        output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_server_status_result(err);
          output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_server_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_server_status(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_server_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_server_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_status (seqid, input, output) {
    const args = new Heavy_get_status_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_status.length === 1) {
      Promise.resolve(this._handler.get_status.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_status_result({success: result});
        output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_status_result(err);
          output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_status(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_hardware_info (seqid, input, output) {
    const args = new Heavy_get_hardware_info_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_hardware_info.length === 1) {
      Promise.resolve(this._handler.get_hardware_info.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_hardware_info_result({success: result});
        output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_hardware_info_result(err);
          output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_hardware_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_hardware_info(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_hardware_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_hardware_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_hardware_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_tables (seqid, input, output) {
    const args = new Heavy_get_tables_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_tables.length === 1) {
      Promise.resolve(this._handler.get_tables.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_tables_result({success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_tables_result(err);
          output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_tables(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_tables_for_database (seqid, input, output) {
    const args = new Heavy_get_tables_for_database_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_tables_for_database.length === 2) {
      Promise.resolve(this._handler.get_tables_for_database.bind(this._handler)(
        args.session,
        args.database_name
      )).then(result => {
        const result_obj = new Heavy_get_tables_for_database_result({success: result});
        output.writeMessageBegin("get_tables_for_database", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_tables_for_database_result(err);
          output.writeMessageBegin("get_tables_for_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables_for_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_tables_for_database(args.session, args.database_name, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_tables_for_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_tables_for_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables_for_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_physical_tables (seqid, input, output) {
    const args = new Heavy_get_physical_tables_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_physical_tables.length === 1) {
      Promise.resolve(this._handler.get_physical_tables.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_physical_tables_result({success: result});
        output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_physical_tables_result(err);
          output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_physical_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_physical_tables(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_physical_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_physical_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_physical_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_views (seqid, input, output) {
    const args = new Heavy_get_views_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_views.length === 1) {
      Promise.resolve(this._handler.get_views.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_views_result({success: result});
        output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_views_result(err);
          output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_views", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_views(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_views_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_views", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_views", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_tables_meta (seqid, input, output) {
    const args = new Heavy_get_tables_meta_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_tables_meta.length === 1) {
      Promise.resolve(this._handler.get_tables_meta.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_tables_meta_result({success: result});
        output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_tables_meta_result(err);
          output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables_meta", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_tables_meta(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_tables_meta_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_tables_meta", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables_meta", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_table_details (seqid, input, output) {
    const args = new Heavy_get_table_details_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_table_details.length === 2) {
      Promise.resolve(this._handler.get_table_details.bind(this._handler)(
        args.session,
        args.table_name
      )).then(result => {
        const result_obj = new Heavy_get_table_details_result({success: result});
        output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_table_details_result(err);
          output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_table_details(args.session, args.table_name, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_table_details_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_table_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_table_details_for_database (seqid, input, output) {
    const args = new Heavy_get_table_details_for_database_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_table_details_for_database.length === 3) {
      Promise.resolve(this._handler.get_table_details_for_database.bind(this._handler)(
        args.session,
        args.table_name,
        args.database_name
      )).then(result => {
        const result_obj = new Heavy_get_table_details_for_database_result({success: result});
        output.writeMessageBegin("get_table_details_for_database", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_table_details_for_database_result(err);
          output.writeMessageBegin("get_table_details_for_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_details_for_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_table_details_for_database(args.session, args.table_name, args.database_name, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_table_details_for_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_table_details_for_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_details_for_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_internal_table_details (seqid, input, output) {
    const args = new Heavy_get_internal_table_details_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_internal_table_details.length === 3) {
      Promise.resolve(this._handler.get_internal_table_details.bind(this._handler)(
        args.session,
        args.table_name,
        args.include_system_columns
      )).then(result => {
        const result_obj = new Heavy_get_internal_table_details_result({success: result});
        output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_internal_table_details_result(err);
          output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_internal_table_details(args.session, args.table_name, args.include_system_columns, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_internal_table_details_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_internal_table_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_internal_table_details_for_database (seqid, input, output) {
    const args = new Heavy_get_internal_table_details_for_database_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_internal_table_details_for_database.length === 3) {
      Promise.resolve(this._handler.get_internal_table_details_for_database.bind(this._handler)(
        args.session,
        args.table_name,
        args.database_name
      )).then(result => {
        const result_obj = new Heavy_get_internal_table_details_for_database_result({success: result});
        output.writeMessageBegin("get_internal_table_details_for_database", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_internal_table_details_for_database_result(err);
          output.writeMessageBegin("get_internal_table_details_for_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_internal_table_details_for_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_internal_table_details_for_database(args.session, args.table_name, args.database_name, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_internal_table_details_for_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_internal_table_details_for_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_internal_table_details_for_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_users (seqid, input, output) {
    const args = new Heavy_get_users_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_users.length === 1) {
      Promise.resolve(this._handler.get_users.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_users_result({success: result});
        output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_users_result(err);
          output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_users", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_users(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_users_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_users", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_databases (seqid, input, output) {
    const args = new Heavy_get_databases_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_databases.length === 1) {
      Promise.resolve(this._handler.get_databases.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_databases_result({success: result});
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_databases_result(err);
          output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_databases(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_databases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_version (seqid, input, output) {
    const args = new Heavy_get_version_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_version.length === 0) {
      Promise.resolve(this._handler.get_version.bind(this._handler)(
      )).then(result => {
        const result_obj = new Heavy_get_version_result({success: result});
        output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_version_result(err);
          output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_version", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_version((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_version_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_version", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_start_heap_profile (seqid, input, output) {
    const args = new Heavy_start_heap_profile_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.start_heap_profile.length === 1) {
      Promise.resolve(this._handler.start_heap_profile.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_start_heap_profile_result({success: result});
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_start_heap_profile_result(err);
          output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.start_heap_profile(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_start_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_stop_heap_profile (seqid, input, output) {
    const args = new Heavy_stop_heap_profile_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.stop_heap_profile.length === 1) {
      Promise.resolve(this._handler.stop_heap_profile.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_stop_heap_profile_result({success: result});
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_stop_heap_profile_result(err);
          output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.stop_heap_profile(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_stop_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_heap_profile (seqid, input, output) {
    const args = new Heavy_get_heap_profile_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_heap_profile.length === 1) {
      Promise.resolve(this._handler.get_heap_profile.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_heap_profile_result({success: result});
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_heap_profile_result(err);
          output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_heap_profile(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_heap_profile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_memory (seqid, input, output) {
    const args = new Heavy_get_memory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_memory.length === 2) {
      Promise.resolve(this._handler.get_memory.bind(this._handler)(
        args.session,
        args.memory_level
      )).then(result => {
        const result_obj = new Heavy_get_memory_result({success: result});
        output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_memory_result(err);
          output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_memory(args.session, args.memory_level, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clear_cpu_memory (seqid, input, output) {
    const args = new Heavy_clear_cpu_memory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clear_cpu_memory.length === 1) {
      Promise.resolve(this._handler.clear_cpu_memory.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_clear_cpu_memory_result({success: result});
        output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_clear_cpu_memory_result(err);
          output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clear_cpu_memory(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_clear_cpu_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clear_cpu_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clear_gpu_memory (seqid, input, output) {
    const args = new Heavy_clear_gpu_memory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clear_gpu_memory.length === 1) {
      Promise.resolve(this._handler.clear_gpu_memory.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_clear_gpu_memory_result({success: result});
        output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_clear_gpu_memory_result(err);
          output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clear_gpu_memory(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_clear_gpu_memory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clear_gpu_memory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_set_cur_session (seqid, input, output) {
    const args = new Heavy_set_cur_session_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.set_cur_session.length === 5) {
      Promise.resolve(this._handler.set_cur_session.bind(this._handler)(
        args.parent_session,
        args.leaf_session,
        args.start_time_str,
        args.label,
        args.for_running_query_kernel
      )).then(result => {
        const result_obj = new Heavy_set_cur_session_result({success: result});
        output.writeMessageBegin("set_cur_session", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_set_cur_session_result(err);
          output.writeMessageBegin("set_cur_session", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cur_session", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.set_cur_session(args.parent_session, args.leaf_session, args.start_time_str, args.label, args.for_running_query_kernel, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_set_cur_session_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("set_cur_session", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cur_session", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_invalidate_cur_session (seqid, input, output) {
    const args = new Heavy_invalidate_cur_session_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.invalidate_cur_session.length === 5) {
      Promise.resolve(this._handler.invalidate_cur_session.bind(this._handler)(
        args.parent_session,
        args.leaf_session,
        args.start_time_str,
        args.label,
        args.for_running_query_kernel
      )).then(result => {
        const result_obj = new Heavy_invalidate_cur_session_result({success: result});
        output.writeMessageBegin("invalidate_cur_session", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_invalidate_cur_session_result(err);
          output.writeMessageBegin("invalidate_cur_session", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invalidate_cur_session", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.invalidate_cur_session(args.parent_session, args.leaf_session, args.start_time_str, args.label, args.for_running_query_kernel, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_invalidate_cur_session_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("invalidate_cur_session", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invalidate_cur_session", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_set_table_epoch (seqid, input, output) {
    const args = new Heavy_set_table_epoch_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.set_table_epoch.length === 4) {
      Promise.resolve(this._handler.set_table_epoch.bind(this._handler)(
        args.session,
        args.db_id,
        args.table_id,
        args.new_epoch
      )).then(result => {
        const result_obj = new Heavy_set_table_epoch_result({success: result});
        output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_set_table_epoch_result(err);
          output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.set_table_epoch(args.session, args.db_id, args.table_id, args.new_epoch, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_set_table_epoch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("set_table_epoch", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_set_table_epoch_by_name (seqid, input, output) {
    const args = new Heavy_set_table_epoch_by_name_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.set_table_epoch_by_name.length === 3) {
      Promise.resolve(this._handler.set_table_epoch_by_name.bind(this._handler)(
        args.session,
        args.table_name,
        args.new_epoch
      )).then(result => {
        const result_obj = new Heavy_set_table_epoch_by_name_result({success: result});
        output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_set_table_epoch_by_name_result(err);
          output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.set_table_epoch_by_name(args.session, args.table_name, args.new_epoch, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_set_table_epoch_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_table_epoch (seqid, input, output) {
    const args = new Heavy_get_table_epoch_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_table_epoch.length === 3) {
      Promise.resolve(this._handler.get_table_epoch.bind(this._handler)(
        args.session,
        args.db_id,
        args.table_id
      )).then(result => {
        const result_obj = new Heavy_get_table_epoch_result({success: result});
        output.writeMessageBegin("get_table_epoch", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_table_epoch(args.session, args.db_id, args.table_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new Heavy_get_table_epoch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_table_epoch", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_epoch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_table_epoch_by_name (seqid, input, output) {
    const args = new Heavy_get_table_epoch_by_name_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_table_epoch_by_name.length === 2) {
      Promise.resolve(this._handler.get_table_epoch_by_name.bind(this._handler)(
        args.session,
        args.table_name
      )).then(result => {
        const result_obj = new Heavy_get_table_epoch_by_name_result({success: result});
        output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_table_epoch_by_name(args.session, args.table_name, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new Heavy_get_table_epoch_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_epoch_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_table_epochs (seqid, input, output) {
    const args = new Heavy_get_table_epochs_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_table_epochs.length === 3) {
      Promise.resolve(this._handler.get_table_epochs.bind(this._handler)(
        args.session,
        args.db_id,
        args.table_id
      )).then(result => {
        const result_obj = new Heavy_get_table_epochs_result({success: result});
        output.writeMessageBegin("get_table_epochs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_epochs", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_table_epochs(args.session, args.db_id, args.table_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new Heavy_get_table_epochs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_table_epochs", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_epochs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_set_table_epochs (seqid, input, output) {
    const args = new Heavy_set_table_epochs_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.set_table_epochs.length === 3) {
      Promise.resolve(this._handler.set_table_epochs.bind(this._handler)(
        args.session,
        args.db_id,
        args.table_epochs
      )).then(result => {
        const result_obj = new Heavy_set_table_epochs_result({success: result});
        output.writeMessageBegin("set_table_epochs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_table_epochs", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.set_table_epochs(args.session, args.db_id, args.table_epochs, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new Heavy_set_table_epochs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("set_table_epochs", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_table_epochs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_session_info (seqid, input, output) {
    const args = new Heavy_get_session_info_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_session_info.length === 1) {
      Promise.resolve(this._handler.get_session_info.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_session_info_result({success: result});
        output.writeMessageBegin("get_session_info", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_session_info_result(err);
          output.writeMessageBegin("get_session_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_session_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_session_info(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_session_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_session_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_session_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_queries_info (seqid, input, output) {
    const args = new Heavy_get_queries_info_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_queries_info.length === 1) {
      Promise.resolve(this._handler.get_queries_info.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_queries_info_result({success: result});
        output.writeMessageBegin("get_queries_info", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_queries_info_result(err);
          output.writeMessageBegin("get_queries_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_queries_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_queries_info(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_queries_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_queries_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_queries_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_set_leaf_info (seqid, input, output) {
    const args = new Heavy_set_leaf_info_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.set_leaf_info.length === 2) {
      Promise.resolve(this._handler.set_leaf_info.bind(this._handler)(
        args.session,
        args.leaf_info
      )).then(result => {
        const result_obj = new Heavy_set_leaf_info_result({success: result});
        output.writeMessageBegin("set_leaf_info", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_set_leaf_info_result(err);
          output.writeMessageBegin("set_leaf_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_leaf_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.set_leaf_info(args.session, args.leaf_info, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_set_leaf_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("set_leaf_info", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_leaf_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sql_execute (seqid, input, output) {
    const args = new Heavy_sql_execute_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sql_execute.length === 6) {
      Promise.resolve(this._handler.sql_execute.bind(this._handler)(
        args.session,
        args.query,
        args.column_format,
        args.nonce,
        args.first_n,
        args.at_most_n
      )).then(result => {
        const result_obj = new Heavy_sql_execute_result({success: result});
        output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_sql_execute_result(err);
          output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sql_execute(args.session, args.query, args.column_format, args.nonce, args.first_n, args.at_most_n, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_sql_execute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sql_execute_df (seqid, input, output) {
    const args = new Heavy_sql_execute_df_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sql_execute_df.length === 6) {
      Promise.resolve(this._handler.sql_execute_df.bind(this._handler)(
        args.session,
        args.query,
        args.device_type,
        args.device_id,
        args.first_n,
        args.transport_method
      )).then(result => {
        const result_obj = new Heavy_sql_execute_df_result({success: result});
        output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_sql_execute_df_result(err);
          output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute_df", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sql_execute_df(args.session, args.query, args.device_type, args.device_id, args.first_n, args.transport_method, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_sql_execute_df_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sql_execute_df", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute_df", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sql_execute_gdf (seqid, input, output) {
    const args = new Heavy_sql_execute_gdf_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sql_execute_gdf.length === 4) {
      Promise.resolve(this._handler.sql_execute_gdf.bind(this._handler)(
        args.session,
        args.query,
        args.device_id,
        args.first_n
      )).then(result => {
        const result_obj = new Heavy_sql_execute_gdf_result({success: result});
        output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_sql_execute_gdf_result(err);
          output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sql_execute_gdf(args.session, args.query, args.device_id, args.first_n, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_sql_execute_gdf_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute_gdf", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_deallocate_df (seqid, input, output) {
    const args = new Heavy_deallocate_df_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.deallocate_df.length === 4) {
      Promise.resolve(this._handler.deallocate_df.bind(this._handler)(
        args.session,
        args.df,
        args.device_type,
        args.device_id
      )).then(result => {
        const result_obj = new Heavy_deallocate_df_result({success: result});
        output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_deallocate_df_result(err);
          output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deallocate_df", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.deallocate_df(args.session, args.df, args.device_type, args.device_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_deallocate_df_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("deallocate_df", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deallocate_df", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_interrupt (seqid, input, output) {
    const args = new Heavy_interrupt_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.interrupt.length === 2) {
      Promise.resolve(this._handler.interrupt.bind(this._handler)(
        args.query_session,
        args.interrupt_session
      )).then(result => {
        const result_obj = new Heavy_interrupt_result({success: result});
        output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_interrupt_result(err);
          output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("interrupt", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.interrupt(args.query_session, args.interrupt_session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_interrupt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("interrupt", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("interrupt", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sql_validate (seqid, input, output) {
    const args = new Heavy_sql_validate_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sql_validate.length === 2) {
      Promise.resolve(this._handler.sql_validate.bind(this._handler)(
        args.session,
        args.query
      )).then(result => {
        const result_obj = new Heavy_sql_validate_result({success: result});
        output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_sql_validate_result(err);
          output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_validate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sql_validate(args.session, args.query, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_sql_validate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_validate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_completion_hints (seqid, input, output) {
    const args = new Heavy_get_completion_hints_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_completion_hints.length === 3) {
      Promise.resolve(this._handler.get_completion_hints.bind(this._handler)(
        args.session,
        args.sql,
        args.cursor
      )).then(result => {
        const result_obj = new Heavy_get_completion_hints_result({success: result});
        output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_completion_hints_result(err);
          output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_completion_hints", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_completion_hints(args.session, args.sql, args.cursor, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_completion_hints_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_completion_hints", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_completion_hints", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_set_execution_mode (seqid, input, output) {
    const args = new Heavy_set_execution_mode_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.set_execution_mode.length === 2) {
      Promise.resolve(this._handler.set_execution_mode.bind(this._handler)(
        args.session,
        args.mode
      )).then(result => {
        const result_obj = new Heavy_set_execution_mode_result({success: result});
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_set_execution_mode_result(err);
          output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_execution_mode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.set_execution_mode(args.session, args.mode, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_set_execution_mode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_execution_mode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_render_vega (seqid, input, output) {
    const args = new Heavy_render_vega_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.render_vega.length === 5) {
      Promise.resolve(this._handler.render_vega.bind(this._handler)(
        args.session,
        args.widget_id,
        args.vega_json,
        args.compression_level,
        args.nonce
      )).then(result => {
        const result_obj = new Heavy_render_vega_result({success: result});
        output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_render_vega_result(err);
          output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("render_vega", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.render_vega(args.session, args.widget_id, args.vega_json, args.compression_level, args.nonce, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_render_vega_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("render_vega", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_result_row_for_pixel (seqid, input, output) {
    const args = new Heavy_get_result_row_for_pixel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_result_row_for_pixel.length === 7) {
      Promise.resolve(this._handler.get_result_row_for_pixel.bind(this._handler)(
        args.session,
        args.widget_id,
        args.pixel,
        args.table_col_names,
        args.column_format,
        args.pixelRadius,
        args.nonce
      )).then(result => {
        const result_obj = new Heavy_get_result_row_for_pixel_result({success: result});
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_result_row_for_pixel_result(err);
          output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_result_row_for_pixel(args.session, args.widget_id, args.pixel, args.table_col_names, args.column_format, args.pixelRadius, args.nonce, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_result_row_for_pixel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_create_custom_expression (seqid, input, output) {
    const args = new Heavy_create_custom_expression_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.create_custom_expression.length === 2) {
      Promise.resolve(this._handler.create_custom_expression.bind(this._handler)(
        args.session,
        args.custom_expression
      )).then(result => {
        const result_obj = new Heavy_create_custom_expression_result({success: result});
        output.writeMessageBegin("create_custom_expression", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_create_custom_expression_result(err);
          output.writeMessageBegin("create_custom_expression", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_custom_expression", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.create_custom_expression(args.session, args.custom_expression, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_create_custom_expression_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("create_custom_expression", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_custom_expression", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_custom_expressions (seqid, input, output) {
    const args = new Heavy_get_custom_expressions_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_custom_expressions.length === 1) {
      Promise.resolve(this._handler.get_custom_expressions.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_custom_expressions_result({success: result});
        output.writeMessageBegin("get_custom_expressions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_custom_expressions_result(err);
          output.writeMessageBegin("get_custom_expressions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_custom_expressions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_custom_expressions(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_custom_expressions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_custom_expressions", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_custom_expressions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_update_custom_expression (seqid, input, output) {
    const args = new Heavy_update_custom_expression_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.update_custom_expression.length === 3) {
      Promise.resolve(this._handler.update_custom_expression.bind(this._handler)(
        args.session,
        args.id,
        args.expression_json
      )).then(result => {
        const result_obj = new Heavy_update_custom_expression_result({success: result});
        output.writeMessageBegin("update_custom_expression", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_update_custom_expression_result(err);
          output.writeMessageBegin("update_custom_expression", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("update_custom_expression", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.update_custom_expression(args.session, args.id, args.expression_json, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_update_custom_expression_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("update_custom_expression", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("update_custom_expression", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_delete_custom_expressions (seqid, input, output) {
    const args = new Heavy_delete_custom_expressions_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.delete_custom_expressions.length === 3) {
      Promise.resolve(this._handler.delete_custom_expressions.bind(this._handler)(
        args.session,
        args.custom_expression_ids,
        args.do_soft_delete
      )).then(result => {
        const result_obj = new Heavy_delete_custom_expressions_result({success: result});
        output.writeMessageBegin("delete_custom_expressions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_delete_custom_expressions_result(err);
          output.writeMessageBegin("delete_custom_expressions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_custom_expressions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.delete_custom_expressions(args.session, args.custom_expression_ids, args.do_soft_delete, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_delete_custom_expressions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("delete_custom_expressions", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_custom_expressions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_dashboard (seqid, input, output) {
    const args = new Heavy_get_dashboard_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_dashboard.length === 2) {
      Promise.resolve(this._handler.get_dashboard.bind(this._handler)(
        args.session,
        args.dashboard_id
      )).then(result => {
        const result_obj = new Heavy_get_dashboard_result({success: result});
        output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_dashboard_result(err);
          output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_dashboard(args.session, args.dashboard_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_dashboards (seqid, input, output) {
    const args = new Heavy_get_dashboards_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_dashboards.length === 1) {
      Promise.resolve(this._handler.get_dashboards.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_dashboards_result({success: result});
        output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_dashboards_result(err);
          output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_dashboards(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_create_dashboard (seqid, input, output) {
    const args = new Heavy_create_dashboard_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.create_dashboard.length === 5) {
      Promise.resolve(this._handler.create_dashboard.bind(this._handler)(
        args.session,
        args.dashboard_name,
        args.dashboard_state,
        args.image_hash,
        args.dashboard_metadata
      )).then(result => {
        const result_obj = new Heavy_create_dashboard_result({success: result});
        output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_create_dashboard_result(err);
          output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.create_dashboard(args.session, args.dashboard_name, args.dashboard_state, args.image_hash, args.dashboard_metadata, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_create_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("create_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_replace_dashboard (seqid, input, output) {
    const args = new Heavy_replace_dashboard_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.replace_dashboard.length === 7) {
      Promise.resolve(this._handler.replace_dashboard.bind(this._handler)(
        args.session,
        args.dashboard_id,
        args.dashboard_name,
        args.dashboard_owner,
        args.dashboard_state,
        args.image_hash,
        args.dashboard_metadata
      )).then(result => {
        const result_obj = new Heavy_replace_dashboard_result({success: result});
        output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_replace_dashboard_result(err);
          output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("replace_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.replace_dashboard(args.session, args.dashboard_id, args.dashboard_name, args.dashboard_owner, args.dashboard_state, args.image_hash, args.dashboard_metadata, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_replace_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("replace_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("replace_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_delete_dashboard (seqid, input, output) {
    const args = new Heavy_delete_dashboard_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.delete_dashboard.length === 2) {
      Promise.resolve(this._handler.delete_dashboard.bind(this._handler)(
        args.session,
        args.dashboard_id
      )).then(result => {
        const result_obj = new Heavy_delete_dashboard_result({success: result});
        output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_delete_dashboard_result(err);
          output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.delete_dashboard(args.session, args.dashboard_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_delete_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("delete_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_share_dashboards (seqid, input, output) {
    const args = new Heavy_share_dashboards_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.share_dashboards.length === 4) {
      Promise.resolve(this._handler.share_dashboards.bind(this._handler)(
        args.session,
        args.dashboard_ids,
        args.groups,
        args.permissions
      )).then(result => {
        const result_obj = new Heavy_share_dashboards_result({success: result});
        output.writeMessageBegin("share_dashboards", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_share_dashboards_result(err);
          output.writeMessageBegin("share_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("share_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.share_dashboards(args.session, args.dashboard_ids, args.groups, args.permissions, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_share_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("share_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("share_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_delete_dashboards (seqid, input, output) {
    const args = new Heavy_delete_dashboards_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.delete_dashboards.length === 2) {
      Promise.resolve(this._handler.delete_dashboards.bind(this._handler)(
        args.session,
        args.dashboard_ids
      )).then(result => {
        const result_obj = new Heavy_delete_dashboards_result({success: result});
        output.writeMessageBegin("delete_dashboards", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_delete_dashboards_result(err);
          output.writeMessageBegin("delete_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.delete_dashboards(args.session, args.dashboard_ids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_delete_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("delete_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_share_dashboard (seqid, input, output) {
    const args = new Heavy_share_dashboard_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.share_dashboard.length === 6) {
      Promise.resolve(this._handler.share_dashboard.bind(this._handler)(
        args.session,
        args.dashboard_id,
        args.groups,
        args.objects,
        args.permissions,
        args.grant_role
      )).then(result => {
        const result_obj = new Heavy_share_dashboard_result({success: result});
        output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_share_dashboard_result(err);
          output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("share_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.share_dashboard(args.session, args.dashboard_id, args.groups, args.objects, args.permissions, args.grant_role, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_share_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("share_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("share_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_unshare_dashboard (seqid, input, output) {
    const args = new Heavy_unshare_dashboard_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.unshare_dashboard.length === 5) {
      Promise.resolve(this._handler.unshare_dashboard.bind(this._handler)(
        args.session,
        args.dashboard_id,
        args.groups,
        args.objects,
        args.permissions
      )).then(result => {
        const result_obj = new Heavy_unshare_dashboard_result({success: result});
        output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_unshare_dashboard_result(err);
          output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.unshare_dashboard(args.session, args.dashboard_id, args.groups, args.objects, args.permissions, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_unshare_dashboard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unshare_dashboard", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_unshare_dashboards (seqid, input, output) {
    const args = new Heavy_unshare_dashboards_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.unshare_dashboards.length === 4) {
      Promise.resolve(this._handler.unshare_dashboards.bind(this._handler)(
        args.session,
        args.dashboard_ids,
        args.groups,
        args.permissions
      )).then(result => {
        const result_obj = new Heavy_unshare_dashboards_result({success: result});
        output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_unshare_dashboards_result(err);
          output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.unshare_dashboards(args.session, args.dashboard_ids, args.groups, args.permissions, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_unshare_dashboards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unshare_dashboards", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_dashboard_grantees (seqid, input, output) {
    const args = new Heavy_get_dashboard_grantees_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_dashboard_grantees.length === 2) {
      Promise.resolve(this._handler.get_dashboard_grantees.bind(this._handler)(
        args.session,
        args.dashboard_id
      )).then(result => {
        const result_obj = new Heavy_get_dashboard_grantees_result({success: result});
        output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_dashboard_grantees_result(err);
          output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_dashboard_grantees(args.session, args.dashboard_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_dashboard_grantees_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_dashboard_grantees", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_link_view (seqid, input, output) {
    const args = new Heavy_get_link_view_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_link_view.length === 2) {
      Promise.resolve(this._handler.get_link_view.bind(this._handler)(
        args.session,
        args.link
      )).then(result => {
        const result_obj = new Heavy_get_link_view_result({success: result});
        output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_link_view_result(err);
          output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_link_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_link_view(args.session, args.link, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_link_view_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_link_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_create_link (seqid, input, output) {
    const args = new Heavy_create_link_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.create_link.length === 3) {
      Promise.resolve(this._handler.create_link.bind(this._handler)(
        args.session,
        args.view_state,
        args.view_metadata
      )).then(result => {
        const result_obj = new Heavy_create_link_result({success: result});
        output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_create_link_result(err);
          output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_link", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.create_link(args.session, args.view_state, args.view_metadata, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_create_link_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_link", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_load_table_binary (seqid, input, output) {
    const args = new Heavy_load_table_binary_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.load_table_binary.length === 4) {
      Promise.resolve(this._handler.load_table_binary.bind(this._handler)(
        args.session,
        args.table_name,
        args.rows,
        args.column_names
      )).then(result => {
        const result_obj = new Heavy_load_table_binary_result({success: result});
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_load_table_binary_result(err);
          output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.load_table_binary(args.session, args.table_name, args.rows, args.column_names, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_load_table_binary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_load_table_binary_columnar (seqid, input, output) {
    const args = new Heavy_load_table_binary_columnar_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.load_table_binary_columnar.length === 4) {
      Promise.resolve(this._handler.load_table_binary_columnar.bind(this._handler)(
        args.session,
        args.table_name,
        args.cols,
        args.column_names
      )).then(result => {
        const result_obj = new Heavy_load_table_binary_columnar_result({success: result});
        output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_load_table_binary_columnar_result(err);
          output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.load_table_binary_columnar(args.session, args.table_name, args.cols, args.column_names, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_load_table_binary_columnar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary_columnar", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_load_table_binary_arrow (seqid, input, output) {
    const args = new Heavy_load_table_binary_arrow_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.load_table_binary_arrow.length === 4) {
      Promise.resolve(this._handler.load_table_binary_arrow.bind(this._handler)(
        args.session,
        args.table_name,
        args.arrow_stream,
        args.use_column_names
      )).then(result => {
        const result_obj = new Heavy_load_table_binary_arrow_result({success: result});
        output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_load_table_binary_arrow_result(err);
          output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.load_table_binary_arrow(args.session, args.table_name, args.arrow_stream, args.use_column_names, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_load_table_binary_arrow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary_arrow", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_load_table (seqid, input, output) {
    const args = new Heavy_load_table_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.load_table.length === 4) {
      Promise.resolve(this._handler.load_table.bind(this._handler)(
        args.session,
        args.table_name,
        args.rows,
        args.column_names
      )).then(result => {
        const result_obj = new Heavy_load_table_result({success: result});
        output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_load_table_result(err);
          output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.load_table(args.session, args.table_name, args.rows, args.column_names, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_load_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_detect_column_types (seqid, input, output) {
    const args = new Heavy_detect_column_types_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.detect_column_types.length === 3) {
      Promise.resolve(this._handler.detect_column_types.bind(this._handler)(
        args.session,
        args.file_name,
        args.copy_params
      )).then(result => {
        const result_obj = new Heavy_detect_column_types_result({success: result});
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_detect_column_types_result(err);
          output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("detect_column_types", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.detect_column_types(args.session, args.file_name, args.copy_params, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_detect_column_types_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("detect_column_types", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_create_table (seqid, input, output) {
    const args = new Heavy_create_table_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.create_table.length === 4) {
      Promise.resolve(this._handler.create_table.bind(this._handler)(
        args.session,
        args.table_name,
        args.row_desc,
        args.create_params
      )).then(result => {
        const result_obj = new Heavy_create_table_result({success: result});
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_create_table_result(err);
          output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.create_table(args.session, args.table_name, args.row_desc, args.create_params, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_create_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_import_table (seqid, input, output) {
    const args = new Heavy_import_table_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.import_table.length === 4) {
      Promise.resolve(this._handler.import_table.bind(this._handler)(
        args.session,
        args.table_name,
        args.file_name,
        args.copy_params
      )).then(result => {
        const result_obj = new Heavy_import_table_result({success: result});
        output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_import_table_result(err);
          output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.import_table(args.session, args.table_name, args.file_name, args.copy_params, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_import_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_import_geo_table (seqid, input, output) {
    const args = new Heavy_import_geo_table_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.import_geo_table.length === 6) {
      Promise.resolve(this._handler.import_geo_table.bind(this._handler)(
        args.session,
        args.table_name,
        args.file_name,
        args.copy_params,
        args.row_desc,
        args.create_params
      )).then(result => {
        const result_obj = new Heavy_import_geo_table_result({success: result});
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_import_geo_table_result(err);
          output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_geo_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.import_geo_table(args.session, args.table_name, args.file_name, args.copy_params, args.row_desc, args.create_params, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_import_geo_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_geo_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_import_table_status (seqid, input, output) {
    const args = new Heavy_import_table_status_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.import_table_status.length === 2) {
      Promise.resolve(this._handler.import_table_status.bind(this._handler)(
        args.session,
        args.import_id
      )).then(result => {
        const result_obj = new Heavy_import_table_status_result({success: result});
        output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_import_table_status_result(err);
          output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_table_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.import_table_status(args.session, args.import_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_import_table_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_table_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_first_geo_file_in_archive (seqid, input, output) {
    const args = new Heavy_get_first_geo_file_in_archive_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_first_geo_file_in_archive.length === 3) {
      Promise.resolve(this._handler.get_first_geo_file_in_archive.bind(this._handler)(
        args.session,
        args.archive_path,
        args.copy_params
      )).then(result => {
        const result_obj = new Heavy_get_first_geo_file_in_archive_result({success: result});
        output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_first_geo_file_in_archive_result(err);
          output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_first_geo_file_in_archive(args.session, args.archive_path, args.copy_params, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_first_geo_file_in_archive_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_first_geo_file_in_archive", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_all_files_in_archive (seqid, input, output) {
    const args = new Heavy_get_all_files_in_archive_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_all_files_in_archive.length === 3) {
      Promise.resolve(this._handler.get_all_files_in_archive.bind(this._handler)(
        args.session,
        args.archive_path,
        args.copy_params
      )).then(result => {
        const result_obj = new Heavy_get_all_files_in_archive_result({success: result});
        output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_all_files_in_archive_result(err);
          output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_all_files_in_archive(args.session, args.archive_path, args.copy_params, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_all_files_in_archive_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_files_in_archive", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_layers_in_geo_file (seqid, input, output) {
    const args = new Heavy_get_layers_in_geo_file_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_layers_in_geo_file.length === 3) {
      Promise.resolve(this._handler.get_layers_in_geo_file.bind(this._handler)(
        args.session,
        args.file_name,
        args.copy_params
      )).then(result => {
        const result_obj = new Heavy_get_layers_in_geo_file_result({success: result});
        output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_layers_in_geo_file_result(err);
          output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_layers_in_geo_file(args.session, args.file_name, args.copy_params, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_layers_in_geo_file_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_layers_in_geo_file", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_query_get_outer_fragment_count (seqid, input, output) {
    const args = new Heavy_query_get_outer_fragment_count_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.query_get_outer_fragment_count.length === 2) {
      Promise.resolve(this._handler.query_get_outer_fragment_count.bind(this._handler)(
        args.session,
        args.query
      )).then(result => {
        const result_obj = new Heavy_query_get_outer_fragment_count_result({success: result});
        output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_query_get_outer_fragment_count_result(err);
          output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.query_get_outer_fragment_count(args.session, args.query, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_query_get_outer_fragment_count_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("query_get_outer_fragment_count", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_check_table_consistency (seqid, input, output) {
    const args = new Heavy_check_table_consistency_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.check_table_consistency.length === 2) {
      Promise.resolve(this._handler.check_table_consistency.bind(this._handler)(
        args.session,
        args.table_id
      )).then(result => {
        const result_obj = new Heavy_check_table_consistency_result({success: result});
        output.writeMessageBegin("check_table_consistency", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_check_table_consistency_result(err);
          output.writeMessageBegin("check_table_consistency", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("check_table_consistency", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.check_table_consistency(args.session, args.table_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_check_table_consistency_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("check_table_consistency", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("check_table_consistency", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_start_query (seqid, input, output) {
    const args = new Heavy_start_query_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.start_query.length === 6) {
      Promise.resolve(this._handler.start_query.bind(this._handler)(
        args.leaf_session,
        args.parent_session,
        args.query_ra,
        args.start_time_str,
        args.just_explain,
        args.outer_fragment_indices
      )).then(result => {
        const result_obj = new Heavy_start_query_result({success: result});
        output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_start_query_result(err);
          output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.start_query(args.leaf_session, args.parent_session, args.query_ra, args.start_time_str, args.just_explain, args.outer_fragment_indices, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_start_query_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_execute_query_step (seqid, input, output) {
    const args = new Heavy_execute_query_step_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.execute_query_step.length === 3) {
      Promise.resolve(this._handler.execute_query_step.bind(this._handler)(
        args.pending_query,
        args.subquery_id,
        args.start_time_str
      )).then(result => {
        const result_obj = new Heavy_execute_query_step_result({success: result});
        output.writeMessageBegin("execute_query_step", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_execute_query_step_result(err);
          output.writeMessageBegin("execute_query_step", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("execute_query_step", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.execute_query_step(args.pending_query, args.subquery_id, args.start_time_str, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_execute_query_step_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("execute_query_step", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("execute_query_step", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_broadcast_serialized_rows (seqid, input, output) {
    const args = new Heavy_broadcast_serialized_rows_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.broadcast_serialized_rows.length === 5) {
      Promise.resolve(this._handler.broadcast_serialized_rows.bind(this._handler)(
        args.serialized_rows,
        args.row_desc,
        args.query_id,
        args.subquery_id,
        args.is_final_subquery_result
      )).then(result => {
        const result_obj = new Heavy_broadcast_serialized_rows_result({success: result});
        output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_broadcast_serialized_rows_result(err);
          output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.broadcast_serialized_rows(args.serialized_rows, args.row_desc, args.query_id, args.subquery_id, args.is_final_subquery_result, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_broadcast_serialized_rows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("broadcast_serialized_rows", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_start_render_query (seqid, input, output) {
    const args = new Heavy_start_render_query_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.start_render_query.length === 4) {
      Promise.resolve(this._handler.start_render_query.bind(this._handler)(
        args.session,
        args.widget_id,
        args.node_idx,
        args.vega_json
      )).then(result => {
        const result_obj = new Heavy_start_render_query_result({success: result});
        output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_start_render_query_result(err);
          output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_render_query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.start_render_query(args.session, args.widget_id, args.node_idx, args.vega_json, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_start_render_query_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("start_render_query", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_render_query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_execute_next_render_step (seqid, input, output) {
    const args = new Heavy_execute_next_render_step_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.execute_next_render_step.length === 2) {
      Promise.resolve(this._handler.execute_next_render_step.bind(this._handler)(
        args.pending_render,
        args.merged_data
      )).then(result => {
        const result_obj = new Heavy_execute_next_render_step_result({success: result});
        output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_execute_next_render_step_result(err);
          output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.execute_next_render_step(args.pending_render, args.merged_data, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_execute_next_render_step_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("execute_next_render_step", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_insert_data (seqid, input, output) {
    const args = new Heavy_insert_data_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.insert_data.length === 2) {
      Promise.resolve(this._handler.insert_data.bind(this._handler)(
        args.session,
        args.insert_data
      )).then(result => {
        const result_obj = new Heavy_insert_data_result({success: result});
        output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_insert_data_result(err);
          output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insert_data", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.insert_data(args.session, args.insert_data, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_insert_data_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("insert_data", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insert_data", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_insert_chunks (seqid, input, output) {
    const args = new Heavy_insert_chunks_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.insert_chunks.length === 2) {
      Promise.resolve(this._handler.insert_chunks.bind(this._handler)(
        args.session,
        args.insert_chunks
      )).then(result => {
        const result_obj = new Heavy_insert_chunks_result({success: result});
        output.writeMessageBegin("insert_chunks", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_insert_chunks_result(err);
          output.writeMessageBegin("insert_chunks", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insert_chunks", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.insert_chunks(args.session, args.insert_chunks, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_insert_chunks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("insert_chunks", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insert_chunks", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_checkpoint (seqid, input, output) {
    const args = new Heavy_checkpoint_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.checkpoint.length === 2) {
      Promise.resolve(this._handler.checkpoint.bind(this._handler)(
        args.session,
        args.table_id
      )).then(result => {
        const result_obj = new Heavy_checkpoint_result({success: result});
        output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_checkpoint_result(err);
          output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkpoint", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.checkpoint(args.session, args.table_id, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_checkpoint_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("checkpoint", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkpoint", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_roles (seqid, input, output) {
    const args = new Heavy_get_roles_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_roles.length === 1) {
      Promise.resolve(this._handler.get_roles.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_roles_result({success: result});
        output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_roles_result(err);
          output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_roles", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_roles(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_roles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_roles", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_roles", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_db_objects_for_grantee (seqid, input, output) {
    const args = new Heavy_get_db_objects_for_grantee_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_db_objects_for_grantee.length === 2) {
      Promise.resolve(this._handler.get_db_objects_for_grantee.bind(this._handler)(
        args.session,
        args.roleName
      )).then(result => {
        const result_obj = new Heavy_get_db_objects_for_grantee_result({success: result});
        output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_db_objects_for_grantee_result(err);
          output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_db_objects_for_grantee(args.session, args.roleName, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_db_objects_for_grantee_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_db_objects_for_grantee", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_db_object_privs (seqid, input, output) {
    const args = new Heavy_get_db_object_privs_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_db_object_privs.length === 3) {
      Promise.resolve(this._handler.get_db_object_privs.bind(this._handler)(
        args.session,
        args.objectName,
        args.type
      )).then(result => {
        const result_obj = new Heavy_get_db_object_privs_result({success: result});
        output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_db_object_privs_result(err);
          output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_db_object_privs(args.session, args.objectName, args.type, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_db_object_privs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_db_object_privs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_all_roles_for_user (seqid, input, output) {
    const args = new Heavy_get_all_roles_for_user_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_all_roles_for_user.length === 2) {
      Promise.resolve(this._handler.get_all_roles_for_user.bind(this._handler)(
        args.session,
        args.userName
      )).then(result => {
        const result_obj = new Heavy_get_all_roles_for_user_result({success: result});
        output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_all_roles_for_user_result(err);
          output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_all_roles_for_user(args.session, args.userName, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_all_roles_for_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_roles_for_user", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_all_effective_roles_for_user (seqid, input, output) {
    const args = new Heavy_get_all_effective_roles_for_user_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_all_effective_roles_for_user.length === 2) {
      Promise.resolve(this._handler.get_all_effective_roles_for_user.bind(this._handler)(
        args.session,
        args.userName
      )).then(result => {
        const result_obj = new Heavy_get_all_effective_roles_for_user_result({success: result});
        output.writeMessageBegin("get_all_effective_roles_for_user", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_all_effective_roles_for_user_result(err);
          output.writeMessageBegin("get_all_effective_roles_for_user", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_effective_roles_for_user", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_all_effective_roles_for_user(args.session, args.userName, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_all_effective_roles_for_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_all_effective_roles_for_user", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_effective_roles_for_user", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_has_role (seqid, input, output) {
    const args = new Heavy_has_role_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.has_role.length === 3) {
      Promise.resolve(this._handler.has_role.bind(this._handler)(
        args.session,
        args.granteeName,
        args.roleName
      )).then(result => {
        const result_obj = new Heavy_has_role_result({success: result});
        output.writeMessageBegin("has_role", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_has_role_result(err);
          output.writeMessageBegin("has_role", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("has_role", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.has_role(args.session, args.granteeName, args.roleName, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_has_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("has_role", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("has_role", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_has_object_privilege (seqid, input, output) {
    const args = new Heavy_has_object_privilege_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.has_object_privilege.length === 5) {
      Promise.resolve(this._handler.has_object_privilege.bind(this._handler)(
        args.session,
        args.granteeName,
        args.ObjectName,
        args.objectType,
        args.permissions
      )).then(result => {
        const result_obj = new Heavy_has_object_privilege_result({success: result});
        output.writeMessageBegin("has_object_privilege", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_has_object_privilege_result(err);
          output.writeMessageBegin("has_object_privilege", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("has_object_privilege", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.has_object_privilege(args.session, args.granteeName, args.ObjectName, args.objectType, args.permissions, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_has_object_privilege_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("has_object_privilege", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("has_object_privilege", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_set_license_key (seqid, input, output) {
    const args = new Heavy_set_license_key_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.set_license_key.length === 3) {
      Promise.resolve(this._handler.set_license_key.bind(this._handler)(
        args.session,
        args.key,
        args.nonce
      )).then(result => {
        const result_obj = new Heavy_set_license_key_result({success: result});
        output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_set_license_key_result(err);
          output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_license_key", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.set_license_key(args.session, args.key, args.nonce, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_set_license_key_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("set_license_key", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_license_key", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_license_claims (seqid, input, output) {
    const args = new Heavy_get_license_claims_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_license_claims.length === 2) {
      Promise.resolve(this._handler.get_license_claims.bind(this._handler)(
        args.session,
        args.nonce
      )).then(result => {
        const result_obj = new Heavy_get_license_claims_result({success: result});
        output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_license_claims_result(err);
          output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_license_claims", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_license_claims(args.session, args.nonce, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_license_claims_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_license_claims", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_license_claims", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_device_parameters (seqid, input, output) {
    const args = new Heavy_get_device_parameters_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_device_parameters.length === 1) {
      Promise.resolve(this._handler.get_device_parameters.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_device_parameters_result({success: result});
        output.writeMessageBegin("get_device_parameters", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_device_parameters_result(err);
          output.writeMessageBegin("get_device_parameters", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_device_parameters", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_device_parameters(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_device_parameters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_device_parameters", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_device_parameters", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_register_runtime_extension_functions (seqid, input, output) {
    const args = new Heavy_register_runtime_extension_functions_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.register_runtime_extension_functions.length === 4) {
      Promise.resolve(this._handler.register_runtime_extension_functions.bind(this._handler)(
        args.session,
        args.udfs,
        args.udtfs,
        args.device_ir_map
      )).then(result => {
        const result_obj = new Heavy_register_runtime_extension_functions_result({success: result});
        output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_register_runtime_extension_functions_result(err);
          output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.register_runtime_extension_functions(args.session, args.udfs, args.udtfs, args.device_ir_map, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_register_runtime_extension_functions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("register_runtime_extension_functions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_table_function_names (seqid, input, output) {
    const args = new Heavy_get_table_function_names_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_table_function_names.length === 1) {
      Promise.resolve(this._handler.get_table_function_names.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_table_function_names_result({success: result});
        output.writeMessageBegin("get_table_function_names", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_table_function_names_result(err);
          output.writeMessageBegin("get_table_function_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_function_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_table_function_names(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_table_function_names_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_table_function_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_function_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_runtime_table_function_names (seqid, input, output) {
    const args = new Heavy_get_runtime_table_function_names_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_runtime_table_function_names.length === 1) {
      Promise.resolve(this._handler.get_runtime_table_function_names.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_runtime_table_function_names_result({success: result});
        output.writeMessageBegin("get_runtime_table_function_names", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_runtime_table_function_names_result(err);
          output.writeMessageBegin("get_runtime_table_function_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_runtime_table_function_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_runtime_table_function_names(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_runtime_table_function_names_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_runtime_table_function_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_runtime_table_function_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_table_function_details (seqid, input, output) {
    const args = new Heavy_get_table_function_details_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_table_function_details.length === 2) {
      Promise.resolve(this._handler.get_table_function_details.bind(this._handler)(
        args.session,
        args.udtf_names
      )).then(result => {
        const result_obj = new Heavy_get_table_function_details_result({success: result});
        output.writeMessageBegin("get_table_function_details", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_table_function_details_result(err);
          output.writeMessageBegin("get_table_function_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_function_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_table_function_details(args.session, args.udtf_names, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_table_function_details_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_table_function_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_function_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_function_names (seqid, input, output) {
    const args = new Heavy_get_function_names_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_function_names.length === 1) {
      Promise.resolve(this._handler.get_function_names.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_function_names_result({success: result});
        output.writeMessageBegin("get_function_names", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_function_names_result(err);
          output.writeMessageBegin("get_function_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_function_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_function_names(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_function_names_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_function_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_function_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_runtime_function_names (seqid, input, output) {
    const args = new Heavy_get_runtime_function_names_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_runtime_function_names.length === 1) {
      Promise.resolve(this._handler.get_runtime_function_names.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Heavy_get_runtime_function_names_result({success: result});
        output.writeMessageBegin("get_runtime_function_names", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_runtime_function_names_result(err);
          output.writeMessageBegin("get_runtime_function_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_runtime_function_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_runtime_function_names(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_runtime_function_names_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_runtime_function_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_runtime_function_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_get_function_details (seqid, input, output) {
    const args = new Heavy_get_function_details_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_function_details.length === 2) {
      Promise.resolve(this._handler.get_function_details.bind(this._handler)(
        args.session,
        args.udf_names
      )).then(result => {
        const result_obj = new Heavy_get_function_details_result({success: result});
        output.writeMessageBegin("get_function_details", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TDBException) {
          result = new Heavy_get_function_details_result(err);
          output.writeMessageBegin("get_function_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_function_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.get_function_details(args.session, args.udf_names, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDBException) {
          result_obj = new Heavy_get_function_details_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("get_function_details", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_function_details", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
